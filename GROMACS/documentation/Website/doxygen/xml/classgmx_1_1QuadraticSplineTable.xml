<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1QuadraticSplineTable" kind="class" prot="public">
    <compoundname>gmx::QuadraticSplineTable</compoundname>
    <includes local="no">gromacs/tables/quadraticsplinetable.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classgmx_1_1QuadraticSplineTable_1a083be62fff0b69591534137f12a8ebdc" prot="public" static="yes" mutable="no">
        <type>const <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>const real gmx::QuadraticSplineTable::defaultTolerance</definition>
        <argsstring></argsstring>
        <name>defaultTolerance</name>
        <initializer>= 10.0 *  1.19209290e-07F</initializer>
        <briefdescription>
<para>Default tolerance for tables is 10*GMX_FLOAT_EPS. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Even for double precision builds we set the tolerance to one order of magnitude above the single precision epsilon. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="209" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgmx_1_1QuadraticSplineTable_1ac6d9951373e9552b86faff83da2569c9" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t gmx::QuadraticSplineTable::numFuncInTable_</definition>
        <argsstring></argsstring>
        <name>numFuncInTable_</name>
        <briefdescription>
<para>Number of separate tabluated functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="714" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1QuadraticSplineTable_1ad9171492687e45f95a42ff757416143f" prot="private" static="no" mutable="no">
        <type>std::pair&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref>, <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt;</type>
        <definition>std::pair&lt;real, real&gt; gmx::QuadraticSplineTable::range_</definition>
        <argsstring></argsstring>
        <name>range_</name>
        <briefdescription>
<para>Range for which table evaluation is allowed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="715" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="715" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1QuadraticSplineTable_1a9bb04b930c59af82486c7b4faebfa411" prot="private" static="no" mutable="no">
        <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>real gmx::QuadraticSplineTable::tableScale_</definition>
        <argsstring></argsstring>
        <name>tableScale_</name>
        <briefdescription>
<para>Table scale (inverse of spacing between points) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="716" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="716" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1QuadraticSplineTable_1a279ef228006abe88ae122dcd639ce0e3" prot="private" static="no" mutable="no">
        <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>real gmx::QuadraticSplineTable::halfSpacing_</definition>
        <argsstring></argsstring>
        <name>halfSpacing_</name>
        <briefdescription>
<para>0.5*spacing (used for DDFZ table data) </para>        </briefdescription>
        <detaileddescription>
<para>Derivative values only, with the third-derivative subtraction described in the class documentation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="717" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="717" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1QuadraticSplineTable_1a8747e910c8bc9fc6a83ecb6a5f3b7737" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt;</type>
        <definition>std::vector&lt;real&gt; gmx::QuadraticSplineTable::derivativeMultiTableData_</definition>
        <argsstring></argsstring>
        <name>derivativeMultiTableData_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="720" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="720" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1QuadraticSplineTable_1afcedce960f8fcf1ce878bd967f75a82b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref>, <ref refid="namespacegmx_1ac3ca6adcfda5170180c2140c7b2f9d47" kindref="member">AlignedAllocator</ref>&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt; &gt;</type>
        <definition>std::vector&lt;real, AlignedAllocator&lt;real&gt; &gt; gmx::QuadraticSplineTable::ddfzMultiTableData_</definition>
        <argsstring></argsstring>
        <name>ddfzMultiTableData_</name>
        <briefdescription>
<para>Combined derivative, difference to next derivative, value, and zero. </para>        </briefdescription>
        <detaileddescription>
<para>For table point i, this vector contains the four values:<itemizedlist>
<listitem><para>derivative[i]</para></listitem><listitem><para>(derivative[i+1]-derivative[i])</para></listitem><listitem><para>value[i]</para></listitem><listitem><para>0.0</para></listitem></itemizedlist>
</para><para>For the derivative terms we have subtracted the third-derivative term described in the main class documentation.</para><para>This is typically more efficient than the individual tables, in particular when using SIMD. The result should be identical outside the class, so this is merely an internal implementation optimization. However, to allow aligned SIMD loads we need to use an aligned allocator for this container. We occasionally abbreviate this data as DDFZ. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="739" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="739" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgmx_1_1QuadraticSplineTable_1a296e783b7e6a57073fdf1de372e7ebe8" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::QuadraticSplineTable::rangeCheck</definition>
        <argsstring>(T r) const </argsstring>
        <name>rangeCheck</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Change that function value falls inside range when debugging. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Lookup argument floating-point type, typically SimdReal or real. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Lookup argument to test</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Debug</parametername>
</parameternamelist>
<parameterdescription>
<para>builds will throw <ref refid="classgmx_1_1RangeError" kindref="compound">gmx::RangeError</ref> for values that are larger than the upper limit of the range, or smaller than 0. We allow the table to be called with arguments between 0 and the lower limit of the range, since this might in theory occur once-in-a-blue-moon with some algorithms. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="191" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="191" bodyend="200"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1QuadraticSplineTable_1aa3ef42c8c3116e4c0c2d76f6000d420f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::QuadraticSplineTable::QuadraticSplineTable</definition>
        <argsstring>(std::initializer_list&lt; AnalyticalSplineTableInput &gt; analyticalInputList, const std::pair&lt; real, real &gt; &amp;range, real tolerance=defaultTolerance)</argsstring>
        <name>QuadraticSplineTable</name>
        <param>
          <type>std::initializer_list&lt; <ref refid="structgmx_1_1AnalyticalSplineTableInput" kindref="compound">AnalyticalSplineTableInput</ref> &gt;</type>
          <declname>analyticalInputList</declname>
        </param>
        <param>
          <type>const std::pair&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref>, <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="classgmx_1_1QuadraticSplineTable_1a083be62fff0b69591534137f12a8ebdc" kindref="member">defaultTolerance</ref></defval>
        </param>
        <briefdescription>
<para>Initialize table data from function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>analyticalInputList</parametername>
</parameternamelist>
<parameterdescription>
<para>Initializer list with one or more functions to tabulate, specified as pairs containing analytical functions and their derivatives. The function will also be called for values smaller than the lower limit of the range, but we avoid calling it for 0.0 if that value is not included in the range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Range over which the function will be tabulated. Constructor will throw <ref refid="classgmx_1_1APIError" kindref="compound">gmx::APIError</ref> for negative values. Due to the way the numerical derivative evaluation depends on machine precision internally, this range must be at least 0.001, or the constructor throws <ref refid="classgmx_1_1APIError" kindref="compound">gmx::APIError</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested accuracy of the table. This will be used to calculate the required internal spacing. If this cannot be achieved (for instance because the table would require too much memory) the constructor will throw <ref refid="classgmx_1_1ToleranceError" kindref="compound">gmx::ToleranceError</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The functions are always defined in double precision to avoid losing accuracy when constructing tables.</para><simplesectsep/><para>Since we fill the table for values below range.first, you can achieve a smaller table by using a smaller range where the tolerance has to be met, and accept that a few function calls below range.first do not quite reach the tolerance.</para></simplesect>
<simplesect kind="warning"><para>For efficiency reasons (since this code is used in some inner (kernels), we always allocate memory and calculate table indices for the complete interval [0,range.second], although the data will not be valid outside the definition range to avoid calling the function there. This means you should <emphasis>not</emphasis> use this class to tabulate functions for small ranges very far away from zero, since you would both waste a huge amount of memory and incur truncation errors when calculating the index.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1ToleranceError" kindref="compound">gmx::ToleranceError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the requested tolerance cannot be achieved, and <ref refid="classgmx_1_1APIError" kindref="compound">gmx::APIError</ref> for other incorrect input. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="249" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.cpp" bodystart="272" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1QuadraticSplineTable_1aeaf780740ebdde69b08b195c3f2c295c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::QuadraticSplineTable::QuadraticSplineTable</definition>
        <argsstring>(std::initializer_list&lt; NumericalSplineTableInput &gt; numericalInputList, const std::pair&lt; real, real &gt; &amp;range, real tolerance=defaultTolerance)</argsstring>
        <name>QuadraticSplineTable</name>
        <param>
          <type>std::initializer_list&lt; <ref refid="structgmx_1_1NumericalSplineTableInput" kindref="compound">NumericalSplineTableInput</ref> &gt;</type>
          <declname>numericalInputList</declname>
        </param>
        <param>
          <type>const std::pair&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref>, <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="classgmx_1_1QuadraticSplineTable_1a083be62fff0b69591534137f12a8ebdc" kindref="member">defaultTolerance</ref></defval>
        </param>
        <briefdescription>
<para>Initialize table data from tabulated values and derivatives. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numericalInputList</parametername>
</parameternamelist>
<parameterdescription>
<para>Initializer list with one or more functions to tabulate, specified as pairs containing containing vectors for the function values and their derivatives. Data points are separated by the spacing parameter, starting from 0. Values below the lower limit of the range will be used to attempt defining the table, but we avoid using index 0 unless 0.0 is included in the range. Some extra points beyond range.second are required to re-interpolate values, so add some margin. The constructor will throw <ref refid="classgmx_1_1APIError" kindref="compound">gmx::APIError</ref> if the input vectors are too short to cover the requested range (and they must always be at least five points). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Range over which the function will be tabulated. Constructor will throw <ref refid="classgmx_1_1APIError" kindref="compound">gmx::APIError</ref> for negative values, or if the value/derivative vector does not cover the range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested accuracy of the table in the range. This will be used to calculate the required internal spacing and possibly re-interpolate. The constructor will throw <ref refid="classgmx_1_1ToleranceError" kindref="compound">gmx::ToleranceError</ref> if the input spacing is too coarse to achieve this accuracy.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The input data vectors are always double precision to avoid losing accuracy when constructing tables.</para><simplesectsep/><para>Since we fill the table for values below range.first, you can achieve a smaller table by using a smaller range where the tolerance has to be met, and accept that a few function calls below range.first do not quite reach the tolerance.</para></simplesect>
<simplesect kind="warning"><para>For efficiency reasons (since this code is used in some inner (kernels), we always allocate memory and calculate table indices for the complete interval [0,range.second], although the data will not be valid outside the definition range to avoid calling the function there. This means you should <emphasis>not</emphasis> use this class to tabulate functions for small ranges very far away from zero, since you would both waste a huge amount of memory and incur truncation errors when calculating the index. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="293" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.cpp" bodystart="361" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1QuadraticSplineTable_1a328a542489ad87968351c04e8ee7ad0f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>numFuncInTable</declname>
            <defname>numFuncInTable</defname>
            <defval>1</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex</declname>
            <defname>funcIndex</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::QuadraticSplineTable::evaluateFunctionAndDerivative</definition>
        <argsstring>(T r, T *functionValue, T *derivativeValue) const </argsstring>
        <name>evaluateFunctionAndDerivative</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>functionValue</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>derivativeValue</declname>
        </param>
        <briefdescription>
<para>Evaluate both function and derivative, single table function. </para>        </briefdescription>
        <detaileddescription>
<para>This is a templated method where the template can be either real or SimdReal.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>numFuncInTable</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of separate functions in table, default is 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of function to evaluate in table, default is 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type (SimdReal or real) of lookup and result </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Points for which to evaluate function and derivative </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">functionValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Function value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">derivativeValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Function derivative</para></parameterdescription>
</parameteritem>
</parameterlist>
For debug builds we assert that the input values fall in the range specified when constructing the table. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="318" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="318" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1QuadraticSplineTable_1a7dc9bf2aec612577a12f13721fbdf8ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>numFuncInTable</declname>
            <defname>numFuncInTable</defname>
            <defval>1</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex</declname>
            <defname>funcIndex</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::QuadraticSplineTable::evaluateFunction</definition>
        <argsstring>(T r, T *functionValue) const </argsstring>
        <name>evaluateFunction</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>functionValue</declname>
        </param>
        <briefdescription>
<para>Evaluate function value only, single table function. </para>        </briefdescription>
        <detaileddescription>
<para>This is a templated method where the template can be either real or SimdReal.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>numFuncInTable</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of separate functions in table, default is 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of function to evaluate in table, default is 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type (SimdReal or real) of lookup and result </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Points for which to evaluate function value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">functionValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Function value</para></parameterdescription>
</parameteritem>
</parameterlist>
For debug builds we assert that the input values fall in the range specified when constructing the table. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="358" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="358" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1QuadraticSplineTable_1a4462bd007a070f4003ce71c3db4114fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>numFuncInTable</declname>
            <defname>numFuncInTable</defname>
            <defval>1</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex</declname>
            <defname>funcIndex</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::QuadraticSplineTable::evaluateDerivative</definition>
        <argsstring>(T r, T *derivativeValue) const </argsstring>
        <name>evaluateDerivative</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>derivativeValue</declname>
        </param>
        <briefdescription>
<para>Evaluate function derivative only, single table function. </para>        </briefdescription>
        <detaileddescription>
<para>This is a templated method where the template can be either real or SimdReal.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>numFuncInTable</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of separate functions in table, default is 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of function to evaluate in table, default is 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type (SimdReal or real) of lookup and result </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Points for which to evaluate function derivative </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">derivativeValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Function derivative</para></parameterdescription>
</parameteritem>
</parameterlist>
For debug builds we assert that the input values fall in the range specified when constructing the table. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="381" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="381" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1QuadraticSplineTable_1a1ad77fe5b5f9ce1351aca0ce5204bfc8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>numFuncInTable</declname>
            <defname>numFuncInTable</defname>
            <defval>2</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex0</declname>
            <defname>funcIndex0</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex1</declname>
            <defname>funcIndex1</defname>
            <defval>1</defval>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::QuadraticSplineTable::evaluateFunctionAndDerivative</definition>
        <argsstring>(T r, T *functionValue1, T *derivativeValue1, T *functionValue2, T *derivativeValue2) const </argsstring>
        <name>evaluateFunctionAndDerivative</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>functionValue1</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>derivativeValue1</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>functionValue2</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>derivativeValue2</declname>
        </param>
        <briefdescription>
<para>Evaluate both function and derivative, two table functions. </para>        </briefdescription>
        <detaileddescription>
<para>This is a templated method where the template can be either real or SimdReal.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>numFuncInTable</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of separate functions in table, default is 2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex0</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of 1st function to evaluate in table, default is 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex1</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of 2nd function to evaluate in table, default is 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type (SimdReal or real) of lookup and result </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Points for which to evaluate function and derivative </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">functionValue1</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated value for first function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">derivativeValue1</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated derivative for first function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">functionValue2</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated value for second function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">derivativeValue2</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated derivative for second function</para></parameterdescription>
</parameteritem>
</parameterlist>
For debug builds we assert that the input values fall in the range specified when constructing the table. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="434" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="434" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1QuadraticSplineTable_1ad74bfa216309b437e3ee13ca6102a775" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>numFuncInTable</declname>
            <defname>numFuncInTable</defname>
            <defval>2</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex0</declname>
            <defname>funcIndex0</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex1</declname>
            <defname>funcIndex1</defname>
            <defval>1</defval>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::QuadraticSplineTable::evaluateFunction</definition>
        <argsstring>(T r, T *functionValue1, T *functionValue2) const </argsstring>
        <name>evaluateFunction</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>functionValue1</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>functionValue2</declname>
        </param>
        <briefdescription>
<para>Evaluate function value only, two table functions. </para>        </briefdescription>
        <detaileddescription>
<para>This is a templated method where the template can be either real or SimdReal.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>numFuncInTable</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of separate functions in table, default is 2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex0</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of 1st function to evaluate in table, default is 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex1</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of 2nd function to evaluate in table, default is 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type (SimdReal or real) of lookup and result </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Points for which to evaluate function value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">functionValue1</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated value for first function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">functionValue2</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated value for second function</para></parameterdescription>
</parameteritem>
</parameterlist>
For debug builds we assert that the input values fall in the range specified when constructing the table. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="482" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="482" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1QuadraticSplineTable_1a4d695533ce0f32a8fa0e59f1963b61f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>numFuncInTable</declname>
            <defname>numFuncInTable</defname>
            <defval>2</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex0</declname>
            <defname>funcIndex0</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex1</declname>
            <defname>funcIndex1</defname>
            <defval>1</defval>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::QuadraticSplineTable::evaluateDerivative</definition>
        <argsstring>(T r, T *derivativeValue1, T *derivativeValue2) const </argsstring>
        <name>evaluateDerivative</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>derivativeValue1</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>derivativeValue2</declname>
        </param>
        <briefdescription>
<para>Evaluate function derivative only, two table functions. </para>        </briefdescription>
        <detaileddescription>
<para>This is a templated method where the template can be either real or SimdReal.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>numFuncInTable</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of separate functions in table, default is 2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex0</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of 1st function to evaluate in table, default is 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex1</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of 2nd function to evaluate in table, default is 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type (SimdReal or real) of lookup and result </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Points for which to evaluate function derivative </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">derivativeValue1</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated derivative for first function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">derivativeValue2</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated derivative for second function</para></parameterdescription>
</parameteritem>
</parameterlist>
For debug builds we assert that the input values fall in the range specified when constructing the table. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="509" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="509" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1QuadraticSplineTable_1ad7e2cfe615963eb94746a7c4e1970ac9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>numFuncInTable</declname>
            <defname>numFuncInTable</defname>
            <defval>3</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex0</declname>
            <defname>funcIndex0</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex1</declname>
            <defname>funcIndex1</defname>
            <defval>1</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex2</declname>
            <defname>funcIndex2</defname>
            <defval>2</defval>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::QuadraticSplineTable::evaluateFunctionAndDerivative</definition>
        <argsstring>(T r, T *functionValue1, T *derivativeValue1, T *functionValue2, T *derivativeValue2, T *functionValue3, T *derivativeValue3) const </argsstring>
        <name>evaluateFunctionAndDerivative</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>functionValue1</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>derivativeValue1</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>functionValue2</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>derivativeValue2</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>functionValue3</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>derivativeValue3</declname>
        </param>
        <briefdescription>
<para>Evaluate both function and derivative, three table functions. </para>        </briefdescription>
        <detaileddescription>
<para>This is a templated method where the template can be either real or SimdReal.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>numFuncInTable</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of separate functions in table, default is 3 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex0</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of 1st function to evaluate in table, default is 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex1</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of 2nd function to evaluate in table, default is 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex2</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of 3rd function to evaluate in table, default is 2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type (SimdReal or real) of lookup and result </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Points for which to evaluate function and derivative </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">functionValue1</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated value for first function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">derivativeValue1</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated derivative for first function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">functionValue2</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated value for second function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">derivativeValue2</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated derivative for second function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">functionValue3</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated value for third function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">derivativeValue3</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated derivative for third function</para></parameterdescription>
</parameteritem>
</parameterlist>
For debug builds we assert that the input values fall in the range specified when constructing the table. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="571" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="571" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1QuadraticSplineTable_1ab6aab3cc097e08d5b089122aeda1a8ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>numFuncInTable</declname>
            <defname>numFuncInTable</defname>
            <defval>3</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex0</declname>
            <defname>funcIndex0</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex1</declname>
            <defname>funcIndex1</defname>
            <defval>1</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex2</declname>
            <defname>funcIndex2</defname>
            <defval>2</defval>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::QuadraticSplineTable::evaluateFunction</definition>
        <argsstring>(T r, T *functionValue1, T *functionValue2, T *functionValue3) const </argsstring>
        <name>evaluateFunction</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>functionValue1</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>functionValue2</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>functionValue3</declname>
        </param>
        <briefdescription>
<para>Evaluate function value only, three table functions. </para>        </briefdescription>
        <detaileddescription>
<para>This is a templated method where the template can be either real or SimdReal.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>numFuncInTable</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of separate functions in table, default is 3 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex0</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of 1st function to evaluate in table, default is 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex1</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of 2nd function to evaluate in table, default is 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex2</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of 3rd function to evaluate in table, default is 2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type (SimdReal or real) of lookup and result </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Points for which to evaluate function value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">functionValue1</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated value for first function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">functionValue2</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated value for second function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">functionValue3</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated value for third function</para></parameterdescription>
</parameteritem>
</parameterlist>
For debug builds we assert that the input values fall in the range specified when constructing the table. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="627" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="627" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1QuadraticSplineTable_1a00550273072529b7773c3c597cab24ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>numFuncInTable</declname>
            <defname>numFuncInTable</defname>
            <defval>3</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex0</declname>
            <defname>funcIndex0</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex1</declname>
            <defname>funcIndex1</defname>
            <defval>1</defval>
          </param>
          <param>
            <type>int</type>
            <declname>funcIndex2</declname>
            <defname>funcIndex2</defname>
            <defval>2</defval>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::QuadraticSplineTable::evaluateDerivative</definition>
        <argsstring>(T r, T *derivativeValue1, T *derivativeValue2, T *derivativeValue3) const </argsstring>
        <name>evaluateDerivative</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>derivativeValue1</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>derivativeValue2</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>derivativeValue3</declname>
        </param>
        <briefdescription>
<para>Evaluate function derivative only, three table functions. </para>        </briefdescription>
        <detaileddescription>
<para>This is a templated method where the template can be either real or SimdReal.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>numFuncInTable</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of separate functions in table, default is 3 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex0</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of 1st function to evaluate in table, default is 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex1</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of 2nd function to evaluate in table, default is 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcIndex2</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of 3rd function to evaluate in table, default is 2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type (SimdReal or real) of lookup and result </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Points for which to evaluate function derivative </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">derivativeValue1</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated derivative for first function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">derivativeValue2</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated derivative for second function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">derivativeValue3</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolated derivative for third function</para></parameterdescription>
</parameteritem>
</parameterlist>
For debug builds we assert that the input values fall in the range specified when constructing the table. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="658" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="658" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1QuadraticSplineTable_1ac933fb042db3f5e0cf608b635bc38757" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>real gmx::QuadraticSplineTable::tableSpacing</definition>
        <argsstring>() const </argsstring>
        <name>tableSpacing</name>
        <briefdescription>
<para>Return the table spacing (distance between points) </para>        </briefdescription>
        <detaileddescription>
<para>You should never have to use this for normal code, but due to the way tables are constructed internally we need this in the unit tests to check relative tolerances over each interval.</para><para><simplesect kind="return"><para>table spacing. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="710" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="710" bodyend="710"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Quadratic spline interpolation table. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal /> This class interpolates a function specified either as an analytical expression or from user-provided table data.</para><para>At initialization, you provide the reference function of vectors as a list of tuples that contain a brief name, the function, and derivative for each function to tabulate. To create a table with two functions this initializer list can for instance look like <verbatim>{ {&quot;LJ6&quot;, lj6Func, lj6Der}, {&quot;LJ12&quot;, lj12Func, lj12Der} }
</verbatim></para><para>The names are only used so exceptions during initialization can be traced to a specific table.</para><para>When interpolating, there are methods to interpolate either 1, 2, or 3 functions in one go. By default these interpolation routines will operate on tables with the same number of functions as specified in the interpolation method (debug builds check that this is consistent with the table). However, it is also possible to use optional template parameters that specify the total number of functions in a table, and what function index to interpolate. For instance, to interpolate the derivative of the second function (i.e., index 1) in a multi-function-table with three functions in total, you can write <verbatim>table.evaluateDerivative&lt;3,1&gt;(x,&amp;der);
</verbatim></para><para>Here too, debug builds will check that the template parameters are consistent with the table.</para><para>The table data is internally adjusted to guarantee that the interpolated derivative is the true derivative of the interpolated potential, which is important to avoid systematic errors for the common case when the derivative is concave/convex in the entire interval. We do this by expressing the difference in the function value at a small offset h relative to a reference value in position 0 with a forward Taylor series expanded around 0, and then doing the opposite of expressing difference in the function at position 0 relative to a reference value in position h when using a backward Taylor expansion:</para><para><formula id="51">\begin{eqnarray*} \Delta V &amp; = &amp; hV&apos;(0) + \frac{1}{2} h^2 V&apos;&apos;(0) + \frac{1}{6} h^3 V&apos;&apos;&apos;(0) + O(h^4) \\ \Delta V &amp; = &amp; hV&apos;(h) - \frac{1}{2} h^2 V&apos;&apos;(h) + \frac{1}{6} h^3 V&apos;&apos;&apos;(h) + O(h^4) \end{eqnarray*}</formula></para><para>Summing the equations leads to</para><para><formula id="52">\[ 2 \Delta V = h(V&apos;(0) + V&apos;(h)) + \frac{1}{2} h^2 (V&apos;&apos;(0)-V&apos;&apos;(h)) + \frac{1}{6}h^3(V&apos;&apos;&apos;(0)+V&apos;&apos;&apos;(h)) + O(h^4) \]</formula></para><para>To make the second term symmetric too, we can replace it with the average of the Taylor expansion at 0 and h (i.e., using the third derivative). This gives</para><para><formula id="53">\[ 2 \Delta V = h(V&apos;(0) + V&apos;(h)) - \frac{1}{12} h^3 (V&apos;&apos;&apos;(0)+V&apos;&apos;&apos;(h)) + O(h^4) \]</formula></para><para>Thus, if we replace the derivative in the internal quadratic table data with</para><para><formula id="54">\[ V&apos; - \frac{1}{12}h^2 V&apos;&apos;&apos; \]</formula></para><para>we will cancel the h^3 term in the error. This will make the integral of the forces match the potential much better (The h^4 term actually disappears, so when summing over 1/h points the remaining error will be O(h^4).</para><para>While it is possible to create tables only from function values (i.e., no derivatives), it is recommended to provide derivatives for higher accuracy and to avoid issues with numerical differentiation. Note that the table input should be smooth, i.e. it should not contain noise e.g. from an (iterative) Boltzmann inversion procedure - you have been warned.</para><para><simplesect kind="note"><para>This class is responsible for fundamental interpolation of any function, which might or might not correspond to a potential. For this reason both input and output derivatives are proper function derivatives, and we do not swap any signs to get forces directly from the table.</para><simplesectsep/><para>There will be a small additional accuracy loss from the internal operation where we calculate the epsilon offset from the nearest table point, since the integer part we subtract can get large in those cases. The absolute such error both in the function and derivative value will be roughly f&apos;&apos;*x*GMX_REAL_EPS, where x is the argument and f&apos;&apos; the second derivative. While this is technically possible to solve with extended precision arithmetics, that would introduce extra instructions in some highly performance-sensitive code parts. For typical GROMACS interaction functions the derivatives will decay faster than the potential, which means it will never play any role. For other functions it will only cause a small increase in the relative error for arguments where the magnitude of the function or derivative is very small. Since we typically sum several results in GROMACS, this should never show up in any real cases, and for this reason we choose not to do the extended precision arithmetics.</para><simplesectsep/><para>These routines are not suitable for table ranges starting far away from zero, since we allocate memory and calculate indices starting from range zero for efficiency reasons. </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" line="176" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/quadraticsplinetable.h" bodystart="175" bodyend="743"/>
    <listofallmembers>
      <member refid="classgmx_1_1QuadraticSplineTable_1afcedce960f8fcf1ce878bd967f75a82b" prot="private" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>ddfzMultiTableData_</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1a083be62fff0b69591534137f12a8ebdc" prot="public" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>defaultTolerance</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1a8747e910c8bc9fc6a83ecb6a5f3b7737" prot="private" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>derivativeMultiTableData_</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1a4462bd007a070f4003ce71c3db4114fa" prot="public" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>evaluateDerivative</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1a4d695533ce0f32a8fa0e59f1963b61f8" prot="public" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>evaluateDerivative</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1a00550273072529b7773c3c597cab24ed" prot="public" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>evaluateDerivative</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1a7dc9bf2aec612577a12f13721fbdf8ca" prot="public" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>evaluateFunction</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1ad74bfa216309b437e3ee13ca6102a775" prot="public" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>evaluateFunction</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1ab6aab3cc097e08d5b089122aeda1a8ed" prot="public" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>evaluateFunction</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1a328a542489ad87968351c04e8ee7ad0f" prot="public" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>evaluateFunctionAndDerivative</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1a1ad77fe5b5f9ce1351aca0ce5204bfc8" prot="public" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>evaluateFunctionAndDerivative</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1ad7e2cfe615963eb94746a7c4e1970ac9" prot="public" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>evaluateFunctionAndDerivative</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1a279ef228006abe88ae122dcd639ce0e3" prot="private" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>halfSpacing_</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1ac6d9951373e9552b86faff83da2569c9" prot="private" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>numFuncInTable_</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1aa3ef42c8c3116e4c0c2d76f6000d420f" prot="public" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>QuadraticSplineTable</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1aeaf780740ebdde69b08b195c3f2c295c" prot="public" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>QuadraticSplineTable</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1ad9171492687e45f95a42ff757416143f" prot="private" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>range_</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1a296e783b7e6a57073fdf1de372e7ebe8" prot="private" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>rangeCheck</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1a9bb04b930c59af82486c7b4faebfa411" prot="private" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>tableScale_</name></member>
      <member refid="classgmx_1_1QuadraticSplineTable_1ac933fb042db3f5e0cf608b635bc38757" prot="public" virt="non-virtual"><scope>gmx::QuadraticSplineTable</scope><name>tableSpacing</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
