<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1test_1_1IFileMatcher" kind="class" prot="public" abstract="yes">
    <compoundname>gmx::test::IFileMatcher</compoundname>
    <derivedcompoundref refid="classgmx_1_1test_1_1anonymous__namespace_02filematchers_8cpp_03_1_1TextFileMatcher" prot="public" virt="non-virtual">gmx::test::anonymous_namespace{filematchers.cpp}::TextFileMatcher</derivedcompoundref>
    <includes local="no">testutils/filematchers.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1test_1_1IFileMatcher_1a9caa84c6a09176a7614a930d36daebae" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>gmx::test::IFileMatcher::~IFileMatcher</definition>
        <argsstring>()</argsstring>
        <name>~IFileMatcher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/filematchers.h" line="78" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/filematchers.cpp" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1IFileMatcher_1a07f0a63071505e63beb658705acd6f41" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gmx::test::IFileMatcher::checkFile</definition>
        <argsstring>(const std::string &amp;path, TestReferenceChecker *checker)=0</argsstring>
        <name>checkFile</name>
        <reimplementedby refid="classgmx_1_1test_1_1anonymous__namespace_02filematchers_8cpp_03_1_1TextFileMatcher_1a8d55076d6b74b821e0d84b6813016735">checkFile</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1test_1_1TestReferenceChecker" kindref="compound">TestReferenceChecker</ref> *</type>
          <declname>checker</declname>
        </param>
        <briefdescription>
<para>Matches contents of a file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1Path" kindref="compound">Path</ref> to the file to match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>checker</parametername>
</parameternamelist>
<parameterdescription>
<para>Checker to use for matching.</para></parameterdescription>
</parameteritem>
</parameterlist>
The method can change the state of the provided checker (e.g., by changing the default tolerance). The caller is responsible of providing a checker where such state changes do not matter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/filematchers.h" line="91" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a file matcher, matching file contents against reference (or other) data. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal /> Typical pattern of declaring such matchers is to<itemizedlist>
<listitem><para>Create a factory that implements <ref refid="classgmx_1_1test_1_1IFileMatcherSettings" kindref="compound">IFileMatcherSettings</ref>,</para></listitem><listitem><para>Make that factory provide any necessary parameters that the matcher needs, using a &quot;named parameter&quot; idiom (see <ref refid="classgmx_1_1test_1_1XvgMatch" kindref="compound">XvgMatch</ref> for an example), and</para></listitem><listitem><para>Make the factory create and return an instance of an internal implementation class that implements <ref refid="classgmx_1_1test_1_1IFileMatcher" kindref="compound">IFileMatcher</ref> and provides the actual matching logic.</para></listitem></itemizedlist>
</para><para>Any method that then wants to accept a matcher can accept a <ref refid="classgmx_1_1test_1_1IFileMatcherSettings" kindref="compound">IFileMatcherSettings</ref>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3055">
        <label>gmx::test::IFileMatcher</label>
        <link refid="classgmx_1_1test_1_1IFileMatcher"/>
      </node>
      <node id="3056">
        <label>gmx::test::anonymous_namespace{filematchers.cpp}::TextFileMatcher</label>
        <link refid="classgmx_1_1test_1_1anonymous__namespace_02filematchers_8cpp_03_1_1TextFileMatcher"/>
        <childnode refid="3055" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/filematchers.h" line="76" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/filematchers.h" bodystart="75" bodyend="93"/>
    <listofallmembers>
      <member refid="classgmx_1_1test_1_1IFileMatcher_1a07f0a63071505e63beb658705acd6f41" prot="public" virt="pure-virtual"><scope>gmx::test::IFileMatcher</scope><name>checkFile</name></member>
      <member refid="classgmx_1_1test_1_1IFileMatcher_1a9caa84c6a09176a7614a930d36daebae" prot="public" virt="virtual"><scope>gmx::test::IFileMatcher</scope><name>~IFileMatcher</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
