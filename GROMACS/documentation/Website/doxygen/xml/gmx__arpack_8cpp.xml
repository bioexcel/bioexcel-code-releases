<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="gmx__arpack_8cpp" kind="file">
    <compoundname>gmx_arpack.cpp</compoundname>
    <includes refid="gmxpre_8h" local="yes">gmxpre.h</includes>
    <includes refid="gmx__arpack_8h" local="yes">gmx_arpack.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstring</includes>
    <includes refid="basedefinitions_8h" local="yes">gromacs/utility/basedefinitions.h</includes>
    <includes refid="real_8h" local="yes">gromacs/utility/real.h</includes>
    <includes refid="gmx__blas_8h" local="yes">gmx_blas.h</includes>
    <includes refid="gmx__lapack_8h" local="yes">gmx_lapack.h</includes>
    <incdepgraph>
      <node id="12825">
        <label>stdint.h</label>
      </node>
      <node id="12828">
        <label>gmx_blas.h</label>
        <link refid="gmx__blas_8h"/>
      </node>
      <node id="12818">
        <label>src/gromacs/linearalgebra/gmx_arpack.cpp</label>
        <link refid="gmx_arpack.cpp"/>
        <childnode refid="12819" relation="include">
        </childnode>
        <childnode refid="12820" relation="include">
        </childnode>
        <childnode refid="12822" relation="include">
        </childnode>
        <childnode refid="12823" relation="include">
        </childnode>
        <childnode refid="12824" relation="include">
        </childnode>
        <childnode refid="12827" relation="include">
        </childnode>
        <childnode refid="12828" relation="include">
        </childnode>
        <childnode refid="12829" relation="include">
        </childnode>
      </node>
      <node id="12822">
        <label>cmath</label>
      </node>
      <node id="12820">
        <label>gmx_arpack.h</label>
        <link refid="gmx__arpack_8h"/>
        <childnode refid="12821" relation="include">
        </childnode>
      </node>
      <node id="12827">
        <label>gromacs/utility/real.h</label>
        <link refid="real_8h"/>
      </node>
      <node id="12819">
        <label>gmxpre.h</label>
        <link refid="gmxpre_8h"/>
      </node>
      <node id="12824">
        <label>gromacs/utility/basedefinitions.h</label>
        <link refid="basedefinitions_8h"/>
        <childnode refid="12825" relation="include">
        </childnode>
        <childnode refid="12826" relation="include">
        </childnode>
      </node>
      <node id="12829">
        <label>gmx_lapack.h</label>
        <link refid="gmx__lapack_8h"/>
      </node>
      <node id="12821">
        <label>config.h</label>
      </node>
      <node id="12823">
        <label>cstring</label>
      </node>
      <node id="12826">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="gmx__arpack_8cpp_1ad3d96028fb322fa3e94203b69c8dbcfa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dstqrb</definition>
        <argsstring>(int *n, double *d__, double *e, double *z__, double *work, int *info)</argsstring>
        <name>dstqrb</name>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>d__</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>z__</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="50" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="50" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1ab91216c7f65d98df687bdf00928a5e71" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dgetv0</definition>
        <argsstring>(int *ido, const char *bmat, int *itry, int *initv, int *n, int *j, double *v, int *ldv, double *resid, double *rnorm, int *ipntr, double *workd, int *iwork, int *ierr)</argsstring>
        <name>dgetv0</name>
        <param>
          <type>int *</type>
          <declname>ido</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>bmat</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>itry</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>initv</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>j</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldv</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rnorm</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ipntr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>workd</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ierr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="513" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="513" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1a2ba51691b762f73ade9035cd2c05a075" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dsapps</definition>
        <argsstring>(int *n, int *kev, int *np, double *shift, double *v, int *ldv, double *h__, int *ldh, double *resid, double *q, int *ldq, double *workd)</argsstring>
        <name>dsapps</name>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>kev</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>np</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldv</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>h__</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldh</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldq</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>workd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="684" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="684" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1a233e44c0dbb525a2e90b05914433c6c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dsortr</definition>
        <argsstring>(const char *which, int *apply, int *n, double *x1, double *x2)</argsstring>
        <name>dsortr</name>
        <param>
          <type>const char *</type>
          <declname>which</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>apply</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="917" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="917" bodyend="1112"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1a85ec25e3e354262766fae588f36edc34" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dsesrt</definition>
        <argsstring>(const char *which, int *apply, int *n, double *x, int *na, double *a, int *lda)</argsstring>
        <name>dsesrt</name>
        <param>
          <type>const char *</type>
          <declname>which</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>apply</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>na</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="1118" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="1118" bodyend="1313"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1a90d21534a24974a7c2f86781e4acc815" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dsgets</definition>
        <argsstring>(int *ishift, const char *which, int *kev, int *np, double *ritz, double *bounds, double *shifts)</argsstring>
        <name>dsgets</name>
        <param>
          <type>int *</type>
          <declname>ishift</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>which</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>kev</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>np</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ritz</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bounds</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>shifts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="1319" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="1319" bodyend="1368"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1a33ef6aa78fa2a6e22fd4e5d1770dc2c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dsconv</definition>
        <argsstring>(int *n, double *ritz, double *bounds, double *tol, int *nconv)</argsstring>
        <name>dsconv</name>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ritz</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bounds</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tol</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nconv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="1373" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="1373" bodyend="1407"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1af14a6244f178b464889a36a2cf5253cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dseigt</definition>
        <argsstring>(double *rnorm, int *n, double *h__, int *ldh, double *eig, double *bounds, double *workl, int *ierr)</argsstring>
        <name>dseigt</name>
        <param>
          <type>double *</type>
          <declname>rnorm</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>h__</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldh</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>eig</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bounds</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>workl</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ierr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="1411" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="1411" bodyend="1452"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1adda6120ce9e1bf5ffe9867c4bd2690eb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dsaitr</definition>
        <argsstring>(int *ido, const char *bmat, int *n, int *k, int *np, int *mode, double *resid, double *rnorm, double *v, int *ldv, double *h__, int *ldh, int *ipntr, double *workd, int *iwork, int *info)</argsstring>
        <name>dsaitr</name>
        <param>
          <type>int *</type>
          <declname>ido</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>bmat</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>np</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rnorm</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldv</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>h__</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldh</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ipntr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>workd</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="1458" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="1458" bodyend="1802"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1a9f0dae450473e306bcaa0128f5db130f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dsaup2</definition>
        <argsstring>(int *ido, const char *bmat, int *n, const char *which, int *nev, int *np, double *tol, double *resid, int *mode, int *iupd, int *ishift, int *mxiter, double *v, int *ldv, double *h__, int *ldh, double *ritz, double *bounds, double *q, int *ldq, double *workl, int *ipntr, double *workd, int *iwork, int *info)</argsstring>
        <name>dsaup2</name>
        <param>
          <type>int *</type>
          <declname>ido</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>bmat</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>which</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nev</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>np</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tol</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iupd</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ishift</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mxiter</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldv</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>h__</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldh</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ritz</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bounds</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldq</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>workl</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ipntr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>workd</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="1810" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="1810" bodyend="2200"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1aede26434dc7f4a1ae472eca9d5b7bf65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dsaupd</definition>
        <argsstring>(int *ido, const char *bmat, int *n, const char *which, int *nev, double *tol, double *resid, int *ncv, double *v, int *ldv, int *iparam, int *ipntr, double *workd, int *iwork, double *workl, int *lworkl, int *info)</argsstring>
        <name>dsaupd</name>
        <param>
          <type>int *</type>
          <declname>ido</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>bmat</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>which</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nev</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tol</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ncv</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldv</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iparam</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ipntr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>workd</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iwork</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>workl</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lworkl</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Implicitly Restarted Arnoldi Iteration, double precision. </para>        </briefdescription>
        <detaileddescription>
<para>Reverse communication interface for the Implicitly Restarted Arnoldi Iteration. For symmetric problems this reduces to a variant of the Lanczos method. See the ARPACK site for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ido</parametername>
</parameternamelist>
<parameterdescription>
<para>Reverse communication flag. Set to 0 first time. Upon return with ido=-1 or ido=1 you should calculate Y=A*X and recall the routine. Return with ido=2 means Y=B*X should be calculated. ipntr[0] is the pointer in workd for X, ipntr[1] is the index for Y. Return with ido=99 means it finished. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bmat</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;I&apos; for standard eigenproblem, &apos;G&apos; for generalized. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Order of eigenproblem. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>Which eigenvalues to calculate. &apos;LA&apos; for largest algebraic, &apos;SA&apos; for smallest algebraic, &apos;LM&apos; for largest magnitude, &apos;SM&apos; for smallest magnitude, and finally &apos;BE&apos; (both ends) to calculate half from each end of the spectrum. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nev</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of eigenvalues to calculate. 0&lt;nev&lt;n. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tol</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance. Machine precision of it is 0. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resid</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional starting residual vector at input if info=1, otherwise a random one is used. Final residual vector on return. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncv</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in matrix v. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>N*NCV matrix. V contain the Lanczos basis vectors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ldv</parametername>
</parameternamelist>
<parameterdescription>
<para>Leading dimension of v. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iparam</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer array, size 11. Same contents as arpack. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ipntr</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer array, size 11. Points to starting locations in the workd/workl arrays. Same contents as arpack. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workd</parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision work array, length 3*n+4. Provide the same array for all calls, and don&apos;t touch it. IMPORTANT: This is 4 units larger than standard ARPACK! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iwork</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer work array, size 80. Provide the same array for all calls, and don&apos;t touch it. IMPORTANT: New argument compared to standard ARPACK! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workl</parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision work array, length lwork. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lworkl</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the work array workl. Must be at least ncv*(ncv+8) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Set info to 0 to use random initial residual vector, or to 1 if you provide a one. On output, info=0 means normal exit, 1 that max number of iterations was reached, and 3 that no shifts could be applied. Negative numbers correspond to errors in the arguments provided. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="2205" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="2205" bodyend="2375"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1a7d5f46d490dc48b69a2924a31db9bb46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dseupd</definition>
        <argsstring>(int *rvec, const char *howmny, int *select, double *d__, double *z__, int *ldz, double *sigma, const char *bmat, int *n, const char *which, int *nev, double *tol, double *resid, int *ncv, double *v, int *ldv, int *iparam, int *ipntr, double *workd, double *workl, int *lworkl, int *info)</argsstring>
        <name>dseupd</name>
        <param>
          <type>int *</type>
          <declname>rvec</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>howmny</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>select</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>d</declname>
          <defname>d__</defname>
        </param>
        <param>
          <type>double *</type>
          <declname>z</declname>
          <defname>z__</defname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldz</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>bmat</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>which</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nev</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tol</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ncv</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldv</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iparam</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ipntr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>workd</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>workl</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lworkl</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Get eigenvalues/vectors after Arnoldi iteration, double prec. </para>        </briefdescription>
        <detaileddescription>
<para>See the ARPACK site for details. You must have finished the interative part with <ref refid="gmx__arpack_8h_1aede26434dc7f4a1ae472eca9d5b7bf65" kindref="member">dsaupd()</ref> before calling this function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rvec</parametername>
</parameternamelist>
<parameterdescription>
<para>1 if you want eigenvectors, 0 if not. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>howmny</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;A&apos; if you want all nvec vectors, &apos;S&apos; if you provide a subset selection in select[]. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>select</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer array, dimension nev. Indices of the eigenvectors to calculate. Fortran code means we start counting on 1. This array must be given even in howmny is &apos;A&apos;. (Arpack documentation is wrong on this). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision array, length nev. Eigenvalues. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision array, n*nev. Eigenvectors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ldz</parametername>
</parameternamelist>
<parameterdescription>
<para>Leading dimension of z. Normally n. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Shift if iparam[6] is 3,4, or 5. Ignored otherwise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bmat</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1aede26434dc7f4a1ae472eca9d5b7bf65" kindref="member">dsaupd()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1aede26434dc7f4a1ae472eca9d5b7bf65" kindref="member">dsaupd()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1aede26434dc7f4a1ae472eca9d5b7bf65" kindref="member">dsaupd()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nev</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1aede26434dc7f4a1ae472eca9d5b7bf65" kindref="member">dsaupd()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tol</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1aede26434dc7f4a1ae472eca9d5b7bf65" kindref="member">dsaupd()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resid</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1aede26434dc7f4a1ae472eca9d5b7bf65" kindref="member">dsaupd()</ref> The array must not be touched between the two function calls! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncv</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1aede26434dc7f4a1ae472eca9d5b7bf65" kindref="member">dsaupd()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1aede26434dc7f4a1ae472eca9d5b7bf65" kindref="member">dsaupd()</ref> The array must not be touched between the two function calls! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ldv</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1aede26434dc7f4a1ae472eca9d5b7bf65" kindref="member">dsaupd()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iparam</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1aede26434dc7f4a1ae472eca9d5b7bf65" kindref="member">dsaupd()</ref> The array must not be touched between the two function calls! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ipntr</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1aede26434dc7f4a1ae472eca9d5b7bf65" kindref="member">dsaupd()</ref> The array must not be touched between the two function calls! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workd</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1aede26434dc7f4a1ae472eca9d5b7bf65" kindref="member">dsaupd()</ref> The array must not be touched between the two function calls! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workl</parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision work array, length lwork. The array must not be touched between the two function calls! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lworkl</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1aede26434dc7f4a1ae472eca9d5b7bf65" kindref="member">dsaupd()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1aede26434dc7f4a1ae472eca9d5b7bf65" kindref="member">dsaupd()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="2380" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="2380" bodyend="2903"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1afa19a7f73bd288133254e5471069160a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sstqrb</definition>
        <argsstring>(int *n, float *d__, float *e, float *z__, float *work, int *info)</argsstring>
        <name>sstqrb</name>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d__</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>z__</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="2913" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="2913" bodyend="3373"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1a8d9f149097ab177e1b59a0f82d8d8e0d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sgetv0</definition>
        <argsstring>(int *ido, const char *bmat, int *itry, int *initv, int *n, int *j, float *v, int *ldv, float *resid, float *rnorm, int *ipntr, float *workd, int *iwork, int *ierr)</argsstring>
        <name>sgetv0</name>
        <param>
          <type>int *</type>
          <declname>ido</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>bmat</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>itry</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>initv</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>j</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldv</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>rnorm</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ipntr</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>workd</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ierr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="3376" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="3376" bodyend="3540"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1a990b9945b26383edafdb70ff7bb5b519" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ssapps</definition>
        <argsstring>(int *n, int *kev, int *np, float *shift, float *v, int *ldv, float *h__, int *ldh, float *resid, float *q, int *ldq, float *workd)</argsstring>
        <name>ssapps</name>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>kev</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>np</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldv</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>h__</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldh</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldq</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>workd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="3547" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="3547" bodyend="3775"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1a77954fe86430e16328258f27a48b8220" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ssortr</definition>
        <argsstring>(const char *which, int *apply, int *n, float *x1, float *x2)</argsstring>
        <name>ssortr</name>
        <param>
          <type>const char *</type>
          <declname>which</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>apply</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="3780" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="3780" bodyend="3975"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1acbfc2366d4caa0374f99751e7675f3b0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ssesrt</definition>
        <argsstring>(const char *which, int *apply, int *n, float *x, int *na, float *a, int *lda)</argsstring>
        <name>ssesrt</name>
        <param>
          <type>const char *</type>
          <declname>which</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>apply</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>na</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="3981" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="3981" bodyend="4176"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1a6e9e8edca25f586525e622e220fee33e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ssgets</definition>
        <argsstring>(int *ishift, const char *which, int *kev, int *np, float *ritz, float *bounds, float *shifts)</argsstring>
        <name>ssgets</name>
        <param>
          <type>int *</type>
          <declname>ishift</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>which</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>kev</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>np</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>ritz</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>bounds</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>shifts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="4182" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="4182" bodyend="4231"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1aeb0c22c76875b172e6f4ee956b76062b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ssconv</definition>
        <argsstring>(int *n, float *ritz, float *bounds, float *tol, int *nconv)</argsstring>
        <name>ssconv</name>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>ritz</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>bounds</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>tol</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nconv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="4236" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="4236" bodyend="4270"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1a8f7c675ca1e274f142424f8ef84715ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sseigt</definition>
        <argsstring>(float *rnorm, int *n, float *h__, int *ldh, float *eig, float *bounds, float *workl, int *ierr)</argsstring>
        <name>sseigt</name>
        <param>
          <type>float *</type>
          <declname>rnorm</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>h__</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldh</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>eig</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>bounds</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>workl</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ierr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="4274" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="4274" bodyend="4315"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1ad670fdf069d06080ce57c9a4cd817ade" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ssaitr</definition>
        <argsstring>(int *ido, const char *bmat, int *n, int *k, int *np, int *mode, float *resid, float *rnorm, float *v, int *ldv, float *h__, int *ldh, int *ipntr, float *workd, int *iwork, int *info)</argsstring>
        <name>ssaitr</name>
        <param>
          <type>int *</type>
          <declname>ido</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>bmat</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>np</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>rnorm</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldv</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>h__</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldh</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ipntr</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>workd</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="4321" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="4321" bodyend="4665"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1ae5fee7bfc1e1b01d6c4ab00aa649b57f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ssaup2</definition>
        <argsstring>(int *ido, const char *bmat, int *n, const char *which, int *nev, int *np, float *tol, float *resid, int *mode, int *iupd, int *ishift, int *mxiter, float *v, int *ldv, float *h__, int *ldh, float *ritz, float *bounds, float *q, int *ldq, float *workl, int *ipntr, float *workd, int *iwork, int *info)</argsstring>
        <name>ssaup2</name>
        <param>
          <type>int *</type>
          <declname>ido</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>bmat</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>which</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nev</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>np</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>tol</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iupd</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ishift</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mxiter</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldv</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>h__</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldh</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>ritz</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>bounds</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldq</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>workl</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ipntr</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>workd</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="4673" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="4673" bodyend="5064"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1adcff1a34c0aa4423d0e2922192724cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssaupd</definition>
        <argsstring>(int *ido, const char *bmat, int *n, const char *which, int *nev, float *tol, float *resid, int *ncv, float *v, int *ldv, int *iparam, int *ipntr, float *workd, int *iwork, float *workl, int *lworkl, int *info)</argsstring>
        <name>ssaupd</name>
        <param>
          <type>int *</type>
          <declname>ido</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>bmat</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>which</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nev</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>tol</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ncv</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldv</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iparam</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ipntr</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>workd</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iwork</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>workl</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lworkl</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Implicitly Restarted Arnoldi Iteration, single precision. </para>        </briefdescription>
        <detaileddescription>
<para>Reverse communication interface for the Implicitly Restarted Arnoldi Iteration. For symmetric problems this reduces to a variant of the Lanczos method. See the ARPACK site for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ido</parametername>
</parameternamelist>
<parameterdescription>
<para>Reverse communication flag. Set to 0 first time. Upon return with ido=-1 or ido=1 you should calculate Y=A*X and recall the routine. Return with ido=2 means Y=B*X should be calculated. ipntr[0] is the pointer in workd for X, ipntr[1] is the index for Y. Return with ido=99 means it finished. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bmat</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;I&apos; for standard eigenproblem, &apos;G&apos; for generalized. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Order of eigenproblem. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>Which eigenvalues to calculate. &apos;LA&apos; for largest algebraic, &apos;SA&apos; for smallest algebraic, &apos;LM&apos; for largest magnitude, &apos;SM&apos; for smallest magnitude, and finally &apos;BE&apos; (both ends) to calculate half from each end of the spectrum. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nev</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of eigenvalues to calculate. 0&lt;nev&lt;n. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tol</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance. Machine precision of it is 0. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resid</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional starting residual vector at input if info=1, otherwise a random one is used. Final residual vector on return. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncv</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in matrix v. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>N*NCV matrix. V contain the Lanczos basis vectors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ldv</parametername>
</parameternamelist>
<parameterdescription>
<para>Leading dimension of v. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iparam</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer array, size 11. Same contents as arpack. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ipntr</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer array, size 11. Points to starting locations in the workd/workl arrays. Same contents as arpack. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workd</parametername>
</parameternamelist>
<parameterdescription>
<para>Single precision work array, length 3*n+4. Provide the same array for all calls, and don&apos;t touch it. IMPORTANT: This is 4 units larger than standard ARPACK! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iwork</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer work array, size 80. Provide the same array for all calls, and don&apos;t touch it. IMPORTANT: New argument compared to standard ARPACK! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workl</parametername>
</parameternamelist>
<parameterdescription>
<para>Single precision work array, length lwork. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lworkl</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the work array workl. Must be at least ncv*(ncv+8) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Set info to 0 to use random initial residual vector, or to 1 if you provide a one. On output, info=0 means normal exit, 1 that max number of iterations was reached, and 3 that no shifts could be applied. Negative numbers correspond to errors in the arguments provided. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="5069" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="5069" bodyend="5239"/>
      </memberdef>
      <memberdef kind="function" id="gmx__arpack_8cpp_1aa42f865f06201845f7fb4442e2bc169a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sseupd</definition>
        <argsstring>(int *rvec, const char *howmny, int *select, float *d__, float *z__, int *ldz, float *sigma, const char *bmat, int *n, const char *which, int *nev, float *tol, float *resid, int *ncv, float *v, int *ldv, int *iparam, int *ipntr, float *workd, float *workl, int *lworkl, int *info)</argsstring>
        <name>sseupd</name>
        <param>
          <type>int *</type>
          <declname>rvec</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>howmny</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>select</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d</declname>
          <defname>d__</defname>
        </param>
        <param>
          <type>float *</type>
          <declname>z</declname>
          <defname>z__</defname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldz</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>bmat</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>which</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nev</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>tol</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ncv</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldv</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iparam</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ipntr</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>workd</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>workl</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lworkl</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Get eigenvalues/vectors after Arnoldi iteration, single prec. </para>        </briefdescription>
        <detaileddescription>
<para>See the ARPACK site for details. You must have finished the interative part with <ref refid="gmx__arpack_8h_1adcff1a34c0aa4423d0e2922192724cd1" kindref="member">ssaupd()</ref> before calling this function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rvec</parametername>
</parameternamelist>
<parameterdescription>
<para>1 if you want eigenvectors, 0 if not. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>howmny</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;A&apos; if you want all nvec vectors, &apos;S&apos; if you provide a subset selection in select[]. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>select</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer array, dimension nev. Indices of the eigenvectors to calculate. Fortran code means we start counting on 1. This array must be given even in howmny is &apos;A&apos;. (Arpack documentation is wrong on this). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Single precision array, length nev. Eigenvalues. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Single precision array, n*nev. Eigenvectors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ldz</parametername>
</parameternamelist>
<parameterdescription>
<para>Leading dimension of z. Normally n. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Shift if iparam[6] is 3,4, or 5. Ignored otherwise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bmat</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1adcff1a34c0aa4423d0e2922192724cd1" kindref="member">ssaupd()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1adcff1a34c0aa4423d0e2922192724cd1" kindref="member">ssaupd()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1adcff1a34c0aa4423d0e2922192724cd1" kindref="member">ssaupd()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nev</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1adcff1a34c0aa4423d0e2922192724cd1" kindref="member">ssaupd()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tol</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1adcff1a34c0aa4423d0e2922192724cd1" kindref="member">ssaupd()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resid</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1adcff1a34c0aa4423d0e2922192724cd1" kindref="member">ssaupd()</ref> The array must not be touched between the two function calls! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncv</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1adcff1a34c0aa4423d0e2922192724cd1" kindref="member">ssaupd()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1adcff1a34c0aa4423d0e2922192724cd1" kindref="member">ssaupd()</ref> The array must not be touched between the two function calls! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ldv</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1adcff1a34c0aa4423d0e2922192724cd1" kindref="member">ssaupd()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iparam</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1adcff1a34c0aa4423d0e2922192724cd1" kindref="member">ssaupd()</ref> The array must not be touched between the two function calls! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ipntr</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1adcff1a34c0aa4423d0e2922192724cd1" kindref="member">ssaupd()</ref> The array must not be touched between the two function calls! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workd</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1adcff1a34c0aa4423d0e2922192724cd1" kindref="member">ssaupd()</ref> The array must not be touched between the two function calls! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workl</parametername>
</parameternamelist>
<parameterdescription>
<para>Single precision work array, length lwork. The array must not be touched between the two function calls! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lworkl</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1adcff1a34c0aa4423d0e2922192724cd1" kindref="member">ssaupd()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide the same argument as you did to <ref refid="gmx__arpack_8h_1adcff1a34c0aa4423d0e2922192724cd1" kindref="member">ssaupd()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" line="5244" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp" bodystart="5244" bodyend="5767"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/linearalgebra/gmx_arpack.cpp"/>
  </compounddef>
</doxygen>
