<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="namespacegmx_1_1internal" kind="namespace">
    <compoundname>gmx::internal</compoundname>
    <innerclass refid="classgmx_1_1internal_1_1AnalysisDataHandleImpl" prot="public">gmx::internal::AnalysisDataHandleImpl</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1AnalysisDataStorageImpl" prot="public">gmx::internal::AnalysisDataStorageImpl</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1AnalysisDataStorageFrameData" prot="public">gmx::internal::AnalysisDataStorageFrameData</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1BasicAverageHistogramModule" prot="public">gmx::internal::BasicAverageHistogramModule</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1BasicHistogramImpl" prot="public">gmx::internal::BasicHistogramImpl</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1EnumIndexStore" prot="public">gmx::internal::EnumIndexStore</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1OptionSectionImpl" prot="public">gmx::internal::OptionSectionImpl</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1OptionsImpl" prot="public">gmx::internal::OptionsImpl</innerclass>
    <innerclass refid="structgmx_1_1internal_1_1highBitCounter" prot="public">gmx::internal::highBitCounter</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1AnalysisNeighborhoodSearchImpl" prot="public">gmx::internal::AnalysisNeighborhoodSearchImpl</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1AnalysisNeighborhoodPairSearchImpl" prot="public">gmx::internal::AnalysisNeighborhoodPairSearchImpl</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1SelectionData" prot="public">gmx::internal::SelectionData</innerclass>
    <innerclass refid="structgmx_1_1internal_1_1SimdTraits" prot="public">gmx::internal::SimdTraits</innerclass>
    <innerclass refid="structgmx_1_1internal_1_1SimdTraits_3_01SimdFloat_01_4" prot="public">gmx::internal::SimdTraits&lt; SimdFloat &gt;</innerclass>
    <innerclass refid="structgmx_1_1internal_1_1SimdTraits_3_01SimdDouble_01_4" prot="public">gmx::internal::SimdTraits&lt; SimdDouble &gt;</innerclass>
    <innerclass refid="structgmx_1_1internal_1_1SimdTraits_3_01SimdFInt32_01_4" prot="public">gmx::internal::SimdTraits&lt; SimdFInt32 &gt;</innerclass>
    <innerclass refid="structgmx_1_1internal_1_1SimdTraits_3_01SimdDInt32_01_4" prot="public">gmx::internal::SimdTraits&lt; SimdDInt32 &gt;</innerclass>
    <innerclass refid="structgmx_1_1internal_1_1SimdTraits_3_01const_01T_01_4" prot="public">gmx::internal::SimdTraits&lt; const T &gt;</innerclass>
    <innerclass refid="structgmx_1_1internal_1_1Simd4Traits" prot="public">gmx::internal::Simd4Traits</innerclass>
    <innerclass refid="structgmx_1_1internal_1_1Simd4Traits_3_01Simd4Float_01_4" prot="public">gmx::internal::Simd4Traits&lt; Simd4Float &gt;</innerclass>
    <innerclass refid="structgmx_1_1internal_1_1Simd4Traits_3_01Simd4Double_01_4" prot="public">gmx::internal::Simd4Traits&lt; Simd4Double &gt;</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1SimdReference" prot="public">gmx::internal::SimdReference</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1SimdIterator" prot="public">gmx::internal::SimdIterator</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1SimdArrayRef" prot="public">gmx::internal::SimdArrayRef</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1ExceptionData" prot="public">gmx::internal::ExceptionData</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1IExceptionInfo" prot="public">gmx::internal::IExceptionInfo</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1FileStreamImpl" prot="public">gmx::internal::FileStreamImpl</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1KeyValueTreeTransformerImpl" prot="public">gmx::internal::KeyValueTreeTransformerImpl</innerclass>
    <innernamespace refid="namespacegmx_1_1internal_1_1anonymous__namespace_02selection_8cpp_03">gmx::internal::anonymous_namespace{selection.cpp}</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacegmx_1_1internal_1a10329904859eb4035ac1a2464a9745b2" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="classgmx_1_1AnalysisDataStorageFrame" kindref="compound">AnalysisDataStorageFrame</ref> &gt;</type>
        <definition>typedef std::unique_ptr&lt;AnalysisDataStorageFrame&gt; gmx::internal::AnalysisDataFrameBuilderPointer</definition>
        <argsstring></argsstring>
        <name>AnalysisDataFrameBuilderPointer</name>
        <briefdescription>
<para>Smart pointer type for managing a storage frame builder. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/analysisdata/datastorage.cpp" line="89" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/analysisdata/datastorage.cpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegmx_1_1internal_1ac21a2a7809b800b7a38d52106cb23576" prot="public" static="no">
        <type>std::vector&lt; std::exception_ptr &gt;</type>
        <definition>typedef std::vector&lt;std::exception_ptr&gt; gmx::internal::NestedExceptionList</definition>
        <argsstring></argsstring>
        <name>NestedExceptionList</name>
        <briefdescription>
<para>Internal container type for storing a list of nested exceptions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" line="73" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegmx_1_1internal_1a8255fddd22431a907c2932b034f75023" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="classgmx_1_1internal_1_1IExceptionInfo" kindref="compound">IExceptionInfo</ref> &gt;</type>
        <definition>typedef std::unique_ptr&lt;IExceptionInfo&gt; gmx::internal::ExceptionInfoPointer</definition>
        <argsstring></argsstring>
        <name>ExceptionInfoPointer</name>
        <briefdescription>
<para>Smart pointer to manage <ref refid="classgmx_1_1internal_1_1IExceptionInfo" kindref="compound">IExceptionInfo</ref> ownership. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" line="93" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__module__options_1ga5d6e44acec82796430372618e7b7919e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1AbstractOptionStorage" kindref="compound">AbstractOptionStorage</ref> *</type>
        <definition>AbstractOptionStorage * gmx::internal::createEnumOptionStorage</definition>
        <argsstring>(const AbstractOption &amp;option, const char *const *enumValues, int count, int defaultValue, int defaultValueIfSet, IOptionValueStore&lt; int &gt; *store)</argsstring>
        <name>createEnumOptionStorage</name>
        <param>
          <type>const <ref refid="classgmx_1_1AbstractOption" kindref="compound">AbstractOption</ref> &amp;</type>
          <declname>option</declname>
        </param>
        <param>
          <type>const char *const *</type>
          <declname>enumValues</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>int</type>
          <declname>defaultValueIfSet</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1IOptionValueStore" kindref="compound">IOptionValueStore</ref>&lt; int &gt; *</type>
          <declname>store</declname>
        </param>
        <briefdescription>
<para>Helper to create <ref refid="classgmx_1_1EnumOptionStorage" kindref="compound">EnumOptionStorage</ref> instances. </para>        </briefdescription>
        <detaileddescription>
<internal><para>This function works as a proxy between EnumOption::createStorage() and the <ref refid="classgmx_1_1EnumOptionStorage" kindref="compound">EnumOptionStorage</ref> constructor, such that the latter does not need to be exposed in the header. </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/basicoptions.cpp" line="655" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/basicoptions.cpp" bodystart="655" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1internal_1a71aba30ffd645096a2944c75870c2adc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::internal::throwUnlessDerivativeIsConsistentWithFunction</definition>
        <argsstring>(const std::function&lt; double(double)&gt; &amp;function, const std::function&lt; double(double)&gt; &amp;derivative, const std::pair&lt; real, real &gt; &amp;range)</argsstring>
        <name>throwUnlessDerivativeIsConsistentWithFunction</name>
        <param>
          <type>const std::function&lt; double(double)&gt; &amp;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>const std::function&lt; double(double)&gt; &amp;</type>
          <declname>derivative</declname>
        </param>
        <param>
          <type>const std::pair&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref>, <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Ensure analytical derivative is the derivative of analytical function. </para>        </briefdescription>
        <detaileddescription>
<para>This routine evaluates the numerical derivative of the function for a few (1000) points in the interval and checks that the relative difference between numerical and analytical derivative is within the expected error for the numerical derivative approximation we use.</para><para>The main point of this routine is to make sure the user has not made a mistake or sign error when defining the functions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>Analytical function to differentiate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>derivative</parametername>
</parameternamelist>
<parameterdescription>
<para>Analytical derivative to compare with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Range to test</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>If</parametername>
</parameternamelist>
<parameterdescription>
<para>the provided derivative does not seem to match the function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The function/derivative are always double-valued to avoid accuracy loss. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" line="67" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" bodystart="67" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1internal_1a84d04970d8b90387337f316491ed1d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::internal::throwUnlessDerivativeIsConsistentWithFunction</definition>
        <argsstring>(ArrayRef&lt; const double &gt; function, ArrayRef&lt; const double &gt; derivative, double inputSpacing, const std::pair&lt; real, real &gt; &amp;range)</argsstring>
        <name>throwUnlessDerivativeIsConsistentWithFunction</name>
        <param>
          <type><ref refid="classgmx_1_1ArrayRef" kindref="compound">ArrayRef</ref>&lt; const double &gt;</type>
          <declname>function</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1ArrayRef" kindref="compound">ArrayRef</ref>&lt; const double &gt;</type>
          <declname>derivative</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inputSpacing</declname>
        </param>
        <param>
          <type>const std::pair&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref>, <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Ensure vector of derivative values is the derivative of function vector. </para>        </briefdescription>
        <detaileddescription>
<para>This routine differentiates a vector of numerical values and checks that the relative difference to a provided vector of numerical derivatives is smaller than the expected error from the numerical differentiation.</para><para>The main point of this routine is to make sure the user has not made a mistake or sign error when defining the functions.</para><para>To avoid problems if the vectors change from zero to finite values at the start/end of the interval, we only check inside the range requested.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical function value vector to differentiate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>derivative</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical derivative vector to compare with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputSpacing</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance between input points </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Range to test</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>If</parametername>
</parameternamelist>
<parameterdescription>
<para>the provided derivative does not seem to match the function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The function/derivative vectors and spacing are always double-valued to avoid accuracy loss. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" line="111" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" bodystart="111" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1internal_1a786e811f53adda36ce69b4e79bc9127d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double gmx::internal::quotientOfFunctionAndSecondDerivative</definition>
        <argsstring>(double previousPoint, double thisPoint, double nextPoint, double spacing)</argsstring>
        <name>quotientOfFunctionAndSecondDerivative</name>
        <param>
          <type>double</type>
          <declname>previousPoint</declname>
        </param>
        <param>
          <type>double</type>
          <declname>thisPoint</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nextPoint</declname>
        </param>
        <param>
          <type>double</type>
          <declname>spacing</declname>
        </param>
        <briefdescription>
<para>Calculate absolute quotient of function and its second derivative. </para>        </briefdescription>
        <detaileddescription>
<para>This is a utility function used in the functions to find the smallest quotient in a range.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">previousPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of function at x-h. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">thisPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of function at x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nextPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of function at x+h. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spacing</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of h.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The absolute value of the quotient. If either the function or second derivative is smaller than sqrt(GMX_REAL_MIN), they will be set to that value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" line="165" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" bodystart="165" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1internal_1a5cd4438648f0d8b7f4fda76fda90733c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>real gmx::internal::findSmallestQuotientOfFunctionAndSecondDerivative</definition>
        <argsstring>(const std::function&lt; double(double)&gt; &amp;f, const std::pair&lt; real, real &gt; &amp;range)</argsstring>
        <name>findSmallestQuotientOfFunctionAndSecondDerivative</name>
        <param>
          <type>const std::function&lt; double(double)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const std::pair&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref>, <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Find smallest quotient between analytical function and its 2nd derivative. </para>        </briefdescription>
        <detaileddescription>
<para>Used to calculate spacing for quadratic spline tables. This function divides the function value by the second derivative (or a very small number when that is zero), and returns the smallest such quotient found in the range.</para><para>Our quadratic tables corresponds to linear interpolation of the derivative, which means the derivative will typically have larger error than the value when interpolating. The spacing required to reach a particular relative tolerance in the derivative depends on the quotient between the first derivative and the third derivative of the function itself.</para><para>You should call this routine with the analytical derivative as the &quot;function&quot; parameter, and the quotient between &quot;function and second derivative&quot; will then correspond to the quotient bewteen the derivative and the third derivative of the actual function we want to tabulate.</para><para>Since all functions that can be tabulated efficiently are reasonably smooth, we simply check 1,000 points in the interval rather than bother about implementing any complicated global optimization scheme.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Analytical function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Interval</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Smallest quotient found in range.</para></simplesect>
<simplesect kind="note"><para>The function is always double-valued to avoid accuracy loss. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" line="184" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" bodystart="184" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1internal_1a18b94ecee47c00ff772c4558ec9de9f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>real gmx::internal::findSmallestQuotientOfFunctionAndSecondDerivative</definition>
        <argsstring>(ArrayRef&lt; const double &gt; function, double inputSpacing, const std::pair&lt; real, real &gt; &amp;range)</argsstring>
        <name>findSmallestQuotientOfFunctionAndSecondDerivative</name>
        <param>
          <type><ref refid="classgmx_1_1ArrayRef" kindref="compound">ArrayRef</ref>&lt; const double &gt;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inputSpacing</declname>
        </param>
        <param>
          <type>const std::pair&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref>, <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Find smallest quotient between vector of values and its 2nd derivative. </para>        </briefdescription>
        <detaileddescription>
<para>Used to calculate spacing for quadratic spline tables. This function divides the function value by the second derivative (or a very small number when that is zero), and returns the smallest such quotient found in the range.</para><para>Our quadratic tables corresponds to linear interpolation of the derivative, which means the derivative will typically have larger error than the value when interpolating. The spacing required to reach a particular relative tolerance in the derivative depends on the quotient between the first derivative and the third derivative of the function itself.</para><para>You should call this routine with the analytical derivative as the &quot;function&quot; parameter, and the quotient between &quot;function and second derivative&quot; will then correspond to the quotient bewteen the derivative and the third derivative of the actual function we want to tabulate.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector with function values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputSpacing</parametername>
</parameternamelist>
<parameterdescription>
<para>Spacing between function values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Interval to check</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Smallest quotient found in range.</para></simplesect>
<simplesect kind="note"><para>The function vector and input spacing are always double-valued to avoid accuracy loss. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" line="210" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" bodystart="210" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1internal_1a48c7d332a59803748a65fe5c47529917" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double gmx::internal::quotientOfFunctionAndThirdDerivative</definition>
        <argsstring>(double previousPreviousPoint, double previousPoint, double thisPoint, double nextPoint, double nextNextPoint, double spacing)</argsstring>
        <name>quotientOfFunctionAndThirdDerivative</name>
        <param>
          <type>double</type>
          <declname>previousPreviousPoint</declname>
        </param>
        <param>
          <type>double</type>
          <declname>previousPoint</declname>
        </param>
        <param>
          <type>double</type>
          <declname>thisPoint</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nextPoint</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nextNextPoint</declname>
        </param>
        <param>
          <type>double</type>
          <declname>spacing</declname>
        </param>
        <briefdescription>
<para>Calculate absolute quotient of function and its third derivative. </para>        </briefdescription>
        <detaileddescription>
<para>This is a utility function used in the functions to find the smallest quotient in a range.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">previousPreviousPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of function at x-2h. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">previousPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of function at x-h. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">thisPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of function at x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nextPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of function at x+h. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nextNextPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of function at x+2h. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spacing</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of h.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The absolute value of the quotient. If either the function or third derivative is smaller than sqrt(GMX_REAL_MIN), they will be set to that value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" line="245" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" bodystart="245" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1internal_1afa91a1483ec637aeb3608ae2ba3d9c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>real gmx::internal::findSmallestQuotientOfFunctionAndThirdDerivative</definition>
        <argsstring>(const std::function&lt; double(double)&gt; &amp;f, const std::pair&lt; real, real &gt; &amp;range)</argsstring>
        <name>findSmallestQuotientOfFunctionAndThirdDerivative</name>
        <param>
          <type>const std::function&lt; double(double)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const std::pair&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref>, <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Find smallest quotient between analytical function and its 3rd derivative. </para>        </briefdescription>
        <detaileddescription>
<para>Used to calculate table spacing. This function divides the function value by the second derivative (or a very small number when that is zero), and returns the smallest such quotient found in the range.</para><para>Our quadratic tables corresponds to linear interpolation of the derivative, which means the derivative will typically have larger error than the value when interpolating. The spacing required to reach a particular relative tolerance in the derivative depends on the quotient between the first derivative and the third derivative of the function itself.</para><para>You should call this routine with the analytical derivative as the &quot;function&quot; parameter, and the quotient between &quot;function and second derivative&quot; will then correspond to the quotient bewteen the derivative and the third derivative of the actual function we want to tabulate.</para><para>Since all functions that can be tabulated efficiently are reasonably smooth, we simply check 1,000 points in the interval rather than bother about implementing any complicated global optimization scheme.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Analytical function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Interval</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Smallest quotient found in range.</para></simplesect>
<simplesect kind="note"><para>The function is always double-valued to avoid accuracy loss. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" line="266" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" bodystart="266" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1internal_1ac97262613788ed1e55e38baf4c66940f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>real gmx::internal::findSmallestQuotientOfFunctionAndThirdDerivative</definition>
        <argsstring>(ArrayRef&lt; const double &gt; function, double inputSpacing, const std::pair&lt; real, real &gt; &amp;range)</argsstring>
        <name>findSmallestQuotientOfFunctionAndThirdDerivative</name>
        <param>
          <type><ref refid="classgmx_1_1ArrayRef" kindref="compound">ArrayRef</ref>&lt; const double &gt;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inputSpacing</declname>
        </param>
        <param>
          <type>const std::pair&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref>, <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Find smallest quotient between function and 2nd derivative (vectors) </para>        </briefdescription>
        <detaileddescription>
<para>Used to calculate table spacing. This function divides the function value by the second derivative (or a very small number when that is zero), and returns the smallest such quotient found in the range.</para><para>Our quadratic tables corresponds to linear interpolation of the derivative, which means the derivative will typically have larger error than the value when interpolating. The spacing required to reach a particular relative tolerance in the derivative depends on the quotient between the first derivative and the third derivative of the function itself.</para><para>You should call this routine with the analytical derivative as the &quot;function&quot; parameter, and the quotient between &quot;function and second derivative&quot; will then correspond to the quotient bewteen the derivative and the third derivative of the actual function we want to tabulate.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector with function values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputSpacing</parametername>
</parameternamelist>
<parameterdescription>
<para>Spacing between function values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Interval to check</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Smallest quotient found in range.</para></simplesect>
<simplesect kind="note"><para>The function vector and input spacing are always double-valued to avoid accuracy loss. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" line="287" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" bodystart="287" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1internal_1ab3cfc781466eaa1331bd09bc9ed68399" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; gmx::internal::vectorSecondDerivative</definition>
        <argsstring>(ArrayRef&lt; const double &gt; f, double spacing)</argsstring>
        <name>vectorSecondDerivative</name>
        <param>
          <type><ref refid="classgmx_1_1ArrayRef" kindref="compound">ArrayRef</ref>&lt; const double &gt;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>double</type>
          <declname>spacing</declname>
        </param>
        <briefdescription>
<para>Calculate second derivative of vector and return vector of same length. </para>        </briefdescription>
        <detaileddescription>
<para>5-point approximations are used, with endpoints using non-center interpolation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector (function) for which to calculate second derivative </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spacing</parametername>
</parameternamelist>
<parameterdescription>
<para>Spacing of input data.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>If</parametername>
</parameternamelist>
<parameterdescription>
<para>the input vector has fewer than five data points.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function always uses double precision arguments since it is meant to be used on raw user input data for tables, where we want to avoid accuracy loss (since differentiation can be numerically fragile). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" line="306" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.cpp" bodystart="306" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1internal_1ae671e4e4da364f994bc18e7bb086c99d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::internal::fillMultiplexedTableData</definition>
        <argsstring>(const T inputData, U *multiplexedOutputData, std::size_t valuesPerTablePoint, std::size_t numTables, std::size_t thisTableIndex)</argsstring>
        <name>fillMultiplexedTableData</name>
        <param>
          <type>const T</type>
          <declname>inputData</declname>
        </param>
        <param>
          <type>U *</type>
          <declname>multiplexedOutputData</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>valuesPerTablePoint</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>numTables</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>thisTableIndex</declname>
        </param>
        <briefdescription>
<para>Copy (temporary) table data into aligned multiplexed vector. </para>        </briefdescription>
        <detaileddescription>
<para>This routine takes the temporary data generated for a single table and writes multiplexed output into a multiple-table-data vector. If the output vector is empty we will resize it to fit the data, and otherwise we assert the size is correct to add out input data.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of container for input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of container for output data</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">inputData</parametername>
</parameternamelist>
<parameterdescription>
<para>Input data for single table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">multiplexedOutputData</parametername>
</parameternamelist>
<parameterdescription>
<para>Multiplexed output vector, many tables. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">valuesPerTablePoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of real values for each table point, for instance 4 in DDFZ tables. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTables</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of tables mixed into multiplexed output </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">thisTableIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of this table in multiplexed output</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The output container type can be different from the input since the latter sometimes uses an aligned allocator so the data can be loaded efficiently in the GROMACS nonbonded kernels. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.h" line="294" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/tables/splineutil.h" bodystart="294" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga921af955af13677427b80c3237a798fe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void gmx::internal::ignoreValueHelper</definition>
        <argsstring>(const T &amp;)</argsstring>
        <name>ignoreValueHelper</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
<para>Helper for ignoring values in macros. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/basedefinitions.h" line="248" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/basedefinitions.h" bodystart="248" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1internal_1a3c0ea704fa958e9e7c79e7484a2d6f6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::internal::current_function_helper</definition>
        <argsstring>()</argsstring>
        <name>current_function_helper</name>
        <briefdescription>
<para>Helper for defining GMX_CURRENT_FUNCTION. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/current_function.h" line="72" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/current_function.h" bodystart="72" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga34257490d770efb0f6a87adeef2629c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::internal::printFatalErrorHeader</definition>
        <argsstring>(FILE *fp, const char *title, const char *func, const char *file, int line)</argsstring>
        <name>printFatalErrorHeader</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Formats a common header for fatal error messages. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorformat.cpp" line="63" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorformat.cpp" bodystart="63" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga0a42e4f258d42ec3a31c6a633de8d5da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::internal::printFatalErrorMessageLine</definition>
        <argsstring>(FILE *fp, const char *text, int indent)</argsstring>
        <name>printFatalErrorMessageLine</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
<para>Formats a line of fatal error message text. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorformat.cpp" line="96" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorformat.cpp" bodystart="96" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gadcb892c734184fade6b913a4d3a66aa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::internal::printFatalErrorFooter</definition>
        <argsstring>(FILE *fp)</argsstring>
        <name>printFatalErrorFooter</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
<para>Formats a common footer for fatal error messages. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorformat.cpp" line="115" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorformat.cpp" bodystart="115" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gaebf12d5435f39db87d2627d024b0b4c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::internal::assertHandler</definition>
        <argsstring>(const char *condition, const char *msg, const char *func, const char *file, int line)</argsstring>
        <name>assertHandler</name>
        <param>
          <type>const char *</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Called when an assert fails. </para>        </briefdescription>
        <detaileddescription>
<para>Should not be called directly, but instead through <ref refid="group__module__utility_1ga5ae3261a89ac2c165cfba084c6b02ef7" kindref="member">GMX_ASSERT</ref> or <ref refid="group__module__utility_1ga1071dd9ef4577eac808a66272ecef494" kindref="member">GMX_RELEASE_ASSERT</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxassert.cpp" line="60" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxassert.cpp" bodystart="60" bodyend="68"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Internal GROMACS namespace. </para>    </briefdescription>
    <detaileddescription>
<internal><para>This namespace is used to contain some implementation-specific functions and classes. These are not meant for direct user access, but typically reside in public headers because of implementation reasons. </para></internal>
    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/docs/doxygen/misc.cpp" line="54" column="1"/>
  </compounddef>
</doxygen>
