<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="group__module__simd" kind="group">
    <compoundname>module_simd</compoundname>
    <title>SIMD intrinsics interface (simd)</title>
    <innerfile refid="impl__reference_8h">impl_reference.h</innerfile>
    <innerfile refid="impl__reference__definitions_8h">impl_reference_definitions.h</innerfile>
    <innerfile refid="impl__reference__general_8h">impl_reference_general.h</innerfile>
    <innerfile refid="impl__reference__simd4__double_8h">impl_reference_simd4_double.h</innerfile>
    <innerfile refid="impl__reference__simd4__float_8h">impl_reference_simd4_float.h</innerfile>
    <innerfile refid="impl__reference__simd__double_8h">impl_reference_simd_double.h</innerfile>
    <innerfile refid="impl__reference__simd__float_8h">impl_reference_simd_float.h</innerfile>
    <innerfile refid="impl__reference__util__double_8h">impl_reference_util_double.h</innerfile>
    <innerfile refid="impl__reference__util__float_8h">impl_reference_util_float.h</innerfile>
    <innerfile refid="scalar_8h">scalar.h</innerfile>
    <innerfile refid="scalar__math_8h">scalar_math.h</innerfile>
    <innerfile refid="scalar__util_8h">scalar_util.h</innerfile>
    <innerfile refid="simd_8h">simd.h</innerfile>
    <innerfile refid="simd__math_8h">simd_math.h</innerfile>
    <innerfile refid="simd__memory_8h">simd_memory.h</innerfile>
    <innerfile refid="support_8cpp">support.cpp</innerfile>
    <innerfile refid="support_8h">support.h</innerfile>
    <innerfile refid="base_8h">base.h</innerfile>
    <innerfile refid="bootstrap__loadstore_8cpp">bootstrap_loadstore.cpp</innerfile>
    <innerfile refid="data_8h">data.h</innerfile>
    <innerfile refid="tests_2simd_8h">simd.h</innerfile>
    <innerfile refid="simd4_8h">simd4.h</innerfile>
    <innerfile refid="simd__memory_8cpp">simd_memory.cpp</innerfile>
    <innerfile refid="vector__operations_8h">vector_operations.h</innerfile>
    <innerclass refid="classgmx_1_1Simd4Double" prot="public">gmx::Simd4Double</innerclass>
    <innerclass refid="classgmx_1_1Simd4DBool" prot="public">gmx::Simd4DBool</innerclass>
    <innerclass refid="classgmx_1_1Simd4Float" prot="public">gmx::Simd4Float</innerclass>
    <innerclass refid="classgmx_1_1Simd4FBool" prot="public">gmx::Simd4FBool</innerclass>
    <innerclass refid="classgmx_1_1SimdDouble" prot="public">gmx::SimdDouble</innerclass>
    <innerclass refid="classgmx_1_1SimdDInt32" prot="public">gmx::SimdDInt32</innerclass>
    <innerclass refid="classgmx_1_1SimdDBool" prot="public">gmx::SimdDBool</innerclass>
    <innerclass refid="classgmx_1_1SimdDIBool" prot="public">gmx::SimdDIBool</innerclass>
    <innerclass refid="classgmx_1_1SimdFloat" prot="public">gmx::SimdFloat</innerclass>
    <innerclass refid="classgmx_1_1SimdFInt32" prot="public">gmx::SimdFInt32</innerclass>
    <innerclass refid="classgmx_1_1SimdFBool" prot="public">gmx::SimdFBool</innerclass>
    <innerclass refid="classgmx_1_1SimdFIBool" prot="public">gmx::SimdFIBool</innerclass>
    <innerclass refid="classgmx_1_1test_1_1SimdBaseTest" prot="public">gmx::test::SimdBaseTest</innerclass>
    <innerclass refid="classgmx_1_1test_1_1SimdTest" prot="public">gmx::test::SimdTest</innerclass>
    <innerclass refid="classgmx_1_1test_1_1Simd4Test" prot="public">gmx::test::Simd4Test</innerclass>
    <innerclass refid="classgmx_1_1test_1_1Simd4MathTest" prot="public">gmx::test::Simd4MathTest</innerclass>
    <innerclass refid="classgmx_1_1test_1_1anonymous__namespace_02simd__floatingpoint__util_8cpp_03_1_1SimdFloatingpointUtilTest" prot="public">gmx::test::anonymous_namespace{simd_floatingpoint_util.cpp}::SimdFloatingpointUtilTest</innerclass>
    <innerclass refid="classgmx_1_1test_1_1SimdMathTest" prot="public">gmx::test::SimdMathTest</innerclass>
    <innernamespace refid="namespacegmx">gmx</innernamespace>
      <sectiondef kind="user-defined">
      <header>SIMD implementation capability definitions</header>
      <memberdef kind="define" id="group__module__simd_1ga94ddf013ff498c818811cc6cf2c3c71d" prot="public" static="no">
        <name>GMX_SIMD</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 if any SIMD support is present, otherwise 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="64" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga8d093280bad2b3ebecbcd426bdddb73b" prot="public" static="no">
        <name>GMX_SIMD_HAVE_FLOAT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 when SIMD float support is present, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
<para>You should only use this to specifically check for single precision SIMD, support, even when the rest of Gromacs uses double precision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="71" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1gaf5545c033bb4a28657239e4c9739cefe" prot="public" static="no">
        <name>GMX_SIMD_HAVE_DOUBLE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 if SIMD double support is present, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="74" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1gacf774b2a886d1ed4149f825c50c8fec2" prot="public" static="no">
        <name>GMX_SIMD_HAVE_LOADU</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 if the SIMD implementation supports unaligned loads, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="77" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga38ee3ad2fadedbafff3129df1e7c15b4" prot="public" static="no">
        <name>GMX_SIMD_HAVE_STOREU</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 if the SIMD implementation supports unaligned stores, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="80" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga28b81d356fae5d8b1b3b76273c360360" prot="public" static="no">
        <name>GMX_SIMD_HAVE_FMA</name>
        <initializer>0</initializer>
        <briefdescription>
<para>1 if the SIMD implementation has fused-multiply add hardware </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>All the fused multiply-add functions are always available and can be used in any code (by executing separate multiply and add ops), but in a few very tight loops you might be able to save a few instructions with a separate non-FMA code path. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="89" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1gaf002483e94d5f42de1d5105cf924f8b8" prot="public" static="no">
        <name>GMX_SIMD_HAVE_LOGICAL</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 if SIMD impl has logical operations on floating-point data, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="92" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga23ac53a0050467ac215f146f6afc6380" prot="public" static="no">
        <name>GMX_SIMD_HAVE_FINT32_EXTRACT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Support for extracting integers from <ref refid="classgmx_1_1SimdFInt32" kindref="compound">gmx::SimdFInt32</ref> (1/0 for present/absent) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="95" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga354867d2570fecb6b341047947bee0d1" prot="public" static="no">
        <name>GMX_SIMD_HAVE_FINT32_LOGICAL</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 if SIMD logical ops are supported for <ref refid="classgmx_1_1SimdFInt32" kindref="compound">gmx::SimdFInt32</ref>, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="98" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga9febc62e1abd58eb8a035b8b81f93292" prot="public" static="no">
        <name>GMX_SIMD_HAVE_FINT32_ARITHMETICS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 if SIMD arithmetic ops are supported for <ref refid="classgmx_1_1SimdFInt32" kindref="compound">gmx::SimdFInt32</ref>, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="101" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1gabae2f56a4d87b8e52b5df066888a4c07" prot="public" static="no">
        <name>GMX_SIMD_HAVE_DINT32_EXTRACT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Support for extracting integer from <ref refid="classgmx_1_1SimdDInt32" kindref="compound">gmx::SimdDInt32</ref> (1/0 for present/absent) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="104" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga0ccbae145ecb27cee3c98ec7bded1d45" prot="public" static="no">
        <name>GMX_SIMD_HAVE_DINT32_LOGICAL</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 if logical operations are supported for <ref refid="classgmx_1_1SimdDInt32" kindref="compound">gmx::SimdDInt32</ref>, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="107" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1gab8469202af6999f95405779355d89c30" prot="public" static="no">
        <name>GMX_SIMD_HAVE_DINT32_ARITHMETICS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 if SIMD arithmetic ops are supported for <ref refid="classgmx_1_1SimdDInt32" kindref="compound">gmx::SimdDInt32</ref>, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="110" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1gae0ee59fd57c8ac4336ecbdafd1356fec" prot="public" static="no">
        <name>GMX_SIMD_HAVE_NATIVE_COPYSIGN_FLOAT</name>
        <initializer>0</initializer>
        <briefdescription>
<para>1 if implementation provides single precision <ref refid="namespacegmx_1a8ef5f6af06e493a4ae2d47109ee0e723" kindref="member">copysign()</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Only used in <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> to selectively override the generic implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="116" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga6ed1e79e7680e1286e57df038c5e1a5a" prot="public" static="no">
        <name>GMX_SIMD_HAVE_NATIVE_RSQRT_ITER_FLOAT</name>
        <initializer>0</initializer>
        <briefdescription>
<para>1 if implementation provides single precision 1/sqrt(x) N-R iterations faster than <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Only used in <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> to selectively override the generic implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="122" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga42b629cc80d3bb76e8a8bb84c2a11659" prot="public" static="no">
        <name>GMX_SIMD_HAVE_NATIVE_RCP_ITER_FLOAT</name>
        <initializer>0</initializer>
        <briefdescription>
<para>1 if implementation provides single precision 1/x N-R iterations faster than <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Only used in <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> to selectively override the generic implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="128" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga4e25630e2fde79d1c5dbde64293c4f8f" prot="public" static="no">
        <name>GMX_SIMD_HAVE_NATIVE_LOG_FLOAT</name>
        <initializer>0</initializer>
        <briefdescription>
<para>1 if implementation provides single precision <ref refid="namespacegmx_1a7b0a25f25b649f59d96b67f2d73c8ad8" kindref="member">log()</ref> faster than <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Only used in <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> to selectively override the generic implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="134" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1gaf481b26a00cb7a69c5b2b409cb8bf07a" prot="public" static="no">
        <name>GMX_SIMD_HAVE_NATIVE_EXP2_FLOAT</name>
        <initializer>0</initializer>
        <briefdescription>
<para>1 if implementation provides single precision <ref refid="namespacegmx_1a643a4be46c81b885274394cd9ac1a30a" kindref="member">exp2()</ref> faster than <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Only used in <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> to selectively override the generic implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="140" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga5c2bc0bba4513b830bad32f3fc5f54a1" prot="public" static="no">
        <name>GMX_SIMD_HAVE_NATIVE_EXP_FLOAT</name>
        <initializer>0</initializer>
        <briefdescription>
<para>1 if implementation provides single precision <ref refid="namespacegmx_1aa22dfb3027cee75bbc9686094f928050" kindref="member">exp()</ref> faster than <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Only used in <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> to selectively override the generic implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="146" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga5fb93edfc149ac6d5351d5d7fd327b80" prot="public" static="no">
        <name>GMX_SIMD_HAVE_NATIVE_COPYSIGN_DOUBLE</name>
        <initializer>0</initializer>
        <briefdescription>
<para>1 if implementation provides double precision <ref refid="namespacegmx_1a8ef5f6af06e493a4ae2d47109ee0e723" kindref="member">copysign()</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Only used in <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> to selectively override the generic implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="152" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga2c8c664c67f7287baf890c69bfa72814" prot="public" static="no">
        <name>GMX_SIMD_HAVE_NATIVE_RSQRT_ITER_DOUBLE</name>
        <initializer>0</initializer>
        <briefdescription>
<para>1 if implementation provides double precision 1/sqrt(x) N-R iterations faster than <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Only used in <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> to selectively override the generic implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="158" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga9094d49ecb55b7140d68b7d402b3dadd" prot="public" static="no">
        <name>GMX_SIMD_HAVE_NATIVE_RCP_ITER_DOUBLE</name>
        <initializer>0</initializer>
        <briefdescription>
<para>1 if implementation provides double precision 1/x N-R iterations faster than <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Only used in <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> to selectively override the generic implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="164" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1gad770ccd6aca01544454e2bb6c45491ce" prot="public" static="no">
        <name>GMX_SIMD_HAVE_NATIVE_LOG_DOUBLE</name>
        <initializer>0</initializer>
        <briefdescription>
<para>1 if implementation provides double precision <ref refid="namespacegmx_1a7b0a25f25b649f59d96b67f2d73c8ad8" kindref="member">log()</ref> faster than <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Only used in <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> to selectively override the generic implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="170" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga05f50a78bbd133cde5ebc83e2ac13a9b" prot="public" static="no">
        <name>GMX_SIMD_HAVE_NATIVE_EXP2_DOUBLE</name>
        <initializer>0</initializer>
        <briefdescription>
<para>1 if implementation provides double precision <ref refid="namespacegmx_1a643a4be46c81b885274394cd9ac1a30a" kindref="member">exp2()</ref> faster than <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Only used in <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> to selectively override the generic implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="176" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga9d3931388f0a22ac74af34709cffaabb" prot="public" static="no">
        <name>GMX_SIMD_HAVE_NATIVE_EXP_DOUBLE</name>
        <initializer>0</initializer>
        <briefdescription>
<para>1 if implementation provides double precision <ref refid="namespacegmx_1aa22dfb3027cee75bbc9686094f928050" kindref="member">exp()</ref> faster than <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Only used in <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref> to selectively override the generic implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="182" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga5ba6c684641af238fb2a5a7d4c6e0237" prot="public" static="no">
        <name>GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_FLOAT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 if <ref refid="group__module__simd_1gad15c3a27898a9f9dbb2963dee1a7cacf" kindref="member">gmx::gatherLoadUBySimdIntTranspose</ref> is present, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="185" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga5f609eec37d8c92163def72ec28bb435" prot="public" static="no">
        <name>GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 if <ref refid="group__module__simd_1gad15c3a27898a9f9dbb2963dee1a7cacf" kindref="member">gmx::gatherLoadUBySimdIntTranspose</ref> is present, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="188" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1gac40bf3261e36fb7ff022e8ab37b04fcf" prot="public" static="no">
        <name>GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 if float half-register load/store/reduce utils present, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="191" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1gadef533340f8e648dfb550cbd8cfd9fc7" prot="public" static="no">
        <name>GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 if double half-register load/store/reduce utils present, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="194" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1gafdbf804a40bfa3dcb15bc50055e58e74" prot="public" static="no">
        <name>GMX_SIMD_FLOAT_WIDTH</name>
        <initializer>4</initializer>
        <briefdescription>
<para>Width of the <ref refid="classgmx_1_1SimdFloat" kindref="compound">gmx::SimdFloat</ref> datatype. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="200" column="13" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga417e9d28b6310876bb2c69eb528c0a86" prot="public" static="no">
        <name>GMX_SIMD_DOUBLE_WIDTH</name>
        <initializer>4</initializer>
        <briefdescription>
<para>Width of the <ref refid="classgmx_1_1SimdDouble" kindref="compound">gmx::SimdDouble</ref> datatype. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="207" column="13" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga5a32ff26e38f94fdffdc253d1a871ca4" prot="public" static="no">
        <name>GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 if float 4xN load utils present, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="212" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1gad27c7840e17aec417f07c73362efb87d" prot="public" static="no">
        <name>GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 if double 4xN load utils present, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="217" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga86b316f5c5de088d4cb073300198f4d3" prot="public" static="no">
        <name>GMX_SIMD4_HAVE_FLOAT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 if implementation provides <ref refid="classgmx_1_1Simd4Float" kindref="compound">gmx::Simd4Float</ref>, otherwise 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="221" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga5a245d615fbc175986d8bd51d816e46d" prot="public" static="no">
        <name>GMX_SIMD4_HAVE_DOUBLE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>1 if the implementation provides <ref refid="classgmx_1_1Simd4Double" kindref="compound">gmx::Simd4Double</ref>, otherwise 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="224" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1gaaf6ba3755c28114d0eec8a71e94175c6" prot="public" static="no">
        <name>GMX_SIMD_FINT32_WIDTH</name>
        <initializer><ref refid="group__module__simd_1gafdbf804a40bfa3dcb15bc50055e58e74" kindref="member">GMX_SIMD_FLOAT_WIDTH</ref></initializer>
        <briefdescription>
<para>Width of the <ref refid="classgmx_1_1SimdFInt32" kindref="compound">gmx::SimdFInt32</ref> datatype. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="227" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1gae8cb1c966b6eafe85d1c56bc52ecfded" prot="public" static="no">
        <name>GMX_SIMD_DINT32_WIDTH</name>
        <initializer><ref refid="group__module__simd_1ga417e9d28b6310876bb2c69eb528c0a86" kindref="member">GMX_SIMD_DOUBLE_WIDTH</ref></initializer>
        <briefdescription>
<para>Width of the <ref refid="classgmx_1_1SimdDInt32" kindref="compound">gmx::SimdDInt32</ref> datatype. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="230" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga103880e9c6120155f60f16f440aa5b37" prot="public" static="no">
        <name>GMX_SIMD4_WIDTH</name>
        <initializer>4</initializer>
        <briefdescription>
<para>The SIMD4 type is always four units wide, but this makes code more explicit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="233" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga713bd430a84635d19ba40d21c921756b" prot="public" static="no">
        <name>GMX_SIMD_ALIGNMENT</name>
        <initializer>8</initializer>
        <briefdescription>
<para>Required alignment in bytes for aligned load/store (always defined, even without SIMD) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="236" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga7e207d56564fc020b246563d09214aac" prot="public" static="no">
        <name>GMX_SIMD_RSQRT_BITS</name>
        <initializer>23</initializer>
        <briefdescription>
<para>Accuracy of SIMD 1/sqrt(x) lookup. Used to determine number of iterations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="239" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga8b7a7c4421c0ce401b74c469a109e82c" prot="public" static="no">
        <name>GMX_SIMD_RCP_BITS</name>
        <initializer>23</initializer>
        <briefdescription>
<para>Accuracy of SIMD 1/x lookup. Used to determine number of iterations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" line="242" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_definitions.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Constant width-4 double precision SIMD types and instructions</header>
      <memberdef kind="function" id="group__module__simd_1ga66ff320228b17e4c9fbbb61c7acde2eb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::load4</definition>
        <argsstring>(const double *m)</argsstring>
        <name>load4</name>
        <param>
          <type>const double *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Load 4 double values from aligned memory into SIMD4 variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory aligned to 4 elements. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SIMD4 variable with data loaded. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="131" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="131" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaf6c0b04d40ff74a4ad39c24f9fd3da20" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::store4</definition>
        <argsstring>(double *m, Simd4Double a)</argsstring>
        <name>store4</name>
        <param>
          <type>double *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Store the contents of SIMD4 double to aligned memory m. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">m</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory, aligned to 4 elements. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD4 variable to store </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="147" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="147" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga8e92b72e3e3a4f159180cf15da1889c8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::load4U</definition>
        <argsstring>(const double *m)</argsstring>
        <name>load4U</name>
        <param>
          <type>const double *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Load SIMD4 double from unaligned memory. </para>        </briefdescription>
        <detaileddescription>
<para>Available if <ref refid="group__module__simd_1gacf774b2a886d1ed4149f825c50c8fec2" kindref="member">GMX_SIMD_HAVE_LOADU</ref> is 1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory, no alignment requirement. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SIMD4 variable with data loaded. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="162" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="162" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga61ae7be76c3865fcfe038dd2457a09cd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::store4U</definition>
        <argsstring>(double *m, Simd4Double a)</argsstring>
        <name>store4U</name>
        <param>
          <type>double *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Store SIMD4 double to unaligned memory. </para>        </briefdescription>
        <detaileddescription>
<para>Available if <ref refid="group__module__simd_1ga38ee3ad2fadedbafff3129df1e7c15b4" kindref="member">GMX_SIMD_HAVE_STOREU</ref> is 1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">m</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory, no alignment requirement. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD4 variable to store. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="177" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gac88aa19e4c856c2333bf814c3521c488" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::simd4SetZeroD</definition>
        <argsstring>()</argsstring>
        <name>simd4SetZeroD</name>
        <briefdescription>
<para>Set all SIMD4 double elements to 0. </para>        </briefdescription>
        <detaileddescription>
<para>You should typically just call <ref refid="namespacegmx_1a1b9689c4629a14843a0464a0053c8e9e" kindref="member">gmx::setZero()</ref>, which uses proxy objects internally to handle all types rather than adding the suffix used here.</para><para><simplesect kind="return"><para>SIMD4 0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="190" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga0d555bbdc50b7b523ef3f0e6383808ef" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::operator&amp;</definition>
        <argsstring>(Simd4Double a, Simd4Double b)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Bitwise and for two SIMD4 double variables. </para>        </briefdescription>
        <detaileddescription>
<para>Supported if <ref refid="group__module__simd_1gaf002483e94d5f42de1d5105cf924f8b8" kindref="member">GMX_SIMD_HAVE_LOGICAL</ref> is 1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>data1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>data2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>data1 &amp; data2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="205" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="205" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga847080625fcb1aff7a1db138afd57222" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::andNot</definition>
        <argsstring>(Simd4Double a, Simd4Double b)</argsstring>
        <name>andNot</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Bitwise andnot for two SIMD4 double variables. c=(~a) &amp; b. </para>        </briefdescription>
        <detaileddescription>
<para>Available if <ref refid="group__module__simd_1gaf002483e94d5f42de1d5105cf924f8b8" kindref="member">GMX_SIMD_HAVE_LOGICAL</ref> is 1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>data1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>data2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(~data1) &amp; data2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="236" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="236" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gabcaa9a287c021ad7e3507311ffe23497" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::operator|</definition>
        <argsstring>(Simd4Double a, Simd4Double b)</argsstring>
        <name>operator|</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Bitwise or for two SIMD4 doubles. </para>        </briefdescription>
        <detaileddescription>
<para>Available if <ref refid="group__module__simd_1gaf002483e94d5f42de1d5105cf924f8b8" kindref="member">GMX_SIMD_HAVE_LOGICAL</ref> is 1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>data1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>data2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>data1 | data2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="267" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="267" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaad7bb7baf5edd91a8707584c9cdc086e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::operator^</definition>
        <argsstring>(Simd4Double a, Simd4Double b)</argsstring>
        <name>operator^</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Bitwise xor for two SIMD4 double variables. </para>        </briefdescription>
        <detaileddescription>
<para>Available if <ref refid="group__module__simd_1gaf002483e94d5f42de1d5105cf924f8b8" kindref="member">GMX_SIMD_HAVE_LOGICAL</ref> is 1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>data1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>data2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>data1 ^ data2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="297" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="297" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga07f6ab30b594fa03c4975bed7bffab81" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::operator+</definition>
        <argsstring>(Simd4Double a, Simd4Double b)</argsstring>
        <name>operator+</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Add two double SIMD4 variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>term1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>term2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a+b </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="325" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="325" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gab08e1e219e78b06a60cc995ae663dbab" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::operator-</definition>
        <argsstring>(Simd4Double a, Simd4Double b)</argsstring>
        <name>operator-</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Subtract two SIMD4 variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>term1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>term2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a-b </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="343" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="343" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga4b75b800db84a744c11534a41f3c08c6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::operator-</definition>
        <argsstring>(Simd4Double a)</argsstring>
        <name>operator-</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>SIMD4 floating-point negate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD4 floating-point value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-a </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="360" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="360" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga59d8295d88c9f60db412cb53eb47b768" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::operator*</definition>
        <argsstring>(Simd4Double a, Simd4Double b)</argsstring>
        <name>operator*</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Multiply two SIMD4 variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>factor1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>factor2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a*b. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="378" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="378" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga68d608d0650ac219cb4c0d3034ee855f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::fma</definition>
        <argsstring>(Simd4Double a, Simd4Double b, Simd4Double c)</argsstring>
        <name>fma</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>SIMD4 Fused-multiply-add. Result is a*b+c. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>factor1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>factor2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>term </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a*b+c </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="397" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="397" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga78a3204bd78e9122ba1998e985d1a5bd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::fms</definition>
        <argsstring>(Simd4Double a, Simd4Double b, Simd4Double c)</argsstring>
        <name>fms</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>SIMD4 Fused-multiply-subtract. Result is a*b-c. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>factor1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>factor2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>term </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a*b-c </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="410" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="410" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gae9ec59669729860c9efd1b9c70f3911b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::fnma</definition>
        <argsstring>(Simd4Double a, Simd4Double b, Simd4Double c)</argsstring>
        <name>fnma</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>SIMD4 Fused-negated-multiply-add. Result is -a*b+c. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>factor1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>factor2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>term </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-a*b+c </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="423" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="423" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gac7afe2f2f840c1de18cb7c61917ba11c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::fnms</definition>
        <argsstring>(Simd4Double a, Simd4Double b, Simd4Double c)</argsstring>
        <name>fnms</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>SIMD4 Fused-negated-multiply-subtract. Result is -a*b-c. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>factor1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>factor2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>term </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-a*b-c </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="436" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="436" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga535ead71c3aeb4caaae55d6aefc78799" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::rsqrt</definition>
        <argsstring>(Simd4Double x)</argsstring>
        <name>rsqrt</name>
        <param>
          <type>Simd4Double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD4 1.0/sqrt(x) lookup. </para>        </briefdescription>
        <detaileddescription>
<para>This is a low-level instruction that should only be called from routines implementing the inverse square root in <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument, x&gt;0 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Approximation of 1/sqrt(x), accuracy is <ref refid="group__module__simd_1ga7e207d56564fc020b246563d09214aac" kindref="member">GMX_SIMD_RSQRT_BITS</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="450" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="450" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga9339c53d13a59e946834c14d565f1e18" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::abs</definition>
        <argsstring>(Simd4Double a)</argsstring>
        <name>abs</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>SIMD4 Floating-point <ref refid="group__module__simd_1ga9339c53d13a59e946834c14d565f1e18" kindref="member">abs()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>any floating point values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>fabs(a) for each element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="469" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="469" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga68bbfb58d0ab7d2362d0efde15c14ca3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::max</definition>
        <argsstring>(Simd4Double a, Simd4Double b)</argsstring>
        <name>max</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Set each SIMD4 element to the largest from two variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Any floating-point value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Any floating-point value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>max(a,b) for each element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="487" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="487" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gacf515651ecc6efcf3ec65a8ff488ea02" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::min</definition>
        <argsstring>(Simd4Double a, Simd4Double b)</argsstring>
        <name>min</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Set each SIMD4 element to the largest from two variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Any floating-point value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Any floating-point value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>max(a,b) for each element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="506" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="506" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga3b425556720d8ff72c1998c86c777e75" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::round</definition>
        <argsstring>(Simd4Double a)</argsstring>
        <name>round</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>SIMD4 Round to nearest integer value (in floating-point format). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Any floating-point value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The nearest integer, represented in floating-point format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="524" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="524" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga4383bb9ab1055fc9888e65655db350ba" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::trunc</definition>
        <argsstring>(Simd4Double a)</argsstring>
        <name>trunc</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Truncate SIMD4, i.e. round towards zero - common hardware instruction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Any floating-point value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Integer rounded towards zero, represented in floating-point format.</para></simplesect>
<simplesect kind="note"><para>This is truncation towards zero, not floor(). The reason for this is that truncation is virtually always present as a dedicated hardware instruction, but floor() frequently isn&apos;t. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="546" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="546" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga48eb5014bfc9c6c43e9e21bf8c87ecc4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double gmx_simdcall</type>
        <definition>static double gmx_simdcall gmx::dotProduct</definition>
        <argsstring>(Simd4Double a, Simd4Double b)</argsstring>
        <name>dotProduct</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Return dot product of two double precision SIMD4 variables. </para>        </briefdescription>
        <detaileddescription>
<para>The dot product is calculated between the first three elements in the two vectors, while the fourth is ignored. The result is returned as a scalar.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>vector1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>vector2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a[0]*b[0]+a[1]*b[1]+a[2]*b[2], returned as scalar. Last element is ignored. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="567" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="567" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaf7a690a2d884f1210349194e3c07a5a3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::transpose</definition>
        <argsstring>(Simd4Double *v0, Simd4Double *v1, Simd4Double *v2, Simd4Double *v3)</argsstring>
        <name>transpose</name>
        <param>
          <type>Simd4Double *</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>Simd4Double *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>Simd4Double *</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>Simd4Double *</type>
          <declname>v3</declname>
        </param>
        <briefdescription>
<para>SIMD4 double transpose. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">v0</parametername>
</parameternamelist>
<parameterdescription>
<para>Row 0 on input, column 0 on output </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>Row 1 on input, column 1 on output </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">v2</parametername>
</parameternamelist>
<parameterdescription>
<para>Row 2 on input, column 2 on output </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">v3</parametername>
</parameternamelist>
<parameterdescription>
<para>Row 3 on input, column 3 on output </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="583" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="583" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga905fa4e11c1b9d4628ea5bdeeed3ca77" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4DBool gmx_simdcall</type>
        <definition>static Simd4DBool gmx_simdcall gmx::operator==</definition>
        <argsstring>(Simd4Double a, Simd4Double b)</argsstring>
        <name>operator==</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>a==b for SIMD4 double </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>value1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>value2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Each element of the boolean will be set to true if a==b. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="615" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="615" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga55e1d875f190a65651a57df761799027" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4DBool gmx_simdcall</type>
        <definition>static Simd4DBool gmx_simdcall gmx::operator!=</definition>
        <argsstring>(Simd4Double a, Simd4Double b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>a!=b for SIMD4 double </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>value1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>value2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Each element of the boolean will be set to true if a!=b. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="633" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="633" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga161caa368bcf9f1d566b6bbb81b23a5f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4DBool gmx_simdcall</type>
        <definition>static Simd4DBool gmx_simdcall gmx::operator&lt;</definition>
        <argsstring>(Simd4Double a, Simd4Double b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>a&lt;b for SIMD4 double </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>value1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>value2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Each element of the boolean will be set to true if a&lt;b. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="650" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="651" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga65c76bc6290f217b5fce5d5538c5f342" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4DBool gmx_simdcall</type>
        <definition>static Simd4DBool gmx_simdcall gmx::operator&lt;=</definition>
        <argsstring>(Simd4Double a, Simd4Double b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>a&lt;=b for SIMD4 double. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>value1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>value2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Each element of the boolean will be set to true if a&lt;=b. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="669" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="670" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaacd2b1a31c667bffa467f02e57b191e5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4DBool gmx_simdcall</type>
        <definition>static Simd4DBool gmx_simdcall gmx::operator&amp;&amp;</definition>
        <argsstring>(Simd4DBool a, Simd4DBool b)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>Simd4DBool</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4DBool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Logical <emphasis>and</emphasis> on single precision SIMD4 booleans. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>logical vars 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>logical vars 2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>For each element, the result boolean is true if a &amp; b are true.</para></simplesect>
<simplesect kind="note"><para>This is not necessarily a bitwise operation - the storage format of booleans is implementation-dependent. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="691" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="691" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga5d5483d15fe15e3c3eaf1e4e90e53f90" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4DBool gmx_simdcall</type>
        <definition>static Simd4DBool gmx_simdcall gmx::operator||</definition>
        <argsstring>(Simd4DBool a, Simd4DBool b)</argsstring>
        <name>operator||</name>
        <param>
          <type>Simd4DBool</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4DBool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Logical <emphasis>or</emphasis> on single precision SIMD4 booleans. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>logical vars 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>logical vars 2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>For each element, the result boolean is true if a or b is true.</para></simplesect>
Note that this is not necessarily a bitwise operation - the storage format of booleans is implementation-dependent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="712" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="712" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga314f00cbdc12d0615a873dff3bdd38db" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool gmx_simdcall</type>
        <definition>static bool gmx_simdcall gmx::anyTrue</definition>
        <argsstring>(Simd4DBool a)</argsstring>
        <name>anyTrue</name>
        <param>
          <type>Simd4DBool</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Returns non-zero if any of the boolean in SIMD4 a is True, otherwise 0. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical variable. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if any element in a is true, otherwise false.</para></simplesect>
The actual return value for truth will depend on the architecture, so any non-zero value is considered truth. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="732" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="732" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga223de776671702527c62b4da8f6e570a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::selectByMask</definition>
        <argsstring>(Simd4Double a, Simd4DBool mask)</argsstring>
        <name>selectByMask</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4DBool</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Select from single precision SIMD4 variable where boolean is true. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating-point variable to select from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean selector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>For each element, a is selected for true, 0 for false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="750" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="750" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga388cbdee2056718a2d23b3080d4c9b84" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::selectByNotMask</definition>
        <argsstring>(Simd4Double a, Simd4DBool mask)</argsstring>
        <name>selectByNotMask</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4DBool</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Select from single precision SIMD4 variable where boolean is false. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating-point variable to select from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean selector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>For each element, a is selected for false, 0 for true (sic). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="768" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="768" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gafa1d01238ab3305ab17f301f73eaeaa1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::blend</definition>
        <argsstring>(Simd4Double a, Simd4Double b, Simd4DBool sel)</argsstring>
        <name>blend</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Simd4DBool</type>
          <declname>sel</declname>
        </param>
        <briefdescription>
<para>Vector-blend SIMD4 selection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sel</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean selector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>For each element, select b if sel is true, a otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="788" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="788" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga5ee526de5755cc7bb8d7c46c532483e4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double gmx_simdcall</type>
        <definition>static double gmx_simdcall gmx::reduce</definition>
        <argsstring>(Simd4Double a)</argsstring>
        <name>reduce</name>
        <param>
          <type>Simd4Double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Return sum of all elements in SIMD4 double variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD4 variable to reduce/sum. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sum of all elements in the argument variable. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" line="807" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_double.h" bodystart="807" bodyend="816"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Constant width-4 single precision SIMD types and instructions</header>
      <memberdef kind="function" id="group__module__simd_1ga0c25c98d5fca0e4c2294d775f75949f4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::load4</definition>
        <argsstring>(const float *m)</argsstring>
        <name>load4</name>
        <param>
          <type>const float *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Load 4 float values from aligned memory into SIMD4 variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory aligned to 4 elements. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SIMD4 variable with data loaded. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="131" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="131" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gafc95fcf592b08dfca9aabc44cf994ece" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::store4</definition>
        <argsstring>(float *m, Simd4Float a)</argsstring>
        <name>store4</name>
        <param>
          <type>float *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Store the contents of SIMD4 float to aligned memory m. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">m</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory, aligned to 4 elements. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD4 variable to store </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="147" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="147" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga30c2c73886641040a0f0d5c1f16da97d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::load4U</definition>
        <argsstring>(const float *m)</argsstring>
        <name>load4U</name>
        <param>
          <type>const float *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Load SIMD4 float from unaligned memory. </para>        </briefdescription>
        <detaileddescription>
<para>Available if <ref refid="group__module__simd_1gacf774b2a886d1ed4149f825c50c8fec2" kindref="member">GMX_SIMD_HAVE_LOADU</ref> is 1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory, no alignment requirement. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SIMD4 variable with data loaded. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="162" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="162" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga8a91843f00041c799a995535a7cdc12f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::store4U</definition>
        <argsstring>(float *m, Simd4Float a)</argsstring>
        <name>store4U</name>
        <param>
          <type>float *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Store SIMD4 float to unaligned memory. </para>        </briefdescription>
        <detaileddescription>
<para>Available if <ref refid="group__module__simd_1ga38ee3ad2fadedbafff3129df1e7c15b4" kindref="member">GMX_SIMD_HAVE_STOREU</ref> is 1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">m</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory, no alignment requirement. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD4 variable to store. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="177" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gafa583e5ea332a308e773ad9422e0d080" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::simd4SetZeroF</definition>
        <argsstring>()</argsstring>
        <name>simd4SetZeroF</name>
        <briefdescription>
<para>Set all SIMD4 float elements to 0. </para>        </briefdescription>
        <detaileddescription>
<para>You should typically just call <ref refid="namespacegmx_1a1b9689c4629a14843a0464a0053c8e9e" kindref="member">gmx::setZero()</ref>, which uses proxy objects internally to handle all types rather than adding the suffix used here.</para><para><simplesect kind="return"><para>SIMD4 0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="190" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gab1b1d6f3300a808b8b3a3b516dd39b15" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::operator&amp;</definition>
        <argsstring>(Simd4Float a, Simd4Float b)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Bitwise and for two SIMD4 float variables. </para>        </briefdescription>
        <detaileddescription>
<para>Supported if <ref refid="group__module__simd_1gaf002483e94d5f42de1d5105cf924f8b8" kindref="member">GMX_SIMD_HAVE_LOGICAL</ref> is 1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>data1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>data2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>data1 &amp; data2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="205" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="205" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga4dfe3fded0fc0c151f918e6892603121" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::andNot</definition>
        <argsstring>(Simd4Float a, Simd4Float b)</argsstring>
        <name>andNot</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Bitwise andnot for two SIMD4 float variables. c=(~a) &amp; b. </para>        </briefdescription>
        <detaileddescription>
<para>Available if <ref refid="group__module__simd_1gaf002483e94d5f42de1d5105cf924f8b8" kindref="member">GMX_SIMD_HAVE_LOGICAL</ref> is 1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>data1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>data2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(~data1) &amp; data2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="236" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="236" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gad759e852213903c61d6d4b9053e794fc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::operator|</definition>
        <argsstring>(Simd4Float a, Simd4Float b)</argsstring>
        <name>operator|</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Bitwise or for two SIMD4 floats. </para>        </briefdescription>
        <detaileddescription>
<para>Available if <ref refid="group__module__simd_1gaf002483e94d5f42de1d5105cf924f8b8" kindref="member">GMX_SIMD_HAVE_LOGICAL</ref> is 1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>data1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>data2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>data1 | data2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="267" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="267" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga8385ef4b8312eff3f715d2f817604e51" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::operator^</definition>
        <argsstring>(Simd4Float a, Simd4Float b)</argsstring>
        <name>operator^</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Bitwise xor for two SIMD4 float variables. </para>        </briefdescription>
        <detaileddescription>
<para>Available if <ref refid="group__module__simd_1gaf002483e94d5f42de1d5105cf924f8b8" kindref="member">GMX_SIMD_HAVE_LOGICAL</ref> is 1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>data1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>data2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>data1 ^ data2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="297" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="297" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gafd943dd0c83fa26c6eb5805ad5025e17" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::operator+</definition>
        <argsstring>(Simd4Float a, Simd4Float b)</argsstring>
        <name>operator+</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Add two float SIMD4 variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>term1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>term2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a+b </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="325" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="325" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gadb00887996b2ed9e672c7b556c53cb98" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::operator-</definition>
        <argsstring>(Simd4Float a, Simd4Float b)</argsstring>
        <name>operator-</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Subtract two SIMD4 variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>term1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>term2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a-b </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="343" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="343" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaad9353fb4bd3db4bb232f65d47a6abcf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::operator-</definition>
        <argsstring>(Simd4Float a)</argsstring>
        <name>operator-</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>SIMD4 floating-point negate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD4 floating-point value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-a </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="360" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="360" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga42f5e1c65d65ad34afa31b6d0e5f7c7b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::operator*</definition>
        <argsstring>(Simd4Float a, Simd4Float b)</argsstring>
        <name>operator*</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Multiply two SIMD4 variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>factor1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>factor2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a*b. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="378" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="378" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaa2db026253ce788e7f136326089e8a77" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::fma</definition>
        <argsstring>(Simd4Float a, Simd4Float b, Simd4Float c)</argsstring>
        <name>fma</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>SIMD4 Fused-multiply-add. Result is a*b+c. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>factor1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>factor2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>term </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a*b+c </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="397" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="397" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gafb3861a4cc7cae530fcf5bf83955da1b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::fms</definition>
        <argsstring>(Simd4Float a, Simd4Float b, Simd4Float c)</argsstring>
        <name>fms</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>SIMD4 Fused-multiply-subtract. Result is a*b-c. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>factor1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>factor2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>term </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a*b-c </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="410" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="410" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaaf4df87eca51bb2f57ffe0bcb1c9de02" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::fnma</definition>
        <argsstring>(Simd4Float a, Simd4Float b, Simd4Float c)</argsstring>
        <name>fnma</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>SIMD4 Fused-negated-multiply-add. Result is -a*b+c. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>factor1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>factor2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>term </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-a*b+c </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="423" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="423" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gace0a9be42a2c83de88e9de207cd82e80" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::fnms</definition>
        <argsstring>(Simd4Float a, Simd4Float b, Simd4Float c)</argsstring>
        <name>fnms</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>SIMD4 Fused-negated-multiply-subtract. Result is -a*b-c. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>factor1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>factor2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>term </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-a*b-c </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="436" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="436" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaae4a6def215dcf244fcba8ba06eb1f26" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::rsqrt</definition>
        <argsstring>(Simd4Float x)</argsstring>
        <name>rsqrt</name>
        <param>
          <type>Simd4Float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD4 1.0/sqrt(x) lookup. </para>        </briefdescription>
        <detaileddescription>
<para>This is a low-level instruction that should only be called from routines implementing the inverse square root in <ref refid="simd__math_8h" kindref="compound">simd_math.h</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument, x&gt;0 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Approximation of 1/sqrt(x), accuracy is <ref refid="group__module__simd_1ga7e207d56564fc020b246563d09214aac" kindref="member">GMX_SIMD_RSQRT_BITS</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="450" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="450" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga4555c730e6119f070664703072a7235c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::abs</definition>
        <argsstring>(Simd4Float a)</argsstring>
        <name>abs</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>SIMD4 Floating-point fabs(). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>any floating point values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>fabs(a) for each element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="468" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="468" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga3c66081dde9666200461f364725a4085" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::max</definition>
        <argsstring>(Simd4Float a, Simd4Float b)</argsstring>
        <name>max</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Set each SIMD4 element to the largest from two variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Any floating-point value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Any floating-point value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>max(a,b) for each element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="486" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="486" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga2da2e85aea6a6eef4add06627566b8ab" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::min</definition>
        <argsstring>(Simd4Float a, Simd4Float b)</argsstring>
        <name>min</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Set each SIMD4 element to the largest from two variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Any floating-point value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Any floating-point value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>max(a,b) for each element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="505" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="505" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gacf1bf91a0d1377886282a96f558798c8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::round</definition>
        <argsstring>(Simd4Float a)</argsstring>
        <name>round</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>SIMD4 Round to nearest integer value (in floating-point format). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Any floating-point value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The nearest integer, represented in floating-point format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="523" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="523" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga97c12b8d0415b8633da6b48f437d6078" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::trunc</definition>
        <argsstring>(Simd4Float a)</argsstring>
        <name>trunc</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Truncate SIMD4, i.e. round towards zero - common hardware instruction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Any floating-point value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Integer rounded towards zero, represented in floating-point format.</para></simplesect>
<simplesect kind="note"><para>This is truncation towards zero, not floor(). The reason for this is that truncation is virtually always present as a dedicated hardware instruction, but floor() frequently isn&apos;t. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="545" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="545" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gac0420b0ba8ce5c0bbdf94d69c67ab563" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float gmx_simdcall</type>
        <definition>static float gmx_simdcall gmx::dotProduct</definition>
        <argsstring>(Simd4Float a, Simd4Float b)</argsstring>
        <name>dotProduct</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Return dot product of two single precision SIMD4 variables. </para>        </briefdescription>
        <detaileddescription>
<para>The dot product is calculated between the first three elements in the two vectors, while the fourth is ignored. The result is returned as a scalar.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>vector1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>vector2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a[0]*b[0]+a[1]*b[1]+a[2]*b[2], returned as scalar. Last element is ignored. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="566" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="566" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga059f7a354565ad8c1494853ec9a00d3f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::transpose</definition>
        <argsstring>(Simd4Float *v0, Simd4Float *v1, Simd4Float *v2, Simd4Float *v3)</argsstring>
        <name>transpose</name>
        <param>
          <type>Simd4Float *</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>Simd4Float *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>Simd4Float *</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>Simd4Float *</type>
          <declname>v3</declname>
        </param>
        <briefdescription>
<para>SIMD4 float transpose. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">v0</parametername>
</parameternamelist>
<parameterdescription>
<para>Row 0 on input, column 0 on output </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>Row 1 on input, column 1 on output </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">v2</parametername>
</parameternamelist>
<parameterdescription>
<para>Row 2 on input, column 2 on output </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">v3</parametername>
</parameternamelist>
<parameterdescription>
<para>Row 3 on input, column 3 on output </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="582" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="582" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gae817b7cf5e876f1c6357e14a4666a3c6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4FBool gmx_simdcall</type>
        <definition>static Simd4FBool gmx_simdcall gmx::operator==</definition>
        <argsstring>(Simd4Float a, Simd4Float b)</argsstring>
        <name>operator==</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>a==b for SIMD4 float </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>value1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>value2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Each element of the boolean will be set to true if a==b. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="614" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="614" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaabe89c1073d64ee649e9cd7b37c85e2e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4FBool gmx_simdcall</type>
        <definition>static Simd4FBool gmx_simdcall gmx::operator!=</definition>
        <argsstring>(Simd4Float a, Simd4Float b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>a!=b for SIMD4 float </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>value1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>value2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Each element of the boolean will be set to true if a!=b. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="632" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="632" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaf02163d0cb41985160b79503ef1d53d0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4FBool gmx_simdcall</type>
        <definition>static Simd4FBool gmx_simdcall gmx::operator&lt;</definition>
        <argsstring>(Simd4Float a, Simd4Float b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>a&lt;b for SIMD4 float </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>value1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>value2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Each element of the boolean will be set to true if a&lt;b. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="649" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="650" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga46491dc3239fcdcd48c55e00184c81ec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4FBool gmx_simdcall</type>
        <definition>static Simd4FBool gmx_simdcall gmx::operator&lt;=</definition>
        <argsstring>(Simd4Float a, Simd4Float b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>a&lt;=b for SIMD4 float. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>value1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>value2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Each element of the boolean will be set to true if a&lt;=b. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="668" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="669" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gab72a2c3a96ed9681d4df89e38ec1583e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4FBool gmx_simdcall</type>
        <definition>static Simd4FBool gmx_simdcall gmx::operator&amp;&amp;</definition>
        <argsstring>(Simd4FBool a, Simd4FBool b)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>Simd4FBool</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4FBool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Logical <emphasis>and</emphasis> on single precision SIMD4 booleans. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>logical vars 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>logical vars 2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>For each element, the result boolean is true if a &amp; b are true.</para></simplesect>
<simplesect kind="note"><para>This is not necessarily a bitwise operation - the storage format of booleans is implementation-dependent. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="690" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="690" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaf2ab4b4f3d3e7f6e9a012df64c1d9f3c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4FBool gmx_simdcall</type>
        <definition>static Simd4FBool gmx_simdcall gmx::operator||</definition>
        <argsstring>(Simd4FBool a, Simd4FBool b)</argsstring>
        <name>operator||</name>
        <param>
          <type>Simd4FBool</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4FBool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Logical <emphasis>or</emphasis> on single precision SIMD4 booleans. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>logical vars 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>logical vars 2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>For each element, the result boolean is true if a or b is true.</para></simplesect>
Note that this is not necessarily a bitwise operation - the storage format of booleans is implementation-dependent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="711" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="711" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga5b8118b5d14f17aa83d64531e7793e4e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool gmx_simdcall</type>
        <definition>static bool gmx_simdcall gmx::anyTrue</definition>
        <argsstring>(Simd4FBool a)</argsstring>
        <name>anyTrue</name>
        <param>
          <type>Simd4FBool</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Returns non-zero if any of the boolean in SIMD4 a is True, otherwise 0. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical variable. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if any element in a is true, otherwise false.</para></simplesect>
The actual return value for truth will depend on the architecture, so any non-zero value is considered truth. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="731" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="731" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga76ed0866ac21967e0a9641acca32ab50" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::selectByMask</definition>
        <argsstring>(Simd4Float a, Simd4FBool mask)</argsstring>
        <name>selectByMask</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4FBool</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Select from single precision SIMD4 variable where boolean is true. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating-point variable to select from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean selector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>For each element, a is selected for true, 0 for false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="749" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="749" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaaff9aa6673f42b4d0d4f3b154deac384" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::selectByNotMask</definition>
        <argsstring>(Simd4Float a, Simd4FBool mask)</argsstring>
        <name>selectByNotMask</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4FBool</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Select from single precision SIMD4 variable where boolean is false. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating-point variable to select from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean selector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>For each element, a is selected for false, 0 for true (sic). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="767" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="767" bodyend="776"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga9a3c7493047defc21bf934ca9fc39476" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::blend</definition>
        <argsstring>(Simd4Float a, Simd4Float b, Simd4FBool sel)</argsstring>
        <name>blend</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Simd4FBool</type>
          <declname>sel</declname>
        </param>
        <briefdescription>
<para>Vector-blend SIMD4 selection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sel</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean selector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>For each element, select b if sel is true, a otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="787" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="787" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga072c4a40acda5dbbd28687df84331335" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float gmx_simdcall</type>
        <definition>static float gmx_simdcall gmx::reduce</definition>
        <argsstring>(Simd4Float a)</argsstring>
        <name>reduce</name>
        <param>
          <type>Simd4Float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Return sum of all elements in SIMD4 float variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD4 variable to reduce/sum. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sum of all elements in the argument variable. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" line="806" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_simd4_float.h" bodystart="806" bodyend="815"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>SIMD predefined macros to describe high-level capabilities</header>
      <description><para>These macros are used to describe the features available in default Gromacs real precision. They are set from the lower-level implementation files that have macros describing single and double precision individually, as well as the implementation details. </para></description>
      <memberdef kind="define" id="group__module__simd_1ga1578fccdb327f36a2bea338457cbf883" prot="public" static="no">
        <name>GMX_SIMD_HAVE_REAL</name>
        <initializer><ref refid="group__module__simd_1ga8d093280bad2b3ebecbcd426bdddb73b" kindref="member">GMX_SIMD_HAVE_FLOAT</ref></initializer>
        <briefdescription>
<para>1 if SimdReal is available, otherwise 0. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__module__simd_1gaf5545c033bb4a28657239e4c9739cefe" kindref="member">GMX_SIMD_HAVE_DOUBLE</ref> if GMX_DOUBLE is 1, otherwise <ref refid="group__module__simd_1ga8d093280bad2b3ebecbcd426bdddb73b" kindref="member">GMX_SIMD_HAVE_FLOAT</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd.h" line="167" column="13" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga586ccc19c21a1d5e9c97e15b70822fba" prot="public" static="no">
        <name>GMX_SIMD_REAL_WIDTH</name>
        <initializer><ref refid="group__module__simd_1gafdbf804a40bfa3dcb15bc50055e58e74" kindref="member">GMX_SIMD_FLOAT_WIDTH</ref></initializer>
        <briefdescription>
<para>Width of SimdReal. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__module__simd_1ga417e9d28b6310876bb2c69eb528c0a86" kindref="member">GMX_SIMD_DOUBLE_WIDTH</ref> if GMX_DOUBLE is 1, otherwise <ref refid="group__module__simd_1gafdbf804a40bfa3dcb15bc50055e58e74" kindref="member">GMX_SIMD_FLOAT_WIDTH</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd.h" line="173" column="13" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga036e9a3893a355aa51267fef7b5d4cae" prot="public" static="no">
        <name>GMX_SIMD_HAVE_INT32_EXTRACT</name>
        <initializer><ref refid="group__module__simd_1ga23ac53a0050467ac215f146f6afc6380" kindref="member">GMX_SIMD_HAVE_FINT32_EXTRACT</ref></initializer>
        <briefdescription>
<para>1 if support is available for extracting elements from SimdInt32, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__module__simd_1gabae2f56a4d87b8e52b5df066888a4c07" kindref="member">GMX_SIMD_HAVE_DINT32_EXTRACT</ref> if GMX_DOUBLE is 1, otherwise <ref refid="group__module__simd_1ga23ac53a0050467ac215f146f6afc6380" kindref="member">GMX_SIMD_HAVE_FINT32_EXTRACT</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd.h" line="180" column="13" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga69de9b6e1473a9dc3ab6a5588d00192a" prot="public" static="no">
        <name>GMX_SIMD_HAVE_INT32_LOGICAL</name>
        <initializer><ref refid="group__module__simd_1ga354867d2570fecb6b341047947bee0d1" kindref="member">GMX_SIMD_HAVE_FINT32_LOGICAL</ref></initializer>
        <briefdescription>
<para>1 if logical ops are supported on SimdInt32, otherwise 0. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__module__simd_1ga0ccbae145ecb27cee3c98ec7bded1d45" kindref="member">GMX_SIMD_HAVE_DINT32_LOGICAL</ref> if GMX_DOUBLE is 1, otherwise <ref refid="group__module__simd_1ga354867d2570fecb6b341047947bee0d1" kindref="member">GMX_SIMD_HAVE_FINT32_LOGICAL</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd.h" line="187" column="13" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga8a9534860edf5a3f2b9cd1bc60529b39" prot="public" static="no">
        <name>GMX_SIMD_HAVE_INT32_ARITHMETICS</name>
        <initializer><ref refid="group__module__simd_1ga9febc62e1abd58eb8a035b8b81f93292" kindref="member">GMX_SIMD_HAVE_FINT32_ARITHMETICS</ref></initializer>
        <briefdescription>
<para>1 if arithmetic ops are supported on SimdInt32, otherwise 0. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__module__simd_1gab8469202af6999f95405779355d89c30" kindref="member">GMX_SIMD_HAVE_DINT32_ARITHMETICS</ref> if GMX_DOUBLE is 1, otherwise <ref refid="group__module__simd_1ga9febc62e1abd58eb8a035b8b81f93292" kindref="member">GMX_SIMD_HAVE_FINT32_ARITHMETICS</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd.h" line="194" column="13" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1gad1350cf295aeed5d4fce461ca2048c56" prot="public" static="no">
        <name>GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_REAL</name>
        <initializer><ref refid="group__module__simd_1ga5ba6c684641af238fb2a5a7d4c6e0237" kindref="member">GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_FLOAT</ref></initializer>
        <briefdescription>
<para>1 if gmx::simdGatherLoadUBySimdIntTranspose is present, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__module__simd_1ga5f609eec37d8c92163def72ec28bb435" kindref="member">GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE</ref> if GMX_DOUBLE is 1, otherwise <ref refid="group__module__simd_1ga5ba6c684641af238fb2a5a7d4c6e0237" kindref="member">GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_FLOAT</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd.h" line="201" column="13" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga0d9f8d6284ecbbd135b89f2ad8999839" prot="public" static="no">
        <name>GMX_SIMD_HAVE_HSIMD_UTIL_REAL</name>
        <initializer><ref refid="group__module__simd_1gac40bf3261e36fb7ff022e8ab37b04fcf" kindref="member">GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT</ref></initializer>
        <briefdescription>
<para>1 if real half-register load/store/reduce utils present, otherwise 0 </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__module__simd_1gadef533340f8e648dfb550cbd8cfd9fc7" kindref="member">GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE</ref> if GMX_DOUBLE is 1, otherwise <ref refid="group__module__simd_1gac40bf3261e36fb7ff022e8ab37b04fcf" kindref="member">GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd.h" line="208" column="13" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga6c015b9c619e63324df85f91e25191c5" prot="public" static="no">
        <name>GMX_SIMD4_HAVE_REAL</name>
        <initializer><ref refid="group__module__simd_1ga86b316f5c5de088d4cb073300198f4d3" kindref="member">GMX_SIMD4_HAVE_FLOAT</ref></initializer>
        <briefdescription>
<para>1 if Simd4Real is available, otherwise 0. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__module__simd_1ga5a245d615fbc175986d8bd51d816e46d" kindref="member">GMX_SIMD4_HAVE_DOUBLE</ref> if GMX_DOUBLE is 1, otherwise <ref refid="group__module__simd_1ga86b316f5c5de088d4cb073300198f4d3" kindref="member">GMX_SIMD4_HAVE_FLOAT</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd.h" line="214" column="13" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Single precision SIMD math functions</header>
      <description><para><simplesect kind="note"><para>In most cases you should use the real-precision functions instead. </para></simplesect>
</para></description>
      <memberdef kind="function" id="group__module__simd_1gacb8a1939549a71a3c2861de9ce865301" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::copysign</definition>
        <argsstring>(SimdFloat x, SimdFloat y)</argsstring>
        <name>copysign</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Composes floating point value with the magnitude of x and the sign of y. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Values to set sign for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Values used to set sign </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Magnitude of x, sign of y </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="104" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="104" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gade7401625051e95c057a8f5fe6dc5fbc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::rsqrtIter</definition>
        <argsstring>(SimdFloat lu, SimdFloat x)</argsstring>
        <name>rsqrtIter</name>
        <param>
          <type>SimdFloat</type>
          <declname>lu</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Perform one Newton-Raphson iteration to improve 1/sqrt(x) for SIMD float. </para>        </briefdescription>
        <detaileddescription>
<para>This is a low-level routine that should only be used by SIMD math routine that evaluates the inverse square root.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lu</parametername>
</parameternamelist>
<parameterdescription>
<para>Approximation of 1/sqrt(x), typically obtained from lookup. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference (starting) value x for which we want 1/sqrt(x). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An improved approximation with roughly twice as many bits of accuracy. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="125" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="125" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga1bf9fd932f39d4ad83b360395f1c3986" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::invsqrt</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>invsqrt</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate 1/sqrt(x) for SIMD float. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument that must be larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/sqrt(x). Result is undefined if your argument was invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="148" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="148" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga2a4b0a1815e2a09330e4e61444b3f630" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::invsqrtPair</definition>
        <argsstring>(SimdFloat x0, SimdFloat x1, SimdFloat *out0, SimdFloat *out1)</argsstring>
        <name>invsqrtPair</name>
        <param>
          <type>SimdFloat</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>out0</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>out1</declname>
        </param>
        <briefdescription>
<para>Calculate 1/sqrt(x) for two SIMD floats. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
</parameternamelist>
<parameterdescription>
<para>First set of arguments, x0 must be in single range (see below). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>Second set of arguments, x1 must be in single range (see below). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out0</parametername>
</parameternamelist>
<parameterdescription>
<para>Result 1/sqrt(x0) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out1</parametername>
</parameternamelist>
<parameterdescription>
<para>Result 1/sqrt(x1)</para></parameterdescription>
</parameteritem>
</parameterlist>
In particular for double precision we can sometimes calculate square root pairs slightly faster by using single precision until the very last step.</para><para><simplesect kind="note"><para>Both arguments must be larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="183" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="183" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga85e439a79e5b92d8544451b8c1ba41f5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::rcpIter</definition>
        <argsstring>(SimdFloat lu, SimdFloat x)</argsstring>
        <name>rcpIter</name>
        <param>
          <type>SimdFloat</type>
          <declname>lu</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Perform one Newton-Raphson iteration to improve 1/x for SIMD float. </para>        </briefdescription>
        <detaileddescription>
<para>This is a low-level routine that should only be used by SIMD math routine that evaluates the reciprocal.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lu</parametername>
</parameternamelist>
<parameterdescription>
<para>Approximation of 1/x, typically obtained from lookup. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference (starting) value x for which we want 1/x. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An improved approximation with roughly twice as many bits of accuracy. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="201" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="201" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga6a3c6ca88a6073aba3eb600da20cc92b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::inv</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>inv</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate 1/x for SIMD float. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument with magnitude larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/x. Result is undefined if your argument was invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="221" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="221" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga0f60c988e122306d212679a83bd12910" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::operator/</definition>
        <argsstring>(SimdFloat nom, SimdFloat denom)</argsstring>
        <name>operator/</name>
        <param>
          <type>SimdFloat</type>
          <declname>nom</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>denom</declname>
        </param>
        <briefdescription>
<para>Division for SIMD floats. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nom</parametername>
</parameternamelist>
<parameterdescription>
<para>Nominator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denom</parametername>
</parameternamelist>
<parameterdescription>
<para>Denominator, with magnitude in range (GMX_FLOAT_MIN,GMX_FLOAT_MAX). For single precision this is equivalent to a nonzero argument, but in double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nom/denom</para></simplesect>
<simplesect kind="note"><para>This function does not use any masking to avoid problems with zero values in the denominator. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="252" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gab41aa57f986f3983040e5f589e3eb07c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat</type>
        <definition>static SimdFloat gmx::maskzInvsqrt</definition>
        <argsstring>(SimdFloat x, SimdFBool m)</argsstring>
        <name>maskzInvsqrt</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <param>
          <type>SimdFBool</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Calculate 1/sqrt(x) for masked entries of SIMD float. </para>        </briefdescription>
        <detaileddescription>
<para>This routine only evaluates 1/sqrt(x) for elements for which mask is true. Illegal values in the masked-out elements will not lead to floating-point exceptions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument that must be larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX for masked-in entries. See <ref refid="namespacegmx_1a953226d61f6527af6485ea56a8384c85" kindref="member">invsqrt</ref> for the discussion about argument restrictions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/sqrt(x). Result is undefined if your argument was invalid or entry was not masked, and 0.0 for masked-out entries. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="271" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="271" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gae1968e5334b953108c682435b6e59694" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::maskzInv</definition>
        <argsstring>(SimdFloat x, SimdFBool m)</argsstring>
        <name>maskzInv</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <param>
          <type>SimdFBool</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Calculate 1/x for SIMD float, masked version. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument with magnitude larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX for masked-in entries. See <ref refid="namespacegmx_1a953226d61f6527af6485ea56a8384c85" kindref="member">invsqrt</ref> for the discussion about argument restrictions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/x for elements where m is true, or 0.0 for masked-out entries. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="295" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="295" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaf84cf0860622bb52d9ef8d62563a7815" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>MathOptimization</type>
            <declname>opt</declname>
            <defname>opt</defname>
            <defval>MathOptimization::Safe</defval>
          </param>
        </templateparamlist>
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::sqrt</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>sqrt</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate sqrt(x) for SIMD floats. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>By default, this function checks if the input value is 0.0 and masks this to return the correct result. If you are certain your argument will never be zero, and you know you need to save every single cycle you can, you can alternatively call the function as sqrt&lt;MathOptimization::Unsafe&gt;(x).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument that must be in range 0 &lt;=x &lt;= GMX_FLOAT_MAX, since the lookup step often has to be implemented in single precision. Arguments smaller than GMX_FLOAT_MIN will always lead to a zero result, even in double precision. If you are using the unsafe math optimization parameter, the argument must be in the range GMX_FLOAT_MIN &lt;= x &lt;= GMX_FLOAT_MAX.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sqrt(x). The result is undefined if the input value does not fall in the allowed range specified for the argument. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="330" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="330" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga332f838e799c55c26e23126ea2aeace5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::log</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>log</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float log(x). This is the natural logarithm. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument, should be &gt;0. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The natural logarithm of x. Undefined if argument is invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="350" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="350" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga53b14cbaf68e8e449f610ae172c39699" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>MathOptimization</type>
            <declname>opt</declname>
            <defname>opt</defname>
            <defval>MathOptimization::Safe</defval>
          </param>
        </templateparamlist>
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::exp2</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>exp2</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float 2^x. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is changed from the default (safe) into the unsafe option, input values that would otherwise lead to zero-clamped results are not allowed and will lead to undefined results.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument. For the default (safe) function version this can be arbitrarily small value, but the routine might clamp the result to zero for arguments that would produce subnormal IEEE754-2008 results. This corresponds to inputs below -126 in single or -1022 in double, and it might overflow for arguments reaching 127 (single) or 1023 (double). If you enable the unsafe math optimization, very small arguments will not necessarily be zero-clamped, but can produce undefined results.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>2^x. The result is undefined for very large arguments that cause internal floating-point overflow. If unsafe optimizations are enabled, this is also true for very small values.</para></simplesect>
<simplesect kind="note"><para>The definition range of this function is just-so-slightly smaller than the allowed IEEE exponents for many architectures. This is due to the implementation, which will hopefully improve in the future.</para></simplesect>
<simplesect kind="warning"><para>You cannot rely on this implementation returning inf for arguments that cause overflow. If you have some very large values and need to rely on getting a valid numerical output, take the minimum of your variable and the largest valid argument before calling this routine. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="418" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="418" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gacf6583b14086a1a6b6947838ccc7301e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>MathOptimization</type>
            <declname>opt</declname>
            <defname>opt</defname>
            <defval>MathOptimization::Safe</defval>
          </param>
        </templateparamlist>
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::exp</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>exp</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float exp(x). </para>        </briefdescription>
        <detaileddescription>
<para>In addition to scaling the argument for 2^x this routine correctly does extended precision arithmetics to improve accuracy.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is changed from the default (safe) into the unsafe option, input values that would otherwise lead to zero-clamped results are not allowed and will lead to undefined results.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument. For the default (safe) function version this can be arbitrarily small value, but the routine might clamp the result to zero for arguments that would produce subnormal IEEE754-2008 results. This corresponds to input arguments reaching -126*ln(2)=-87.3 in single, or -1022*ln(2)=-708.4 (double). Similarly, it might overflow for arguments reaching 127*ln(2)=88.0 (single) or 1023*ln(2)=709.1 (double). If the unsafe math optimizations are enabled, small input values that would result in zero-clamped output are not allowed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>exp(x). Overflowing arguments are likely to either return 0 or inf, depending on the underlying implementation. If unsafe optimizations are enabled, this is also true for very small values.</para></simplesect>
<simplesect kind="note"><para>The definition range of this function is just-so-slightly smaller than the allowed IEEE exponents for many architectures. This is due to the implementation, which will hopefully improve in the future.</para></simplesect>
<simplesect kind="warning"><para>You cannot rely on this implementation returning inf for arguments that cause overflow. If you have some very large values and need to rely on getting a valid numerical output, take the minimum of your variable and the largest valid argument before calling this routine. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="505" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="505" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga60e354f86286dc5b7620f6bc663bb089" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::erf</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>erf</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float erf(x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to calculate erf(x) for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>erf(x)</para></simplesect>
This routine achieves very close to full precision, but we do not care about the last bit or the subnormal result range. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="573" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="573" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga1e169e3f45d0532ab2350daad387ca57" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::erfc</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>erfc</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float erfc(x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to calculate erfc(x) for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>erfc(x)</para></simplesect>
This routine achieves full precision (bar the last bit) over most of the input range, but for large arguments where the result is getting close to the minimum representable numbers we accept slightly larger errors (think results that are in the ballpark of 10^-30 for single precision) since that is not relevant for MD. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="693" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="693" bodyend="856"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga2640bfdb9db1762df1b5da82d80e73b8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::sincos</definition>
        <argsstring>(SimdFloat x, SimdFloat *sinval, SimdFloat *cosval)</argsstring>
        <name>sincos</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>sinval</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>cosval</declname>
        </param>
        <briefdescription>
<para>SIMD float sin &amp; cos. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate sin/cos for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sinval</parametername>
</parameternamelist>
<parameterdescription>
<para>Sin(x) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cosval</parametername>
</parameternamelist>
<parameterdescription>
<para>Cos(x)</para></parameterdescription>
</parameteritem>
</parameterlist>
This version achieves close to machine precision, but for very large magnitudes of the argument we inherently begin to lose accuracy due to the argument reduction, despite using extended precision arithmetics internally. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="869" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="869" bodyend="978"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga9ef875418e7985b298af5f6d58f32e23" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::sin</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>sin</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float sin(x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate sin for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sin(x)</para></simplesect>
<simplesect kind="attention"><para>Do NOT call both sin &amp; cos if you need both results, since each of them will then call <ref refid="namespacegmx_1a3191310c1a122aafe946f0caf2fdf364" kindref="member">sincos</ref> and waste a factor 2 in performance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="989" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="989" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga9c58146cc6b29eaa9756faea26eba851" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::cos</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>cos</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float cos(x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate cos for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Cos(x)</para></simplesect>
<simplesect kind="attention"><para>Do NOT call both sin &amp; cos if you need both results, since each of them will then call <ref refid="namespacegmx_1a3191310c1a122aafe946f0caf2fdf364" kindref="member">sincos</ref> and waste a factor 2 in performance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1005" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1005" bodyend="1010"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaa9b029f69c4afa8bbe7941990507d0f5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::tan</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>tan</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float tan(x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate tan for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tan(x) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1018" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1018" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gabad1890270f5f95bf48d2decd31c7a1a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::asin</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>asin</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float asin(x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate asin for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Asin(x) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1091" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1091" bodyend="1133"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga95f617b5ff9a30dde812f59c8c50bab4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::acos</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>acos</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float acos(x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate acos for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Acos(x) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1141" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1141" bodyend="1168"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gac4afec2509b0edcdae7fe2ddfc2f3ecc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::atan</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>atan</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float asin(x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate atan for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Atan(x), same argument/value range as standard math library. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1176" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1176" bodyend="1212"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga7f1a591557aea01675643b86653ca136" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::atan2</definition>
        <argsstring>(SimdFloat y, SimdFloat x)</argsstring>
        <name>atan2</name>
        <param>
          <type>SimdFloat</type>
          <declname>y</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float atan2(y,x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y component of vector, any quartile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>X component of vector, any quartile </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Atan(y,x), same argument/value range as standard math library.</para></simplesect>
<simplesect kind="note"><para>This routine should provide correct results for all finite non-zero or positive-zero arguments. However, negative zero arguments will be treated as positive zero, which means the return value will deviate from the standard math library atan2(y,x) for those cases. That should not be of any concern in Gromacs, and in particular it will not affect calculations of angles from vectors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1228" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1228" bodyend="1252"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gae7ea15fc154a3be2831f786b660b8a6c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::pmeForceCorrection</definition>
        <argsstring>(SimdFloat z2)</argsstring>
        <name>pmeForceCorrection</name>
        <param>
          <type>SimdFloat</type>
          <declname>z2</declname>
        </param>
        <briefdescription>
<para>Calculate the force correction due to PME analytically in SIMD float. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z2</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="19">$(r \beta)^2$</formula> - see below for details. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Correction factor to coulomb force - see below for details.</para></simplesect>
This routine is meant to enable analytical evaluation of the direct-space PME electrostatic force to avoid tables.</para><para>The direct-space potential should be <formula id="20">$ \mbox{erfc}(\beta r)/r$</formula>, but there are some problems evaluating that:</para><para>First, the error function is difficult (read: expensive) to approxmiate accurately for intermediate to large arguments, and this happens already in ranges of <formula id="21">$(\beta r)$</formula> that occur in simulations. Second, we now try to avoid calculating potentials in Gromacs but use forces directly.</para><para>We can simply things slight by noting that the PME part is really a correction to the normal Coulomb force since <formula id="22">$\mbox{erfc}(z)=1-\mbox{erf}(z)$</formula>, i.e. <formula id="23">\[ V = \frac{1}{r} - \frac{\mbox{erf}(\beta r)}{r} \]</formula> The first term we already have from the inverse square root, so that we can leave out of this routine.</para><para>For pme tolerances of 1e-3 to 1e-8 and cutoffs of 0.5nm to 1.8nm, the argument <formula id="24">$beta r$</formula> will be in the range 0.15 to ~4, which is the range used for the minimax fit. Use your favorite plotting program to realize how well-behaved <formula id="25">$\frac{\mbox{erf}(z)}{z}$</formula> is in this range!</para><para>We approximate <formula id="26">$f(z)=\mbox{erf}(z)/z$</formula> with a rational minimax polynomial. However, it turns out it is more efficient to approximate <formula id="27">$f(z)/z$</formula> and then only use even powers. This is another minor optimization, since we actually <emphasis>want</emphasis> <formula id="27">$f(z)/z$</formula>, because it is going to be multiplied by the vector between the two atoms to get the vectorial force. The fastest flops are the ones we can avoid calculating!</para><para>So, here&apos;s how it should be used:</para><para><orderedlist>
<listitem><para>Calculate <formula id="28">$r^2$</formula>.</para></listitem><listitem><para>Multiply by <formula id="29">$\beta^2$</formula>, so you get <formula id="30">$z^2=(\beta r)^2$</formula>.</para></listitem><listitem><para>Evaluate this routine with <formula id="31">$z^2$</formula> as the argument.</para></listitem><listitem><para>The return value is the expression:</para><para><formula id="32">\[ \frac{2 \exp{-z^2}}{\sqrt{\pi} z^2}-\frac{\mbox{erf}(z)}{z^3} \]</formula></para></listitem><listitem><para>Multiply the entire expression by <formula id="33">$\beta^3$</formula>. This will get you</para><para><formula id="34">\[ \frac{2 \beta^3 \exp(-z^2)}{\sqrt{\pi} z^2} - \frac{\beta^3 \mbox{erf}(z)}{z^3} \]</formula></para><para>or, switching back to <formula id="35">$r$</formula> (since <formula id="36">$z=r \beta$</formula>):</para><para><formula id="37">\[ \frac{2 \beta \exp(-r^2 \beta^2)}{\sqrt{\pi} r^2} - \frac{\mbox{erf}(r \beta)}{r^3} \]</formula></para><para>With a bit of math exercise you should be able to confirm that this is exactly</para><para><formula id="38">\[ \frac{\frac{d}{dr}\left( \frac{\mbox{erf}(\beta r)}{r} \right)}{r} \]</formula></para></listitem><listitem><para>Add the result to <formula id="39">$r^{-3}$</formula>, multiply by the product of the charges, and you have your force (divided by <formula id="35">$r$</formula>). A final multiplication with the vector connecting the two particles and you have your vectorial force to add to the particles.</para></listitem></orderedlist>
</para><para>This approximation achieves an error slightly lower than 1e-6 in single precision and 1e-11 in double precision for arguments smaller than 16 ( <formula id="40">$\beta r \leq 4 $</formula>); when added to <formula id="41">$1/r$</formula> the error will be insignificant. For <formula id="42">$\beta r \geq 7206$</formula> the return value can be inf or NaN. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1334" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1334" bodyend="1370"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga5324a396c60387bdb3cf42e734f6b465" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::pmePotentialCorrection</definition>
        <argsstring>(SimdFloat z2)</argsstring>
        <name>pmePotentialCorrection</name>
        <param>
          <type>SimdFloat</type>
          <declname>z2</declname>
        </param>
        <briefdescription>
<para>Calculate the potential correction due to PME analytically in SIMD float. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z2</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="19">$(r \beta)^2$</formula> - see below for details. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Correction factor to coulomb potential - see below for details.</para></simplesect>
See <ref refid="namespacegmx_1a1e5b1230d0301fa6760e34d7641ca7e4" kindref="member">pmeForceCorrection</ref> for details about the approximation.</para><para>This routine calculates <formula id="43">$\mbox{erf}(z)/z$</formula>, although you should provide <formula id="31">$z^2$</formula> as the input argument.</para><para>Here&apos;s how it should be used:</para><para><orderedlist>
<listitem><para>Calculate <formula id="28">$r^2$</formula>.</para></listitem><listitem><para>Multiply by <formula id="29">$\beta^2$</formula>, so you get <formula id="44">$z^2=\beta^2*r^2$</formula>.</para></listitem><listitem><para>Evaluate this routine with z^2 as the argument.</para></listitem><listitem><para>The return value is the expression:</para><para><formula id="45">\[ \frac{\mbox{erf}(z)}{z} \]</formula></para></listitem><listitem><para>Multiply the entire expression by beta and switching back to <formula id="35">$r$</formula> (since <formula id="36">$z=r \beta$</formula>):</para><para><formula id="46">\[ \frac{\mbox{erf}(r \beta)}{r} \]</formula></para></listitem><listitem><para>Subtract the result from <formula id="41">$1/r$</formula>, multiply by the product of the charges, and you have your potential.</para></listitem></orderedlist>
</para><para>This approximation achieves an error slightly lower than 1e-6 in single precision and 4e-11 in double precision for arguments smaller than 16 ( <formula id="47">$ 0.15 \leq \beta r \leq 4 $</formula>); for <formula id="48">$ \beta r \leq 0.15$</formula> the error can be twice as high; when added to <formula id="41">$1/r$</formula> the error will be insignificant. For <formula id="49">$\beta r \geq 7142$</formula> the return value can be inf or NaN. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1412" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1412" bodyend="1446"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Double precision SIMD math functions</header>
      <description><para><simplesect kind="note"><para>In most cases you should use the real-precision functions instead. </para></simplesect>
</para></description>
      <memberdef kind="function" id="group__module__simd_1ga3013bbebe9a43572658b37ad9b6b13be" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::copysign</definition>
        <argsstring>(SimdDouble x, SimdDouble y)</argsstring>
        <name>copysign</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Composes floating point value with the magnitude of x and the sign of y. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Values to set sign for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Values used to set sign </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Magnitude of x, sign of y </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1472" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1472" bodyend="1479"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga9dfcf89d49e6e2f75f1249972f2e270f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::rsqrtIter</definition>
        <argsstring>(SimdDouble lu, SimdDouble x)</argsstring>
        <name>rsqrtIter</name>
        <param>
          <type>SimdDouble</type>
          <declname>lu</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Perform one Newton-Raphson iteration to improve 1/sqrt(x) for SIMD double. </para>        </briefdescription>
        <detaileddescription>
<para>This is a low-level routine that should only be used by SIMD math routine that evaluates the inverse square root.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lu</parametername>
</parameternamelist>
<parameterdescription>
<para>Approximation of 1/sqrt(x), typically obtained from lookup. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference (starting) value x for which we want 1/sqrt(x). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An improved approximation with roughly twice as many bits of accuracy. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1493" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1493" bodyend="1499"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gae7e05436d95febdcc32866b5e8eca46a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::invsqrt</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>invsqrt</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate 1/sqrt(x) for SIMD double. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument that must be larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/sqrt(x). Result is undefined if your argument was invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1516" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1516" bodyend="1532"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga4a20afb3111cd1748f262a693338362b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::invsqrtPair</definition>
        <argsstring>(SimdDouble x0, SimdDouble x1, SimdDouble *out0, SimdDouble *out1)</argsstring>
        <name>invsqrtPair</name>
        <param>
          <type>SimdDouble</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>out0</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>out1</declname>
        </param>
        <briefdescription>
<para>Calculate 1/sqrt(x) for two SIMD doubles. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
</parameternamelist>
<parameterdescription>
<para>First set of arguments, x0 must be in single range (see below). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>Second set of arguments, x1 must be in single range (see below). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out0</parametername>
</parameternamelist>
<parameterdescription>
<para>Result 1/sqrt(x0) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out1</parametername>
</parameternamelist>
<parameterdescription>
<para>Result 1/sqrt(x1)</para></parameterdescription>
</parameteritem>
</parameterlist>
In particular for double precision we can sometimes calculate square root pairs slightly faster by using single precision until the very last step.</para><para><simplesect kind="note"><para>Both arguments must be larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1554" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1554" bodyend="1587"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaa0f0ffc8730b377743e0b5433d4e2f1a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::rcpIter</definition>
        <argsstring>(SimdDouble lu, SimdDouble x)</argsstring>
        <name>rcpIter</name>
        <param>
          <type>SimdDouble</type>
          <declname>lu</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Perform one Newton-Raphson iteration to improve 1/x for SIMD double. </para>        </briefdescription>
        <detaileddescription>
<para>This is a low-level routine that should only be used by SIMD math routine that evaluates the reciprocal.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lu</parametername>
</parameternamelist>
<parameterdescription>
<para>Approximation of 1/x, typically obtained from lookup. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference (starting) value x for which we want 1/x. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An improved approximation with roughly twice as many bits of accuracy. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1600" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1600" bodyend="1603"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga698c7785928f003a6f8f0218550ef3af" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::inv</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>inv</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate 1/x for SIMD double. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument with magnitude larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/x. Result is undefined if your argument was invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1620" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1620" bodyend="1636"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga0d5275903c74226798172bd46bac3e87" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::operator/</definition>
        <argsstring>(SimdDouble nom, SimdDouble denom)</argsstring>
        <name>operator/</name>
        <param>
          <type>SimdDouble</type>
          <declname>nom</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>denom</declname>
        </param>
        <briefdescription>
<para>Division for SIMD doubles. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nom</parametername>
</parameternamelist>
<parameterdescription>
<para>Nominator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denom</parametername>
</parameternamelist>
<parameterdescription>
<para>Denominator, with magnitude in range (GMX_FLOAT_MIN,GMX_FLOAT_MAX). For single precision this is equivalent to a nonzero argument, but in double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nom/denom</para></simplesect>
<simplesect kind="note"><para>This function does not use any masking to avoid problems with zero values in the denominator. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1654" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1654" bodyend="1657"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga3342ee008526f40deb602eb1024ba895" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble</type>
        <definition>static SimdDouble gmx::maskzInvsqrt</definition>
        <argsstring>(SimdDouble x, SimdDBool m)</argsstring>
        <name>maskzInvsqrt</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <param>
          <type>SimdDBool</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Calculate 1/sqrt(x) for masked entries of SIMD double. </para>        </briefdescription>
        <detaileddescription>
<para>This routine only evaluates 1/sqrt(x) for elements for which mask is true. Illegal values in the masked-out elements will not lead to floating-point exceptions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument that must be larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX for masked-in entries. See <ref refid="namespacegmx_1a953226d61f6527af6485ea56a8384c85" kindref="member">invsqrt</ref> for the discussion about argument restrictions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/sqrt(x). Result is undefined if your argument was invalid or entry was not masked, and 0.0 for masked-out entries. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1674" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1674" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga91e427c6575308730c135fb8de51a7c9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::maskzInv</definition>
        <argsstring>(SimdDouble x, SimdDBool m)</argsstring>
        <name>maskzInv</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <param>
          <type>SimdDBool</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Calculate 1/x for SIMD double, masked version. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument with magnitude larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX for masked-in entries. See <ref refid="namespacegmx_1a953226d61f6527af6485ea56a8384c85" kindref="member">invsqrt</ref> for the discussion about argument restrictions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/x for elements where m is true, or 0.0 for masked-out entries. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1701" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1701" bodyend="1717"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga784105c21023a67e981521b259481730" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>MathOptimization</type>
            <declname>opt</declname>
            <defname>opt</defname>
            <defval>MathOptimization::Safe</defval>
          </param>
        </templateparamlist>
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::sqrt</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>sqrt</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate sqrt(x) for SIMD doubles. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>By default, this function checks if the input value is 0.0 and masks this to return the correct result. If you are certain your argument will never be zero, and you know you need to save every single cycle you can, you can alternatively call the function as sqrt&lt;MathOptimization::Unsafe&gt;(x).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument that must be in range 0 &lt;=x &lt;= GMX_FLOAT_MAX, since the lookup step often has to be implemented in single precision. Arguments smaller than GMX_FLOAT_MIN will always lead to a zero result, even in double precision. If you are using the unsafe math optimization parameter, the argument must be in the range GMX_FLOAT_MIN &lt;= x &lt;= GMX_FLOAT_MAX.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sqrt(x). The result is undefined if the input value does not fall in the allowed range specified for the argument. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1726" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1726" bodyend="1738"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga2b6148113de97d3d9e2c9340c72debae" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::log</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>log</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD double log(x). This is the natural logarithm. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument, should be &gt;0. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The natural logarithm of x. Undefined if argument is invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1747" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1747" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gade7a25b3812d52c1f0c1392d2cc686ea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>MathOptimization</type>
            <declname>opt</declname>
            <defname>opt</defname>
            <defval>MathOptimization::Safe</defval>
          </param>
        </templateparamlist>
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::exp2</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>exp2</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD double 2^x. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is changed from the default (safe) into the unsafe option, input values that would otherwise lead to zero-clamped results are not allowed and will lead to undefined results.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument. For the default (safe) function version this can be arbitrarily small value, but the routine might clamp the result to zero for arguments that would produce subnormal IEEE754-2008 results. This corresponds to inputs below -126 in single or -1022 in double, and it might overflow for arguments reaching 127 (single) or 1023 (double). If you enable the unsafe math optimization, very small arguments will not necessarily be zero-clamped, but can produce undefined results.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>2^x. The result is undefined for very large arguments that cause internal floating-point overflow. If unsafe optimizations are enabled, this is also true for very small values.</para></simplesect>
<simplesect kind="note"><para>The definition range of this function is just-so-slightly smaller than the allowed IEEE exponents for many architectures. This is due to the implementation, which will hopefully improve in the future.</para></simplesect>
<simplesect kind="warning"><para>You cannot rely on this implementation returning inf for arguments that cause overflow. If you have some very large values and need to rely on getting a valid numerical output, take the minimum of your variable and the largest valid argument before calling this routine. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1796" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1796" bodyend="1854"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga98d13cb67fc6c5fefc32992673bf0637" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>MathOptimization</type>
            <declname>opt</declname>
            <defname>opt</defname>
            <defval>MathOptimization::Safe</defval>
          </param>
        </templateparamlist>
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::exp</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>exp</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD double exp(x). </para>        </briefdescription>
        <detaileddescription>
<para>In addition to scaling the argument for 2^x this routine correctly does extended precision arithmetics to improve accuracy.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is changed from the default (safe) into the unsafe option, input values that would otherwise lead to zero-clamped results are not allowed and will lead to undefined results.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument. For the default (safe) function version this can be arbitrarily small value, but the routine might clamp the result to zero for arguments that would produce subnormal IEEE754-2008 results. This corresponds to input arguments reaching -126*ln(2)=-87.3 in single, or -1022*ln(2)=-708.4 (double). Similarly, it might overflow for arguments reaching 127*ln(2)=88.0 (single) or 1023*ln(2)=709.1 (double). If the unsafe math optimizations are enabled, small input values that would result in zero-clamped output are not allowed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>exp(x). Overflowing arguments are likely to either return 0 or inf, depending on the underlying implementation. If unsafe optimizations are enabled, this is also true for very small values.</para></simplesect>
<simplesect kind="note"><para>The definition range of this function is just-so-slightly smaller than the allowed IEEE exponents for many architectures. This is due to the implementation, which will hopefully improve in the future.</para></simplesect>
<simplesect kind="warning"><para>You cannot rely on this implementation returning inf for arguments that cause overflow. If you have some very large values and need to rely on getting a valid numerical output, take the minimum of your variable and the largest valid argument before calling this routine. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1864" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1864" bodyend="1932"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga900477ac8042bfd9d6c85a06e3f003c8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::erf</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>erf</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD double erf(x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to calculate erf(x) for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>erf(x)</para></simplesect>
This routine achieves very close to full precision, but we do not care about the last bit or the subnormal result range. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="1944" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="1944" bodyend="2091"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gabd11e43f0479bca8e5b9d58b73307ae6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::erfc</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>erfc</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD double erfc(x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to calculate erfc(x) for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>erfc(x)</para></simplesect>
This routine achieves full precision (bar the last bit) over most of the input range, but for large arguments where the result is getting close to the minimum representable numbers we accept slightly larger errors (think results that are in the ballpark of 10^-200 for double) since that is not relevant for MD. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="2105" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="2105" bodyend="2251"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga532aa17b3c80780baf5c123eb64cf645" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::sincos</definition>
        <argsstring>(SimdDouble x, SimdDouble *sinval, SimdDouble *cosval)</argsstring>
        <name>sincos</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>sinval</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>cosval</declname>
        </param>
        <briefdescription>
<para>SIMD double sin &amp; cos. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate sin/cos for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sinval</parametername>
</parameternamelist>
<parameterdescription>
<para>Sin(x) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cosval</parametername>
</parameternamelist>
<parameterdescription>
<para>Cos(x)</para></parameterdescription>
</parameteritem>
</parameterlist>
This version achieves close to machine precision, but for very large magnitudes of the argument we inherently begin to lose accuracy due to the argument reduction, despite using extended precision arithmetics internally. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="2264" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="2264" bodyend="2386"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gab860ef109b42bb7e0ce25bdc304e8492" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::sin</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>sin</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD double sin(x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate sin for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sin(x)</para></simplesect>
<simplesect kind="attention"><para>Do NOT call both sin &amp; cos if you need both results, since each of them will then call <ref refid="namespacegmx_1a3191310c1a122aafe946f0caf2fdf364" kindref="member">sincos</ref> and waste a factor 2 in performance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="2397" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="2397" bodyend="2402"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga4fb04efe2288b65a54c4e8fd5585f125" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::cos</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>cos</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD double cos(x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate cos for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Cos(x)</para></simplesect>
<simplesect kind="attention"><para>Do NOT call both sin &amp; cos if you need both results, since each of them will then call <ref refid="namespacegmx_1a3191310c1a122aafe946f0caf2fdf364" kindref="member">sincos</ref> and waste a factor 2 in performance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="2413" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="2413" bodyend="2418"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga9f1b0a83035fb507f2827fb510fcf084" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::tan</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>tan</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD double tan(x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate tan for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tan(x) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="2426" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="2426" bodyend="2510"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gafc20a60ae6b0e838d65d127e944effbb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::asin</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>asin</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD double asin(x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate asin for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Asin(x) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="2518" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="2518" bodyend="2621"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga5459281155e8be7fd6356c5e366acb0e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::acos</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>acos</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD double acos(x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate acos for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Acos(x) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="2629" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="2629" bodyend="2655"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga0e327fdca86999b2716b5109621b1936" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::atan</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>atan</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD double asin(x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate atan for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Atan(x), same argument/value range as standard math library. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="2663" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="2663" bodyend="2732"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gae3d1e53759871924024fc4bfa8cd7e41" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::atan2</definition>
        <argsstring>(SimdDouble y, SimdDouble x)</argsstring>
        <name>atan2</name>
        <param>
          <type>SimdDouble</type>
          <declname>y</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD double atan2(y,x). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y component of vector, any quartile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>X component of vector, any quartile </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Atan(y,x), same argument/value range as standard math library.</para></simplesect>
<simplesect kind="note"><para>This routine should provide correct results for all finite non-zero or positive-zero arguments. However, negative zero arguments will be treated as positive zero, which means the return value will deviate from the standard math library atan2(y,x) for those cases. That should not be of any concern in Gromacs, and in particular it will not affect calculations of angles from vectors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="2748" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="2748" bodyend="2772"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gad35bd0d2751d6097b63b26b7077ad53c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::pmeForceCorrection</definition>
        <argsstring>(SimdDouble z2)</argsstring>
        <name>pmeForceCorrection</name>
        <param>
          <type>SimdDouble</type>
          <declname>z2</declname>
        </param>
        <briefdescription>
<para>Calculate the force correction due to PME analytically in SIMD double. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z2</parametername>
</parameternamelist>
<parameterdescription>
<para>This should be the value <formula id="19">$(r \beta)^2$</formula>, where r is your interaction distance and beta the ewald splitting parameters. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Correction factor to coulomb force.</para></simplesect>
This routine is meant to enable analytical evaluation of the direct-space PME electrostatic force to avoid tables. For details, see the single precision function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="2786" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="2786" bodyend="2834"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga6e52f9306e036285c0a9ac5f55565cc0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::pmePotentialCorrection</definition>
        <argsstring>(SimdDouble z2)</argsstring>
        <name>pmePotentialCorrection</name>
        <param>
          <type>SimdDouble</type>
          <declname>z2</declname>
        </param>
        <briefdescription>
<para>Calculate the potential correction due to PME analytically in SIMD double. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z2</parametername>
</parameternamelist>
<parameterdescription>
<para>This should be the value <formula id="19">$(r \beta)^2$</formula>, where r is your interaction distance and beta the ewald splitting parameters. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Correction factor to coulomb force.</para></simplesect>
This routine is meant to enable analytical evaluation of the direct-space PME electrostatic potential to avoid tables. For details, see the single precision function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="2849" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="2849" bodyend="2893"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>SIMD math functions for double prec. data, single prec. accuracy</header>
      <description><para><simplesect kind="note"><para>In some cases we do not need full double accuracy of individual SIMD math functions, although the data is stored in double precision SIMD registers. This might be the case for special algorithms, or if the architecture does not support single precision. Since the full double precision evaluation of math functions typically require much more expensive polynomial approximations these functions implement the algorithms used in the single precision SIMD math functions, but they operate on double precision SIMD variables. </para></simplesect>
</para></description>
      <memberdef kind="function" id="group__module__simd_1ga539e3c6e2f58dbd5e59d444707237691" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::invsqrtSingleAccuracy</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>invsqrtSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate 1/sqrt(x) for SIMD double, but in single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument that must be larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/sqrt(x). Result is undefined if your argument was invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="2931" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="2931" bodyend="2944"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga19373a6a16b4e74441b86bdcabe1bbcb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble</type>
        <definition>static SimdDouble gmx::maskzInvsqrtSingleAccuracy</definition>
        <argsstring>(SimdDouble x, SimdDBool m)</argsstring>
        <name>maskzInvsqrtSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <param>
          <type>SimdDBool</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>1/sqrt(x) for masked-in entries of SIMD double, but in single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para>This routine only evaluates 1/sqrt(x) for elements for which mask is true. Illegal values in the masked-out elements will not lead to floating-point exceptions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument that must be larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/sqrt(x). Result is undefined if your argument was invalid or entry was not masked, and 0.0 for masked-out entries. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="2966" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="2966" bodyend="2979"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga0cde0a4bdb349db5235f05fc93c0441d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::invsqrtPairSingleAccuracy</definition>
        <argsstring>(SimdDouble x0, SimdDouble x1, SimdDouble *out0, SimdDouble *out1)</argsstring>
        <name>invsqrtPairSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>out0</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>out1</declname>
        </param>
        <briefdescription>
<para>Calculate 1/sqrt(x) for two SIMD doubles, but single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
</parameternamelist>
<parameterdescription>
<para>First set of arguments, x0 must be in single range (see below). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>Second set of arguments, x1 must be in single range (see below). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out0</parametername>
</parameternamelist>
<parameterdescription>
<para>Result 1/sqrt(x0) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out1</parametername>
</parameternamelist>
<parameterdescription>
<para>Result 1/sqrt(x1)</para></parameterdescription>
</parameteritem>
</parameterlist>
In particular for double precision we can sometimes calculate square root pairs slightly faster by using single precision until the very last step.</para><para><simplesect kind="note"><para>Both arguments must be larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3001" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3001" bodyend="3026"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gad500e0cd00f7c9a8b65448d3a428c57d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::invSingleAccuracy</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>invSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate 1/x for SIMD double, but in single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument with magnitude larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/x. Result is undefined if your argument was invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3042" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3042" bodyend="3055"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaed815c342f2554cecb7045da5ba52e57" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::maskzInvSingleAccuracy</definition>
        <argsstring>(SimdDouble x, SimdDBool m)</argsstring>
        <name>maskzInvSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <param>
          <type>SimdDBool</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>1/x for masked entries of SIMD double, single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument with magnitude larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/x for elements where m is true, or 0.0 for masked-out entries. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3072" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3072" bodyend="3085"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga645dad540cadbef1d60a831d41c46cfe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>MathOptimization</type>
            <declname>opt</declname>
            <defname>opt</defname>
            <defval>MathOptimization::Safe</defval>
          </param>
        </templateparamlist>
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::sqrtSingleAccuracy</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>sqrtSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate sqrt(x) (correct for 0.0) for SIMD double, with single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>By default, this function checks if the input value is 0.0 and masks this to return the correct result. If you are certain your argument will never be zero, and you know you need to save every single cycle you can, you can alternatively call the function as sqrt&lt;MathOptimization::Unsafe&gt;(x).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument that must be in range 0 &lt;=x &lt;= GMX_FLOAT_MAX, since the lookup step often has to be implemented in single precision. Arguments smaller than GMX_FLOAT_MIN will always lead to a zero result, even in double precision. If you are using the unsafe math optimization parameter, the argument must be in the range GMX_FLOAT_MIN &lt;= x &lt;= GMX_FLOAT_MAX.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sqrt(x). The result is undefined if the input value does not fall in the allowed range specified for the argument. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3094" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3094" bodyend="3105"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga29dcfc4f360ed173f66b26ad9ac3b28b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::logSingleAccuracy</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>logSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD log(x). Double precision SIMD data, single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument, should be &gt;0. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The natural logarithm of x. Undefined if argument is invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3114" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3114" bodyend="3147"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga67c6ce3061f04d7438eff1c4a124737d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>MathOptimization</type>
            <declname>opt</declname>
            <defname>opt</defname>
            <defval>MathOptimization::Safe</defval>
          </param>
        </templateparamlist>
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::exp2SingleAccuracy</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>exp2SingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD 2^x. Double precision SIMD, single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is changed from the default (safe) into the unsafe option, input values that would otherwise lead to zero-clamped results are not allowed and will lead to undefined results.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument. For the default (safe) function version this can be arbitrarily small value, but the routine might clamp the result to zero for arguments that would produce subnormal IEEE754-2008 results. This corresponds to inputs below -126 in single or -1022 in double, and it might overflow for arguments reaching 127 (single) or 1023 (double). If you enable the unsafe math optimization, very small arguments will not necessarily be zero-clamped, but can produce undefined results.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>2^x. The result is undefined for very large arguments that cause internal floating-point overflow. If unsafe optimizations are enabled, this is also true for very small values.</para></simplesect>
<simplesect kind="note"><para>The definition range of this function is just-so-slightly smaller than the allowed IEEE exponents for many architectures. This is due to the implementation, which will hopefully improve in the future.</para></simplesect>
<simplesect kind="warning"><para>You cannot rely on this implementation returning inf for arguments that cause overflow. If you have some very large values and need to rely on getting a valid numerical output, take the minimum of your variable and the largest valid argument before calling this routine. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3155" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3155" bodyend="3204"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga9bc997f231867640d8030d2c8886a922" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>MathOptimization</type>
            <declname>opt</declname>
            <defname>opt</defname>
            <defval>MathOptimization::Safe</defval>
          </param>
        </templateparamlist>
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::expSingleAccuracy</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>expSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD exp(x). Double precision SIMD, single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para>In addition to scaling the argument for 2^x this routine correctly does extended precision arithmetics to improve accuracy.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is changed from the default (safe) into the unsafe option, input values that would otherwise lead to zero-clamped results are not allowed and will lead to undefined results.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument. For the default (safe) function version this can be arbitrarily small value, but the routine might clamp the result to zero for arguments that would produce subnormal IEEE754-2008 results. This corresponds to input arguments reaching -126*ln(2)=-87.3 in single, or -1022*ln(2)=-708.4 (double). Similarly, it might overflow for arguments reaching 127*ln(2)=88.0 (single) or 1023*ln(2)=709.1 (double). If the unsafe math optimizations are enabled, small input values that would result in zero-clamped output are not allowed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>exp(x). Overflowing arguments are likely to either return 0 or inf, depending on the underlying implementation. If unsafe optimizations are enabled, this is also true for very small values.</para></simplesect>
<simplesect kind="note"><para>The definition range of this function is just-so-slightly smaller than the allowed IEEE exponents for many architectures. This is due to the implementation, which will hopefully improve in the future.</para></simplesect>
<simplesect kind="warning"><para>You cannot rely on this implementation returning inf for arguments that cause overflow. If you have some very large values and need to rely on getting a valid numerical output, take the minimum of your variable and the largest valid argument before calling this routine. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3214" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3214" bodyend="3271"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gac6ce232cb0593b32dc9789e04679bc6c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::erfSingleAccuracy</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>erfSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD erf(x). Double precision SIMD data, single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to calculate erf(x) for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>erf(x)</para></simplesect>
This routine achieves very close to single precision, but we do not care about the last bit or the subnormal result range. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3283" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3283" bodyend="3388"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gae8d996acb25e6bdb2d08ca2b26bb19c3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::erfcSingleAccuracy</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>erfcSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD erfc(x). Double precision SIMD data, single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to calculate erfc(x) for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>erfc(x)</para></simplesect>
This routine achieves singleprecision (bar the last bit) over most of the input range, but for large arguments where the result is getting close to the minimum representable numbers we accept slightly larger errors (think results that are in the ballpark of 10^-30) since that is not relevant for MD. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3402" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3402" bodyend="3507"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga80d8d17a5843dfa4126ce3d6672d2c5d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::sinCosSingleAccuracy</definition>
        <argsstring>(SimdDouble x, SimdDouble *sinval, SimdDouble *cosval)</argsstring>
        <name>sinCosSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>sinval</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>cosval</declname>
        </param>
        <briefdescription>
<para>SIMD sin &amp; cos. Double precision SIMD data, single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate sin/cos for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sinval</parametername>
</parameternamelist>
<parameterdescription>
<para>Sin(x) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cosval</parametername>
</parameternamelist>
<parameterdescription>
<para>Cos(x) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3516" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3516" bodyend="3624"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga322afd1e05781ae2cd10ec6fdb1fb2be" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::sinSingleAccuracy</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>sinSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD sin(x). Double precision SIMD data, single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate sin for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sin(x)</para></simplesect>
<simplesect kind="attention"><para>Do NOT call both sin &amp; cos if you need both results, since each of them will then call <ref refid="namespacegmx_1a3191310c1a122aafe946f0caf2fdf364" kindref="member">sincos</ref> and waste a factor 2 in performance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3635" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3635" bodyend="3640"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga1b867b3b628740d6f710a480626cffa8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::cosSingleAccuracy</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>cosSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD cos(x). Double precision SIMD data, single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate cos for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Cos(x)</para></simplesect>
<simplesect kind="attention"><para>Do NOT call both sin &amp; cos if you need both results, since each of them will then call <ref refid="namespacegmx_1a3191310c1a122aafe946f0caf2fdf364" kindref="member">sincos</ref> and waste a factor 2 in performance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3651" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3651" bodyend="3656"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga97094c3429db78b1a101aa994a69f162" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::tanSingleAccuracy</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>tanSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD tan(x). Double precision SIMD data, single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate tan for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tan(x) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3664" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3664" bodyend="3727"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga7e098546fed7424b9c449588ebb84252" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::asinSingleAccuracy</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>asinSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD asin(x). Double precision SIMD data, single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate asin for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Asin(x) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3735" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3735" bodyend="3777"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga73027d18d5366998dbf0af8c52f68b60" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::acosSingleAccuracy</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>acosSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD acos(x). Double precision SIMD data, single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate acos for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Acos(x) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3785" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3785" bodyend="3812"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga39be2b2651b8a68340c2132becf1c372" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::atanSingleAccuracy</definition>
        <argsstring>(SimdDouble x)</argsstring>
        <name>atanSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD asin(x). Double precision SIMD data, single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate atan for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Atan(x), same argument/value range as standard math library. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3820" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3820" bodyend="3855"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga193d8e790944928be53940809d6f2385" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::atan2SingleAccuracy</definition>
        <argsstring>(SimdDouble y, SimdDouble x)</argsstring>
        <name>atan2SingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>y</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD atan2(y,x). Double precision SIMD data, single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y component of vector, any quartile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>X component of vector, any quartile </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Atan(y,x), same argument/value range as standard math library.</para></simplesect>
<simplesect kind="note"><para>This routine should provide correct results for all finite non-zero or positive-zero arguments. However, negative zero arguments will be treated as positive zero, which means the return value will deviate from the standard math library atan2(y,x) for those cases. That should not be of any concern in Gromacs, and in particular it will not affect calculations of angles from vectors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3871" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3871" bodyend="3895"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga7c64f03842963e248fba796bead3c5ce" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::pmeForceCorrectionSingleAccuracy</definition>
        <argsstring>(SimdDouble z2)</argsstring>
        <name>pmeForceCorrectionSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>z2</declname>
        </param>
        <briefdescription>
<para>Analytical PME force correction, double SIMD data, single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z2</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="19">$(r \beta)^2$</formula> - see below for details. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Correction factor to coulomb force - see below for details.</para></simplesect>
This routine is meant to enable analytical evaluation of the direct-space PME electrostatic force to avoid tables.</para><para>The direct-space potential should be <formula id="20">$ \mbox{erfc}(\beta r)/r$</formula>, but there are some problems evaluating that:</para><para>First, the error function is difficult (read: expensive) to approxmiate accurately for intermediate to large arguments, and this happens already in ranges of <formula id="21">$(\beta r)$</formula> that occur in simulations. Second, we now try to avoid calculating potentials in Gromacs but use forces directly.</para><para>We can simply things slight by noting that the PME part is really a correction to the normal Coulomb force since <formula id="22">$\mbox{erfc}(z)=1-\mbox{erf}(z)$</formula>, i.e. <formula id="23">\[ V = \frac{1}{r} - \frac{\mbox{erf}(\beta r)}{r} \]</formula> The first term we already have from the inverse square root, so that we can leave out of this routine.</para><para>For pme tolerances of 1e-3 to 1e-8 and cutoffs of 0.5nm to 1.8nm, the argument <formula id="24">$beta r$</formula> will be in the range 0.15 to ~4. Use your favorite plotting program to realize how well-behaved <formula id="25">$\frac{\mbox{erf}(z)}{z}$</formula> is in this range!</para><para>We approximate <formula id="26">$f(z)=\mbox{erf}(z)/z$</formula> with a rational minimax polynomial. However, it turns out it is more efficient to approximate <formula id="27">$f(z)/z$</formula> and then only use even powers. This is another minor optimization, since we actually <emphasis>want</emphasis> <formula id="27">$f(z)/z$</formula>, because it is going to be multiplied by the vector between the two atoms to get the vectorial force. The fastest flops are the ones we can avoid calculating!</para><para>So, here&apos;s how it should be used:</para><para><orderedlist>
<listitem><para>Calculate <formula id="28">$r^2$</formula>.</para></listitem><listitem><para>Multiply by <formula id="29">$\beta^2$</formula>, so you get <formula id="30">$z^2=(\beta r)^2$</formula>.</para></listitem><listitem><para>Evaluate this routine with <formula id="31">$z^2$</formula> as the argument.</para></listitem><listitem><para>The return value is the expression:</para><para><formula id="32">\[ \frac{2 \exp{-z^2}}{\sqrt{\pi} z^2}-\frac{\mbox{erf}(z)}{z^3} \]</formula></para></listitem><listitem><para>Multiply the entire expression by <formula id="33">$\beta^3$</formula>. This will get you</para><para><formula id="34">\[ \frac{2 \beta^3 \exp(-z^2)}{\sqrt{\pi} z^2} - \frac{\beta^3 \mbox{erf}(z)}{z^3} \]</formula></para><para>or, switching back to <formula id="35">$r$</formula> (since <formula id="36">$z=r \beta$</formula>):</para><para><formula id="37">\[ \frac{2 \beta \exp(-r^2 \beta^2)}{\sqrt{\pi} r^2} - \frac{\mbox{erf}(r \beta)}{r^3} \]</formula></para><para>With a bit of math exercise you should be able to confirm that this is exactly</para><para><formula id="38">\[ \frac{\frac{d}{dr}\left( \frac{\mbox{erf}(\beta r)}{r} \right)}{r} \]</formula></para></listitem><listitem><para>Add the result to <formula id="39">$r^{-3}$</formula>, multiply by the product of the charges, and you have your force (divided by <formula id="35">$r$</formula>). A final multiplication with the vector connecting the two particles and you have your vectorial force to add to the particles.</para></listitem></orderedlist>
</para><para>This approximation achieves an accuracy slightly lower than 1e-6; when added to <formula id="41">$1/r$</formula> the error will be insignificant. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="3974" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="3974" bodyend="4010"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gad079618800dfdfb943ca73f89f63d45e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::pmePotentialCorrectionSingleAccuracy</definition>
        <argsstring>(SimdDouble z2)</argsstring>
        <name>pmePotentialCorrectionSingleAccuracy</name>
        <param>
          <type>SimdDouble</type>
          <declname>z2</declname>
        </param>
        <briefdescription>
<para>Analytical PME potential correction, double SIMD data, single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z2</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="19">$(r \beta)^2$</formula> - see below for details. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Correction factor to coulomb potential - see below for details.</para></simplesect>
This routine calculates <formula id="43">$\mbox{erf}(z)/z$</formula>, although you should provide <formula id="31">$z^2$</formula> as the input argument.</para><para>Here&apos;s how it should be used:</para><para><orderedlist>
<listitem><para>Calculate <formula id="28">$r^2$</formula>.</para></listitem><listitem><para>Multiply by <formula id="29">$\beta^2$</formula>, so you get <formula id="44">$z^2=\beta^2*r^2$</formula>.</para></listitem><listitem><para>Evaluate this routine with z^2 as the argument.</para></listitem><listitem><para>The return value is the expression:</para><para><formula id="45">\[ \frac{\mbox{erf}(z)}{z} \]</formula></para></listitem><listitem><para>Multiply the entire expression by beta and switching back to <formula id="35">$r$</formula> (since <formula id="36">$z=r \beta$</formula>):</para><para><formula id="46">\[ \frac{\mbox{erf}(r \beta)}{r} \]</formula></para></listitem><listitem><para>Subtract the result from <formula id="41">$1/r$</formula>, multiply by the product of the charges, and you have your potential.</para></listitem></orderedlist>
</para><para>This approximation achieves an accuracy slightly lower than 1e-6; when added to <formula id="41">$1/r$</formula> the error will be insignificant. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4046" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4046" bodyend="4080"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>SIMD4 math functions</header>
      <description><para><simplesect kind="note"><para>Only a subset of the math functions are implemented for SIMD4. </para></simplesect>
</para></description>
      <memberdef kind="function" id="group__module__simd_1ga4be9c1041c5ce806e1262c9469a4a625" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::rsqrtIter</definition>
        <argsstring>(Simd4Float lu, Simd4Float x)</argsstring>
        <name>rsqrtIter</name>
        <param>
          <type>Simd4Float</type>
          <declname>lu</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Perform one Newton-Raphson iteration to improve 1/sqrt(x) for SIMD4 float. </para>        </briefdescription>
        <detaileddescription>
<para>This is a low-level routine that should only be used by SIMD math routine that evaluates the inverse square root.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lu</parametername>
</parameternamelist>
<parameterdescription>
<para>Approximation of 1/sqrt(x), typically obtained from lookup. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference (starting) value x for which we want 1/sqrt(x). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An improved approximation with roughly twice as many bits of accuracy. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4108" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4108" bodyend="4114"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gab8ed1f98091a17221318dfd97e52c916" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::invsqrt</definition>
        <argsstring>(Simd4Float x)</argsstring>
        <name>invsqrt</name>
        <param>
          <type>Simd4Float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate 1/sqrt(x) for SIMD4 float. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument that must be larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/sqrt(x). Result is undefined if your argument was invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4129" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4129" bodyend="4142"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga4b6db4a7ce63f7c3c6e7a0d3008dea6b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::rsqrtIter</definition>
        <argsstring>(Simd4Double lu, Simd4Double x)</argsstring>
        <name>rsqrtIter</name>
        <param>
          <type>Simd4Double</type>
          <declname>lu</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Perform one Newton-Raphson iteration to improve 1/sqrt(x) for SIMD4 double. </para>        </briefdescription>
        <detaileddescription>
<para>This is a low-level routine that should only be used by SIMD math routine that evaluates the inverse square root.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lu</parametername>
</parameternamelist>
<parameterdescription>
<para>Approximation of 1/sqrt(x), typically obtained from lookup. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference (starting) value x for which we want 1/sqrt(x). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An improved approximation with roughly twice as many bits of accuracy. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4164" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4164" bodyend="4170"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga9d84208bf91d57b70761d4c161f2f9de" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::invsqrt</definition>
        <argsstring>(Simd4Double x)</argsstring>
        <name>invsqrt</name>
        <param>
          <type>Simd4Double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate 1/sqrt(x) for SIMD4 double. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument that must be larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/sqrt(x). Result is undefined if your argument was invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4185" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4185" bodyend="4201"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga0b4da22bcb5cebd8721f180626d11fbf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::invsqrtSingleAccuracy</definition>
        <argsstring>(Simd4Double x)</argsstring>
        <name>invsqrtSingleAccuracy</name>
        <param>
          <type>Simd4Double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate 1/sqrt(x) for SIMD4 double, but in single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument that must be larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/sqrt(x). Result is undefined if your argument was invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4221" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4221" bodyend="4234"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__module__simd_1gaf4912f738b14eacc98298d9bf498e190" prot="public" static="no">
        <type>Simd4Test</type>
        <definition>typedef Simd4Test gmx::test::anonymous_namespace{simd4_floatingpoint.cpp}::Simd4FloatingpointTest</definition>
        <argsstring></argsstring>
        <name>Simd4FloatingpointTest</name>
        <briefdescription>
<para>Test fixture for SIMD4 floating-point operations (identical to the SIMD4 <ref refid="classgmx_1_1test_1_1Simd4Test" kindref="compound">Simd4Test</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4_floatingpoint.cpp" line="64" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4_floatingpoint.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__module__simd_1ga7a833c02c65b5cb67c65799760b78c51" prot="public" static="no">
        <type>Simd4Test</type>
        <definition>typedef Simd4Test gmx::test::anonymous_namespace{simd4_vector_operations.cpp}::Simd4VectorOperationsTest</definition>
        <argsstring></argsstring>
        <name>Simd4VectorOperationsTest</name>
        <briefdescription>
<para>Test fixture for SIMD4 vector operations (identical to the SIMD4 <ref refid="classgmx_1_1test_1_1Simd4Test" kindref="compound">Simd4Test</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4_vector_operations.cpp" line="61" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4_vector_operations.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__module__simd_1ga252b3a09204db2659e6d9f3e9fc7bae7" prot="public" static="no">
        <type>SimdTest</type>
        <definition>typedef SimdTest gmx::test::anonymous_namespace{simd_floatingpoint.cpp}::SimdFloatingpointTest</definition>
        <argsstring></argsstring>
        <name>SimdFloatingpointTest</name>
        <briefdescription>
<para>Test fixture for floating-point tests (identical to the generic <ref refid="classgmx_1_1test_1_1SimdTest" kindref="compound">SimdTest</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_floatingpoint.cpp" line="67" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_floatingpoint.cpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__module__simd_1gaaad4507bb9310726190e4586e37d3588" prot="public" static="no">
        <type>SimdTest</type>
        <definition>typedef SimdTest gmx::test::anonymous_namespace{simd_integer.cpp}::SimdIntegerTest</definition>
        <argsstring></argsstring>
        <name>SimdIntegerTest</name>
        <briefdescription>
<para>Test fixture for integer tests (identical to the generic <ref refid="classgmx_1_1test_1_1SimdTest" kindref="compound">SimdTest</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_integer.cpp" line="67" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_integer.cpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__module__simd_1gad238df220c14a9f4826c72578ac7ab6f" prot="public" static="no">
        <type>SimdTest</type>
        <definition>typedef SimdTest gmx::test::anonymous_namespace{simd_vector_operations.cpp}::SimdVectorOperationsTest</definition>
        <argsstring></argsstring>
        <name>SimdVectorOperationsTest</name>
        <briefdescription>
<para>Test fixture for vector operations tests (identical to the generic <ref refid="classgmx_1_1test_1_1SimdTest" kindref="compound">SimdTest</ref>) </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_vector_operations.cpp" line="61" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_vector_operations.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__module__simd_1ga9237b6439778ed0fdfd9008a78c25f3c" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int gmx::c_simdBestPairAlignmentDouble</definition>
        <argsstring></argsstring>
        <name>c_simdBestPairAlignmentDouble</name>
        <initializer>= 2</initializer>
        <briefdescription>
<para>Best alignment to use for aligned pairs of double data. </para>        </briefdescription>
        <detaileddescription>
<para>The routines to load and transpose data will work with a wide range of alignments, but some might be faster than others, depending on the load instructions available in the hardware. This specifies the best alignment for each implementation when working with pairs of data.</para><para>To allow each architecture to use the most optimal form, we use a constant that code outside the SIMD module should use to store things properly. It must be at least 2. For example, a value of 2 means the two parameters A &amp; B are stored as [A0 B0 A1 B1] while align-4 means [A0 B0 - - A1 B1 - -].</para><para>This alignment depends on the efficiency of partial-register load/store operations, and will depend on the architecture. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" line="178" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gacc4ad17022538e3d670e55694e55ccc2" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int gmx::c_simdBestPairAlignmentFloat</definition>
        <argsstring></argsstring>
        <name>c_simdBestPairAlignmentFloat</name>
        <initializer>= 2</initializer>
        <briefdescription>
<para>Best alignment to use for aligned pairs of float data. </para>        </briefdescription>
        <detaileddescription>
<para>The routines to load and transpose data will work with a wide range of alignments, but some might be faster than others, depending on the load instructions available in the hardware. This specifies the best alignment for each implementation when working with pairs of data.</para><para>To allow each architecture to use the most optimal form, we use a constant that code outside the SIMD module should use to store things properly. It must be at least 2. For example, a value of 2 means the two parameters A &amp; B are stored as [A0 B0 A1 B1] while align-4 means [A0 B0 - - A1 B1 - -].</para><para>This alignment depends on the efficiency of partial-register load/store operations, and will depend on the architecture. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" line="196" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga58444cd225e33fe6cd8915ff1c1555d0" prot="public" static="no" mutable="no">
        <type>const <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>const real gmx::test::czero</definition>
        <argsstring></argsstring>
        <name>czero</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>Value 0.0 in real precision. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" line="55" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga3f294436d4f5e4f914b20c069cbd99d0" prot="public" static="no" mutable="no">
        <type>const <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>const real gmx::test::c0</definition>
        <argsstring></argsstring>
        <name>c0</name>
        <initializer>= 0.0 + 1.0/3.0</initializer>
        <briefdescription>
<para>Random fp value using entire mantissa. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" line="56" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga44268249c39e66775001b8311036787f" prot="public" static="no" mutable="no">
        <type>const <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>const real gmx::test::c1</definition>
        <argsstring></argsstring>
        <name>c1</name>
        <initializer>= 1.0 + 5.0/7.0</initializer>
        <briefdescription>
<para>Random fp value using entire mantissa. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" line="57" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga1df035e15e8f2c3ad9de3f9ecada8530" prot="public" static="no" mutable="no">
        <type>const <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>const real gmx::test::c2</definition>
        <argsstring></argsstring>
        <name>c2</name>
        <initializer>= 2.0 + 9.0/13.0</initializer>
        <briefdescription>
<para>Random fp value using entire mantissa. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" line="58" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gac78ba15eb876271a39e7813e56c9716c" prot="public" static="no" mutable="no">
        <type>const <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>const real gmx::test::c3</definition>
        <argsstring></argsstring>
        <name>c3</name>
        <initializer>= 3.0 + 17.0/19.0</initializer>
        <briefdescription>
<para>Random fp value using entire mantissa. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" line="59" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga83f66d520e87d67b57ea6b373a8b9b50" prot="public" static="no" mutable="no">
        <type>const <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>const real gmx::test::c4</definition>
        <argsstring></argsstring>
        <name>c4</name>
        <initializer>= 4.0 + 23.0/29.0</initializer>
        <briefdescription>
<para>Random fp value using entire mantissa. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" line="60" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gab165ea93474a36d892098dfadbe5fcd6" prot="public" static="no" mutable="no">
        <type>const <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>const real gmx::test::c5</definition>
        <argsstring></argsstring>
        <name>c5</name>
        <initializer>= 5.0 + 31.0/37.0</initializer>
        <briefdescription>
<para>Random fp value using entire mantissa. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" line="61" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga80362ee87d07f5b58eeb0716d8efcaa1" prot="public" static="no" mutable="no">
        <type>const <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>const real gmx::test::c6</definition>
        <argsstring></argsstring>
        <name>c6</name>
        <initializer>= 6.0 + 41.0/43.0</initializer>
        <briefdescription>
<para>Random fp value using entire mantissa. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" line="62" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gafc39c0ee9643227e6b44acf3e07aa16d" prot="public" static="no" mutable="no">
        <type>const <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>const real gmx::test::c7</definition>
        <argsstring></argsstring>
        <name>c7</name>
        <initializer>= 7.0 + 47.0/53.0</initializer>
        <briefdescription>
<para>Random fp value using entire mantissa. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" line="63" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gaa0a5f9070bb473a9b5f440cf950b8d64" prot="public" static="no" mutable="no">
        <type>const <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>const real gmx::test::c8</definition>
        <argsstring></argsstring>
        <name>c8</name>
        <initializer>= 8.0 + 59.0/61.0</initializer>
        <briefdescription>
<para>Random fp value using entire mantissa. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" line="64" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gac9a052a2bd836d32f8f11b8ac107fd0e" prot="public" static="no" mutable="no">
        <type>const <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>const real gmx::test::c9</definition>
        <argsstring></argsstring>
        <name>c9</name>
        <briefdescription>
<para>Random fp value using entire mantissa. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/data.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gabbd0be2aa33c9ca3369e42fbcfe58257" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_c0c1c2</definition>
        <argsstring></argsstring>
        <name>rSimd_c0c1c2</name>
        <initializer>= setSimdRealFrom3R( c0, c1, c2)</initializer>
        <briefdescription>
<para>c0,c1,c2 repeated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="67" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga916e29c6964a631887314a8780203e29" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_c3c4c5</definition>
        <argsstring></argsstring>
        <name>rSimd_c3c4c5</name>
        <initializer>= setSimdRealFrom3R( c3, c4, c5)</initializer>
        <briefdescription>
<para>c3,c4,c5 repeated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="68" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gab5db5bcf5b8e94a4fbcf9d91d86ae44f" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_c6c7c8</definition>
        <argsstring></argsstring>
        <name>rSimd_c6c7c8</name>
        <initializer>= setSimdRealFrom3R( c6, c7, c8)</initializer>
        <briefdescription>
<para>c6,c7,c8 repeated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="69" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga8ebdd3997371c0e6d8f396f17176fc74" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_c3c0c4</definition>
        <argsstring></argsstring>
        <name>rSimd_c3c0c4</name>
        <initializer>= setSimdRealFrom3R( c3, c0, c4)</initializer>
        <briefdescription>
<para>c3,c0,c4 repeated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="70" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga44202280b46d5e460fdcdf6da7632968" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_c4c6c8</definition>
        <argsstring></argsstring>
        <name>rSimd_c4c6c8</name>
        <initializer>= setSimdRealFrom3R( c4, c6, c8)</initializer>
        <briefdescription>
<para>c4,c6,c8 repeated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="71" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gab30cd026217f4006fb0732b369622a64" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_c7c2c3</definition>
        <argsstring></argsstring>
        <name>rSimd_c7c2c3</name>
        <initializer>= setSimdRealFrom3R( c7, c2, c3)</initializer>
        <briefdescription>
<para>c7,c2,c3 repeated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="72" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gac85aba9fa19582715d715aab7e59a741" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_m0m1m2</definition>
        <argsstring></argsstring>
        <name>rSimd_m0m1m2</name>
        <initializer>= setSimdRealFrom3R(-c0, -c1, -c2)</initializer>
        <briefdescription>
<para>-c0,-c1,-c2 repeated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="73" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gacff8562111a4b724842a2edc3ac2e6ea" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_m3m0m4</definition>
        <argsstring></argsstring>
        <name>rSimd_m3m0m4</name>
        <initializer>= setSimdRealFrom3R(-c3, -c0, -c4)</initializer>
        <briefdescription>
<para>-c3,-c0,-c4 repeated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="74" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gaa74b33d73989e05a7ce27e539e86596e" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_2p25</definition>
        <argsstring></argsstring>
        <name>rSimd_2p25</name>
        <initializer>= setSimdRealFrom1R( 2.25)</initializer>
        <briefdescription>
<para>Value that rounds down. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="76" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga73cebedc784d36a4d9af47677a653617" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_3p25</definition>
        <argsstring></argsstring>
        <name>rSimd_3p25</name>
        <initializer>= setSimdRealFrom1R( 3.25)</initializer>
        <briefdescription>
<para>Value that rounds down. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="77" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga3ff658b84b46fed0fe9d3f78157f04f0" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_3p75</definition>
        <argsstring></argsstring>
        <name>rSimd_3p75</name>
        <initializer>= setSimdRealFrom1R( 3.75)</initializer>
        <briefdescription>
<para>Value that rounds up. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="78" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gafcaa275c3ea6431715f8ffdc36d21be6" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_m2p25</definition>
        <argsstring></argsstring>
        <name>rSimd_m2p25</name>
        <initializer>= setSimdRealFrom1R(-2.25)</initializer>
        <briefdescription>
<para>Negative value that rounds up. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="79" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga329970fcbf5cf812f553d38b9deb16f1" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_m3p25</definition>
        <argsstring></argsstring>
        <name>rSimd_m3p25</name>
        <initializer>= setSimdRealFrom1R(-3.25)</initializer>
        <briefdescription>
<para>Negative value that rounds up. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="80" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gab2bdf2bd7290f9b6d7e0a6950eac67de" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_m3p75</definition>
        <argsstring></argsstring>
        <name>rSimd_m3p75</name>
        <initializer>= setSimdRealFrom1R(-3.75)</initializer>
        <briefdescription>
<para>Negative value that rounds down. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="81" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga0ad552c6e7aa0f690a42a0fea3e34537" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_Exp</definition>
        <argsstring></argsstring>
        <name>rSimd_Exp</name>
        <initializer>= setSimdRealFrom3R( 1.4055235171027452623914516e+18,
                                                   5.3057102734253445623914516e-13,
                                                   -2.1057102745623934534514516e+16)</initializer>
        <briefdescription>
<para>Three large floating-point values whose exponents are &gt;32. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="82" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gacc628e8584705a4f46c128febb4c7dc9" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_logicalA</definition>
        <argsstring></argsstring>
        <name>rSimd_logicalA</name>
        <initializer>= setSimdRealFrom1R(1.3333282470703125)</initializer>
        <briefdescription>
<para>Bit pattern to test logical ops. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="101" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gab1e3c0795341e30eb873b59d896874c2" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_logicalB</definition>
        <argsstring></argsstring>
        <name>rSimd_logicalB</name>
        <initializer>= setSimdRealFrom1R(1.79998779296875)</initializer>
        <briefdescription>
<para>Bit pattern to test logical ops. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="102" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gac6d134c05fbb9873c7c73a88168a4247" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_logicalResultAnd</definition>
        <argsstring></argsstring>
        <name>rSimd_logicalResultAnd</name>
        <initializer>= setSimdRealFrom1R(1.26666259765625)</initializer>
        <briefdescription>
<para>Result or bitwise &apos;and&apos; of A and B. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="103" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga4c0c899f700b9cbbb4b0a988d1a44bd6" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_logicalResultOr</definition>
        <argsstring></argsstring>
        <name>rSimd_logicalResultOr</name>
        <initializer>= setSimdRealFrom1R(1.8666534423828125)</initializer>
        <briefdescription>
<para>Result or bitwise &apos;or&apos; of A and B. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="104" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gad8eb332dbb9bf6b9d91211bf70eec7aa" prot="public" static="no" mutable="no">
        <type>const SimdInt32</type>
        <definition>const SimdInt32 gmx::test::iSimd_1_2_3</definition>
        <argsstring></argsstring>
        <name>iSimd_1_2_3</name>
        <initializer>= setSimdIntFrom3I(1, 2, 3)</initializer>
        <briefdescription>
<para>Three generic ints. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="110" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gaea0f82e84ca2bc4cc3082e31d9a8d9f3" prot="public" static="no" mutable="no">
        <type>const SimdInt32</type>
        <definition>const SimdInt32 gmx::test::iSimd_4_5_6</definition>
        <argsstring></argsstring>
        <name>iSimd_4_5_6</name>
        <initializer>= setSimdIntFrom3I(4, 5, 6)</initializer>
        <briefdescription>
<para>Three generic ints. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="111" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga89086dfe28eebc1bec343b8bd7ddb888" prot="public" static="no" mutable="no">
        <type>const SimdInt32</type>
        <definition>const SimdInt32 gmx::test::iSimd_7_8_9</definition>
        <argsstring></argsstring>
        <name>iSimd_7_8_9</name>
        <initializer>= setSimdIntFrom3I(7, 8, 9)</initializer>
        <briefdescription>
<para>Three generic ints. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="112" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga47227a3e2c5339492b111fdbb9f9d86e" prot="public" static="no" mutable="no">
        <type>const SimdInt32</type>
        <definition>const SimdInt32 gmx::test::iSimd_5_7_9</definition>
        <argsstring></argsstring>
        <name>iSimd_5_7_9</name>
        <initializer>= setSimdIntFrom3I(5, 7, 9)</initializer>
        <briefdescription>
<para>iSimd_1_2_3 + iSimd_4_5_6. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="113" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga6451abcb9c45d3dacd3cd14688dfbee2" prot="public" static="no" mutable="no">
        <type>const SimdInt32</type>
        <definition>const SimdInt32 gmx::test::iSimd_1M_2M_3M</definition>
        <argsstring></argsstring>
        <name>iSimd_1M_2M_3M</name>
        <initializer>= setSimdIntFrom3I(1000000, 2000000, 3000000)</initializer>
        <briefdescription>
<para>Term1 for 32bit add/sub. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="114" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gab9684628e7276e7a25ab3831fa52913d" prot="public" static="no" mutable="no">
        <type>const SimdInt32</type>
        <definition>const SimdInt32 gmx::test::iSimd_4M_5M_6M</definition>
        <argsstring></argsstring>
        <name>iSimd_4M_5M_6M</name>
        <initializer>= setSimdIntFrom3I(4000000, 5000000, 6000000)</initializer>
        <briefdescription>
<para>Term2 for 32bit add/sub. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="115" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga71d5a902593cbbb02abbab7a7db1fe81" prot="public" static="no" mutable="no">
        <type>const SimdInt32</type>
        <definition>const SimdInt32 gmx::test::iSimd_5M_7M_9M</definition>
        <argsstring></argsstring>
        <name>iSimd_5M_7M_9M</name>
        <initializer>= setSimdIntFrom3I(5000000, 7000000, 9000000)</initializer>
        <briefdescription>
<para>iSimd_1M_2M_3M + iSimd_4M_5M_6M. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="116" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gac857912cde1f4bb4be46c5fa31970899" prot="public" static="no" mutable="no">
        <type>const SimdInt32</type>
        <definition>const SimdInt32 gmx::test::iSimd_0xF0F0F0F0</definition>
        <argsstring></argsstring>
        <name>iSimd_0xF0F0F0F0</name>
        <initializer>= setSimdIntFrom1I(0xF0F0F0F0)</initializer>
        <briefdescription>
<para>Bitpattern to test integer logical operations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="119" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gab433418041c2c62643b1e9f3fe11d894" prot="public" static="no" mutable="no">
        <type>const SimdInt32</type>
        <definition>const SimdInt32 gmx::test::iSimd_0xCCCCCCCC</definition>
        <argsstring></argsstring>
        <name>iSimd_0xCCCCCCCC</name>
        <initializer>= setSimdIntFrom1I(0xCCCCCCCC)</initializer>
        <briefdescription>
<para>Bitpattern to test integer logical operations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="120" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gadbcc932f6bb869f13adf284528d2366d" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_Bits1</definition>
        <argsstring></argsstring>
        <name>rSimd_Bits1</name>
        <briefdescription>
<para>Pattern F0 repeated to fill single/double. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gac829b4c1528431222df5f95873f6cf37" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_Bits2</definition>
        <argsstring></argsstring>
        <name>rSimd_Bits2</name>
        <briefdescription>
<para>Pattern CC repeated to fill single/double. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga48b1883028e43d752c39f6e723f2204a" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_Bits3</definition>
        <argsstring></argsstring>
        <name>rSimd_Bits3</name>
        <briefdescription>
<para>Pattern C0 repeated to fill single/double. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga942c70e13478dedfa22c28c75a36ca2b" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_Bits4</definition>
        <argsstring></argsstring>
        <name>rSimd_Bits4</name>
        <briefdescription>
<para>Pattern 0C repeated to fill single/double. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gafe712e1f0a738fd002437cc15c157bb1" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_Bits5</definition>
        <argsstring></argsstring>
        <name>rSimd_Bits5</name>
        <briefdescription>
<para>Pattern FC repeated to fill single/double. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga38cf621ea8663900bdf4e836e8cc45fe" prot="public" static="no" mutable="no">
        <type>const SimdReal</type>
        <definition>const SimdReal gmx::test::rSimd_Bits6</definition>
        <argsstring></argsstring>
        <name>rSimd_Bits6</name>
        <briefdescription>
<para>Pattern 3C repeated to fill single/double. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga22d13c25879335b846ea303c0e3b8ebf" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_c0c1c2</definition>
        <argsstring></argsstring>
        <name>rSimd4_c0c1c2</name>
        <initializer>= setSimd4RealFrom3R( c0, c1, c2)</initializer>
        <briefdescription>
<para>c0,c1,c2 repeated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="57" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gadf95d5e8a95d6d8de1dabb43f088046b" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_c3c4c5</definition>
        <argsstring></argsstring>
        <name>rSimd4_c3c4c5</name>
        <initializer>= setSimd4RealFrom3R( c3, c4, c5)</initializer>
        <briefdescription>
<para>c3,c4,c5 repeated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="58" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga0345c9c1d508a1fec2a5c10fd463ddaf" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_c6c7c8</definition>
        <argsstring></argsstring>
        <name>rSimd4_c6c7c8</name>
        <initializer>= setSimd4RealFrom3R( c6, c7, c8)</initializer>
        <briefdescription>
<para>c6,c7,c8 repeated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="59" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gaf3ff5b375cb6d6fb4eee17c0eb7c497a" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_c3c0c4</definition>
        <argsstring></argsstring>
        <name>rSimd4_c3c0c4</name>
        <initializer>= setSimd4RealFrom3R( c3, c0, c4)</initializer>
        <briefdescription>
<para>c3,c0,c4 repeated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="60" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga211b2b162423c42f24181736d7ba62b3" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_c4c6c8</definition>
        <argsstring></argsstring>
        <name>rSimd4_c4c6c8</name>
        <initializer>= setSimd4RealFrom3R( c4, c6, c8)</initializer>
        <briefdescription>
<para>c4,c6,c8 repeated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="61" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gaff3879d9deb911ad6ef1a2d6d8f082b2" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_c7c2c3</definition>
        <argsstring></argsstring>
        <name>rSimd4_c7c2c3</name>
        <initializer>= setSimd4RealFrom3R( c7, c2, c3)</initializer>
        <briefdescription>
<para>c7,c2,c3 repeated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="62" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga4cc49a294d621a48b68a52ad8743e22d" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_m0m1m2</definition>
        <argsstring></argsstring>
        <name>rSimd4_m0m1m2</name>
        <initializer>= setSimd4RealFrom3R(-c0, -c1, -c2)</initializer>
        <briefdescription>
<para>-c0,-c1,-c2 repeated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="63" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gacf4dc8903e06efc4317e56d3fa25d364" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_m3m0m4</definition>
        <argsstring></argsstring>
        <name>rSimd4_m3m0m4</name>
        <initializer>= setSimd4RealFrom3R(-c3, -c0, -c4)</initializer>
        <briefdescription>
<para>-c3,-c0,-c4 repeated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="64" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga3a7097d08bbe4572d89cd18a6317db29" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_2p25</definition>
        <argsstring></argsstring>
        <name>rSimd4_2p25</name>
        <initializer>= setSimd4RealFrom1R(2.25)</initializer>
        <briefdescription>
<para>Value that rounds down. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="65" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gae65528fc03bc2d4d91d00f0f88c3a59a" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_3p75</definition>
        <argsstring></argsstring>
        <name>rSimd4_3p75</name>
        <initializer>= setSimd4RealFrom1R(3.75)</initializer>
        <briefdescription>
<para>Value that rounds up. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="66" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gae58e4f79a2490381ef26e7f4ac106ed9" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_m2p25</definition>
        <argsstring></argsstring>
        <name>rSimd4_m2p25</name>
        <initializer>= setSimd4RealFrom1R(-2.25)</initializer>
        <briefdescription>
<para>Negative value that rounds up. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="67" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gaee2e4ce1f2a9cd92f597133f70ca9d87" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_m3p75</definition>
        <argsstring></argsstring>
        <name>rSimd4_m3p75</name>
        <initializer>= setSimd4RealFrom1R(-3.75)</initializer>
        <briefdescription>
<para>Negative value that rounds down. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="68" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga6942c818dcc25a51c392d144d17cb7b1" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_logicalA</definition>
        <argsstring></argsstring>
        <name>rSimd4_logicalA</name>
        <initializer>= setSimd4RealFrom1R(1.3333282470703125)</initializer>
        <briefdescription>
<para>Bit pattern to test logical ops. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="79" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga1b091828f353571f5975f3821ae450f3" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_logicalB</definition>
        <argsstring></argsstring>
        <name>rSimd4_logicalB</name>
        <initializer>= setSimd4RealFrom1R(1.79998779296875)</initializer>
        <briefdescription>
<para>Bit pattern to test logical ops. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="80" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gaab5ac87ee5e296ac7d61fa160669bba9" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_logicalResultAnd</definition>
        <argsstring></argsstring>
        <name>rSimd4_logicalResultAnd</name>
        <initializer>= setSimd4RealFrom1R(1.26666259765625)</initializer>
        <briefdescription>
<para>Result or bitwise &apos;and&apos; of A and B. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="81" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga4e47b42f72845140b08262d390bfa0bc" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_logicalResultOr</definition>
        <argsstring></argsstring>
        <name>rSimd4_logicalResultOr</name>
        <initializer>= setSimd4RealFrom1R(1.8666534423828125)</initializer>
        <briefdescription>
<para>Result or bitwise &apos;or&apos; of A and B. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="82" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga9aae0a4ea00558be8d7ae3a55f2093f1" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_Exp</definition>
        <argsstring></argsstring>
        <name>rSimd4_Exp</name>
        <briefdescription>
<para>Three large floating-point values whose exponents are &gt;32. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga9c54980a45b4eb3ba94ce88ef2fddff3" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_Bits1</definition>
        <argsstring></argsstring>
        <name>rSimd4_Bits1</name>
        <briefdescription>
<para>Pattern F0 repeated to fill single/double. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gaebf4fe714b0c265ddec3d0e020e10acd" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_Bits2</definition>
        <argsstring></argsstring>
        <name>rSimd4_Bits2</name>
        <briefdescription>
<para>Pattern CC repeated to fill single/double. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gaa013db11ad707efe3b8df2ea65cb9b1e" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_Bits3</definition>
        <argsstring></argsstring>
        <name>rSimd4_Bits3</name>
        <briefdescription>
<para>Pattern C0 repeated to fill single/double. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga31ad32d5e33b7c9c12df5edd8440d3a4" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_Bits4</definition>
        <argsstring></argsstring>
        <name>rSimd4_Bits4</name>
        <briefdescription>
<para>Pattern 0C repeated to fill single/double. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gaaa8ec5b150b4c848ddda609296113fcd" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_Bits5</definition>
        <argsstring></argsstring>
        <name>rSimd4_Bits5</name>
        <briefdescription>
<para>Pattern FC repeated to fill single/double. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1gabcd5b90a94755a4ab053d339c0565d39" prot="public" static="no" mutable="no">
        <type>const Simd4Real</type>
        <definition>const Simd4Real gmx::test::rSimd4_Bits6</definition>
        <argsstring></argsstring>
        <name>rSimd4_Bits6</name>
        <briefdescription>
<para>Pattern 3C repeated to fill single/double. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__simd_1ga8a2a543330f7b970d26162dcdd99ee01" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int gmx::test::SimdBaseTest::s_nPoints</definition>
        <argsstring></argsstring>
        <name>s_nPoints</name>
        <initializer>= 10000</initializer>
        <briefdescription>
<para>Number of test points to use, settable on command line. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/base.h" line="127" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/base.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__module__simd_1ga725596b415f4bca94e71321b6845bed4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::gatherLoadTranspose</definition>
        <argsstring>(const double *base, const std::int32_t offset[], SimdDouble *v0, SimdDouble *v1, SimdDouble *v2, SimdDouble *v3)</argsstring>
        <name>gatherLoadTranspose</name>
        <param>
          <type>const double *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>offset</declname>
          <array>[]</array>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>v3</declname>
        </param>
        <briefdescription>
<para>Load 4 consecutive double from each of GMX_SIMD_DOUBLE_WIDTH offsets, and transpose into 4 SIMD double variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 4 for this routine) the input data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are loaded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the memory area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Array with offsets to the start of each data point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v0</parametername>
</parameternamelist>
<parameterdescription>
<para>1st component of data, base[align*offset[i]] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd component of data, base[align*offset[i] + 1] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v2</parametername>
</parameternamelist>
<parameterdescription>
<para>3rd component of data, base[align*offset[i] + 2] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v3</parametername>
</parameternamelist>
<parameterdescription>
<para>4th component of data, base[align*offset[i] + 3] for each i.</para></parameterdescription>
</parameteritem>
</parameterlist>
The floating-point memory locations must be aligned, but only to the smaller of four elements and the floating-point SIMD width.</para><para>The offset memory must be aligned to GMX_SIMD_DINT32_WIDTH.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" line="106" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" bodystart="106" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gad1b51d9220213996033e5dce938c926f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::gatherLoadTranspose</definition>
        <argsstring>(const double *base, const std::int32_t offset[], SimdDouble *v0, SimdDouble *v1)</argsstring>
        <name>gatherLoadTranspose</name>
        <param>
          <type>const double *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>offset</declname>
          <array>[]</array>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
<para>Load 2 consecutive double from each of GMX_SIMD_DOUBLE_WIDTH offsets, and transpose into 2 SIMD double variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 2 for this routine) the input data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are loaded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the memory area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Array with offsets to the start of each data point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v0</parametername>
</parameternamelist>
<parameterdescription>
<para>1st component of data, base[align*offset[i]] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd component of data, base[align*offset[i] + 1] for each i.</para></parameterdescription>
</parameteritem>
</parameterlist>
The floating-point memory locations must be aligned, but only to the smaller of two elements and the floating-point SIMD width.</para><para>The offset memory must be aligned to GMX_SIMD_DINT32_WIDTH.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" line="154" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" bodystart="154" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaafc4e2f213c40bba66c83e6524445523" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::gatherLoadUTranspose</definition>
        <argsstring>(const double *base, const std::int32_t offset[], SimdDouble *v0, SimdDouble *v1, SimdDouble *v2)</argsstring>
        <name>gatherLoadUTranspose</name>
        <param>
          <type>const double *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>offset</declname>
          <array>[]</array>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Load 3 consecutive doubles from each of GMX_SIMD_DOUBLE_WIDTH offsets, and transpose into 3 SIMD double variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 3 for this routine) the input data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are loaded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the memory area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Array with offsets to the start of each data point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v0</parametername>
</parameternamelist>
<parameterdescription>
<para>1st component of data, base[align*offset[i]] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd component of data, base[align*offset[i] + 1] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v2</parametername>
</parameternamelist>
<parameterdescription>
<para>3rd component of data, base[align*offset[i] + 2] for each i.</para></parameterdescription>
</parameteritem>
</parameterlist>
This function can work with both aligned (better performance) and unaligned memory. When the align parameter is not a power-of-two (align==3 would be normal for packed atomic coordinates) the memory obviously cannot be aligned, and we account for this. However, in the case where align is a power-of-two, we assume the base pointer also has the same alignment, which will enable many platforms to use faster aligned memory load operations. An easy way to think of this is that each triplet of data in memory must be aligned to the align parameter you specify when it&apos;s a power-of-two.</para><para>The offset memory must always be aligned to GMX_SIMD_FINT32_WIDTH, since this enables us to use SIMD loads and gather operations on platforms that support it.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para><simplesectsep/><para>This routine uses a normal array for the offsets, since we typically load this data from memory. On the architectures we have tested this is faster even when a SIMD integer datatype is present. </para><simplesectsep/><para>To improve performance, this function might use full-SIMD-width unaligned loads. This means you need to ensure the memory is padded at the end, so we always can load GMX_SIMD_REAL_WIDTH elements starting at the last offset. If you use the Gromacs aligned memory allocation routines this will always be the case. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" line="222" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" bodystart="222" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaa23e5431ddc22611d3304ac96c461cc5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::transposeScatterStoreU</definition>
        <argsstring>(double *base, const std::int32_t offset[], SimdDouble v0, SimdDouble v1, SimdDouble v2)</argsstring>
        <name>transposeScatterStoreU</name>
        <param>
          <type>double *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>offset</declname>
          <array>[]</array>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Transpose and store 3 SIMD doubles to 3 consecutive addresses at GMX_SIMD_DOUBLE_WIDTH offsets. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory to which we write, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 3 for this routine) the output data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are written. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">base</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the memory area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Aligned array with offsets to the start of each triplet. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v0</parametername>
</parameternamelist>
<parameterdescription>
<para>1st component of triplets, written to base[align*offset[i]]. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd component of triplets, written to base[align*offset[i] + 1]. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>3rd component of triplets, written to base[align*offset[i] + 2].</para></parameterdescription>
</parameteritem>
</parameterlist>
This function can work with both aligned (better performance) and unaligned memory. When the align parameter is not a power-of-two (align==3 would be normal for packed atomic coordinates) the memory obviously cannot be aligned, and we account for this. However, in the case where align is a power-of-two, we assume the base pointer also has the same alignment, which will enable many platforms to use faster aligned memory store operations. An easy way to think of this is that each triplet of data in memory must be aligned to the align parameter you specify when it&apos;s a power-of-two.</para><para>The offset memory must always be aligned to GMX_SIMD_FINT32_WIDTH, since this enables us to use SIMD loads and gather operations on platforms that support it.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para><simplesectsep/><para>This routine uses a normal array for the offsets, since we typically load the data from memory. On the architectures we have tested this is faster even when a SIMD integer datatype is present. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" line="275" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" bodystart="275" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaecbb196e76a516c1e3672a8fa0df6f87" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::transposeScatterIncrU</definition>
        <argsstring>(double *base, const std::int32_t offset[], SimdDouble v0, SimdDouble v1, SimdDouble v2)</argsstring>
        <name>transposeScatterIncrU</name>
        <param>
          <type>double *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>offset</declname>
          <array>[]</array>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Transpose and add 3 SIMD doubles to 3 consecutive addresses at GMX_SIMD_DOUBLE_WIDTH offsets. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory to which we write, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 3 for this routine) the output data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are incremented. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">base</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the memory area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Aligned array with offsets to the start of each triplet. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v0</parametername>
</parameternamelist>
<parameterdescription>
<para>1st component of triplets, added to base[align*offset[i]]. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd component of triplets, added to base[align*offset[i] + 1]. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>3rd component of triplets, added to base[align*offset[i] + 2].</para></parameterdescription>
</parameteritem>
</parameterlist>
This function can work with both aligned (better performance) and unaligned memory. When the align parameter is not a power-of-two (align==3 would be normal for packed atomic coordinates) the memory obviously cannot be aligned, and we account for this. However, in the case where align is a power-of-two, we assume the base pointer also has the same alignment, which will enable many platforms to use faster aligned memory load/store operations. An easy way to think of this is that each triplet of data in memory must be aligned to the align parameter you specify when it&apos;s a power-of-two.</para><para>The offset memory must always be aligned to GMX_SIMD_FINT32_WIDTH, since this enables us to use SIMD loads and gather operations on platforms that support it.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para><simplesectsep/><para>This routine uses a normal array for the offsets, since we typically load the data from memory. On the architectures we have tested this is faster even when a SIMD integer datatype is present. </para><simplesectsep/><para>To improve performance, this function might use full-SIMD-width unaligned load/store, and add 0.0 to the extra elements. This means you need to ensure the memory is padded at the end, so we always can load GMX_SIMD_REAL_WIDTH elements starting at the last offset. If you use the Gromacs aligned memory allocation routines this will always be the case. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" line="335" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" bodystart="335" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga15283d6034452bcbee9c5f7538d7b560" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::transposeScatterDecrU</definition>
        <argsstring>(double *base, const std::int32_t offset[], SimdDouble v0, SimdDouble v1, SimdDouble v2)</argsstring>
        <name>transposeScatterDecrU</name>
        <param>
          <type>double *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>offset</declname>
          <array>[]</array>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Transpose and subtract 3 SIMD doubles to 3 consecutive addresses at GMX_SIMD_DOUBLE_WIDTH offsets. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory to which we write, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 3 for this routine) the output data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are decremented. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">base</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to start of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Aligned array with offsets to the start of each triplet. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v0</parametername>
</parameternamelist>
<parameterdescription>
<para>1st component, subtracted from base[align*offset[i]] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd component, subtracted from base[align*offset[i]+1] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>3rd component, subtracted from base[align*offset[i]+2]</para></parameterdescription>
</parameteritem>
</parameterlist>
This function can work with both aligned (better performance) and unaligned memory. When the align parameter is not a power-of-two (align==3 would be normal for packed atomic coordinates) the memory obviously cannot be aligned, and we account for this. However, in the case where align is a power-of-two, we assume the base pointer also has the same alignment, which will enable many platforms to use faster aligned memory load/store operations. An easy way to think of this is that each triplet of data in memory must be aligned to the align parameter you specify when it&apos;s a power-of-two.</para><para>The offset memory must always be aligned to GMX_SIMD_FINT32_WIDTH, since this enables us to use SIMD loads and gather operations on platforms that support it.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para><simplesectsep/><para>This routine uses a normal array for the offsets, since we typically load the data from memory. On the architectures we have tested this is faster even when a SIMD integer datatype is present. </para><simplesectsep/><para>To improve performance, this function might use full-SIMD-width unaligned load/store, and subtract 0.0 from the extra elements. This means you need to ensure the memory is padded at the end, so we always can load GMX_SIMD_REAL_WIDTH elements starting at the last offset. If you use the Gromacs aligned memory allocation routines this will always be the case. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" line="394" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" bodystart="394" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gad8d730c26297155e1aa934c2bc91e750" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::expandScalarsToTriplets</definition>
        <argsstring>(SimdDouble scalar, SimdDouble *triplets0, SimdDouble *triplets1, SimdDouble *triplets2)</argsstring>
        <name>expandScalarsToTriplets</name>
        <param>
          <type>SimdDouble</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>triplets0</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>triplets1</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>triplets2</declname>
        </param>
        <briefdescription>
<para>Expand each element of double SIMD variable into three identical consecutive elements in three SIMD outputs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating-point input, e.g. [s0 s1 s2 s3] if width=4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">triplets0</parametername>
</parameternamelist>
<parameterdescription>
<para>First output, e.g. [s0 s0 s0 s1] if width=4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">triplets1</parametername>
</parameternamelist>
<parameterdescription>
<para>Second output, e.g. [s1 s1 s2 s2] if width=4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">triplets2</parametername>
</parameternamelist>
<parameterdescription>
<para>Third output, e.g. [s2 s3 s3 s3] if width=4.</para></parameterdescription>
</parameteritem>
</parameterlist>
This routine is meant to use for things like scalar-vector multiplication, where the vectors are stored in a merged format like [x0 y0 z0 x1 y1 z1 ...], while the scalars are stored as [s0 s1 s2...], and the data cannot easily be changed to SIMD-friendly layout.</para><para>In this case, load 3 full-width SIMD variables from the vector array (This will always correspond to GMX_SIMD_DOUBLE_WIDTH triplets), load a single full-width variable from the scalar array, and call this routine to expand the data. You can then simply multiply the first, second and third pair of SIMD variables, and store the three results back into a suitable vector-format array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" line="433" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" bodystart="433" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga1008329474744f6987edf28c4124ac24" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::gatherLoadBySimdIntTranspose</definition>
        <argsstring>(const double *base, SimdDInt32 offset, SimdDouble *v0, SimdDouble *v1, SimdDouble *v2, SimdDouble *v3)</argsstring>
        <name>gatherLoadBySimdIntTranspose</name>
        <param>
          <type>const double *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>SimdDInt32</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>v3</declname>
        </param>
        <briefdescription>
<para>Load 4 consecutive doubles from each of GMX_SIMD_DOUBLE_WIDTH offsets specified by a SIMD integer, transpose into 4 SIMD double variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 4 for this routine) the input data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are loaded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Aligned pointer to the start of the memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD integer type with offsets to the start of each triplet. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v0</parametername>
</parameternamelist>
<parameterdescription>
<para>First component, base[align*offset[i]] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>Second component, base[align*offset[i] + 1] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v2</parametername>
</parameternamelist>
<parameterdescription>
<para>Third component, base[align*offset[i] + 2] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v3</parametername>
</parameternamelist>
<parameterdescription>
<para>Fourth component, base[align*offset[i] + 3] for each i.</para></parameterdescription>
</parameteritem>
</parameterlist>
The floating-point memory locations must be aligned, but only to the smaller of four elements and the floating-point SIMD width.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para><simplesectsep/><para>This is a special routine primarily intended for loading Gromacs table data as efficiently as possible - this is the reason for using a SIMD offset index, since the result of the real-to-integer conversion is present in a SIMD register just before calling this routine. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" line="475" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" bodystart="475" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gad15c3a27898a9f9dbb2963dee1a7cacf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::gatherLoadUBySimdIntTranspose</definition>
        <argsstring>(const double *base, SimdDInt32 offset, SimdDouble *v0, SimdDouble *v1)</argsstring>
        <name>gatherLoadUBySimdIntTranspose</name>
        <param>
          <type>const double *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>SimdDInt32</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
<para>Load 2 consecutive doubles from each of GMX_SIMD_DOUBLE_WIDTH offsets (unaligned) specified by SIMD integer, transpose into 2 SIMD doubles. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 2 for this routine) the input data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are loaded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD integer type with offsets to the start of each triplet. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v0</parametername>
</parameternamelist>
<parameterdescription>
<para>First component, base[align*offset[i]] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>Second component, base[align*offset[i] + 1] for each i.</para></parameterdescription>
</parameteritem>
</parameterlist>
Since some SIMD architectures cannot handle any unaligned loads, this routine is only available if GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE is 1.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para><simplesectsep/><para>This is a special routine primarily intended for loading Gromacs table data as efficiently as possible - this is the reason for using a SIMD offset index, since the result of the real-to-integer conversion is present in a SIMD register just before calling this routine. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" line="523" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" bodystart="523" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga11385272a2b5123ca3aa3e5696e55dbc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::gatherLoadBySimdIntTranspose</definition>
        <argsstring>(const double *base, SimdDInt32 offset, SimdDouble *v0, SimdDouble *v1)</argsstring>
        <name>gatherLoadBySimdIntTranspose</name>
        <param>
          <type>const double *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>SimdDInt32</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
<para>Load 2 consecutive doubles from each of GMX_SIMD_DOUBLE_WIDTH offsets specified by a SIMD integer, transpose into 2 SIMD double variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 2 for this routine) the input data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are loaded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Aligned pointer to the start of the memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD integer type with offsets to the start of each triplet. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v0</parametername>
</parameternamelist>
<parameterdescription>
<para>First component, base[align*offset[i]] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>Second component, base[align*offset[i] + 1] for each i.</para></parameterdescription>
</parameteritem>
</parameterlist>
The floating-point memory locations must be aligned, but only to the smaller of two elements and the floating-point SIMD width.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para><simplesectsep/><para>This is a special routine primarily intended for loading Gromacs table data as efficiently as possible - this is the reason for using a SIMD offset index, since the result of the real-to-integer conversion is present in a SIMD register just before calling this routine. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" line="561" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" bodystart="561" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gace1c53e05ba045977e06eb98778c0123" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double gmx_simdcall</type>
        <definition>static double gmx_simdcall gmx::reduceIncr4ReturnSum</definition>
        <argsstring>(double *m, SimdDouble v0, SimdDouble v1, SimdDouble v2, SimdDouble v3)</argsstring>
        <name>reduceIncr4ReturnSum</name>
        <param>
          <type>double *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>v3</declname>
        </param>
        <briefdescription>
<para>Reduce each of four SIMD doubles, add those values to four consecutive doubles in memory, return sum. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where four doubles should be incremented </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v0</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD variable whose sum should be added to m[0] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD variable whose sum should be added to m[1] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD variable whose sum should be added to m[2] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v3</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD variable whose sum should be added to m[3]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sum of all elements in the four SIMD variables.</para></simplesect>
The pointer m must be aligned to the smaller of four elements and the floating-point SIMD width.</para><para><simplesect kind="note"><para>This is a special routine intended for the Gromacs nonbonded kernels. It is used in the epilogue of the outer loop, where the variables will contain unrolled forces for one outer-loop-particle each, corresponding to a single coordinate (i.e, say, four x-coordinate force variables). These should be summed and added to the force array in memory. Since we always work with contiguous SIMD-layout , we can use efficient aligned loads/stores. When calculating the virial, we also need the total sum of all forces for each coordinate. This is provided as the return value. For routines that do not need these, this extra code will be optimized away completely if you just ignore the return value (Checked with gcc-4.9.1 and clang-3.6 for AVX). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" line="605" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_double.h" bodystart="605" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga0f9f9c71226ae1d2f0065dd66e1027f0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::gatherLoadTranspose</definition>
        <argsstring>(const float *base, const std::int32_t offset[], SimdFloat *v0, SimdFloat *v1, SimdFloat *v2, SimdFloat *v3)</argsstring>
        <name>gatherLoadTranspose</name>
        <param>
          <type>const float *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>offset</declname>
          <array>[]</array>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>v3</declname>
        </param>
        <briefdescription>
<para>Load 4 consecutive floats from each of GMX_SIMD_FLOAT_WIDTH offsets, and transpose into 4 SIMD float variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 4 for this routine) the input data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are loaded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the memory area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Array with offsets to the start of each data point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v0</parametername>
</parameternamelist>
<parameterdescription>
<para>1st component of data, base[align*offset[i]] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd component of data, base[align*offset[i] + 1] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v2</parametername>
</parameternamelist>
<parameterdescription>
<para>3rd component of data, base[align*offset[i] + 2] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v3</parametername>
</parameternamelist>
<parameterdescription>
<para>4th component of data, base[align*offset[i] + 3] for each i.</para></parameterdescription>
</parameteritem>
</parameterlist>
The floating-point memory locations must be aligned, but only to the smaller of four elements and the floating-point SIMD width.</para><para>The offset memory must be aligned to GMX_SIMD_DINT32_WIDTH.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" line="110" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" bodystart="110" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga6823a0b3cbc43eee3918b137d2b18384" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::gatherLoadTranspose</definition>
        <argsstring>(const float *base, const std::int32_t offset[], SimdFloat *v0, SimdFloat *v1)</argsstring>
        <name>gatherLoadTranspose</name>
        <param>
          <type>const float *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>offset</declname>
          <array>[]</array>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
<para>Load 2 consecutive floats from each of GMX_SIMD_FLOAT_WIDTH offsets, and transpose into 2 SIMD float variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 2 for this routine) the input data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are loaded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the memory area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Array with offsets to the start of each data point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v0</parametername>
</parameternamelist>
<parameterdescription>
<para>1st component of data, base[align*offset[i]] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd component of data, base[align*offset[i] + 1] for each i.</para></parameterdescription>
</parameteritem>
</parameterlist>
The floating-point memory locations must be aligned, but only to the smaller of two elements and the floating-point SIMD width.</para><para>The offset memory must be aligned to GMX_SIMD_FINT32_WIDTH.</para><para>To achieve the best possible performance, you should store your data with alignment <ref refid="group__module__simd_1gacc4ad17022538e3d670e55694e55ccc2" kindref="member">c_simdBestPairAlignmentFloat</ref> in single, or <ref refid="group__module__simd_1ga9237b6439778ed0fdfd9008a78c25f3c" kindref="member">c_simdBestPairAlignmentDouble</ref> in double.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" line="161" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" bodystart="161" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaa5581add75787fa1304acdac5af0ad7d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::gatherLoadUTranspose</definition>
        <argsstring>(const float *base, const std::int32_t offset[], SimdFloat *v0, SimdFloat *v1, SimdFloat *v2)</argsstring>
        <name>gatherLoadUTranspose</name>
        <param>
          <type>const float *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>offset</declname>
          <array>[]</array>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Load 3 consecutive floats from each of GMX_SIMD_FLOAT_WIDTH offsets, and transpose into 3 SIMD float variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 3 for this routine) the input data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are loaded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the memory area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Array with offsets to the start of each data point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v0</parametername>
</parameternamelist>
<parameterdescription>
<para>1st component of data, base[align*offset[i]] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd component of data, base[align*offset[i] + 1] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v2</parametername>
</parameternamelist>
<parameterdescription>
<para>3rd component of data, base[align*offset[i] + 2] for each i.</para></parameterdescription>
</parameteritem>
</parameterlist>
This function can work with both aligned (better performance) and unaligned memory. When the align parameter is not a power-of-two (align==3 would be normal for packed atomic coordinates) the memory obviously cannot be aligned, and we account for this. However, in the case where align is a power-of-two, we assume the base pointer also has the same alignment, which will enable many platforms to use faster aligned memory load operations. An easy way to think of this is that each triplet of data in memory must be aligned to the align parameter you specify when it&apos;s a power-of-two.</para><para>The offset memory must always be aligned to GMX_SIMD_FINT32_WIDTH, since this enables us to use SIMD loads and gather operations on platforms that support it.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para><simplesectsep/><para>This routine uses a normal array for the offsets, since we typically load this data from memory. On the architectures we have tested this is faster even when a SIMD integer datatype is present. </para><simplesectsep/><para>To improve performance, this function might use full-SIMD-width unaligned loads. This means you need to ensure the memory is padded at the end, so we always can load GMX_SIMD_REAL_WIDTH elements starting at the last offset. If you use the Gromacs aligned memory allocation routines this will always be the case. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" line="240" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" bodystart="240" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaba67dbea2a790730dfa78999209959b2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::transposeScatterStoreU</definition>
        <argsstring>(float *base, const std::int32_t offset[], SimdFloat v0, SimdFloat v1, SimdFloat v2)</argsstring>
        <name>transposeScatterStoreU</name>
        <param>
          <type>float *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>offset</declname>
          <array>[]</array>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Transpose and store 3 SIMD floats to 3 consecutive addresses at GMX_SIMD_FLOAT_WIDTH offsets. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory to which we write, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 3 for this routine) the output data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are written. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">base</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the memory area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Aligned array with offsets to the start of each triplet. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v0</parametername>
</parameternamelist>
<parameterdescription>
<para>1st component of triplets, written to base[align*offset[i]]. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd component of triplets, written to base[align*offset[i] + 1]. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>3rd component of triplets, written to base[align*offset[i] + 2].</para></parameterdescription>
</parameteritem>
</parameterlist>
This function can work with both aligned (better performance) and unaligned memory. When the align parameter is not a power-of-two (align==3 would be normal for packed atomic coordinates) the memory obviously cannot be aligned, and we account for this. However, in the case where align is a power-of-two, we assume the base pointer also has the same alignment, which will enable many platforms to use faster aligned memory store operations. An easy way to think of this is that each triplet of data in memory must be aligned to the align parameter you specify when it&apos;s a power-of-two.</para><para>The offset memory must always be aligned to GMX_SIMD_FINT32_WIDTH, since this enables us to use SIMD loads and gather operations on platforms that support it.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para><simplesectsep/><para>This routine uses a normal array for the offsets, since we typically load the data from memory. On the architectures we have tested this is faster even when a SIMD integer datatype is present. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" line="294" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" bodystart="294" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gac36c2fd8a466fb309ba9ae1dbf8dffbd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::transposeScatterIncrU</definition>
        <argsstring>(float *base, const std::int32_t offset[], SimdFloat v0, SimdFloat v1, SimdFloat v2)</argsstring>
        <name>transposeScatterIncrU</name>
        <param>
          <type>float *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>offset</declname>
          <array>[]</array>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Transpose and add 3 SIMD floats to 3 consecutive addresses at GMX_SIMD_FLOAT_WIDTH offsets. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory to which we write, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 3 for this routine) the output data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are incremented. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">base</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the memory area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Aligned array with offsets to the start of each triplet. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v0</parametername>
</parameternamelist>
<parameterdescription>
<para>1st component of triplets, added to base[align*offset[i]]. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd component of triplets, added to base[align*offset[i] + 1]. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>3rd component of triplets, added to base[align*offset[i] + 2].</para></parameterdescription>
</parameteritem>
</parameterlist>
This function can work with both aligned (better performance) and unaligned memory. When the align parameter is not a power-of-two (align==3 would be normal for packed atomic coordinates) the memory obviously cannot be aligned, and we account for this. However, in the case where align is a power-of-two, we assume the base pointer also has the same alignment, which will enable many platforms to use faster aligned memory load/store operations. An easy way to think of this is that each triplet of data in memory must be aligned to the align parameter you specify when it&apos;s a power-of-two.</para><para>The offset memory must always be aligned to GMX_SIMD_FINT32_WIDTH, since this enables us to use SIMD loads and gather operations on platforms that support it.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para><simplesectsep/><para>This routine uses a normal array for the offsets, since we typically load the data from memory. On the architectures we have tested this is faster even when a SIMD integer datatype is present. </para><simplesectsep/><para>To improve performance, this function might use full-SIMD-width unaligned load/store, and add 0.0 to the extra elements. This means you need to ensure the memory is padded at the end, so we always can load GMX_SIMD_REAL_WIDTH elements starting at the last offset. If you use the Gromacs aligned memory allocation routines this will always be the case. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" line="354" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" bodystart="354" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga6889b6665cbfc5fa0bce09fe5db5e49c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::transposeScatterDecrU</definition>
        <argsstring>(float *base, const std::int32_t offset[], SimdFloat v0, SimdFloat v1, SimdFloat v2)</argsstring>
        <name>transposeScatterDecrU</name>
        <param>
          <type>float *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>offset</declname>
          <array>[]</array>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Transpose and subtract 3 SIMD floats to 3 consecutive addresses at GMX_SIMD_FLOAT_WIDTH offsets. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory to which we write, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 3 for this routine) the output data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are decremented. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">base</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to start of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Aligned array with offsets to the start of each triplet. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v0</parametername>
</parameternamelist>
<parameterdescription>
<para>1st component, subtracted from base[align*offset[i]] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd component, subtracted from base[align*offset[i]+1] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>3rd component, subtracted from base[align*offset[i]+2]</para></parameterdescription>
</parameteritem>
</parameterlist>
This function can work with both aligned (better performance) and unaligned memory. When the align parameter is not a power-of-two (align==3 would be normal for packed atomic coordinates) the memory obviously cannot be aligned, and we account for this. However, in the case where align is a power-of-two, we assume the base pointer also has the same alignment, which will enable many platforms to use faster aligned memory load/store operations. An easy way to think of this is that each triplet of data in memory must be aligned to the align parameter you specify when it&apos;s a power-of-two.</para><para>The offset memory must always be aligned to GMX_SIMD_FINT32_WIDTH, since this enables us to use SIMD loads and gather operations on platforms that support it.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para><simplesectsep/><para>This routine uses a normal array for the offsets, since we typically load the data from memory. On the architectures we have tested this is faster even when a SIMD integer datatype is present. </para><simplesectsep/><para>To improve performance, this function might use full-SIMD-width unaligned load/store, and subtract 0.0 from the extra elements. This means you need to ensure the memory is padded at the end, so we always can load GMX_SIMD_REAL_WIDTH elements starting at the last offset. If you use the Gromacs aligned memory allocation routines this will always be the case. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" line="414" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" bodystart="414" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga82af54acc2b9eae6e58b646b5022aef5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::expandScalarsToTriplets</definition>
        <argsstring>(SimdFloat scalar, SimdFloat *triplets0, SimdFloat *triplets1, SimdFloat *triplets2)</argsstring>
        <name>expandScalarsToTriplets</name>
        <param>
          <type>SimdFloat</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>triplets0</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>triplets1</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>triplets2</declname>
        </param>
        <briefdescription>
<para>Expand each element of float SIMD variable into three identical consecutive elements in three SIMD outputs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating-point input, e.g. [s0 s1 s2 s3] if width=4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">triplets0</parametername>
</parameternamelist>
<parameterdescription>
<para>First output, e.g. [s0 s0 s0 s1] if width=4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">triplets1</parametername>
</parameternamelist>
<parameterdescription>
<para>Second output, e.g. [s1 s1 s2 s2] if width=4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">triplets2</parametername>
</parameternamelist>
<parameterdescription>
<para>Third output, e.g. [s2 s3 s3 s3] if width=4.</para></parameterdescription>
</parameteritem>
</parameterlist>
This routine is meant to use for things like scalar-vector multiplication, where the vectors are stored in a merged format like [x0 y0 z0 x1 y1 z1 ...], while the scalars are stored as [s0 s1 s2...], and the data cannot easily be changed to SIMD-friendly layout.</para><para>In this case, load 3 full-width SIMD variables from the vector array (This will always correspond to GMX_SIMD_FLOAT_WIDTH triplets), load a single full-width variable from the scalar array, and call this routine to expand the data. You can then simply multiply the first, second and third pair of SIMD variables, and store the three results back into a suitable vector-format array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" line="453" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" bodystart="453" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gac7ba60b7340036a984888bbca43616e4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::gatherLoadBySimdIntTranspose</definition>
        <argsstring>(const float *base, SimdFInt32 offset, SimdFloat *v0, SimdFloat *v1, SimdFloat *v2, SimdFloat *v3)</argsstring>
        <name>gatherLoadBySimdIntTranspose</name>
        <param>
          <type>const float *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>SimdFInt32</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>v3</declname>
        </param>
        <briefdescription>
<para>Load 4 consecutive floats from each of GMX_SIMD_FLOAT_WIDTH offsets specified by a SIMD integer, transpose into 4 SIMD float variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 4 for this routine) the input data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are loaded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Aligned pointer to the start of the memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD integer type with offsets to the start of each triplet. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v0</parametername>
</parameternamelist>
<parameterdescription>
<para>First component, base[align*offset[i]] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>Second component, base[align*offset[i] + 1] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v2</parametername>
</parameternamelist>
<parameterdescription>
<para>Third component, base[align*offset[i] + 2] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v3</parametername>
</parameternamelist>
<parameterdescription>
<para>Fourth component, base[align*offset[i] + 3] for each i.</para></parameterdescription>
</parameteritem>
</parameterlist>
The floating-point memory locations must be aligned, but only to the smaller of four elements and the floating-point SIMD width.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para><simplesectsep/><para>This is a special routine primarily intended for loading Gromacs table data as efficiently as possible - this is the reason for using a SIMD offset index, since the result of the real-to-integer conversion is present in a SIMD register just before calling this routine. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" line="494" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" bodystart="494" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga4b26c79db832542ab73a692f7db941c2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::gatherLoadUBySimdIntTranspose</definition>
        <argsstring>(const float *base, SimdFInt32 offset, SimdFloat *v0, SimdFloat *v1)</argsstring>
        <name>gatherLoadUBySimdIntTranspose</name>
        <param>
          <type>const float *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>SimdFInt32</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
<para>Load 2 consecutive floats from each of GMX_SIMD_FLOAT_WIDTH offsets (unaligned) specified by SIMD integer, transpose into 2 SIMD floats. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 2 for this routine) the input data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are loaded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD integer type with offsets to the start of each triplet. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v0</parametername>
</parameternamelist>
<parameterdescription>
<para>First component, base[align*offset[i]] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>Second component, base[align*offset[i] + 1] for each i.</para></parameterdescription>
</parameteritem>
</parameterlist>
Since some SIMD architectures cannot handle any unaligned loads, this routine is only available if GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE is 1.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para><simplesectsep/><para>This is a special routine primarily intended for loading Gromacs table data as efficiently as possible - this is the reason for using a SIMD offset index, since the result of the real-to-integer conversion is present in a SIMD register just before calling this routine. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" line="542" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" bodystart="542" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga98bde531b096434095b228308e7a3025" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>align</declname>
            <defname>align</defname>
          </param>
        </templateparamlist>
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::gatherLoadBySimdIntTranspose</definition>
        <argsstring>(const float *base, SimdFInt32 offset, SimdFloat *v0, SimdFloat *v1)</argsstring>
        <name>gatherLoadBySimdIntTranspose</name>
        <param>
          <type>const float *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>SimdFInt32</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
<para>Load 2 consecutive floats from each of GMX_SIMD_FLOAT_WIDTH offsets specified by a SIMD integer, transpose into 2 SIMD float variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. When this is identical to the number of SIMD variables (i.e., 2 for this routine) the input data is packed without padding in memory. See the SIMD parameters for exactly what memory positions are loaded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Aligned pointer to the start of the memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD integer type with offsets to the start of each triplet. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v0</parametername>
</parameternamelist>
<parameterdescription>
<para>First component, base[align*offset[i]] for each i. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>Second component, base[align*offset[i] + 1] for each i.</para></parameterdescription>
</parameteritem>
</parameterlist>
The floating-point memory locations must be aligned, but only to the smaller of two elements and the floating-point SIMD width.</para><para><simplesect kind="note"><para>You should NOT scale offsets before calling this routine; it is done internally by using the alignment template parameter instead. </para><simplesectsep/><para>This is a special routine primarily intended for loading Gromacs table data as efficiently as possible - this is the reason for using a SIMD offset index, since the result of the real-to-integer conversion is present in a SIMD register just before calling this routine. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" line="580" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" bodystart="580" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga1e64aefa14afa2f473c4db52e82d4a99" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float gmx_simdcall</type>
        <definition>static float gmx_simdcall gmx::reduceIncr4ReturnSum</definition>
        <argsstring>(float *m, SimdFloat v0, SimdFloat v1, SimdFloat v2, SimdFloat v3)</argsstring>
        <name>reduceIncr4ReturnSum</name>
        <param>
          <type>float *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>v3</declname>
        </param>
        <briefdescription>
<para>Reduce each of four SIMD floats, add those values to four consecutive floats in memory, return sum. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where four floats should be incremented </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v0</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD variable whose sum should be added to m[0] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD variable whose sum should be added to m[1] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD variable whose sum should be added to m[2] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v3</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD variable whose sum should be added to m[3]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sum of all elements in the four SIMD variables.</para></simplesect>
The pointer m must be aligned to the smaller of four elements and the floating-point SIMD width.</para><para><simplesect kind="note"><para>This is a special routine intended for the Gromacs nonbonded kernels. It is used in the epilogue of the outer loop, where the variables will contain unrolled forces for one outer-loop-particle each, corresponding to a single coordinate (i.e, say, four x-coordinate force variables). These should be summed and added to the force array in memory. Since we always work with contiguous SIMD-layout , we can use efficient aligned loads/stores. When calculating the virial, we also need the total sum of all forces for each coordinate. This is provided as the return value. For routines that do not need these, this extra code will be optimized away completely if you just ignore the return value (Checked with gcc-4.9.1 and clang-3.6 for AVX). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" line="624" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/impl_reference/impl_reference_util_float.h" bodystart="624" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga8e9692244890665c6dc8f81fc3536f38" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::invsqrtSingleAccuracy</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>invsqrtSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate 1/sqrt(x) for SIMD float, only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument that must be larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/sqrt(x). Result is undefined if your argument was invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4256" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4256" bodyend="4259"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga7e6086a4db51ceeeb8fe18e8884248f4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat</type>
        <definition>static SimdFloat gmx::maskzInvsqrtSingleAccuracy</definition>
        <argsstring>(SimdFloat x, SimdFBool m)</argsstring>
        <name>maskzInvsqrtSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <param>
          <type>SimdFBool</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Calculate 1/sqrt(x) for masked SIMD floats, only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para>This routine only evaluates 1/sqrt(x) for elements for which mask is true. Illegal values in the masked-out elements will not lead to floating-point exceptions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument that must be larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/sqrt(x). Result is undefined if your argument was invalid or entry was not masked, and 0.0 for masked-out entries. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4280" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4280" bodyend="4283"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga3685e3466dd242fee652e51ff27decc7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::invsqrtPairSingleAccuracy</definition>
        <argsstring>(SimdFloat x0, SimdFloat x1, SimdFloat *out0, SimdFloat *out1)</argsstring>
        <name>invsqrtPairSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>out0</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>out1</declname>
        </param>
        <briefdescription>
<para>Calculate 1/sqrt(x) for two SIMD floats, only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
</parameternamelist>
<parameterdescription>
<para>First set of arguments, x0 must be in single range (see below). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>Second set of arguments, x1 must be in single range (see below). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out0</parametername>
</parameternamelist>
<parameterdescription>
<para>Result 1/sqrt(x0) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out1</parametername>
</parameternamelist>
<parameterdescription>
<para>Result 1/sqrt(x1)</para></parameterdescription>
</parameteritem>
</parameterlist>
In particular for double precision we can sometimes calculate square root pairs slightly faster by using single precision until the very last step.</para><para><simplesect kind="note"><para>Both arguments must be larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4305" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4305" bodyend="4309"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga8db3b7c11cb80b5baca2cd42463e5c8e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::invSingleAccuracy</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>invSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate 1/x for SIMD float, only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument with magnitude larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/x. Result is undefined if your argument was invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4324" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4324" bodyend="4327"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gac6704608858869fb062f53fcc40d7642" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat</type>
        <definition>static SimdFloat gmx::maskzInvSingleAccuracy</definition>
        <argsstring>(SimdFloat x, SimdFBool m)</argsstring>
        <name>maskzInvSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <param>
          <type>SimdFBool</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Calculate 1/x for masked SIMD floats, only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument with magnitude larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/x for elements where m is true, or 0.0 for masked-out entries. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4344" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4344" bodyend="4347"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga3f7d261e770760618221865c64cc4e4c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>MathOptimization</type>
            <declname>opt</declname>
            <defname>opt</defname>
            <defval>MathOptimization::Safe</defval>
          </param>
        </templateparamlist>
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::sqrtSingleAccuracy</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>sqrtSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate sqrt(x) for SIMD float, always targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>By default, this function checks if the input value is 0.0 and masks this to return the correct result. If you are certain your argument will never be zero, and you know you need to save every single cycle you can, you can alternatively call the function as sqrt&lt;MathOptimization::Unsafe&gt;(x).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument that must be in range 0 &lt;=x &lt;= GMX_FLOAT_MAX, since the lookup step often has to be implemented in single precision. Arguments smaller than GMX_FLOAT_MIN will always lead to a zero result, even in double precision. If you are using the unsafe math optimization parameter, the argument must be in the range GMX_FLOAT_MIN &lt;= x &lt;= GMX_FLOAT_MAX.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sqrt(x). The result is undefined if the input value does not fall in the allowed range specified for the argument. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4355" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4355" bodyend="4358"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga6f81e3b80f7edc6e4f2722a6ee94a5de" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::logSingleAccuracy</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>logSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float log(x), only targeting single accuracy. This is the natural logarithm. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument, should be &gt;0. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The natural logarithm of x. Undefined if argument is invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4366" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4366" bodyend="4369"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga61a99b57e09349d83ddab13dd7e8ecb7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>MathOptimization</type>
            <declname>opt</declname>
            <defname>opt</defname>
            <defval>MathOptimization::Safe</defval>
          </param>
        </templateparamlist>
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::exp2SingleAccuracy</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>exp2SingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float 2^x, only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is changed from the default (safe) into the unsafe option, input values that would otherwise lead to zero-clamped results are not allowed and will lead to undefined results.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument. For the default (safe) function version this can be arbitrarily small value, but the routine might clamp the result to zero for arguments that would produce subnormal IEEE754-2008 results. This corresponds to inputs below -126 in single or -1022 in double, and it might overflow for arguments reaching 127 (single) or 1023 (double). If you enable the unsafe math optimization, very small arguments will not necessarily be zero-clamped, but can produce undefined results.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>2^x. The result is undefined for very large arguments that cause internal floating-point overflow. If unsafe optimizations are enabled, this is also true for very small values.</para></simplesect>
<simplesect kind="note"><para>The definition range of this function is just-so-slightly smaller than the allowed IEEE exponents for many architectures. This is due to the implementation, which will hopefully improve in the future.</para></simplesect>
<simplesect kind="warning"><para>You cannot rely on this implementation returning inf for arguments that cause overflow. If you have some very large values and need to rely on getting a valid numerical output, take the minimum of your variable and the largest valid argument before calling this routine. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4377" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4377" bodyend="4380"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga43240f3ca7edd0885d809b68d04664cf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>MathOptimization</type>
            <declname>opt</declname>
            <defname>opt</defname>
            <defval>MathOptimization::Safe</defval>
          </param>
        </templateparamlist>
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::expSingleAccuracy</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>expSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float e^x, only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para>In addition to scaling the argument for 2^x this routine correctly does extended precision arithmetics to improve accuracy.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is changed from the default (safe) into the unsafe option, input values that would otherwise lead to zero-clamped results are not allowed and will lead to undefined results.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument. For the default (safe) function version this can be arbitrarily small value, but the routine might clamp the result to zero for arguments that would produce subnormal IEEE754-2008 results. This corresponds to input arguments reaching -126*ln(2)=-87.3 in single, or -1022*ln(2)=-708.4 (double). Similarly, it might overflow for arguments reaching 127*ln(2)=88.0 (single) or 1023*ln(2)=709.1 (double). If the unsafe math optimizations are enabled, small input values that would result in zero-clamped output are not allowed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>exp(x). Overflowing arguments are likely to either return 0 or inf, depending on the underlying implementation. If unsafe optimizations are enabled, this is also true for very small values.</para></simplesect>
<simplesect kind="note"><para>The definition range of this function is just-so-slightly smaller than the allowed IEEE exponents for many architectures. This is due to the implementation, which will hopefully improve in the future.</para></simplesect>
<simplesect kind="warning"><para>You cannot rely on this implementation returning inf for arguments that cause overflow. If you have some very large values and need to rely on getting a valid numerical output, take the minimum of your variable and the largest valid argument before calling this routine. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4388" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4388" bodyend="4391"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga6b00659cd28d0255ee51fcfd9693209f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::erfSingleAccuracy</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>erfSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float erf(x), only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to calculate erf(x) for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>erf(x)</para></simplesect>
This routine achieves very close to single precision, but we do not care about the last bit or the subnormal result range. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4403" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4403" bodyend="4406"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga606009ab68825981a67be586f77fb38e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::erfcSingleAccuracy</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>erfcSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float erfc(x), only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to calculate erfc(x) for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>erfc(x)</para></simplesect>
This routine achieves singleprecision (bar the last bit) over most of the input range, but for large arguments where the result is getting close to the minimum representable numbers we accept slightly larger errors (think results that are in the ballpark of 10^-30) since that is not relevant for MD. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4420" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4420" bodyend="4423"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga6afcbeed45441fb9624fece5906b8a17" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::sinCosSingleAccuracy</definition>
        <argsstring>(SimdFloat x, SimdFloat *sinval, SimdFloat *cosval)</argsstring>
        <name>sinCosSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>sinval</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>cosval</declname>
        </param>
        <briefdescription>
<para>SIMD float sin &amp; cos, only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate sin/cos for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sinval</parametername>
</parameternamelist>
<parameterdescription>
<para>Sin(x) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cosval</parametername>
</parameternamelist>
<parameterdescription>
<para>Cos(x) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4432" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4432" bodyend="4435"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga0ba00dcc0a9e1342d1af6952e0d2e1e7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::sinSingleAccuracy</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>sinSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float sin(x), only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate sin for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sin(x)</para></simplesect>
<simplesect kind="attention"><para>Do NOT call both sin &amp; cos if you need both results, since each of them will then call <ref refid="namespacegmx_1a3191310c1a122aafe946f0caf2fdf364" kindref="member">sincos</ref> and waste a factor 2 in performance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4446" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4446" bodyend="4449"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaa1ecd6647f33b8bd12c43a3f3de95fb3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::cosSingleAccuracy</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>cosSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float cos(x), only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate cos for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Cos(x)</para></simplesect>
<simplesect kind="attention"><para>Do NOT call both sin &amp; cos if you need both results, since each of them will then call <ref refid="namespacegmx_1a3191310c1a122aafe946f0caf2fdf364" kindref="member">sincos</ref> and waste a factor 2 in performance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4460" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4460" bodyend="4463"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga6a534183c1fe54e0eccabbff0000990b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::tanSingleAccuracy</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>tanSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float tan(x), only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate tan for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tan(x) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4471" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4471" bodyend="4474"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga50ad685f412725bacde7687e43bab092" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::asinSingleAccuracy</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>asinSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float asin(x), only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate asin for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Asin(x) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4482" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4482" bodyend="4485"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga79f0bb956500fceaff7db7c496cb8dde" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::acosSingleAccuracy</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>acosSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float acos(x), only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate acos for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Acos(x) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4493" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4493" bodyend="4496"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga94615aced90295d0c008dbe576bfb535" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::atanSingleAccuracy</definition>
        <argsstring>(SimdFloat x)</argsstring>
        <name>atanSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float atan(x), only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument to evaluate atan for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Atan(x), same argument/value range as standard math library. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4504" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4504" bodyend="4507"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga73a666e50ed9883d77a2664cd9f9768c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::atan2SingleAccuracy</definition>
        <argsstring>(SimdFloat y, SimdFloat x)</argsstring>
        <name>atan2SingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>y</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>SIMD float atan2(y,x), only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y component of vector, any quartile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>X component of vector, any quartile </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Atan(y,x), same argument/value range as standard math library.</para></simplesect>
<simplesect kind="note"><para>This routine should provide correct results for all finite non-zero or positive-zero arguments. However, negative zero arguments will be treated as positive zero, which means the return value will deviate from the standard math library atan2(y,x) for those cases. That should not be of any concern in Gromacs, and in particular it will not affect calculations of angles from vectors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4523" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4523" bodyend="4526"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga50c70d6df3435d9235cdf34589f9225c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::pmeForceCorrectionSingleAccuracy</definition>
        <argsstring>(SimdFloat z2)</argsstring>
        <name>pmeForceCorrectionSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>z2</declname>
        </param>
        <briefdescription>
<para>SIMD Analytic PME force correction, only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z2</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="19">$(r \beta)^2$</formula> - see default single precision version for details. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Correction factor to coulomb force. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4534" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4534" bodyend="4537"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaf555c7f9fb09586e8c809283b8210ed0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::pmePotentialCorrectionSingleAccuracy</definition>
        <argsstring>(SimdFloat z2)</argsstring>
        <name>pmePotentialCorrectionSingleAccuracy</name>
        <param>
          <type>SimdFloat</type>
          <declname>z2</declname>
        </param>
        <briefdescription>
<para>SIMD Analytic PME potential correction, only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z2</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="19">$(r \beta)^2$</formula> - see default single precision version for details. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Correction factor to coulomb force. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4545" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4545" bodyend="4548"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga63a4c301efefb218bd1256e877610c1e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::invsqrtSingleAccuracy</definition>
        <argsstring>(Simd4Float x)</argsstring>
        <name>invsqrtSingleAccuracy</name>
        <param>
          <type>Simd4Float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate 1/sqrt(x) for SIMD4 float, only targeting single accuracy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument that must be larger than GMX_FLOAT_MIN and smaller than GMX_FLOAT_MAX, i.e. within the range of single precision. For the single precision implementation this is obviously always true for positive values, but for double precision it adds an extra restriction since the first lookup step might have to be performed in single precision on some architectures. Note that the responsibility for checking falls on you - this routine does not check arguments. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1/sqrt(x). Result is undefined if your argument was invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" line="4565" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/simd_math.h" bodystart="4565" bodyend="4568"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gac7b0fb22ab3f05a0c053735d3ddb7ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TSimd</type>
          </param>
          <param>
            <type>int</type>
            <declname>simdWidth</declname>
            <defname>simdWidth</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::test::anonymous_namespace{bootstrap_loadstore.cpp}::loadStoreTester</definition>
        <argsstring>(TSimd gmx_simdcall loadFn(const T *mem), void gmx_simdcall storeFn(T *mem, TSimd), const int loadOffset, const int storeOffset)</argsstring>
        <name>loadStoreTester</name>
        <param>
          <type>TSimd gmx_simdcall </type>
          <declname>loadFn</declname>
          <array>const T *mem</array>
        </param>
        <param>
          <type>void gmx_simdcall </type>
          <declname>storeFn</declname>
          <array>T *mem, TSimd</array>
        </param>
        <param>
          <type>const int</type>
          <declname>loadOffset</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>storeOffset</declname>
        </param>
        <briefdescription>
<para>Generic routine to test load &amp; store of SIMD, and check for side effects. </para>        </briefdescription>
        <detaileddescription>
<para>The tests for load, store, unaligned load and unaligned store both for real and int are pretty much similar, so we use a template function with additional function pointers for the actual load/store calls. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/bootstrap_loadstore.cpp" line="86" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/bootstrap_loadstore.cpp" bodystart="86" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga922ca08b17b84953e947846e2f86dcbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TSimd</type>
          </param>
        </templateparamlist>
        <type>TSimd gmx_simdcall</type>
        <definition>TSimd gmx_simdcall gmx::test::anonymous_namespace{bootstrap_loadstore.cpp}::loadWrapper</definition>
        <argsstring>(const T *m)</argsstring>
        <name>loadWrapper</name>
        <param>
          <type>const T *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Wrapper to handle proxy objects returned by some load functions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of scalar object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TSimd</parametername>
</parameternamelist>
<parameterdescription>
<para>Corresponding SIMD type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory address to load from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/bootstrap_loadstore.cpp" line="132" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/bootstrap_loadstore.cpp" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga9f15ed3a59672b47ac40198f72058c96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TSimd</type>
          </param>
        </templateparamlist>
        <type>TSimd gmx_simdcall</type>
        <definition>TSimd gmx_simdcall gmx::test::anonymous_namespace{bootstrap_loadstore.cpp}::loadUWrapper</definition>
        <argsstring>(const T *m)</argsstring>
        <name>loadUWrapper</name>
        <param>
          <type>const T *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Wrapper to handle proxy objects returned by some loadU functions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of scalar object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TSimd</parametername>
</parameternamelist>
<parameterdescription>
<para>Corresponding SIMD type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory address to load from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/bootstrap_loadstore.cpp" line="141" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/bootstrap_loadstore.cpp" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga33bbe34e961d7692b0c7e37dfd6e07b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::std::vector&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt;</type>
        <definition>std::vector&lt; real &gt; gmx::test::simdReal2Vector</definition>
        <argsstring>(const SimdReal simd)</argsstring>
        <name>simdReal2Vector</name>
        <param>
          <type>const SimdReal</type>
          <declname>simd</declname>
        </param>
        <briefdescription>
<para>Convert SIMD real to std::vector&lt;real&gt;. </para>        </briefdescription>
        <detaileddescription>
<para>The returned vector will have the same length as the SIMD width. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="157" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="157" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaac7b6345f9ce8f85ba985367cda65c72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SimdReal</type>
        <definition>SimdReal gmx::test::vector2SimdReal</definition>
        <argsstring>(const std::vector&lt; real &gt; &amp;v)</argsstring>
        <name>vector2SimdReal</name>
        <param>
          <type>const std::vector&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Return floating-point SIMD value from std::vector&lt;real&gt;. </para>        </briefdescription>
        <detaileddescription>
<para>If the vector is longer than SIMD width, only the first elements will be used. If it is shorter, the contents will be repeated to fill the SIMD register. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="168" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="168" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gacc5ed5bd5dd0134c7c96738eb931da71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SimdReal</type>
        <definition>SimdReal gmx::test::setSimdRealFrom3R</definition>
        <argsstring>(real r0, real r1, real r2)</argsstring>
        <name>setSimdRealFrom3R</name>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>r0</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>r1</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>r2</declname>
        </param>
        <briefdescription>
<para>Set SIMD register contents from three real values. </para>        </briefdescription>
        <detaileddescription>
<para>Our reason for using three values is that 3 is not a factor in any known SIMD width, so this way there will not be any simple repeated patterns e.g. between the low/high 64/128/256 bits in the SIMD register, which could hide bugs. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="180" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="180" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaba1a90972512fc9f1b870efb7d2c6133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SimdReal</type>
        <definition>SimdReal gmx::test::setSimdRealFrom1R</definition>
        <argsstring>(real value)</argsstring>
        <name>setSimdRealFrom1R</name>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set SIMD register contents from single real value. </para>        </briefdescription>
        <detaileddescription>
<para>All elements is set from the given value. This is effectively the same operation as simdSet1(), but is implemented using only load/store operations that have been tested separately in the bootstrapping tests. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="190" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="190" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga0c8e9af4c3cce6ac9f674d4872c0f520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt; std::int32_t &gt; gmx::test::simdInt2Vector</definition>
        <argsstring>(const SimdInt32 simd)</argsstring>
        <name>simdInt2Vector</name>
        <param>
          <type>const SimdInt32</type>
          <declname>simd</declname>
        </param>
        <briefdescription>
<para>Convert SIMD integer to std::vector&lt;int&gt;. </para>        </briefdescription>
        <detaileddescription>
<para>The returned vector will have the same length as the SIMD width. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="215" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="215" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga40fb1daa9017473f0202879e818b1395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SimdInt32</type>
        <definition>SimdInt32 gmx::test::vector2SimdInt</definition>
        <argsstring>(const std::vector&lt; std::int32_t &gt; &amp;v)</argsstring>
        <name>vector2SimdInt</name>
        <param>
          <type>const std::vector&lt; std::int32_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Return 32-bit integer SIMD value from std::vector&lt;int&gt;. </para>        </briefdescription>
        <detaileddescription>
<para>If the vector is longer than SIMD width, only the first elements will be used. If it is shorter, the contents will be repeated to fill the SIMD register. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="226" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="226" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga9d8939c4f0f48738a4f0621c8ae4d94c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SimdInt32</type>
        <definition>SimdInt32 gmx::test::setSimdIntFrom3I</definition>
        <argsstring>(int i0, int i1, int i2)</argsstring>
        <name>setSimdIntFrom3I</name>
        <param>
          <type>int</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
<para>Set SIMD register contents from three int values. </para>        </briefdescription>
        <detaileddescription>
<para>Our reason for using three values is that 3 is not a factor in any known SIMD width, so this way there will not be any simple repeated patterns e.g. between the low/high 64/128/256 bits in the SIMD register, which could hide bugs. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="238" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="238" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga2a7a383c9c8de6a3c2bf26af047a73d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SimdInt32</type>
        <definition>SimdInt32 gmx::test::setSimdIntFrom1I</definition>
        <argsstring>(int value)</argsstring>
        <name>setSimdIntFrom1I</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set SIMD register contents from single integer value. </para>        </briefdescription>
        <detaileddescription>
<para>All elements is set from the given value. This is effectively the same operation as simdSet1I(), but is implemented using only load/store operations that have been tested separately in the bootstrapping tests. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" line="248" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="248" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga18ef3e89efe46fcae8472f0e01ff7757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::std::vector&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt;</type>
        <definition>std::vector&lt; real &gt; gmx::test::simd4Real2Vector</definition>
        <argsstring>(const Simd4Real simd4)</argsstring>
        <name>simd4Real2Vector</name>
        <param>
          <type>const Simd4Real</type>
          <declname>simd4</declname>
        </param>
        <briefdescription>
<para>Convert SIMD4 real to std::vector&lt;real&gt;. </para>        </briefdescription>
        <detaileddescription>
<para>The returned vector will have the same length as the SIMD4 width. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="87" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="87" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga76e88f6551996de1c62f4961b49d2071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Simd4Real</type>
        <definition>Simd4Real gmx::test::vector2Simd4Real</definition>
        <argsstring>(const std::vector&lt; real &gt; &amp;v)</argsstring>
        <name>vector2Simd4Real</name>
        <param>
          <type>const std::vector&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Return floating-point SIMD4 value from std::vector&lt;real&gt;. </para>        </briefdescription>
        <detaileddescription>
<para>If the vector is longer than SIMD4 width, only the first elements will be used. If it is shorter, the contents will be repeated to fill the SIMD4 register. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="98" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="98" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaf4509cf1e9c7199cbc999cf10b828a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Simd4Real</type>
        <definition>Simd4Real gmx::test::setSimd4RealFrom3R</definition>
        <argsstring>(real r0, real r1, real r2)</argsstring>
        <name>setSimd4RealFrom3R</name>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>r0</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>r1</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>r2</declname>
        </param>
        <briefdescription>
<para>Set SIMD4 register contents from three real values. </para>        </briefdescription>
        <detaileddescription>
<para>It might seem stupid to use three values when we know that the SIMD4 width is 4, but it simplifies the test organization when the SIMD and SIMD4 tests are completely symmetric. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="110" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="110" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaf9535a225c8e4334bf7e50768ad185ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Simd4Real</type>
        <definition>Simd4Real gmx::test::setSimd4RealFrom1R</definition>
        <argsstring>(real value)</argsstring>
        <name>setSimd4RealFrom1R</name>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set SIMD4 register contents from single real value. </para>        </briefdescription>
        <detaileddescription>
<para>All elements is set from the given value. This is effectively the same operation as simd4Set1(), but is implemented using only load/store operations that have been tested separately in the bootstrapping tests. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" line="120" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="120" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga3aac7e19217ff4f096b6ca71a0c6e2fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>static real gmx::test::anonymous_namespace{simd4_math.cpp}::refInvsqrt</definition>
        <argsstring>(real x)</argsstring>
        <name>refInvsqrt</name>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function wrapper to evaluate reference 1/sqrt(x) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4_math.cpp" line="200" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4_math.cpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga767c5254cbb5bb8e8befd08274a9fad3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>static real gmx::test::anonymous_namespace{simd_math.cpp}::refInvsqrt</definition>
        <argsstring>(real x)</argsstring>
        <name>refInvsqrt</name>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function wrapper to evaluate reference 1/sqrt(x) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" line="246" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gae94fff6d91e1b9f4c242cbd09415e504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SimdReal gmx_simdcall</type>
        <definition>SimdReal gmx_simdcall gmx::test::anonymous_namespace{simd_math.cpp}::tstInvsqrtPair0</definition>
        <argsstring>(SimdReal x)</argsstring>
        <name>tstInvsqrtPair0</name>
        <param>
          <type>SimdReal</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function wrapper to return first result when testing <ref refid="namespacegmx_1aba2ac92d9abba8296506e281dc66c47a" kindref="member">invsqrtPair</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" line="267" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" bodystart="267" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga78aa03d940a00af9c0e6c5639b626bfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SimdReal gmx_simdcall</type>
        <definition>SimdReal gmx_simdcall gmx::test::anonymous_namespace{simd_math.cpp}::tstInvsqrtPair1</definition>
        <argsstring>(SimdReal x)</argsstring>
        <name>tstInvsqrtPair1</name>
        <param>
          <type>SimdReal</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function wrapper to return second result when testing <ref refid="namespacegmx_1aba2ac92d9abba8296506e281dc66c47a" kindref="member">invsqrtPair</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" line="276" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" bodystart="276" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaacbd3c786bea56e03538525626370fad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>static real gmx::test::anonymous_namespace{simd_math.cpp}::refSqrt</definition>
        <argsstring>(real x)</argsstring>
        <name>refSqrt</name>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function wrapper to evaluate reference sqrt(x) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" line="296" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" bodystart="296" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga4fe500a1c2c87cc5b54c638353f8f13e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>static real gmx::test::anonymous_namespace{simd_math.cpp}::refZero</definition>
        <argsstring>(real x)</argsstring>
        <name>refZero</name>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Dummy function returning 0.0 to test function ranges that should be zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" line="303" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" bodystart="303" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga7952f503c86be52c85f6c04f0171e4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>real gmx::test::anonymous_namespace{simd_math.cpp}::refInv</definition>
        <argsstring>(real x)</argsstring>
        <name>refInv</name>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function wrapper to evaluate reference 1/x. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" line="341" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" bodystart="341" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga1a6e1ca63aef91c815dd98016e8ee7c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>real gmx::test::anonymous_namespace{simd_math.cpp}::refErf</definition>
        <argsstring>(real x)</argsstring>
        <name>refErf</name>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function wrapper for erf(x), with argument/return in default Gromacs precision. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Single-precision <ref refid="namespacegmx_1a9a81ecdda73e384cd4e6896492144529" kindref="member">erf()</ref> in some libraries can be slightly lower precision than the SIMD flavor, so we use a cast to force double precision for reference. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" line="498" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" bodystart="498" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gac685f9f4f4f680a7b34f07f000ec8399" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>real gmx::test::anonymous_namespace{simd_math.cpp}::refErfc</definition>
        <argsstring>(real x)</argsstring>
        <name>refErfc</name>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function wrapper for erfc(x), with argument/return in default Gromacs precision. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Single-precision <ref refid="namespacegmx_1aad005ed4133f5a01702c63a9440feab7" kindref="member">erfc()</ref> in some libraries can be slightly lower precision than the SIMD flavor, so we use a cast to force double precision for reference. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" line="516" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" bodystart="516" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga0b545d2c893200f579cb0a0a2958473a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>real gmx::test::anonymous_namespace{simd_math.cpp}::refPmeForceCorrection</definition>
        <argsstring>(real x)</argsstring>
        <name>refPmeForceCorrection</name>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Evaluate reference version of PME force correction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" line="613" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" bodystart="613" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaae474b12cdb3d428a38ebe999bc20d5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>real gmx::test::anonymous_namespace{simd_math.cpp}::refPmePotentialCorrection</definition>
        <argsstring>(real x)</argsstring>
        <name>refPmePotentialCorrection</name>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Evaluate reference version of PME potential correction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" line="643" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" bodystart="643" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga4735eea7d0e2ea065a90a38fc95d1829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SimdReal gmx_simdcall</type>
        <definition>SimdReal gmx_simdcall gmx::test::anonymous_namespace{simd_math.cpp}::tst_invsqrt_SingleAccuracy_pair0</definition>
        <argsstring>(SimdReal x)</argsstring>
        <name>tst_invsqrt_SingleAccuracy_pair0</name>
        <param>
          <type>SimdReal</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function wrapper to return first result when testing <ref refid="namespacegmx_1a18f2d71567d1b88689c8498f3592b386" kindref="member">invsqrtPairSingleAccuracy</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" line="676" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" bodystart="676" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga5d24b8efdea7bb3aea5aa5176fba3b5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SimdReal gmx_simdcall</type>
        <definition>SimdReal gmx_simdcall gmx::test::anonymous_namespace{simd_math.cpp}::tst_invsqrt_SingleAccuracy_pair1</definition>
        <argsstring>(SimdReal x)</argsstring>
        <name>tst_invsqrt_SingleAccuracy_pair1</name>
        <param>
          <type>SimdReal</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function wrapper to return second result when testing <ref refid="namespacegmx_1a18f2d71567d1b88689c8498f3592b386" kindref="member">invsqrtPairSingleAccuracy</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" line="685" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" bodystart="685" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga0087673fec98bdc89b553f7f349e22d2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::iprod</definition>
        <argsstring>(SimdFloat ax, SimdFloat ay, SimdFloat az, SimdFloat bx, SimdFloat by, SimdFloat bz)</argsstring>
        <name>iprod</name>
        <param>
          <type>SimdFloat</type>
          <declname>ax</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>ay</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>az</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>by</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>bz</declname>
        </param>
        <briefdescription>
<para>SIMD float inner product of multiple float vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ax</parametername>
</parameternamelist>
<parameterdescription>
<para>X components of first vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ay</parametername>
</parameternamelist>
<parameterdescription>
<para>Y components of first vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>az</parametername>
</parameternamelist>
<parameterdescription>
<para>Z components of first vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para>X components of second vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>by</parametername>
</parameternamelist>
<parameterdescription>
<para>Y components of second vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bz</parametername>
</parameternamelist>
<parameterdescription>
<para>Z components of second vectors</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Element i will be res[i] = ax[i]*bx[i]+ay[i]*by[i]+az[i]*bz[i].</para></simplesect>
<simplesect kind="note"><para>The SIMD part is that we calculate many scalar products in one call. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/vector_operations.h" line="84" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/vector_operations.h" bodystart="84" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga86f01f74a7ab4156ec123146fd0b7de7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdFloat gmx_simdcall</type>
        <definition>static SimdFloat gmx_simdcall gmx::norm2</definition>
        <argsstring>(SimdFloat ax, SimdFloat ay, SimdFloat az)</argsstring>
        <name>norm2</name>
        <param>
          <type>SimdFloat</type>
          <declname>ax</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>ay</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>az</declname>
        </param>
        <briefdescription>
<para>SIMD float norm squared of multiple vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ax</parametername>
</parameternamelist>
<parameterdescription>
<para>X components of vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ay</parametername>
</parameternamelist>
<parameterdescription>
<para>Y components of vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>az</parametername>
</parameternamelist>
<parameterdescription>
<para>Z components of vectors</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Element i will be res[i] = ax[i]*ax[i]+ay[i]*ay[i]+az[i]*az[i].</para></simplesect>
<simplesect kind="note"><para>This corresponds to the scalar product of the vector with itself, but the compiler might be able to optimize it better with identical vectors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/vector_operations.h" line="108" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/vector_operations.h" bodystart="108" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga54124af0ff118d3f171b0eef07105c76" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::cprod</definition>
        <argsstring>(SimdFloat ax, SimdFloat ay, SimdFloat az, SimdFloat bx, SimdFloat by, SimdFloat bz, SimdFloat *cx, SimdFloat *cy, SimdFloat *cz)</argsstring>
        <name>cprod</name>
        <param>
          <type>SimdFloat</type>
          <declname>ax</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>ay</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>az</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>by</declname>
        </param>
        <param>
          <type>SimdFloat</type>
          <declname>bz</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>cy</declname>
        </param>
        <param>
          <type>SimdFloat *</type>
          <declname>cz</declname>
        </param>
        <briefdescription>
<para>SIMD float cross-product of multiple vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ax</parametername>
</parameternamelist>
<parameterdescription>
<para>X components of first vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ay</parametername>
</parameternamelist>
<parameterdescription>
<para>Y components of first vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>az</parametername>
</parameternamelist>
<parameterdescription>
<para>Z components of first vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para>X components of second vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>by</parametername>
</parameternamelist>
<parameterdescription>
<para>Y components of second vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bz</parametername>
</parameternamelist>
<parameterdescription>
<para>Z components of second vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cx</parametername>
</parameternamelist>
<parameterdescription>
<para>X components of cross product vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cy</parametername>
</parameternamelist>
<parameterdescription>
<para>Y components of cross product vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cz</parametername>
</parameternamelist>
<parameterdescription>
<para>Z components of cross product vectors</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
This calculates C = A x B, where the cross denotes the cross product. The arguments x/y/z denotes the different components, and each element corresponds to a separate vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/vector_operations.h" line="138" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/vector_operations.h" bodystart="138" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gacc26031cf2fbf6cb1cee4e38d4cf6e3b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::iprod</definition>
        <argsstring>(SimdDouble ax, SimdDouble ay, SimdDouble az, SimdDouble bx, SimdDouble by, SimdDouble bz)</argsstring>
        <name>iprod</name>
        <param>
          <type>SimdDouble</type>
          <declname>ax</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>ay</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>az</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>by</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>bz</declname>
        </param>
        <briefdescription>
<para>SIMD double inner product of multiple double vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ax</parametername>
</parameternamelist>
<parameterdescription>
<para>X components of first vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ay</parametername>
</parameternamelist>
<parameterdescription>
<para>Y components of first vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>az</parametername>
</parameternamelist>
<parameterdescription>
<para>Z components of first vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para>X components of second vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>by</parametername>
</parameternamelist>
<parameterdescription>
<para>Y components of second vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bz</parametername>
</parameternamelist>
<parameterdescription>
<para>Z components of second vectors</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Element i will be res[i] = ax[i]*bx[i]+ay[i]*by[i]+az[i]*bz[i].</para></simplesect>
<simplesect kind="note"><para>The SIMD part is that we calculate many scalar products in one call. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/vector_operations.h" line="168" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/vector_operations.h" bodystart="168" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga689e3ff037f04bcf9d3c3bfc896d50f6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SimdDouble gmx_simdcall</type>
        <definition>static SimdDouble gmx_simdcall gmx::norm2</definition>
        <argsstring>(SimdDouble ax, SimdDouble ay, SimdDouble az)</argsstring>
        <name>norm2</name>
        <param>
          <type>SimdDouble</type>
          <declname>ax</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>ay</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>az</declname>
        </param>
        <briefdescription>
<para>SIMD double norm squared of multiple vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ax</parametername>
</parameternamelist>
<parameterdescription>
<para>X components of vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ay</parametername>
</parameternamelist>
<parameterdescription>
<para>Y components of vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>az</parametername>
</parameternamelist>
<parameterdescription>
<para>Z components of vectors</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Element i will be res[i] = ax[i]*ax[i]+ay[i]*ay[i]+az[i]*az[i].</para></simplesect>
<simplesect kind="note"><para>This corresponds to the scalar product of the vector with itself, but the compiler might be able to optimize it better with identical vectors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/vector_operations.h" line="192" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/vector_operations.h" bodystart="192" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga5bda1e7f61ac88be5176195e3676a6d4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void gmx_simdcall</type>
        <definition>static void gmx_simdcall gmx::cprod</definition>
        <argsstring>(SimdDouble ax, SimdDouble ay, SimdDouble az, SimdDouble bx, SimdDouble by, SimdDouble bz, SimdDouble *cx, SimdDouble *cy, SimdDouble *cz)</argsstring>
        <name>cprod</name>
        <param>
          <type>SimdDouble</type>
          <declname>ax</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>ay</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>az</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>by</declname>
        </param>
        <param>
          <type>SimdDouble</type>
          <declname>bz</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>cy</declname>
        </param>
        <param>
          <type>SimdDouble *</type>
          <declname>cz</declname>
        </param>
        <briefdescription>
<para>SIMD double cross-product of multiple vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ax</parametername>
</parameternamelist>
<parameterdescription>
<para>X components of first vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ay</parametername>
</parameternamelist>
<parameterdescription>
<para>Y components of first vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>az</parametername>
</parameternamelist>
<parameterdescription>
<para>Z components of first vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para>X components of second vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>by</parametername>
</parameternamelist>
<parameterdescription>
<para>Y components of second vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bz</parametername>
</parameternamelist>
<parameterdescription>
<para>Z components of second vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cx</parametername>
</parameternamelist>
<parameterdescription>
<para>X components of cross product vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cy</parametername>
</parameternamelist>
<parameterdescription>
<para>Y components of cross product vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cz</parametername>
</parameternamelist>
<parameterdescription>
<para>Z components of cross product vectors</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
This calculates C = A x B, where the cross denotes the cross product. The arguments x/y/z denotes the different components, and each element corresponds to a separate vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/vector_operations.h" line="222" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/vector_operations.h" bodystart="222" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga5aaaf08ce309b237501775f56590ee53" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Float gmx_simdcall</type>
        <definition>static Simd4Float gmx_simdcall gmx::norm2</definition>
        <argsstring>(Simd4Float ax, Simd4Float ay, Simd4Float az)</argsstring>
        <name>norm2</name>
        <param>
          <type>Simd4Float</type>
          <declname>ax</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>ay</declname>
        </param>
        <param>
          <type>Simd4Float</type>
          <declname>az</declname>
        </param>
        <briefdescription>
<para>SIMD4 float norm squared of multiple vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ax</parametername>
</parameternamelist>
<parameterdescription>
<para>X components of vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ay</parametername>
</parameternamelist>
<parameterdescription>
<para>Y components of vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>az</parametername>
</parameternamelist>
<parameterdescription>
<para>Z components of vectors</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Element i will be res[i] = ax[i]*ax[i]+ay[i]*ay[i]+az[i]*az[i].</para></simplesect>
<simplesect kind="note"><para>This corresponds to the scalar product of the vector with itself, but the compiler might be able to optimize it better with identical vectors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/vector_operations.h" line="251" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/vector_operations.h" bodystart="251" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gae78d49a68930c6290f4fadd7f02b77e4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Simd4Double gmx_simdcall</type>
        <definition>static Simd4Double gmx_simdcall gmx::norm2</definition>
        <argsstring>(Simd4Double ax, Simd4Double ay, Simd4Double az)</argsstring>
        <name>norm2</name>
        <param>
          <type>Simd4Double</type>
          <declname>ax</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>ay</declname>
        </param>
        <param>
          <type>Simd4Double</type>
          <declname>az</declname>
        </param>
        <briefdescription>
<para>SIMD4 double norm squared of multiple vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ax</parametername>
</parameternamelist>
<parameterdescription>
<para>X components of vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ay</parametername>
</parameternamelist>
<parameterdescription>
<para>Y components of vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>az</parametername>
</parameternamelist>
<parameterdescription>
<para>Z components of vectors</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Element i will be res[i] = ax[i]*ax[i]+ay[i]*ay[i]+az[i]*az[i].</para></simplesect>
<simplesect kind="note"><para>This corresponds to the scalar product of the vector with itself, but the compiler might be able to optimize it better with identical vectors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/vector_operations.h" line="277" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/vector_operations.h" bodystart="277" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga44ad308730db9d832e68ee9864f83c21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::testing::AssertionResult</type>
        <definition>testing::AssertionResult gmx::test::SimdBaseTest::compareVectorRealUlp</definition>
        <argsstring>(const char *refExpr, const char *tstExpr, const std::vector&lt; real &gt; &amp;ref, const std::vector&lt; real &gt; &amp;tst)</argsstring>
        <name>compareVectorRealUlp</name>
        <param>
          <type>const char *</type>
          <declname>refExpr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tstExpr</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt; &amp;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt; &amp;</type>
          <declname>tst</declname>
        </param>
        <briefdescription>
<para>Compare two std::vector&lt;real&gt; for approximate equality. </para>        </briefdescription>
        <detaileddescription>
<para>This is an internal implementation routine that will be used by routines in derived child classes that first convert SIMD or SIMD4 variables to std::vector&lt;real&gt;. Do not call it directly.</para><para>This routine is designed according to the Google test specs, so the char strings will describe the arguments to the macro.</para><para>The comparison is applied to each element, and it returns true if each element in the vector test variable is within the class tolerances of the corresponding reference elements. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/base.h" line="143" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/base.cpp" bodystart="75" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga001cf162308616c323787bc47a4bb0f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::testing::AssertionResult</type>
        <definition>testing::AssertionResult gmx::test::SimdTest::compareSimdRealUlp</definition>
        <argsstring>(const char *refExpr, const char *tstExpr, const SimdReal ref, const SimdReal tst)</argsstring>
        <name>compareSimdRealUlp</name>
        <param>
          <type>const char *</type>
          <declname>refExpr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tstExpr</declname>
        </param>
        <param>
          <type>const SimdReal</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>const SimdReal</type>
          <declname>tst</declname>
        </param>
        <briefdescription>
<para>Compare two real SIMD variables for approximate equality. </para>        </briefdescription>
        <detaileddescription>
<para>This is an internal implementation routine. YOu should always use <ref refid="group__module__simd_1ga259280aa3c4e2bd328ffe48a122716db" kindref="member">GMX_EXPECT_SIMD_REAL_NEAR()</ref> instead.</para><para>This routine is designed according to the Google test specs, so the char strings will describe the arguments to the macro.</para><para>The comparison is applied to each element, and it returns true if each element in the SIMD test variable is within the class tolerances of the corresponding reference element. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" line="191" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="201" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga9248661b1f7bbea40e61887a2374218f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::testing::AssertionResult</type>
        <definition>testing::AssertionResult gmx::test::SimdTest::compareSimdEq</definition>
        <argsstring>(const char *refExpr, const char *tstExpr, const SimdReal ref, const SimdReal tst)</argsstring>
        <name>compareSimdEq</name>
        <param>
          <type>const char *</type>
          <declname>refExpr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tstExpr</declname>
        </param>
        <param>
          <type>const SimdReal</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>const SimdReal</type>
          <declname>tst</declname>
        </param>
        <briefdescription>
<para>Compare two real SIMD variables for exact equality. </para>        </briefdescription>
        <detaileddescription>
<para>This is an internal implementation routine. YOu should always use <ref refid="group__module__simd_1ga259280aa3c4e2bd328ffe48a122716db" kindref="member">GMX_EXPECT_SIMD_REAL_NEAR()</ref> instead.</para><para>This routine is designed according to the Google test specs, so the char strings will describe the arguments to the macro.</para><para>The comparison is applied to each element, and it returns true if each element in the SIMD test variable is within the class tolerances of the corresponding reference element. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" line="207" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="208" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gae651e858d6d0caab1962a3d2548f0c71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::testing::AssertionResult</type>
        <definition>testing::AssertionResult gmx::test::SimdTest::compareSimdEq</definition>
        <argsstring>(const char *refExpr, const char *tstExpr, const SimdInt32 ref, const SimdInt32 tst)</argsstring>
        <name>compareSimdEq</name>
        <param>
          <type>const char *</type>
          <declname>refExpr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tstExpr</declname>
        </param>
        <param>
          <type>const SimdInt32</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>const SimdInt32</type>
          <declname>tst</declname>
        </param>
        <briefdescription>
<para>Compare two 32-bit integer SIMD variables. </para>        </briefdescription>
        <detaileddescription>
<para>This is an internal implementation routine. YOu should always use <ref refid="group__module__simd_1ga212e5a5aa78448872129f5e3b6e5e3d8" kindref="member">GMX_EXPECT_SIMD_INT_EQ()</ref> instead.</para><para>This routine is designed according to the Google test specs, so the char strings will describe the arguments to the macro, while the SIMD and tolerance arguments are used to decide if the values are approximately equal.</para><para>The comparison is applied to each element, and it returns true if each element in the SIMD variable tst is identical to the corresponding reference element. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" line="223" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="259" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gad5773057ca8d1874a36bd2de5a6886a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::testing::AssertionResult</type>
        <definition>testing::AssertionResult gmx::test::Simd4Test::compareSimd4RealUlp</definition>
        <argsstring>(const char *refExpr, const char *tstExpr, const Simd4Real ref, const Simd4Real tst)</argsstring>
        <name>compareSimd4RealUlp</name>
        <param>
          <type>const char *</type>
          <declname>refExpr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tstExpr</declname>
        </param>
        <param>
          <type>const Simd4Real</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>const Simd4Real</type>
          <declname>tst</declname>
        </param>
        <briefdescription>
<para>Compare two real SIMD4 variables for approximate equality. </para>        </briefdescription>
        <detaileddescription>
<para>This is an internal implementation routine. YOu should always use <ref refid="group__module__simd_1ga647bdae4102d09c166e67116dd916d99" kindref="member">GMX_EXPECT_SIMD4_REAL_NEAR()</ref> instead.</para><para>This routine is designed according to the Google test specs, so the char strings will describe the arguments to the macro.</para><para>The comparison is applied to each element, and it returns true if each element in the SIMD4 test variable is within the class tolerances of the corresponding reference element. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.h" line="124" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="131" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gac59e3efe7feda9d916c5c1e6202ec086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::testing::AssertionResult</type>
        <definition>testing::AssertionResult gmx::test::Simd4Test::compareSimd4RealEq</definition>
        <argsstring>(const char *refExpr, const char *tstExpr, const Simd4Real ref, const Simd4Real tst)</argsstring>
        <name>compareSimd4RealEq</name>
        <param>
          <type>const char *</type>
          <declname>refExpr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tstExpr</declname>
        </param>
        <param>
          <type>const Simd4Real</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>const Simd4Real</type>
          <declname>tst</declname>
        </param>
        <briefdescription>
<para>Compare two real SIMD4 variables for exact equality. </para>        </briefdescription>
        <detaileddescription>
<para>This is an internal implementation routine. YOu should always use <ref refid="group__module__simd_1ga647bdae4102d09c166e67116dd916d99" kindref="member">GMX_EXPECT_SIMD4_REAL_NEAR()</ref> instead.</para><para>This routine is designed according to the Google test specs, so the char strings will describe the arguments to the macro.</para><para>The comparison is applied to each element, and it returns true if each element in the SIMD4 test variable is within the class tolerances of the corresponding reference element. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.h" line="140" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.cpp" bodystart="138" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaf04b19eb29158afe9ab1ae3fa9c1f7f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::testing::AssertionResult</type>
        <definition>testing::AssertionResult gmx::test::Simd4MathTest::compareSimd4MathFunction</definition>
        <argsstring>(const char *refFuncExpr, const char *simd4FuncExpr, real refFunc(real x), Simd4Real gmx_simdcall simd4Func(Simd4Real x))</argsstring>
        <name>compareSimd4MathFunction</name>
        <param>
          <type>const char *</type>
          <declname>refFuncExpr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>simd4FuncExpr</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> </type>
          <declname>refFunc</declname>
          <array>real x</array>
        </param>
        <param>
          <type>Simd4Real gmx_simdcall </type>
          <declname>simd4Func</declname>
          <array>Simd4Real x</array>
        </param>
        <briefdescription>
<para>Implementation routine to compare SIMD4 vs reference functions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>refFuncExpr</parametername>
</parameternamelist>
<parameterdescription>
<para>Description of reference function expression </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>simd4FuncExpr</parametername>
</parameternamelist>
<parameterdescription>
<para>Description of SIMD function expression </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>refFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference math function pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>simd4Func</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD math function pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
The function will be tested with the range and tolerances specified in the <ref refid="classgmx_1_1test_1_1SimdBaseTest" kindref="compound">SimdBaseTest</ref> class. You should not never call this function directly, but use the macro <ref refid="group__module__simd_1ga8b370f4bfa482349eeb8309b7e2a1c81" kindref="member">GMX_EXPECT_SIMD4_FUNC_NEAR(refFunc,tstFunc)</ref> instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4_math.cpp" line="67" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4_math.cpp" bodystart="92" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gaeaec328d2c8d1608e316b6de425ec635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::testing::AssertionResult</type>
        <definition>testing::AssertionResult gmx::test::SimdMathTest::compareSimdMathFunction</definition>
        <argsstring>(const char *refFuncExpr, const char *simdFuncExpr, const char *denormalsToZeroExpr, real refFunc(real x), SimdReal gmx_simdcall simdFunc(SimdReal x), bool denormalsToZero)</argsstring>
        <name>compareSimdMathFunction</name>
        <param>
          <type>const char *</type>
          <declname>refFuncExpr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>simdFuncExpr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>denormalsToZeroExpr</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> </type>
          <declname>refFunc</declname>
          <array>real x</array>
        </param>
        <param>
          <type>SimdReal gmx_simdcall </type>
          <declname>simdFunc</declname>
          <array>SimdReal x</array>
        </param>
        <param>
          <type>bool</type>
          <declname>denormalsToZero</declname>
        </param>
        <briefdescription>
<para>Implementation routine to compare SIMD vs reference functions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>refFuncExpr</parametername>
</parameternamelist>
<parameterdescription>
<para>Description of reference function expression </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>simdFuncExpr</parametername>
</parameternamelist>
<parameterdescription>
<para>Description of SIMD function expression </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denormalsToZeroExpr</parametername>
</parameternamelist>
<parameterdescription>
<para>Description of denormal-to-zero setting </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>refFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference math function pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>simdFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>SIMD math function pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denormalsToZero</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the function will consider denormal values equivalent to 0.0.</para></parameterdescription>
</parameteritem>
</parameterlist>
The function will be tested with the range and tolerances specified in the <ref refid="classgmx_1_1test_1_1SimdBaseTest" kindref="compound">SimdBaseTest</ref> class. You should not never call this function directly, but use the macro <ref refid="group__module__simd_1ga52e86f7ed302cc3025eec9b4c5021076" kindref="member">GMX_EXPECT_SIMD_FUNC_NEAR(refFunc,tstFunc)</ref> instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" line="69" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" bodystart="111" bodyend="220"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__module__simd_1ga20a19ada7d3af0169977cf041100dbe5" prot="public" static="no">
        <name>GMX_EXPECT_SIMD_REAL_EQ</name>
        <param><defname>ref</defname></param>
        <param><defname>tst</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(compareSimdEq, ref, tst)</initializer>
        <briefdescription>
<para>Test if a SIMD real is bitwise identical to reference SIMD value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" line="259" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga5f22ab2d66b66788a7818f12393f3825" prot="public" static="no">
        <name>GMX_EXPECT_SIMD_EQ</name>
        <param><defname>ref</defname></param>
        <param><defname>tst</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(compareSimdEq, ref, tst)</initializer>
        <briefdescription>
<para>Test if a SIMD is bitwise identical to reference SIMD value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" line="262" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga259280aa3c4e2bd328ffe48a122716db" prot="public" static="no">
        <name>GMX_EXPECT_SIMD_REAL_NEAR</name>
        <param><defname>ref</defname></param>
        <param><defname>tst</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(compareSimdRealUlp, ref, tst)</initializer>
        <briefdescription>
<para>Test if a SIMD real is within tolerance of reference SIMD value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" line="265" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga212e5a5aa78448872129f5e3b6e5e3d8" prot="public" static="no">
        <name>GMX_EXPECT_SIMD_INT_EQ</name>
        <param><defname>ref</defname></param>
        <param><defname>tst</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(compareSimdEq, ref, tst)</initializer>
        <briefdescription>
<para>Macro that checks SIMD integer expression against SIMD or reference int. </para>        </briefdescription>
        <detaileddescription>
<para>If the reference argument is a scalar integer it will be expanded into the width of the SIMD register and tested against all elements. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" line="301" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga9dc747d60adbfdc2a5c0779e2cb0caab" prot="public" static="no">
        <name>GMX_EXPECT_SIMD4_REAL_EQ</name>
        <param><defname>ref</defname></param>
        <param><defname>tst</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(compareSimd4RealEq, ref, tst)</initializer>
        <briefdescription>
<para>Test if a SIMD4 real is bitwise identical to reference SIMD4 value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.h" line="174" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga647bdae4102d09c166e67116dd916d99" prot="public" static="no">
        <name>GMX_EXPECT_SIMD4_REAL_NEAR</name>
        <param><defname>ref</defname></param>
        <param><defname>tst</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(compareSimd4RealUlp, ref, tst)</initializer>
        <briefdescription>
<para>Test if a SIMD4 real is within tolerance of reference SIMD4 value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.h" line="177" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga8b370f4bfa482349eeb8309b7e2a1c81" prot="public" static="no">
        <name>GMX_EXPECT_SIMD4_FUNC_NEAR</name>
        <param><defname>refFunc</defname></param>
        <param><defname>tstFunc</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(compareSimd4MathFunction, refFunc, tstFunc)</initializer>
        <briefdescription>
<para>Test approximate equality of SIMD4 vs reference version of a function. </para>        </briefdescription>
        <detaileddescription>
<para>This macro takes vanilla C and SIMD flavors of a function and tests it with the number of points, range, and tolerances specified by the test fixture class. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4_math.cpp" line="76" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd4_math.cpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1ga52e86f7ed302cc3025eec9b4c5021076" prot="public" static="no">
        <name>GMX_EXPECT_SIMD_FUNC_NEAR</name>
        <param><defname>refFunc</defname></param>
        <param><defname>tstFunc</defname></param>
        <initializer>EXPECT_PRED_FORMAT3(compareSimdMathFunction, refFunc, tstFunc, false)</initializer>
        <briefdescription>
<para>Test approximate equality of SIMD vs reference version of a function. </para>        </briefdescription>
        <detaileddescription>
<para>This macro takes vanilla C and SIMD flavors of a function and tests it with the number of points, range, and tolerances specified by the test fixture class. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" line="82" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__simd_1gab0129484fd9e38199e1569497fcde929" prot="public" static="no">
        <name>GMX_EXPECT_SIMD_FUNC_NEAR_DTZ</name>
        <param><defname>refFunc</defname></param>
        <param><defname>tstFunc</defname></param>
        <initializer>EXPECT_PRED_FORMAT3(compareSimdMathFunction, refFunc, tstFunc, true)</initializer>
        <briefdescription>
<para>Test approximate equality of SIMD vs reference function, denormals can be zero. </para>        </briefdescription>
        <detaileddescription>
<para>This macro takes vanilla C and SIMD flavors of a function and tests it with the number of points, range, and tolerances specified by the test fixture class.</para><para>This version of the function will also return success if the test function returns zero where the reference function returns a denormal value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" line="93" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd_math.cpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides an architecture-independent way of doing SIMD coding. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal /> </para><para>Overview of the SIMD implementation is provided in <ref refid="page_simd" kindref="compound">Single-instruction Multiple-data (SIMD) coding</ref>. The details are documented in <ref refid="simd_8h" kindref="compound">gromacs/simd/simd.h</ref> and the reference implementation <ref refid="impl__reference_8h" kindref="compound">impl_reference.h</ref>.</para><para><simplesect kind="author"><para>Erik Lindahl <ulink url="mailto:erik.lindahl@scilifelab.se">erik.lindahl@scilifelab.se</ulink> </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
