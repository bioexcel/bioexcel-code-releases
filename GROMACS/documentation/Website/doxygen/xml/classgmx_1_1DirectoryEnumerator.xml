<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1DirectoryEnumerator" kind="class" prot="public">
    <compoundname>gmx::DirectoryEnumerator</compoundname>
    <includes local="no">gromacs/utility/directoryenumerator.h</includes>
    <innerclass refid="classgmx_1_1DirectoryEnumerator_1_1Impl" prot="public">gmx::DirectoryEnumerator::Impl</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgmx_1_1DirectoryEnumerator_1a380d30561cf7f1105baa7d52b4230aee" prot="private" static="no" mutable="no">
        <type><ref refid="classgmx_1_1PrivateImplPointer" kindref="compound">PrivateImplPointer</ref>&lt; <ref refid="classgmx_1_1DirectoryEnumerator_1_1Impl" kindref="compound">Impl</ref> &gt;</type>
        <definition>PrivateImplPointer&lt;Impl&gt; gmx::DirectoryEnumerator::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/directoryenumerator.h" line="125" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/directoryenumerator.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgmx_1_1DirectoryEnumerator_1a8a87f9e7c0537ead3df09813aa04d9ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; gmx::DirectoryEnumerator::enumerateFilesWithExtension</definition>
        <argsstring>(const char *dirname, const char *extension, bool bThrow)</argsstring>
        <name>enumerateFilesWithExtension</name>
        <param>
          <type>const char *</type>
          <declname>dirname</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>extension</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bThrow</declname>
        </param>
        <briefdescription>
<para>Convenience function to list files with certain extension from a directory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dirname</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1Path" kindref="compound">Path</ref> to the directory to list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">extension</parametername>
</parameternamelist>
<parameterdescription>
<para>List files with the given extension (or suffix in file name). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bThrow</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether failure to open the directory should throw. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of files with the given extension in <computeroutput>dirname</computeroutput>. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1FileIOError" kindref="compound">FileIOError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if opening the directory fails and <computeroutput>bThrow == true</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1FileIOError" kindref="compound">FileIOError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if some other I/O error occurs. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/directoryenumerator.h" line="80" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/directoryenumerator.cpp" bodystart="241" bodyend="263"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1DirectoryEnumerator_1a372101e5b3768d05e7c9c82a5e85c276" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::DirectoryEnumerator::DirectoryEnumerator</definition>
        <argsstring>(const char *dirname, bool bThrow=true)</argsstring>
        <name>DirectoryEnumerator</name>
        <param>
          <type>const char *</type>
          <declname>dirname</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bThrow</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Opens a directory for listing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dirname</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1Path" kindref="compound">Path</ref> to the directory to list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bThrow</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether failure to open the directory should throw. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1FileIOError" kindref="compound">FileIOError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if opening the directory fails and <computeroutput>bThrow == true</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/directoryenumerator.h" line="91" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/directoryenumerator.cpp" bodystart="266" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1DirectoryEnumerator_1a86f381a6d8bdd743588f5bf297b1c30d" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::DirectoryEnumerator::DirectoryEnumerator</definition>
        <argsstring>(const std::string &amp;dirname, bool bThrow=true)</argsstring>
        <name>DirectoryEnumerator</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dirname</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bThrow</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Opens a directory for listing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dirname</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1Path" kindref="compound">Path</ref> to the directory to list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bThrow</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether failure to open the directory should throw. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1FileIOError" kindref="compound">FileIOError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if opening the directory fails and <computeroutput>bThrow == true</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/directoryenumerator.h" line="93" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/directoryenumerator.cpp" bodystart="274" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1DirectoryEnumerator_1a2265cdff76d755c009cd26dcb4e72579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::DirectoryEnumerator::~DirectoryEnumerator</definition>
        <argsstring>()</argsstring>
        <name>~DirectoryEnumerator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/directoryenumerator.h" line="94" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/directoryenumerator.cpp" bodystart="282" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1DirectoryEnumerator_1ace86b9317c47d891a9f62f88bd671b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::DirectoryEnumerator::nextFile</definition>
        <argsstring>(std::string *filename)</argsstring>
        <name>nextFile</name>
        <param>
          <type>std::string *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Gets next file in a directory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the next file. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>false</computeroutput> if there were no more files. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1FileIOError" kindref="compound">FileIOError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if listing the next file fails.</para></parameterdescription>
</parameteritem>
</parameterlist>
If all files from the directory have been returned (or there are no files in the directory and this is the first call), the method returns <computeroutput>false</computeroutput> and <computeroutput>filename</computeroutput> is cleared. Otherwise, the return value is <computeroutput>true</computeroutput> and the first/next file name is returned in <computeroutput>filename</computeroutput>. <computeroutput>filename</computeroutput> will not contain any path information, only the name of the file.</para><para>If <computeroutput>bThrow</computeroutput> passed to the constructor was <computeroutput>false</computeroutput> and the directory was not successfully opened, the first call to this function will return <computeroutput>false</computeroutput>.</para><para>This method is not thread safe when called on the same object by multiple threads. Such use requires external synchronization. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/directoryenumerator.h" line="120" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/directoryenumerator.cpp" bodystart="286" bodyend="294"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Lists files in a directory. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal /> If multiple threads share the same <ref refid="classgmx_1_1DirectoryEnumerator" kindref="compound">DirectoryEnumerator</ref>, they must take responsibility for their mutual synchronization, particularly with regard to calling <ref refid="classgmx_1_1DirectoryEnumerator_1ace86b9317c47d891a9f62f88bd671b0b" kindref="member">nextFile()</ref>. </para>    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/directoryenumerator.h" line="65" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/directoryenumerator.h" bodystart="64" bodyend="126"/>
    <listofallmembers>
      <member refid="classgmx_1_1DirectoryEnumerator_1a372101e5b3768d05e7c9c82a5e85c276" prot="public" virt="non-virtual"><scope>gmx::DirectoryEnumerator</scope><name>DirectoryEnumerator</name></member>
      <member refid="classgmx_1_1DirectoryEnumerator_1a86f381a6d8bdd743588f5bf297b1c30d" prot="public" virt="non-virtual"><scope>gmx::DirectoryEnumerator</scope><name>DirectoryEnumerator</name></member>
      <member refid="classgmx_1_1DirectoryEnumerator_1a8a87f9e7c0537ead3df09813aa04d9ae" prot="public" virt="non-virtual"><scope>gmx::DirectoryEnumerator</scope><name>enumerateFilesWithExtension</name></member>
      <member refid="classgmx_1_1DirectoryEnumerator_1a380d30561cf7f1105baa7d52b4230aee" prot="private" virt="non-virtual"><scope>gmx::DirectoryEnumerator</scope><name>impl_</name></member>
      <member refid="classgmx_1_1DirectoryEnumerator_1ace86b9317c47d891a9f62f88bd671b0b" prot="public" virt="non-virtual"><scope>gmx::DirectoryEnumerator</scope><name>nextFile</name></member>
      <member refid="classgmx_1_1DirectoryEnumerator_1a2265cdff76d755c009cd26dcb4e72579" prot="public" virt="non-virtual"><scope>gmx::DirectoryEnumerator</scope><name>~DirectoryEnumerator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
