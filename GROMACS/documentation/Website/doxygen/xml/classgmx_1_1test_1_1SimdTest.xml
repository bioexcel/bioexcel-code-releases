<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1test_1_1SimdTest" kind="class" prot="public">
    <compoundname>gmx::test::SimdTest</compoundname>
    <basecompoundref refid="classgmx_1_1test_1_1SimdBaseTest" prot="public" virt="non-virtual">gmx::test::SimdBaseTest</basecompoundref>
    <derivedcompoundref refid="classgmx_1_1test_1_1anonymous__namespace_02simd__floatingpoint__util_8cpp_03_1_1SimdFloatingpointUtilTest" prot="public" virt="non-virtual">gmx::test::anonymous_namespace{simd_floatingpoint_util.cpp}::SimdFloatingpointUtilTest</derivedcompoundref>
    <derivedcompoundref refid="classgmx_1_1test_1_1SimdMathTest" prot="public" virt="non-virtual">gmx::test::SimdMathTest</derivedcompoundref>
    <includes local="no">gromacs/simd/tests/simd.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="group__module__simd_1ga001cf162308616c323787bc47a4bb0f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::testing::AssertionResult</type>
        <definition>testing::AssertionResult gmx::test::SimdTest::compareSimdRealUlp</definition>
        <argsstring>(const char *refExpr, const char *tstExpr, const SimdReal ref, const SimdReal tst)</argsstring>
        <name>compareSimdRealUlp</name>
        <param>
          <type>const char *</type>
          <declname>refExpr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tstExpr</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegmx_1a8591d5e5ac6d1bec936a013fdc41b904" kindref="member">SimdReal</ref></type>
          <declname>ref</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegmx_1a8591d5e5ac6d1bec936a013fdc41b904" kindref="member">SimdReal</ref></type>
          <declname>tst</declname>
        </param>
        <briefdescription>
<para>Compare two real SIMD variables for approximate equality. </para>        </briefdescription>
        <detaileddescription>
<para>This is an internal implementation routine. YOu should always use <ref refid="group__module__simd_1ga259280aa3c4e2bd328ffe48a122716db" kindref="member">GMX_EXPECT_SIMD_REAL_NEAR()</ref> instead.</para><para>This routine is designed according to the Google test specs, so the char strings will describe the arguments to the macro.</para><para>The comparison is applied to each element, and it returns true if each element in the SIMD test variable is within the class tolerances of the corresponding reference element. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" line="191" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="201" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1ga9248661b1f7bbea40e61887a2374218f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::testing::AssertionResult</type>
        <definition>testing::AssertionResult gmx::test::SimdTest::compareSimdEq</definition>
        <argsstring>(const char *refExpr, const char *tstExpr, const SimdReal ref, const SimdReal tst)</argsstring>
        <name>compareSimdEq</name>
        <param>
          <type>const char *</type>
          <declname>refExpr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tstExpr</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegmx_1a8591d5e5ac6d1bec936a013fdc41b904" kindref="member">SimdReal</ref></type>
          <declname>ref</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegmx_1a8591d5e5ac6d1bec936a013fdc41b904" kindref="member">SimdReal</ref></type>
          <declname>tst</declname>
        </param>
        <briefdescription>
<para>Compare two real SIMD variables for exact equality. </para>        </briefdescription>
        <detaileddescription>
<para>This is an internal implementation routine. YOu should always use <ref refid="group__module__simd_1ga259280aa3c4e2bd328ffe48a122716db" kindref="member">GMX_EXPECT_SIMD_REAL_NEAR()</ref> instead.</para><para>This routine is designed according to the Google test specs, so the char strings will describe the arguments to the macro.</para><para>The comparison is applied to each element, and it returns true if each element in the SIMD test variable is within the class tolerances of the corresponding reference element. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" line="207" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="208" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gae651e858d6d0caab1962a3d2548f0c71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::testing::AssertionResult</type>
        <definition>testing::AssertionResult gmx::test::SimdTest::compareSimdEq</definition>
        <argsstring>(const char *refExpr, const char *tstExpr, const SimdInt32 ref, const SimdInt32 tst)</argsstring>
        <name>compareSimdEq</name>
        <param>
          <type>const char *</type>
          <declname>refExpr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tstExpr</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegmx_1a6598cea23dd103ce19bff4743279e3bc" kindref="member">SimdInt32</ref></type>
          <declname>ref</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegmx_1a6598cea23dd103ce19bff4743279e3bc" kindref="member">SimdInt32</ref></type>
          <declname>tst</declname>
        </param>
        <briefdescription>
<para>Compare two 32-bit integer SIMD variables. </para>        </briefdescription>
        <detaileddescription>
<para>This is an internal implementation routine. YOu should always use <ref refid="group__module__simd_1ga212e5a5aa78448872129f5e3b6e5e3d8" kindref="member">GMX_EXPECT_SIMD_INT_EQ()</ref> instead.</para><para>This routine is designed according to the Google test specs, so the char strings will describe the arguments to the macro, while the SIMD and tolerance arguments are used to decide if the values are approximately equal.</para><para>The comparison is applied to each element, and it returns true if each element in the SIMD variable tst is identical to the corresponding reference element. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" line="223" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.cpp" bodystart="259" bodyend="263"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Test fixture for SIMD tests. </para>    </briefdescription>
    <detaileddescription>
<internal><para>This is a very simple test fixture that basically just takes the common SIMD/SIMD4 functionality from <ref refid="classgmx_1_1test_1_1SimdBaseTest" kindref="compound">SimdBaseTest</ref> and creates wrapper routines specific for normal SIMD functionality. </para></internal>
    </detaileddescription>
    <inheritancegraph>
      <node id="3257">
        <label>gmx::test::anonymous_namespace{simd_floatingpoint_util.cpp}::SimdFloatingpointUtilTest</label>
        <link refid="classgmx_1_1test_1_1anonymous__namespace_02simd__floatingpoint__util_8cpp_03_1_1SimdFloatingpointUtilTest"/>
        <childnode refid="3254" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3255">
        <label>gmx::test::SimdBaseTest</label>
        <link refid="classgmx_1_1test_1_1SimdBaseTest"/>
        <childnode refid="3256" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3258">
        <label>gmx::test::SimdMathTest</label>
        <link refid="classgmx_1_1test_1_1SimdMathTest"/>
        <childnode refid="3254" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3256">
        <label>Test</label>
      </node>
      <node id="3254">
        <label>gmx::test::SimdTest</label>
        <link refid="classgmx_1_1test_1_1SimdTest"/>
        <childnode refid="3255" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3260">
        <label>gmx::test::SimdBaseTest</label>
        <link refid="classgmx_1_1test_1_1SimdBaseTest"/>
        <childnode refid="3261" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3261">
        <label>Test</label>
      </node>
      <node id="3259">
        <label>gmx::test::SimdTest</label>
        <link refid="classgmx_1_1test_1_1SimdTest"/>
        <childnode refid="3260" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" line="173" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/simd/tests/simd.h" bodystart="172" bodyend="226"/>
    <listofallmembers>
      <member refid="classgmx_1_1test_1_1SimdBaseTest_1a67e1769c0ddf3a84103a1cd47f065bae" prot="protected" virt="non-virtual"><scope>gmx::test::SimdTest</scope><name>absTol_</name></member>
      <member refid="group__module__simd_1ga9248661b1f7bbea40e61887a2374218f" prot="public" virt="non-virtual"><scope>gmx::test::SimdTest</scope><name>compareSimdEq</name></member>
      <member refid="group__module__simd_1gae651e858d6d0caab1962a3d2548f0c71" prot="public" virt="non-virtual"><scope>gmx::test::SimdTest</scope><name>compareSimdEq</name></member>
      <member refid="group__module__simd_1ga001cf162308616c323787bc47a4bb0f3" prot="public" virt="non-virtual"><scope>gmx::test::SimdTest</scope><name>compareSimdRealUlp</name></member>
      <member refid="classgmx_1_1test_1_1SimdBaseTest_1a22fabd98b32ffe360fa267d8c0e6ac9d" prot="public" virt="non-virtual"><scope>gmx::test::SimdTest</scope><name>compareVectorEq</name></member>
      <member refid="group__module__simd_1ga44ad308730db9d832e68ee9864f83c21" prot="public" virt="non-virtual"><scope>gmx::test::SimdTest</scope><name>compareVectorRealUlp</name></member>
      <member refid="classgmx_1_1test_1_1SimdBaseTest_1a9d70ac319ae213a906f501b0fa63ed34" prot="protected" virt="non-virtual"><scope>gmx::test::SimdTest</scope><name>range_</name></member>
      <member refid="group__module__simd_1ga8a2a543330f7b970d26162dcdd99ee01" prot="public" virt="non-virtual"><scope>gmx::test::SimdTest</scope><name>s_nPoints</name></member>
      <member refid="classgmx_1_1test_1_1SimdBaseTest_1aba2dcd7ec0563e05aafd6c176fb286c4" prot="public" virt="non-virtual"><scope>gmx::test::SimdTest</scope><name>setAbsTol</name></member>
      <member refid="classgmx_1_1test_1_1SimdBaseTest_1a668d22ee1cb32b9bdd226f95479124f0" prot="public" virt="non-virtual"><scope>gmx::test::SimdTest</scope><name>setRange</name></member>
      <member refid="classgmx_1_1test_1_1SimdBaseTest_1a379ab155d44071bc98d3fd71b3b76449" prot="public" virt="non-virtual"><scope>gmx::test::SimdTest</scope><name>setUlpTol</name></member>
      <member refid="classgmx_1_1test_1_1SimdBaseTest_1a293b4002e1c6a4e9863c1f50994f694e" prot="public" virt="non-virtual"><scope>gmx::test::SimdTest</scope><name>SimdBaseTest</name></member>
      <member refid="classgmx_1_1test_1_1SimdBaseTest_1a9e2abac54e05356364ecdb0751e8665b" prot="protected" virt="non-virtual"><scope>gmx::test::SimdTest</scope><name>ulpTol_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
