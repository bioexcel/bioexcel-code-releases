<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="handlerestart_8cpp" kind="file">
    <compoundname>handlerestart.cpp</compoundname>
    <includes refid="gmxpre_8h" local="yes">gmxpre.h</includes>
    <includes refid="handlerestart_8h" local="yes">handlerestart.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="filenm_8h" local="yes">gromacs/commandline/filenm.h</includes>
    <includes refid="checkpoint_8h" local="yes">gromacs/fileio/checkpoint.h</includes>
    <includes refid="gmxfio_8h" local="yes">gromacs/fileio/gmxfio.h</includes>
    <includes refid="network_8h" local="yes">gromacs/gmxlib/network.h</includes>
    <includes refid="main_8h" local="yes">gromacs/mdlib/main.h</includes>
    <includes refid="commrec_8h" local="yes">gromacs/mdtypes/commrec.h</includes>
    <includes refid="basedefinitions_8h" local="yes">gromacs/utility/basedefinitions.h</includes>
    <includes refid="fatalerror_8h" local="yes">gromacs/utility/fatalerror.h</includes>
    <includes refid="smalloc_8h" local="yes">gromacs/utility/smalloc.h</includes>
    <incdepgraph>
      <node id="17783">
        <label>stdarg.h</label>
      </node>
      <node id="17781">
        <label>gromacs/commandline/filenm.h</label>
        <link refid="filenm_8h"/>
        <childnode refid="17777" relation="include">
        </childnode>
      </node>
      <node id="17776">
        <label>handlerestart.h</label>
        <link refid="handlerestart_8h"/>
        <childnode refid="17777" relation="include">
        </childnode>
      </node>
      <node id="17778">
        <label>stdint.h</label>
      </node>
      <node id="17774">
        <label>src/gromacs/mdrunutility/handlerestart.cpp</label>
        <link refid="handlerestart.cpp"/>
        <childnode refid="17775" relation="include">
        </childnode>
        <childnode refid="17776" relation="include">
        </childnode>
        <childnode refid="17780" relation="include">
        </childnode>
        <childnode refid="17781" relation="include">
        </childnode>
        <childnode refid="17777" relation="include">
        </childnode>
        <childnode refid="17782" relation="include">
        </childnode>
        <childnode refid="17785" relation="include">
        </childnode>
      </node>
      <node id="17786">
        <label>stddef.h</label>
      </node>
      <node id="17780">
        <label>string.h</label>
      </node>
      <node id="17785">
        <label>gromacs/utility/smalloc.h</label>
        <link refid="smalloc_8h"/>
        <childnode refid="17786" relation="include">
        </childnode>
        <childnode refid="17777" relation="include">
        </childnode>
      </node>
      <node id="17775">
        <label>gmxpre.h</label>
        <link refid="gmxpre_8h"/>
      </node>
      <node id="17777">
        <label>gromacs/utility/basedefinitions.h</label>
        <link refid="basedefinitions_8h"/>
        <childnode refid="17778" relation="include">
        </childnode>
        <childnode refid="17779" relation="include">
        </childnode>
      </node>
      <node id="17782">
        <label>gromacs/utility/fatalerror.h</label>
        <link refid="fatalerror_8h"/>
        <childnode refid="17783" relation="include">
        </childnode>
        <childnode refid="17784" relation="include">
        </childnode>
        <childnode refid="17777" relation="include">
        </childnode>
      </node>
      <node id="17784">
        <label>stdio.h</label>
      </node>
      <node id="17779">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="handlerestart_8cpp_1a87d603f29eae3a3e1ab7a6879ec247f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="basedefinitions_8h_1a8fddad319f226e856400d190198d5151" kindref="member">gmx_bool</ref></type>
        <definition>static gmx_bool exist_output_file</definition>
        <argsstring>(const char *fnm_cp, int nfile, const t_filenm fnm[])</argsstring>
        <name>exist_output_file</name>
        <param>
          <type>const char *</type>
          <declname>fnm_cp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nfile</declname>
        </param>
        <param>
          <type>const <ref refid="structt__filenm" kindref="compound">t_filenm</ref></type>
          <declname>fnm</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Search for <computeroutput>fnm_cp</computeroutput> in fnm and return true iff found. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000054"><xreftitle>Todo</xreftitle><xrefdescription><para>This could be implemented sanely with a for loop. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdrunutility/handlerestart.cpp" line="69" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdrunutility/handlerestart.cpp" bodystart="69" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="handlerestart_8cpp_1a27e1d88683a0ec4f57101bca0c917433" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void read_checkpoint_data</definition>
        <argsstring>(const char *filename, int *simulation_part, t_commrec *cr, gmx_bool bTryToAppendFiles, int nfile, const t_filenm fnm[], const char *part_suffix, gmx_bool *bAddPart, bool *bDoAppendFiles)</argsstring>
        <name>read_checkpoint_data</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>simulation_part</declname>
        </param>
        <param>
          <type><ref refid="structt__commrec" kindref="compound">t_commrec</ref> *</type>
          <declname>cr</declname>
        </param>
        <param>
          <type><ref refid="basedefinitions_8h_1a8fddad319f226e856400d190198d5151" kindref="member">gmx_bool</ref></type>
          <declname>bTryToAppendFiles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nfile</declname>
        </param>
        <param>
          <type>const <ref refid="structt__filenm" kindref="compound">t_filenm</ref></type>
          <declname>fnm</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const char *</type>
          <declname>part_suffix</declname>
        </param>
        <param>
          <type><ref refid="basedefinitions_8h_1a8fddad319f226e856400d190198d5151" kindref="member">gmx_bool</ref> *</type>
          <declname>bAddPart</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>bDoAppendFiles</declname>
        </param>
        <briefdescription>
<para>Support handling restarts. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000055"><xreftitle>Todo</xreftitle><xrefdescription><para>Clean this up (next patch)</para></xrefdescription></xrefsect></para><para>Read just the simulation &apos;generation&apos; and with bTryToAppendFiles check files. This is is needed at the beginning of mdrun, to be able to rename the logfile correctly. When file appending is requested, checks which output files are present, and issue a fatal error if some are not. Upon return, bAddPart will tell whether the simulation part needs to be added to the output file name, i.e. when we are doing checkpoint continuation without appending.</para><para>This routine cannot print tons of data, since it is called before the log file is opened. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdrunutility/handlerestart.cpp" line="102" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdrunutility/handlerestart.cpp" bodystart="102" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="handlerestart_8cpp_1ad0a6a4bb66c24bd9beb365d25750410f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handleRestart</definition>
        <argsstring>(t_commrec *cr, gmx_bool bTryToAppendFiles, const int NFILE, t_filenm fnm[], bool *bDoAppendFiles, bool *bStartFromCpt)</argsstring>
        <name>handleRestart</name>
        <param>
          <type><ref refid="structt__commrec" kindref="compound">t_commrec</ref> *</type>
          <declname>cr</declname>
        </param>
        <param>
          <type><ref refid="basedefinitions_8h_1a8fddad319f226e856400d190198d5151" kindref="member">gmx_bool</ref></type>
          <declname>bTryToAppendFiles</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>NFILE</declname>
        </param>
        <param>
          <type><ref refid="structt__filenm" kindref="compound">t_filenm</ref></type>
          <declname>fnm</declname>
          <array>[]</array>
        </param>
        <param>
          <type>bool *</type>
          <declname>bDoAppendFiles</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>bStartFromCpt</declname>
        </param>
        <briefdescription>
<para>Handle startup of mdrun, particularly regarding -cpi and -append. </para>        </briefdescription>
        <detaileddescription>
<para>If there is a checkpoint file, then prepare to start from that state. If restarting from a checkpoint file and appending is requested with tryToAppendFiles, we will set doAppendFiles to true on return if all files were found correctly. If some files are not found when appending should be done, we will instead issue a fatal error to avoid unintentional problems.</para><para>If there is no checkpoint file, we assume it is the first part of a new run, and in this case we silently set doAppendFiles to false on return.</para><para>On return, <computeroutput>fnm</computeroutput> is updated with suffix strings for part numbers if we are doing a restart from checkpoint and are not appending. The routine also does communication to coordinate behaviour between all ranks of a simulation, and/or simulations.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cr</parametername>
</parameternamelist>
<parameterdescription>
<para>Communication structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bTryToAppendFiles</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether appending is requested (from mdrun) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">NFILE</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of fnm struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">fnm</parametername>
</parameternamelist>
<parameterdescription>
<para>Filename parameters to mdrun </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bDoAppendFiles</parametername>
</parameternamelist>
<parameterdescription>
<para>True on return if we will do appending. Note that the routine will generate a fatal error for some scenarios where appending is requested but the necessary files not found. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bStartFromCpt</parametername>
</parameternamelist>
<parameterdescription>
<para>True on return if we found the checkpoint and will use it to restart. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdrunutility/handlerestart.cpp" line="234" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdrunutility/handlerestart.cpp" bodystart="234" bodyend="309"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file declares functions for mdrun to call to manage the details of doing a restart (ie. reading checkpoints, appending output files). </para>    </briefdescription>
    <detaileddescription>
<internal><para><xrefsect id="todo_1_todo000053"><xreftitle>Todo</xreftitle><xrefdescription><para>Clean up the error-prone logic here. Add doxygen.</para></xrefdescription></xrefsect></para><para><simplesect kind="author"><para>Berk Hess <ulink url="mailto:hess@kth.se">hess@kth.se</ulink> </para><simplesectsep/><para>Erik Lindahl <ulink url="mailto:erik@kth.se">erik@kth.se</ulink> </para><simplesectsep/><para>Mark Abraham <ulink url="mailto:mark.j.abraham@gmail.com">mark.j.abraham@gmail.com</ulink> </para></simplesect>
</para></internal>
    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdrunutility/handlerestart.cpp"/>
  </compounddef>
</doxygen>
