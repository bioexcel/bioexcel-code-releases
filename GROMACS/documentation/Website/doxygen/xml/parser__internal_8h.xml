<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="parser__internal_8h" kind="file">
    <compoundname>parser_internal.h</compoundname>
    <includes local="no">exception</includes>
    <includes local="no">memory</includes>
    <includes refid="exceptions_8h" local="yes">gromacs/utility/exceptions.h</includes>
    <includes refid="gmxassert_8h" local="yes">gromacs/utility/gmxassert.h</includes>
    <includes refid="stringutil_8h" local="yes">gromacs/utility/stringutil.h</includes>
    <includes refid="parsetree_8h" local="yes">parsetree.h</includes>
    <includes refid="scanner_8h" local="yes">scanner.h</includes>
    <includes refid="selelem_8h" local="yes">selelem.h</includes>
    <incdepgraph>
      <node id="22017">
        <label>list</label>
      </node>
      <node id="22022">
        <label>scanner.h</label>
        <link refid="scanner_8h"/>
        <childnode refid="21998" relation="include">
        </childnode>
        <childnode refid="22003" relation="include">
        </childnode>
        <childnode refid="22023" relation="include">
        </childnode>
      </node>
      <node id="22011">
        <label>gromacs/utility/current_function.h</label>
        <link refid="current__function_8h"/>
      </node>
      <node id="22019">
        <label>selelem.h</label>
        <link refid="selelem_8h"/>
        <childnode refid="21999" relation="include">
        </childnode>
        <childnode refid="22003" relation="include">
        </childnode>
        <childnode refid="22020" relation="include">
        </childnode>
        <childnode refid="22010" relation="include">
        </childnode>
        <childnode refid="22018" relation="include">
        </childnode>
        <childnode refid="22021" relation="include">
        </childnode>
      </node>
      <node id="22008">
        <label>stdint.h</label>
      </node>
      <node id="22016">
        <label>parsetree.h</label>
        <link refid="parsetree_8h"/>
        <childnode refid="21998" relation="include">
        </childnode>
        <childnode refid="22017" relation="include">
        </childnode>
        <childnode refid="21999" relation="include">
        </childnode>
        <childnode refid="22003" relation="include">
        </childnode>
        <childnode refid="22012" relation="include">
        </childnode>
        <childnode refid="22018" relation="include">
        </childnode>
        <childnode refid="22019" relation="include">
        </childnode>
        <childnode refid="22021" relation="include">
        </childnode>
      </node>
      <node id="22020">
        <label>gromacs/selection/indexutil.h</label>
        <link refid="indexutil_8h"/>
        <childnode refid="22001" relation="include">
        </childnode>
        <childnode refid="22003" relation="include">
        </childnode>
      </node>
      <node id="22014">
        <label>cstdarg</label>
      </node>
      <node id="22003">
        <label>string</label>
      </node>
      <node id="22010">
        <label>gromacs/utility/classhelpers.h</label>
        <link refid="classhelpers_8h"/>
        <childnode refid="21999" relation="include">
        </childnode>
      </node>
      <node id="21998">
        <label>exception</label>
      </node>
      <node id="22012">
        <label>gromacs/utility/gmxassert.h</label>
        <link refid="gmxassert_8h"/>
        <childnode refid="22007" relation="include">
        </childnode>
        <childnode refid="22011" relation="include">
        </childnode>
      </node>
      <node id="22021">
        <label>selvalue.h</label>
        <link refid="selvalue_8h"/>
        <childnode refid="22018" relation="include">
        </childnode>
      </node>
      <node id="22001">
        <label>cstdio</label>
      </node>
      <node id="22018">
        <label>gromacs/utility/real.h</label>
        <link refid="real_8h"/>
      </node>
      <node id="22006">
        <label>vector</label>
      </node>
      <node id="22013">
        <label>gromacs/utility/stringutil.h</label>
        <link refid="stringutil_8h"/>
        <childnode refid="22014" relation="include">
        </childnode>
        <childnode refid="22015" relation="include">
        </childnode>
        <childnode refid="22003" relation="include">
        </childnode>
        <childnode refid="22006" relation="include">
        </childnode>
      </node>
      <node id="22007">
        <label>gromacs/utility/basedefinitions.h</label>
        <link refid="basedefinitions_8h"/>
        <childnode refid="22008" relation="include">
        </childnode>
        <childnode refid="22009" relation="include">
        </childnode>
      </node>
      <node id="22002">
        <label>cstdlib</label>
      </node>
      <node id="22000">
        <label>gromacs/utility/exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="22001" relation="include">
        </childnode>
        <childnode refid="22002" relation="include">
        </childnode>
        <childnode refid="21998" relation="include">
        </childnode>
        <childnode refid="21999" relation="include">
        </childnode>
        <childnode refid="22003" relation="include">
        </childnode>
        <childnode refid="22004" relation="include">
        </childnode>
        <childnode refid="22005" relation="include">
        </childnode>
        <childnode refid="22006" relation="include">
        </childnode>
        <childnode refid="22007" relation="include">
        </childnode>
        <childnode refid="22010" relation="include">
        </childnode>
        <childnode refid="22011" relation="include">
        </childnode>
        <childnode refid="22012" relation="include">
        </childnode>
      </node>
      <node id="21997">
        <label>src/gromacs/selection/parser_internal.h</label>
        <link refid="parser_internal.h"/>
        <childnode refid="21998" relation="include">
        </childnode>
        <childnode refid="21999" relation="include">
        </childnode>
        <childnode refid="22000" relation="include">
        </childnode>
        <childnode refid="22012" relation="include">
        </childnode>
        <childnode refid="22013" relation="include">
        </childnode>
        <childnode refid="22016" relation="include">
        </childnode>
        <childnode refid="22022" relation="include">
        </childnode>
        <childnode refid="22019" relation="include">
        </childnode>
      </node>
      <node id="22023">
        <label>parser.h</label>
      </node>
      <node id="22004">
        <label>type_traits</label>
      </node>
      <node id="22015">
        <label>cstring</label>
      </node>
      <node id="21999">
        <label>memory</label>
      </node>
      <node id="22009">
        <label>inttypes.h</label>
      </node>
      <node id="22005">
        <label>typeindex</label>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <header>Exception handling macros for actions</header>
      <description><para>These macros should be used at the beginning and end of each semantic action that may throw an exception. For robustness, it&apos;s best to wrap all actions that call functions declared outside parser.y should be wrapped. These macros take care to catch any exceptions, store the exception (or handle it and allow the parser to continue), and terminate the parser cleanly if necessary. The code calling the parser should use <ref refid="scanner_8h_1a929450c01a1ff7f2f001b91eeb29cf4e" kindref="member">_gmx_sel_lexer_rethrow_exception_if_occurred()</ref> to rethrow any exceptions. </para></description>
      <memberdef kind="define" id="parser__internal_8h_1adc0616ed62829750149da924ee4176a9" prot="public" static="no">
        <name>BEGIN_ACTION</name>
        <initializer>try {</initializer>
        <briefdescription>
<para>Starts an action that may throw exceptions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/selection/parser_internal.h" line="124" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/selection/parser_internal.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="parser__internal_8h_1a8cff21a873fa69df9a845af194a2bb38" prot="public" static="no">
        <name>END_ACTION</name>
        <initializer>}                                                           \
    catch (std::exception &amp;ex)                                  \
    {                                                           \
        if (<ref refid="parsetree_8h_1ae7a35abac6718c2e7cea569d4760d72a" kindref="member">_gmx_selparser_handle_exception</ref>(scanner, &amp;ex))      \
        {                                                       \
            YYERROR;                                            \
        }                                                       \
        else                                                    \
        {                                                       \
            YYABORT;                                            \
        }                                                       \
    }</initializer>
        <briefdescription>
<para>Finishes an action that may throw exceptions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/selection/parser_internal.h" line="127" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/selection/parser_internal.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="parser__internal_8h_1ac78a505847a3259da9fdc0ab88fd97f2" prot="public" static="no">
        <name>END_ACTION_TOPLEVEL</name>
        <initializer>}                                                           \
    catch (const std::exception &amp;)                              \
    {                                                           \
        <ref refid="scanner__internal_8cpp_1acded92fa1a923c7b946a510b15ba92b7" kindref="member">_gmx_sel_lexer_set_exception</ref>(scanner, std::current_exception()); \
        YYABORT;                                                \
    }</initializer>
        <briefdescription>
<para>Finishes an action that may throw exceptions and does not support resuming. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/selection/parser_internal.h" line="141" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/selection/parser_internal.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="parser__internal_8h_1a7004132c344d4c030cc9c1596e8fe644" prot="public" static="no">
        <name>GMX_YYFORCE_C_STACK_EXTENSION</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Custom macro to influence Bison behavior. </para>        </briefdescription>
        <detaileddescription>
<para>This macro added to parser.cpp through our patch to force Bison to use C-style logic for stack reallocation even though we have provided YYLTYPE and are compiling the code in C++ (our YYLTYPE can safely be copied this way). An alternative would be to provide the whole reallocation logic through an undocumented yyoverflow() macro, but that is probably also more trouble than it is worth. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/selection/parser_internal.h" line="109" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/selection/parser_internal.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="parser__internal_8h_1a62f90d9ec52c521531374502dccc7cc2" prot="public" static="no">
        <name>CHECK_SEL</name>
        <param><defname>sel</defname></param>
        <initializer>if (!*(sel)) { \
        delete sel; \
        YYERROR; \
    }</initializer>
        <briefdescription>
<para>Checks that a valid tree was set. </para>        </briefdescription>
        <detaileddescription>
<para>Should be called after <ref refid="parser__internal_8h_1a8553aeb4ef79ad62e90241cf54e221d5" kindref="member">set()</ref> if it was used to set a value where NULL pointer indicates an error.</para><para><xrefsect id="todo_1_todo000078"><xreftitle>Todo</xreftitle><xrefdescription><para>Get rid of this macro. It should now be possible to handle all errors using exceptions. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/selection/parser_internal.h" line="219" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/selection/parser_internal.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="parser__internal_8h_1a0c1fffb107955e3a6c98e6a8d44bc66b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>static ValueType get</definition>
        <argsstring>(ValueType *src)</argsstring>
        <name>get</name>
        <param>
          <type>ValueType *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Retrieves a semantic value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Semantic value to get the value from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retrieved value. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>unspecified</parametername>
</parameternamelist>
<parameterdescription>
<para>Any exception thrown by the move constructor of ValueType.</para></parameterdescription>
</parameteritem>
</parameterlist>
There should be no statements that may throw exceptions in actions before this function has been called for all semantic values that have a C++ object stored. Together with <ref refid="parser__internal_8h_1a8553aeb4ef79ad62e90241cf54e221d5" kindref="member">set()</ref>, this function abstracts away exception safety issues that arise from the use of a plain pointer for storing the semantic values.</para><para>Does not throw for smart pointer types. If used with types that may throw, the order of operations should be such that it is exception-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/selection/parser_internal.h" line="168" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/selection/parser_internal.h" bodystart="168" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="parser__internal_8h_1a8553aeb4ef79ad62e90241cf54e221d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void set</definition>
        <argsstring>(ValueType *&amp;dest, ValueType value)</argsstring>
        <name>set</name>
        <param>
          <type>ValueType *&amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets a semantic value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of value to set. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Semantic value to set (typically $$). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to put into the semantic value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unspecified</parametername>
</parameternamelist>
<parameterdescription>
<para>Any exception thrown by the move constructor of ValueType.</para></parameterdescription>
</parameteritem>
</parameterlist>
This should be the last statement before <ref refid="parser__internal_8h_1a8cff21a873fa69df9a845af194a2bb38" kindref="member">END_ACTION</ref>, except for a possible <ref refid="parser__internal_8h_1a62f90d9ec52c521531374502dccc7cc2" kindref="member">CHECK_SEL</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/selection/parser_internal.h" line="188" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/selection/parser_internal.h" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="parser__internal_8h_1a0340e95b333de1fa7bf551b2a87448e7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void set_empty</definition>
        <argsstring>(ValueType *&amp;dest)</argsstring>
        <name>set_empty</name>
        <param>
          <type>ValueType *&amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Sets an empty semantic value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of value to set (must be default constructible). </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Semantic value to set (typically $$). </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unspecified</parametername>
</parameternamelist>
<parameterdescription>
<para>Any exception thrown by the default constructor of ValueType.</para></parameterdescription>
</parameteritem>
</parameterlist>
This should be the last statement before <ref refid="parser__internal_8h_1a8cff21a873fa69df9a845af194a2bb38" kindref="member">END_ACTION</ref>, except for a possible <ref refid="parser__internal_8h_1a62f90d9ec52c521531374502dccc7cc2" kindref="member">CHECK_SEL</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/selection/parser_internal.h" line="205" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/selection/parser_internal.h" bodystart="205" bodyend="208"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Helper functions for the selection parser. </para>    </briefdescription>
    <detaileddescription>
<internal><para>This header is includes only from parser.cpp (generated from parser.y), and it includes functions and macros used internally by the parser. They are in a separate file to make then easier to edit (no need to regenerate the parser), and to keep parser.y as simple as possible.</para><para><simplesect kind="author"><para>Teemu Murtola <ulink url="mailto:teemu.murtola@gmail.com">teemu.murtola@gmail.com</ulink> </para></simplesect>
</para></internal>
    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/selection/parser_internal.h"/>
  </compounddef>
</doxygen>
