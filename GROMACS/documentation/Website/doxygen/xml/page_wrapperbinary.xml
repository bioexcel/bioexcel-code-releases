<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="page_wrapperbinary" kind="page">
    <compoundname>page_wrapperbinary</compoundname>
    <title>Wrapper binary implementation</title>
    <detaileddescription>
<para>This page mainly describes the implementation of the <computeroutput>gmx</computeroutput> wrapper binary. Many of the details are not visible to most of the code, but this documentation is included as part of the library API documentation to make it easier to understand the overall implementation without reading extensive documentation.</para><para><heading level="1">main() implementation </heading>
</para><para>The main() method for the wrapper binary is implemented in <computeroutput>src/programs/gmx.cpp</computeroutput>. This is a very simple code that does these basic tasks:<orderedlist>
<listitem><para>Initializes GROMACS using <ref refid="group__module__commandline_1ga8c376f5f94bd1a63a3a97e288c4be50d" kindref="member">gmx::initForCommandLine()</ref> (see <ref refid="page_usinglibrary" kindref="compound">Using GROMACS as a library</ref>).</para></listitem><listitem><para>Creates a <ref refid="classgmx_1_1CommandLineModuleManager" kindref="compound">gmx::CommandLineModuleManager</ref> instance for the wrapper binary.</para></listitem><listitem><para>Calls various methods to add modules to the manager and initialize it otherwise. Many of the pre-5.0 binaries are added from <computeroutput>src/programs/legacymodules.cpp</computeroutput>. New C++ tools are added from <computeroutput><ref refid="modules_8cpp" kindref="compound">src/gromacs/trajectoryanalysis/modules.cpp</ref></computeroutput>.</para></listitem><listitem><para>Passes control to the manager (see below).</para></listitem><listitem><para>On successful return, deinitializes GROMACS and returns the exit code from the manager. The main() method also catches all exceptions, and if one is caught, prints an error message and terminates the program cleanly.</para></listitem></orderedlist>
</para><para><heading level="1">Command line modules </heading>
</para><para>All modules within the wrapper binary are implemented as classes that implement the <ref refid="classgmx_1_1ICommandLineModule" kindref="compound">gmx::ICommandLineModule</ref> interface. There is generally some helper class in between:<itemizedlist>
<listitem><para>General C++ modules typically use <ref refid="classgmx_1_1Options" kindref="compound">gmx::Options</ref> for their command-line handling. Instead of each module implementing parsing and help separately with identical code, they implement <ref refid="classgmx_1_1ICommandLineOptionsModule" kindref="compound">gmx::ICommandLineOptionsModule</ref> instead. The framework then provides a bridge class that contains the common code and wraps <ref refid="classgmx_1_1ICommandLineOptionsModule" kindref="compound">gmx::ICommandLineOptionsModule</ref> into a <ref refid="classgmx_1_1ICommandLineModule" kindref="compound">gmx::ICommandLineModule</ref>.</para></listitem><listitem><para>For C++ trajectory analysis modules, there is a general implementation for running the <ref refid="classgmx_1_1TrajectoryAnalysisModule" kindref="compound">gmx::TrajectoryAnalysisModule</ref> subclasses in cmdlinerunner.cpp.</para></listitem><listitem><para>For old C-style main() functions, see <ref refid="page_wrapperbinary_1section_wrapperbinary_cmain" kindref="member">Handling C main() functions </ref>.</para></listitem></itemizedlist>
</para><sect1 id="page_wrapperbinary_1section_wrapperbinary_manager">
<title>Command line manager </title>
<para>The core of the wrapper binary is the <ref refid="classgmx_1_1CommandLineModuleManager_1a6b3468b2c6cbafe1b528267208f6db46" kindref="member">gmx::CommandLineModuleManager::run()</ref> method. This method:<orderedlist>
<listitem><para>Parses the command line arguments before the module name as arguments to the wrapper binary. Some arguments such as <computeroutput>-h</computeroutput> and <computeroutput>-version</computeroutput> cause rest of the command (the module name and all that follows) to be ignored.</para></listitem><listitem><para>If a module is specified, also checks the command line arguments after the module name for the options understood by the wrapper binary, such as <computeroutput>-h</computeroutput> and <computeroutput>-version</computeroutput> (see below for details of how <computeroutput>-h</computeroutput> works). Any such options are handled by the manager and removed from the command line for further processing.</para></listitem><listitem><para>Print the startup header (contents of which can be controlled by the command line options).</para></listitem><listitem><para>If a command line option requests termination after the startup header (such as <computeroutput>-version</computeroutput>), return.</para></listitem><listitem><para>Passes control to the selected module. If there is no module specified, the help module is invoked (see below).</para></listitem><listitem><para>Print a quote at the end, and return the exit code from the module.</para></listitem></orderedlist>
</para><para><heading level="2">Command line help </heading>
</para><para>To handle the <computeroutput>gmx help ...</computeroutput> command, as well as for <computeroutput>gmx -h</computeroutput> and for <computeroutput>gmx</computeroutput> <emphasis>module</emphasis> <computeroutput>-h</computeroutput>, the command line manager internally creates a module that handles the <computeroutput>help</computeroutput> command. All command lines containing the <computeroutput>-h</computeroutput>, as well as invocation of <computeroutput>gmx</computeroutput> without any arguments, are translated to corresponding <computeroutput>gmx help</computeroutput> commands. For example, <computeroutput>gmx</computeroutput> <emphasis>module</emphasis> <computeroutput>-h</computeroutput> is handled exactly like <computeroutput>gmx help</computeroutput> <emphasis>module</emphasis>. Note that if <computeroutput>-h</computeroutput> is specified for a module, the command line manager throws away all the other arguments before passing control to the module.</para><para>After the above translations, the internal help module handles all the help output. All the help is organized into a hierarchy of <ref refid="classgmx_1_1IHelpTopic" kindref="compound">gmx::IHelpTopic</ref> instances. The help module internally creates a root help topic that is printed with <computeroutput>gmx help</computeroutput>. If there are additional words after the <computeroutput>gmx help</computeroutput> command, then those are taken to specify the topic to show in the hierarchy.</para><para><ref refid="classgmx_1_1CommandLineModuleManager" kindref="compound">gmx::CommandLineModuleManager</ref> internally creates a help topic for each added module. These topics are shown when <computeroutput>gmx help</computeroutput> <emphasis>module</emphasis> is invoked. They forward the request to the actual module (to <ref refid="classgmx_1_1ICommandLineModule_1a947eea9c2e648aa837d385fcbe01c1bd" kindref="member">gmx::ICommandLineModule::writeHelp()</ref>).</para><para>In addition to the topics created internally, <ref refid="classgmx_1_1CommandLineModuleManager" kindref="compound">gmx::CommandLineModuleManager</ref> provides methods to add additional help topics. Currently, this is used to expose some reference material for the selections (the same content that is accessible using <computeroutput>help</computeroutput> in the selection prompt).</para><para><heading level="2">Help in other formats </heading>
</para><para>The build system provides a target, <computeroutput>make sphinx-programs</computeroutput>, that generates reStructuredText help for the commands, which in turn is used to generate man and HTML help. Internally, this executes <computeroutput>gmx help -export rst</computeroutput>, which triggers special handling in the internal help module. See documentation for <ulink url="../../dev-manual/build-system.html">special targets in the build system</ulink> for details of which targets to use for generating the documentation..</para><para>If this option is set, the help module loops through all the modules in the binary, writing help for each into a separate file. The help module writes common headers and footers, and asks the actual module to write the module-specific content (with <ref refid="classgmx_1_1ICommandLineModule_1a947eea9c2e648aa837d385fcbe01c1bd" kindref="member">gmx::ICommandLineModule::writeHelp()</ref>, using a different help context than for console output).</para><para>Additionally, a list of all the modules is generated (<computeroutput>gromacs.7</computeroutput> for man pages, and alphabetical and by-topic lists for the HTML pages).</para><sect2 id="page_wrapperbinary_1section_wrapperbinary_cmain">
<title>Handling C %main() functions </title>
<para>Many pre-5.0 modules are still implemented as a function with a C main() signature. All these binaries call <ref refid="group__module__commandline_1ga5140c89919960e8e1e218a5b0d881cd5" kindref="member">parse_common_args()</ref> as more or less the first thing in their processing. In order to implement the above approach, the module manager internally creates a command line module for these (in <ref refid="classgmx_1_1CommandLineModuleManager_1af70e6bccbcd30cb41d7ce54cafbd8583" kindref="member">gmx::CommandLineModuleManager::addModuleCMain()</ref>). The created module collaborates with <ref refid="group__module__commandline_1ga5140c89919960e8e1e218a5b0d881cd5" kindref="member">parse_common_args()</ref> to achieve the same functionality as for the new C++ modules.</para><para>Running the module simply executes the provided main() method. Help writing is more complex, as it requires the help context to be passed from the module to <ref refid="group__module__commandline_1ga5140c89919960e8e1e218a5b0d881cd5" kindref="member">parse_common_args()</ref>. This is handled using a global instance of the context (see <ref refid="classgmx_1_1GlobalCommandLineHelpContext" kindref="compound">gmx::GlobalCommandLineHelpContext</ref>). This context is set in the module, and if <ref refid="group__module__commandline_1ga5140c89919960e8e1e218a5b0d881cd5" kindref="member">parse_common_args()</ref> detects it, it prints out the help and returns <computeroutput>false</computeroutput> to indicate to the caller that it should immediately return. </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
