<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1Variant" kind="class" prot="public">
    <compoundname>gmx::Variant</compoundname>
    <includes local="no">gromacs/utility/variant.h</includes>
    <innerclass refid="classgmx_1_1Variant_1_1Content" prot="private">gmx::Variant::Content</innerclass>
    <innerclass refid="classgmx_1_1Variant_1_1IContent" prot="private">gmx::Variant::IContent</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgmx_1_1Variant_1a5cb7e08b386b87e1f2dbf31c27331e38" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; IContent &gt;</type>
        <definition>std::unique_ptr&lt;IContent&gt; gmx::Variant::content_</definition>
        <argsstring></argsstring>
        <name>content_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="249" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgmx_1_1Variant_1aa2baf8fcbe05d8f585cab5b2a1cb2b42" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classgmx_1_1Variant" kindref="compound">Variant</ref></type>
        <definition>static Variant gmx::Variant::create</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>create</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Creates a variant that holds the given value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method allows explicitly specifying the template argument, contrary to the templated constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="90" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Variant_1a0aa7845d7f553644ff035456d2e17e52" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classgmx_1_1Variant" kindref="compound">Variant</ref></type>
        <definition>static Variant gmx::Variant::create</definition>
        <argsstring>(T &amp;&amp;value)</argsstring>
        <name>create</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Creates a variant that holds the given value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
In addition to allowing specifying the template argument, this method avoids copying when move-construction is possible. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="100" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="100" bodyend="100"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1Variant_1a0cb32b1409ccf9018de3de348333805c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gmx::Variant::Variant</definition>
        <argsstring>()</argsstring>
        <name>Variant</name>
        <briefdescription>
<para>Creates an empty variant value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="103" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Variant_1a710e48622ac2e6be1cbcdb3f75335954" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>gmx::Variant::Variant</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>Variant</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Creates a variant that holds the given value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="110" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Variant_1a15ab9879523bd2918e9d8c676e618126" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>gmx::Variant::Variant</definition>
        <argsstring>(T &amp;&amp;value)</argsstring>
        <name>Variant</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Creates a variant that holds the given value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="120" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Variant_1a0dd43bfdb15cb3436a73c71b695ea631" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gmx::Variant::Variant</definition>
        <argsstring>(const Variant &amp;other)</argsstring>
        <name>Variant</name>
        <param>
          <type>const <ref refid="classgmx_1_1Variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Creates a deep copy of a variant. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="129" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Variant_1a415203fde0e7fa34f451dff358bbb0b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gmx::Variant::Variant</definition>
        <argsstring>(Variant &amp;&amp;other) noexcept</argsstring>
        <name>Variant</name>
        <param>
          <type><ref refid="classgmx_1_1Variant" kindref="compound">Variant</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move-constructs a variant. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="131" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Variant_1ac7ce6439570a93f81726236b848b517b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgmx_1_1Variant" kindref="compound">Variant</ref> &amp;</type>
        <definition>Variant&amp; gmx::Variant::operator=</definition>
        <argsstring>(const Variant &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classgmx_1_1Variant" kindref="compound">Variant</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assigns the variant. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="137" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="137" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Variant_1ab0bacd97ec0b8c127fc1d4f1ee2b99be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgmx_1_1Variant" kindref="compound">Variant</ref> &amp;</type>
        <definition>Variant&amp; gmx::Variant::operator=</definition>
        <argsstring>(Variant &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classgmx_1_1Variant" kindref="compound">Variant</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move-assigns the variant. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="143" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="143" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Variant_1ad9d7c5a6a7a1f1bd57d5d5ef23f8fe5a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::Variant::isEmpty</definition>
        <argsstring>() const </argsstring>
        <name>isEmpty</name>
        <briefdescription>
<para>Whether any value is stored. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="150" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Variant_1ab383851885bae000480ee34f411b3887" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::type_index</type>
        <definition>std::type_index gmx::Variant::type</definition>
        <argsstring>() const </argsstring>
        <name>type</name>
        <briefdescription>
<para>Returns the dynamic type of the value that is currently stored. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="152" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="152" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Variant_1ac144674e4892355359c98c16235cdf58" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool gmx::Variant::isType</definition>
        <argsstring>() const </argsstring>
        <name>isType</name>
        <briefdescription>
<para>Returns whether the type stored matches the template parameter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="160" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Variant_1a35066518b02eaaefece7e8f0cb6308f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T *</type>
        <definition>const T* gmx::Variant::tryCast</definition>
        <argsstring>() const </argsstring>
        <name>tryCast</name>
        <briefdescription>
<para>Tries to get the value as the given type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type to get. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the value, or nullptr if the type does not match the stored value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="173" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Variant_1a894d21bf2b574d049170c0b54730d48c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; gmx::Variant::cast</definition>
        <argsstring>() const </argsstring>
        <name>cast</name>
        <briefdescription>
<para>Gets the value when the type is known. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type to get (which must match what the variant stores).</para></parameterdescription>
</parameteritem>
</parameterlist>
Asserts if the variant is empty or does not contain the requested type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="185" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="185" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Variant_1abca3b4e2a7801e9e50a404342afcd756" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* gmx::Variant::tryCastRef</definition>
        <argsstring>()</argsstring>
        <name>tryCastRef</name>
        <briefdescription>
<para>Tries to get the value as the given type as a non-const pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type to get. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the value, or nullptr if the type does not match the stored value.</para></simplesect>
This method allows modifying the value in-place, which is useful with more complicated data structures. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="202" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Variant_1a96787967812931896390a4764aeb68a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T&amp; gmx::Variant::castRef</definition>
        <argsstring>()</argsstring>
        <name>castRef</name>
        <briefdescription>
<para>Gets the value when the type is known as a modifiable reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type to get (which must match what the variant stores).</para></parameterdescription>
</parameteritem>
</parameterlist>
Asserts if the variant is empty or does not contain the requested type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="214" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="214" bodyend="219"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgmx_1_1Variant_1af1452623053366457ec3b825ab8532c8" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>IContent *</type>
        <definition>IContent* gmx::Variant::cloneContent</definition>
        <argsstring>() const </argsstring>
        <name>cloneContent</name>
        <briefdescription>
<para>Creates a deep copy of the content. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="244" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="244" bodyend="247"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a dynamically typed value of an arbitrary type. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal /> To create a variant, either initialize it as empty, or with the <ref refid="classgmx_1_1Variant_1aa2baf8fcbe05d8f585cab5b2a1cb2b42" kindref="member">create()</ref> method (or the equivalent constructor, if the type parameter can be deduced and is clear to the reader from the context).</para><para>To query the type of the contents in the variant, use <ref refid="classgmx_1_1Variant_1ad9d7c5a6a7a1f1bd57d5d5ef23f8fe5a" kindref="member">isEmpty()</ref>, <ref refid="classgmx_1_1Variant_1ab383851885bae000480ee34f411b3887" kindref="member">type()</ref>, and <ref refid="classgmx_1_1Variant_1ac144674e4892355359c98c16235cdf58" kindref="member">isType()</ref>.</para><para>To access the value, you need to know the type as a compile-time constant (e.g., through branching based on <ref refid="classgmx_1_1Variant_1ac144674e4892355359c98c16235cdf58" kindref="member">isType()</ref>), and then use <ref refid="classgmx_1_1Variant_1a894d21bf2b574d049170c0b54730d48c" kindref="member">cast()</ref> or <ref refid="classgmx_1_1Variant_1a35066518b02eaaefece7e8f0cb6308f9" kindref="member">tryCast()</ref>.</para><para>Methods in this class do not throw unless otherwise indicated.</para><para>This provides essentially the same functionality as boost::any. </para>    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" line="79" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.h" bodystart="78" bodyend="250"/>
    <listofallmembers>
      <member refid="classgmx_1_1Variant_1a894d21bf2b574d049170c0b54730d48c" prot="public" virt="non-virtual"><scope>gmx::Variant</scope><name>cast</name></member>
      <member refid="classgmx_1_1Variant_1a96787967812931896390a4764aeb68a0" prot="public" virt="non-virtual"><scope>gmx::Variant</scope><name>castRef</name></member>
      <member refid="classgmx_1_1Variant_1af1452623053366457ec3b825ab8532c8" prot="private" virt="non-virtual"><scope>gmx::Variant</scope><name>cloneContent</name></member>
      <member refid="classgmx_1_1Variant_1a5cb7e08b386b87e1f2dbf31c27331e38" prot="private" virt="non-virtual"><scope>gmx::Variant</scope><name>content_</name></member>
      <member refid="classgmx_1_1Variant_1aa2baf8fcbe05d8f585cab5b2a1cb2b42" prot="public" virt="non-virtual"><scope>gmx::Variant</scope><name>create</name></member>
      <member refid="classgmx_1_1Variant_1a0aa7845d7f553644ff035456d2e17e52" prot="public" virt="non-virtual"><scope>gmx::Variant</scope><name>create</name></member>
      <member refid="classgmx_1_1Variant_1ad9d7c5a6a7a1f1bd57d5d5ef23f8fe5a" prot="public" virt="non-virtual"><scope>gmx::Variant</scope><name>isEmpty</name></member>
      <member refid="classgmx_1_1Variant_1ac144674e4892355359c98c16235cdf58" prot="public" virt="non-virtual"><scope>gmx::Variant</scope><name>isType</name></member>
      <member refid="classgmx_1_1Variant_1ac7ce6439570a93f81726236b848b517b" prot="public" virt="non-virtual"><scope>gmx::Variant</scope><name>operator=</name></member>
      <member refid="classgmx_1_1Variant_1ab0bacd97ec0b8c127fc1d4f1ee2b99be" prot="public" virt="non-virtual"><scope>gmx::Variant</scope><name>operator=</name></member>
      <member refid="classgmx_1_1Variant_1a35066518b02eaaefece7e8f0cb6308f9" prot="public" virt="non-virtual"><scope>gmx::Variant</scope><name>tryCast</name></member>
      <member refid="classgmx_1_1Variant_1abca3b4e2a7801e9e50a404342afcd756" prot="public" virt="non-virtual"><scope>gmx::Variant</scope><name>tryCastRef</name></member>
      <member refid="classgmx_1_1Variant_1ab383851885bae000480ee34f411b3887" prot="public" virt="non-virtual"><scope>gmx::Variant</scope><name>type</name></member>
      <member refid="classgmx_1_1Variant_1a0cb32b1409ccf9018de3de348333805c" prot="public" virt="non-virtual"><scope>gmx::Variant</scope><name>Variant</name></member>
      <member refid="classgmx_1_1Variant_1a710e48622ac2e6be1cbcdb3f75335954" prot="public" virt="non-virtual"><scope>gmx::Variant</scope><name>Variant</name></member>
      <member refid="classgmx_1_1Variant_1a15ab9879523bd2918e9d8c676e618126" prot="public" virt="non-virtual"><scope>gmx::Variant</scope><name>Variant</name></member>
      <member refid="classgmx_1_1Variant_1a0dd43bfdb15cb3436a73c71b695ea631" prot="public" virt="non-virtual"><scope>gmx::Variant</scope><name>Variant</name></member>
      <member refid="classgmx_1_1Variant_1a415203fde0e7fa34f451dff358bbb0b8" prot="public" virt="non-virtual"><scope>gmx::Variant</scope><name>Variant</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
