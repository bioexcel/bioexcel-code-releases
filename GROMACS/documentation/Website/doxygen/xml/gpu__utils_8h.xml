<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="gpu__utils_8h" kind="file">
    <compoundname>gpu_utils.h</compoundname>
    <includes local="no">cstdio</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes refid="gpu__macros_8h" local="yes">gromacs/gpu_utils/gpu_macros.h</includes>
    <includes refid="basedefinitions_8h" local="yes">gromacs/utility/basedefinitions.h</includes>
    <includedby refid="domdec_8cpp" local="yes">src/gromacs/domdec/domdec.cpp</includedby>
    <includedby refid="pme-gpu-types_8h" local="yes">src/gromacs/ewald/pme-gpu-types.h</includedby>
    <includedby refid="pme-gpu-internal_8cpp" local="yes">src/gromacs/ewald/pme-gpu-internal.cpp</includedby>
    <includedby refid="pmetestcommon_8cpp" local="yes">src/gromacs/ewald/tests/pmetestcommon.cpp</includedby>
    <includedby refid="testhardwarecontexts_8cpp" local="yes">src/gromacs/ewald/tests/testhardwarecontexts.cpp</includedby>
    <includedby refid="fft5d_8cpp" local="yes">src/gromacs/fft/fft5d.cpp</includedby>
    <includedby refid="gpu__utils_8cpp" local="yes">src/gromacs/gpu_utils/gpu_utils.cpp</includedby>
    <includedby refid="gpu__utils__ocl_8cpp" local="yes">src/gromacs/gpu_utils/gpu_utils_ocl.cpp</includedby>
    <includedby refid="oclutils_8cpp" local="yes">src/gromacs/gpu_utils/oclutils.cpp</includedby>
    <includedby refid="devicetransfers__ocl_8cpp" local="yes">src/gromacs/gpu_utils/tests/devicetransfers_ocl.cpp</includedby>
    <includedby refid="gputest_8cpp" local="yes">src/gromacs/gpu_utils/tests/gputest.cpp</includedby>
    <includedby refid="tests_2hostallocator_8cpp" local="yes">src/gromacs/gpu_utils/tests/hostallocator.cpp</includedby>
    <includedby refid="pinnedmemorychecker_8cpp" local="yes">src/gromacs/gpu_utils/tests/pinnedmemorychecker.cpp</includedby>
    <includedby refid="detecthardware_8cpp" local="yes">src/gromacs/hardware/detecthardware.cpp</includedby>
    <includedby refid="printhardware_8cpp" local="yes">src/gromacs/hardware/printhardware.cpp</includedby>
    <includedby refid="forcerec_8cpp" local="yes">src/gromacs/mdlib/forcerec.cpp</includedby>
    <includedby refid="nbnxn__gpu__common_8h" local="yes">src/gromacs/mdlib/nbnxn_gpu_common.h</includedby>
    <includedby refid="nbnxn__ocl__data__mgmt_8cpp" local="yes">src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl_data_mgmt.cpp</includedby>
    <includedby refid="nbnxn__ocl__jit__support_8cpp" local="yes">src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl_jit_support.cpp</includedby>
    <includedby refid="sim__util_8cpp" local="yes">src/gromacs/mdlib/sim_util.cpp</includedby>
    <includedby refid="reportgpuusage_8cpp" local="yes">src/gromacs/taskassignment/reportgpuusage.cpp</includedby>
    <includedby refid="usergpuids_8cpp" local="yes">src/gromacs/taskassignment/usergpuids.cpp</includedby>
    <includedby refid="md_8cpp" local="yes">src/programs/mdrun/md.cpp</includedby>
    <includedby refid="runner_8cpp" local="yes">src/programs/mdrun/runner.cpp</includedby>
    <includedby refid="pmetest_8cpp" local="yes">src/programs/mdrun/tests/pmetest.cpp</includedby>
    <incdepgraph>
      <node id="11958">
        <label>stdint.h</label>
      </node>
      <node id="11953">
        <label>src/gromacs/gpu_utils/gpu_utils.h</label>
        <link refid="gpu_utils.h"/>
        <childnode refid="11954" relation="include">
        </childnode>
        <childnode refid="11955" relation="include">
        </childnode>
        <childnode refid="11956" relation="include">
        </childnode>
        <childnode refid="11957" relation="include">
        </childnode>
      </node>
      <node id="11955">
        <label>string</label>
      </node>
      <node id="11954">
        <label>cstdio</label>
      </node>
      <node id="11956">
        <label>vector</label>
      </node>
      <node id="11957">
        <label>gromacs/utility/basedefinitions.h</label>
        <link refid="basedefinitions_8h"/>
        <childnode refid="11958" relation="include">
        </childnode>
        <childnode refid="11959" relation="include">
        </childnode>
      </node>
      <node id="11959">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="11980">
        <label>src/gromacs/gpu_utils/tests/gputest.cpp</label>
        <link refid="gputest_8cpp"/>
      </node>
      <node id="11966">
        <label>src/gromacs/ewald/pme-pp.cpp</label>
        <link refid="pme-pp_8cpp"/>
      </node>
      <node id="11976">
        <label>src/gromacs/gpu_utils/gpu_utils.cpp</label>
        <link refid="gpu__utils_8cpp"/>
      </node>
      <node id="11982">
        <label>src/gromacs/gpu_utils/tests/pinnedmemorychecker.cpp</label>
        <link refid="pinnedmemorychecker_8cpp"/>
      </node>
      <node id="11984">
        <label>src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl.cpp</label>
        <link refid="nbnxn__ocl_8cpp"/>
      </node>
      <node id="11973">
        <label>src/gromacs/ewald/tests/pmesolvetest.cpp</label>
        <link refid="pmesolvetest_8cpp"/>
      </node>
      <node id="11983">
        <label>src/gromacs/mdlib/nbnxn_gpu_common.h</label>
        <link refid="nbnxn__gpu__common_8h"/>
        <childnode refid="11984" relation="include">
        </childnode>
      </node>
      <node id="11969">
        <label>src/gromacs/ewald/tests/pmetestcommon.cpp</label>
        <link refid="pmetestcommon_8cpp"/>
      </node>
      <node id="11987">
        <label>src/gromacs/taskassignment/reportgpuusage.cpp</label>
        <link refid="reportgpuusage_8cpp"/>
      </node>
      <node id="11963">
        <label>src/gromacs/ewald/pme-gpu-internal.cpp</label>
        <link refid="pme-gpu-internal_8cpp"/>
      </node>
      <node id="11985">
        <label>src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl_data_mgmt.cpp</label>
        <link refid="nbnxn__ocl__data__mgmt_8cpp"/>
      </node>
      <node id="11967">
        <label>src/gromacs/ewald/pme.cpp</label>
        <link refid="pme_8cpp"/>
      </node>
      <node id="11960">
        <label>src/gromacs/gpu_utils/gpu_utils.h</label>
        <link refid="gpu_utils.h"/>
        <childnode refid="11961" relation="include">
        </childnode>
        <childnode refid="11963" relation="include">
        </childnode>
        <childnode refid="11969" relation="include">
        </childnode>
        <childnode refid="11975" relation="include">
        </childnode>
        <childnode refid="11976" relation="include">
        </childnode>
        <childnode refid="11977" relation="include">
        </childnode>
        <childnode refid="11978" relation="include">
        </childnode>
        <childnode refid="11979" relation="include">
        </childnode>
        <childnode refid="11980" relation="include">
        </childnode>
        <childnode refid="11981" relation="include">
        </childnode>
        <childnode refid="11982" relation="include">
        </childnode>
        <childnode refid="11983" relation="include">
        </childnode>
        <childnode refid="11985" relation="include">
        </childnode>
        <childnode refid="11986" relation="include">
        </childnode>
        <childnode refid="11987" relation="include">
        </childnode>
        <childnode refid="11988" relation="include">
        </childnode>
        <childnode refid="11989" relation="include">
        </childnode>
        <childnode refid="11990" relation="include">
        </childnode>
      </node>
      <node id="11979">
        <label>src/gromacs/gpu_utils/tests/devicetransfers_ocl.cpp</label>
        <link refid="devicetransfers__ocl_8cpp"/>
      </node>
      <node id="11962">
        <label>src/gromacs/ewald/pme-internal.h</label>
        <link refid="pme-internal_8h"/>
        <childnode refid="11963" relation="include">
        </childnode>
        <childnode refid="11964" relation="include">
        </childnode>
        <childnode refid="11965" relation="include">
        </childnode>
        <childnode refid="11966" relation="include">
        </childnode>
        <childnode refid="11967" relation="include">
        </childnode>
        <childnode refid="11968" relation="include">
        </childnode>
        <childnode refid="11969" relation="include">
        </childnode>
      </node>
      <node id="11968">
        <label>src/gromacs/ewald/tests/pmebsplinetest.cpp</label>
        <link refid="pmebsplinetest_8cpp"/>
      </node>
      <node id="11988">
        <label>src/gromacs/taskassignment/usergpuids.cpp</label>
        <link refid="usergpuids_8cpp"/>
      </node>
      <node id="11990">
        <label>src/programs/mdrun/tests/pmetest.cpp</label>
        <link refid="pmetest_8cpp"/>
      </node>
      <node id="11965">
        <label>src/gromacs/ewald/pme-load-balancing.cpp</label>
        <link refid="pme-load-balancing_8cpp"/>
      </node>
      <node id="11974">
        <label>src/gromacs/ewald/tests/pmesplinespreadtest.cpp</label>
        <link refid="pmesplinespreadtest_8cpp"/>
      </node>
      <node id="11970">
        <label>src/gromacs/ewald/pme-gpu-internal.h</label>
        <link refid="pme-gpu-internal_8h"/>
        <childnode refid="11963" relation="include">
        </childnode>
        <childnode refid="11964" relation="include">
        </childnode>
        <childnode refid="11967" relation="include">
        </childnode>
        <childnode refid="11971" relation="include">
        </childnode>
        <childnode refid="11969" relation="include">
        </childnode>
      </node>
      <node id="11964">
        <label>src/gromacs/ewald/pme-gpu.cpp</label>
        <link refid="pme-gpu_8cpp"/>
      </node>
      <node id="11986">
        <label>src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl_jit_support.cpp</label>
        <link refid="nbnxn__ocl__jit__support_8cpp"/>
      </node>
      <node id="11981">
        <label>src/gromacs/gpu_utils/tests/hostallocator.cpp</label>
        <link refid="tests_2hostallocator_8cpp"/>
      </node>
      <node id="11977">
        <label>src/gromacs/gpu_utils/gpu_utils_ocl.cpp</label>
        <link refid="gpu__utils__ocl_8cpp"/>
      </node>
      <node id="11972">
        <label>src/gromacs/ewald/tests/pmegathertest.cpp</label>
        <link refid="pmegathertest_8cpp"/>
      </node>
      <node id="11989">
        <label>src/programs/mdrun/runner.cpp</label>
        <link refid="runner_8cpp"/>
      </node>
      <node id="11961">
        <label>src/gromacs/ewald/pme-gpu-types.h</label>
        <link refid="pme-gpu-types_8h"/>
        <childnode refid="11962" relation="include">
        </childnode>
        <childnode refid="11970" relation="include">
        </childnode>
      </node>
      <node id="11975">
        <label>src/gromacs/ewald/tests/testhardwarecontexts.cpp</label>
        <link refid="testhardwarecontexts_8cpp"/>
      </node>
      <node id="11971">
        <label>src/gromacs/ewald/tests/pmetestcommon.h</label>
        <link refid="pmetestcommon_8h"/>
        <childnode refid="11968" relation="include">
        </childnode>
        <childnode refid="11972" relation="include">
        </childnode>
        <childnode refid="11973" relation="include">
        </childnode>
        <childnode refid="11974" relation="include">
        </childnode>
        <childnode refid="11969" relation="include">
        </childnode>
      </node>
      <node id="11978">
        <label>src/gromacs/gpu_utils/oclutils.cpp</label>
        <link refid="oclutils_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacegmx">gmx</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="gpu__utils_8h_1adc305319540d3e36bec5adedeec9645c" prot="public" static="no">
        <name>GpuApiCallBehavior</name>
        <enumvalue id="gpu__utils_8h_1adc305319540d3e36bec5adedeec9645cad8e87c0927539672f54462c837be0b7f" prot="public">
          <name>Sync</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gpu__utils_8h_1adc305319540d3e36bec5adedeec9645ca24aa4117da86c41684ad25742832dfa6" prot="public">
          <name>Async</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum which is only used to describe transfer calls at the moment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="66" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="enum" id="gpu__utils_8h_1aab3d31c4bd3fcb89aa5d554b125b403e" prot="public" static="no">
        <name>GpuTaskCompletion</name>
        <enumvalue id="gpu__utils_8h_1aab3d31c4bd3fcb89aa5d554b125b403ea0f68101772bd5397ef8eb1b632798652" prot="public">
          <name>Wait</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gpu__utils_8h_1aab3d31c4bd3fcb89aa5d554b125b403ea060bf2d587991d8f090a1309b285291c" prot="public">
          <name>Check</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of actions associated to waiting or checking the completion of GPU tasks. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="73" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" bodystart="72" bodyend="76"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="gpu__utils_8h_1a4a5340aac0cf9145eaae8a5ac5d6b0dc" prot="public" static="no">
        <type>void</type>
        <definition>typedef void gmx_host_alloc_t(void **ptr, size_t nbytes)</definition>
        <argsstring>(void **ptr, size_t nbytes)</argsstring>
        <name>gmx_host_alloc_t</name>
        <briefdescription>
<para>Returns a pointer *ptr to page-locked memory of size nbytes. </para>        </briefdescription>
        <detaileddescription>
<para>The allocated memory is suitable to be used for data transfers between host and GPU. Error handling should be done within this function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="225" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gpu__utils_8h_1aff7e0f62ae0592b0aefadcf9071d0435" prot="public" static="no">
        <type>void</type>
        <definition>typedef void gmx_host_free_t(void *ptr)</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>gmx_host_free_t</name>
        <briefdescription>
<para>Frees page-locked memory pointed to by *ptr. </para>        </briefdescription>
        <detaileddescription>
<para>NULL should not be passed to this function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="231" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gpu__utils_8h_1a0e5655da488ed8af048ead6b840f746b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool canDetectGpus</definition>
        <argsstring>(std::string *errorMessage)</argsstring>
        <name>canDetectGpus</name>
        <param>
          <type>std::string *</type>
          <declname>errorMessage</declname>
        </param>
        <briefdescription>
<para>Return whether GPUs can be detected. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true when this is a build of GROMACS configured to support GPU usage, and a valid device driver, ICD, and/or runtime was detected.</para><para>This function is not intended to be called from build configurations that do not support GPUs, and there will be no descriptive message in that case.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">errorMessage</parametername>
</parameternamelist>
<parameterdescription>
<para>When returning false on a build configured with GPU support and non-nullptr was passed, the string contains a descriptive message about why GPUs cannot be detected.</para></parameterdescription>
</parameteritem>
</parameterlist>
Does not throw.</para><para>Return whether GPUs can be detected. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="94" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="154" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils_8h_1a230bceb7222795e5412e20c7fad240b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void findGpus</definition>
        <argsstring>(struct gmx_gpu_info_t *gpu_info)</argsstring>
        <name>findGpus</name>
        <param>
          <type>struct <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> *</type>
          <declname>gpu_info</declname>
        </param>
        <briefdescription>
<para>Find all GPUs in the system. </para>        </briefdescription>
        <detaileddescription>
<para>Will detect every GPU supported by the device driver in use. Must only be called if <ref refid="gpu__utils_8h_1a0e5655da488ed8af048ead6b840f746b" kindref="member">canDetectGpus()</ref> has returned true. This routine also checks for the compatibility of each and fill the gpu_info-&gt;gpu_dev array with the required information on each the device: ID, device properties, status.</para><para>Note that this function leaves the GPU runtime API error state clean; this is implemented ATM in the CUDA flavor. TODO: check if errors do propagate in OpenCL as they do in CUDA and whether there is a mechanism to &quot;clear&quot; them.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">gpu_info</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to structure holding GPU information.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>InternalError</parametername>
</parameternamelist>
<parameterdescription>
<para>if a GPU API returns an unexpected failure (because the call to <ref refid="gpu__utils_8h_1a0e5655da488ed8af048ead6b840f746b" kindref="member">canDetectGpus()</ref> should always prevent this occuring)</para></parameterdescription>
</parameteritem>
</parameterlist>
Find all GPUs in the system. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="115" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="182" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils_8h_1a2bc16b56a441046ce9ebaa9f402875d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; getCompatibleGpus</definition>
        <argsstring>(const gmx_gpu_info_t &amp;gpu_info)</argsstring>
        <name>getCompatibleGpus</name>
        <param>
          <type>const <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> &amp;</type>
          <declname>gpu_info</declname>
        </param>
        <briefdescription>
<para>Return a container of the detected GPUs that are compatible. </para>        </briefdescription>
        <detaileddescription>
<para>This function filters the result of the detection for compatible GPUs, based on the previously run compatibility tests.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">gpu_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Information detected about GPUs, including compatibility. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vector of IDs of GPUs already recorded as compatible</para></simplesect>
Return a container of the detected GPUs that are compatible. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="124" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.cpp" bodystart="59" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils_8h_1a803acba7fe33d56059490710cd092f6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* getGpuCompatibilityDescription</definition>
        <argsstring>(const gmx_gpu_info_t &amp;gpu_info, int index)</argsstring>
        <name>getGpuCompatibilityDescription</name>
        <param>
          <type>const <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> &amp;</type>
          <declname>gpu_info</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return a string describing how compatible the GPU with given <computeroutput>index</computeroutput> is. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">gpu_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Information about detected GPUs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of GPU to ask about </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A null-terminated C string describing the compatibility status, useful for error messages.</para></simplesect>
Return a string describing how compatible the GPU with given <computeroutput>index</computeroutput> is. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="132" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.cpp" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils_8h_1aca84b5cc77147071ae8504cfd6193ad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_gpu_info</definition>
        <argsstring>(const struct gmx_gpu_info_t *gpu_info)</argsstring>
        <name>free_gpu_info</name>
        <param>
          <type>const struct <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> *</type>
          <declname>gpu_info</declname>
        </param>
        <briefdescription>
<para>Frees the gpu_dev and dev_use array fields of <computeroutput>gpu_info</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">gpu_info</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to structure holding GPU information </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils_8h_1aa93da9291223566f4f0fb6ea4bcfb4e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_gpu</definition>
        <argsstring>(const gmx::MDLogger &amp;mdlog, gmx_device_info_t *deviceInfo)</argsstring>
        <name>init_gpu</name>
        <param>
          <type>const <ref refid="classgmx_1_1MDLogger" kindref="compound">gmx::MDLogger</ref> &amp;</type>
          <declname>mdlog</declname>
        </param>
        <param>
          <type><ref refid="structgmx__device__info__t" kindref="compound">gmx_device_info_t</ref> *</type>
          <declname>deviceInfo</declname>
        </param>
        <briefdescription>
<para>Initializes the GPU described by <computeroutput>deviceInfo</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>TODO Doxygen complains about these - probably a Doxygen bug, since the patterns here are the same as elsewhere in this header.</para><para>param[in] mdlog log file to write to <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">deviceInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>device info of the GPU to initialize</para></parameterdescription>
</parameteritem>
</parameterlist>
Issues a fatal error for any critical errors that occur during initialization.</para><para>Initializes the GPU described by <computeroutput>deviceInfo</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="154" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="419" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils_8h_1a580cb1657b3272778f0ff881e7e30ac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_gpu</definition>
        <argsstring>(const gmx_device_info_t *deviceInfo)</argsstring>
        <name>free_gpu</name>
        <param>
          <type>const <ref refid="structgmx__device__info__t" kindref="compound">gmx_device_info_t</ref> *</type>
          <declname>deviceInfo</declname>
        </param>
        <briefdescription>
<para>Frees up the CUDA GPU used by the active context at the time of calling. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>deviceInfo</computeroutput> is nullptr, then it is understood that no device was selected so no context is active to be freed. Otherwise, the context is explicitly destroyed and therefore all data uploaded to the GPU is lost. This must only be called when none of this data is required anymore, because subsequent attempts to free memory associated with the context will otherwise fail.</para><para>Calls gmx_warning upon errors.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">deviceInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>device info of the GPU to clean up for</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if no error occurs during the freeing. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils_8h_1aed4287f67e5c2d2c46a585c34146f634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgmx__device__info__t" kindref="compound">gmx_device_info_t</ref> *</type>
        <definition>gmx_device_info_t* getDeviceInfo</definition>
        <argsstring>(const gmx_gpu_info_t &amp;gpu_info, int deviceId)</argsstring>
        <name>getDeviceInfo</name>
        <param>
          <type>const <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> &amp;</type>
          <declname>gpu_info</declname>
        </param>
        <param>
          <type>int</type>
          <declname>deviceId</declname>
        </param>
        <briefdescription>
<para>Return a pointer to the device info for <computeroutput>deviceId</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">gpu_info</parametername>
</parameternamelist>
<parameterdescription>
<para>GPU info of all detected devices in the system. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">deviceId</parametername>
</parameternamelist>
<parameterdescription>
<para>ID for the GPU device requested.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the device info for <computeroutput>deviceId</computeroutput>.</para></simplesect>
Return a pointer to the device info for <computeroutput>deviceId</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="183" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="443" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils_8h_1aefeb87fd57039f9d5dd877d6f2caf857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_current_cuda_gpu_device_id</definition>
        <argsstring>(void)</argsstring>
        <name>get_current_cuda_gpu_device_id</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the device ID of the CUDA GPU currently in use. </para>        </briefdescription>
        <detaileddescription>
<para>The GPU used is the one that is active at the time of the call in the active context.</para><para><simplesect kind="return"><para>device ID of the GPU in use at the time of the call </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils_8h_1ae2af951ecf915d1c240ccdfae64abebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void get_gpu_device_info_string</definition>
        <argsstring>(char *s, const struct gmx_gpu_info_t &amp;gpu_info, int index)</argsstring>
        <name>get_gpu_device_info_string</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const struct <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> &amp;</type>
          <declname>gpu_info</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Formats and returns a device information string for a given GPU. </para>        </briefdescription>
        <detaileddescription>
<para>Given an index <emphasis>directly</emphasis> into the array of available GPUs (gpu_dev) returns a formatted info string for the respective GPU which includes ID, name, compute capability, and detection status.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">s</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to output string (has to be allocated externally) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">gpu_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Information about detected GPUs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>an index <emphasis>directly</emphasis> into the array of available GPUs </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils_8h_1ac368c4a971290513fbabe74a0c80b716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sizeof_gpu_dev_info</definition>
        <argsstring>(void)</argsstring>
        <name>sizeof_gpu_dev_info</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the size of the gpu_dev_info struct. </para>        </briefdescription>
        <detaileddescription>
<para>The size of gpu_dev_info can be used for allocation and communication.</para><para><simplesect kind="return"><para>size in bytes of gpu_dev_info</para></simplesect>
Returns the size of the gpu_dev_info struct. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="217" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="454" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils_8h_1ab791918a19cd4aefc96a099f27f0ca1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gpu_set_host_malloc_and_free</definition>
        <argsstring>(bool bUseGpuKernels, gmx_host_alloc_t **nb_alloc, gmx_host_free_t **nb_free)</argsstring>
        <name>gpu_set_host_malloc_and_free</name>
        <param>
          <type>bool</type>
          <declname>bUseGpuKernels</declname>
        </param>
        <param>
          <type><ref refid="gpu__utils_8h_1a4a5340aac0cf9145eaae8a5ac5d6b0dc" kindref="member">gmx_host_alloc_t</ref> **</type>
          <declname>nb_alloc</declname>
        </param>
        <param>
          <type><ref refid="gpu__utils_8h_1aff7e0f62ae0592b0aefadcf9071d0435" kindref="member">gmx_host_free_t</ref> **</type>
          <declname>nb_free</declname>
        </param>
        <briefdescription>
<para>Set page-locked memory allocation functions used by the GPU host. </para>        </briefdescription>
        <detaileddescription>
<para>Set page-locked memory allocation functions used by the GPU host.</para><para>Since GPU support is not configured, there is no host memory to allocate. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="234" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.cpp" bodystart="50" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils_8h_1a4a7aa4fffbbd8a56589d49b25021f268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void startGpuProfiler</definition>
        <argsstring>(void)</argsstring>
        <name>startGpuProfiler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Starts the GPU profiler if mdrun is being profiled. </para>        </briefdescription>
        <detaileddescription>
<para>When a profiler run is in progress (based on the presence of the NVPROF_ID env. var.), the profiler is started to begin collecting data during the rest of the run (or until stopGpuProfiler is called).</para><para>Note that this is implemented only for the CUDA API. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils_8h_1a437ab09a563614df382d80d53f662b4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resetGpuProfiler</definition>
        <argsstring>(void)</argsstring>
        <name>resetGpuProfiler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Resets the GPU profiler if mdrun is being profiled. </para>        </briefdescription>
        <detaileddescription>
<para>When a profiler run is in progress (based on the presence of the NVPROF_ID env. var.), the profiler data is restet in order to eliminate the data collected from the preceding part fo the run.</para><para>This function should typically be called at the mdrun counter reset time.</para><para>Note that this is implemented only for the CUDA API. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils_8h_1a49e144aebbc0f0af255f1b49c67d598b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stopGpuProfiler</definition>
        <argsstring>(void)</argsstring>
        <name>stopGpuProfiler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Stops the CUDA profiler if mdrun is being profiled. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be called at cleanup when skipping recording recording subsequent API calls from being traces/profiled is desired, e.g. before uninitialization.</para><para>Note that this is implemented only for the CUDA API. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils_8h_1a3ad85325fbd79893355ccc0f7d111511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isHostMemoryPinned</definition>
        <argsstring>(void *h_ptr)</argsstring>
        <name>isHostMemoryPinned</name>
        <param>
          <type>void *</type>
          <declname>h_ptr</declname>
        </param>
        <briefdescription>
<para>Tells whether the host buffer was pinned for non-blocking transfers. Only implemented for CUDA. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h" line="279" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Declare functions for detection and initialization for GPU devices. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal />  <simplesect kind="author"><para>Szilard Pall <ulink url="mailto:pall.szilard@gmail.com">pall.szilard@gmail.com</ulink> </para><simplesectsep/><para>Mark Abraham <ulink url="mailto:mark.j.abraham@gmail.com">mark.j.abraham@gmail.com</ulink> </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/gpu_utils.h"/>
  </compounddef>
</doxygen>
