<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage" kind="class" prot="public">
    <compoundname>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</compoundname>
    <basecompoundref refid="classgmx_1_1OptionStorageTemplate" prot="public" virt="non-virtual">gmx::OptionStorageTemplate&lt; std::string &gt;</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage_1ac85f7f10f37ab156e863cb8344d7132b" prot="private" static="no" mutable="no">
        <type><ref refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionInfo" kindref="compound">MockOptionInfo</ref></type>
        <definition>MockOptionInfo anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage::info_</definition>
        <argsstring></argsstring>
        <name>info_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" line="129" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage_1acdaf1f476b700987278d2ecce68c7a8e" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage::MockOptionStorage</definition>
        <argsstring>(const MockOption &amp;settings)</argsstring>
        <name>MockOptionStorage</name>
        <param>
          <type>const <ref refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOption" kindref="compound">MockOption</ref> &amp;</type>
          <declname>settings</declname>
        </param>
        <briefdescription>
<para>Initializes the storage from option settings. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">settings</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage settings. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" line="93" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" bodystart="157" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage_1a75bce81df92f4d59bb75ea137c31c461" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage::addDummyValue</definition>
        <argsstring>()</argsstring>
        <name>addDummyValue</name>
        <briefdescription>
<para>Calls addValue(&quot;dummy&quot;) in the base class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" line="98" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage_1a9ac6e53ba7d30ba504306d7aa9c2f126" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classgmx_1_1OptionInfo" kindref="compound">gmx::OptionInfo</ref> &amp;</type>
        <definition>virtual gmx::OptionInfo&amp; anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage::optionInfo</definition>
        <argsstring>()</argsstring>
        <name>optionInfo</name>
        <reimplements refid="classgmx_1_1AbstractOptionStorage_1a43e2b0b2040bba6ffb81ad242bcf0bf8">optionInfo</reimplements>
        <briefdescription>
<para>Returns an option info object corresponding to this option. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" line="106" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage_1aa063801d4356733b0c68fa40ff2f6085" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage::typeString</definition>
        <argsstring>() const </argsstring>
        <name>typeString</name>
        <reimplements refid="classgmx_1_1OptionStorageTemplate_1a9d0a3cd45d156c6dbfff5f2018a36fe6">typeString</reimplements>
        <briefdescription>
<para>Returns a short string describing the type of the option. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" line="108" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage_1a17ed4b17ce83553134cec5e81f652581" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage::formatSingleValue</definition>
        <argsstring>(const std::string &amp;) const </argsstring>
        <name>formatSingleValue</name>
        <reimplements refid="classgmx_1_1OptionStorageTemplate_1aba54f7d43ae5ec873428ba0d56b39b06">formatSingleValue</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Formats a single value as a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to format. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>value</computeroutput> formatted as a string.</para></simplesect>
The derived class must provide this method to format values a strings. Called by <ref refid="classgmx_1_1OptionStorageTemplate_1ad47163263cfe8acb85cfcf763139e5fe" kindref="member">defaultValuesAsStrings()</ref> to do the actual formatting. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" line="109" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage_1aecba41f8b39782eb2dd569e8a481f2fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; <ref refid="classgmx_1_1Variant" kindref="compound">gmx::Variant</ref> &gt;</type>
        <definition>virtual std::vector&lt;gmx::Variant&gt; anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage::normalizeValues</definition>
        <argsstring>(const std::vector&lt; gmx::Variant &gt; &amp;values) const </argsstring>
        <name>normalizeValues</name>
        <reimplements refid="classgmx_1_1AbstractOptionStorage_1ab7f1e2b861c96573c688ff2502e8da9e">normalizeValues</reimplements>
        <param>
          <type>const std::vector&lt; <ref refid="classgmx_1_1Variant" kindref="compound">gmx::Variant</ref> &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" line="114" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage_1a17ab111315da089cd31d362212d52786" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage::convertValue</definition>
        <argsstring>(const gmx::Variant &amp;value)</argsstring>
        <name>convertValue</name>
        <reimplements refid="classgmx_1_1OptionStorageTemplate_1a781256ddbeeb5c7c62ac9016eb5182b8">convertValue</reimplements>
        <param>
          <type>const <ref refid="classgmx_1_1Variant" kindref="compound">gmx::Variant</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Adds a new value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to convert. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>InvalidInputError</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>value</computeroutput> is not valid for this option or if there have been too many values in the set.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method may be called multiple times if the underlying option is defined to accept multiple values.</para><para><simplesect kind="see"><para>OptionStorageTemplate::convertValue()</para></simplesect>
Derived classes should call <ref refid="classgmx_1_1OptionStorageTemplate_1ad7a265c0033a0c97e2dbead4f19a1735" kindref="member">addValue()</ref> after they have converted <computeroutput>value</computeroutput> to the storage type. It is allowed to call <ref refid="classgmx_1_1OptionStorageTemplate_1ad7a265c0033a0c97e2dbead4f19a1735" kindref="member">addValue()</ref> more than once, or not at all. OptionsAssigner::appendValue() provides the same exception safety guarantee as this method, so it should be considered whether the implementation can be made strongly exception safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" line="119" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" bodystart="119" bodyend="122"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Mock implementation of an option storage class for unit testing. </para>    </briefdescription>
    <detaileddescription>
<para>Provides facilities for checking that correct methods are called, and for controlling how they add values using the base class methods. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="15">
        <label>gmx::OptionStorageTemplate&lt; std::string &gt;</label>
        <link refid="classgmx_1_1OptionStorageTemplate"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</label>
        <link refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>gmx::AbstractOptionStorage</label>
        <link refid="classgmx_1_1AbstractOptionStorage"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="18">
        <label>gmx::OptionStorageTemplate&lt; std::string &gt;</label>
        <link refid="classgmx_1_1OptionStorageTemplate"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</label>
        <link refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>gmx::AbstractOptionStorage</label>
        <link refid="classgmx_1_1AbstractOptionStorage"/>
      </node>
    </collaborationgraph>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" line="86" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/tests/abstractoptionstorage.cpp" bodystart="85" bodyend="130"/>
    <listofallmembers>
      <member refid="classgmx_1_1AbstractOptionStorage_1ae18c52f54905be1e947047e514f1ca2b" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>AbstractOptionStorage</name></member>
      <member refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage_1a75bce81df92f4d59bb75ea137c31c461" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>addDummyValue</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1ad7a265c0033a0c97e2dbead4f19a1735" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>addValue</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1a307e0d14ff9adb99f6dadcb0c321e18b" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>appendValue</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1a4d6e0188ddb4972078e16beffb0f697a" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>clearFlag</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1a96507a21540785ce55c5dc0777a9c7e7" prot="protected" virt="virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>clearSet</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1a5cc8b970a7922f99e2a24eef2433a00c" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>commitValues</name></member>
      <member refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage_1a17ab111315da089cd31d362212d52786" prot="public" virt="virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>convertValue</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1a7bbdfb210f9e7c61225fa6495732370f" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>defaultValueIfSetExists</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1a84d200d7c81d0ffc423461331cdcf6bb" prot="public" virt="virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>defaultValues</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1ad47163263cfe8acb85cfcf763139e5fe" prot="public" virt="virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>defaultValuesAsStrings</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1a3c502d185cd3b3e862fda1465478e0e0" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>description</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1ac0ddac0898462d8aae5d55d5c2919963" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>finish</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1a2ea3148553e7b8da30b9b50f17f89a94" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>finishSet</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1adaa5310b634232d6c73f97d8d5ec4a57" prot="public" virt="virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>formatExtraDescription</name></member>
      <member refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage_1a17ed4b17ce83553134cec5e81f652581" prot="public" virt="virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>formatSingleValue</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1a432d25fcf4ff2079b3fee2acba70cb9a" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>hasFlag</name></member>
      <member refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage_1ac85f7f10f37ab156e863cb8344d7132b" prot="private" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>info_</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1a29d58d7ea9051fed055bbfb1ba307439" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>isBoolean</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1a88331502f27fa03f609650322045adaf" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>isHidden</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1a01bfa2e153b5733b9930de8344057583" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>isRequired</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1ad2097f0f1c88c6e5549193559287fd45" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>isSet</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1af4f2db7255ecdd4633a7a9fafb508081" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>isVector</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1af02f972186bba8ff52f0e789e7d6fedc" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>markAsSet</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1a49d1050263094d215b032f2cc45d4bf2" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>maxValueCount</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1a4b83a1075a05cf7724929d9a327c19d9" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>minValueCount</name></member>
      <member refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage_1acdaf1f476b700987278d2ecce68c7a8e" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>MockOptionStorage</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1a331a2ea6e35627d2aef4ff1409492167" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>MyBase</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1ab5f49905072b9517a755e2c6ee136365" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>name</name></member>
      <member refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage_1aecba41f8b39782eb2dd569e8a481f2fa" prot="public" virt="virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>normalizeValues</name></member>
      <member refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage_1a9ac6e53ba7d30ba504306d7aa9c2f126" prot="public" virt="virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>optionInfo</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1a979a7a8f2176df65f7ba26e52e67da6e" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>OptionStorageTemplate</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1a141155fc18064e65d14e23f2c26f8b6e" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>OptionStorageTemplate</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1a51614d345954174fcd417bf76de828e8" prot="protected" virt="virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>processAll</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1a72cf6c7884e6e23e6f71b8dc2dbede40" prot="protected" virt="virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>processSet</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1ac2087a4d9de673881807396fe394319c" prot="protected" virt="virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>processSetValues</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1a28ff31e0d6b783b725ad306bc370b73b" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>setDefaultValue</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1a36bc6c3a3061abef502856d64799d1dc" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>setDefaultValueIfSet</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1afc92ddb8a068df8a4964377fc3aad290" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>setFlag</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1ab2f4d5f2d169e80a0edcb51cfe180eb4" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>setMaxValueCount</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1a294172ec6d7594bec65903874d0b828a" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>setMinValueCount</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1a18f2d143bce5bfabfee3f4ccc8c7a9d2" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>startSet</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1ade91fa23f548325aa893ad4d179439fd" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>startSource</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1a2f98761b584b2a465d4858c7ef412534" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>StorePointer</name></member>
      <member refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage_1aa063801d4356733b0c68fa40ff2f6085" prot="public" virt="virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>typeString</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1ae63cf6e91d4d1cb3e8cbe4de35058604" prot="public" virt="virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>valueCount</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1a58cbf66d644a4d22384f1dab5e6eaa5f" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>ValueList</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1a0b1074102bef8344bca1a8e1fb37ffda" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>values</name></member>
      <member refid="classgmx_1_1OptionStorageTemplate_1a9b077c31ec271657c25b5f81589e9fa2" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>values</name></member>
      <member refid="classgmx_1_1AbstractOptionStorage_1a8f862e78ff3e20ae51922db42f5f110b" prot="public" virt="virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</scope><name>~AbstractOptionStorage</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
