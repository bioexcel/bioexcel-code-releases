<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1test_1_1EnergyFrameReader" kind="class" prot="public">
    <compoundname>gmx::test::EnergyFrameReader</compoundname>
    <includes local="no">programs/mdrun/tests/energyreader.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgmx_1_1test_1_1EnergyFrameReader_1ad0688d3033b975f1506455cb348594f4" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, int &gt;</type>
        <definition>std::map&lt;std::string, int&gt; gmx::test::EnergyFrameReader::indicesOfEnergyFields_</definition>
        <argsstring></argsstring>
        <name>indicesOfEnergyFields_</name>
        <briefdescription>
<para>Convert energy field name to its index within a <ref refid="structt__enxframe" kindref="compound">t_enxframe</ref> from this file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.h" line="139" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1test_1_1EnergyFrameReader_1af16dfd76778fa0c459b8f2fce3e512b3" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespacegmx_1_1test_1a0cf2e1e7224ea64c7762046eb635aaf7" kindref="member">ener_file_ptr</ref></type>
        <definition>const ener_file_ptr gmx::test::EnergyFrameReader::energyFileGuard_</definition>
        <argsstring></argsstring>
        <name>energyFileGuard_</name>
        <briefdescription>
<para>Owning handle of an open energy file ready to read frames. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.h" line="141" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1test_1_1EnergyFrameReader_1a092e83fa9e343679df5f67889849e375" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespacegmx_1_1test_1a7bf1e5c3b54dbe80eda1f2b355f3bf06" kindref="member">enxframe_ptr</ref></type>
        <definition>const enxframe_ptr gmx::test::EnergyFrameReader::enxframeGuard_</definition>
        <argsstring></argsstring>
        <name>enxframeGuard_</name>
        <briefdescription>
<para>Owning handle of contents of .edr file frame after reading. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.h" line="143" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1test_1_1EnergyFrameReader_1a3f58708d58b310d99c4fa0dabd30415e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gmx::test::EnergyFrameReader::haveProbedForNextFrame_</definition>
        <argsstring></argsstring>
        <name>haveProbedForNextFrame_</name>
        <briefdescription>
<para>Whether the API has been used properly (ie. probe before reading). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.h" line="145" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1test_1_1EnergyFrameReader_1ad4b47c16815270044f725c94897643a0" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gmx::test::EnergyFrameReader::nextFrameExists_</definition>
        <argsstring></argsstring>
        <name>nextFrameExists_</name>
        <briefdescription>
<para>Whether there has been a probe that found a next frame. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.h" line="147" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1test_1_1EnergyFrameReader_1a518629ed972ceaf34296efab0fa3876e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::test::EnergyFrameReader::readNextFrame</definition>
        <argsstring>()</argsstring>
        <name>readNextFrame</name>
        <briefdescription>
<para>Attempt to read the next frame from the energy file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether a frame was available to read.</para></simplesect>
If true is returned, then <ref refid="classgmx_1_1test_1_1EnergyFrameReader_1ac4d6d4fc361e4f4b4bcc3fa9526f04a9" kindref="member">frame()</ref> should be called to get access to the data. If false is returned, then no further data exists and no further call to <ref refid="classgmx_1_1test_1_1EnergyFrameReader_1a518629ed972ceaf34296efab0fa3876e" kindref="member">readNextFrame()</ref> or <ref refid="classgmx_1_1test_1_1EnergyFrameReader_1ac4d6d4fc361e4f4b4bcc3fa9526f04a9" kindref="member">frame()</ref> should occur.</para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1APIError" kindref="compound">APIError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if an earlier probe has not been properly handled (by calling <ref refid="classgmx_1_1test_1_1EnergyFrameReader_1ac4d6d4fc361e4f4b4bcc3fa9526f04a9" kindref="member">frame()</ref>, or stopping trying to read from the file). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.h" line="118" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.cpp" bodystart="156" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1EnergyFrameReader_1ac4d6d4fc361e4f4b4bcc3fa9526f04a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1test_1_1EnergyFrame" kindref="compound">EnergyFrame</ref></type>
        <definition>EnergyFrame gmx::test::EnergyFrameReader::frame</definition>
        <argsstring>()</argsstring>
        <name>frame</name>
        <briefdescription>
<para>Make an <ref refid="classgmx_1_1test_1_1EnergyFrame" kindref="compound">EnergyFrame</ref> from the contents of the next frame in the energy file. </para>        </briefdescription>
        <detaileddescription>
<para>If the next frame has not been probed for, then probe for it. If no next frame exists, then throw <ref refid="classgmx_1_1APIError" kindref="compound">APIError</ref>, because user code should have called <ref refid="classgmx_1_1test_1_1EnergyFrameReader_1a518629ed972ceaf34296efab0fa3876e" kindref="member">readNextFrame()</ref> itself if this is possible. (This permits user code to avoid making calls to <ref refid="classgmx_1_1test_1_1EnergyFrameReader_1a518629ed972ceaf34296efab0fa3876e" kindref="member">readNextFrame()</ref> in a case where it already knows that the frame exists.)</para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1APIError" kindref="compound">APIError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if no next frame exists. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>when out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.h" line="130" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.cpp" bodystart="175" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1EnergyFrameReader_1a754b00ef3e865ce043624c01c6f91423" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::test::EnergyFrameReader::EnergyFrameReader</definition>
        <argsstring>(const std::map&lt; std::string, int &gt; &amp;indicesOfEnergyFields, ener_file *energyFile)</argsstring>
        <name>EnergyFrameReader</name>
        <param>
          <type>const std::map&lt; std::string, int &gt; &amp;</type>
          <declname>indicesOfEnergyFields</declname>
        </param>
        <param>
          <type><ref refid="structener__file" kindref="compound">ener_file</ref> *</type>
          <declname>energyFile</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">indicesOfEnergyFields</parametername>
</parameternamelist>
<parameterdescription>
<para>Looks up energy fields by name to get the index into a <ref refid="structt__enxframe" kindref="compound">t_enxframe</ref> structure read by the legacy API. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">energyFile</parametername>
</parameternamelist>
<parameterdescription>
<para>Open energy file object to manage, and from which to read frames </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.h" line="135" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.cpp" bodystart="145" bodyend="153"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Manages returning an <ref refid="classgmx_1_1test_1_1EnergyFrame" kindref="compound">EnergyFrame</ref> containing required energy field values read from successive frames of an .edr file. </para>    </briefdescription>
    <detaileddescription>
<internal></internal>
    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.h" line="104" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/programs/mdrun/tests/energyreader.h" bodystart="103" bodyend="151"/>
    <listofallmembers>
      <member refid="classgmx_1_1test_1_1EnergyFrameReader_1af16dfd76778fa0c459b8f2fce3e512b3" prot="private" virt="non-virtual"><scope>gmx::test::EnergyFrameReader</scope><name>energyFileGuard_</name></member>
      <member refid="classgmx_1_1test_1_1EnergyFrameReader_1a754b00ef3e865ce043624c01c6f91423" prot="public" virt="non-virtual"><scope>gmx::test::EnergyFrameReader</scope><name>EnergyFrameReader</name></member>
      <member refid="classgmx_1_1test_1_1EnergyFrameReader_1a092e83fa9e343679df5f67889849e375" prot="private" virt="non-virtual"><scope>gmx::test::EnergyFrameReader</scope><name>enxframeGuard_</name></member>
      <member refid="classgmx_1_1test_1_1EnergyFrameReader_1ac4d6d4fc361e4f4b4bcc3fa9526f04a9" prot="public" virt="non-virtual"><scope>gmx::test::EnergyFrameReader</scope><name>frame</name></member>
      <member refid="classgmx_1_1test_1_1EnergyFrameReader_1a3f58708d58b310d99c4fa0dabd30415e" prot="private" virt="non-virtual"><scope>gmx::test::EnergyFrameReader</scope><name>haveProbedForNextFrame_</name></member>
      <member refid="classgmx_1_1test_1_1EnergyFrameReader_1ad0688d3033b975f1506455cb348594f4" prot="private" virt="non-virtual"><scope>gmx::test::EnergyFrameReader</scope><name>indicesOfEnergyFields_</name></member>
      <member refid="classgmx_1_1test_1_1EnergyFrameReader_1ad4b47c16815270044f725c94897643a0" prot="private" virt="non-virtual"><scope>gmx::test::EnergyFrameReader</scope><name>nextFrameExists_</name></member>
      <member refid="classgmx_1_1test_1_1EnergyFrameReader_1a518629ed972ceaf34296efab0fa3876e" prot="public" virt="non-virtual"><scope>gmx::test::EnergyFrameReader</scope><name>readNextFrame</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
