<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="namespaceanonymous__namespace_02basicoptions_8cpp_03" kind="namespace">
    <compoundname>anonymous_namespace{basicoptions.cpp}</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__module__options_1ga1f658c04b8319b831b5abe8e381dc13f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void anonymous_namespace{basicoptions.cpp}::expandVector</definition>
        <argsstring>(size_t length, std::vector&lt; ValueType &gt; *values)</argsstring>
        <name>expandVector</name>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>std::vector&lt; ValueType &gt; *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Expands a single value to a vector by copying the value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of values to process. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the resulting vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">values</parametername>
</parameternamelist>
<parameterdescription>
<para>Values to process. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InvalidInputError</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>values</computeroutput> has an invalid number of values.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>values</computeroutput> should have 0, 1, or <computeroutput>length</computeroutput> values. If <computeroutput>values</computeroutput> has 1 value, it is expanded such that it has <computeroutput>length</computeroutput> identical values. In other valid cases, nothing is done. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/basicoptions.cpp" line="81" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/basicoptions.cpp" bodystart="81" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="group__module__options_1ga1e85ff6ce9288d3902e6002f10db35c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;::const_iterator</type>
        <definition>std::vector&lt;std::string&gt;::const_iterator anonymous_namespace{basicoptions.cpp}::findEnumValue</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;allowedValues, const std::string &amp;value)</argsstring>
        <name>findEnumValue</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>allowedValues</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Finds an enumerated value from the list of allowed values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">allowedValues</parametername>
</parameternamelist>
<parameterdescription>
<para>List of allowed values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1InvalidInputError" kindref="compound">gmx::InvalidInputError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>value</computeroutput> does not match anything in <computeroutput>allowedValues</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator to the found value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/basicoptions.cpp" line="107" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/basicoptions.cpp" bodystart="107" bodyend="128"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/options/basicoptions.cpp" line="63" column="1"/>
  </compounddef>
</doxygen>
