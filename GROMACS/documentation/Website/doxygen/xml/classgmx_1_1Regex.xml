<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1Regex" kind="class" prot="public">
    <compoundname>gmx::Regex</compoundname>
    <includes local="no">gromacs/utility/gmxregex.h</includes>
    <innerclass refid="classgmx_1_1Regex_1_1Impl" prot="public">gmx::Regex::Impl</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgmx_1_1Regex_1a4128daba0cdf678a275c984710f1c852" prot="private" static="no" mutable="no">
        <type><ref refid="classgmx_1_1PrivateImplPointer" kindref="compound">PrivateImplPointer</ref>&lt; <ref refid="classgmx_1_1Regex_1_1Impl" kindref="compound">Impl</ref> &gt;</type>
        <definition>PrivateImplPointer&lt;Impl&gt; gmx::Regex::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.h" line="130" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgmx_1_1Regex_1a8631a2c8ba02730ceeceebd962f1ea5f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::Regex::isSupported</definition>
        <argsstring>()</argsstring>
        <name>isSupported</name>
        <briefdescription>
<para>Returns true if regular expression support has been compiled in. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.h" line="102" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.cpp" bodystart="63" bodyend="70"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1Regex_1a4fb5b68795043284d52c36ee5249d540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::Regex::Regex</definition>
        <argsstring>()</argsstring>
        <name>Regex</name>
        <briefdescription>
<para>Constructs a regular expression that matches nothing. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.h" line="109" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.cpp" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Regex_1aceab26e90155f03d222ce104b5243cc6" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::Regex::Regex</definition>
        <argsstring>(const char *value)</argsstring>
        <name>Regex</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs a regular expression from a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>String to compile into a regular expression. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1InvalidInputError" kindref="compound">InvalidInputError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>value</computeroutput> is not a valid regular expression.</para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="todo_1_todo000101"><xreftitle>Todo</xreftitle><xrefdescription><para>Consider whether some other exception type would be better. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.h" line="121" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.cpp" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Regex_1acc5fb18ca03468f8be27bef76b9fb8c4" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::Regex::Regex</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>Regex</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs a regular expression from a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>String to compile into a regular expression. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1InvalidInputError" kindref="compound">InvalidInputError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>value</computeroutput> is not a valid regular expression.</para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="todo_1_todo000101"><xreftitle>Todo</xreftitle><xrefdescription><para>Consider whether some other exception type would be better. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.h" line="123" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.cpp" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Regex_1aa435d31ff106465b18712d97d7d98b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::Regex::~Regex</definition>
        <argsstring>()</argsstring>
        <name>~Regex</name>
        <briefdescription>
<para>Frees memory allocated for the regular expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.h" line="125" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.cpp" bodystart="194" bodyend="196"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classgmx_1_1Regex_1a7de062fb3a79f67fb6c55a4208af874a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool regexMatch</definition>
        <argsstring>(const char *str, const Regex &amp;regex)</argsstring>
        <name>regexMatch</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const <ref refid="classgmx_1_1Regex" kindref="compound">Regex</ref> &amp;</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
<para>Matches a string with a regular expression. </para>        </briefdescription>
        <detaileddescription>
<para> <libinternal /> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">regex</parametername>
</parameternamelist>
<parameterdescription>
<para>Regular expression to match. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <computeroutput>regex</computeroutput> matches the whole <computeroutput>str</computeroutput>.</para></simplesect>
Does not throw currently, but this is subject to change if/when better error handling is implemented (currently, it returns false if the matching fails, e.g., because of out-of-memory). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.h" line="132" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.cpp" bodystart="199" bodyend="206"/>
      </memberdef>
      <memberdef kind="friend" id="classgmx_1_1Regex_1aea53ee2159e90a932b40f05bfa1a1742" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool regexMatch</definition>
        <argsstring>(const std::string &amp;str, const Regex &amp;regex)</argsstring>
        <name>regexMatch</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const <ref refid="classgmx_1_1Regex" kindref="compound">Regex</ref> &amp;</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
<para>Matches a string with a regular expression. </para>        </briefdescription>
        <detaileddescription>
<para> <libinternal /> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">regex</parametername>
</parameternamelist>
<parameterdescription>
<para>Regular expression to match. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <computeroutput>regex</computeroutput> matches the whole <computeroutput>str</computeroutput>.</para></simplesect>
Does not throw currently, but this is subject to change if/when better error handling is implemented (currently, it returns false if the matching fails, e.g., because of out-of-memory). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.h" line="133" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.cpp" bodystart="208" bodyend="211"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a regular expression. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal /> This class provides a simple interface for regular expression construction. <ref refid="classgmx_1_1Regex_1a7de062fb3a79f67fb6c55a4208af874a" kindref="member">regexMatch()</ref> is used to match the regular expression against a string. POSIX extended regular expression syntax is used.</para><para>Currently, <ref refid="classgmx_1_1Regex_1a8631a2c8ba02730ceeceebd962f1ea5f" kindref="member">isSupported()</ref> will return true if either</para><para><orderedlist>
<listitem><para>POSIX regular expression header &lt;regex.h&gt; is available, or</para></listitem><listitem><para>C++11 header &lt;regex&gt; is available (e.g., new enough MSVC has this).</para></listitem></orderedlist>
</para><para>In other cases, <ref refid="classgmx_1_1Regex_1a8631a2c8ba02730ceeceebd962f1ea5f" kindref="member">isSupported()</ref> returns false and calling other constructors than the default constructor throws an exception.</para><para><simplesect kind="see"><para><ref refid="classgmx_1_1Regex_1a7de062fb3a79f67fb6c55a4208af874a" kindref="member">regexMatch()</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.h" line="95" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.h" bodystart="94" bodyend="134"/>
    <listofallmembers>
      <member refid="classgmx_1_1Regex_1a4128daba0cdf678a275c984710f1c852" prot="private" virt="non-virtual"><scope>gmx::Regex</scope><name>impl_</name></member>
      <member refid="classgmx_1_1Regex_1a8631a2c8ba02730ceeceebd962f1ea5f" prot="public" virt="non-virtual"><scope>gmx::Regex</scope><name>isSupported</name></member>
      <member refid="classgmx_1_1Regex_1a4fb5b68795043284d52c36ee5249d540" prot="public" virt="non-virtual"><scope>gmx::Regex</scope><name>Regex</name></member>
      <member refid="classgmx_1_1Regex_1aceab26e90155f03d222ce104b5243cc6" prot="public" virt="non-virtual"><scope>gmx::Regex</scope><name>Regex</name></member>
      <member refid="classgmx_1_1Regex_1acc5fb18ca03468f8be27bef76b9fb8c4" prot="public" virt="non-virtual"><scope>gmx::Regex</scope><name>Regex</name></member>
      <member refid="classgmx_1_1Regex_1a7de062fb3a79f67fb6c55a4208af874a" prot="private" virt="non-virtual"><scope>gmx::Regex</scope><name>regexMatch</name></member>
      <member refid="classgmx_1_1Regex_1aea53ee2159e90a932b40f05bfa1a1742" prot="private" virt="non-virtual"><scope>gmx::Regex</scope><name>regexMatch</name></member>
      <member refid="classgmx_1_1Regex_1aa435d31ff106465b18712d97d7d98b58" prot="public" virt="non-virtual"><scope>gmx::Regex</scope><name>~Regex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
