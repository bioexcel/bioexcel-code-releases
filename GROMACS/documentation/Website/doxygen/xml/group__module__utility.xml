<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="group__module__utility" kind="group">
    <compoundname>module_utility</compoundname>
    <title>Low-Level Utilities (utility)</title>
    <innerfile refid="alignedallocator_8cpp">alignedallocator.cpp</innerfile>
    <innerfile refid="alignedallocator_8h">alignedallocator.h</innerfile>
    <innerfile refid="allocator_8h">allocator.h</innerfile>
    <innerfile refid="arrayref_8h">arrayref.h</innerfile>
    <innerfile refid="arraysize_8h">arraysize.h</innerfile>
    <innerfile refid="basedefinitions_8h">basedefinitions.h</innerfile>
    <innerfile refid="basenetwork_8h">basenetwork.h</innerfile>
    <innerfile refid="baseversion-gen_8h">baseversion-gen.h</innerfile>
    <innerfile refid="baseversion_8h">baseversion.h</innerfile>
    <innerfile refid="binaryinformation_8cpp">binaryinformation.cpp</innerfile>
    <innerfile refid="binaryinformation_8h">binaryinformation.h</innerfile>
    <innerfile refid="bitmask_8h">bitmask.h</innerfile>
    <innerfile refid="classhelpers_8h">classhelpers.h</innerfile>
    <innerfile refid="compare_8h">compare.h</innerfile>
    <innerfile refid="coolstuff_8cpp">coolstuff.cpp</innerfile>
    <innerfile refid="coolstuff_8h">coolstuff.h</innerfile>
    <innerfile refid="cstringutil_8h">cstringutil.h</innerfile>
    <innerfile refid="current__function_8h">current_function.h</innerfile>
    <innerfile refid="datafilefinder_8cpp">datafilefinder.cpp</innerfile>
    <innerfile refid="datafilefinder_8h">datafilefinder.h</innerfile>
    <innerfile refid="dir__separator_8h">dir_separator.h</innerfile>
    <innerfile refid="directoryenumerator_8cpp">directoryenumerator.cpp</innerfile>
    <innerfile refid="directoryenumerator_8h">directoryenumerator.h</innerfile>
    <innerfile refid="errorcodes_8cpp">errorcodes.cpp</innerfile>
    <innerfile refid="errorcodes_8h">errorcodes.h</innerfile>
    <innerfile refid="errorformat_8cpp">errorformat.cpp</innerfile>
    <innerfile refid="errorformat_8h">errorformat.h</innerfile>
    <innerfile refid="exceptions_8cpp">exceptions.cpp</innerfile>
    <innerfile refid="exceptions_8h">exceptions.h</innerfile>
    <innerfile refid="fatalerror_8h">fatalerror.h</innerfile>
    <innerfile refid="fileredirector_8cpp">fileredirector.cpp</innerfile>
    <innerfile refid="fileredirector_8h">fileredirector.h</innerfile>
    <innerfile refid="filestream_8cpp">filestream.cpp</innerfile>
    <innerfile refid="filestream_8h">filestream.h</innerfile>
    <innerfile refid="flags_8h">flags.h</innerfile>
    <innerfile refid="futil_8h">futil.h</innerfile>
    <innerfile refid="gmxassert_8cpp">gmxassert.cpp</innerfile>
    <innerfile refid="gmxassert_8h">gmxassert.h</innerfile>
    <innerfile refid="gmxmpi_8h">gmxmpi.h</innerfile>
    <innerfile refid="gmxomp_8cpp">gmxomp.cpp</innerfile>
    <innerfile refid="gmxomp_8h">gmxomp.h</innerfile>
    <innerfile refid="gmxregex_8cpp">gmxregex.cpp</innerfile>
    <innerfile refid="gmxregex_8h">gmxregex.h</innerfile>
    <innerfile refid="ikeyvaluetreeerror_8h">ikeyvaluetreeerror.h</innerfile>
    <innerfile refid="init_8cpp">init.cpp</innerfile>
    <innerfile refid="init_8h">init.h</innerfile>
    <innerfile refid="inmemoryserializer_8h">inmemoryserializer.h</innerfile>
    <innerfile refid="int64__to__int_8h">int64_to_int.h</innerfile>
    <innerfile refid="iserializer_8h">iserializer.h</innerfile>
    <innerfile refid="keyvaluetree_8h">keyvaluetree.h</innerfile>
    <innerfile refid="keyvaluetreebuilder_8h">keyvaluetreebuilder.h</innerfile>
    <innerfile refid="keyvaluetreeserializer_8h">keyvaluetreeserializer.h</innerfile>
    <innerfile refid="keyvaluetreetransform_8h">keyvaluetreetransform.h</innerfile>
    <innerfile refid="logger_8h">logger.h</innerfile>
    <innerfile refid="loggerbuilder_8h">loggerbuilder.h</innerfile>
    <innerfile refid="messagestringcollector_8cpp">messagestringcollector.cpp</innerfile>
    <innerfile refid="messagestringcollector_8h">messagestringcollector.h</innerfile>
    <innerfile refid="mutex_8h">mutex.h</innerfile>
    <innerfile refid="niceheader_8cpp">niceheader.cpp</innerfile>
    <innerfile refid="niceheader_8h">niceheader.h</innerfile>
    <innerfile refid="nodelete_8h">nodelete.h</innerfile>
    <innerfile refid="path_8cpp">path.cpp</innerfile>
    <innerfile refid="path_8h">path.h</innerfile>
    <innerfile refid="pleasecite_8h">pleasecite.h</innerfile>
    <innerfile refid="programcontext_8cpp">programcontext.cpp</innerfile>
    <innerfile refid="programcontext_8h">programcontext.h</innerfile>
    <innerfile refid="qsort__threadsafe_8h">qsort_threadsafe.h</innerfile>
    <innerfile refid="real_8h">real.h</innerfile>
    <innerfile refid="smalloc_8h">smalloc.h</innerfile>
    <innerfile refid="snprintf_8h">snprintf.h</innerfile>
    <innerfile refid="strconvert_8cpp">strconvert.cpp</innerfile>
    <innerfile refid="strconvert_8h">strconvert.h</innerfile>
    <innerfile refid="strdb_8h">strdb.h</innerfile>
    <innerfile refid="stringcompare_8h">stringcompare.h</innerfile>
    <innerfile refid="stringstream_8cpp">stringstream.cpp</innerfile>
    <innerfile refid="stringstream_8h">stringstream.h</innerfile>
    <innerfile refid="stringutil_8cpp">stringutil.cpp</innerfile>
    <innerfile refid="stringutil_8h">stringutil.h</innerfile>
    <innerfile refid="sysinfo_8cpp">sysinfo.cpp</innerfile>
    <innerfile refid="sysinfo_8h">sysinfo.h</innerfile>
    <innerfile refid="alignedallocator-impl_8h">alignedallocator-impl.h</innerfile>
    <innerfile refid="tests_2alignedallocator_8cpp">alignedallocator.cpp</innerfile>
    <innerfile refid="arrayref_8cpp">arrayref.cpp</innerfile>
    <innerfile refid="tests_2bitmask_8h">bitmask.h</innerfile>
    <innerfile refid="mutex_8cpp">mutex.cpp</innerfile>
    <innerfile refid="tests_2path_8cpp">path.cpp</innerfile>
    <innerfile refid="tests_2stringutil_8cpp">stringutil.cpp</innerfile>
    <innerfile refid="tests_2textreader_8cpp">textreader.cpp</innerfile>
    <innerfile refid="tests_2textwriter_8cpp">textwriter.cpp</innerfile>
    <innerfile refid="textreader_8cpp">textreader.cpp</innerfile>
    <innerfile refid="textreader_8h">textreader.h</innerfile>
    <innerfile refid="textstream_8h">textstream.h</innerfile>
    <innerfile refid="textwriter_8cpp">textwriter.cpp</innerfile>
    <innerfile refid="textwriter_8h">textwriter.h</innerfile>
    <innerfile refid="txtdump_8h">txtdump.h</innerfile>
    <innerfile refid="typetraits_8h">typetraits.h</innerfile>
    <innerfile refid="unique__cptr_8h">unique_cptr.h</innerfile>
    <innerfile refid="variant_8cpp">variant.cpp</innerfile>
    <innerfile refid="variant_8h">variant.h</innerfile>
    <innerfile refid="utility_8h">utility.h</innerfile>
    <innerclass refid="classgmx_1_1Allocator" prot="public">gmx::Allocator</innerclass>
    <innerclass refid="classgmx_1_1ArrayRef" prot="public">gmx::ArrayRef</innerclass>
    <innerclass refid="classgmx_1_1BinaryInformationSettings" prot="public">gmx::BinaryInformationSettings</innerclass>
    <innerclass refid="classgmx_1_1PrivateImplPointer" prot="public">gmx::PrivateImplPointer</innerclass>
    <innerclass refid="classgmx_1_1DataFileOptions" prot="public">gmx::DataFileOptions</innerclass>
    <innerclass refid="structgmx_1_1DataFileInfo" prot="public">gmx::DataFileInfo</innerclass>
    <innerclass refid="classgmx_1_1DataFileFinder" prot="public">gmx::DataFileFinder</innerclass>
    <innerclass refid="classgmx_1_1DirectoryEnumerator" prot="public">gmx::DirectoryEnumerator</innerclass>
    <innerclass refid="classgmx_1_1anonymous__namespace_02exceptions_8cpp_03_1_1ErrorMessage" prot="public">gmx::anonymous_namespace{exceptions.cpp}::ErrorMessage</innerclass>
    <innerclass refid="classgmx_1_1anonymous__namespace_02exceptions_8cpp_03_1_1IMessageWriter" prot="public">gmx::anonymous_namespace{exceptions.cpp}::IMessageWriter</innerclass>
    <innerclass refid="classgmx_1_1anonymous__namespace_02exceptions_8cpp_03_1_1MessageWriterFileNoThrow" prot="public">gmx::anonymous_namespace{exceptions.cpp}::MessageWriterFileNoThrow</innerclass>
    <innerclass refid="classgmx_1_1anonymous__namespace_02exceptions_8cpp_03_1_1MessageWriterTextWriter" prot="public">gmx::anonymous_namespace{exceptions.cpp}::MessageWriterTextWriter</innerclass>
    <innerclass refid="classgmx_1_1anonymous__namespace_02exceptions_8cpp_03_1_1MessageWriterString" prot="public">gmx::anonymous_namespace{exceptions.cpp}::MessageWriterString</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1IExceptionInfo" prot="public">gmx::internal::IExceptionInfo</innerclass>
    <innerclass refid="classgmx_1_1ExceptionInfo" prot="public">gmx::ExceptionInfo</innerclass>
    <innerclass refid="structgmx_1_1ThrowLocation" prot="public">gmx::ThrowLocation</innerclass>
    <innerclass refid="classgmx_1_1ExceptionInitializer" prot="public">gmx::ExceptionInitializer</innerclass>
    <innerclass refid="classgmx_1_1GromacsException" prot="public">gmx::GromacsException</innerclass>
    <innerclass refid="classgmx_1_1FileIOError" prot="public">gmx::FileIOError</innerclass>
    <innerclass refid="classgmx_1_1UserInputError" prot="public">gmx::UserInputError</innerclass>
    <innerclass refid="classgmx_1_1InvalidInputError" prot="public">gmx::InvalidInputError</innerclass>
    <innerclass refid="classgmx_1_1InconsistentInputError" prot="public">gmx::InconsistentInputError</innerclass>
    <innerclass refid="classgmx_1_1ToleranceError" prot="public">gmx::ToleranceError</innerclass>
    <innerclass refid="classgmx_1_1SimulationInstabilityError" prot="public">gmx::SimulationInstabilityError</innerclass>
    <innerclass refid="classgmx_1_1InternalError" prot="public">gmx::InternalError</innerclass>
    <innerclass refid="classgmx_1_1APIError" prot="public">gmx::APIError</innerclass>
    <innerclass refid="classgmx_1_1RangeError" prot="public">gmx::RangeError</innerclass>
    <innerclass refid="classgmx_1_1NotImplementedError" prot="public">gmx::NotImplementedError</innerclass>
    <innerclass refid="classgmx_1_1anonymous__namespace_02fileredirector_8cpp_03_1_1DefaultInputRedirector" prot="public">gmx::anonymous_namespace{fileredirector.cpp}::DefaultInputRedirector</innerclass>
    <innerclass refid="classgmx_1_1anonymous__namespace_02fileredirector_8cpp_03_1_1DefaultOutputRedirector" prot="public">gmx::anonymous_namespace{fileredirector.cpp}::DefaultOutputRedirector</innerclass>
    <innerclass refid="classgmx_1_1IFileInputRedirector" prot="public">gmx::IFileInputRedirector</innerclass>
    <innerclass refid="classgmx_1_1IFileOutputRedirector" prot="public">gmx::IFileOutputRedirector</innerclass>
    <innerclass refid="classgmx_1_1StandardInputStream" prot="public">gmx::StandardInputStream</innerclass>
    <innerclass refid="classgmx_1_1TextInputFile" prot="public">gmx::TextInputFile</innerclass>
    <innerclass refid="classgmx_1_1TextOutputFile" prot="public">gmx::TextOutputFile</innerclass>
    <innerclass refid="classgmx_1_1FlagsTemplate" prot="public">gmx::FlagsTemplate</innerclass>
    <innerclass refid="classgmx_1_1Regex" prot="public">gmx::Regex</innerclass>
    <innerclass refid="classgmx_1_1KeyValueTreePath" prot="public">gmx::KeyValueTreePath</innerclass>
    <innerclass refid="classgmx_1_1KeyValueTreeBuilder" prot="public">gmx::KeyValueTreeBuilder</innerclass>
    <innerclass refid="classgmx_1_1KeyValueTreeValueBuilder" prot="public">gmx::KeyValueTreeValueBuilder</innerclass>
    <innerclass refid="classgmx_1_1KeyValueTreeUniformArrayBuilder" prot="public">gmx::KeyValueTreeUniformArrayBuilder</innerclass>
    <innerclass refid="classgmx_1_1KeyValueTreeObjectArrayBuilder" prot="public">gmx::KeyValueTreeObjectArrayBuilder</innerclass>
    <innerclass refid="classgmx_1_1KeyValueTreeObjectBuilder" prot="public">gmx::KeyValueTreeObjectBuilder</innerclass>
    <innerclass refid="classgmx_1_1IKeyValueTreeTransformRules" prot="public">gmx::IKeyValueTreeTransformRules</innerclass>
    <innerclass refid="classgmx_1_1KeyValueTreeTransformRulesScoped" prot="public">gmx::KeyValueTreeTransformRulesScoped</innerclass>
    <innerclass refid="classgmx_1_1KeyValueTreeTransformRuleBuilder" prot="public">gmx::KeyValueTreeTransformRuleBuilder</innerclass>
    <innerclass refid="classgmx_1_1ILogTarget" prot="public">gmx::ILogTarget</innerclass>
    <innerclass refid="classgmx_1_1LogEntryWriter" prot="public">gmx::LogEntryWriter</innerclass>
    <innerclass refid="classgmx_1_1LogWriteHelper" prot="public">gmx::LogWriteHelper</innerclass>
    <innerclass refid="classgmx_1_1LogLevelHelper" prot="public">gmx::LogLevelHelper</innerclass>
    <innerclass refid="classgmx_1_1MDLogger" prot="public">gmx::MDLogger</innerclass>
    <innerclass refid="classgmx_1_1LoggerBuilder" prot="public">gmx::LoggerBuilder</innerclass>
    <innerclass refid="classgmx_1_1LoggerOwner" prot="public">gmx::LoggerOwner</innerclass>
    <innerclass refid="classgmx_1_1MessageStringCollector" prot="public">gmx::MessageStringCollector</innerclass>
    <innerclass refid="classgmx_1_1MessageStringContext" prot="public">gmx::MessageStringContext</innerclass>
    <innerclass refid="structgmx_1_1no__delete" prot="public">gmx::no_delete</innerclass>
    <innerclass refid="classgmx_1_1anonymous__namespace_02programcontext_8cpp_03_1_1DefaultProgramContext" prot="public">gmx::anonymous_namespace{programcontext.cpp}::DefaultProgramContext</innerclass>
    <innerclass refid="structgmx_1_1InstallationPrefixInfo" prot="public">gmx::InstallationPrefixInfo</innerclass>
    <innerclass refid="classgmx_1_1IProgramContext" prot="public">gmx::IProgramContext</innerclass>
    <innerclass refid="classgmx_1_1StringCompare" prot="public">gmx::StringCompare</innerclass>
    <innerclass refid="classgmx_1_1StringOutputStream" prot="public">gmx::StringOutputStream</innerclass>
    <innerclass refid="classgmx_1_1StringFormatter" prot="public">gmx::StringFormatter</innerclass>
    <innerclass refid="classgmx_1_1IdentityFormatter" prot="public">gmx::IdentityFormatter</innerclass>
    <innerclass refid="classgmx_1_1TextLineWrapperSettings" prot="public">gmx::TextLineWrapperSettings</innerclass>
    <innerclass refid="classgmx_1_1TextLineWrapper" prot="public">gmx::TextLineWrapper</innerclass>
    <innerclass refid="classgmx_1_1TextReader" prot="public">gmx::TextReader</innerclass>
    <innerclass refid="classgmx_1_1TextInputStream" prot="public">gmx::TextInputStream</innerclass>
    <innerclass refid="classgmx_1_1TextOutputStream" prot="public">gmx::TextOutputStream</innerclass>
    <innerclass refid="classgmx_1_1TextWriter" prot="public">gmx::TextWriter</innerclass>
    <innerclass refid="classgmx_1_1Variant" prot="public">gmx::Variant</innerclass>
      <sectiondef kind="user-defined">
      <header>Error codes for buggy code</header>
      <description><para>Error codes below are for internal error checking; if triggered, they should indicate a bug in the code. </para></description>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para>Overloads for converting a value of a given type to a string.</para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></description>
      <memberdef kind="function" id="group__module__utility_1gae0ee71282bd6801fb749a52826e4e96a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string gmx::toString</definition>
        <argsstring>(bool t)</argsstring>
        <name>toString</name>
        <param>
          <type>bool</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="174" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gacecd2b0019cec198b2f5c5e133671dcc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string gmx::toString</definition>
        <argsstring>(int t)</argsstring>
        <name>toString</name>
        <param>
          <type>int</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="175" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga262b85ae9e33102a507a8958795a0e84" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string gmx::toString</definition>
        <argsstring>(gmx_int64_t t)</argsstring>
        <name>toString</name>
        <param>
          <type>gmx_int64_t</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="176" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" bodystart="176" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga6fa49499ed8b507ca911a3b393633512" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string gmx::toString</definition>
        <argsstring>(float t)</argsstring>
        <name>toString</name>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="177" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gad4bb5a5ef69c4b41281d0d4bc86e12e7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string gmx::toString</definition>
        <argsstring>(double t)</argsstring>
        <name>toString</name>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="178" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga39b2d98fab155b4695d036d36ee51b8c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string gmx::toString</definition>
        <argsstring>(std::string t)</argsstring>
        <name>toString</name>
        <param>
          <type>std::string</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="179" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" bodystart="179" bodyend="179"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__module__utility_1gac92ff9c7f6f5ed5200b3d8d92a4d53e3" prot="public" static="no">
        <name>ErrorCode</name>
        <enumvalue id="group__module__utility_1ggac92ff9c7f6f5ed5200b3d8d92a4d53e3acacaa10fa7070b0494b30fdc97a7a356" prot="public">
          <name>eeOK</name>
          <briefdescription>
<para>Zero for successful return. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__utility_1ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a35a82c5a0f04b6255d3f28d6144dd24e" prot="public">
          <name>eeOutOfMemory</name>
          <briefdescription>
<para>Not enough memory to complete operation. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__utility_1ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a444e88ccfbfc246dc671919d0cf127c1" prot="public">
          <name>eeFileNotFound</name>
          <briefdescription>
<para>Provided file could not be opened. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__utility_1ggac92ff9c7f6f5ed5200b3d8d92a4d53e3ad0a05315bf704c8457baef6eac42dc4e" prot="public">
          <name>eeFileIO</name>
          <briefdescription>
<para>System I/O error. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__utility_1ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a4c2569b29b84eda15a5cf90e28395b21" prot="public">
          <name>eeInvalidInput</name>
          <briefdescription>
<para>Invalid user input (could not be understood). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__utility_1ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a7eb29dbd6ce224f815ba82ddcc3b6f62" prot="public">
          <name>eeInconsistentInput</name>
          <briefdescription>
<para>Invalid user input (conflicting or unsupported settings). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__utility_1ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a11857eba83b9ec26fa530c71d5e3cdc8" prot="public">
          <name>eeTolerance</name>
          <briefdescription>
<para>Requested tolerance cannot be achieved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__utility_1ggac92ff9c7f6f5ed5200b3d8d92a4d53e3ac0b348673979b42ebc8df4562b8ebfa4" prot="public">
          <name>eeInstability</name>
          <briefdescription>
<para>Simulation instability detected. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__utility_1ggac92ff9c7f6f5ed5200b3d8d92a4d53e3ae958977bd58e97bcc4fd367324c8b21b" prot="public">
          <name>eeNotImplemented</name>
          <briefdescription>
<para>Requested feature not yet implemented. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__utility_1ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a71840645faa70349b0e4bede4da4b6d1" prot="public">
          <name>eeInvalidValue</name>
          <briefdescription>
<para>Input value violates API specification. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__utility_1ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a40bd4aef44a2ab731b61fb9c9184a3bd" prot="public">
          <name>eeInvalidCall</name>
          <briefdescription>
<para>Invalid routine called or wrong calling sequence detected. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__utility_1ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a90b9f0f24cf026b56ebf63d359c5f422" prot="public">
          <name>eeInternalError</name>
          <briefdescription>
<para>Internal consistency check failed. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__utility_1ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a414167b1bc702c9e8bb7f91078360845" prot="public">
          <name>eeAPIError</name>
          <briefdescription>
<para>API specification was violated. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__utility_1ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a068d9a3d2c79173f39457344cd60380f" prot="public">
          <name>eeRange</name>
          <briefdescription>
<para>Range consistency check failed. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__utility_1ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a395dad7e12b144dd6805157e6d92e40f" prot="public">
          <name>eeCommunication</name>
          <briefdescription>
<para>Communication consistency check failed. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__utility_1ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a46578ca340e1c440d5f519569e6884fb" prot="public">
          <name>eeUnknownError</name>
          <briefdescription>
<para>Unknown error detected. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Possible error return codes from Gromacs functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorcodes.h" line="56" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorcodes.h" bodystart="55" bodyend="99"/>
      </memberdef>
      <memberdef kind="enum" id="group__module__utility_1ga3ae8c56ad1f6d3f087e5dd1eb69662d9" prot="public" static="no">
        <name>StringCompareType</name>
        <enumvalue id="group__module__utility_1gga3ae8c56ad1f6d3f087e5dd1eb69662d9a1649aed298f99d587e2eb30c1db5946b" prot="public">
          <name>Exact</name>
          <briefdescription>
<para>Only exact matches are accepted. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__utility_1gga3ae8c56ad1f6d3f087e5dd1eb69662d9a6bd9264ca00b6021a8d75a68895c1ba1" prot="public">
          <name>CaseInsensitive</name>
          <briefdescription>
<para>Case-insensitive comparison. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__utility_1gga3ae8c56ad1f6d3f087e5dd1eb69662d9a307bcfa4e39d3c6df31c07ada48a6447" prot="public">
          <name>CaseAndDashInsensitive</name>
          <briefdescription>
<para>Case-insensitive comparison that also ignores &apos;-&apos; and &apos;_&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Specifies how strings should be compared in various contexts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringcompare.h" line="60" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringcompare.h" bodystart="59" bodyend="67"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__module__utility_1ga4ff0009992ade97951620b375e1a7af5" prot="public" static="no">
        <type>ExceptionInfo&lt; struct ExceptionInfoMessage_, ErrorMessage &gt;</type>
        <definition>typedef ExceptionInfo&lt;struct ExceptionInfoMessage_, ErrorMessage&gt; gmx::anonymous_namespace{exceptions.cpp}::ExceptionInfoMessage</definition>
        <argsstring></argsstring>
        <name>ExceptionInfoMessage</name>
        <briefdescription>
<para>Stores a reason or the top-most context string of an exception. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" line="146" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__module__utility_1ga8182ab028054f3b799af9dcc6ce9846b" prot="public" static="no">
        <type>ExceptionInfo&lt; struct ExceptionInfoNestedExceptions_, internal::NestedExceptionList &gt;</type>
        <definition>typedef ExceptionInfo&lt;struct ExceptionInfoNestedExceptions_, internal::NestedExceptionList&gt; gmx::anonymous_namespace{exceptions.cpp}::ExceptionInfoNestedExceptions</definition>
        <argsstring></argsstring>
        <name>ExceptionInfoNestedExceptions</name>
        <briefdescription>
<para>Stores list of nested exceptions for Gromacs exceptions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" line="173" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__module__utility_1ga590b36651977793730ea2413906302cf" prot="public" static="no">
        <type>ExceptionInfo&lt; struct ExceptionInfoErrno_, int &gt;</type>
        <definition>typedef ExceptionInfo&lt;struct ExceptionInfoErrno_, int&gt; gmx::ExceptionInfoErrno</definition>
        <argsstring></argsstring>
        <name>ExceptionInfoErrno</name>
        <briefdescription>
<para>Stores <computeroutput>errno</computeroutput> value that triggered the exception. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" line="160" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__module__utility_1ga3c8f9c19c0ed36c16770317afc7c69bb" prot="public" static="no">
        <type>ExceptionInfo&lt; struct ExceptionInfoApiFunc_, const char * &gt;</type>
        <definition>typedef ExceptionInfo&lt;struct ExceptionInfoApiFunc_, const char *&gt; gmx::ExceptionInfoApiFunction</definition>
        <argsstring></argsstring>
        <name>ExceptionInfoApiFunction</name>
        <briefdescription>
<para>Stores the function name that returned the <computeroutput>errno</computeroutput> in ExceptionInfoErrno. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" line="163" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__module__utility_1gab5d3ee620090581599c5762270314897" prot="public" static="no">
        <type>ExceptionInfo&lt; struct ExceptionInfoLocation_, ThrowLocation &gt;</type>
        <definition>typedef ExceptionInfo&lt;struct ExceptionInfoLocation_, ThrowLocation&gt; gmx::ExceptionInfoLocation</definition>
        <argsstring></argsstring>
        <name>ExceptionInfoLocation</name>
        <briefdescription>
<para>Stores the location where the exception was thrown. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" line="166" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__module__utility_1ga59a1b315ea59f8606a7b96ffd6f3ea72" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char _gmx_ver_string[]</definition>
        <argsstring>[]</argsstring>
        <name>_gmx_ver_string</name>
        <briefdescription>
<para>Version string, containing the version, date, and abbreviated hash. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/baseversion-gen.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__utility_1gacdb9a15c33c00f8a877faa7bbef02372" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char _gmx_full_git_hash[]</definition>
        <argsstring>[]</argsstring>
        <name>_gmx_full_git_hash</name>
        <briefdescription>
<para>Full git hash of the latest commit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/baseversion-gen.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__utility_1ga602e9b7bb04e1716158aa35f841a9143" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char _gmx_central_base_hash[]</definition>
        <argsstring>[]</argsstring>
        <name>_gmx_central_base_hash</name>
        <briefdescription>
<para>Full git hash of the latest commit in a central GROMACS repository. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/baseversion-gen.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__utility_1ga44cb4929940451cee81c98261b892fdd" prot="public" static="no" mutable="no">
        <type>const char *const</type>
        <definition>const char* const gmx::anonymous_namespace{errorcodes.cpp}::error_names[]</definition>
        <argsstring>[]</argsstring>
        <name>error_names</name>
        <initializer>=
{
    &quot;No error&quot;,
    &quot;Out of memory&quot;,
    &quot;File not found&quot;,
    &quot;System I/O error&quot;,
    &quot;Error in user input&quot;,
    &quot;Inconsistency in user input&quot;,
    &quot;Requested tolerance cannot be achieved&quot;,
    &quot;Simulation instability detected&quot;,

    &quot;Feature not implemented&quot;,
    &quot;Invalid value (bug)&quot;,
    &quot;Invalid call (bug)&quot;,
    &quot;Internal error (bug)&quot;,
    &quot;API error (bug)&quot;,
    &quot;Range checking error (possible bug)&quot;,
    &quot;Communication (parallel processing) problem&quot;,

    &quot;Unknown error&quot;,
}</initializer>
        <briefdescription>
<para>Strings corresponding to <ref refid="group__module__utility_1gac92ff9c7f6f5ed5200b3d8d92a4d53e3" kindref="member">gmx::ErrorCode</ref> values. </para>        </briefdescription>
        <detaileddescription>
<para>This has to match the enum in <ref refid="errorcodes_8h" kindref="compound">errorcodes.h</ref>! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorcodes.cpp" line="59" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorcodes.cpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__utility_1ga94d3efd18cc9886e24943ee6005c3e90" prot="public" static="no" mutable="no">
        <type>const IProgramContext *</type>
        <definition>const IProgramContext* gmx::anonymous_namespace{programcontext.cpp}::g_programContext</definition>
        <argsstring></argsstring>
        <name>g_programContext</name>
        <briefdescription>
<para>Global program info; stores the object set with <ref refid="group__module__utility_1ga2cf34635c815cc712b6291c2c8da2555" kindref="member">setProgramContext()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/programcontext.cpp" line="81" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/programcontext.cpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__utility_1ga463ad8e4cdfa3cb1bd1d1ebe936ab799" prot="public" static="no" mutable="no">
        <type>const DefaultProgramContext</type>
        <definition>const DefaultProgramContext gmx::anonymous_namespace{programcontext.cpp}::g_defaultContext</definition>
        <argsstring></argsstring>
        <name>g_defaultContext</name>
        <briefdescription>
<para>Default program context if nothing is set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/programcontext.cpp" line="83" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/programcontext.cpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__module__utility_1ga6f21654b9945d04d277523f6c8ab1d11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::swap</definition>
        <argsstring>(ArrayRef&lt; T &gt; &amp;a, ArrayRef&lt; T &gt; &amp;b)</argsstring>
        <name>swap</name>
        <param>
          <type>ArrayRef&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>ArrayRef&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Simple swap method for <ref refid="classgmx_1_1ArrayRef" kindref="compound">ArrayRef</ref> objects. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classgmx_1_1ArrayRef_1a6b0d543799e64b307d4832545e16f6f7" kindref="member">ArrayRef::swap()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/arrayref.h" line="314" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/arrayref.h" bodystart="314" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga921af955af13677427b80c3237a798fe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void gmx::internal::ignoreValueHelper</definition>
        <argsstring>(const T &amp;)</argsstring>
        <name>ignoreValueHelper</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
<para>Helper for ignoring values in macros. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/basedefinitions.h" line="248" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/basedefinitions.h" bodystart="248" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga26891cd06bdb1b0a8bb759957628be9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* gmx_version</definition>
        <argsstring>(void)</argsstring>
        <name>gmx_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Version string, containing the version, date, and abbreviated hash. </para>        </briefdescription>
        <detaileddescription>
<para>This can be a plain version if git version info was disabled during the build. The returned string used to start with a literal word <computeroutput>VERSION</computeroutput> before GROMACS 2016, but no longer does. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/baseversion.h" line="56" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/baseversion.cpp" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga9fcf89a9f3c65ca42810bbbdff25893b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* gmx_version_git_full_hash</definition>
        <argsstring>(void)</argsstring>
        <name>gmx_version_git_full_hash</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Full git hash of the latest commit. </para>        </briefdescription>
        <detaileddescription>
<para>If git version info was disabled during the build, returns an empty string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/baseversion.h" line="64" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/baseversion.cpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga61d315f10e21d489a53b372e45fbcd5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* gmx_version_git_central_base_hash</definition>
        <argsstring>(void)</argsstring>
        <name>gmx_version_git_central_base_hash</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Full git hash of the latest commit in a central GROMACS repository. </para>        </briefdescription>
        <detaileddescription>
<para>If git version info was disabled during the build, returns an empty string. Also, if the latest commit was from a central repository, the return value is an empty string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/baseversion.h" line="74" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/baseversion.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga62ad1902885ca86ef8b05bc29c0f0a90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx_is_double_precision</definition>
        <argsstring>()</argsstring>
        <name>gmx_is_double_precision</name>
        <briefdescription>
<para>Defined if <computeroutput>libgromacs</computeroutput> has been compiled in double precision. </para>        </briefdescription>
        <detaileddescription>
<para>Allows detecting the compiled precision of the library through checking the presence of the symbol, e.g., from autoconf or other types of build systems. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/baseversion.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga41bdbf2771535287b9b0cd043464155f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx_is_single_precision</definition>
        <argsstring>()</argsstring>
        <name>gmx_is_single_precision</name>
        <briefdescription>
<para>Defined if <computeroutput>libgromacs</computeroutput> has been compiled in single/mixed precision. </para>        </briefdescription>
        <detaileddescription>
<para>Allows detecting the compiled precision of the library through checking the presence of the symbol, e.g., from autoconf or other types of build systems. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/baseversion.h" line="94" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/baseversion.cpp" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gaac30db5a87fa0f55776bc8a3dcef0d67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * gmx::getErrorCodeString</definition>
        <argsstring>(int errorcode)</argsstring>
        <name>getErrorCodeString</name>
        <param>
          <type>int</type>
          <declname>errorcode</declname>
        </param>
        <briefdescription>
<para>Returns a short string description of an error code. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">errorcode</parametername>
</parameternamelist>
<parameterdescription>
<para>Error code to retrieve the string for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A constant string corresponding to <computeroutput>errorcode</computeroutput>.</para></simplesect>
If <computeroutput>errorcode</computeroutput> is not one of those defined for <ref refid="group__module__utility_1gac92ff9c7f6f5ed5200b3d8d92a4d53e3" kindref="member">gmx::ErrorCode</ref>, the string corresponding to <ref refid="group__module__utility_1ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a46578ca340e1c440d5f519569e6884fb" kindref="member">eeUnknownError</ref> is returned.</para><para>This function does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorcodes.cpp" line="83" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorcodes.cpp" bodystart="83" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga34257490d770efb0f6a87adeef2629c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::internal::printFatalErrorHeader</definition>
        <argsstring>(FILE *fp, const char *title, const char *func, const char *file, int line)</argsstring>
        <name>printFatalErrorHeader</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Formats a common header for fatal error messages. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorformat.cpp" line="63" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorformat.cpp" bodystart="63" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga0a42e4f258d42ec3a31c6a633de8d5da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::internal::printFatalErrorMessageLine</definition>
        <argsstring>(FILE *fp, const char *text, int indent)</argsstring>
        <name>printFatalErrorMessageLine</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
<para>Formats a line of fatal error message text. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorformat.cpp" line="96" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorformat.cpp" bodystart="96" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gadcb892c734184fade6b913a4d3a66aa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::internal::printFatalErrorFooter</definition>
        <argsstring>(FILE *fp)</argsstring>
        <name>printFatalErrorFooter</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
<para>Formats a common footer for fatal error messages. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorformat.cpp" line="115" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/errorformat.cpp" bodystart="115" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga0daef1df8f52f7496d4dad800f560502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::anonymous_namespace{exceptions.cpp}::formatExceptionMessageInternal</definition>
        <argsstring>(IMessageWriter *writer, const std::exception &amp;ex, int indent)</argsstring>
        <name>formatExceptionMessageInternal</name>
        <param>
          <type>IMessageWriter *</type>
          <declname>writer</declname>
        </param>
        <param>
          <type>const std::exception &amp;</type>
          <declname>ex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
<para>Prints error information for an exception object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">writer</parametername>
</parameternamelist>
<parameterdescription>
<para>Writer to write out the information. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ex</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception object to print. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">indent</parametername>
</parameternamelist>
<parameterdescription>
<para>Indentation for the information.</para></parameterdescription>
</parameteritem>
</parameterlist>
If the exception contains nested exceptions, information from them is recursively printed.</para><para>Does not throw unless the writer throws. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" line="438" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" bodystart="438" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga1b9a1e3988a89d1b90944c6ff6c3e794" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Exception</type>
          </param>
          <param>
            <type>class Tag</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_base_of&lt; GromacsException, Exception &gt;::value, const Exception &amp; &gt;::type</type>
        <definition>std::enable_if&lt;std::is_base_of&lt;GromacsException, Exception&gt;::value, const Exception &amp;&gt;::type gmx::operator&lt;&lt;</definition>
        <argsstring>(const Exception &amp;ex, const ExceptionInfo&lt; Tag, T &gt; &amp;item)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const Exception &amp;</type>
          <declname>ex</declname>
        </param>
        <param>
          <type>const ExceptionInfo&lt; Tag, T &gt; &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Associates extra information with an exception. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Exception</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception type (must be derived from <ref refid="classgmx_1_1GromacsException" kindref="compound">GromacsException</ref>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Tag</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1ExceptionInfo" kindref="compound">ExceptionInfo</ref> tag. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1ExceptionInfo" kindref="compound">ExceptionInfo</ref> value type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ex</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception to associate the information to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">item</parametername>
</parameternamelist>
<parameterdescription>
<para>Information to associate.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para><internal><para>The association is done with a templated non-member operator of exactly this form to make the simple syntax of <ref refid="group__module__utility_1gaed2c1af17dbda0e02e8cfd2c3d7e7096" kindref="member">GMX_THROW()</ref> possible. To support this, this operation needs to:<itemizedlist>
<listitem><para>Allow setting information in a temporary to support <computeroutput>GMX_THROW(InvalidInputError(ex))</computeroutput>. This is the reason for taking a const reference and the <computeroutput>const_cast</computeroutput>.</para></listitem><listitem><para>Return the same reference it takes in, instead of a base class. The compiler needs this information to throw the correct type of exception. This would be tedious to achieve with a member function (without a lot of code duplication).</para></listitem><listitem><para>Provide convenient syntax for adding multiple items. A non-member function that would require nested calls would look ugly for such cases.</para></listitem></itemizedlist>
</para><para>The reason for the enable_if is that this way, it does not conflict with other overloads of <computeroutput>operator&lt;&lt;</computeroutput> for <ref refid="classgmx_1_1ExceptionInfo" kindref="compound">ExceptionInfo</ref> objects, in case someone would like to declare those. But currently we do not have such overloads, so if the enable_if causes problems with some compilers, it can be removed. </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" line="388" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" bodystart="389" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gac6287dc8a550a2d54429e44994e00e58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::printFatalErrorMessage</definition>
        <argsstring>(FILE *fp, const std::exception &amp;ex)</argsstring>
        <name>printFatalErrorMessage</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const std::exception &amp;</type>
          <declname>ex</declname>
        </param>
        <briefdescription>
<para>Formats a standard fatal error message for reporting an exception. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fp</parametername>
</parameternamelist>
<parameterdescription>
<para>File to format the message to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ex</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception to format.</para></parameterdescription>
</parameteritem>
</parameterlist>
Does not throw. If memory allocation fails or some other error occurs while formatting the error, tries to print a reasonable alternative message.</para><para>Normal usage in Gromacs command-line programs is like this: <programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__selection_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__module__utility_1gae00d174a8ddd5325460d74dc663711c0" kindref="member">gmx::init</ref>(&amp;argc,<sp/>&amp;argv);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>actual<sp/>code<sp/>for<sp/>the<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception<sp/>&amp;ex)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__module__utility_1gac6287dc8a550a2d54429e44994e00e58" kindref="member">gmx::printFatalErrorMessage</ref>(stderr,<sp/>ex);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__module__utility_1ga5a45f49e157fa8e1059d24243283e248" kindref="member">gmx::processExceptionAtExit</ref>(ex);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" line="516" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" bodystart="516" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gac7703ad35b606758d2d12edc0a3d5217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::formatExceptionMessageToString</definition>
        <argsstring>(const std::exception &amp;ex)</argsstring>
        <name>formatExceptionMessageToString</name>
        <param>
          <type>const std::exception &amp;</type>
          <declname>ex</declname>
        </param>
        <briefdescription>
<para>Formats an error message for reporting an exception. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ex</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception to format. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Formatted string containing details of <computeroutput>ex</computeroutput>. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" line="571" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" bodystart="571" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gac5e6f6ec944fb2484d6f273c9a0ff495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::formatExceptionMessageToFile</definition>
        <argsstring>(FILE *fp, const std::exception &amp;ex)</argsstring>
        <name>formatExceptionMessageToFile</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const std::exception &amp;</type>
          <declname>ex</declname>
        </param>
        <briefdescription>
<para>Formats an error message for reporting an exception. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fp</parametername>
</parameternamelist>
<parameterdescription>
<para>File to write the message to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ex</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception to format. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" line="579" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" bodystart="579" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gaacf6bfb81220e44ed1bf73f0a44d9926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::formatExceptionMessageToWriter</definition>
        <argsstring>(TextWriter *writer, const std::exception &amp;ex)</argsstring>
        <name>formatExceptionMessageToWriter</name>
        <param>
          <type>TextWriter *</type>
          <declname>writer</declname>
        </param>
        <param>
          <type>const std::exception &amp;</type>
          <declname>ex</declname>
        </param>
        <briefdescription>
<para>Formats an error message for reporting an exception. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>writer</parametername>
</parameternamelist>
<parameterdescription>
<para>Writer to use for writing the message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ex</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception to format. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" line="585" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" bodystart="585" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga5a45f49e157fa8e1059d24243283e248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gmx::processExceptionAtExit</definition>
        <argsstring>(const std::exception &amp;ex)</argsstring>
        <name>processExceptionAtExit</name>
        <param>
          <type>const std::exception &amp;</type>
          <declname>ex</declname>
        </param>
        <briefdescription>
<para>Handles an exception that is causing the program to terminate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ex</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception that is the cause for terminating the program. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return code to return from <ref refid="test__selection_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main()</ref>.</para></simplesect>
This method should be called as the last thing before terminating the program because of an exception. It exists to terminate the program as gracefully as possible in the case of MPI processing (but the current implementation always calls MPI_Abort()).</para><para>See <ref refid="group__module__utility_1gac6287dc8a550a2d54429e44994e00e58" kindref="member">printFatalErrorMessage()</ref> for example usage.</para><para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" line="592" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" bodystart="592" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga13076c5bb17dd3bf90f683af835b8b62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::processExceptionAsFatalError</definition>
        <argsstring>(const std::exception &amp;ex)</argsstring>
        <name>processExceptionAsFatalError</name>
        <param>
          <type>const std::exception &amp;</type>
          <declname>ex</declname>
        </param>
        <briefdescription>
<para>Helper function for terminating the program on an exception. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ex</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception that is the cause for terminating the program.</para></parameterdescription>
</parameteritem>
</parameterlist>
Does not throw, and does not return. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" line="607" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.cpp" bodystart="607" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga4feb866d293acd99eeedc50da2747350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IFileInputRedirector &amp;</type>
        <definition>IFileInputRedirector &amp; gmx::defaultFileInputRedirector</definition>
        <argsstring>()</argsstring>
        <name>defaultFileInputRedirector</name>
        <briefdescription>
<para>Returns default implementation for <ref refid="classgmx_1_1IFileInputRedirector" kindref="compound">IFileInputRedirector</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The returned implementation does not redirect anything, but just uses the file system normally.</para><para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/fileredirector.cpp" line="106" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/fileredirector.cpp" bodystart="106" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga1cf24ed90164cc80604e8be18103fe02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IFileOutputRedirector &amp;</type>
        <definition>IFileOutputRedirector &amp; gmx::defaultFileOutputRedirector</definition>
        <argsstring>()</argsstring>
        <name>defaultFileOutputRedirector</name>
        <briefdescription>
<para>Returns default implementation for <ref refid="classgmx_1_1IFileOutputRedirector" kindref="compound">IFileOutputRedirector</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The returned implementation does not redirect anything, but just opens the files at requested locations.</para><para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/fileredirector.cpp" line="112" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/fileredirector.cpp" bodystart="112" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga312499e4abb409ad85844d83e52d795b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const DataFileFinder &amp;</type>
        <definition>const DataFileFinder &amp; gmx::getLibraryFileFinder</definition>
        <argsstring>()</argsstring>
        <name>getLibraryFileFinder</name>
        <briefdescription>
<para>Gets a finder for locating data files from share/top/. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Finder set with <ref refid="namespacegmx_1a106cb113fd73e054dbb8dfa2118d7153" kindref="member">setLibraryFileFinder()</ref>, or a default finder.</para></simplesect>
If <ref refid="namespacegmx_1a106cb113fd73e054dbb8dfa2118d7153" kindref="member">setLibraryFileFinder()</ref> has not been called (or a <computeroutput>NULL</computeroutput> finder has been set), a default finder is returned. The default finder searches data files from the directory identified by the global program context; it does not respect GMXLIB environment variable. Calling <ref refid="group__module__commandline_1ga8c376f5f94bd1a63a3a97e288c4be50d" kindref="member">initForCommandLine()</ref> sets a finder that respects GMXLIB.</para><para>Does not throw.</para><para>See <ref refid="namespacegmx_1a106cb113fd73e054dbb8dfa2118d7153" kindref="member">setLibraryFileFinder()</ref> for thread safety. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/futil.cpp" line="101" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/futil.cpp" bodystart="101" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gaebf12d5435f39db87d2627d024b0b4c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::internal::assertHandler</definition>
        <argsstring>(const char *condition, const char *msg, const char *func, const char *file, int line)</argsstring>
        <name>assertHandler</name>
        <param>
          <type>const char *</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Called when an assert fails. </para>        </briefdescription>
        <detaileddescription>
<para>Should not be called directly, but instead through <ref refid="group__module__utility_1ga5ae3261a89ac2c165cfba084c6b02ef7" kindref="member">GMX_ASSERT</ref> or <ref refid="group__module__utility_1ga1071dd9ef4577eac808a66272ecef494" kindref="member">GMX_RELEASE_ASSERT</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxassert.cpp" line="60" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxassert.cpp" bodystart="60" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga29a756d1573d36b702845f21700bd12f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gmx_omp_get_max_threads</definition>
        <argsstring>(void)</argsstring>
        <name>gmx_omp_get_max_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns an integer equal to or greater than the number of threads that would be available if a parallel region without num_threads were defined at that point in the code. </para>        </briefdescription>
        <detaileddescription>
<para>Acts as a wrapper for omp_get_max_threads(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxomp.h" line="87" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxomp.cpp" bodystart="61" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga1397b58c16c60a0349d9e4aa1df2349e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gmx_omp_get_num_procs</definition>
        <argsstring>(void)</argsstring>
        <name>gmx_omp_get_num_procs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the number of processors available when the function is called. </para>        </briefdescription>
        <detaileddescription>
<para>Acts as a wrapper around omp_get_num_procs(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxomp.h" line="94" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxomp.cpp" bodystart="70" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga04383c3cc48de75f41acbcd8de33b78f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gmx_omp_get_thread_num</definition>
        <argsstring>(void)</argsstring>
        <name>gmx_omp_get_thread_num</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the thread number of the thread executing within its thread team. </para>        </briefdescription>
        <detaileddescription>
<para>Acts as a wrapper for omp_get_thread_num(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxomp.h" line="101" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxomp.cpp" bodystart="79" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga7a75b2bb561a45da2abede8709ae5339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx_omp_set_num_threads</definition>
        <argsstring>(int num_threads)</argsstring>
        <name>gmx_omp_set_num_threads</name>
        <param>
          <type>int</type>
          <declname>num_threads</declname>
        </param>
        <briefdescription>
<para>Sets the number of threads in subsequent parallel regions, unless overridden by a num_threads clause. </para>        </briefdescription>
        <detaileddescription>
<para>Acts as a wrapper for omp_set_num_threads(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxomp.h" line="109" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxomp.cpp" bodystart="88" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gafd33d9597e51bde4d96e7608ebf40d58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="basedefinitions_8h_1a8fddad319f226e856400d190198d5151" kindref="member">gmx_bool</ref></type>
        <definition>gmx_bool gmx_omp_check_thread_affinity</definition>
        <argsstring>(char **message)</argsstring>
        <name>gmx_omp_check_thread_affinity</name>
        <param>
          <type>char **</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Check for externally set thread affinity to avoid conflicts with GROMACS internal setting. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">message</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the message to be shown to the user. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if we can set thread affinity ourselves.</para></simplesect>
The KMP_AFFINITY environment variable is used by Intel, GOMP_CPU_AFFINITY by the GNU compilers (Intel also honors it well). If any of the variables is set, we should honor it and disable the internal pinning.</para><para>If this function returns <computeroutput>false</computeroutput>, the caller is responsible to disable the pinning, show the message from <computeroutput>*message</computeroutput> to the user, and free the memory allocated for <computeroutput>*message</computeroutput>. If the return value is <computeroutput>true</computeroutput>, <computeroutput>*message</computeroutput> is NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxomp.h" line="127" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxomp.cpp" bodystart="97" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga63a859aed5514fa9801ed06e42b472d4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void gmx_pause</definition>
        <argsstring>()</argsstring>
        <name>gmx_pause</name>
        <briefdescription>
<para>Pause for use in a spin-wait loop. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxomp.h" line="132" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxomp.h" bodystart="132" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gafa2ad45af8fbb383a015e1ed18e08fdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::regexMatch</definition>
        <argsstring>(const char *str, const Regex &amp;regex)</argsstring>
        <name>regexMatch</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const Regex &amp;</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
<para>Matches a string with a regular expression. </para>        </briefdescription>
        <detaileddescription>
<para> <libinternal /> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">regex</parametername>
</parameternamelist>
<parameterdescription>
<para>Regular expression to match. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <computeroutput>regex</computeroutput> matches the whole <computeroutput>str</computeroutput>.</para></simplesect>
Does not throw currently, but this is subject to change if/when better error handling is implemented (currently, it returns false if the matching fails, e.g., because of out-of-memory). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.cpp" line="199" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxregex.cpp" bodystart="199" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga7da9b18a3bc8533387b11ef5a60fa5d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IKeyValueTreeErrorHandler *</type>
        <definition>IKeyValueTreeErrorHandler * gmx::defaultKeyValueTreeErrorHandler</definition>
        <argsstring>()</argsstring>
        <name>defaultKeyValueTreeErrorHandler</name>
        <briefdescription>
<para>Returns a default <ref refid="classgmx_1_1IKeyValueTreeErrorHandler" kindref="compound">IKeyValueTreeErrorHandler</ref> that throws on first exception. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/ikeyvaluetreeerror.cpp" line="68" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/ikeyvaluetreeerror.cpp" bodystart="68" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gae00d174a8ddd5325460d74dc663711c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::init</definition>
        <argsstring>(int *argc, char ***argv)</argsstring>
        <name>init</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Initializes the GROMACS library. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">argc</parametername>
</parameternamelist>
<parameterdescription>
<para>argc value passed to <ref refid="test__selection_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">argv</parametername>
</parameternamelist>
<parameterdescription>
<para>argv array passed to <ref refid="test__selection_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>argc</computeroutput> and <computeroutput>argv</computeroutput> are the command line arguments passed to <ref refid="test__selection_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main()</ref>. They are allowed to be NULL if GROMACS is not compiled with MPI, MPI_Init() has already been called, or if the MPI library GROMACS is compiled against allows it.</para><para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/init.cpp" line="66" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/init.cpp" bodystart="66" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gaa0a90b2770cb4b69e16229daa271a1af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::finalize</definition>
        <argsstring>()</argsstring>
        <name>finalize</name>
        <briefdescription>
<para>Deinitializes the GROMACS library. </para>        </briefdescription>
        <detaileddescription>
<para>Decrements the initialization counter, and calls MPI_Finalize() if GROMACS is compiled with MPI support and the counter has reached zero. In that case, it is not possible to reinitialize GROMACS after calling this function. Instead, call <ref refid="group__module__utility_1gae00d174a8ddd5325460d74dc663711c0" kindref="member">gmx::init()</ref> at a higher level, and note that calls to init can be nested safely. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/init.cpp" line="128" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/init.cpp" bodystart="128" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga58d8eb0b9eaeda93709f534a9387c110" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::dumpKeyValueTree</definition>
        <argsstring>(TextWriter *writer, const KeyValueTreeObject &amp;tree)</argsstring>
        <name>dumpKeyValueTree</name>
        <param>
          <type>TextWriter *</type>
          <declname>writer</declname>
        </param>
        <param>
          <type>const KeyValueTreeObject &amp;</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Writes a human-readable representation of the tree with given writer. </para>        </briefdescription>
        <detaileddescription>
<para>The output format is designed to be readable by humans; if some particular machine-readable format is needed, that should be implemented outside the generic key-value tree code. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/keyvaluetree.cpp" line="110" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/keyvaluetree.cpp" bodystart="110" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga3f3418d9f72d4b1cab8da4d0a4476d4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::compareKeyValueTrees</definition>
        <argsstring>(TextWriter *writer, const KeyValueTreeObject &amp;tree1, const KeyValueTreeObject &amp;tree2, real ftol, real abstol)</argsstring>
        <name>compareKeyValueTrees</name>
        <param>
          <type>TextWriter *</type>
          <declname>writer</declname>
        </param>
        <param>
          <type>const KeyValueTreeObject &amp;</type>
          <declname>tree1</declname>
        </param>
        <param>
          <type>const KeyValueTreeObject &amp;</type>
          <declname>tree2</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>ftol</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>abstol</declname>
        </param>
        <briefdescription>
<para>Compares two KeyValueTrees and prints any differences. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/keyvaluetree.cpp" line="309" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/keyvaluetree.cpp" bodystart="309" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gac492f6f7f07670658a028ddddaf2b2ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::serializeKeyValueTree</definition>
        <argsstring>(const KeyValueTreeObject &amp;root, ISerializer *serializer)</argsstring>
        <name>serializeKeyValueTree</name>
        <param>
          <type>const KeyValueTreeObject &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>ISerializer *</type>
          <declname>serializer</declname>
        </param>
        <briefdescription>
<para>Serializes a <ref refid="classgmx_1_1KeyValueTreeObject" kindref="compound">KeyValueTreeObject</ref> with given serializer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/keyvaluetreeserializer.cpp" line="291" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/keyvaluetreeserializer.cpp" bodystart="291" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga2fb8e5a4a76a06a352f73bf5b3dc4613" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KeyValueTreeObject</type>
        <definition>KeyValueTreeObject gmx::deserializeKeyValueTree</definition>
        <argsstring>(ISerializer *serializer)</argsstring>
        <name>deserializeKeyValueTree</name>
        <param>
          <type>ISerializer *</type>
          <declname>serializer</declname>
        </param>
        <briefdescription>
<para>Deserializes a <ref refid="classgmx_1_1KeyValueTreeObject" kindref="compound">KeyValueTreeObject</ref> from a given serializer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/keyvaluetreeserializer.cpp" line="299" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/keyvaluetreeserializer.cpp" bodystart="299" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga5ac09bdfd662fa49b0426432744f57be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const IProgramContext &amp;</type>
        <definition>const IProgramContext &amp; gmx::getProgramContext</definition>
        <argsstring>()</argsstring>
        <name>getProgramContext</name>
        <briefdescription>
<para>Returns the global <ref refid="classgmx_1_1IProgramContext" kindref="compound">IProgramContext</ref> instance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The context set with <ref refid="group__module__utility_1ga2cf34635c815cc712b6291c2c8da2555" kindref="member">setProgramContext()</ref>.</para></simplesect>
If nothing has been set with <ref refid="group__module__utility_1ga2cf34635c815cc712b6291c2c8da2555" kindref="member">setProgramContext()</ref>, returns a default implementation that returns <computeroutput>&quot;GROMACS&quot;</computeroutput> for the program and display names, and empty strings for other values. The default implementation never throws.</para><para>Does not throw.</para><para>See <ref refid="group__module__utility_1ga2cf34635c815cc712b6291c2c8da2555" kindref="member">setProgramContext()</ref> for thread safety notes. You should not call this method in global deinitialization methods (e.g., destructors of global variables), since it is very difficult to clean up the state correctly in the presence of such calls. For example, <ref refid="group__module__commandline_1ga8c376f5f94bd1a63a3a97e288c4be50d" kindref="member">initForCommandLine()</ref> assumes that such calls do not exist to be able to free the context before exiting.</para><para><simplesect kind="see"><para><ref refid="classgmx_1_1IProgramContext" kindref="compound">IProgramContext</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/programcontext.cpp" line="89" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/programcontext.cpp" bodystart="89" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga2cf34635c815cc712b6291c2c8da2555" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::setProgramContext</definition>
        <argsstring>(const IProgramContext *context)</argsstring>
        <name>setProgramContext</name>
        <param>
          <type>const IProgramContext *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>Sets the global <ref refid="classgmx_1_1IProgramContext" kindref="compound">IProgramContext</ref> instance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>Program context to set (can be NULL to restore the default context).</para></parameterdescription>
</parameteritem>
</parameterlist>
The library does not take ownership of <computeroutput>context</computeroutput>. The provided object must remain valid until the global instance is changed by another call to <ref refid="group__module__utility_1ga2cf34635c815cc712b6291c2c8da2555" kindref="member">setProgramContext()</ref>.</para><para>This method is not thread-safe. It must be the first call to the library after <ref refid="group__module__utility_1gae00d174a8ddd5325460d74dc663711c0" kindref="member">gmx::init()</ref>, and multi-threaded access is only supported after the call completes. If GROMACS is getting called from multiple threads, or uses multiple threads simultaneously, changing the program context is not supported once it is set. If the context is cleared at the end of the program, the caller must ensure that all other threads have been terminated at this point. These constraints simplify the implementation significantly.</para><para>Does not throw.</para><para><simplesect kind="see"><para><ref refid="classgmx_1_1IProgramContext" kindref="compound">IProgramContext</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/programcontext.cpp" line="98" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/programcontext.cpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gae5b3474512462e1c7b27d8a8a096568f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx_qsort</definition>
        <argsstring>(void *base, size_t nmemb, size_t size, int(*compar)(const void *, const void *))</argsstring>
        <name>gmx_qsort</name>
        <param>
          <type>void *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nmemb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int(*)(const void *, const void *)</type>
          <declname>compar</declname>
        </param>
        <briefdescription>
<para>Portable threadsafe sort routine. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to first element in list to sort </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmemb</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of each element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compar</parametername>
</parameternamelist>
<parameterdescription>
<para>Comparison function that takes two pointers to elements being compared as arguments. The function should return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/qsort_threadsafe.h" line="84" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/qsort_threadsafe.cpp" bodystart="120" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga584d812bf08f88312df77eace2eab219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::boolFromString</definition>
        <argsstring>(const char *str)</argsstring>
        <name>boolFromString</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Parses a boolean from a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1InvalidInputError" kindref="compound">InvalidInputError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>str</computeroutput> is not recognized as a boolean value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.cpp" line="60" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.cpp" bodystart="60" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gab73aaebcd95516465b3488dad27e2392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gmx::intFromString</definition>
        <argsstring>(const char *str)</argsstring>
        <name>intFromString</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Parses an integer from a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1InvalidInputError" kindref="compound">InvalidInputError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>str</computeroutput> is not a valid integer.</para></parameterdescription>
</parameteritem>
</parameterlist>
Also checks for overflow. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.cpp" line="77" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.cpp" bodystart="77" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga53668b8aab9fad93331df7d69797e871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gmx_int64_t</type>
        <definition>gmx_int64_t gmx::int64FromString</definition>
        <argsstring>(const char *str)</argsstring>
        <name>int64FromString</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Parses a 64-bit integer from a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1InvalidInputError" kindref="compound">InvalidInputError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>str</computeroutput> is not a valid integer.</para></parameterdescription>
</parameteritem>
</parameterlist>
Also checks for overflow. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.cpp" line="97" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.cpp" bodystart="97" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gacd75bf727a02cb09d6aeed2d00a791cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float gmx::floatFromString</definition>
        <argsstring>(const char *str)</argsstring>
        <name>floatFromString</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Parses a float value from a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1InvalidInputError" kindref="compound">InvalidInputError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>str</computeroutput> is not a valid number.</para></parameterdescription>
</parameteritem>
</parameterlist>
Also checks for overflow. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.cpp" line="115" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.cpp" bodystart="115" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gaf035067f7637ae310fe1246ba6c19111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double gmx::doubleFromString</definition>
        <argsstring>(const char *str)</argsstring>
        <name>doubleFromString</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Parses a double value from a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1InvalidInputError" kindref="compound">InvalidInputError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>str</computeroutput> is not a valid number.</para></parameterdescription>
</parameteritem>
</parameterlist>
Also checks for overflow. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.cpp" line="135" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.cpp" bodystart="135" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gabcacd9e636f3ab99601eb09400636d63" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T gmx::fromString</definition>
        <argsstring>(const char *str)</argsstring>
        <name>fromString</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Parses a value from a string to a given type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of value to parse.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>T</computeroutput> can only be one of the types that is explicity supported. The main use for this function is to write <computeroutput>fromString&lt;real&gt;(value)</computeroutput>, but it can also be used for other types for consistency. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga2369817c8fa86a26ae8b19e718112eef" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T gmx::fromString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>fromString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Parses a value from a string to a given type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of value to parse.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>T</computeroutput> can only be one of the types that is explicity supported. The main use for this function is to write <computeroutput>fromString&lt;real&gt;(value)</computeroutput>, but it can also be used for other types for consistency. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="109" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga6c905b14db2a3f47fd2591b8d4803be6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T gmx::fromStdString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>fromStdString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Parses a value from a string to a given type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of value to parse.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>T</computeroutput> can only be one of the types that is explicity supported. The main use for this function is to write <computeroutput>fromString&lt;real&gt;(value)</computeroutput>, but it can also be used for other types for consistency.</para><para>Provided for situations where overload resolution cannot easily resolve the desired std::string parameter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="118" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga7e7b1ee3138d30c68c064a7c0c550b4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool gmx::fromString&lt; bool &gt;</definition>
        <argsstring>(const char *str)</argsstring>
        <name>fromString&lt; bool &gt;</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Implementation for boolean values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="125" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gafd80f7c52bd5a58574a9262618a47657" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int</type>
        <definition>int gmx::fromString&lt; int &gt;</definition>
        <argsstring>(const char *str)</argsstring>
        <name>fromString&lt; int &gt;</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Implementation for integer values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="128" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga9ce3c901d8f39565c702bc146d07db2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>gmx_int64_t</type>
        <definition>gmx_int64_t gmx::fromString&lt; gmx_int64_t &gt;</definition>
        <argsstring>(const char *str)</argsstring>
        <name>fromString&lt; gmx_int64_t &gt;</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Implementation for 64-bit integer values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="131" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gab7fc4630057b1c3c1e8460583c55833d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>float</type>
        <definition>float gmx::fromString&lt; float &gt;</definition>
        <argsstring>(const char *str)</argsstring>
        <name>fromString&lt; float &gt;</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Implementation for float values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="134" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga634bae9f6215c786e8ac11fc3bd3e112" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>double</type>
        <definition>double gmx::fromString&lt; double &gt;</definition>
        <argsstring>(const char *str)</argsstring>
        <name>fromString&lt; double &gt;</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Implementation for double values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="137" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga3862c8128924c3311429a4dadf075ecc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* gmx::boolToString</definition>
        <argsstring>(bool value)</argsstring>
        <name>boolToString</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts a boolean to a &quot;true&quot;/&quot;false&quot; string. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="144" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gab05e2624ee477d48d47db1986b00140f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string gmx::intToString</definition>
        <argsstring>(int t)</argsstring>
        <name>intToString</name>
        <param>
          <type>int</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Returns a string containing the value of <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="153" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gab126236362af5d9c86475ab444d3924f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string gmx::int64ToString</definition>
        <argsstring>(gmx_int64_t t)</argsstring>
        <name>int64ToString</name>
        <param>
          <type>gmx_int64_t</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Returns a string containing the value of <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="158" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gadd11829c264b9d9b89a68a0baf26a7bd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string gmx::doubleToString</definition>
        <argsstring>(double t)</argsstring>
        <name>doubleToString</name>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Returns a string containing the value of <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" line="163" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/strconvert.h" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga3df3b21aa1070eb1e846d5ca1cdc3d6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::anonymous_namespace{stringutil.cpp}::isWordChar</definition>
        <argsstring>(char c)</argsstring>
        <name>isWordChar</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Helper function to identify word boundaries for <ref refid="group__module__utility_1gaacdb65ab5673b946ea9764f708a4afcc" kindref="member">replaceAllWords()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the character is considered part of a word. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" line="240" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga7be2995b3a5894b33e0267f142aca82e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::anonymous_namespace{stringutil.cpp}::replaceInternal</definition>
        <argsstring>(const std::string &amp;input, const char *from, const char *to, bool bWholeWords)</argsstring>
        <name>replaceInternal</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bWholeWords</declname>
        </param>
        <briefdescription>
<para>Common implementation for string replacement functions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>String to find. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">to</parametername>
</parameternamelist>
<parameterdescription>
<para>String to use to replace <computeroutput>from</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bWholeWords</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to only consider matches to whole words. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>input</computeroutput> with all occurrences of <computeroutput>from</computeroutput> replaced with <computeroutput>to</computeroutput>. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" line="258" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" bodystart="258" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga2f35bd1d4a654edabc2a3aaf6f6bccea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool gmx::isNullOrEmpty</definition>
        <argsstring>(const char *str)</argsstring>
        <name>isNullOrEmpty</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Tests whether a string is null or empty. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" line="63" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga8adb72aeb7775a649d7378c8e51321e6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool gmx::startsWith</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;prefix)</argsstring>
        <name>startsWith</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
<para>Tests whether a string starts with another string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefix to find. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <computeroutput>str</computeroutput> starts with <computeroutput>prefix</computeroutput>.</para></simplesect>
Returns true if <computeroutput>prefix</computeroutput> is empty. Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" line="78" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga87824e9b26adc46671ccffa89f3985d0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool gmx::startsWith</definition>
        <argsstring>(const char *str, const char *prefix)</argsstring>
        <name>startsWith</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
<para>Tests whether a string starts with another string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefix to find. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <computeroutput>str</computeroutput> starts with <computeroutput>prefix</computeroutput>.</para></simplesect>
Returns true if <computeroutput>prefix</computeroutput> is empty. Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" line="83" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga8b22d1fd014cc09c9cf7c4c1615c0a1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::endsWith</definition>
        <argsstring>(const char *str, const char *suffix)</argsstring>
        <name>endsWith</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>suffix</declname>
        </param>
        <briefdescription>
<para>Tests whether a string ends with another string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">suffix</parametername>
</parameternamelist>
<parameterdescription>
<para>Suffix to find. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <computeroutput>str</computeroutput> ends with <computeroutput>suffix</computeroutput>.</para></simplesect>
Returns true if <computeroutput>suffix</computeroutput> is NULL or empty. Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" line="96" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" bodystart="96" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gaa1e33d963e2538664428c8db95ca564e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool gmx::endsWith</definition>
        <argsstring>(const std::string &amp;str, const char *suffix)</argsstring>
        <name>endsWith</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>suffix</declname>
        </param>
        <briefdescription>
<para>Tests whether a string ends with another string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">suffix</parametername>
</parameternamelist>
<parameterdescription>
<para>Suffix to find. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <computeroutput>str</computeroutput> ends with <computeroutput>suffix</computeroutput>.</para></simplesect>
Returns true if <computeroutput>suffix</computeroutput> is NULL or empty. Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" line="100" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga5d6c1daa93bf46a2c397d179e007e3e8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool gmx::contains</definition>
        <argsstring>(const std::string &amp;str, const char *substr)</argsstring>
        <name>contains</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>substr</declname>
        </param>
        <briefdescription>
<para>Tests whether a string contains another as a substring. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">substr</parametername>
</parameternamelist>
<parameterdescription>
<para>Substring to find. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <computeroutput>str</computeroutput> contains <computeroutput>substr</computeroutput>.</para></simplesect>
Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" line="114" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gac0bef974d105fbfcc7e5362111eafed5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool gmx::contains</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;substr)</argsstring>
        <name>contains</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>substr</declname>
        </param>
        <briefdescription>
<para>Tests whether a string contains another as a substring. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">substr</parametername>
</parameternamelist>
<parameterdescription>
<para>Substring to find. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <computeroutput>str</computeroutput> contains <computeroutput>substr</computeroutput>.</para></simplesect>
Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" line="119" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gaea61e0b5bfc1f24f51a9eb5272b51603" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t gmx::countWords</definition>
        <argsstring>(const char *s)</argsstring>
        <name>countWords</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns number of space-separated words in zero-terminated char ptr. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Character pointer to zero-terminated, which will not be changed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of words in string.</para></simplesect>
<simplesect kind="note"><para>This routine is mainly meant to support legacy code in GROMACS. For new source you should try hard to use C++ string objects instead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" line="63" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" bodystart="63" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gae837a92609acdf559a6b8587e9233008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t gmx::countWords</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>countWords</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Returns the number of space-separated words in a string object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to string object, which will not be changed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of words in string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" line="90" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" bodystart="90" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga555d78d19565dec63c740318187b4d0d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool gmx::endsWith</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;suffix)</argsstring>
        <name>endsWith</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>suffix</declname>
        </param>
        <briefdescription>
<para>Tests whether a string ends with another string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">suffix</parametername>
</parameternamelist>
<parameterdescription>
<para>Suffix to find. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <computeroutput>str</computeroutput> ends with <computeroutput>suffix</computeroutput>.</para></simplesect>
Returns true if <computeroutput>suffix</computeroutput> is NULL or empty. Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" line="146" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gaea84ff4850c382e09a3e158939b34b3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::stripSuffixIfPresent</definition>
        <argsstring>(const std::string &amp;str, const char *suffix)</argsstring>
        <name>stripSuffixIfPresent</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>suffix</declname>
        </param>
        <briefdescription>
<para>Removes a suffix from a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">suffix</parametername>
</parameternamelist>
<parameterdescription>
<para>Suffix to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>str</computeroutput> with <computeroutput>suffix</computeroutput> removed, or <computeroutput>str</computeroutput> unmodified if it does not end with <computeroutput>suffix</computeroutput>. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns <computeroutput>str</computeroutput> if <computeroutput>suffix</computeroutput> is NULL or empty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" line="108" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" bodystart="108" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga5f31464a19604fde038dba36307ac066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::stripString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>stripString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Removes leading and trailing whitespace from a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to process. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>str</computeroutput> with leading and trailing whitespaces removed. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" line="121" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" bodystart="121" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gaed06df18ca6f9fc3f42bad9ea4d7e025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::formatString</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>formatString</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Formats a string (snprintf() wrapper). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
This function works like sprintf(), except that it returns an std::string instead of requiring a preallocated buffer. Arbitrary length output is supported. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" line="136" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" bodystart="136" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga1034db9546754cdf0a21ef6c131c0747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::formatStringV</definition>
        <argsstring>(const char *fmt, va_list ap)</argsstring>
        <name>formatStringV</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Formats a string (vsnprintf() wrapper). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
This function works like vsprintf(), except that it returns an std::string instead of requiring a preallocated buffer. Arbitrary length output is supported. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" line="145" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" bodystart="145" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gaa21c247b747e12412da58cb9f6d500ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename FormatterType</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string gmx::formatAndJoin</definition>
        <argsstring>(InputIterator begin, InputIterator end, const char *separator, const FormatterType &amp;formatter)</argsstring>
        <name>formatAndJoin</name>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>separator</declname>
        </param>
        <param>
          <type>const FormatterType &amp;</type>
          <declname>formatter</declname>
        </param>
        <briefdescription>
<para>Formats all the range as strings, and then joins them with a separator in between. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator the beginning of the range to join. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">end</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator the end of the range to join. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">separator</parametername>
</parameternamelist>
<parameterdescription>
<para>String to put in between the joined strings. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">formatter</parametername>
</parameternamelist>
<parameterdescription>
<para>Function object to format the objects in <computeroutput>container</computeroutput> as strings </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>All objects in the range from <computeroutput>begin</computeroutput> to <computeroutput>end</computeroutput> formatted as strings and concatenated with <computeroutput>separator</computeroutput> between each pair. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" line="245" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" bodystart="245" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga8e151e320e4072b2cc254b653077bb68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ContainerType</type>
          </param>
          <param>
            <type>typename FormatterType</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string gmx::formatAndJoin</definition>
        <argsstring>(const ContainerType &amp;container, const char *separator, const FormatterType &amp;formatter)</argsstring>
        <name>formatAndJoin</name>
        <param>
          <type>const ContainerType &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>separator</declname>
        </param>
        <param>
          <type>const FormatterType &amp;</type>
          <declname>formatter</declname>
        </param>
        <briefdescription>
<para>Formats all elements of the container as strings, and then joins them with a separator in between. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">container</parametername>
</parameternamelist>
<parameterdescription>
<para>Objects to join. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">separator</parametername>
</parameternamelist>
<parameterdescription>
<para>String to put in between the joined strings. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">formatter</parametername>
</parameternamelist>
<parameterdescription>
<para>Function object to format the objects in <computeroutput>container</computeroutput> as strings </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>All objects from <computeroutput>container</computeroutput> formatted as strings and concatenated with <computeroutput>separator</computeroutput> between each pair. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" line="270" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gae0ae45171d0f46a06095bf86855a8b28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string gmx::joinStrings</definition>
        <argsstring>(InputIterator begin, InputIterator end, const char *separator)</argsstring>
        <name>joinStrings</name>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>separator</declname>
        </param>
        <briefdescription>
<para>Joins strings from a range with a separator in between. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator the beginning of the range to join. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">end</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator the end of the range to join. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">separator</parametername>
</parameternamelist>
<parameterdescription>
<para>String to put in between the joined strings. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>All strings from (<computeroutput>begin</computeroutput>, <computeroutput>end</computeroutput>) concatenated with <computeroutput>separator</computeroutput> between each pair. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" line="286" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" bodystart="286" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga7dec76a57e8089a89f9298fb2fbaf2ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ContainerType</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string gmx::joinStrings</definition>
        <argsstring>(const ContainerType &amp;container, const char *separator)</argsstring>
        <name>joinStrings</name>
        <param>
          <type>const ContainerType &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>separator</declname>
        </param>
        <briefdescription>
<para>Joins strings from a container with a separator in between. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">container</parametername>
</parameternamelist>
<parameterdescription>
<para>Strings to join. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">separator</parametername>
</parameternamelist>
<parameterdescription>
<para>String to put in between the joined strings. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>All strings from <computeroutput>container</computeroutput> concatenated with <computeroutput>separator</computeroutput> between each pair. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" line="302" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga31335553bd6174a68ad8d30c48de3df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>count</declname>
            <defname>count</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string gmx::joinStrings</definition>
        <argsstring>(const char *const (&amp;array)[count], const char *separator)</argsstring>
        <name>joinStrings</name>
        <param>
          <type>const char *const (&amp;)</type>
          <declname>array</declname>
          <array>[count]</array>
        </param>
        <param>
          <type>const char *</type>
          <declname>separator</declname>
        </param>
        <briefdescription>
<para>Joins strings from an array with a separator in between. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">array</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of strings to join. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">separator</parametername>
</parameternamelist>
<parameterdescription>
<para>String to put in between the joined strings. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Deduced number of elements in <computeroutput>array</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>All strings from <computeroutput>aray</computeroutput> concatenated with <computeroutput>separator</computeroutput> between each pair. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" line="318" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.h" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga720e46b4a7625c675507adbea1df3f96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; gmx::splitString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>splitString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Splits a string to whitespace separated tokens. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to process. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>str</computeroutput> split into tokens at each whitespace sequence. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
This function works like <computeroutput>split</computeroutput> in Python, i.e., leading and trailing whitespace is ignored, and consecutive whitespaces are treated as a single separator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" line="178" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" bodystart="178" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga5cb3d438ea0c5c205ce8aa5430e89d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; gmx::splitDelimitedString</definition>
        <argsstring>(const std::string &amp;str, char delim)</argsstring>
        <name>splitDelimitedString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
<para>Splits a string to tokens separated by a given delimiter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">delim</parametername>
</parameternamelist>
<parameterdescription>
<para>Delimiter to use for splitting. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>str</computeroutput> split into tokens at delimiter. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
Unlike <ref refid="group__module__utility_1ga720e46b4a7625c675507adbea1df3f96" kindref="member">splitString()</ref>, consecutive delimiters will generate empty tokens, as will leading or trailing delimiters. Empty input will return an empty vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" line="202" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" bodystart="202" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gaff5615f507445a241a90970d4ad3705c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; gmx::splitAndTrimDelimitedString</definition>
        <argsstring>(const std::string &amp;str, char delim)</argsstring>
        <name>splitAndTrimDelimitedString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
<para>Splits <computeroutput>str</computeroutput> to tokens separated by delimiter <computeroutput>delim</computeroutput>. Removes leading and trailing whitespace from those strings with std::isspace. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">delim</parametername>
</parameternamelist>
<parameterdescription>
<para>Delimiter to use for splitting. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>str</computeroutput> split into tokens at delimiter, with whitespace stripped. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
Unlike <ref refid="group__module__utility_1ga720e46b4a7625c675507adbea1df3f96" kindref="member">splitString()</ref>, consecutive delimiters will generate empty tokens, as will leading or trailing delimiters. Empty input will return an empty vector. Input with only whitespace will return a vector of size 1, that contains an empty token. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" line="221" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" bodystart="221" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga1e4d61dba5d6fb924b8888e5597d2d0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::replaceAll</definition>
        <argsstring>(const std::string &amp;input, const char *from, const char *to)</argsstring>
        <name>replaceAll</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Replace all occurrences of a string with another string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>String to find. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">to</parametername>
</parameternamelist>
<parameterdescription>
<para>String to use to replace <computeroutput>from</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Copy of <computeroutput>input</computeroutput> with all occurrences of <computeroutput>from</computeroutput> replaced with <computeroutput>to</computeroutput>. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
The replacement is greedy and not recursive: starting from the beginning of <computeroutput>input</computeroutput>, each match of <computeroutput>from</computeroutput> is replaced with <computeroutput>to</computeroutput>, and the search for the next match begins after the end of the previous match.</para><para>Compexity is O(N), where N is length of output.</para><para><simplesect kind="see"><para><ref refid="group__module__utility_1gaacdb65ab5673b946ea9764f708a4afcc" kindref="member">replaceAllWords()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" line="292" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" bodystart="292" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gaba6fb72c71891e47fc68c36167bee72e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::replaceAll</definition>
        <argsstring>(const std::string &amp;input, const std::string &amp;from, const std::string &amp;to)</argsstring>
        <name>replaceAll</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Replace all occurrences of a string with another string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>String to find. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">to</parametername>
</parameternamelist>
<parameterdescription>
<para>String to use to replace <computeroutput>from</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Copy of <computeroutput>input</computeroutput> with all occurrences of <computeroutput>from</computeroutput> replaced with <computeroutput>to</computeroutput>. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
The replacement is greedy and not recursive: starting from the beginning of <computeroutput>input</computeroutput>, each match of <computeroutput>from</computeroutput> is replaced with <computeroutput>to</computeroutput>, and the search for the next match begins after the end of the previous match.</para><para>Compexity is O(N), where N is length of output.</para><para><simplesect kind="see"><para><ref refid="group__module__utility_1gaacdb65ab5673b946ea9764f708a4afcc" kindref="member">replaceAllWords()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" line="298" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" bodystart="298" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gaacdb65ab5673b946ea9764f708a4afcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::replaceAllWords</definition>
        <argsstring>(const std::string &amp;input, const char *from, const char *to)</argsstring>
        <name>replaceAllWords</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Replace whole words with others. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>String to find. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">to</parametername>
</parameternamelist>
<parameterdescription>
<para>String to use to replace <computeroutput>from</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Copy of <computeroutput>input</computeroutput> with all <computeroutput>from</computeroutput> words replaced with <computeroutput>to</computeroutput>. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
Works as <ref refid="group__module__utility_1ga1e4d61dba5d6fb924b8888e5597d2d0f" kindref="member">replaceAll()</ref>, but a match is only considered if it is delimited by non-alphanumeric characters.</para><para><simplesect kind="see"><para><ref refid="group__module__utility_1ga1e4d61dba5d6fb924b8888e5597d2d0f" kindref="member">replaceAll()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" line="305" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" bodystart="305" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga2df338df2e0b32b8c1fd032452409d57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::replaceAllWords</definition>
        <argsstring>(const std::string &amp;input, const std::string &amp;from, const std::string &amp;to)</argsstring>
        <name>replaceAllWords</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Replace whole words with others. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>String to find. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">to</parametername>
</parameternamelist>
<parameterdescription>
<para>String to use to replace <computeroutput>from</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Copy of <computeroutput>input</computeroutput> with all <computeroutput>from</computeroutput> words replaced with <computeroutput>to</computeroutput>. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
Works as <ref refid="group__module__utility_1ga1e4d61dba5d6fb924b8888e5597d2d0f" kindref="member">replaceAll()</ref>, but a match is only considered if it is delimited by non-alphanumeric characters.</para><para><simplesect kind="see"><para><ref refid="group__module__utility_1ga1e4d61dba5d6fb924b8888e5597d2d0f" kindref="member">replaceAll()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" line="311" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/stringutil.cpp" bodystart="311" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gae4f67c4d34d788c50b3d2f04ea1042e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gmx_gethostname</definition>
        <argsstring>(char *buf, size_t len)</argsstring>
        <name>gmx_gethostname</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Gets the hostname as given by gethostname(), if available. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to receive the hostname. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of buffer <computeroutput>buf</computeroutput> (must be &gt;= 8). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error.</para></simplesect>
If the value is not available, &quot;unknown&quot; is returned. <computeroutput>name</computeroutput> should have at least size <computeroutput>len</computeroutput>.</para><para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/sysinfo.h" line="67" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/sysinfo.cpp" bodystart="75" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga5549cd3ef028cf8dec7293e703527afc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gmx_getpid</definition>
        <argsstring>(void)</argsstring>
        <name>gmx_getpid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the process ID of the current process. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/sysinfo.h" line="74" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/sysinfo.cpp" bodystart="95" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga2f646e4c6bb4fc4da25ce7fc13012d10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gmx_getuid</definition>
        <argsstring>(void)</argsstring>
        <name>gmx_getuid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the current user ID, or -1 if not available. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/sysinfo.h" line="80" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/sysinfo.cpp" bodystart="104" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gafd93456291d0bd6b35565424554cd9e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gmx_getusername</definition>
        <argsstring>(char *buf, size_t len)</argsstring>
        <name>gmx_getusername</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Gets the current user name, if available. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to receive the username. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of buffer <computeroutput>buf</computeroutput> (must be &gt;= 8). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error.</para></simplesect>
Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/sysinfo.h" line="90" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/sysinfo.cpp" bodystart="113" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gac5e99fdf62333b4e42a627897b00ab1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* gmx_ctime_r</definition>
        <argsstring>(const time_t *clock, char *buf, size_t len)</argsstring>
        <name>gmx_ctime_r</name>
        <param>
          <type>const time_t *</type>
          <declname>clock</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Portable version of ctime_r. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/sysinfo.h" line="97" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/sysinfo.cpp" bodystart="136" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gaf53bcf1058c4a76409e32a711eba3d59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx_format_current_time</definition>
        <argsstring>(char *buf, size_t len)</argsstring>
        <name>gmx_format_current_time</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Gets the current time as a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to receive the string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of buffer <computeroutput>buf</computeroutput> (26 characters should be sufficient).</para></parameterdescription>
</parameteritem>
</parameterlist>
Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/sysinfo.h" line="106" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/sysinfo.cpp" bodystart="157" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gac2072a6edde816d91e0bf12ca016f3b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gmx_set_nice</definition>
        <argsstring>(int level)</argsstring>
        <name>gmx_set_nice</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Wrapper for nice(). </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/sysinfo.h" line="113" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/sysinfo.cpp" bodystart="163" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gaf6c90bd68a9d00313ad98955863ccf33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::simpleValueToString</definition>
        <argsstring>(const Variant &amp;value)</argsstring>
        <name>simpleValueToString</name>
        <param>
          <type>const Variant &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts a <ref refid="classgmx_1_1Variant" kindref="compound">Variant</ref> value to a string. </para>        </briefdescription>
        <detaileddescription>
<para>As the name suggests, only some types of &quot;simple&quot; values (such as int) are supported. Asserts for unsupported types. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.cpp" line="55" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/variant.cpp" bodystart="55" bodyend="85"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__module__utility_1ga0883345a58f8f63aefa249a4f127f707" prot="public" static="no">
        <name>asize</name>
        <param><defname>a</defname></param>
        <initializer>((int)(sizeof(a)/sizeof((a)[0])))</initializer>
        <briefdescription>
<para>Calculates the static number of elements in an array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/arraysize.h" line="50" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/arraysize.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__utility_1ga33e34477bae2bbb86c4d9af1823e3fd0" prot="public" static="no">
        <name>GMX_UNUSED_VALUE</name>
        <param><defname>value</defname></param>
        <initializer>(void)value</initializer>
        <briefdescription>
<para>Macro to explicitly ignore an unused value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/basedefinitions.h" line="234" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/basedefinitions.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__utility_1gaea5f9b70aab0c21b621fe421fb53a9b1" prot="public" static="no">
        <name>GMX_IGNORE_RETURN_VALUE</name>
        <param><defname>call</defname></param>
        <initializer>::<ref refid="group__module__utility_1ga921af955af13677427b80c3237a798fe" kindref="member">gmx::internal::ignoreValueHelper</ref>(call)</initializer>
        <briefdescription>
<para>Macro to explicitly ignore a return value of a call. </para>        </briefdescription>
        <detaileddescription>
<para>Mainly meant for ignoring values of functions declared with <computeroutput>__attribute__((warn_unused_return))</computeroutput>. Makes it easy to find those places if they need to be fixed, and document the intent in cases where the return value really can be ignored. It also makes it easy to adapt the approach so that they don&apos;t produce warnings. A cast to void doesn&apos;t remove the warning in gcc, while adding a dummy variable can cause warnings about an unused variable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/basedefinitions.h" line="268" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/basedefinitions.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__utility_1gaa92e208d024bed7158ccb0d435d0c604" prot="public" static="no">
        <name>GMX_DISALLOW_COPY_AND_ASSIGN</name>
        <param><defname>ClassName</defname></param>
        <briefdescription>
<para>Macro to declare a class non-copyable and non-assignable. </para>        </briefdescription>
        <detaileddescription>
<para>For consistency, should appear last in the class declaration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/classhelpers.h" line="63" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/classhelpers.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__utility_1ga7c055bdcca22bf1e0feb1a93e6ca86cd" prot="public" static="no">
        <name>GMX_DISALLOW_ASSIGN</name>
        <param><defname>ClassName</defname></param>
        <initializer>ClassName &amp;operator=(const ClassName &amp;) = delete</initializer>
        <briefdescription>
<para>Macro to declare a class non-assignable. </para>        </briefdescription>
        <detaileddescription>
<para>For consistency, should appear last in the class declaration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/classhelpers.h" line="76" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/classhelpers.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__utility_1gac05e1c9dcf15fe6214d655fafba28a48" prot="public" static="no">
        <name>GMX_DEFAULT_CONSTRUCTORS</name>
        <param><defname>ClassName</defname></param>
        <briefdescription>
<para>Macro to declare default constructors. </para>        </briefdescription>
        <detaileddescription>
<para>Intended for copyable interfaces or bases classes which require to create custom destructor (e.g. protected or virtual) but need the default constructors. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/classhelpers.h" line="88" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/classhelpers.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__utility_1gae874dfbf621e3e04133619aec5d466e5" prot="public" static="no">
        <name>GMX_CURRENT_FUNCTION</name>
        <initializer>&quot;(unknown)&quot;</initializer>
        <briefdescription>
<para>Expands to a string that provides the name of the current function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/current_function.h" line="101" column="10"/>
      </memberdef>
      <memberdef kind="define" id="group__module__utility_1gaed2c1af17dbda0e02e8cfd2c3d7e7096" prot="public" static="no">
        <name>GMX_THROW</name>
        <param><defname>e</defname></param>
        <initializer>throw (e) &lt;&lt; <ref refid="group__module__utility_1gab5d3ee620090581599c5762270314897" kindref="member">gmx::ExceptionInfoLocation</ref>(<ref refid="structgmx_1_1ThrowLocation" kindref="compound">gmx::ThrowLocation</ref>(<ref refid="group__module__utility_1gae874dfbf621e3e04133619aec5d466e5" kindref="member">GMX_CURRENT_FUNCTION</ref>, __FILE__, __LINE__))</initializer>
        <briefdescription>
<para>Macro for throwing an exception. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">e</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception object to throw.</para></parameterdescription>
</parameteritem>
</parameterlist>
Using this macro instead of <computeroutput>throw</computeroutput> directly makes it possible to uniformly attach information into the exception objects. <computeroutput>e</computeroutput> should evaluate to an instance of an object derived from GromacsException.</para><para>Basic usage: <programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__module__utility_1gaed2c1af17dbda0e02e8cfd2c3d7e7096" kindref="member">GMX_THROW</ref>(InconsistentUserInput(</highlight><highlight class="stringliteral">&quot;Negative<sp/>values<sp/>not<sp/>allowed<sp/>for<sp/>value&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" line="582" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" bodystart="582" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__utility_1ga02415d7db680dcec8185c3d4af0d09fc" prot="public" static="no">
        <name>GMX_THROW_WITH_ERRNO</name>
        <param><defname>e</defname></param>
        <param><defname>syscall</defname></param>
        <param><defname>err</defname></param>
        <initializer>do { \
        int stored_errno_ = (err); \
        <ref refid="group__module__utility_1gaed2c1af17dbda0e02e8cfd2c3d7e7096" kindref="member">GMX_THROW</ref>((e) &lt;&lt; <ref refid="group__module__utility_1ga590b36651977793730ea2413906302cf" kindref="member">gmx::ExceptionInfoErrno</ref>(stored_errno_) \
                  &lt;&lt; <ref refid="group__module__utility_1ga3c8f9c19c0ed36c16770317afc7c69bb" kindref="member">gmx::ExceptionInfoApiFunction</ref>(syscall)); \
    } while (0)</initializer>
        <briefdescription>
<para>Macro for throwing an exception based on errno. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">e</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception object to throw. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">syscall</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the syscall that returned the error. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">err</parametername>
</parameternamelist>
<parameterdescription>
<para>errno value returned by the syscall.</para></parameterdescription>
</parameteritem>
</parameterlist>
This macro provides a convenience interface for throwing an exception to report an error based on a errno value. In addition to adding the necessary information to the exception object, the macro also ensures that <computeroutput>errno</computeroutput> is evaluated before, e.g., the constructor of <computeroutput>e</computeroutput> may call other functions that could overwrite the errno value. <computeroutput>e</computeroutput> should evaluate to an instance of an object derived from GromacsException.</para><para>Typical usage (note that <ref refid="classgmx_1_1File" kindref="compound">gmx::File</ref> wraps this particular case): <programlisting><codeline><highlight class="normal">FILE<sp/>*fp<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;filename.txt&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>==<sp/>NULL)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__module__utility_1gaed2c1af17dbda0e02e8cfd2c3d7e7096" kindref="member">GMX_THROW</ref>(FileIOError(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>open<sp/>file&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;fopen&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" line="609" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" bodystart="609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__utility_1ga5e77eb0451e9294f07e04bdc8ded0d96" prot="public" static="no">
        <name>GMX_CATCH_ALL_AND_EXIT_WITH_FATAL_ERROR</name>
        <initializer>catch (const std::exception &amp;ex) { \
        ::<ref refid="group__module__utility_1ga13076c5bb17dd3bf90f683af835b8b62" kindref="member">gmx::processExceptionAsFatalError</ref>(ex); \
    }</initializer>
        <briefdescription>
<para>Macro for catching exceptions at C++ -&gt; C boundary. </para>        </briefdescription>
        <detaileddescription>
<para>This macro is intended for uniform handling of exceptions when C++ code is called from C code within Gromacs. Since most existing code is written using the assumption that fatal errors terminate the program, this macro implements this behavior for exceptions. It should only be used in cases where the error cannot be propagated upwards using return values or such.</para><para>Having this as a macro instead of having the same code in each place makes it easy to 1) find all such locations in the code, and 2) change the exact behavior if needed.</para><para>Usage: <programlisting><codeline><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C++<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__module__utility_1ga5e77eb0451e9294f07e04bdc8ded0d96" kindref="member">GMX_CATCH_ALL_AND_EXIT_WITH_FATAL_ERROR</ref>;</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" line="718" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/exceptions.h" bodystart="718" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__utility_1ga1071dd9ef4577eac808a66272ecef494" prot="public" static="no">
        <name>GMX_RELEASE_ASSERT</name>
        <param><defname>condition</defname></param>
        <param><defname>msg</defname></param>
        <initializer>((void) ((condition) ? (void)0 : \
             ::<ref refid="group__module__utility_1gaebf12d5435f39db87d2627d024b0b4c1" kindref="member">gmx::internal::assertHandler</ref>(#condition, msg, \
                                            <ref refid="group__module__utility_1gae874dfbf621e3e04133619aec5d466e5" kindref="member">GMX_CURRENT_FUNCTION</ref>, __FILE__, __LINE__)))</initializer>
        <briefdescription>
<para>Macro for asserts that should also be present in the release version. </para>        </briefdescription>
        <detaileddescription>
<para>Regardless of NDEBUG, this macro checks <computeroutput>condition</computeroutput>, and if it is not true, it calls the assert handler.</para><para>Although this macro currently calls abort() if the assertion fails, it should only be used in a context where it is safe to throw an exception to keep the option open. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxassert.h" line="66" column="10" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxassert.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__utility_1ga5ae3261a89ac2c165cfba084c6b02ef7" prot="public" static="no">
        <name>GMX_ASSERT</name>
        <param><defname>condition</defname></param>
        <param><defname>msg</defname></param>
        <initializer><ref refid="group__module__utility_1ga1071dd9ef4577eac808a66272ecef494" kindref="member">GMX_RELEASE_ASSERT</ref>(condition, msg)</initializer>
        <briefdescription>
<para>Macro for debug asserts. </para>        </briefdescription>
        <detaileddescription>
<para>If NDEBUG is defined, this macro expands to nothing. If it is not defined, it will work exactly like <ref refid="group__module__utility_1ga1071dd9ef4577eac808a66272ecef494" kindref="member">GMX_RELEASE_ASSERT</ref>.</para><para><simplesect kind="see"><para><ref refid="group__module__utility_1ga1071dd9ef4577eac808a66272ecef494" kindref="member">GMX_RELEASE_ASSERT</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxassert.h" line="83" column="10" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/gmxassert.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__utility_1gae729bb685d65e62bab6be8c4fe02ae87" prot="public" static="no">
        <name>GMX_LOG</name>
        <param><defname>logger</defname></param>
        <initializer>if (::<ref refid="classgmx_1_1LogWriteHelper" kindref="compound">gmx::LogWriteHelper</ref> helper = ::<ref refid="classgmx_1_1LogWriteHelper" kindref="compound">gmx::LogWriteHelper</ref>(logger)) { } else \
        helper = ::<ref refid="classgmx_1_1LogEntryWriter" kindref="compound">gmx::LogEntryWriter</ref>()</initializer>
        <briefdescription>
<para>Helper to log information using <ref refid="classgmx_1_1MDLogger" kindref="compound">gmx::MDLogger</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>logger</parametername>
</parameternamelist>
<parameterdescription>
<para>LogLevelHelper instance to use for logging.</para></parameterdescription>
</parameteritem>
</parameterlist>
Used as <programlisting><codeline><highlight class="normal"><ref refid="group__module__utility_1gae729bb685d65e62bab6be8c4fe02ae87" kindref="member">GMX_LOG</ref>(logger.warning).appendText(...);</highlight></codeline>
</programlisting> and ensures that the code to format the output is only executed when the output goes somewhere.</para><para>See LogEntryWriter for functions that can be used with the macro (such as the appendText() in the example). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/logger.h" line="224" column="9" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/logger.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__utility_1gaaf82b25c57ecd30a306f027b0696ca94" prot="public" static="no">
        <name>gmx_qsort_threadsafe</name>
        <initializer>qsort</initializer>
        <briefdescription>
<para>Threadsafe qsort(). </para>        </briefdescription>
        <detaileddescription>
<para>Expands to <ref refid="group__module__utility_1gae5b3474512462e1c7b27d8a8a096568f" kindref="member">gmx_qsort()</ref> if Gromacs is built with threading, or system qsort() otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/qsort_threadsafe.h" line="100" column="10" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/qsort_threadsafe.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides low-level utilities for error handling and other tasks. </para>    </briefdescription>
    <detaileddescription>
<para>This module provides various low-level utilities for tasks such as error handling and string formatting, as well as helper classes and common custom containers to simplify implementation of other code. Contents of the module are discussed in more details under the different headings below. Some of the code in installed headers in the module is intended for use directly from code outside the GROMACS library, but a significant portion is exposed only because other public headers depend on it.</para><para>Since this module implements error handling, it should be at the lowest level: it should not depend on other modules. Any functionality needed by the error handling code should also be kept in this module.</para><para><heading level="3">Error handling</heading>
</para><para>Exception classes used in the library are declared in the <ref refid="exceptions_8h" kindref="compound">exceptions.h</ref> header file. Most GROMACS-specific exceptions derive from <ref refid="classgmx_1_1GromacsException" kindref="compound">gmx::GromacsException</ref>.</para><para>This header also declares a <ref refid="group__module__utility_1gaed2c1af17dbda0e02e8cfd2c3d7e7096" kindref="member">GMX_THROW</ref> macro that should be used for throwing exceptions. <ref refid="group__module__utility_1ga02415d7db680dcec8185c3d4af0d09fc" kindref="member">GMX_THROW_WITH_ERRNO</ref> is also provided for reporting syscall errors, but its use should be mostly limited to within the library. This header also declares helper functions <ref refid="group__module__utility_1gac6287dc8a550a2d54429e44994e00e58" kindref="member">printFatalErrorMessage()</ref>, <ref refid="group__module__utility_1gac7703ad35b606758d2d12edc0a3d5217" kindref="member">formatExceptionMessageToString()</ref>, and <ref refid="group__module__utility_1gac5e6f6ec944fb2484d6f273c9a0ff495" kindref="member">formatExceptionMessageToFile()</ref> for creating standard error messages. <ref refid="group__module__utility_1ga5a45f49e157fa8e1059d24243283e248" kindref="member">processExceptionAtExit()</ref> provides clean-up code before exiting the program after an exception. To help in cases where bottom-up conversion to C++ is appropriate, macro <ref refid="group__module__utility_1ga5e77eb0451e9294f07e04bdc8ded0d96" kindref="member">GMX_CATCH_ALL_AND_EXIT_WITH_FATAL_ERROR</ref> is also provided to catch all exceptions at C++ to C boundary.</para><para>Header file <ref refid="gmxassert_8h" kindref="compound">gmxassert.h</ref> is also provided for assertions. It declares macros <ref refid="group__module__utility_1ga5ae3261a89ac2c165cfba084c6b02ef7" kindref="member">GMX_ASSERT</ref> and <ref refid="group__module__utility_1ga1071dd9ef4577eac808a66272ecef494" kindref="member">GMX_RELEASE_ASSERT</ref> that should be used for assertions.</para><para>Internally, functions from <ref refid="errorformat_8h" kindref="compound">errorformat.h</ref> are used for all the above cases to format error messages to <computeroutput>stderr</computeroutput>. <ref refid="errorcodes_8h" kindref="compound">errorcodes.h</ref> provides some common functionality for classifying errors.</para><para><heading level="3">Basic file handling and streams</heading>
</para><para>The header <ref refid="textstream_8h" kindref="compound">textstream.h</ref> declares interfaces for simple text format streams. Headers <ref refid="filestream_8h" kindref="compound">filestream.h</ref> and <ref refid="stringstream_8h" kindref="compound">stringstream.h</ref> provide implementations for these streams for reading/writing files and for writing to in-memory strings.</para><para>The header <ref refid="fileredirector_8h" kindref="compound">fileredirector.h</ref> provides interfaces for redirecting file input and/or output to alternative streams, for use in testing, as well as default implementations for these interfaces that just use the file system.</para><para>The header <ref refid="textwriter_8h" kindref="compound">textwriter.h</ref> provides <ref refid="classgmx_1_1TextWriter" kindref="compound">gmx::TextWriter</ref> for more formatting support when writing to a text stream. Similarly, <ref refid="textreader_8h" kindref="compound">textreader.h</ref> provides more formatting support when reading from a text stream.</para><para>The header <ref refid="path_8h" kindref="compound">path.h</ref> declares helpers for manipulating paths as strings and for managing directories and files. The fate of this header depends on what is decided in Redmine issue #950.</para><para><heading level="3">Logging</heading>
</para><para>The headers <ref refid="logger_8h" kindref="compound">logger.h</ref> and <ref refid="loggerbuilder_8h" kindref="compound">loggerbuilder.h</ref> provide interfaces and classes for writing log files (or logging to other targets). See <ref refid="page_logging" kindref="compound">Logging</ref> for an overview.</para><para><heading level="3">Implementation helpers</heading>
</para><para>The header <ref refid="basedefinitions_8h" kindref="compound">basedefinitions.h</ref> contains common definitions and macros used throughout GROMACS. It includes fixed-width integer types (<computeroutput>gmx_int64_t</computeroutput> and friends), <computeroutput>gmx_bool</computeroutput> for C code, some macros for compiler-specific attributes, and <ref refid="group__module__utility_1ga33e34477bae2bbb86c4d9af1823e3fd0" kindref="member">GMX_UNUSED_VALUE</ref> and <ref refid="group__module__utility_1gaea5f9b70aab0c21b621fe421fb53a9b1" kindref="member">GMX_IGNORE_RETURN_VALUE</ref> for handling warnings about unused values.</para><para>The header <ref refid="classhelpers_8h" kindref="compound">classhelpers.h</ref> implements a <ref refid="classgmx_1_1PrivateImplPointer" kindref="compound">gmx::PrivateImplPointer</ref> template for easily writing classes that use the private implementation idiom. This header also declares <ref refid="group__module__utility_1gaa92e208d024bed7158ccb0d435d0c604" kindref="member">GMX_DISALLOW_COPY_AND_ASSIGN</ref> and <ref refid="group__module__utility_1ga7c055bdcca22bf1e0feb1a93e6ca86cd" kindref="member">GMX_DISALLOW_ASSIGN</ref> macros for class declarations.</para><para>The header <ref refid="flags_8h" kindref="compound">flags.h</ref> implements a <ref refid="classgmx_1_1FlagsTemplate" kindref="compound">gmx::FlagsTemplate</ref> template for better type safety when using bit flag fields.</para><para><heading level="3">Other functionality</heading>
</para><para>The header <ref refid="init_8h" kindref="compound">init.h</ref> declares <ref refid="group__module__utility_1gae00d174a8ddd5325460d74dc663711c0" kindref="member">gmx::init()</ref> and <ref refid="group__module__utility_1gaa0a90b2770cb4b69e16229daa271a1af" kindref="member">gmx::finalize()</ref> for initializing and deinitializing the GROMACS library.</para><para>The header <ref refid="arrayref_8h" kindref="compound">arrayref.h</ref> implements a <ref refid="classgmx_1_1ArrayRef" kindref="compound">gmx::ArrayRef</ref> class for exposing a C array or part of a std::vector (basically, any continuous stretch of memory) throuh a std::vector-like interface.</para><para>The header <ref refid="stringutil_8h" kindref="compound">stringutil.h</ref> declares various string utility routines.</para><para>The header <ref refid="strconvert_8h" kindref="compound">strconvert.h</ref> declares string parsing routines.</para><para>The header <ref refid="gmxmpi_8h" kindref="compound">gmxmpi.h</ref> abstracts away the mechanism of including either MPI or thread-MPI headers depending on compilation options. Similarly, <ref refid="gmxomp_8h" kindref="compound">gmxomp.h</ref> removes the need to use conditional compilation for code that needs to include omp.h for OpenMP functions.</para><para>The header <ref refid="gmxregex_8h" kindref="compound">gmxregex.h</ref> declares <ref refid="classgmx_1_1Regex" kindref="compound">gmx::Regex</ref> and <ref refid="group__module__utility_1gafa2ad45af8fbb383a015e1ed18e08fdf" kindref="member">regexMatch()</ref> for basic regular expression matching using an interface similar to C++11.</para><para>The header <ref refid="messagestringcollector_8h" kindref="compound">messagestringcollector.h</ref> declares a <ref refid="classgmx_1_1MessageStringCollector" kindref="compound">gmx::MessageStringCollector</ref> class for composing messages with context information.</para><para>The header <ref refid="sysinfo_8h" kindref="compound">sysinfo.h</ref> declares <ref refid="group__module__utility_1ga5549cd3ef028cf8dec7293e703527afc" kindref="member">gmx_getpid()</ref> for getting the current process id.</para><para>The header <ref refid="programcontext_8h" kindref="compound">programcontext.h</ref> declares a <ref refid="classgmx_1_1IProgramContext" kindref="compound">gmx::IProgramContext</ref> that is used to initialize and access information about the running program, such as the name and path of the executable. This information is used, e.g., by the error handling code in formatting standard error messages.</para><para>The header <ref refid="qsort__threadsafe_8h" kindref="compound">qsort_threadsafe.h</ref> provides a guaranteed threadsafe implementation for qsort().</para><para><simplesect kind="author"><para>Teemu Murtola <ulink url="mailto:teemu.murtola@gmail.com">teemu.murtola@gmail.com</ulink> </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
