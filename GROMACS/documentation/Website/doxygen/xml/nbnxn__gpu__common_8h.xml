<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="nbnxn__gpu__common_8h" kind="file">
    <compoundname>nbnxn_gpu_common.h</compoundname>
    <includes local="yes">config.h</includes>
    <includes local="no">string</includes>
    <includes refid="nbnxn__cuda__types_8h" local="yes">nbnxn_cuda/nbnxn_cuda_types.h</includes>
    <includes refid="nbnxn__ocl__types_8h" local="yes">nbnxn_ocl/nbnxn_ocl_types.h</includes>
    <includes refid="gpu__utils_8h" local="yes">gromacs/gpu_utils/gpu_utils.h</includes>
    <includes refid="vec_8h" local="yes">gromacs/math/vec.h</includes>
    <includes refid="nbnxn__gpu__types_8h" local="yes">gromacs/mdlib/nbnxn_gpu_types.h</includes>
    <includes refid="ishift_8h" local="yes">gromacs/pbcutil/ishift.h</includes>
    <includes refid="gpu__timing_8h" local="yes">gromacs/timing/gpu_timing.h</includes>
    <includes refid="stringutil_8h" local="yes">gromacs/utility/stringutil.h</includes>
    <includes refid="nbnxn__gpu__common__utils_8h" local="yes">nbnxn_gpu_common_utils.h</includes>
    <includedby refid="nbnxn__ocl_8cpp" local="yes">src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl.cpp</includedby>
    <incdepgraph>
      <node id="15386">
        <label>gromacs/timing/gpu_timing.h</label>
        <link refid="gpu__timing_8h"/>
      </node>
      <node id="15383">
        <label>gromacs/utility/current_function.h</label>
        <link refid="current__function_8h"/>
      </node>
      <node id="15374">
        <label>gromacs/gpu_utils/gpuregiontimer_ocl.h</label>
        <link refid="gpuregiontimer__ocl_8h"/>
        <childnode refid="15375" relation="include">
        </childnode>
        <childnode refid="15376" relation="include">
        </childnode>
        <childnode refid="15384" relation="include">
        </childnode>
      </node>
      <node id="15377">
        <label>gromacs/gpu_utils/gmxopencl.h</label>
        <link refid="gmxopencl_8h"/>
        <childnode refid="15378" relation="include">
        </childnode>
      </node>
      <node id="15367">
        <label>src/gromacs/mdlib/nbnxn_gpu_common.h</label>
        <link refid="nbnxn_gpu_common.h"/>
        <childnode refid="15368" relation="include">
        </childnode>
        <childnode refid="15369" relation="include">
        </childnode>
        <childnode refid="15370" relation="include">
        </childnode>
        <childnode refid="15387" relation="include">
        </childnode>
        <childnode refid="15389" relation="include">
        </childnode>
        <childnode refid="15386" relation="include">
        </childnode>
        <childnode refid="15392" relation="include">
        </childnode>
        <childnode refid="15395" relation="include">
        </childnode>
      </node>
      <node id="15381">
        <label>stdint.h</label>
      </node>
      <node id="15389">
        <label>gromacs/gpu_utils/gpu_utils.h</label>
        <link refid="gpu__utils_8h"/>
        <childnode refid="15390" relation="include">
        </childnode>
        <childnode refid="15369" relation="include">
        </childnode>
        <childnode refid="15391" relation="include">
        </childnode>
        <childnode refid="15380" relation="include">
        </childnode>
      </node>
      <node id="15370">
        <label>nbnxn_cuda/nbnxn_cuda_types.h</label>
        <link refid="nbnxn__cuda__types_8h"/>
        <childnode refid="15371" relation="include">
        </childnode>
        <childnode refid="15372" relation="include">
        </childnode>
        <childnode refid="15373" relation="include">
        </childnode>
        <childnode refid="15386" relation="include">
        </childnode>
      </node>
      <node id="15395">
        <label>nbnxn_gpu_common_utils.h</label>
        <link refid="nbnxn__gpu__common__utils_8h"/>
        <childnode refid="15368" relation="include">
        </childnode>
        <childnode refid="15370" relation="include">
        </childnode>
        <childnode refid="15387" relation="include">
        </childnode>
      </node>
      <node id="15393">
        <label>cstdarg</label>
      </node>
      <node id="15369">
        <label>string</label>
      </node>
      <node id="15373">
        <label>gromacs/mdlib/nbnxn_gpu_types_common.h</label>
        <link refid="nbnxn__gpu__types__common_8h"/>
        <childnode refid="15368" relation="include">
        </childnode>
        <childnode refid="15374" relation="include">
        </childnode>
        <childnode refid="15385" relation="include">
        </childnode>
      </node>
      <node id="15379">
        <label>gromacs/utility/gmxassert.h</label>
        <link refid="gmxassert_8h"/>
        <childnode refid="15380" relation="include">
        </childnode>
        <childnode refid="15383" relation="include">
        </childnode>
      </node>
      <node id="15378">
        <label>CL/opencl.h</label>
      </node>
      <node id="15390">
        <label>cstdio</label>
      </node>
      <node id="15372">
        <label>gromacs/gpu_utils/cudautils.cuh</label>
      </node>
      <node id="15388">
        <label>gromacs/utility/real.h</label>
        <link refid="real_8h"/>
      </node>
      <node id="15391">
        <label>vector</label>
      </node>
      <node id="15375">
        <label>array</label>
      </node>
      <node id="15392">
        <label>gromacs/utility/stringutil.h</label>
        <link refid="stringutil_8h"/>
        <childnode refid="15393" relation="include">
        </childnode>
        <childnode refid="15394" relation="include">
        </childnode>
        <childnode refid="15369" relation="include">
        </childnode>
        <childnode refid="15391" relation="include">
        </childnode>
      </node>
      <node id="15380">
        <label>gromacs/utility/basedefinitions.h</label>
        <link refid="basedefinitions_8h"/>
        <childnode refid="15381" relation="include">
        </childnode>
        <childnode refid="15382" relation="include">
        </childnode>
      </node>
      <node id="15385">
        <label>gromacs/gpu_utils/gpuregiontimer.cuh</label>
      </node>
      <node id="15387">
        <label>nbnxn_ocl/nbnxn_ocl_types.h</label>
        <link refid="nbnxn__ocl__types_8h"/>
        <childnode refid="15377" relation="include">
        </childnode>
        <childnode refid="15376" relation="include">
        </childnode>
        <childnode refid="15373" relation="include">
        </childnode>
        <childnode refid="15388" relation="include">
        </childnode>
      </node>
      <node id="15384">
        <label>gpuregiontimer.h</label>
        <link refid="gpuregiontimer_8h"/>
        <childnode refid="15369" relation="include">
        </childnode>
        <childnode refid="15379" relation="include">
        </childnode>
      </node>
      <node id="15376">
        <label>gromacs/gpu_utils/oclutils.h</label>
        <link refid="oclutils_8h"/>
        <childnode refid="15369" relation="include">
        </childnode>
        <childnode refid="15377" relation="include">
        </childnode>
        <childnode refid="15379" relation="include">
        </childnode>
      </node>
      <node id="15368">
        <label>config.h</label>
      </node>
      <node id="15371">
        <label>gromacs/gpu_utils/cuda_arch_utils.cuh</label>
      </node>
      <node id="15394">
        <label>cstring</label>
      </node>
      <node id="15382">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="15397">
        <label>src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl.cpp</label>
        <link refid="nbnxn__ocl_8cpp"/>
      </node>
      <node id="15396">
        <label>src/gromacs/mdlib/nbnxn_gpu_common.h</label>
        <link refid="nbnxn_gpu_common.h"/>
        <childnode refid="15397" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="nbnxn__gpu__common_8h_1a4e026482dbc819d9b51c0e14667d14d0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void validateGpuAtomLocality</definition>
        <argsstring>(int atomLocality)</argsstring>
        <name>validateGpuAtomLocality</name>
        <param>
          <type>int</type>
          <declname>atomLocality</declname>
        </param>
        <briefdescription>
<para>Check that atom locality values are valid for the GPU module. </para>        </briefdescription>
        <detaileddescription>
<para>In the GPU module atom locality &quot;all&quot; is not supported, the local and non-local ranges are treated separately.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">atomLocality</parametername>
</parameternamelist>
<parameterdescription>
<para>atom locality specifier </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" line="74" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" bodystart="74" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="nbnxn__gpu__common_8h_1a06d9a76817a1b0fa20f5734b691f4890" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpuAtomToInteractionLocality</definition>
        <argsstring>(int atomLocality)</argsstring>
        <name>gpuAtomToInteractionLocality</name>
        <param>
          <type>int</type>
          <declname>atomLocality</declname>
        </param>
        <briefdescription>
<para>Convert atom locality to interaction locality. </para>        </briefdescription>
        <detaileddescription>
<para>In the current implementation the this is straightforward conversion: local to local, non-local to non-local.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">atomLocality</parametername>
</parameternamelist>
<parameterdescription>
<para>Atom locality specifier </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interaction locality corresponding to the atom locality passed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" line="90" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" bodystart="90" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="nbnxn__gpu__common_8h_1a05bf9d36816b70412fffcb177cc26260" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AtomDataT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void getGpuAtomRange</definition>
        <argsstring>(const AtomDataT *atomData, int atomLocality, int &amp;atomRangeBegin, int &amp;atomRangeLen)</argsstring>
        <name>getGpuAtomRange</name>
        <param>
          <type>const AtomDataT *</type>
          <declname>atomData</declname>
        </param>
        <param>
          <type>int</type>
          <declname>atomLocality</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>atomRangeBegin</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>atomRangeLen</declname>
        </param>
        <briefdescription>
<para>Calculate atom range and return start index and length. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">atomData</parametername>
</parameternamelist>
<parameterdescription>
<para>Atom descriptor data structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">atomLocality</parametername>
</parameternamelist>
<parameterdescription>
<para>Atom locality specifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">atomRangeBegin</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting index of the atom range in the atom data array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">atomRangeLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Atom range length in the atom data array. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" line="119" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" bodystart="119" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="nbnxn__gpu__common_8h_1a295ddf80b9796ce66a327009934f9e51" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GpuTimers</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void countPruneKernelTime</definition>
        <argsstring>(GpuTimers *timers, gmx_wallclock_gpu_nbnxn_t *timings, const int iloc)</argsstring>
        <name>countPruneKernelTime</name>
        <param>
          <type>GpuTimers *</type>
          <declname>timers</declname>
        </param>
        <param>
          <type><ref refid="structgmx__wallclock__gpu__nbnxn__t" kindref="compound">gmx_wallclock_gpu_nbnxn_t</ref> *</type>
          <declname>timings</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>iloc</declname>
        </param>
        <briefdescription>
<para>Count pruning kernel time if either kernel has been triggered. </para>        </briefdescription>
        <detaileddescription>
<para>We do the accounting for either of the two pruning kernel flavors:<itemizedlist>
<listitem><para>1st pass prune: ran during the current step (prior to the force kernel);</para></listitem><listitem><para>rolling prune: ran at the end of the previous step (prior to the current step H2D xq);</para></listitem></itemizedlist>
</para><para>Note that the resetting of <ref refid="structnbnxn__gpu__timers__t_1ad64be82c648a187d6841ca789531841f" kindref="member">cu_timers_t::didPrune</ref> and <ref refid="structnbnxn__gpu__timers__t_1a167294a66197578dacb85a8c846d6fd3" kindref="member">cu_timers_t::didRollingPrune</ref> should happen after calling this function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">timers</parametername>
</parameternamelist>
<parameterdescription>
<para>structs with GPU timer objects </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">timings</parametername>
</parameternamelist>
<parameterdescription>
<para>GPU task timing data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">iloc</parametername>
</parameternamelist>
<parameterdescription>
<para>interaction locality </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" line="155" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" bodystart="155" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="nbnxn__gpu__common_8h_1a774d56b035ddec621376efcf056335a9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StagingData</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void nbnxn_gpu_reduce_staged_outputs</definition>
        <argsstring>(const StagingData &amp;nbst, int iLocality, bool reduceEnergies, bool reduceFshift, real *e_lj, real *e_el, rvec *fshift)</argsstring>
        <name>nbnxn_gpu_reduce_staged_outputs</name>
        <param>
          <type>const StagingData &amp;</type>
          <declname>nbst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iLocality</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reduceEnergies</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reduceFshift</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> *</type>
          <declname>e_lj</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> *</type>
          <declname>e_el</declname>
        </param>
        <param>
          <type>rvec *</type>
          <declname>fshift</declname>
        </param>
        <briefdescription>
<para>Reduce data staged internally in the nbnxn module. </para>        </briefdescription>
        <detaileddescription>
<para>Shift forces and electrostatic/LJ energies copied from the GPU into a module-internal staging area are immediately reduced (CPU-side buffers passed) after having waited for the transfers&apos; completion.</para><para>Note that this function should always be called after the transfers into the staging buffers has completed.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>StagingData</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of staging data </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nbst</parametername>
</parameternamelist>
<parameterdescription>
<para>Nonbonded staging data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">iLocality</parametername>
</parameternamelist>
<parameterdescription>
<para>Interaction locality specifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reduceEnergies</parametername>
</parameternamelist>
<parameterdescription>
<para>True if energy reduction should be done </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reduceFshift</parametername>
</parameternamelist>
<parameterdescription>
<para>True if shift force reduction should be done </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">e_lj</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable to accumulate LJ energy into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">e_el</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable to accumulate electrostatic energy into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">fshift</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array of shift forces to accumulate into </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" line="197" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" bodystart="197" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="nbnxn__gpu__common_8h_1a9b9ba7acd05060803fb13b2f35d51c93" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GpuTimers</type>
          </param>
          <param>
            <type>typename GpuPairlist</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void nbnxn_gpu_accumulate_timings</definition>
        <argsstring>(gmx_wallclock_gpu_nbnxn_t *timings, GpuTimers *timers, const GpuPairlist *plist, int atomLocality, bool didEnergyKernels, bool doTiming)</argsstring>
        <name>nbnxn_gpu_accumulate_timings</name>
        <param>
          <type><ref refid="structgmx__wallclock__gpu__nbnxn__t" kindref="compound">gmx_wallclock_gpu_nbnxn_t</ref> *</type>
          <declname>timings</declname>
        </param>
        <param>
          <type>GpuTimers *</type>
          <declname>timers</declname>
        </param>
        <param>
          <type>const GpuPairlist *</type>
          <declname>plist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>atomLocality</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>didEnergyKernels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doTiming</declname>
        </param>
        <briefdescription>
<para>Do the per-step timing accounting of the nonbonded tasks. </para>        </briefdescription>
        <detaileddescription>
<para>Does timing accumulation and call-count increments for the nonbonded kernels. Note that this function should be called after the current step&apos;s nonbonded nonbonded tasks have completed with the exception of the rolling pruning kernels that are accounted for during the following step.</para><para>NOTE: if timing with multiple GPUs (streams) becomes possible, the counters could end up being inconsistent due to not being incremented on some of the node when this is skipped on empty local domains!</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GpuTimers</parametername>
</parameternamelist>
<parameterdescription>
<para>GPU timers type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GpuPairlist</parametername>
</parameternamelist>
<parameterdescription>
<para>Pair list type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">timings</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the NB GPU timings data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timers</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to GPU timers data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">plist</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the pair list data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">atomLocality</parametername>
</parameternamelist>
<parameterdescription>
<para>Atom locality specifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">didEnergyKernels</parametername>
</parameternamelist>
<parameterdescription>
<para>True if energy kernels have been called in the current step </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">doTiming</parametername>
</parameternamelist>
<parameterdescription>
<para>True if timing is enabled. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" line="246" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" bodystart="246" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="nbnxn__gpu__common_8h_1a99051c642e584444b7d30cf011b3e0d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nbnxn_gpu_try_finish_task</definition>
        <argsstring>(gmx_nbnxn_gpu_t *nb, int flags, int aloc, real *e_lj, real *e_el, rvec *fshift, GpuTaskCompletion completionKind)</argsstring>
        <name>nbnxn_gpu_try_finish_task</name>
        <param>
          <type><ref refid="structgmx__nbnxn__ocl__t" kindref="compound">gmx_nbnxn_gpu_t</ref> *</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aloc</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> *</type>
          <declname>e_lj</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> *</type>
          <declname>e_el</declname>
        </param>
        <param>
          <type>rvec *</type>
          <declname>fshift</declname>
        </param>
        <param>
          <type><ref refid="gpu__utils_8h_1aab3d31c4bd3fcb89aa5d554b125b403e" kindref="member">GpuTaskCompletion</ref></type>
          <declname>completionKind</declname>
        </param>
        <briefdescription>
<para>Attempts to complete nonbonded GPU task. </para>        </briefdescription>
        <detaileddescription>
<para>This function attempts to complete the nonbonded task (both GPU and CPU auxiliary work). Success, i.e. that the tasks completed and results are ready to be consumed, is signaled by the return value (always true if blocking wait mode requested).</para><para>The <computeroutput>completionKind</computeroutput> parameter controls whether the behavior is non-blocking (achieved by passing GpuTaskCompletion::Check) or blocking wait until the results are ready (when GpuTaskCompletion::Wait is passed). As the &quot;Check&quot; mode the function will return immediately if the GPU stream still contain tasks that have not completed, it allows more flexible overlapping of work on the CPU with GPU execution.</para><para>Note that it is only safe to use the results, and to continue to the next MD step when this function has returned true which indicates successful completion of<itemizedlist>
<listitem><para>All nonbonded GPU tasks: both compute and device transfer(s)</para></listitem><listitem><para>auxiliary tasks: updating the internal module state (timing accumulation, list pruning states) and</para></listitem><listitem><para>internal staging reduction of (<computeroutput>fshift</computeroutput>, <computeroutput>e_el</computeroutput>, <computeroutput>e_lj</computeroutput>).</para></listitem></itemizedlist>
</para><para>TODO: improve the handling of outputs e.g. by ensuring that this function explcitly returns the force buffer (instead of that being passed only to <ref refid="nbnxn__gpu_8h_1ac4d9546662f5954ae56e3af4d09e4c4a" kindref="member">nbnxn_gpu_launch_cpyback()</ref>) and by returning the energy and Fshift contributions for some external/centralized reduction.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nb</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonbonded data GPU structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Force flags </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">aloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Atom locality identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">e_lj</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the LJ energy output to accumulate into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">e_el</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the electrostatics energy output to accumulate into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">fshift</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shift force buffer to accumulate into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">completionKind</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether nnbonded task completion should only be checked rather than waited for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the nonbonded tasks associated with <computeroutput>aloc</computeroutput> locality have completed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" line="302" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" bodystart="302" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="nbnxn__gpu__common_8h_1a9ca8210020285dc8c926934c7d4d4b93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbnxn_gpu_wait_finish_task</definition>
        <argsstring>(gmx_nbnxn_gpu_t *nb, int flags, int aloc, real *e_lj, real *e_el, rvec *fshift)</argsstring>
        <name>nbnxn_gpu_wait_finish_task</name>
        <param>
          <type><ref refid="structgmx__nbnxn__ocl__t" kindref="compound">gmx_nbnxn_gpu_t</ref> *</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aloc</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> *</type>
          <declname>e_lj</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> *</type>
          <declname>e_el</declname>
        </param>
        <param>
          <type>rvec *</type>
          <declname>fshift</declname>
        </param>
        <briefdescription>
<para>Wait for the asynchronously launched nonbonded tasks and data transfers to finish. </para>        </briefdescription>
        <detaileddescription>
<para>Completes the nonbonded GPU task blocking until GPU tasks and data transfers to finish.</para><para>Also does timing accounting and reduction of the internal staging buffers. As this is called at the end of the step, it also resets the pair list and pruning flags.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nb</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonbonded data GPU structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Force flags </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">aloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Atom locality identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">e_lj</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the LJ energy output to accumulate into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">e_el</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the electrostatics energy output to accumulate into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">fshift</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shift force buffer to accumulate into </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" line="364" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" bodystart="364" bodyend="373"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Common functions for the different NBNXN GPU implementations. </para>    </briefdescription>
    <detaileddescription>
<internal><para><simplesect kind="author"><para>Szilard Pall <ulink url="mailto:pall.szilard@gmail.com">pall.szilard@gmail.com</ulink> </para></simplesect>
</para></internal>
    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h"/>
  </compounddef>
</doxygen>
