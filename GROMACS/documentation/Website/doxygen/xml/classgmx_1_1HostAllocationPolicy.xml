<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1HostAllocationPolicy" kind="class" prot="public">
    <compoundname>gmx::HostAllocationPolicy</compoundname>
    <includes local="no">gromacs/gpu_utils/hostallocator.h</includes>
    <innerclass refid="classgmx_1_1HostAllocationPolicy_1_1Impl" prot="public">gmx::HostAllocationPolicy::Impl</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classgmx_1_1HostAllocationPolicy_1ab694e3975366f5f27938cc8f1f159452" prot="public" static="no">
        <type>std::true_type</type>
        <definition>using gmx::HostAllocationPolicy::propagate_on_container_copy_assignment =  std::true_type</definition>
        <argsstring></argsstring>
        <name>propagate_on_container_copy_assignment</name>
        <briefdescription>
<para>Specify an allocator trait so that the stateful allocator should propagate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" line="197" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classgmx_1_1HostAllocationPolicy_1ad784820686c118595c511a1c323ada53" prot="public" static="no">
        <type>std::true_type</type>
        <definition>using gmx::HostAllocationPolicy::propagate_on_container_move_assignment =  std::true_type</definition>
        <argsstring></argsstring>
        <name>propagate_on_container_move_assignment</name>
        <briefdescription>
<para>Specify an allocator trait so that the stateful allocator should propagate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" line="199" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classgmx_1_1HostAllocationPolicy_1afd1941ab26a2198c5395d662cbe56e9e" prot="public" static="no">
        <type>std::true_type</type>
        <definition>using gmx::HostAllocationPolicy::propagate_on_container_swap =  std::true_type</definition>
        <argsstring></argsstring>
        <name>propagate_on_container_swap</name>
        <briefdescription>
<para>Specify an allocator trait so that the stateful allocator should propagate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" line="201" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgmx_1_1HostAllocationPolicy_1afa38171491e6c39d1cf49c646ab79b4e" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classgmx_1_1HostAllocationPolicy_1_1Impl" kindref="compound">Impl</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Impl&gt; gmx::HostAllocationPolicy::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
<para>State of the allocator. </para>        </briefdescription>
        <detaileddescription>
<para>This could change through move- or copy-assignment of one policy to another, so isn&apos;t const. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" line="232" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1HostAllocationPolicy_1a75f628187457259e4bef03bbe7fde9cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::HostAllocationPolicy::HostAllocationPolicy</definition>
        <argsstring>()</argsstring>
        <name>HostAllocationPolicy</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" line="138" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.cpp" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1HostAllocationPolicy_1ab09a9975745638737d4eec33dd9463ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t gmx::HostAllocationPolicy::alignment</definition>
        <argsstring>()</argsstring>
        <name>alignment</name>
        <briefdescription>
<para>Return the alignment size currently used by the active pinning policy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" line="140" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.cpp" bodystart="85" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1HostAllocationPolicy_1abea041287228e8b33c288bd9b3713b6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * gmx::HostAllocationPolicy::malloc</definition>
        <argsstring>(std::size_t bytes) const noexcept</argsstring>
        <name>malloc</name>
        <param>
          <type>std::size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Allocate and perhaps pin page-aligned memory suitable for e.g. GPU transfers. </para>        </briefdescription>
        <detaileddescription>
<para>Before attempting to allocate, <ref refid="classgmx_1_1HostAllocationPolicy_1af5d51a9c9df85a8b402a3451c51d17c5" kindref="member">unpin()</ref> is called. After a successful allocation, <ref refid="classgmx_1_1HostAllocationPolicy_1a7c860b64868b432e71f9a2ab28426244" kindref="member">pin()</ref> is called. (Whether these do things depends on the PinningPolicy that is in effect.)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of memory (bytes) to allocate. It is valid to ask for 0 bytes, which will return a non-null pointer that is properly aligned and padded (but that you should not use).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Valid pointer if the allocation+optional pinning worked, otherwise nullptr.</para></simplesect>
<simplesect kind="note"><para>Memory allocated with this routine must be released with <ref refid="classgmx_1_1HostAllocationPolicy_1ae9eebd779172275fb09af48d4985fb4d" kindref="member">gmx::HostAllocationPolicy::free()</ref>, and absolutely not the system <ref refid="classgmx_1_1HostAllocationPolicy_1ae9eebd779172275fb09af48d4985fb4d" kindref="member">free()</ref>.</para></simplesect>
Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" line="160" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.cpp" bodystart="91" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1HostAllocationPolicy_1ae9eebd779172275fb09af48d4985fb4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::HostAllocationPolicy::free</definition>
        <argsstring>(void *buffer) const noexcept</argsstring>
        <name>free</name>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Free the memory, after unpinning (if appropriate). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pointer previously returned from <ref refid="classgmx_1_1HostAllocationPolicy_1abea041287228e8b33c288bd9b3713b6c" kindref="member">gmx::HostAllocationPolicy::malloc()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This routine should only be called with pointers obtained from gmx:HostAllocationPolicy::<ref refid="classgmx_1_1HostAllocationPolicy_1abea041287228e8b33c288bd9b3713b6c" kindref="member">malloc()</ref>, and absolutely not any pointers obtained the system <ref refid="classgmx_1_1HostAllocationPolicy_1abea041287228e8b33c288bd9b3713b6c" kindref="member">malloc()</ref>.</para></simplesect>
Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" line="172" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.cpp" bodystart="111" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1HostAllocationPolicy_1a7c860b64868b432e71f9a2ab28426244" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::HostAllocationPolicy::pin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>pin</name>
        <briefdescription>
<para>Pin the allocation to physical memory, if appropriate. </para>        </briefdescription>
        <detaileddescription>
<para>If the allocation policy is not in pinning mode, or the allocation is empty, ot the allocation is already pinned, then do nothing.</para><para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" line="181" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.cpp" bodystart="147" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1HostAllocationPolicy_1af5d51a9c9df85a8b402a3451c51d17c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::HostAllocationPolicy::unpin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>unpin</name>
        <briefdescription>
<para>Unpin the allocation, if appropriate. </para>        </briefdescription>
        <detaileddescription>
<para>Regardless of the allocation policy, unpin the memory if previously pinned, otherwise do nothing.</para><para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" line="189" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.cpp" bodystart="169" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1HostAllocationPolicy_1ac568d5bd9864470a4a95cff8a0859b12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegmx_1abe4caed0469c0de84e0c1c1a81972b38" kindref="member">PinningPolicy</ref></type>
        <definition>PinningPolicy gmx::HostAllocationPolicy::pinningPolicy</definition>
        <argsstring>() const </argsstring>
        <name>pinningPolicy</name>
        <briefdescription>
<para>Return the current pinning policy (which is semi-independent of whether the buffer is actually pinned). </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" line="195" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.cpp" bodystart="131" bodyend="134"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgmx_1_1HostAllocationPolicy_1afd58d4c53ec75032534feaca2796d8fd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::HostAllocationPolicy::setPinningPolicy</definition>
        <argsstring>(PinningPolicy pinningPolicy)</argsstring>
        <name>setPinningPolicy</name>
        <param>
          <type><ref refid="namespacegmx_1abe4caed0469c0de84e0c1c1a81972b38" kindref="member">PinningPolicy</ref></type>
          <declname>pinningPolicy</declname>
        </param>
        <briefdescription>
<para>Set the current pinning policy. </para>        </briefdescription>
        <detaileddescription>
<para>Does not pin any current buffer. Use changePinningPolicy to orchestrate the necessary unpin, allocate, copy, pin for effectively changing the pinning policy of a HostVector.</para><para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" line="212" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.cpp" bodystart="136" bodyend="145"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classgmx_1_1HostAllocationPolicy_1a87e39d62fe162cd8ee9dc661b8af28fd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>friend void</type>
        <definition>void changePinningPolicy</definition>
        <argsstring>(HostVector&lt; T &gt; *v, PinningPolicy pinningPolicy)</argsstring>
        <name>changePinningPolicy</name>
        <param>
          <type><ref refid="namespacegmx_1a15043f587f8595747fbc7c4dee890cb2" kindref="member">HostVector</ref>&lt; T &gt; *</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="namespacegmx_1abe4caed0469c0de84e0c1c1a81972b38" kindref="member">PinningPolicy</ref></type>
          <declname>pinningPolicy</declname>
        </param>
        <briefdescription>
<para>Declare as a friend function the only supported way to change the pinning policy. </para>        </briefdescription>
        <detaileddescription>
<para>When the pinning policy changes, we want the state of the allocation to match the new policy. However, that requires a copy and swap of the buffers, which can only take place at the level of the container. So we wrap the required operations in a helper friend function.</para><para>Of course, if there is no allocation because the vector is empty, then nothing will change.</para><para>If the vector has contents, then a full reallocation and buffer copy are needed if the policy change requires tighter restrictions, and desirable even if the policy change requires looser restrictions. That cost is OK, because GROMACS will do this operation very rarely (e.g. when auto-tuning and deciding to switch whether a task will run on a GPU, or not). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" line="225" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" bodystart="244" bodyend="264"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Policy class for configuring <ref refid="classgmx_1_1Allocator" kindref="compound">gmx::Allocator</ref>, to manage allocations of memory that may be needed for e.g. GPU transfers. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal />  This allocator has state, so is most useful in cases where it is not known at compile time whether the allocated memory will be transferred to some device. It will increase the size of containers that use it. If the GROMACS build is configured with CUDA support, then memory will be allocated with PageAlignedAllocator, and that page pinned to physical memory if the pinning mode has been activated. If pinning mode is deactivated, or the GROMACS build does not support CUDA, then the memory will be allocated with AlignedAllocator. The <ref refid="classgmx_1_1HostAllocationPolicy_1a7c860b64868b432e71f9a2ab28426244" kindref="member">pin()</ref> and <ref refid="classgmx_1_1HostAllocationPolicy_1af5d51a9c9df85a8b402a3451c51d17c5" kindref="member">unpin()</ref> methods work with the CUDA build, and silently do nothing otherwise. In future, we may modify or generalize this to work differently in other cases.</para><para>The intended use is to configure <ref refid="classgmx_1_1Allocator" kindref="compound">gmx::Allocator</ref> with this class as its policy class, and then to use e.g. std::vector::get_allocator().getPolicy() to control whether the allocation policy should activate its pinning mode. The policy object can also be used to explicitly <ref refid="classgmx_1_1HostAllocationPolicy_1a7c860b64868b432e71f9a2ab28426244" kindref="member">pin()</ref> and <ref refid="classgmx_1_1HostAllocationPolicy_1af5d51a9c9df85a8b402a3451c51d17c5" kindref="member">unpin()</ref> the buffer when it is using PinningPolicy::CanBePinned. The policy object is returned by value (as required by the C++ standard for get_allocator(), which copies a std::shared_ptr, so the policy object should be retrieved sparingly, e.g. only upon resize of the allocation. (Normal operation of the vector, e.g. during resize, incurs only the cost of the pointer indirection needed to consult the current state of the allocation policy.)</para><para><xrefsect id="todo_1_todo000031"><xreftitle>Todo</xreftitle><xrefdescription><para>As a minor optimization, consider also having a stateless version of this policy, which might be slightly faster or more convenient to use in the cases where it is known at compile time that the allocation will be used to transfer to a GPU. </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" line="135" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/gpu_utils/hostallocator.h" bodystart="134" bodyend="233"/>
    <listofallmembers>
      <member refid="classgmx_1_1HostAllocationPolicy_1ab09a9975745638737d4eec33dd9463ef" prot="public" virt="non-virtual"><scope>gmx::HostAllocationPolicy</scope><name>alignment</name></member>
      <member refid="classgmx_1_1HostAllocationPolicy_1a87e39d62fe162cd8ee9dc661b8af28fd" prot="private" virt="non-virtual"><scope>gmx::HostAllocationPolicy</scope><name>changePinningPolicy</name></member>
      <member refid="classgmx_1_1HostAllocationPolicy_1ae9eebd779172275fb09af48d4985fb4d" prot="public" virt="non-virtual"><scope>gmx::HostAllocationPolicy</scope><name>free</name></member>
      <member refid="classgmx_1_1HostAllocationPolicy_1a75f628187457259e4bef03bbe7fde9cd" prot="public" virt="non-virtual"><scope>gmx::HostAllocationPolicy</scope><name>HostAllocationPolicy</name></member>
      <member refid="classgmx_1_1HostAllocationPolicy_1afa38171491e6c39d1cf49c646ab79b4e" prot="private" virt="non-virtual"><scope>gmx::HostAllocationPolicy</scope><name>impl_</name></member>
      <member refid="classgmx_1_1HostAllocationPolicy_1abea041287228e8b33c288bd9b3713b6c" prot="public" virt="non-virtual"><scope>gmx::HostAllocationPolicy</scope><name>malloc</name></member>
      <member refid="classgmx_1_1HostAllocationPolicy_1a7c860b64868b432e71f9a2ab28426244" prot="public" virt="non-virtual"><scope>gmx::HostAllocationPolicy</scope><name>pin</name></member>
      <member refid="classgmx_1_1HostAllocationPolicy_1ac568d5bd9864470a4a95cff8a0859b12" prot="public" virt="non-virtual"><scope>gmx::HostAllocationPolicy</scope><name>pinningPolicy</name></member>
      <member refid="classgmx_1_1HostAllocationPolicy_1ab694e3975366f5f27938cc8f1f159452" prot="public" virt="non-virtual"><scope>gmx::HostAllocationPolicy</scope><name>propagate_on_container_copy_assignment</name></member>
      <member refid="classgmx_1_1HostAllocationPolicy_1ad784820686c118595c511a1c323ada53" prot="public" virt="non-virtual"><scope>gmx::HostAllocationPolicy</scope><name>propagate_on_container_move_assignment</name></member>
      <member refid="classgmx_1_1HostAllocationPolicy_1afd1941ab26a2198c5395d662cbe56e9e" prot="public" virt="non-virtual"><scope>gmx::HostAllocationPolicy</scope><name>propagate_on_container_swap</name></member>
      <member refid="classgmx_1_1HostAllocationPolicy_1afd58d4c53ec75032534feaca2796d8fd" prot="private" virt="non-virtual"><scope>gmx::HostAllocationPolicy</scope><name>setPinningPolicy</name></member>
      <member refid="classgmx_1_1HostAllocationPolicy_1af5d51a9c9df85a8b402a3451c51d17c5" prot="public" virt="non-virtual"><scope>gmx::HostAllocationPolicy</scope><name>unpin</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
