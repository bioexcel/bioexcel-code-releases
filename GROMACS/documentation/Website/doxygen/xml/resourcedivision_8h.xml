<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="resourcedivision_8h" kind="file">
    <compoundname>resourcedivision.h</compoundname>
    <includes local="no">cstdio</includes>
    <includes local="no">vector</includes>
    <includes refid="pme_8h" local="yes">gromacs/ewald/pme.h</includes>
    <includes refid="basedefinitions_8h" local="yes">gromacs/utility/basedefinitions.h</includes>
    <includedby refid="resourcedivision_8cpp" local="yes">src/gromacs/taskassignment/resourcedivision.cpp</includedby>
    <includedby refid="runner_8cpp" local="yes">src/programs/mdrun/runner.cpp</includedby>
    <incdepgraph>
      <node id="25802">
        <label>gromacs/utility/current_function.h</label>
        <link refid="current__function_8h"/>
      </node>
      <node id="25795">
        <label>iterator</label>
      </node>
      <node id="25800">
        <label>stdint.h</label>
      </node>
      <node id="25790">
        <label>gromacs/ewald/pme.h</label>
        <link refid="pme_8h"/>
        <childnode refid="25791" relation="include">
        </childnode>
        <childnode refid="25792" relation="include">
        </childnode>
        <childnode refid="25799" relation="include">
        </childnode>
        <childnode refid="25803" relation="include">
        </childnode>
      </node>
      <node id="25796">
        <label>stdexcept</label>
      </node>
      <node id="25791">
        <label>string</label>
      </node>
      <node id="25798">
        <label>gromacs/utility/gmxassert.h</label>
        <link refid="gmxassert_8h"/>
        <childnode refid="25799" relation="include">
        </childnode>
        <childnode refid="25802" relation="include">
        </childnode>
      </node>
      <node id="25788">
        <label>cstdio</label>
      </node>
      <node id="25803">
        <label>gromacs/utility/real.h</label>
        <link refid="real_8h"/>
      </node>
      <node id="25789">
        <label>vector</label>
      </node>
      <node id="25797">
        <label>utility</label>
      </node>
      <node id="25794">
        <label>array</label>
      </node>
      <node id="25799">
        <label>gromacs/utility/basedefinitions.h</label>
        <link refid="basedefinitions_8h"/>
        <childnode refid="25800" relation="include">
        </childnode>
        <childnode refid="25801" relation="include">
        </childnode>
      </node>
      <node id="25792">
        <label>gromacs/utility/arrayref.h</label>
        <link refid="arrayref_8h"/>
        <childnode refid="25793" relation="include">
        </childnode>
        <childnode refid="25794" relation="include">
        </childnode>
        <childnode refid="25795" relation="include">
        </childnode>
        <childnode refid="25796" relation="include">
        </childnode>
        <childnode refid="25797" relation="include">
        </childnode>
        <childnode refid="25789" relation="include">
        </childnode>
        <childnode refid="25798" relation="include">
        </childnode>
      </node>
      <node id="25793">
        <label>cstddef</label>
      </node>
      <node id="25787">
        <label>src/gromacs/taskassignment/resourcedivision.h</label>
        <link refid="resourcedivision.h"/>
        <childnode refid="25788" relation="include">
        </childnode>
        <childnode refid="25789" relation="include">
        </childnode>
        <childnode refid="25790" relation="include">
        </childnode>
        <childnode refid="25799" relation="include">
        </childnode>
      </node>
      <node id="25801">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="25805">
        <label>src/gromacs/taskassignment/resourcedivision.cpp</label>
        <link refid="resourcedivision_8cpp"/>
      </node>
      <node id="25806">
        <label>src/programs/mdrun/runner.cpp</label>
        <link refid="runner_8cpp"/>
      </node>
      <node id="25804">
        <label>src/gromacs/taskassignment/resourcedivision.h</label>
        <link refid="resourcedivision.h"/>
        <childnode refid="25805" relation="include">
        </childnode>
        <childnode refid="25806" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacegmx">gmx</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="resourcedivision_8h_1a38da969f76b23e65e63d6c278c2c3783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_nthreads_mpi</definition>
        <argsstring>(const gmx_hw_info_t *hwinfo, gmx_hw_opt_t *hw_opt, const std::vector&lt; int &gt; &amp;gpuIdsToUse, bool nonbondedOnGpu, bool pmeOnGpu, const t_inputrec *inputrec, const gmx_mtop_t *mtop, const gmx::MDLogger &amp;mdlog, bool doMembed)</argsstring>
        <name>get_nthreads_mpi</name>
        <param>
          <type>const <ref refid="structgmx__hw__info__t" kindref="compound">gmx_hw_info_t</ref> *</type>
          <declname>hwinfo</declname>
        </param>
        <param>
          <type><ref refid="structgmx__hw__opt__t" kindref="compound">gmx_hw_opt_t</ref> *</type>
          <declname>hw_opt</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>gpuIdsToUse</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>nonbondedOnGpu</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pmeOnGpu</declname>
        </param>
        <param>
          <type>const <ref refid="structt__inputrec" kindref="compound">t_inputrec</ref> *</type>
          <declname>inputrec</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__mtop__t" kindref="compound">gmx_mtop_t</ref> *</type>
          <declname>mtop</declname>
        </param>
        <param>
          <type>const <ref refid="classgmx_1_1MDLogger" kindref="compound">gmx::MDLogger</ref> &amp;</type>
          <declname>mdlog</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doMembed</declname>
        </param>
        <briefdescription>
<para>Return the number of threads to use for thread-MPI based on how many were requested, which algorithms we&apos;re using, and how many particles there are. At the point we have already called check_and_update_hw_opt. Thus all options should be internally consistent and consistent with the hardware, except that ntmpi could be larger than number of GPUs. If necessary, this function will modify hw_opt-&gt;nthreads_omp. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/taskassignment/resourcedivision.h" line="74" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/taskassignment/resourcedivision.cpp" bodystart="344" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="resourcedivision_8h_1a25ab037bd5b969db021a42baecd21a7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void check_resource_division_efficiency</definition>
        <argsstring>(const gmx_hw_info_t *hwinfo, bool willUsePhysicalGpu, gmx_bool bNtOmpOptionSet, t_commrec *cr, const gmx::MDLogger &amp;mdlog)</argsstring>
        <name>check_resource_division_efficiency</name>
        <param>
          <type>const <ref refid="structgmx__hw__info__t" kindref="compound">gmx_hw_info_t</ref> *</type>
          <declname>hwinfo</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>willUsePhysicalGpu</declname>
        </param>
        <param>
          <type><ref refid="basedefinitions_8h_1a8fddad319f226e856400d190198d5151" kindref="member">gmx_bool</ref></type>
          <declname>bNtOmpOptionSet</declname>
        </param>
        <param>
          <type><ref refid="structt__commrec" kindref="compound">t_commrec</ref> *</type>
          <declname>cr</declname>
        </param>
        <param>
          <type>const <ref refid="classgmx_1_1MDLogger" kindref="compound">gmx::MDLogger</ref> &amp;</type>
          <declname>mdlog</declname>
        </param>
        <briefdescription>
<para>Check if the number of OpenMP threads is within reasonable range considering the hardware used. This is a crude check, but mainly intended to catch cases where the user starts 1 MPI rank per hardware thread or 1 rank per physical node. With a sub-optimal setup a note is printed to fplog and stderr when bNtOmpSet==TRUE; with bNtOptOptionSet==FALSE a fatal error is issued. This function should be called after thread-MPI and OpenMP are set up. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/taskassignment/resourcedivision.h" line="92" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/taskassignment/resourcedivision.cpp" bodystart="541" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="resourcedivision_8h_1abe9cc899c0172b6bd56af0b592880e47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void check_and_update_hw_opt_1</definition>
        <argsstring>(const gmx::MDLogger &amp;mdlog, gmx_hw_opt_t *hw_opt, const t_commrec *cr, int nPmeRanks)</argsstring>
        <name>check_and_update_hw_opt_1</name>
        <param>
          <type>const <ref refid="classgmx_1_1MDLogger" kindref="compound">gmx::MDLogger</ref> &amp;</type>
          <declname>mdlog</declname>
        </param>
        <param>
          <type><ref refid="structgmx__hw__opt__t" kindref="compound">gmx_hw_opt_t</ref> *</type>
          <declname>hw_opt</declname>
        </param>
        <param>
          <type>const <ref refid="structt__commrec" kindref="compound">t_commrec</ref> *</type>
          <declname>cr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nPmeRanks</declname>
        </param>
        <briefdescription>
<para>Checks we can do when we don&apos;t (yet) know the cut-off scheme. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/taskassignment/resourcedivision.h" line="99" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/taskassignment/resourcedivision.cpp" bodystart="653" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="resourcedivision_8h_1aceb1c631099fde7f6e7a0dbe3b290881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void check_and_update_hw_opt_2</definition>
        <argsstring>(gmx_hw_opt_t *hw_opt, int cutoff_scheme)</argsstring>
        <name>check_and_update_hw_opt_2</name>
        <param>
          <type><ref refid="structgmx__hw__opt__t" kindref="compound">gmx_hw_opt_t</ref> *</type>
          <declname>hw_opt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cutoff_scheme</declname>
        </param>
        <briefdescription>
<para>Checks we can do when we know the cut-off scheme. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/taskassignment/resourcedivision.h" line="105" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/taskassignment/resourcedivision.cpp" bodystart="781" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="resourcedivision_8h_1a34de6cd9f0f582087967f2348507dd7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void checkAndUpdateRequestedNumOpenmpThreads</definition>
        <argsstring>(gmx_hw_opt_t *hw_opt, const gmx_hw_info_t &amp;hwinfo, const t_commrec *cr, PmeRunMode pmeRunMode, const gmx_mtop_t &amp;mtop)</argsstring>
        <name>checkAndUpdateRequestedNumOpenmpThreads</name>
        <param>
          <type><ref refid="structgmx__hw__opt__t" kindref="compound">gmx_hw_opt_t</ref> *</type>
          <declname>hw_opt</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__hw__info__t" kindref="compound">gmx_hw_info_t</ref> &amp;</type>
          <declname>hwinfo</declname>
        </param>
        <param>
          <type>const <ref refid="structt__commrec" kindref="compound">t_commrec</ref> *</type>
          <declname>cr</declname>
        </param>
        <param>
          <type><ref refid="pme_8h_1adc082ed1af9a4868af13352373ed3791" kindref="member">PmeRunMode</ref></type>
          <declname>pmeRunMode</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__mtop__t" kindref="compound">gmx_mtop_t</ref> &amp;</type>
          <declname>mtop</declname>
        </param>
        <briefdescription>
<para>Check, and if necessary update, the number of OpenMP threads requested. </para>        </briefdescription>
        <detaileddescription>
<para>Should be called when we know the MPI rank count and PME run mode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/taskassignment/resourcedivision.h" line="112" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/taskassignment/resourcedivision.cpp" bodystart="797" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="resourcedivision_8h_1acfd3d9aa180894e77178f6ccb79f943a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void checkHardwareOversubscription</definition>
        <argsstring>(int numThreadsOnThisRank, const gmx::HardwareTopology &amp;hwTop, const t_commrec *cr, const gmx::MDLogger &amp;mdlog)</argsstring>
        <name>checkHardwareOversubscription</name>
        <param>
          <type>int</type>
          <declname>numThreadsOnThisRank</declname>
        </param>
        <param>
          <type>const <ref refid="classgmx_1_1HardwareTopology" kindref="compound">gmx::HardwareTopology</ref> &amp;</type>
          <declname>hwTop</declname>
        </param>
        <param>
          <type>const <ref refid="structt__commrec" kindref="compound">t_commrec</ref> *</type>
          <declname>cr</declname>
        </param>
        <param>
          <type>const <ref refid="classgmx_1_1MDLogger" kindref="compound">gmx::MDLogger</ref> &amp;</type>
          <declname>mdlog</declname>
        </param>
        <briefdescription>
<para>Warns for oversubscribing the hardware threads, when that is the case. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/taskassignment/resourcedivision.h" line="120" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/taskassignment/resourcedivision.cpp" bodystart="879" bodyend="941"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Declares utility functionality for dividing resources and checking for consistency and usefulness. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal />  <simplesect kind="author"><para>Mark Abraham <ulink url="mailto:mark.j.abraham@gmail.com">mark.j.abraham@gmail.com</ulink> </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/taskassignment/resourcedivision.h"/>
  </compounddef>
</doxygen>
