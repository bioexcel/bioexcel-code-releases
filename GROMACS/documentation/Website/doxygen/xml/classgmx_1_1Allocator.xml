<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1Allocator" kind="class" prot="public">
    <compoundname>gmx::Allocator</compoundname>
    <basecompoundref prot="public" virt="non-virtual">AllocationPolicy</basecompoundref>
    <includes local="no">gromacs/utility/allocator.h</includes>
    <innerclass refid="structgmx_1_1Allocator_1_1rebind" prot="public">gmx::Allocator::rebind</innerclass>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>typename AllocationPolicy</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classgmx_1_1Allocator_1a52ff4b2b565b8fd044b60435dde36cb1" prot="public" static="no">
        <type>T</type>
        <definition>typedef T gmx::Allocator&lt; T, AllocationPolicy &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
<para>Type of allocated elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="103" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classgmx_1_1Allocator_1a36defaf0a6325bb34eea401fe8b63240" prot="public" static="no">
        <type>T &amp;</type>
        <definition>typedef T&amp; gmx::Allocator&lt; T, AllocationPolicy &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
<para>Reference to allocated elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="104" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classgmx_1_1Allocator_1a253b7a6112bbac509fea1828cd47854e" prot="public" static="no">
        <type>const T &amp;</type>
        <definition>typedef const T&amp; gmx::Allocator&lt; T, AllocationPolicy &gt;::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
<para>Constant reference to allocated elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="105" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classgmx_1_1Allocator_1af87f6d52282a6833058ce45ac7f92920" prot="public" static="no">
        <type>T *</type>
        <definition>typedef T* gmx::Allocator&lt; T, AllocationPolicy &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
<para>Pointer to allocated elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="106" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classgmx_1_1Allocator_1a9bb62396cdb47cf800966ae6a56d7fb7" prot="public" static="no">
        <type>const T *</type>
        <definition>typedef const T* gmx::Allocator&lt; T, AllocationPolicy &gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
<para>Constant pointer to allocated elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="107" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classgmx_1_1Allocator_1a12379a4355abb23868e0542abf1d8725" prot="public" static="no">
        <type>std::size_t</type>
        <definition>typedef std::size_t gmx::Allocator&lt; T, AllocationPolicy &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
<para>Integer type to use for size of objects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="108" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classgmx_1_1Allocator_1a2091e39bcae03a85d824b41d655451fc" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>typedef std::ptrdiff_t gmx::Allocator&lt; T, AllocationPolicy &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
<para>Type to hold differences between pointers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="109" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classgmx_1_1Allocator_1ad38e018883067a0cacebbbc4df532de1" prot="public" static="no">
        <type>AllocationPolicy</type>
        <definition>typedef AllocationPolicy gmx::Allocator&lt; T, AllocationPolicy &gt;::allocation_policy</definition>
        <argsstring></argsstring>
        <name>allocation_policy</name>
        <briefdescription>
<para>Type of the AllocationPolicy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="112" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1Allocator_1aff6e796fd68d6f9e7b9af6ffd9c8e2d6" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>gmx::Allocator&lt; T, AllocationPolicy &gt;::Allocator</definition>
        <argsstring>(const Allocator&lt; U, AllocationPolicy &gt; &amp;)</argsstring>
        <name>Allocator</name>
        <param>
          <type>const <ref refid="classgmx_1_1Allocator" kindref="compound">Allocator</ref>&lt; U, AllocationPolicy &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Templated copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para>This template constructor cannot be auto-generated, and is normally unused, except e.g. MSVC2015 standard library uses it in debug mode, presumably to implement some checks. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="136" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Allocator_1ace00f232d83508c89bfb218307ecabeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::Allocator&lt; T, AllocationPolicy &gt;::Allocator</definition>
        <argsstring>()=default</argsstring>
        <name>Allocator</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>No constructor can be auto-generated in the presence of any user-defined constructor, but we want the default constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Allocator_1a7e1fded5606714bab5418ff5400e6e35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gmx::Allocator&lt; T, AllocationPolicy &gt;::Allocator</definition>
        <argsstring>(const AllocationPolicy &amp;p)</argsstring>
        <name>Allocator</name>
        <param>
          <type>const AllocationPolicy &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Constructor to accept an AllocationPolicy. </para>        </briefdescription>
        <detaileddescription>
<para>This is useful for AllocationPolicies with state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="149" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Allocator_1afd3f127c814c0331a9cea3da8a0322a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgmx_1_1Allocator_1af87f6d52282a6833058ce45ac7f92920" kindref="member">pointer</ref></type>
        <definition>pointer gmx::Allocator&lt; T, AllocationPolicy &gt;::address</definition>
        <argsstring>(reference r) const </argsstring>
        <name>address</name>
        <param>
          <type><ref refid="classgmx_1_1Allocator_1a36defaf0a6325bb34eea401fe8b63240" kindref="member">reference</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Return address of an object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to object of type T </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to T memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="157" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Allocator_1a489865152903a4afb74bd0dccc192e88" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgmx_1_1Allocator_1a9bb62396cdb47cf800966ae6a56d7fb7" kindref="member">const_pointer</ref></type>
        <definition>const_pointer gmx::Allocator&lt; T, AllocationPolicy &gt;::address</definition>
        <argsstring>(const_reference r) const </argsstring>
        <name>address</name>
        <param>
          <type><ref refid="classgmx_1_1Allocator_1a253b7a6112bbac509fea1828cd47854e" kindref="member">const_reference</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Return address of a const object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Const reference to object of type T </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to T memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="165" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Allocator_1a05badb023820e38444720cc9a53fe9f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgmx_1_1Allocator_1af87f6d52282a6833058ce45ac7f92920" kindref="member">pointer</ref></type>
        <definition>pointer gmx::Allocator&lt; T, AllocationPolicy &gt;::allocate</definition>
        <argsstring>(std::size_t n, typename std::allocator&lt; void &gt;::const_pointer hint=nullptr)</argsstring>
        <name>allocate</name>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>typename std::allocator&lt; void &gt;::<ref refid="classgmx_1_1Allocator_1a9bb62396cdb47cf800966ae6a56d7fb7" kindref="member">const_pointer</ref></type>
          <declname>hint</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Do the actual memory allocation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements of type T to allocate. n can be 0 bytes, which will return a non-null properly aligned and padded pointer that should not be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hint</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional value returned from previous call to allocate. For now this is not used. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to allocated memory</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if the allocation fails. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="179" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="179" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Allocator_1a9fff7ab9e9339f243535c5bca7eaab0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::Allocator&lt; T, AllocationPolicy &gt;::deallocate</definition>
        <argsstring>(pointer p, std::size_t n)</argsstring>
        <name>deallocate</name>
        <param>
          <type><ref refid="classgmx_1_1Allocator_1af87f6d52282a6833058ce45ac7f92920" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Release memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to previously allocated memory returned from <ref refid="classgmx_1_1Allocator_1a05badb023820e38444720cc9a53fe9f8" kindref="member">allocate()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of objects previously passed to <ref refid="classgmx_1_1Allocator_1a05badb023820e38444720cc9a53fe9f8" kindref="member">allocate()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="199" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Allocator_1a7209c45b6693a651b37d1a8806c28b25" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>AllocationPolicy</type>
        <definition>AllocationPolicy gmx::Allocator&lt; T, AllocationPolicy &gt;::getPolicy</definition>
        <argsstring>() const </argsstring>
        <name>getPolicy</name>
        <briefdescription>
<para>Return the policy object for this allocator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="205" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Allocator_1a1b1f11b0928ba7849d2082eae759094d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::Allocator&lt; T, AllocationPolicy &gt;::construct</definition>
        <argsstring>(pointer p, Args &amp;&amp;...args)</argsstring>
        <name>construct</name>
        <param>
          <type><ref refid="classgmx_1_1Allocator_1af87f6d52282a6833058ce45ac7f92920" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Construct an object without allocating memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable-length list of types for constructor args </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Adress of memory where to construct object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable-length list of arguments to constructor </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="218" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="218" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Allocator_1ae87823e74db870801b59affe0390c3ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::Allocator&lt; T, AllocationPolicy &gt;::destroy</definition>
        <argsstring>(pointer p)</argsstring>
        <name>destroy</name>
        <param>
          <type><ref refid="classgmx_1_1Allocator_1af87f6d52282a6833058ce45ac7f92920" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Call the destructor of object without releasing memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of memory where to destroy object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="225" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Allocator_1a84a1dfa4400d3aca70526e19f1d0d69a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t gmx::Allocator&lt; T, AllocationPolicy &gt;::max_size</definition>
        <argsstring>() const </argsstring>
        <name>max_size</name>
        <briefdescription>
<para>Return largest number of objects that can be allocated. </para>        </briefdescription>
        <detaileddescription>
<para>This will be set such that the number of objects T multiplied by the size of each object is the largest value that can be represented by size_type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="234" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="234" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Allocator_1adb705d3e4c2aa0da9c1720badad6763a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool gmx::Allocator&lt; T, AllocationPolicy &gt;::operator==</definition>
        <argsstring>(const Allocator&lt; T2, AllocationPolicy &gt; &amp;) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classgmx_1_1Allocator" kindref="compound">Allocator</ref>&lt; T2, AllocationPolicy &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Return true if two allocators are identical. </para>        </briefdescription>
        <detaileddescription>
<para>This is a member function of the left-hand-side allocator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="242" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="242" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1Allocator_1afc167365c488e4909ae78c64ea1afc7e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::Allocator&lt; T, AllocationPolicy &gt;::operator!=</definition>
        <argsstring>(const Allocator &amp;rhs) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classgmx_1_1Allocator" kindref="compound">Allocator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return true if two allocators are different. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Other allocator.</para></parameterdescription>
</parameteritem>
</parameterlist>
This is a member function of the left-hand-side allocator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="251" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="251" bodyend="251"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Policy-based memory allocator. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal />  <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of objects to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AllocationPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>Policy of (matching) allocation and deallocation functions.</para></parameterdescription>
</parameteritem>
</parameterlist>
This class can be used for the optional allocator template parameter in standard library containers. It must be configured with both the type of object to allocate, and an AllocationPolicy which effectively wraps a matching pair of malloc and free functions. This permits implementing a family of related allocators e.g. with SIMD alignment, GPU host-side page locking, or perhaps both, in a way that preserves a common programming interface and duplicates minimal code.</para><para>AllocationPolicy is used as a base class, so that if AllocationPolicy is stateless, then the empty base optimization will ensure that Allocation is also stateless, and objects made with the <ref refid="classgmx_1_1Allocator" kindref="compound">Allocator</ref> will incur no size penalty. (Embedding an AllocationPolicy object incurs a size penalty always, even if the object is empty.) Normally a stateless allocator will be used.</para><para>However, an AllocationPolicy with state might be desirable for simplifying writing code that needs to allocate suitably for a transfer to a GPU. That code needs to specify an <ref refid="classgmx_1_1Allocator" kindref="compound">Allocator</ref> that can do the right job, which can be stateless. However, if we have code that will not know until run time whether a GPU transfer will occur, then the allocator needs to be aware of the state. That will increase the size of a container that uses the stateful allocator.</para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Instead of a GROMACS exception object, we throw the standard one on allocation failures to make it as compatible as possible with the errors expected by code using the standard library containers. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="847">
        <label>AllocationPolicy</label>
      </node>
      <node id="846">
        <label>gmx::Allocator&lt; T, AllocationPolicy &gt;</label>
        <link refid="classgmx_1_1Allocator"/>
        <childnode refid="847" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="849">
        <label>AllocationPolicy</label>
      </node>
      <node id="848">
        <label>gmx::Allocator&lt; T, AllocationPolicy &gt;</label>
        <link refid="classgmx_1_1Allocator"/>
        <childnode refid="849" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" line="99" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/allocator.h" bodystart="98" bodyend="252"/>
    <listofallmembers>
      <member refid="classgmx_1_1Allocator_1afd3f127c814c0331a9cea3da8a0322a3" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>address</name></member>
      <member refid="classgmx_1_1Allocator_1a489865152903a4afb74bd0dccc192e88" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>address</name></member>
      <member refid="classgmx_1_1Allocator_1a05badb023820e38444720cc9a53fe9f8" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>allocate</name></member>
      <member refid="classgmx_1_1Allocator_1ad38e018883067a0cacebbbc4df532de1" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>allocation_policy</name></member>
      <member refid="classgmx_1_1Allocator_1aff6e796fd68d6f9e7b9af6ffd9c8e2d6" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>Allocator</name></member>
      <member refid="classgmx_1_1Allocator_1ace00f232d83508c89bfb218307ecabeb" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>Allocator</name></member>
      <member refid="classgmx_1_1Allocator_1a7e1fded5606714bab5418ff5400e6e35" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>Allocator</name></member>
      <member refid="classgmx_1_1Allocator_1a9bb62396cdb47cf800966ae6a56d7fb7" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>const_pointer</name></member>
      <member refid="classgmx_1_1Allocator_1a253b7a6112bbac509fea1828cd47854e" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>const_reference</name></member>
      <member refid="classgmx_1_1Allocator_1a1b1f11b0928ba7849d2082eae759094d" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>construct</name></member>
      <member refid="classgmx_1_1Allocator_1a9fff7ab9e9339f243535c5bca7eaab0a" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>deallocate</name></member>
      <member refid="classgmx_1_1Allocator_1ae87823e74db870801b59affe0390c3ba" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>destroy</name></member>
      <member refid="classgmx_1_1Allocator_1a2091e39bcae03a85d824b41d655451fc" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>difference_type</name></member>
      <member refid="classgmx_1_1Allocator_1a7209c45b6693a651b37d1a8806c28b25" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>getPolicy</name></member>
      <member refid="classgmx_1_1Allocator_1a84a1dfa4400d3aca70526e19f1d0d69a" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>max_size</name></member>
      <member refid="classgmx_1_1Allocator_1afc167365c488e4909ae78c64ea1afc7e" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>operator!=</name></member>
      <member refid="classgmx_1_1Allocator_1adb705d3e4c2aa0da9c1720badad6763a" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>operator==</name></member>
      <member refid="classgmx_1_1Allocator_1af87f6d52282a6833058ce45ac7f92920" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>pointer</name></member>
      <member refid="classgmx_1_1Allocator_1a36defaf0a6325bb34eea401fe8b63240" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>reference</name></member>
      <member refid="classgmx_1_1Allocator_1a12379a4355abb23868e0542abf1d8725" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>size_type</name></member>
      <member refid="classgmx_1_1Allocator_1a52ff4b2b565b8fd044b60435dde36cb1" prot="public" virt="non-virtual"><scope>gmx::Allocator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
