<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="namespacegmx_1_1compat" kind="namespace">
    <compoundname>gmx::compat</compoundname>
    <briefdescription>
<para>Compatibility aliases for standard library features. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal /> </para><para>Provide consistent naming for standard library features that must be back-ported on some platforms. gmx::compat::some_feature may map to back-ported code or to a feature provided by the STL available on a given build platform, but by including the compatibility header and using the <ref refid="namespacegmx_1_1compat" kindref="compound">gmx::compat</ref> namespace, forward and backward compatible code is cleaner and clearer. In the future, when a feature is determined to be provided by the system on all supported platforms, references to gmx::compat::some_feature can be replaced, e.g. with std::some_feature, and gmx::compat::some_feature deprecated.</para><para>Since compatibility headers are likely to be included by other headers, there is a risk of ambiguity if code in the gmx namespace refers to an unqualified name in the std namespace. To reduce ambiguity, symbol names from <ref refid="namespacegmx_1_1compat" kindref="compound">gmx::compat</ref> should not be imported into scopes that are shared between multiple translation units (e.g. via <computeroutput>using</computeroutput> statements in header files). </para>    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/docs/doxygen/misc.cpp" line="65" column="1"/>
  </compounddef>
</doxygen>
