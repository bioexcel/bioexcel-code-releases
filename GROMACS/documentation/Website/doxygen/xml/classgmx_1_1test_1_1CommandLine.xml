<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1test_1_1CommandLine" kind="class" prot="public">
    <compoundname>gmx::test::CommandLine</compoundname>
    <includes local="no">testutils/cmdlinetest.h</includes>
    <innerclass refid="classgmx_1_1test_1_1CommandLine_1_1Impl" prot="public">gmx::test::CommandLine::Impl</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgmx_1_1test_1_1CommandLine_1ae37a5d23d4879ad75657e70946636728" prot="private" static="no" mutable="no">
        <type><ref refid="classgmx_1_1PrivateImplPointer" kindref="compound">PrivateImplPointer</ref>&lt; <ref refid="classgmx_1_1test_1_1CommandLine_1_1Impl" kindref="compound">Impl</ref> &gt;</type>
        <definition>PrivateImplPointer&lt;Impl&gt; gmx::test::CommandLine::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="194" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1a22a93cd63c334aa73c33bc04dc553111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::test::CommandLine::CommandLine</definition>
        <argsstring>()</argsstring>
        <name>CommandLine</name>
        <briefdescription>
<para>Initializes an empty command-line object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="103" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1a65a0bec4d7aa1d77b62808c97bd2c615" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::test::CommandLine::CommandLine</definition>
        <argsstring>(const ArrayRef&lt; const char *const  &gt; &amp;cmdline)</argsstring>
        <name>CommandLine</name>
        <param>
          <type>const <ref refid="classgmx_1_1ArrayRef" kindref="compound">ArrayRef</ref>&lt; const char *const  &gt; &amp;</type>
          <declname>cmdline</declname>
        </param>
        <briefdescription>
<para>Initializes a command-line object from an array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cmdline</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of command-line arguments.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>cmdline</computeroutput> should include the binary name as the first element if that is desired in the output.</para><para>This constructor is not explicit to make it possible to create a <ref refid="classgmx_1_1test_1_1CommandLine" kindref="compound">CommandLine</ref> object directly from a C array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="115" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1a6a4690a0f5f9bca11ea361b1e536387a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::test::CommandLine::CommandLine</definition>
        <argsstring>(const CommandLine &amp;other)</argsstring>
        <name>CommandLine</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1CommandLine" kindref="compound">CommandLine</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Creates a deep copy of a command-line object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="117" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1aa4777e140f67de4e535c766e67559e72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::test::CommandLine::~CommandLine</definition>
        <argsstring>()</argsstring>
        <name>~CommandLine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="118" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="134" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1a46005773d8afc7cb016d8bd4186b13ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::CommandLine::initFromArray</definition>
        <argsstring>(const ArrayRef&lt; const char *const  &gt; &amp;cmdline)</argsstring>
        <name>initFromArray</name>
        <param>
          <type>const <ref refid="classgmx_1_1ArrayRef" kindref="compound">ArrayRef</ref>&lt; const char *const  &gt; &amp;</type>
          <declname>cmdline</declname>
        </param>
        <briefdescription>
<para>Initializes a command-line object in-place from an array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cmdline</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of command-line arguments.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>cmdline</computeroutput> should include the binary name as the first element if that is desired in the output.</para><para>This function does the same as the constructor that takes a <ref refid="classgmx_1_1ArrayRef" kindref="compound">ArrayRef</ref>. Any earlier contents of the object are discarded.</para><para>Strong exception safety. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="133" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1a053310b6cdf479cec4438ff4fccaf750" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::CommandLine::append</definition>
        <argsstring>(const char *arg)</argsstring>
        <name>append</name>
        <param>
          <type>const char *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Appends an argument to the command line. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument to append.</para></parameterdescription>
</parameteritem>
</parameterlist>
Strong exception safety. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="142" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="143" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1a124ec247e0ef3f87125648bf4c05f4d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::CommandLine::append</definition>
        <argsstring>(const std::string &amp;arg)</argsstring>
        <name>append</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Convenience overload taking a std::string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="144" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1a7a5dd8560b5b484c317d26e57c1708b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::CommandLine::addOption</definition>
        <argsstring>(const char *name)</argsstring>
        <name>addOption</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Adds an option to the command line, typically a boolean. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the option to append, which should start with &quot;-&quot;. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="151" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1a53ea7c5c119cefa660e0039fccb1ecf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::CommandLine::addOption</definition>
        <argsstring>(const char *name, const char *value)</argsstring>
        <name>addOption</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Adds an option-value pair to the command line. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the option to append, which should start with &quot;-&quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the argument to append. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="159" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="167" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1a9dd443462e08fcac1e8e7c847f6ae942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::CommandLine::addOption</definition>
        <argsstring>(const char *name, const std::string &amp;value)</argsstring>
        <name>addOption</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convenience overload taking a std::string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="161" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1a244dd72e165c89ee162473699224f5fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::CommandLine::addOption</definition>
        <argsstring>(const char *name, int value)</argsstring>
        <name>addOption</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Overload taking an int. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="163" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="178" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1a131387ad76abfa6813965240f9bf9ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::CommandLine::addOption</definition>
        <argsstring>(const char *name, double value)</argsstring>
        <name>addOption</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Overload taking a double. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="165" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="184" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1abcb0cc263f3998c55898cd1c5649fecd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::CommandLine::merge</definition>
        <argsstring>(const CommandLine &amp;args)</argsstring>
        <name>merge</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1CommandLine" kindref="compound">CommandLine</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Appends all arguments from <computeroutput>args</computeroutput> to the command line. </para>        </briefdescription>
        <detaileddescription>
<para>If the first argument of <computeroutput>args</computeroutput> does not start with a <computeroutput>-</computeroutput>, it is skipped, assuming it is a gmx module name and thus useless. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="172" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="190" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1a0d5a74abdcce310809907a24e72469f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int &amp;</type>
        <definition>int &amp; gmx::test::CommandLine::argc</definition>
        <argsstring>()</argsstring>
        <name>argc</name>
        <briefdescription>
<para>Returns argc for passing into C-style command-line handling. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="175" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1a045cc47df3ba3a4fb1deb5541a39252a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char ** gmx::test::CommandLine::argv</definition>
        <argsstring>()</argsstring>
        <name>argv</name>
        <briefdescription>
<para>Returns argv for passing into C-style command-line handling. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="177" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1aa0fa3d826e3a614fc0fbe674b97d4aa6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gmx::test::CommandLine::argc</definition>
        <argsstring>() const </argsstring>
        <name>argc</name>
        <briefdescription>
<para>Returns argc for passing into C-style command-line handling. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="179" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1a11db2debbc8c78d2bbbb8517d4503097" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *const *</type>
        <definition>const char *const * gmx::test::CommandLine::argv</definition>
        <argsstring>() const </argsstring>
        <name>argv</name>
        <briefdescription>
<para>Returns argv for passing into C-style command-line handling. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="181" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1aae2a51f1efc29e3d1c23f48978694226" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * gmx::test::CommandLine::arg</definition>
        <argsstring>(int i) const </argsstring>
        <name>arg</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a single argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="183" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1aa5969f9e34c036ab67d41d5fff49e842" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::test::CommandLine::toString</definition>
        <argsstring>() const </argsstring>
        <name>toString</name>
        <briefdescription>
<para>Returns the command line formatted as a single string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="186" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1CommandLine_1ae82af89faa8ae36308cad7d9efa1a832" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::test::CommandLine::contains</definition>
        <argsstring>(const char *name) const </argsstring>
        <name>contains</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Whether the command line contains the given option. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="189" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.cpp" bodystart="229" bodyend="239"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Helper class for tests that need to construct command lines. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal /> This class helps in writing tests for command-line handling. The constructor method takes an array of const char pointers, specifying the command-line arguments, each as one array element. It is also possible to construct the command line by adding individual arguments with <ref refid="classgmx_1_1test_1_1CommandLine_1a053310b6cdf479cec4438ff4fccaf750" kindref="member">append()</ref> and <ref refid="classgmx_1_1test_1_1CommandLine_1a7a5dd8560b5b484c317d26e57c1708b5" kindref="member">addOption()</ref>. The <ref refid="classgmx_1_1test_1_1CommandLine_1a0d5a74abdcce310809907a24e72469f4" kindref="member">argc()</ref> and <ref refid="classgmx_1_1test_1_1CommandLine_1a045cc47df3ba3a4fb1deb5541a39252a" kindref="member">argv()</ref> methods can then be used to obtain <computeroutput>argc</computeroutput> and <computeroutput>argv</computeroutput> (non-const char pointers) arrays for passing into methods that expect these.</para><para>Note that although the interface allows passing the argc and argv pointers to methods that modify them (typically as <computeroutput>f</computeroutput>(&amp;<ref refid="classgmx_1_1test_1_1CommandLine_1a0d5a74abdcce310809907a24e72469f4" kindref="member">argc()</ref>, <ref refid="classgmx_1_1test_1_1CommandLine_1a045cc47df3ba3a4fb1deb5541a39252a" kindref="member">argv()</ref>)), currently the <ref refid="classgmx_1_1test_1_1CommandLine" kindref="compound">CommandLine</ref> object is not in a consistent state internally if the parameters are actually modified. Reading the command line is possible afterwards, but modification is not.</para><para>If you need to construct command lines that refer to files on the file system, see <ref refid="classgmx_1_1test_1_1CommandLineTestHelper" kindref="compound">CommandLineTestHelper</ref> and <ref refid="classgmx_1_1test_1_1CommandLineTestBase" kindref="compound">CommandLineTestBase</ref> for additional convenience utilities.</para><para>All constructors and methods that modify this class may throw an std::bad_alloc. Const methods and accessors do not throw. </para>    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" line="100" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/testutils/cmdlinetest.h" bodystart="99" bodyend="195"/>
    <listofallmembers>
      <member refid="classgmx_1_1test_1_1CommandLine_1a7a5dd8560b5b484c317d26e57c1708b5" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>addOption</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1a53ea7c5c119cefa660e0039fccb1ecf8" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>addOption</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1a9dd443462e08fcac1e8e7c847f6ae942" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>addOption</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1a244dd72e165c89ee162473699224f5fa" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>addOption</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1a131387ad76abfa6813965240f9bf9ed3" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>addOption</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1a053310b6cdf479cec4438ff4fccaf750" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>append</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1a124ec247e0ef3f87125648bf4c05f4d6" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>append</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1aae2a51f1efc29e3d1c23f48978694226" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>arg</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1a0d5a74abdcce310809907a24e72469f4" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>argc</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1aa0fa3d826e3a614fc0fbe674b97d4aa6" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>argc</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1a045cc47df3ba3a4fb1deb5541a39252a" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>argv</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1a11db2debbc8c78d2bbbb8517d4503097" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>argv</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1a22a93cd63c334aa73c33bc04dc553111" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>CommandLine</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1a65a0bec4d7aa1d77b62808c97bd2c615" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>CommandLine</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1a6a4690a0f5f9bca11ea361b1e536387a" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>CommandLine</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1ae82af89faa8ae36308cad7d9efa1a832" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>contains</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1ae37a5d23d4879ad75657e70946636728" prot="private" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>impl_</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1a46005773d8afc7cb016d8bd4186b13ce" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>initFromArray</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1abcb0cc263f3998c55898cd1c5649fecd" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>merge</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1aa5969f9e34c036ab67d41d5fff49e842" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>toString</name></member>
      <member refid="classgmx_1_1test_1_1CommandLine_1aa4777e140f67de4e535c766e67559e72" prot="public" virt="non-virtual"><scope>gmx::test::CommandLine</scope><name>~CommandLine</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
