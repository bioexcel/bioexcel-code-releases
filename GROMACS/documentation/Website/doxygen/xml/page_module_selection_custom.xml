<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="page_module_selection_custom" kind="page">
    <compoundname>page_module_selection_custom</compoundname>
    <title>Custom selection methods</title>
    <detaileddescription>
<internal><para>Custom selection methods are defined by creating a new instance of <computeroutput><ref refid="structgmx__ana__selmethod__t" kindref="compound">gmx_ana_selmethod_t</ref></computeroutput> and filling it with the necessary data for handling the selection. The structure contains callback pointers that define the actual behavior of the method. The following sections discuss how the structure should be filled and how to implement the callbacks.</para><sect1 id="page_module_selection_custom_1selmethods_define">
<title>\c gmx_ana_selmethod_t data structure</title>
<para>An example <computeroutput><ref refid="structgmx__ana__selmethod__t" kindref="compound">gmx_ana_selmethod_t</ref></computeroutput> definition could look like this:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><ref refid="structgmx__ana__selmethod__t" kindref="compound">gmx_ana_selmethod_t</ref><sp/>sm_example<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;example&quot;</highlight><highlight class="normal">,<sp/><ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca70a2af6eafa48adfab506ceee60471f6" kindref="member">GROUP_VALUE</ref>,<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__module__utility_1ga0883345a58f8f63aefa249a4f127f707" kindref="member">asize</ref>(sm_params_example),<sp/>sm_params_example,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;init_data_example,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;init_example,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;free_data_example,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;init_frame_example,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;evaluate_example,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;example<sp/>from<sp/>POS_EXPR<sp/>[cutoff<sp/>REAL]&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>0,<sp/>NULL},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">*<sp/></highlight></codeline>
</programlisting></para><para>The first value defines the name of the method. It is used mostly for informational purposes; the actual name(s) recognized by the selection parser are defined by the call to <ref refid="selmethod_8cpp_1a8dc364fb06ad40e8176409907d6d8087" kindref="member">gmx_ana_selmethod_register()</ref> (see <ref refid="page_module_selection_custom_1selmethods_register" kindref="member">Registering the method</ref>).</para><para>The second value defines the type of the value the method returns. Possible values are<itemizedlist>
<listitem><para><ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca4d694119ce83b62d74ff06b5e017dca8" kindref="member">NO_VALUE</ref> : This is allowed only for methods that have the flag <ref refid="selmethod_8h_1aa5b18df47b72690889afd89f5e68694c" kindref="member">SMETH_MODIFIER</ref> set (see <ref refid="page_module_selection_custom_1selmethods_modifiers" kindref="member">Selection modifiers</ref>).</para></listitem><listitem><para><ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8becacd1ce0b084595a6072a57781dc7738a0" kindref="member">INT_VALUE</ref> : The method returns one or more integer values.</para></listitem><listitem><para><ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca7aa9587044cd6fd9c1f1690719a072cf" kindref="member">REAL_VALUE</ref> : The method returns one or more floating-point values.</para></listitem><listitem><para><ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca6f2f1fe9592d96990c9ac690c355bd08" kindref="member">STR_VALUE</ref> : The method returns one or more strings.</para></listitem><listitem><para><ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca31a47fbfbc85ad1472ce3d2a168fd1ec" kindref="member">POS_VALUE</ref> : The method returns one or more 3D vectors.</para></listitem><listitem><para><ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca70a2af6eafa48adfab506ceee60471f6" kindref="member">GROUP_VALUE</ref> : The method returns a single index group.</para></listitem></itemizedlist>
</para><para>The third value gives additional information about the method using a combination of flags. Possible flags are:<itemizedlist>
<listitem><para><ref refid="selmethod_8h_1ac5e632efef31120c54b55eac79cb23cc" kindref="member">SMETH_REQTOP</ref> : If set, the topology information is always loaded and the <computeroutput>top</computeroutput> pointer passed to the callbacks is guaranteed to be non-NULL. Should be set if the method requires topology information for evaluation.</para></listitem><listitem><para><ref refid="selmethod_8h_1aa5e2468a45a65af582fb6c84df59c33e" kindref="member">SMETH_REQMASS</ref> : If set, masses of atoms is always loaded and the <computeroutput>top</computeroutput> pointer passed to the callbacks is guaranteed to be non-NULL and have meaningful masses. Should be set if the method requires atom masses for evaluation. Implies <ref refid="selmethod_8h_1ac5e632efef31120c54b55eac79cb23cc" kindref="member">SMETH_REQTOP</ref>.</para></listitem><listitem><para><ref refid="selmethod_8h_1af38b0eb2b4e305ae83ded06f9b12252e" kindref="member">SMETH_DYNAMIC</ref> : If set, the method can only be evaluated dynamically, i.e., it requires data from the trajectory frame.</para></listitem><listitem><para><ref refid="selmethod_8h_1aa5b18df47b72690889afd89f5e68694c" kindref="member">SMETH_MODIFIER</ref> : If set, the method is a selection modifier and not an actual selection method. For more details, see <ref refid="page_module_selection_custom_1selmethods_modifiers" kindref="member">Selection modifiers</ref>.</para></listitem><listitem><para><ref refid="selmethod_8h_1a515e9a0a40f55687d9c37167e4d530a5" kindref="member">SMETH_ALLOW_UNSORTED</ref> : If set, the method supports unsorted atoms in its input parameters. <ref refid="selmethod_8h_1aa5b18df47b72690889afd89f5e68694c" kindref="member">SMETH_MODIFIER</ref> methods are assumed to always support unsorted atoms, as their purpose is to affect the ordering.</para></listitem></itemizedlist>
</para><para>There are two additional flags that specify the number of values the method returns. Only one of them can be set at a time. If neither is set, the default behavior is to evaluate a value for each input atom (except for <ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca70a2af6eafa48adfab506ceee60471f6" kindref="member">GROUP_VALUE</ref> methods, which always return a single group). Other behaviors can be specified with these flags:<itemizedlist>
<listitem><para><ref refid="selmethod_8h_1a2de9fc1fca93570388059f72b064df08" kindref="member">SMETH_SINGLEVAL</ref> : If set, the method evaluates to a single value. This is automatically set if the type is <ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca70a2af6eafa48adfab506ceee60471f6" kindref="member">GROUP_VALUE</ref>.</para></listitem><listitem><para><ref refid="selmethod_8h_1ae0aa6a1bbb99ba5f0f6228c4cd401e0a" kindref="member">SMETH_VARNUMVAL</ref> : If set, the method evaluates to an arbitrary number of values. The number of values is determined based on the values given by the user to the method parameters (see <ref refid="page_module_selection_custom_1selmethods_params" kindref="member">Defining parameters</ref>).</para></listitem></itemizedlist>
If either of these flags is specified (and the method type is not <ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca70a2af6eafa48adfab506ceee60471f6" kindref="member">GROUP_VALUE</ref>), the group passed to the evaluation callback should not be used as it can be NULL. Currently, the above flags only work (have been tested) for <ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca31a47fbfbc85ad1472ce3d2a168fd1ec" kindref="member">POS_VALUE</ref> methods.</para><para>There is one additional flag that can only be specified for <ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca6f2f1fe9592d96990c9ac690c355bd08" kindref="member">STR_VALUE</ref> methods: <ref refid="selmethod_8h_1a78abdcb637f45eafa513d07aaf14a45e" kindref="member">SMETH_CHARVAL</ref> . It is meant for to ease implementation of methods that evaluate to strings consisting of single characters.</para><para>The next two values determine the number of parameters and a pointer to the parameter array. The contents of the parameter array are described in <ref refid="page_module_selection_custom_1selmethods_params" kindref="member">Defining parameters</ref>. If the method does not take parameters, the first value should be 0 and the second can be NULL. Currently, <ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca6f2f1fe9592d96990c9ac690c355bd08" kindref="member">STR_VALUE</ref> methods cannot take parameters, but this limitation should be easy to lift if required.</para><para>These are followed by function callbacks that determine the actual behavior of the method. Any of these except the evaluation callback can be NULL (the evaluation callback can also be NULL if <ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca4d694119ce83b62d74ff06b5e017dca8" kindref="member">NO_VALUE</ref> is specified for a selection modifier). However, the presence of parameters can require some of the callbacks to be implemented. The details are described in <ref refid="page_module_selection_custom_1selmethods_callbacks" kindref="member">Implementing callbacks</ref>.</para><para>Finally, there is a data structure that gives help texts for the method.</para><para>The <computeroutput><ref refid="structgmx__ana__selmethod__t" kindref="compound">gmx_ana_selmethod_t</ref></computeroutput> variable should be declared as a global variable or it should be otherwise ensured that the structure is not freed: only a pointer to the structure is stored by the library.</para></sect1>
<sect1 id="page_module_selection_custom_1selmethods_params">
<title>Defining parameters</title>
<para>Parameters to selection methods are defined in a separate array of <computeroutput><ref refid="structgmx__ana__selparam__t" kindref="compound">gmx_ana_selparam_t</ref></computeroutput> structures. The order of the parameters does not matter (except possibly for callback implementation), with one important exception: If the method evaluates to a <ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca31a47fbfbc85ad1472ce3d2a168fd1ec" kindref="member">POS_VALUE</ref>, the first parameter should have <ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca70a2af6eafa48adfab506ceee60471f6" kindref="member">GROUP_VALUE</ref> and be the one that is used to calculate the positions.</para><para>An example parameter definition: <programlisting><codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structgmx__ana__selparam__t" kindref="compound">gmx_ana_selparam_t</ref><sp/>sm_params_example[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;cutoff&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca7aa9587044cd6fd9c1f1690719a072cf" kindref="member">REAL_VALUE</ref>,<sp/>1,<sp/>{NULL}},<sp/>NULL,<sp/><ref refid="selparam_8h_1a9829627bea1b9a81fe204f333a6519b6" kindref="member">SPAR_OPTIONAL</ref>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;from&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>{<ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca31a47fbfbc85ad1472ce3d2a168fd1ec" kindref="member">POS_VALUE</ref>,<sp/>-1,<sp/>{NULL}},<sp/>NULL,<sp/><ref refid="selparam_8h_1ae44a94b4d013d2a344cfb3a9f8c5479f" kindref="member">SPAR_DYNAMIC</ref><sp/>|<sp/><ref refid="selparam_8h_1a400330277d7e17cdfef1610cc37838ea" kindref="member">SPAR_VARNUM</ref>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">*<sp/></highlight></codeline>
</programlisting></para><para>The first value gives the name of the parameter. The first parameter can have a NULL name, which means that the value should immediately follow the method name. This can be used to specify methods of the type &apos;within 5 of ...&apos;.</para><para>The second value specifies the type of the value that the parameter accepts. <ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca4d694119ce83b62d74ff06b5e017dca8" kindref="member">NO_VALUE</ref> can be used to specify a boolean parameter, other possibilities are the same as for the selection method type.</para><para>The third value gives the number of values that the parameter accepts. For boolean parameters (<ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca4d694119ce83b62d74ff06b5e017dca8" kindref="member">NO_VALUE</ref>), it should be 0. For parameters with <ref refid="selparam_8h_1a400330277d7e17cdfef1610cc37838ea" kindref="member">SPAR_VARNUM</ref> of <ref refid="selparam_8h_1ababaf52ada40922bb660a4949e1e52f0" kindref="member">SPAR_ATOMVAL</ref>, it should be set to -1 for consistency (it is not used). If <ref refid="selparam_8h_1ab39fef32ca729815df1299fafdd623b1" kindref="member">SPAR_RANGES</ref> is specified, it should be either 1 (to accept a single continuous range) or -1 (if combined with <ref refid="selparam_8h_1a400330277d7e17cdfef1610cc37838ea" kindref="member">SPAR_VARNUM</ref>). In all other cases, it should be a positive integer; in most cases, it should be 1.</para><para>The nest two pointers should always be NULL (they should be initialized in the callbacks), except the first pointer in the case of <ref refid="selparam_8h_1a9cab7952c47c82291754bb1b90db31e7" kindref="member">SPAR_ENUMVAL</ref> (see below).</para><para>The final value gives additional information about the acceptable values for the parameter using a combination of flags. The possible flags are:<itemizedlist>
<listitem><para><ref refid="selparam_8h_1a9829627bea1b9a81fe204f333a6519b6" kindref="member">SPAR_OPTIONAL</ref> : If set, the user does not need to provide a value for the parameter. If not set, an error is reported if the parameter is not specified by the user.</para></listitem><listitem><para><ref refid="selparam_8h_1ae44a94b4d013d2a344cfb3a9f8c5479f" kindref="member">SPAR_DYNAMIC</ref> : If set, the method can handle dynamic values for the parameter, i.e., the value(s) can be given by an expression that evaluates to different values for different frames.</para></listitem><listitem><para><ref refid="selparam_8h_1ab39fef32ca729815df1299fafdd623b1" kindref="member">SPAR_RANGES</ref> : Can be set only for <ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8becacd1ce0b084595a6072a57781dc7738a0" kindref="member">INT_VALUE</ref> and <ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca7aa9587044cd6fd9c1f1690719a072cf" kindref="member">REAL_VALUE</ref> parameters, and cannot be combined with <ref refid="selparam_8h_1ae44a94b4d013d2a344cfb3a9f8c5479f" kindref="member">SPAR_DYNAMIC</ref>. If set, the parameter accepts ranges of values. The ranges are automatically sorted and compacted such that a minimum amount of non-overlapping ranges are given for the method.</para></listitem><listitem><para><ref refid="selparam_8h_1a400330277d7e17cdfef1610cc37838ea" kindref="member">SPAR_VARNUM</ref> : If set, the parameter can have a variable number of values. These can be provided by the user as a list of values, or using a single <ref refid="selmethod_8h_1ae0aa6a1bbb99ba5f0f6228c4cd401e0a" kindref="member">SMETH_VARNUMVAL</ref> (or a single <ref refid="selmethod_8h_1a2de9fc1fca93570388059f72b064df08" kindref="member">SMETH_SINGLEVAL</ref>) method.</para></listitem><listitem><para><ref refid="selparam_8h_1ababaf52ada40922bb660a4949e1e52f0" kindref="member">SPAR_ATOMVAL</ref> : If set, the parameter accepts either a single value or an expression that evaluates to a value for each input atom. The single input value is treated as if the same value was returned for each atom. Cannot be combined with <ref refid="selparam_8h_1ab39fef32ca729815df1299fafdd623b1" kindref="member">SPAR_RANGES</ref> or <ref refid="selparam_8h_1a400330277d7e17cdfef1610cc37838ea" kindref="member">SPAR_VARNUM</ref>.</para></listitem><listitem><para><ref refid="selparam_8h_1a9cab7952c47c82291754bb1b90db31e7" kindref="member">SPAR_ENUMVAL</ref> : Can only be set for <ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca6f2f1fe9592d96990c9ac690c355bd08" kindref="member">STR_VALUE</ref> parameters that take a single value, and cannot be combined with any other flag than <ref refid="selparam_8h_1a9829627bea1b9a81fe204f333a6519b6" kindref="member">SPAR_OPTIONAL</ref>. If set, the parameter only accepts one of predefined string values. See <ref refid="selparam_8h_1a9cab7952c47c82291754bb1b90db31e7" kindref="member">SPAR_ENUMVAL</ref> documentation for details on how to specify the acceptable values.</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="page_module_selection_custom_1selmethods_callbacks">
<title>Implementing callbacks</title>
<para>There are eight differen callback functions that can be implemented for selection methods: <ref refid="selmethod_8h_1a5acbf2d7bead71c4d96f9e69b267df56" kindref="member">sel_datafunc()</ref>, <ref refid="selmethod_8h_1ab5aa791ed8d9db644c9250028a18dc8b" kindref="member">sel_posfunc()</ref>, <ref refid="selmethod_8h_1a09bc1abf0824d5baa5d52dbe5cd69a5c" kindref="member">sel_initfunc()</ref>, <ref refid="selmethod_8h_1a3eb421a75feaa37ef89191b6167b050a" kindref="member">sel_outinitfunc()</ref>, <ref refid="selmethod_8h_1a2e05a0b2274edfeab965c363f646735a" kindref="member">sel_freefunc()</ref>, <ref refid="selmethod_8h_1a82456e64a2c4c69cc5addedf2d832ffa" kindref="member">sel_framefunc()</ref>, and two update functions. They are in this order in the <computeroutput><ref refid="structgmx__ana__selmethod__t" kindref="compound">gmx_ana_selmethod_t</ref></computeroutput> data structure. In general, any of the callbacks can be NULL, but the presence of parameters or other callbacks imposes some restrictions:<itemizedlist>
<listitem><para><ref refid="selmethod_8h_1a5acbf2d7bead71c4d96f9e69b267df56" kindref="member">sel_datafunc()</ref> should be provided if the method takes parameters.</para></listitem><listitem><para><ref refid="selmethod_8h_1a09bc1abf0824d5baa5d52dbe5cd69a5c" kindref="member">sel_initfunc()</ref> should be provided if the method takes any parameters with the <ref refid="selparam_8h_1a400330277d7e17cdfef1610cc37838ea" kindref="member">SPAR_VARNUM</ref> or <ref refid="selparam_8h_1ababaf52ada40922bb660a4949e1e52f0" kindref="member">SPAR_ATOMVAL</ref> flags, except if those parameters have a <ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca31a47fbfbc85ad1472ce3d2a168fd1ec" kindref="member">POS_VALUE</ref>.</para></listitem><listitem><para><ref refid="selmethod_8h_1a3eb421a75feaa37ef89191b6167b050a" kindref="member">sel_outinitfunc()</ref> should be provided for <ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca31a47fbfbc85ad1472ce3d2a168fd1ec" kindref="member">POS_VALUE</ref> methods and <ref refid="selmethod_8h_1ae0aa6a1bbb99ba5f0f6228c4cd401e0a" kindref="member">SMETH_VARNUMVAL</ref> methods.</para></listitem><listitem><para><ref refid="selmethod_8h_1a2e05a0b2274edfeab965c363f646735a" kindref="member">sel_freefunc()</ref> should be provided if <ref refid="selmethod_8h_1a5acbf2d7bead71c4d96f9e69b267df56" kindref="member">sel_datafunc()</ref> and/or <ref refid="selmethod_8h_1a09bc1abf0824d5baa5d52dbe5cd69a5c" kindref="member">sel_initfunc()</ref> allocate any dynamic memory in addition to the data structure itself (or allocates the data structure using some other means than malloc()).</para></listitem><listitem><para><ref refid="selmethod_8h_1a3242fa2db3798ede59bc98633c07dc87" kindref="member">sel_updatefunc_pos()</ref> only makes sense for methods with <ref refid="selmethod_8h_1af38b0eb2b4e305ae83ded06f9b12252e" kindref="member">SMETH_DYNAMIC</ref> set.</para></listitem><listitem><para>At least one update function should be provided unless the method type is <ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca4d694119ce83b62d74ff06b5e017dca8" kindref="member">NO_VALUE</ref>.</para></listitem></itemizedlist>
</para><para>The documentations for the function pointer types provide more information about how the callbacks should be implemented.</para></sect1>
<sect1 id="page_module_selection_custom_1selmethods_modifiers">
<title>Selection modifiers</title>
<para>Selection modifiers are a special kind of selection methods that can be appended to the end of a selection. They are specified by adding the <ref refid="selmethod_8h_1aa5b18df47b72690889afd89f5e68694c" kindref="member">SMETH_MODIFIER</ref> flag to the <computeroutput><ref refid="structgmx__ana__selmethod__t" kindref="compound">gmx_ana_selmethod_t</ref></computeroutput>. They can have two different types:<itemizedlist>
<listitem><para><ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca31a47fbfbc85ad1472ce3d2a168fd1ec" kindref="member">POS_VALUE</ref> : These modifiers are given the final positions as an input, and they can make modifications to the selection that are not possible otherwise (e.g., permute the atoms). The modifier should implement <ref refid="selmethod_8h_1a3242fa2db3798ede59bc98633c07dc87" kindref="member">sel_updatefunc_pos()</ref> and also have one NULL parameter in the beginning of the parameter list that takes <ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca31a47fbfbc85ad1472ce3d2a168fd1ec" kindref="member">POS_VALUE</ref> and is used to give the input positions.</para></listitem><listitem><para><ref refid="selvalue_8h_1a70b42b87d434580bf1493591857b8beca4d694119ce83b62d74ff06b5e017dca8" kindref="member">NO_VALUE</ref> : These modifiers do not modify the final selection, but can be used to implement per-selection options for analysis tools or to control the default behavior of the selection engine (currently, such a framework is not implemented, but should be easy to implement if required).</para></listitem></itemizedlist>
</para><para>In addition to restricting the type of the method, selection modifiers do not allow the flags <ref refid="selmethod_8h_1a2de9fc1fca93570388059f72b064df08" kindref="member">SMETH_SINGLEVAL</ref> and <ref refid="selmethod_8h_1ae0aa6a1bbb99ba5f0f6228c4cd401e0a" kindref="member">SMETH_VARNUMVAL</ref> (they would not make sense).</para><para>Parameters and callbacks should be implemented as with normal selection method, but beware that very little of the functionality has been tested.</para><para><xrefsect id="todo_1_todo000084"><xreftitle>Todo</xreftitle><xrefdescription><para>The modifier handling could be made more flexible and more generic; the current implementation does not allow many things which would be possible with slight changes in the internals of the library.</para></xrefdescription></xrefsect></para></sect1>
<sect1 id="page_module_selection_custom_1selmethods_register">
<title>Registering the method</title>
<para>After defining the method with <computeroutput><ref refid="structgmx__ana__selmethod__t" kindref="compound">gmx_ana_selmethod_t</ref></computeroutput>, it should be registered with the selection engine. In analysis programs, this can be done by calling <ref refid="selmethod_8cpp_1a8dc364fb06ad40e8176409907d6d8087" kindref="member">gmx_ana_selmethod_register()</ref>. If adding the method to the library, you should add a pointer to the new method structure into the <computeroutput>smtable_def</computeroutput> array (in <ref refid="selmethod_8cpp" kindref="compound">selmethod.cpp</ref>), and it is registered automatically. In both cases, <ref refid="selmethod_8cpp_1a8dc364fb06ad40e8176409907d6d8087" kindref="member">gmx_ana_selmethod_register()</ref> does several checks on the structure and reports any errors or inconsistencies it finds. </para></sect1>
</internal>
    </detaileddescription>
  </compounddef>
</doxygen>
