<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="nbnxn__gpu_8h" kind="file">
    <compoundname>nbnxn_gpu.h</compoundname>
    <includes refid="gpu__macros_8h" local="yes">gromacs/gpu_utils/gpu_macros.h</includes>
    <includes refid="vectypes_8h" local="yes">gromacs/math/vectypes.h</includes>
    <includes refid="nbnxn__gpu__types_8h" local="yes">gromacs/mdlib/nbnxn_gpu_types.h</includes>
    <includes refid="basedefinitions_8h" local="yes">gromacs/utility/basedefinitions.h</includes>
    <includes refid="real_8h" local="yes">gromacs/utility/real.h</includes>
    <includedby refid="nbnxn__ocl_8cpp" local="yes">src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl.cpp</includedby>
    <includedby refid="nbnxn__ocl__data__mgmt_8cpp" local="yes">src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl_data_mgmt.cpp</includedby>
    <includedby refid="nbnxn__ocl__jit__support_8cpp" local="yes">src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl_jit_support.cpp</includedby>
    <includedby refid="sim__util_8cpp" local="yes">src/gromacs/mdlib/sim_util.cpp</includedby>
    <incdepgraph>
      <node id="15360">
        <label>stdint.h</label>
      </node>
      <node id="15362">
        <label>gromacs/utility/real.h</label>
        <link refid="real_8h"/>
      </node>
      <node id="15359">
        <label>gromacs/utility/basedefinitions.h</label>
        <link refid="basedefinitions_8h"/>
        <childnode refid="15360" relation="include">
        </childnode>
        <childnode refid="15361" relation="include">
        </childnode>
      </node>
      <node id="15361">
        <label>inttypes.h</label>
      </node>
      <node id="15358">
        <label>src/gromacs/mdlib/nbnxn_gpu.h</label>
        <link refid="nbnxn_gpu.h"/>
        <childnode refid="15359" relation="include">
        </childnode>
        <childnode refid="15362" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="15364">
        <label>src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl.cpp</label>
        <link refid="nbnxn__ocl_8cpp"/>
      </node>
      <node id="15365">
        <label>src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl_data_mgmt.cpp</label>
        <link refid="nbnxn__ocl__data__mgmt_8cpp"/>
      </node>
      <node id="15366">
        <label>src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl_jit_support.cpp</label>
        <link refid="nbnxn__ocl__jit__support_8cpp"/>
      </node>
      <node id="15363">
        <label>src/gromacs/mdlib/nbnxn_gpu.h</label>
        <link refid="nbnxn_gpu.h"/>
        <childnode refid="15364" relation="include">
        </childnode>
        <childnode refid="15365" relation="include">
        </childnode>
        <childnode refid="15366" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="nbnxn__gpu_8h_1ace96d16a2d1f04355fb70b13711b86b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbnxn_gpu_launch_kernel</definition>
        <argsstring>(gmx_nbnxn_gpu_t *nb, const struct nbnxn_atomdata_t *nbdata, int flags, int iloc)</argsstring>
        <name>nbnxn_gpu_launch_kernel</name>
        <param>
          <type><ref refid="structgmx__nbnxn__ocl__t" kindref="compound">gmx_nbnxn_gpu_t</ref> *</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>const struct <ref refid="structnbnxn__atomdata__t" kindref="compound">nbnxn_atomdata_t</ref> *</type>
          <declname>nbdata</declname>
          <defname>nbatom</defname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iloc</declname>
        </param>
        <briefdescription>
<para>Launch asynchronously the nonbonded force calculations. </para>        </briefdescription>
        <detaileddescription>
<para>This consists of the following (async) steps launched:<itemizedlist>
<listitem><para>upload x and q;</para></listitem><listitem><para>upload shift vector;</para></listitem><listitem><para>launch kernel; The local and non-local interaction calculations are launched in two separate streams.</para></listitem></itemizedlist>
</para><para>Launch asynchronously the nonbonded force calculations.</para><para>As we execute nonbonded workload in separate queues, before launching the kernel we need to make sure that he following operations have completed:<itemizedlist>
<listitem><para>atomdata allocation and related H2D transfers (every nstlist step);</para></listitem><listitem><para>pair list H2D transfer (every nstlist step);</para></listitem><listitem><para>shift vector H2D transfer (every nstlist step);</para></listitem><listitem><para>force (+shift force and energy) output clearing (every step).</para></listitem></itemizedlist>
</para><para>These operations are issued in the local queue at the beginning of the step and therefore always complete before the local kernel launch. The non-local kernel is launched after the local on the same device/context, so this is inherently scheduled after the operations in the local stream (including the above &quot;misc_ops&quot;). However, for the sake of having a future-proof implementation, we use the misc_ops_done event to record the point in time when the above operations are finished and synchronize with this event in the non-local stream. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu.h" line="70" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl.cpp" bodystart="385" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="nbnxn__gpu_8h_1aa0bf4bda78b6edfef99302196d1ffe9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbnxn_gpu_launch_kernel_pruneonly</definition>
        <argsstring>(gmx_nbnxn_gpu_t *nb, int iloc, int numParts)</argsstring>
        <name>nbnxn_gpu_launch_kernel_pruneonly</name>
        <param>
          <type><ref refid="structgmx__nbnxn__ocl__t" kindref="compound">gmx_nbnxn_gpu_t</ref> *</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iloc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numParts</declname>
        </param>
        <briefdescription>
<para>Launch asynchronously the nonbonded prune-only kernel. </para>        </briefdescription>
        <detaileddescription>
<para>The local and non-local list pruning are launched in their separate streams.</para><para>Notes for future scheduling tuning: Currently we schedule the dynamic pruning between two MD steps <emphasis>after</emphasis> both local and nonlocal force D2H transfers completed. We could launch already after the cpyback is launched, but we want to avoid prune kernels (especially in the non-local high prio-stream) competing with nonbonded work.</para><para>However, this is not ideal as this schedule does not expose the available concurrency. The dynamic pruning kernel:<itemizedlist>
<listitem><para>should be allowed to overlap with any task other than force compute, including transfers (F D2H and the next step&apos;s x H2D as well as force clearing).</para></listitem><listitem><para>we&apos;d prefer to avoid competition with non-bonded force kernels belonging to the same rank and ideally other ranks too.</para></listitem></itemizedlist>
</para><para>In the most general case, the former would require scheduling pruning in a separate stream and adding additional event sync points to ensure that force kernels read consistent pair list data. This would lead to some overhead (due to extra cudaStreamWaitEvent calls, 3-5 us/call) which we might be able to live with. The gains from additional overlap might not be significant as long as update+constraints anyway takes longer than pruning, but there will still be use-cases where more overlap may help (e.g. multiple ranks per GPU, no/hbonds only constraints). The above second point is harder to address given that multiple ranks will often share a GPU. Ranks that complete their nonbondeds sooner can schedule pruning earlier and without a third priority level it is difficult to avoid some interference of prune kernels with force tasks (in particular preemption of low-prio local force task).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">nb</parametername>
</parameternamelist>
<parameterdescription>
<para>GPU nonbonded data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">iloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Interaction locality flag. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numParts</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of parts the pair list is split into in the rolling kernel. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu.h" line="111" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl.cpp" bodystart="685" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="nbnxn__gpu_8h_1ac4d9546662f5954ae56e3af4d09e4c4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbnxn_gpu_launch_cpyback</definition>
        <argsstring>(gmx_nbnxn_gpu_t *nb, const struct nbnxn_atomdata_t *nbatom, int flags, int aloc)</argsstring>
        <name>nbnxn_gpu_launch_cpyback</name>
        <param>
          <type><ref refid="structgmx__nbnxn__ocl__t" kindref="compound">gmx_nbnxn_gpu_t</ref> *</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>const struct <ref refid="structnbnxn__atomdata__t" kindref="compound">nbnxn_atomdata_t</ref> *</type>
          <declname>nbatom</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aloc</declname>
        </param>
        <briefdescription>
<para>Launch asynchronously the download of nonbonded forces from the GPU (and energies/shift forces if required). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu.h" line="120" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl.cpp" bodystart="828" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="nbnxn__gpu_8h_1a99051c642e584444b7d30cf011b3e0d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nbnxn_gpu_try_finish_task</definition>
        <argsstring>(gmx_nbnxn_gpu_t *nb, int flags, int aloc, real *e_lj, real *e_el, rvec *fshift, GpuTaskCompletion completionKind)</argsstring>
        <name>nbnxn_gpu_try_finish_task</name>
        <param>
          <type><ref refid="structgmx__nbnxn__ocl__t" kindref="compound">gmx_nbnxn_gpu_t</ref> *</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aloc</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> *</type>
          <declname>e_lj</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> *</type>
          <declname>e_el</declname>
        </param>
        <param>
          <type>rvec *</type>
          <declname>fshift</declname>
        </param>
        <param>
          <type><ref refid="gpu__utils_8h_1aab3d31c4bd3fcb89aa5d554b125b403e" kindref="member">GpuTaskCompletion</ref></type>
          <declname>completionKind</declname>
        </param>
        <briefdescription>
<para>Attempts to complete nonbonded GPU task. </para>        </briefdescription>
        <detaileddescription>
<para>This function attempts to complete the nonbonded task (both GPU and CPU auxiliary work). Success, i.e. that the tasks completed and results are ready to be consumed, is signaled by the return value (always true if blocking wait mode requested).</para><para>The <computeroutput>completionKind</computeroutput> parameter controls whether the behavior is non-blocking (achieved by passing GpuTaskCompletion::Check) or blocking wait until the results are ready (when GpuTaskCompletion::Wait is passed). As the &quot;Check&quot; mode the function will return immediately if the GPU stream still contain tasks that have not completed, it allows more flexible overlapping of work on the CPU with GPU execution.</para><para>Note that it is only safe to use the results, and to continue to the next MD step when this function has returned true which indicates successful completion of<itemizedlist>
<listitem><para>All nonbonded GPU tasks: both compute and device transfer(s)</para></listitem><listitem><para>auxiliary tasks: updating the internal module state (timing accumulation, list pruning states) and</para></listitem><listitem><para>internal staging reduction of (<computeroutput>fshift</computeroutput>, <computeroutput>e_el</computeroutput>, <computeroutput>e_lj</computeroutput>).</para></listitem></itemizedlist>
</para><para>TODO: improve the handling of outputs e.g. by ensuring that this function explcitly returns the force buffer (instead of that being passed only to <ref refid="nbnxn__gpu_8h_1ac4d9546662f5954ae56e3af4d09e4c4a" kindref="member">nbnxn_gpu_launch_cpyback()</ref>) and by returning the energy and Fshift contributions for some external/centralized reduction.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nb</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonbonded data GPU structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Force flags </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">aloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Atom locality identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">e_lj</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the LJ energy output to accumulate into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">e_el</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the electrostatics energy output to accumulate into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">fshift</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shift force buffer to accumulate into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">completionKind</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether nnbonded task completion should only be checked rather than waited for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the nonbonded tasks associated with <computeroutput>aloc</computeroutput> locality have completed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu.h" line="158" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" bodystart="302" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="nbnxn__gpu_8h_1a9ca8210020285dc8c926934c7d4d4b93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbnxn_gpu_wait_finish_task</definition>
        <argsstring>(gmx_nbnxn_gpu_t *nb, int flags, int aloc, real *e_lj, real *e_el, rvec *fshift)</argsstring>
        <name>nbnxn_gpu_wait_finish_task</name>
        <param>
          <type><ref refid="structgmx__nbnxn__ocl__t" kindref="compound">gmx_nbnxn_gpu_t</ref> *</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aloc</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> *</type>
          <declname>e_lj</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> *</type>
          <declname>e_el</declname>
        </param>
        <param>
          <type>rvec *</type>
          <declname>fshift</declname>
        </param>
        <briefdescription>
<para>Completes the nonbonded GPU task blocking until GPU tasks and data transfers to finish. </para>        </briefdescription>
        <detaileddescription>
<para>Also does timing accounting and reduction of the internal staging buffers. As this is called at the end of the step, it also resets the pair list and pruning flags.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nb</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonbonded data GPU structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Force flags </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">aloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Atom locality identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">e_lj</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the LJ energy output to accumulate into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">e_el</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the electrostatics energy output to accumulate into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">fshift</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shift force buffer to accumulate into</para></parameterdescription>
</parameteritem>
</parameterlist>
Completes the nonbonded GPU task blocking until GPU tasks and data transfers to finish.</para><para>Also does timing accounting and reduction of the internal staging buffers. As this is called at the end of the step, it also resets the pair list and pruning flags.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nb</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonbonded data GPU structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Force flags </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">aloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Atom locality identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">e_lj</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the LJ energy output to accumulate into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">e_el</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the electrostatics energy output to accumulate into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">fshift</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shift force buffer to accumulate into </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu.h" line="181" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu_common.h" bodystart="364" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="nbnxn__gpu_8h_1ae9a6120b6a1b95d61a49599c35952562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nbnxn_gpu_pick_ewald_kernel_type</definition>
        <argsstring>(bool bTwinCut)</argsstring>
        <name>nbnxn_gpu_pick_ewald_kernel_type</name>
        <param>
          <type>bool</type>
          <declname>bTwinCut</declname>
        </param>
        <briefdescription>
<para>Selects the Ewald kernel type, analytical or tabulated, single or twin cut-off. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu.h" line="190" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl.cpp" bodystart="930" bodyend="984"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Declare interface for GPU execution for NBNXN module. </para>    </briefdescription>
    <detaileddescription>
<internal><para><simplesect kind="author"><para>Szilard Pall <ulink url="mailto:pall.szilard@gmail.com">pall.szilard@gmail.com</ulink> </para><simplesectsep/><para>Mark Abraham <ulink url="mailto:mark.j.abraham@gmail.com">mark.j.abraham@gmail.com</ulink> </para></simplesect>
</para></internal>
    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/mdlib/nbnxn_gpu.h"/>
  </compounddef>
</doxygen>
