<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03" kind="namespace">
    <compoundname>gmx::anonymous_namespace{biasstate.cpp}</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03_1a35de2b696b3d831e104e467a04ee21cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::anonymous_namespace{biasstate.cpp}::sumOverSimulations</definition>
        <argsstring>(gmx::ArrayRef&lt; int &gt; arrayRef, const gmx_multisim_t *multiSimComm)</argsstring>
        <name>sumOverSimulations</name>
        <param>
          <type><ref refid="classgmx_1_1ArrayRef" kindref="compound">gmx::ArrayRef</ref>&lt; int &gt;</type>
          <declname>arrayRef</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__multisim__t" kindref="compound">gmx_multisim_t</ref> *</type>
          <declname>multiSimComm</declname>
        </param>
        <briefdescription>
<para>Sum an array over all simulations on the master rank of each simulation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">arrayRef</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to sum. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">multiSimComm</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct for multi-simulation communication. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" line="101" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" bodystart="101" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03_1a06d8443ed515a25d417f329b6fc5d2de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::anonymous_namespace{biasstate.cpp}::sumOverSimulations</definition>
        <argsstring>(gmx::ArrayRef&lt; double &gt; arrayRef, const gmx_multisim_t *multiSimComm)</argsstring>
        <name>sumOverSimulations</name>
        <param>
          <type><ref refid="classgmx_1_1ArrayRef" kindref="compound">gmx::ArrayRef</ref>&lt; double &gt;</type>
          <declname>arrayRef</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__multisim__t" kindref="compound">gmx_multisim_t</ref> *</type>
          <declname>multiSimComm</declname>
        </param>
        <briefdescription>
<para>Sum an array over all simulations on the master rank of each simulation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">arrayRef</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to sum. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">multiSimComm</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct for multi-simulation communication. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" line="113" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" bodystart="113" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03_1aea99634f5c1d73c18cb07a9db27ba78a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::anonymous_namespace{biasstate.cpp}::sumOverSimulations</definition>
        <argsstring>(gmx::ArrayRef&lt; T &gt; arrayRef, const t_commrec *commRecord, const gmx_multisim_t *multiSimComm)</argsstring>
        <name>sumOverSimulations</name>
        <param>
          <type><ref refid="classgmx_1_1ArrayRef" kindref="compound">gmx::ArrayRef</ref>&lt; T &gt;</type>
          <declname>arrayRef</declname>
        </param>
        <param>
          <type>const <ref refid="structt__commrec" kindref="compound">t_commrec</ref> *</type>
          <declname>commRecord</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__multisim__t" kindref="compound">gmx_multisim_t</ref> *</type>
          <declname>multiSimComm</declname>
        </param>
        <briefdescription>
<para>Sum an array over all simulations on all ranks of each simulation. </para>        </briefdescription>
        <detaileddescription>
<para>This assumes the data is identical on all ranks within each simulation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">arrayRef</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to sum. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">commRecord</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct for intra-simulation communication. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">multiSimComm</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct for multi-simulation communication. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" line="129" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" bodystart="129" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03_1a1a40c2b14cd270dbbeb93a2f05fc05b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::anonymous_namespace{biasstate.cpp}::sumPmf</definition>
        <argsstring>(gmx::ArrayRef&lt; PointState &gt; pointState, int numSharedUpdate, const t_commrec *commRecord, const gmx_multisim_t *multiSimComm)</argsstring>
        <name>sumPmf</name>
        <param>
          <type><ref refid="classgmx_1_1ArrayRef" kindref="compound">gmx::ArrayRef</ref>&lt; <ref refid="classgmx_1_1PointState" kindref="compound">PointState</ref> &gt;</type>
          <declname>pointState</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numSharedUpdate</declname>
        </param>
        <param>
          <type>const <ref refid="structt__commrec" kindref="compound">t_commrec</ref> *</type>
          <declname>commRecord</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__multisim__t" kindref="compound">gmx_multisim_t</ref> *</type>
          <declname>multiSimComm</declname>
        </param>
        <briefdescription>
<para>Sum PMF over multiple simulations, when requested. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">pointState</parametername>
</parameternamelist>
<parameterdescription>
<para>The state of the points in the bias. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSharedUpdate</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of biases sharing the histogram. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">commRecord</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct for intra-simulation communication. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">multiSimComm</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct for multi-simulation communication. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" line="151" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" bodystart="151" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03_1abd2052f08307e882b2324bbd4d4404fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double gmx::anonymous_namespace{biasstate.cpp}::freeEnergyMinimumValue</definition>
        <argsstring>(gmx::ArrayRef&lt; const PointState &gt; pointState)</argsstring>
        <name>freeEnergyMinimumValue</name>
        <param>
          <type><ref refid="classgmx_1_1ArrayRef" kindref="compound">gmx::ArrayRef</ref>&lt; const <ref refid="classgmx_1_1PointState" kindref="compound">PointState</ref> &gt;</type>
          <declname>pointState</declname>
        </param>
        <briefdescription>
<para>Find the minimum free energy value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pointState</parametername>
</parameternamelist>
<parameterdescription>
<para>The state of the points. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the minimum free energy value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" line="190" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" bodystart="190" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03_1aaf0135bd2340045f0513a7b84b9b9ea7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double gmx::anonymous_namespace{biasstate.cpp}::biasedLogWeightFromPoint</definition>
        <argsstring>(const std::vector&lt; DimParams &gt; &amp;dimParams, const std::vector&lt; PointState &gt; &amp;points, const Grid &amp;grid, int pointIndex, double pointBias, const awh_dvec value)</argsstring>
        <name>biasedLogWeightFromPoint</name>
        <param>
          <type>const std::vector&lt; <ref refid="structgmx_1_1DimParams" kindref="compound">DimParams</ref> &gt; &amp;</type>
          <declname>dimParams</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classgmx_1_1PointState" kindref="compound">PointState</ref> &gt; &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const <ref refid="classgmx_1_1Grid" kindref="compound">Grid</ref> &amp;</type>
          <declname>grid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pointIndex</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pointBias</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegmx_1a079fa4aee8e4c6663f35aa1d0f4bac4b" kindref="member">awh_dvec</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find and return the log of the probability weight of a point given a coordinate value. </para>        </briefdescription>
        <detaileddescription>
<para>The unnormalized weight is given by w(point|value) = exp(bias(point) - U(value,point)), where U is a harmonic umbrella potential.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dimParams</parametername>
</parameternamelist>
<parameterdescription>
<para>The bias dimensions parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">points</parametername>
</parameternamelist>
<parameterdescription>
<para>The point state. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grid</parametername>
</parameternamelist>
<parameterdescription>
<para>The grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pointIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Point to evaluate probability weight for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pointBias</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1Bias" kindref="compound">Bias</ref> for the point (as a log weight). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordinate value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the log of the biased probability weight. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" line="220" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" bodystart="220" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03_1afeb2ea590ea8dab586ca9959305c6dd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::anonymous_namespace{biasstate.cpp}::updateTargetDistribution</definition>
        <argsstring>(gmx::ArrayRef&lt; PointState &gt; pointState, const BiasParams &amp;params)</argsstring>
        <name>updateTargetDistribution</name>
        <param>
          <type><ref refid="classgmx_1_1ArrayRef" kindref="compound">gmx::ArrayRef</ref>&lt; <ref refid="classgmx_1_1PointState" kindref="compound">PointState</ref> &gt;</type>
          <declname>pointState</declname>
        </param>
        <param>
          <type>const <ref refid="classgmx_1_1BiasParams" kindref="compound">BiasParams</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Updates the target distribution for all points. </para>        </briefdescription>
        <detaileddescription>
<para>The target distribution is always updated for all points at the same time.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">pointState</parametername>
</parameternamelist>
<parameterdescription>
<para>The state of all points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>The bias parameters. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" line="294" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" bodystart="294" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03_1a9bfa801f705286cbc0546376caf1de8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::anonymous_namespace{biasstate.cpp}::gridPointValueString</definition>
        <argsstring>(const Grid &amp;grid, int point)</argsstring>
        <name>gridPointValueString</name>
        <param>
          <type>const <ref refid="classgmx_1_1Grid" kindref="compound">Grid</ref> &amp;</type>
          <declname>grid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Puts together a string describing a grid point. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">grid</parametername>
</parameternamelist>
<parameterdescription>
<para>The grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">point</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1Grid" kindref="compound">Grid</ref> point index. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a string for the point. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" line="325" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" bodystart="325" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03_1aa5ce0c3c41198ed59a80d2bdec6be746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::anonymous_namespace{biasstate.cpp}::setHistogramUpdateScaleFactors</definition>
        <argsstring>(const BiasParams &amp;params, double newHistogramSize, double oldHistogramSize, double *weightHistScaling, double *logPmfSumScaling)</argsstring>
        <name>setHistogramUpdateScaleFactors</name>
        <param>
          <type>const <ref refid="classgmx_1_1BiasParams" kindref="compound">BiasParams</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>double</type>
          <declname>newHistogramSize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>oldHistogramSize</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>weightHistScaling</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>logPmfSumScaling</declname>
        </param>
        <briefdescription>
<para>Sets the histogram rescaling factors needed to control the histogram size. </para>        </briefdescription>
        <detaileddescription>
<para>For sake of robustness, the reference weight histogram can grow at a rate different from the actual sampling rate. Typically this happens for a limited initial time, alternatively growth is scaled down by a constant factor for all times. Since the size of the reference histogram sets the size of the free energy update this should be reflected also in the PMF. Thus the PMF histogram needs to be rescaled too.</para><para>This function should only be called by the bias update function or wrapped by a function that knows what scale factors should be applied when, e.g, getSkippedUpdateHistogramScaleFactors().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>The bias parameters. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">newHistogramSize</parametername>
</parameternamelist>
<parameterdescription>
<para>New reference weight histogram size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oldHistogramSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Previous reference weight histogram size (before adding new samples). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">weightHistScaling</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaling factor for the reference weight histogram. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">logPmfSumScaling</parametername>
</parameternamelist>
<parameterdescription>
<para>Log of the scaling factor for the PMF histogram. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" line="529" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" bodystart="529" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03_1a7aa37aeaccf1b231286dc3709eb63203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::anonymous_namespace{biasstate.cpp}::mergeSharedUpdateLists</definition>
        <argsstring>(std::vector&lt; int &gt; *updateList, int numPoints, const t_commrec *commRecord, const gmx_multisim_t *multiSimComm)</argsstring>
        <name>mergeSharedUpdateLists</name>
        <param>
          <type>std::vector&lt; int &gt; *</type>
          <declname>updateList</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type>const <ref refid="structt__commrec" kindref="compound">t_commrec</ref> *</type>
          <declname>commRecord</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__multisim__t" kindref="compound">gmx_multisim_t</ref> *</type>
          <declname>multiSimComm</declname>
        </param>
        <briefdescription>
<para>Merge update lists from multiple sharing simulations. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">updateList</parametername>
</parameternamelist>
<parameterdescription>
<para>Update list for this simulation (assumed &gt;= npoints long). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">commRecord</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct for intra-simulation communication. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">multiSimComm</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct for multi-simulation communication. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" line="624" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" bodystart="624" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03_1a6420c1f1d5e452d108586787407d3b8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::anonymous_namespace{biasstate.cpp}::makeLocalUpdateList</definition>
        <argsstring>(const Grid &amp;grid, const std::vector&lt; PointState &gt; &amp;points, const awh_ivec originUpdatelist, const awh_ivec endUpdatelist, std::vector&lt; int &gt; *updateList)</argsstring>
        <name>makeLocalUpdateList</name>
        <param>
          <type>const <ref refid="classgmx_1_1Grid" kindref="compound">Grid</ref> &amp;</type>
          <declname>grid</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classgmx_1_1PointState" kindref="compound">PointState</ref> &gt; &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegmx_1a74baae008f9132c5e0daf2a02b122b3b" kindref="member">awh_ivec</ref></type>
          <declname>originUpdatelist</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegmx_1a74baae008f9132c5e0daf2a02b122b3b" kindref="member">awh_ivec</ref></type>
          <declname>endUpdatelist</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; *</type>
          <declname>updateList</declname>
        </param>
        <briefdescription>
<para>Generate an update list of points sampled since the last update. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">grid</parametername>
</parameternamelist>
<parameterdescription>
<para>The AWH bias. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">points</parametername>
</parameternamelist>
<parameterdescription>
<para>The point state. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">originUpdatelist</parametername>
</parameternamelist>
<parameterdescription>
<para>The origin of the rectangular region that has been sampled since last update. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">endUpdatelist</parametername>
</parameternamelist>
<parameterdescription>
<para>The end of the rectangular that has been sampled since last update. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">updateList</parametername>
</parameternamelist>
<parameterdescription>
<para>Local update list to set (assumed &gt;= npoints long). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" line="662" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" bodystart="662" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03_1a46bdf925776fbb73f5b64ade5554e5f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::anonymous_namespace{biasstate.cpp}::sumHistograms</definition>
        <argsstring>(gmx::ArrayRef&lt; PointState &gt; pointState, gmx::ArrayRef&lt; double &gt; weightSumCovering, int numSharedUpdate, const t_commrec *commRecord, const gmx_multisim_t *multiSimComm, const std::vector&lt; int &gt; &amp;localUpdateList)</argsstring>
        <name>sumHistograms</name>
        <param>
          <type><ref refid="classgmx_1_1ArrayRef" kindref="compound">gmx::ArrayRef</ref>&lt; <ref refid="classgmx_1_1PointState" kindref="compound">PointState</ref> &gt;</type>
          <declname>pointState</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1ArrayRef" kindref="compound">gmx::ArrayRef</ref>&lt; double &gt;</type>
          <declname>weightSumCovering</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numSharedUpdate</declname>
        </param>
        <param>
          <type>const <ref refid="structt__commrec" kindref="compound">t_commrec</ref> *</type>
          <declname>commRecord</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__multisim__t" kindref="compound">gmx_multisim_t</ref> *</type>
          <declname>multiSimComm</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>localUpdateList</declname>
        </param>
        <briefdescription>
<para>Add partial histograms (accumulating between updates) to accumulating histograms. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">pointState</parametername>
</parameternamelist>
<parameterdescription>
<para>The state of the points in the bias. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">weightSumCovering</parametername>
</parameternamelist>
<parameterdescription>
<para>The weights for checking covering. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSharedUpdate</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of biases sharing the histrogram. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">commRecord</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct for intra-simulation communication. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">multiSimComm</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct for multi-simulation communication. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">localUpdateList</parametername>
</parameternamelist>
<parameterdescription>
<para>List of points with data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" line="724" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" bodystart="724" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03_1a27577fbdc869882943b26c60ca5caa94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::anonymous_namespace{biasstate.cpp}::labelCoveredPoints</definition>
        <argsstring>(const std::vector&lt; bool &gt; &amp;visited, const std::vector&lt; bool &gt; &amp;checkCovering, int numPoints, int period, int coverRadius, gmx::ArrayRef&lt; int &gt; covered)</argsstring>
        <name>labelCoveredPoints</name>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>visited</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>checkCovering</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>period</declname>
        </param>
        <param>
          <type>int</type>
          <declname>coverRadius</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1ArrayRef" kindref="compound">gmx::ArrayRef</ref>&lt; int &gt;</type>
          <declname>covered</declname>
        </param>
        <briefdescription>
<para>Label points along an axis as covered or not. </para>        </briefdescription>
        <detaileddescription>
<para>A point is covered if it is surrounded by visited points up to a radius = coverRadius.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">visited</parametername>
</parameternamelist>
<parameterdescription>
<para>Visited? For each point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">checkCovering</parametername>
</parameternamelist>
<parameterdescription>
<para>Check for covering? For each point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of grid points along this dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">period</parametername>
</parameternamelist>
<parameterdescription>
<para>Period in number of points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">coverRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>Cover radius, in points, needed for defining a point as covered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">covered</parametername>
</parameternamelist>
<parameterdescription>
<para>In this array elements are 1 for covered points and 0 for non-covered points, this routine assumes that <computeroutput>covered</computeroutput> has at least size <computeroutput>numPoints</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" line="793" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" bodystart="793" bodyend="882"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/awh/biasstate.cpp" line="93" column="1"/>
  </compounddef>
</doxygen>
