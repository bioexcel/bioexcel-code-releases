<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03" kind="namespace">
    <compoundname>gmx::anonymous_namespace{cpuinfo.cpp}</compoundname>
    <innerclass refid="structgmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1_1ApicIdLayout" prot="public">gmx::anonymous_namespace{cpuinfo.cpp}::ApicIdLayout</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1a44e29d4443e1e21b3d4ac6e2bf33bd3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::anonymous_namespace{cpuinfo.cpp}::trimString</definition>
        <argsstring>(std::string *s)</argsstring>
        <name>trimString</name>
        <param>
          <type>std::string *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Remove initial and trailing whitespace from string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to string where whitespace will be removed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" line="123" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" bodystart="123" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1a4bdcaf6e3d69274eccecdeeae144d1bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gmx::anonymous_namespace{cpuinfo.cpp}::executeX86CpuID</definition>
        <argsstring>(unsigned int level, unsigned int ecxval, unsigned int *eax, unsigned int *ebx, unsigned int *ecx, unsigned int *edx)</argsstring>
        <name>executeX86CpuID</name>
        <param>
          <type>unsigned int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>ecxval</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>eax</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>ebx</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>edx</declname>
        </param>
        <briefdescription>
<para>execute x86 cpuid instructions with custom level and extended level </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The main cpuid level (input argument for eax register) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ecxval</parametername>
</parameternamelist>
<parameterdescription>
<para>Extended level (input argument for ecx register) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eax</parametername>
</parameternamelist>
<parameterdescription>
<para>Output in eax register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ebx</parametername>
</parameternamelist>
<parameterdescription>
<para>Output in ebx register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ecx</parametername>
</parameternamelist>
<parameterdescription>
<para>Output in ecx register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edx</parametername>
</parameternamelist>
<parameterdescription>
<para>Output in edx register</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or non-zero if the instruction could not execute. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" line="150" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" bodystart="150" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1aeee53d102302715b4473dca0c1dca042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1CpuInfo_1acd7ff27553f3ff9fd1037c30c21a24f1" kindref="member">CpuInfo::Vendor</ref></type>
        <definition>CpuInfo::Vendor gmx::anonymous_namespace{cpuinfo.cpp}::detectX86Vendor</definition>
        <argsstring>()</argsstring>
        <name>detectX86Vendor</name>
        <briefdescription>
<para>Detect x86 vendors by using the cpuid assembly instructions. </para>        </briefdescription>
        <detaileddescription>
<para>If support for the cpuid instruction is present, we check for Intel or AMD vendors.</para><para><simplesect kind="return"><para><ref refid="classgmx_1_1CpuInfo_1acd7ff27553f3ff9fd1037c30c21a24f1aff97a9fdede09eaf6e1c8ec9f6a61dd5" kindref="member">gmx::CpuInfo::Vendor::Intel</ref>, <ref refid="classgmx_1_1CpuInfo_1acd7ff27553f3ff9fd1037c30c21a24f1abfd16f84e6b719aba6717bf2f3eb3580" kindref="member">gmx::CpuInfo::Vendor::Amd</ref>. If neither Intel nor Amd can be identified, or if the code fails to execute, <ref refid="classgmx_1_1CpuInfo_1acd7ff27553f3ff9fd1037c30c21a24f1a88183b946cc5f0e8c96b2e66e1c74a7e" kindref="member">gmx::CpuInfo::Vendor::Unknown</ref> is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" line="227" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" bodystart="227" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1a7f74228670a6b37eb982e7ee0b40e414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::anonymous_namespace{cpuinfo.cpp}::setFeatureFromBit</definition>
        <argsstring>(std::set&lt; CpuInfo::Feature &gt; *featureSet, CpuInfo::Feature feature, unsigned int registerValue, unsigned char bit)</argsstring>
        <name>setFeatureFromBit</name>
        <param>
          <type><ref refid="parser__internal_8h_1a8553aeb4ef79ad62e90241cf54e221d5" kindref="member">std::set</ref>&lt; <ref refid="classgmx_1_1CpuInfo_1ac8981fb299411577dccba90b335a9085" kindref="member">CpuInfo::Feature</ref> &gt; *</type>
          <declname>featureSet</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1CpuInfo_1ac8981fb299411577dccba90b335a9085" kindref="member">CpuInfo::Feature</ref></type>
          <declname>feature</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>registerValue</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
<para>Simple utility function to set/clear feature in a set. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>featureSet</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the feature set to update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>feature</parametername>
</parameternamelist>
<parameterdescription>
<para>The specific feature to set/clear </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>registerValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Register value (returned from cpuid) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit to check in registerValue. The feature will be added to the featureSet if this bit is set.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Nothing is done if the bit is not set. In particular, this will not erase anything if the feature already exists in the set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" line="258" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" bodystart="258" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1a74301a4d26acaa1d54b9fa6307238ebe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::anonymous_namespace{cpuinfo.cpp}::detectX86Features</definition>
        <argsstring>(std::string *brand, int *family, int *model, int *stepping, std::set&lt; CpuInfo::Feature &gt; *features)</argsstring>
        <name>detectX86Features</name>
        <param>
          <type>std::string *</type>
          <declname>brand</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>family</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>stepping</declname>
        </param>
        <param>
          <type><ref refid="parser__internal_8h_1a8553aeb4ef79ad62e90241cf54e221d5" kindref="member">std::set</ref>&lt; <ref refid="classgmx_1_1CpuInfo_1ac8981fb299411577dccba90b335a9085" kindref="member">CpuInfo::Feature</ref> &gt; *</type>
          <declname>features</declname>
        </param>
        <briefdescription>
<para>Process x86 cpuinfo features that are common to Intel and AMD CPUs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">brand</parametername>
</parameternamelist>
<parameterdescription>
<para>String where to write the x86 brand string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">family</parametername>
</parameternamelist>
<parameterdescription>
<para>Major version of processor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">model</parametername>
</parameternamelist>
<parameterdescription>
<para>Middle version of processor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">stepping</parametername>
</parameternamelist>
<parameterdescription>
<para>Minor version of processor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">features</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature set where supported features are inserted </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" line="278" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" bodystart="278" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1ad7e75432756584073167c1afadfbbafa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; unsigned int &gt;</type>
        <definition>const std::vector&lt;unsigned int&gt; gmx::anonymous_namespace{cpuinfo.cpp}::detectX86ApicIDs</definition>
        <argsstring>(bool haveX2Apic)</argsstring>
        <name>detectX86ApicIDs</name>
        <param>
          <type>bool</type>
          <declname>haveX2Apic</declname>
        </param>
        <briefdescription>
<para>Return a vector with x86 APIC IDs for all threads. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>haveX2Apic</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the processors supports x2APIC, otherwise vanilla APIC.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new std::vector of unsigned integer APIC IDs, one for each logical processor in the system. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" line="412" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" bodystart="412" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1a5d715595b28fc59b8ad7293a0adf48fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::anonymous_namespace{cpuinfo.cpp}::renumberIndex</definition>
        <argsstring>(std::vector&lt; unsigned int &gt; *v)</argsstring>
        <name>renumberIndex</name>
        <param>
          <type>std::vector&lt; unsigned int &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Utility to renumber indices extracted from APIC IDs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector with unsigned integer indices</para></parameterdescription>
</parameteritem>
</parameterlist>
This routine returns the number of unique different elements found in the vector, and renumbers these starting from 0. For example, the vector {0,1,2,8,9,10,8,9,10,0,1,2} will be rewritten to {0,1,2,3,4,5,3,4,5,0,1,2}, and it returns 6 for the number of unique elements. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" line="479" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" bodystart="479" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1a63909edc88ac1cf356d3d31f6f7e6de0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1_1ApicIdLayout" kindref="compound">ApicIdLayout</ref></type>
        <definition>ApicIdLayout gmx::anonymous_namespace{cpuinfo.cpp}::detectX2ApicIdLayout</definition>
        <argsstring>()</argsstring>
        <name>detectX2ApicIdLayout</name>
        <briefdescription>
<para>Detect the APIC ID layout for x2APIC. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" line="505" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" bodystart="505" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1aba97bd2744c1dae8d09128ba04728b59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1_1ApicIdLayout" kindref="compound">ApicIdLayout</ref></type>
        <definition>ApicIdLayout gmx::anonymous_namespace{cpuinfo.cpp}::detectAmdApicIdLayout</definition>
        <argsstring>(unsigned int maxExtLevel)</argsstring>
        <name>detectAmdApicIdLayout</name>
        <param>
          <type>unsigned int</type>
          <declname>maxExtLevel</declname>
        </param>
        <briefdescription>
<para>Detect the APIC ID layout for standard APIC or xAPIC on AMD. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">maxExtLevel</parametername>
</parameternamelist>
<parameterdescription>
<para>The largest CPUID extended function input value supported by the processor implementation </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" line="526" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" bodystart="526" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1ad382ef6cdcccb70e56a4c6036afd56e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structgmx_1_1CpuInfo_1_1LogicalProcessor" kindref="compound">CpuInfo::LogicalProcessor</ref> &gt;</type>
        <definition>std::vector&lt;CpuInfo::LogicalProcessor&gt; gmx::anonymous_namespace{cpuinfo.cpp}::detectX86LogicalProcessors</definition>
        <argsstring>()</argsstring>
        <name>detectX86LogicalProcessors</name>
        <briefdescription>
<para>Try to detect basic CPU topology information using x86 cpuid. </para>        </briefdescription>
        <detaileddescription>
<para>If x2APIC support is present, this is our first choice, otherwise we attempt to use old vanilla APIC.</para><para><simplesect kind="return"><para>A new vector of entries with socket, core, hwthread information for each logical processor. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" line="580" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" bodystart="580" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1a48bc3acdd308d4c69c76b239d96de2a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::map&lt; std::string, std::string &gt;</type>
        <definition>const std::map&lt;std::string, std::string&gt; gmx::anonymous_namespace{cpuinfo.cpp}::parseProcCpuInfo</definition>
        <argsstring>()</argsstring>
        <name>parseProcCpuInfo</name>
        <briefdescription>
<para>Parse /proc/cpuinfo into a simple string map. </para>        </briefdescription>
        <detaileddescription>
<para>This routine will read the contents of /proc/cpuinfo, and for each line that is not empty we will assign the (trimmed) string to the right of the colon as a key, and the left-hand side as the value in the map. For multi-processor systems where lines are repeated the latter lines will overwrite the first occurrence.</para><para><simplesect kind="return"><para>New map with the contents. If the file is not available, the returned map will be empty. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" line="702" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" bodystart="702" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1ae08bde9ffb0fd51a7b932b30906876dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1CpuInfo_1acd7ff27553f3ff9fd1037c30c21a24f1" kindref="member">CpuInfo::Vendor</ref></type>
        <definition>CpuInfo::Vendor gmx::anonymous_namespace{cpuinfo.cpp}::detectProcCpuInfoVendor</definition>
        <argsstring>(const std::map&lt; std::string, std::string &gt; &amp;cpuInfo)</argsstring>
        <name>detectProcCpuInfoVendor</name>
        <param>
          <type>const std::map&lt; std::string, std::string &gt; &amp;</type>
          <declname>cpuInfo</declname>
        </param>
        <briefdescription>
<para>Try to detect vendor from /proc/cpuinfo. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpuInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Map returned from parseProcCpuinfo()</para></parameterdescription>
</parameteritem>
</parameterlist>
This routine tries to match a few common labels in /proc/cpuinfo to see if they begin with the name of a standard vendor. If the file cannot be read or if no match is found, we return <ref refid="classgmx_1_1CpuInfo_1acd7ff27553f3ff9fd1037c30c21a24f1a88183b946cc5f0e8c96b2e66e1c74a7e" kindref="member">gmx::CpuInfo::Vendor::Unknown</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" line="736" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" bodystart="736" bodyend="776"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1ade3cf177f1036630e2a1bc0fbb7e8a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::anonymous_namespace{cpuinfo.cpp}::detectProcCpuInfoIbm</definition>
        <argsstring>(const std::map&lt; std::string, std::string &gt; &amp;cpuInfo, std::string *brand, std::set&lt; CpuInfo::Feature &gt; *features)</argsstring>
        <name>detectProcCpuInfoIbm</name>
        <param>
          <type>const std::map&lt; std::string, std::string &gt; &amp;</type>
          <declname>cpuInfo</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>brand</declname>
        </param>
        <param>
          <type><ref refid="parser__internal_8h_1a8553aeb4ef79ad62e90241cf54e221d5" kindref="member">std::set</ref>&lt; <ref refid="classgmx_1_1CpuInfo_1ac8981fb299411577dccba90b335a9085" kindref="member">CpuInfo::Feature</ref> &gt; *</type>
          <declname>features</declname>
        </param>
        <briefdescription>
<para>Detect IBM processor name and features from /proc/cpuinfo. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpuInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Map returned from parseProcCpuinfo() </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">brand</parametername>
</parameternamelist>
<parameterdescription>
<para>String where to write the brand string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">features</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature set where supported features are inserted</para></parameterdescription>
</parameteritem>
</parameterlist>
This routine tries to match a few common labels in /proc/cpuinfo to see if we can find the processor name and features. It is likely fragile. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" line="789" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" bodystart="789" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1a3e4b8369e087c591af34972269eaedbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::anonymous_namespace{cpuinfo.cpp}::detectProcCpuInfoArm</definition>
        <argsstring>(const std::map&lt; std::string, std::string &gt; &amp;cpuInfo, std::string *brand, int *family, int *model, int *stepping, std::set&lt; CpuInfo::Feature &gt; *features)</argsstring>
        <name>detectProcCpuInfoArm</name>
        <param>
          <type>const std::map&lt; std::string, std::string &gt; &amp;</type>
          <declname>cpuInfo</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>brand</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>family</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>stepping</declname>
        </param>
        <param>
          <type><ref refid="parser__internal_8h_1a8553aeb4ef79ad62e90241cf54e221d5" kindref="member">std::set</ref>&lt; <ref refid="classgmx_1_1CpuInfo_1ac8981fb299411577dccba90b335a9085" kindref="member">CpuInfo::Feature</ref> &gt; *</type>
          <declname>features</declname>
        </param>
        <briefdescription>
<para>Detect ARM processor name and features from /proc/cpuinfo. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpuInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Map returned from parseProcCpuinfo() </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">brand</parametername>
</parameternamelist>
<parameterdescription>
<para>String where to write the brand string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">family</parametername>
</parameternamelist>
<parameterdescription>
<para>Major version of processor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">model</parametername>
</parameternamelist>
<parameterdescription>
<para>Middle version of processor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">stepping</parametername>
</parameternamelist>
<parameterdescription>
<para>Minor version of processor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">features</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature set where supported features are inserted</para></parameterdescription>
</parameteritem>
</parameterlist>
This routine tries to match a few common labels in /proc/cpuinfo to see if we can find the processor name and features. It is likely fragile. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" line="843" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" bodystart="843" bodyend="895"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1afbf5bc3ecda5f4158fb6f39ca9408876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::anonymous_namespace{cpuinfo.cpp}::detectProcCpuInfo</definition>
        <argsstring>(CpuInfo::Vendor *vendor, std::string *brand, int *family, int *model, int *stepping, std::set&lt; CpuInfo::Feature &gt; *features)</argsstring>
        <name>detectProcCpuInfo</name>
        <param>
          <type><ref refid="classgmx_1_1CpuInfo_1acd7ff27553f3ff9fd1037c30c21a24f1" kindref="member">CpuInfo::Vendor</ref> *</type>
          <declname>vendor</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>brand</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>family</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>stepping</declname>
        </param>
        <param>
          <type><ref refid="parser__internal_8h_1a8553aeb4ef79ad62e90241cf54e221d5" kindref="member">std::set</ref>&lt; <ref refid="classgmx_1_1CpuInfo_1ac8981fb299411577dccba90b335a9085" kindref="member">CpuInfo::Feature</ref> &gt; *</type>
          <declname>features</declname>
        </param>
        <briefdescription>
<para>Try to detect vendor, cpu and features from /proc/cpuinfo. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">vendor</parametername>
</parameternamelist>
<parameterdescription>
<para>Detected hardware vendor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">brand</parametername>
</parameternamelist>
<parameterdescription>
<para>String where to write the brand string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">family</parametername>
</parameternamelist>
<parameterdescription>
<para>Major version of processor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">model</parametername>
</parameternamelist>
<parameterdescription>
<para>Middle version of processor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">stepping</parametername>
</parameternamelist>
<parameterdescription>
<para>Minor version of processor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">features</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature set where supported features are inserted</para></parameterdescription>
</parameteritem>
</parameterlist>
This routine reads the /proc/cpuinfo file into a map and calls subroutines that attempt to parse by matching keys and values to known strings. It is much more fragile than our x86 detection, but it does not depend on specific system calls, intrinsics or assembly instructions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" line="913" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" bodystart="913" bodyend="947"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/hardware/cpuinfo.cpp" line="108" column="1"/>
  </compounddef>
</doxygen>
