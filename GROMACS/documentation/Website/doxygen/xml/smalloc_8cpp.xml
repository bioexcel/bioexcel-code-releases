<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="smalloc_8cpp" kind="file">
    <compoundname>smalloc.cpp</compoundname>
    <includes refid="gmxpre_8h" local="yes">gmxpre.h</includes>
    <includes refid="smalloc_8h" local="yes">smalloc.h</includes>
    <includes local="yes">config.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">cstring</includes>
    <includes local="yes">thread_mpi/threads.h</includes>
    <includes refid="alignedallocator_8h" local="yes">gromacs/utility/alignedallocator.h</includes>
    <includes refid="dir__separator_8h" local="yes">gromacs/utility/dir_separator.h</includes>
    <includes refid="fatalerror_8h" local="yes">gromacs/utility/fatalerror.h</includes>
    <incdepgraph>
      <node id="32716">
        <label>stdarg.h</label>
      </node>
      <node id="32708">
        <label>thread_mpi/threads.h</label>
      </node>
      <node id="32701">
        <label>stdint.h</label>
      </node>
      <node id="32706">
        <label>stdlib.h</label>
      </node>
      <node id="32704">
        <label>errno.h</label>
      </node>
      <node id="32709">
        <label>gromacs/utility/alignedallocator.h</label>
        <link refid="alignedallocator_8h"/>
        <childnode refid="32710" relation="include">
        </childnode>
        <childnode refid="32711" relation="include">
        </childnode>
      </node>
      <node id="32699">
        <label>stddef.h</label>
      </node>
      <node id="32698">
        <label>smalloc.h</label>
        <link refid="smalloc_8h"/>
        <childnode refid="32699" relation="include">
        </childnode>
        <childnode refid="32700" relation="include">
        </childnode>
      </node>
      <node id="32713">
        <label>new</label>
      </node>
      <node id="32697">
        <label>gmxpre.h</label>
        <link refid="gmxpre_8h"/>
      </node>
      <node id="32700">
        <label>gromacs/utility/basedefinitions.h</label>
        <link refid="basedefinitions_8h"/>
        <childnode refid="32701" relation="include">
        </childnode>
        <childnode refid="32702" relation="include">
        </childnode>
      </node>
      <node id="32696">
        <label>src/gromacs/utility/smalloc.cpp</label>
        <link refid="smalloc.cpp"/>
        <childnode refid="32697" relation="include">
        </childnode>
        <childnode refid="32698" relation="include">
        </childnode>
        <childnode refid="32703" relation="include">
        </childnode>
        <childnode refid="32704" relation="include">
        </childnode>
        <childnode refid="32705" relation="include">
        </childnode>
        <childnode refid="32706" relation="include">
        </childnode>
        <childnode refid="32707" relation="include">
        </childnode>
        <childnode refid="32708" relation="include">
        </childnode>
        <childnode refid="32709" relation="include">
        </childnode>
        <childnode refid="32714" relation="include">
        </childnode>
        <childnode refid="32715" relation="include">
        </childnode>
      </node>
      <node id="32710">
        <label>cstddef</label>
      </node>
      <node id="32711">
        <label>gromacs/utility/allocator.h</label>
        <link refid="allocator_8h"/>
        <childnode refid="32710" relation="include">
        </childnode>
        <childnode refid="32712" relation="include">
        </childnode>
        <childnode refid="32713" relation="include">
        </childnode>
        <childnode refid="32700" relation="include">
        </childnode>
      </node>
      <node id="32703">
        <label>config.h</label>
      </node>
      <node id="32715">
        <label>gromacs/utility/fatalerror.h</label>
        <link refid="fatalerror_8h"/>
        <childnode refid="32716" relation="include">
        </childnode>
        <childnode refid="32705" relation="include">
        </childnode>
        <childnode refid="32700" relation="include">
        </childnode>
      </node>
      <node id="32705">
        <label>stdio.h</label>
      </node>
      <node id="32707">
        <label>cstring</label>
      </node>
      <node id="32714">
        <label>gromacs/utility/dir_separator.h</label>
        <link refid="dir__separator_8h"/>
        <childnode refid="32703" relation="include">
        </childnode>
      </node>
      <node id="32712">
        <label>memory</label>
      </node>
      <node id="32702">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="smalloc_8cpp_1a4246e1888cde52d8ef4044721fcc5d9f" prot="public" static="yes" mutable="no">
        <type><ref refid="basedefinitions_8h_1a8fddad319f226e856400d190198d5151" kindref="member">gmx_bool</ref></type>
        <definition>gmx_bool g_bOverAllocDD</definition>
        <argsstring></argsstring>
        <name>g_bOverAllocDD</name>
        <initializer>=  0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" line="63" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="smalloc_8cpp_1a395475c69bdb46c4f841fb9d31f34ff6" prot="public" static="yes" mutable="no">
        <type>tMPI_Thread_mutex_t</type>
        <definition>tMPI_Thread_mutex_t g_over_alloc_mutex</definition>
        <argsstring></argsstring>
        <name>g_over_alloc_mutex</name>
        <initializer>= TMPI_THREAD_MUTEX_INITIALIZER</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" line="64" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="smalloc_8cpp_1a6e678051bdba16b4a5db399c8cc0c128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* save_malloc</definition>
        <argsstring>(const char *name, const char *file, int line, size_t size)</argsstring>
        <name>save_malloc</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>GROMACS wrapper for malloc(). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable name identifying the allocation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>Source code file where the allocation originates from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">line</parametername>
</parameternamelist>
<parameterdescription>
<para>Source code line where the allocation originates from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to allocate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the allocated space.</para></simplesect>
This should generally be called through <ref refid="smalloc_8h_1a435ad4efd4f0ff20e7ade4cc86e2969c" kindref="member">smalloc()</ref>, not directly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" line="119" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" bodystart="119" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="smalloc_8cpp_1a6e6d52179c08b1acafb1e2dcb3aadd23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* save_calloc</definition>
        <argsstring>(const char *name, const char *file, int line, size_t nelem, size_t elsize)</argsstring>
        <name>save_calloc</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nelem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elsize</declname>
        </param>
        <briefdescription>
<para>GROMACS wrapper for calloc(). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable name identifying the allocation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>Source code file where the allocation originates from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">line</parametername>
</parameternamelist>
<parameterdescription>
<para>Source code line where the allocation originates from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nelem</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to allocate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">elsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes per element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the allocated space.</para></simplesect>
This should generally be called through <ref refid="smalloc_8h_1a11f5e6d285a313414a895fb84c8c7194" kindref="member">snew()</ref>, not directly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" line="145" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" bodystart="145" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="smalloc_8cpp_1a50f9a1ae3317f66f3bb40f25fe9bd6ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* save_realloc</definition>
        <argsstring>(const char *name, const char *file, int line, void *ptr, size_t nelem, size_t elsize)</argsstring>
        <name>save_realloc</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nelem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elsize</declname>
        </param>
        <briefdescription>
<para>GROMACS wrapper for realloc(). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable name identifying the allocation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>Source code file where the allocation originates from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">line</parametername>
</parameternamelist>
<parameterdescription>
<para>Source code line where the allocation originates from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the previously allocated memory (can be NULL). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nelem</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to allocate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">elsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes per element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the allocated space.</para></simplesect>
As with realloc(), if <computeroutput>ptr</computeroutput> is NULL, memory is allocated as if malloc() was called. This should generally be called through <ref refid="smalloc_8h_1a7fceb0e6af50dcbbb99b270951be060e" kindref="member">srenew()</ref>, not directly.</para><para>Note that the allocated memory is not initialized to zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" line="195" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" bodystart="195" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="smalloc_8cpp_1a1a8ebd96b293ca1f67b3dd41ff1eb43a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void save_free</definition>
        <argsstring>(const char *name, const char *file, int line, void *ptr)</argsstring>
        <name>save_free</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>GROMACS wrapper for free(). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable name identifying the deallocation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>Source code file where the deallocation originates from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">line</parametername>
</parameternamelist>
<parameterdescription>
<para>Source code line where the deallocation originates from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the allocated memory (can be NULL).</para></parameterdescription>
</parameteritem>
</parameterlist>
If <computeroutput>ptr</computeroutput> is NULL, does nothing. This should generally be called through <ref refid="smalloc_8h_1acd9f9223d6d8cad01c8f42a416d3292d" kindref="member">sfree()</ref>, not directly. This never fails. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" line="238" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" bodystart="238" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="smalloc_8cpp_1a70925c108d1c6a8be40614483a58825b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* save_malloc_aligned</definition>
        <argsstring>(const char *name, const char *file, int line, size_t nelem, size_t elsize, size_t alignment)</argsstring>
        <name>save_malloc_aligned</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nelem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elsize</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>GROMACS wrapper for allocating aligned memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable name identifying the allocation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>Source code file where the allocation originates from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">line</parametername>
</parameternamelist>
<parameterdescription>
<para>Source code line where the allocation originates from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nelem</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to allocate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">elsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes per element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested alignment in bytes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the allocated space, aligned at <computeroutput>alignment</computeroutput>-byte boundary.</para></simplesect>
There is no macro that invokes this function.</para><para>The returned pointer should only be freed with a call to <ref refid="smalloc_8h_1ae35d52a2d595ae960055674b4a0d566a" kindref="member">save_free_aligned()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" line="254" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" bodystart="254" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="smalloc_8cpp_1a073f66115e277b397e07c2ad86ee4075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* save_calloc_aligned</definition>
        <argsstring>(const char *name, const char *file, int line, size_t nelem, size_t elsize, size_t alignment)</argsstring>
        <name>save_calloc_aligned</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nelem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elsize</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>GROMACS wrapper for allocating zero-initialized aligned memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable name identifying the allocation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>Source code file where the allocation originates from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">line</parametername>
</parameternamelist>
<parameterdescription>
<para>Source code line where the allocation originates from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nelem</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to allocate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">elsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes per element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested alignment in bytes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the allocated space, aligned at <computeroutput>alignment</computeroutput>-byte boundary.</para></simplesect>
This should generally be called through <ref refid="smalloc_8h_1a5288c209907ae6db0870ce0412103d0c" kindref="member">snew_aligned()</ref>, not directly.</para><para>The returned pointer should only be freed with a call to <ref refid="smalloc_8h_1ae35d52a2d595ae960055674b4a0d566a" kindref="member">save_free_aligned()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" line="299" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" bodystart="299" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="smalloc_8cpp_1ae35d52a2d595ae960055674b4a0d566a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void save_free_aligned</definition>
        <argsstring>(const char *name, const char *file, int line, void *ptr)</argsstring>
        <name>save_free_aligned</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>GROMACS wrapper for freeing aligned memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable name identifying the deallocation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>Source code file where the deallocation originates from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">line</parametername>
</parameternamelist>
<parameterdescription>
<para>Source code line where the deallocation originates from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the allocated memory (can be NULL).</para></parameterdescription>
</parameteritem>
</parameterlist>
If <computeroutput>ptr</computeroutput> is NULL, does nothing. <computeroutput>ptr</computeroutput> should have been allocated with <ref refid="smalloc_8h_1a70925c108d1c6a8be40614483a58825b" kindref="member">save_malloc_aligned()</ref> or <ref refid="smalloc_8h_1a073f66115e277b397e07c2ad86ee4075" kindref="member">save_calloc_aligned()</ref>. This should generally be called through <ref refid="smalloc_8h_1a746540f663a9e22da12123b3edaaefef" kindref="member">sfree_aligned()</ref>, not directly. This never fails. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" line="311" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" bodystart="311" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="smalloc_8cpp_1ab3d98b1efa6c2b42d2c0d216eafafec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_over_alloc_dd</definition>
        <argsstring>(gmx_bool set)</argsstring>
        <name>set_over_alloc_dd</name>
        <param>
          <type><ref refid="basedefinitions_8h_1a8fddad319f226e856400d190198d5151" kindref="member">gmx_bool</ref></type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Turns over allocation for variable size atoms/cg/top arrays on or off, default is off. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000102"><xreftitle>Todo</xreftitle><xrefdescription><para>This is mdrun-specific, so it might be better to put this and <ref refid="smalloc_8h_1af1533c63c1d40c5bb9bfaaa6d898369a" kindref="member">over_alloc_dd()</ref> much higher up. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" line="316" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" bodystart="316" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="smalloc_8cpp_1af1533c63c1d40c5bb9bfaaa6d898369a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int over_alloc_dd</definition>
        <argsstring>(int n)</argsstring>
        <name>over_alloc_dd</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Returns new allocation count for domain decomposition allocations. </para>        </briefdescription>
        <detaileddescription>
<para>Returns n when domain decomposition over allocation is off. Returns OVER_ALLOC_FAC*n + 100 when over allocation in on. This is to avoid frequent reallocation during domain decomposition in mdrun. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" line="325" column="1" bodyfile="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp" bodystart="325" bodyend="335"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/jenkins/workspace/Release_workflow_master/gromacs-2018.3/src/gromacs/utility/smalloc.cpp"/>
  </compounddef>
</doxygen>
