<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::TrajectoryAnalysisModule Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml">TrajectoryAnalysisModule</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="classgmx_1_1TrajectoryAnalysisModule-members.xhtml">List of all members</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">gmx::TrajectoryAnalysisModule Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span><div class="ingroups"><a class="el" href="group__group__publicapi.xhtml">Public API</a> &#124; <a class="el" href="group__module__trajectoryanalysis.xhtml">Framework for Trajectory Analysis (trajectoryanalysis)</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;gromacs/trajectoryanalysis/analysismodule.h&gt;</code></p>

<p>Inherited by AnalysisTemplate, and gmx::SelectionTester.</p>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Base class for trajectory analysis modules. </p>
<p>Trajectory analysis methods should derive from this class and override the necessary virtual methods to implement initialization (<a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#aba5990675e980bf746ecd224f814d549" title="Initializes options understood by the module. ">initOptions()</a>, <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#afa3457cc922f1d16c4c19cec740e0442" title="Called after all option values have been set. ">optionsFinished()</a>, <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#ae5ae73770caad4ff1808c2ca655dad0e" title="Initializes the analysis. ">initAnalysis()</a>, <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a419a3d7f950f0731a20d6a7fafaa6d05" title="Performs additional initialization after reading the first frame. ">initAfterFirstFrame()</a>), per-frame analysis (<a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" title="Analyzes a single frame. ">analyzeFrame()</a>), and final processing (<a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a9d14bf1683086d3fafdb11e23e003de4" title="Finishes the analysis of frames. ">finishFrames()</a>, <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a3b9d902a262ba124be565eca5b714e4b" title="Postprocesses data after frames have been read. ">finishAnalysis()</a>, <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a80869a7764274db8e314bf0a1c5858f6" title="Writes output into files and/or standard output/error. ">writeOutput()</a>).</p>
<p>For parallel analysis using threads, only a single object is constructed, but the methods <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a6082fcf69bdc3b0a1945ece31437f195" title="Starts the analysis of frames. ">startFrames()</a>, <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" title="Analyzes a single frame. ">analyzeFrame()</a> and <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a9d14bf1683086d3fafdb11e23e003de4" title="Finishes the analysis of frames. ">finishFrames()</a> are called in each thread. Frame-local data should be initialized in <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a6082fcf69bdc3b0a1945ece31437f195" title="Starts the analysis of frames. ">startFrames()</a> and stored in a class derived from <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">TrajectoryAnalysisModuleData</a> that is passed to the other methods. The default implementation of <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a6082fcf69bdc3b0a1945ece31437f195" title="Starts the analysis of frames. ">startFrames()</a> can be used if only data handles and selections need to be thread-local.</p>
<p>To get the full benefit from this class, <a class="el" href="group__module__analysisdata.xhtml">analysis data objects</a> and <a class="el" href="group__module__selection.xhtml">selections</a> should be used in the implementation. See the corresponding modules' documentation for details of how they work.</p>
<p>Typical way of using <a class="el" href="classgmx_1_1AnalysisData.xhtml" title="Parallelizable data container for raw data. ">AnalysisData</a> in derived classes is to have the <a class="el" href="classgmx_1_1AnalysisData.xhtml" title="Parallelizable data container for raw data. ">AnalysisData</a> object as a member variable and register it using <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a86b3b5cd87518e988e8b5452b39a3ad1" title="Registers a parallelized dataset that exports data. ">registerAnalysisDataset()</a>. Analysis modules are initialized in <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#ae5ae73770caad4ff1808c2ca655dad0e" title="Initializes the analysis. ">initAnalysis()</a> and the processing chain is initialized. If any of the modules is required, e.g., for post-processing in <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a3b9d902a262ba124be565eca5b714e4b" title="Postprocesses data after frames have been read. ">finishAnalysis()</a>, it can be stored in a member variable. To add data to the data object in <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" title="Analyzes a single frame. ">analyzeFrame()</a>, a data handle is obtained using <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml#ae600024eaa634d84157bc7c75c020e97" title="Returns a data handle for a given dataset. ">TrajectoryAnalysisModuleData::dataHandle()</a>.</p>
<p>Typical way of using selections in derived classes is to have the required <a class="el" href="classgmx_1_1Selection.xhtml">Selection</a> objects (or <a class="el" href="namespacegmx.xhtml#ac852a0801cf49723903e23bc77a32163" title="Container of selections used in public selection interfaces. ">SelectionList</a> objects) as member variables, and add the required selection options in <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#aba5990675e980bf746ecd224f814d549" title="Initializes options understood by the module. ">initOptions()</a>. These member variables can be accessed in <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#ae5ae73770caad4ff1808c2ca655dad0e" title="Initializes the analysis. ">initAnalysis()</a> to get general information about the selections. In <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" title="Analyzes a single frame. ">analyzeFrame()</a>, these selection objects should not be used directly, but instead <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml#a4e23dbf4cfd2554ac011664b49c1c7e0" title="Returns a selection that corresponds to the given selection. ">TrajectoryAnalysisModuleData::parallelSelection()</a> should be used to obtain a selection object that works correctly also for parallel analysis.</p>
<p>Derived classes should use exceptions to indicate errors in the virtual methods. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="template_8cpp-example.xhtml#_a0">template.cpp</a>.</dd>
</dl></div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aba5990675e980bf746ecd224f814d549"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#aba5990675e980bf746ecd224f814d549">initOptions</a> (<a class="el" href="classgmx_1_1IOptionsContainer.xhtml">IOptionsContainer</a> *options, <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">TrajectoryAnalysisSettings</a> *settings)=0</td></tr>
<tr class="memdesc:aba5990675e980bf746ecd224f814d549"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes options understood by the module.  <a href="#aba5990675e980bf746ecd224f814d549">More...</a><br/></td></tr>
<tr class="separator:aba5990675e980bf746ecd224f814d549"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa3457cc922f1d16c4c19cec740e0442"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#afa3457cc922f1d16c4c19cec740e0442">optionsFinished</a> (<a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">TrajectoryAnalysisSettings</a> *settings)</td></tr>
<tr class="memdesc:afa3457cc922f1d16c4c19cec740e0442"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called after all option values have been set.  <a href="#afa3457cc922f1d16c4c19cec740e0442">More...</a><br/></td></tr>
<tr class="separator:afa3457cc922f1d16c4c19cec740e0442"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5ae73770caad4ff1808c2ca655dad0e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#ae5ae73770caad4ff1808c2ca655dad0e">initAnalysis</a> (const <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">TrajectoryAnalysisSettings</a> &amp;settings, const <a class="el" href="classgmx_1_1TopologyInformation.xhtml">TopologyInformation</a> &amp;top)=0</td></tr>
<tr class="memdesc:ae5ae73770caad4ff1808c2ca655dad0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the analysis.  <a href="#ae5ae73770caad4ff1808c2ca655dad0e">More...</a><br/></td></tr>
<tr class="separator:ae5ae73770caad4ff1808c2ca655dad0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a419a3d7f950f0731a20d6a7fafaa6d05"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a419a3d7f950f0731a20d6a7fafaa6d05">initAfterFirstFrame</a> (const <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">TrajectoryAnalysisSettings</a> &amp;settings, const t_trxframe &amp;fr)</td></tr>
<tr class="memdesc:a419a3d7f950f0731a20d6a7fafaa6d05"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs additional initialization after reading the first frame.  <a href="#a419a3d7f950f0731a20d6a7fafaa6d05">More...</a><br/></td></tr>
<tr class="separator:a419a3d7f950f0731a20d6a7fafaa6d05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6082fcf69bdc3b0a1945ece31437f195"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="namespacegmx.xhtml#a6f05f1bbb0c205deb47822bce1f626e6">TrajectoryAnalysisModuleDataPointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a6082fcf69bdc3b0a1945ece31437f195">startFrames</a> (const <a class="el" href="classgmx_1_1AnalysisDataParallelOptions.xhtml">AnalysisDataParallelOptions</a> &amp;opt, const <a class="el" href="classgmx_1_1SelectionCollection.xhtml">SelectionCollection</a> &amp;selections)</td></tr>
<tr class="memdesc:a6082fcf69bdc3b0a1945ece31437f195"><td class="mdescLeft">&#160;</td><td class="mdescRight">Starts the analysis of frames.  <a href="#a6082fcf69bdc3b0a1945ece31437f195">More...</a><br/></td></tr>
<tr class="separator:a6082fcf69bdc3b0a1945ece31437f195"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc7344d1b635c15320af636657383212"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212">analyzeFrame</a> (int frnr, const t_trxframe &amp;fr, <a class="el" href="structt__pbc.xhtml">t_pbc</a> *pbc, <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml">TrajectoryAnalysisModuleData</a> *pdata)=0</td></tr>
<tr class="memdesc:adc7344d1b635c15320af636657383212"><td class="mdescLeft">&#160;</td><td class="mdescRight">Analyzes a single frame.  <a href="#adc7344d1b635c15320af636657383212">More...</a><br/></td></tr>
<tr class="separator:adc7344d1b635c15320af636657383212"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d14bf1683086d3fafdb11e23e003de4"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a9d14bf1683086d3fafdb11e23e003de4">finishFrames</a> (<a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml">TrajectoryAnalysisModuleData</a> *pdata)</td></tr>
<tr class="memdesc:a9d14bf1683086d3fafdb11e23e003de4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finishes the analysis of frames.  <a href="#a9d14bf1683086d3fafdb11e23e003de4">More...</a><br/></td></tr>
<tr class="separator:a9d14bf1683086d3fafdb11e23e003de4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b9d902a262ba124be565eca5b714e4b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a3b9d902a262ba124be565eca5b714e4b">finishAnalysis</a> (int nframes)=0</td></tr>
<tr class="memdesc:a3b9d902a262ba124be565eca5b714e4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Postprocesses data after frames have been read.  <a href="#a3b9d902a262ba124be565eca5b714e4b">More...</a><br/></td></tr>
<tr class="separator:a3b9d902a262ba124be565eca5b714e4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80869a7764274db8e314bf0a1c5858f6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a80869a7764274db8e314bf0a1c5858f6">writeOutput</a> ()=0</td></tr>
<tr class="memdesc:a80869a7764274db8e314bf0a1c5858f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes output into files and/or standard output/error.  <a href="#a80869a7764274db8e314bf0a1c5858f6">More...</a><br/></td></tr>
<tr class="separator:a80869a7764274db8e314bf0a1c5858f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74565040adba0eba6c8fbe97428d1b92"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a74565040adba0eba6c8fbe97428d1b92">datasetCount</a> () const </td></tr>
<tr class="memdesc:a74565040adba0eba6c8fbe97428d1b92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of datasets provided by the module.  <a href="#a74565040adba0eba6c8fbe97428d1b92">More...</a><br/></td></tr>
<tr class="separator:a74565040adba0eba6c8fbe97428d1b92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d7c1a4bc0a4d6ec6b78553e52a83a11"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::string &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a3d7c1a4bc0a4d6ec6b78553e52a83a11">datasetNames</a> () const </td></tr>
<tr class="memdesc:a3d7c1a4bc0a4d6ec6b78553e52a83a11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a vector with the names of datasets provided by the module.  <a href="#a3d7c1a4bc0a4d6ec6b78553e52a83a11">More...</a><br/></td></tr>
<tr class="separator:a3d7c1a4bc0a4d6ec6b78553e52a83a11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cd76eb3d565a931cd832d8be1991635"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a2cd76eb3d565a931cd832d8be1991635">datasetFromIndex</a> (int index) const </td></tr>
<tr class="memdesc:a2cd76eb3d565a931cd832d8be1991635"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the data set <code>index</code>.  <a href="#a2cd76eb3d565a931cd832d8be1991635">More...</a><br/></td></tr>
<tr class="separator:a2cd76eb3d565a931cd832d8be1991635"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21d07b72b807b0567c02ead65919d528"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a21d07b72b807b0567c02ead65919d528">datasetFromName</a> (const char *name) const </td></tr>
<tr class="memdesc:a21d07b72b807b0567c02ead65919d528"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the data set with name <code>name</code>.  <a href="#a21d07b72b807b0567c02ead65919d528">More...</a><br/></td></tr>
<tr class="separator:a21d07b72b807b0567c02ead65919d528"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7311431fe3d33d4d59add9bc4c93956"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#ad7311431fe3d33d4d59add9bc4c93956">finishFrameSerial</a> (int frameIndex)</td></tr>
<tr class="memdesc:ad7311431fe3d33d4d59add9bc4c93956"><td class="mdescLeft">&#160;</td><td class="mdescRight">Processes data in <a class="el" href="classgmx_1_1AnalysisData.xhtml" title="Parallelizable data container for raw data. ">AnalysisData</a> objects in serial for each frame.  <a href="#ad7311431fe3d33d4d59add9bc4c93956">More...</a><br/></td></tr>
<tr class="separator:ad7311431fe3d33d4d59add9bc4c93956"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a2023063f2d3978b4d89c90f03fb2a805"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a2023063f2d3978b4d89c90f03fb2a805">TrajectoryAnalysisModule</a> ()</td></tr>
<tr class="memdesc:a2023063f2d3978b4d89c90f03fb2a805"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the dataset registration mechanism.  <a href="#a2023063f2d3978b4d89c90f03fb2a805">More...</a><br/></td></tr>
<tr class="separator:a2023063f2d3978b4d89c90f03fb2a805"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad946d2af4c8e284ef349f2cd816495bb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#ad946d2af4c8e284ef349f2cd816495bb">registerBasicDataset</a> (<a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> *data, const char *name)</td></tr>
<tr class="memdesc:ad946d2af4c8e284ef349f2cd816495bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registers a dataset that exports data.  <a href="#ad946d2af4c8e284ef349f2cd816495bb">More...</a><br/></td></tr>
<tr class="separator:ad946d2af4c8e284ef349f2cd816495bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86b3b5cd87518e988e8b5452b39a3ad1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a86b3b5cd87518e988e8b5452b39a3ad1">registerAnalysisDataset</a> (<a class="el" href="classgmx_1_1AnalysisData.xhtml">AnalysisData</a> *data, const char *name)</td></tr>
<tr class="memdesc:a86b3b5cd87518e988e8b5452b39a3ad1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registers a parallelized dataset that exports data.  <a href="#a86b3b5cd87518e988e8b5452b39a3ad1">More...</a><br/></td></tr>
<tr class="separator:a86b3b5cd87518e988e8b5452b39a3ad1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:aab5ed763e4b63da4601f9b9004b595a9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aab5ed763e4b63da4601f9b9004b595a9"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#aab5ed763e4b63da4601f9b9004b595a9">TrajectoryAnalysisModuleData</a></td></tr>
<tr class="memdesc:aab5ed763e4b63da4601f9b9004b595a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Needed to access the registered analysis data sets. <br/></td></tr>
<tr class="separator:aab5ed763e4b63da4601f9b9004b595a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a2023063f2d3978b4d89c90f03fb2a805"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">gmx::TrajectoryAnalysisModule::TrajectoryAnalysisModule </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes the dataset registration mechanism. </p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="adc7344d1b635c15320af636657383212"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void gmx::TrajectoryAnalysisModule::analyzeFrame </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>frnr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_trxframe &amp;&#160;</td>
          <td class="paramname"><em>fr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__pbc.xhtml">t_pbc</a> *&#160;</td>
          <td class="paramname"><em>pbc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml">TrajectoryAnalysisModuleData</a> *&#160;</td>
          <td class="paramname"><em>pdata</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Analyzes a single frame. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">frnr</td><td>Frame number, a zero-based index that uniquely identifies the frame. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fr</td><td>Current frame. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pbc</td><td>Periodic boundary conditions for <code>fr</code>. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pdata</td><td>Data structure for frame-local data.</td></tr>
  </table>
  </dd>
</dl>
<p>This method is called once for each frame to be analyzed, and should analyze the positions provided in the selections. Data handles and selections should be obtained from the <code>pdata</code> structure.</p>
<p>For threaded analysis, this method is called asynchronously in different threads to analyze different frames. The <code>pdata</code> structure is one of the structures created with <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a6082fcf69bdc3b0a1945ece31437f195" title="Starts the analysis of frames. ">startFrames()</a>, but no assumptions should be made about which of these data structures is used. It is guaranteed that two instances of <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" title="Analyzes a single frame. ">analyzeFrame()</a> are not running concurrently with the same <code>pdata</code> data structure. Any access to data structures not stored in <code>pdata</code> should be designed to be thread-safe. </p>

</div>
</div>
<a class="anchor" id="a74565040adba0eba6c8fbe97428d1b92"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx::TrajectoryAnalysisModule::datasetCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of datasets provided by the module. </p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="a2cd76eb3d565a931cd832d8be1991635"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> &amp; gmx::TrajectoryAnalysisModule::datasetFromIndex </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a pointer to the data set <code>index</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Data set to query for. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to the requested data set. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1APIError.xhtml" title="Exception class for incorrect use of an API. ">APIError</a></td><td>if <code>index</code> is not valid.</td></tr>
  </table>
  </dd>
</dl>
<p><code>index</code> should be &gt;= 0 and &lt; <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a74565040adba0eba6c8fbe97428d1b92" title="Returns the number of datasets provided by the module. ">datasetCount()</a>.</p>
<p>The return value is not const to allow callers to add modules to the data sets. However, the <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml" title="Abstract base class for all objects that provide data. ">AbstractAnalysisData</a> interface does not provide any means to alter the data, so the module does not need to care about external modifications. </p>

</div>
</div>
<a class="anchor" id="a21d07b72b807b0567c02ead65919d528"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> &amp; gmx::TrajectoryAnalysisModule::datasetFromName </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a pointer to the data set with name <code>name</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Data set to query for. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to the requested data set. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1APIError.xhtml" title="Exception class for incorrect use of an API. ">APIError</a></td><td>if <code>name</code> is not valid.</td></tr>
  </table>
  </dd>
</dl>
<p><code>name</code> should be one of the names returned by <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a3d7c1a4bc0a4d6ec6b78553e52a83a11" title="Returns a vector with the names of datasets provided by the module. ">datasetNames()</a>.</p>
<p>The return value is not const to allow callers to add modules to the data sets. However, the <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml" title="Abstract base class for all objects that provide data. ">AbstractAnalysisData</a> interface does not provide any means to alter the data, so the module does not need to care about external modifications. </p>

</div>
</div>
<a class="anchor" id="a3d7c1a4bc0a4d6ec6b78553e52a83a11"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt; std::string &gt; &amp; gmx::TrajectoryAnalysisModule::datasetNames </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a vector with the names of datasets provided by the module. </p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="a3b9d902a262ba124be565eca5b714e4b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void gmx::TrajectoryAnalysisModule::finishAnalysis </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nframes</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Postprocesses data after frames have been read. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nframes</td><td>Total number of frames processed.</td></tr>
  </table>
  </dd>
</dl>
<p>This function is called after all <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a9d14bf1683086d3fafdb11e23e003de4" title="Finishes the analysis of frames. ">finishFrames()</a> calls have been called. <code>nframes</code> will equal the number of calls to <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" title="Analyzes a single frame. ">analyzeFrame()</a> that have occurred. </p>

</div>
</div>
<a class="anchor" id="a9d14bf1683086d3fafdb11e23e003de4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::TrajectoryAnalysisModule::finishFrames </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml">TrajectoryAnalysisModuleData</a> *&#160;</td>
          <td class="paramname"><em>pdata</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Finishes the analysis of frames. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pdata</td><td>Data structure for thread-local data.</td></tr>
  </table>
  </dd>
</dl>
<p>This method is called once for each call of <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a6082fcf69bdc3b0a1945ece31437f195" title="Starts the analysis of frames. ">startFrames()</a>, with the data structure returned by the corresponding <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a6082fcf69bdc3b0a1945ece31437f195" title="Starts the analysis of frames. ">startFrames()</a>. The <code>pdata</code> object should be destroyed by the caller after this function has been called.</p>
<p>You only need to override this method if you need custom operations to combine data from the frame-local data structures to get the final result. In such cases, the data should be aggregated in this function and stored in a member attribute.</p>
<p>The default implementation does nothing.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a6082fcf69bdc3b0a1945ece31437f195" title="Starts the analysis of frames. ">startFrames()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad7311431fe3d33d4d59add9bc4c93956"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::TrajectoryAnalysisModule::finishFrameSerial </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>frameIndex</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Processes data in <a class="el" href="classgmx_1_1AnalysisData.xhtml" title="Parallelizable data container for raw data. ">AnalysisData</a> objects in serial for each frame. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">frameIndex</td><td>Index of the frame that has been finished.</td></tr>
  </table>
  </dd>
</dl>
<p>This method is called by the framework in order for each frame, after the analysis for that frame has been finished. These calls always execute in serial and in sequential frame order, even during parallel analysis where multiple <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" title="Analyzes a single frame. ">analyzeFrame()</a> calls may be executing concurrently.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1AnalysisData.xhtml#a54e98fd211473c7cfe750e2b49517d96" title="Performs in-order sequential processing for the next frame. ">AnalysisData::finishFrameSerial()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a419a3d7f950f0731a20d6a7fafaa6d05"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::TrajectoryAnalysisModule::initAfterFirstFrame </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">TrajectoryAnalysisSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_trxframe &amp;&#160;</td>
          <td class="paramname"><em>fr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Performs additional initialization after reading the first frame. </p>
<p>When this function is called, selections are the same as in <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#ae5ae73770caad4ff1808c2ca655dad0e" title="Initializes the analysis. ">initAnalysis()</a>, i.e., they have not been evaluated for the first frame.</p>
<p>It is necessary to override this method only if the module needs to do initialization for which it requires data from the first frame.</p>
<p>The default implementation does nothing. </p>

</div>
</div>
<a class="anchor" id="ae5ae73770caad4ff1808c2ca655dad0e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void gmx::TrajectoryAnalysisModule::initAnalysis </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">TrajectoryAnalysisSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1TopologyInformation.xhtml">TopologyInformation</a> &amp;&#160;</td>
          <td class="paramname"><em>top</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes the analysis. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">settings</td><td>Settings to pass to and from the module. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology information.</td></tr>
  </table>
  </dd>
</dl>
<p>When this function is called, selections have been initialized based on user input, and a topology has been loaded if provided by the user. For dynamic selections, the selections have been evaluated to the largest possible selection, i.e., the selections passed to <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" title="Analyzes a single frame. ">analyzeFrame()</a> are always a subset of the selections provided here. </p>

</div>
</div>
<a class="anchor" id="aba5990675e980bf746ecd224f814d549"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void gmx::TrajectoryAnalysisModule::initOptions </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1IOptionsContainer.xhtml">IOptionsContainer</a> *&#160;</td>
          <td class="paramname"><em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">TrajectoryAnalysisSettings</a> *&#160;</td>
          <td class="paramname"><em>settings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes options understood by the module. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">options</td><td><a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a> object to add the options to. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">settings</td><td>Settings to pass to and from the module.</td></tr>
  </table>
  </dd>
</dl>
<p>This method is called first after the constructor, and it should add options understood by the module to <code>options</code>. Output values from options (including selections) should be stored in member variables.</p>
<p>In addition to initializing the options, this method can also provide information about the module's requirements using the <code>settings</code> object; see <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml" title="Trajectory analysis module configuration object. ">TrajectoryAnalysisSettings</a> for more details.</p>
<p>If settings depend on the option values provided by the user, see <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#afa3457cc922f1d16c4c19cec740e0442" title="Called after all option values have been set. ">optionsFinished()</a>. </p>

</div>
</div>
<a class="anchor" id="afa3457cc922f1d16c4c19cec740e0442"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::TrajectoryAnalysisModule::optionsFinished </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">TrajectoryAnalysisSettings</a> *&#160;</td>
          <td class="paramname"><em>settings</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called after all option values have been set. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">settings</td><td>Settings to pass to and from the module.</td></tr>
  </table>
  </dd>
</dl>
<p>This method is called after option values have been assigned (but interactive selection input has not yet been performed).</p>
<p>If the module needs to change settings that affect topology loading (can be done using the <code>settings</code> object) or selection initialization (can be done using <a class="el" href="classgmx_1_1SelectionOptionInfo.xhtml" title="Wrapper class for accessing and modifying selection option information. ">SelectionOptionInfo</a>) based on option values, this method has to be overridden.</p>
<p>The default implementation does nothing. </p>

</div>
</div>
<a class="anchor" id="a86b3b5cd87518e988e8b5452b39a3ad1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::TrajectoryAnalysisModule::registerAnalysisDataset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1AnalysisData.xhtml">AnalysisData</a> *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Registers a parallelized dataset that exports data. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">data</td><td><a class="el" href="classgmx_1_1AnalysisData.xhtml" title="Parallelizable data container for raw data. ">AnalysisData</a> object to register. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Name to register the dataset with. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>This method works as <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#ad946d2af4c8e284ef349f2cd816495bb" title="Registers a dataset that exports data. ">registerBasicDataset()</a>, but additionally allows data handles for <code>data</code> to be accessed using TrajectoryAnalysisData.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#ad946d2af4c8e284ef349f2cd816495bb" title="Registers a dataset that exports data. ">registerBasicDataset()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad946d2af4c8e284ef349f2cd816495bb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::TrajectoryAnalysisModule::registerBasicDataset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Registers a dataset that exports data. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">data</td><td>Data object to register. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Name to register the dataset with. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>Registers <code>data</code> as a dataset that provides output from the analysis module. Callers for the module can access the dataset with <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a21d07b72b807b0567c02ead65919d528" title="Returns a pointer to the data set with name name. ">datasetFromName()</a> using <code>name</code> as an <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml" title="Abstract base class for all objects that provide data. ">AbstractAnalysisData</a> object. This allows them to add their own data modules to do extra processing.</p>
<p><code>name</code> must be unique across all calls within the same <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml" title="Base class for trajectory analysis modules. ">TrajectoryAnalysisModule</a> instance. </p>

</div>
</div>
<a class="anchor" id="a6082fcf69bdc3b0a1945ece31437f195"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacegmx.xhtml#a6f05f1bbb0c205deb47822bce1f626e6">TrajectoryAnalysisModuleDataPointer</a> gmx::TrajectoryAnalysisModule::startFrames </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1AnalysisDataParallelOptions.xhtml">AnalysisDataParallelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1SelectionCollection.xhtml">SelectionCollection</a> &amp;&#160;</td>
          <td class="paramname"><em>selections</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Starts the analysis of frames. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">opt</td><td></td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">selections</td><td>Frame-local selection collection object. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Data structure for thread-local data.</dd></dl>
<p>This function is necessary only for threaded parallelization. It is called once for each thread and should initialize a class that contains any required frame-local data in the returned value. The default implementation creates a basic data structure that holds thread-local data handles for all data objects registered with <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a86b3b5cd87518e988e8b5452b39a3ad1" title="Registers a parallelized dataset that exports data. ">registerAnalysisDataset()</a>, as well as the thread-local selection collection. These can be accessed in <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" title="Analyzes a single frame. ">analyzeFrame()</a> using the methods in <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">TrajectoryAnalysisModuleData</a>. If other thread-local data is needed, this function should be overridden and it should create an instance of a class derived from <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">TrajectoryAnalysisModuleData</a>.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">TrajectoryAnalysisModuleData</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a80869a7764274db8e314bf0a1c5858f6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void gmx::TrajectoryAnalysisModule::writeOutput </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes output into files and/or standard output/error. </p>
<p>All output from the module, excluding data written out for each frame during <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" title="Analyzes a single frame. ">analyzeFrame()</a>, should be confined into this function. This function is guaranteed to be called only after <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a3b9d902a262ba124be565eca5b714e4b" title="Postprocesses data after frames have been read. ">finishAnalysis()</a>. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/gromacs/trajectoryanalysis/<a class="el" href="analysismodule_8h.xhtml">analysismodule.h</a></li>
<li>src/gromacs/trajectoryanalysis/analysismodule.cpp</li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:56:16 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
