<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/simd/impl_reference/impl_reference_util_double.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_8a21c46af9718d1f610eb513153099d7.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a46192700e9e8ed44c648f0a55ee9a53.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_32d26fbaf0abd8bf4548e7cba9bbcf59.xhtml">simd</a></li><li class="navelem"><a class="el" href="dir_4242faa404381290c30424dc74094328.xhtml">impl_reference</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">impl_reference_util_double.h File Reference<div class="ingroups"><a class="el" href="group__module__simd.xhtml">SIMD intrinsics interface (simd)</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;config.h&quot;</code><br/>
<code>#include &lt;cassert&gt;</code><br/>
<code>#include &lt;cstddef&gt;</code><br/>
<code>#include &lt;cstdint&gt;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
<code>#include &quot;<a class="el" href="impl__reference__definitions_8h.xhtml">impl_reference_definitions.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="impl__reference__simd__double_8h.xhtml">impl_reference_simd_double.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for impl_reference_util_double.h:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="impl__reference__util__double_8h__incl.svg" width="1235" height="395"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><div class="textblock"><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> This graph shows which files directly or indirectly include this file:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="impl__reference__util__double_8h__dep__incl.svg" width="856" height="320"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Reference impl., higher-level double prec. SIMD utility functions. </p>
<dl class="section author"><dt>Author</dt><dd>Erik Lindahl <a href="#" onclick="location.href='mai'+'lto:'+'eri'+'k.'+'lin'+'da'+'hl@'+'sc'+'ili'+'fe'+'lab'+'.s'+'e'; return false;">erik.<span style="display: none;">.nosp@m.</span>lind<span style="display: none;">.nosp@m.</span>ahl@s<span style="display: none;">.nosp@m.</span>cili<span style="display: none;">.nosp@m.</span>felab<span style="display: none;">.nosp@m.</span>.se</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga725596b415f4bca94e71321b6845bed4"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:ga725596b415f4bca94e71321b6845bed4"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga725596b415f4bca94e71321b6845bed4">gmx::gatherLoadTranspose</a> (const double *base, const std::int32_t offset[], SimdDouble *v0, SimdDouble *v1, SimdDouble *v2, SimdDouble *v3)</td></tr>
<tr class="memdesc:ga725596b415f4bca94e71321b6845bed4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 4 consecutive double from each of GMX_SIMD_DOUBLE_WIDTH offsets, and transpose into 4 SIMD double variables.  <a href="group__module__simd.xhtml#ga725596b415f4bca94e71321b6845bed4">More...</a><br/></td></tr>
<tr class="separator:ga725596b415f4bca94e71321b6845bed4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad1b51d9220213996033e5dce938c926f"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:gad1b51d9220213996033e5dce938c926f"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gad1b51d9220213996033e5dce938c926f">gmx::gatherLoadTranspose</a> (const double *base, const std::int32_t offset[], SimdDouble *v0, SimdDouble *v1)</td></tr>
<tr class="memdesc:gad1b51d9220213996033e5dce938c926f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 consecutive double from each of GMX_SIMD_DOUBLE_WIDTH offsets, and transpose into 2 SIMD double variables.  <a href="group__module__simd.xhtml#gad1b51d9220213996033e5dce938c926f">More...</a><br/></td></tr>
<tr class="separator:gad1b51d9220213996033e5dce938c926f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaafc4e2f213c40bba66c83e6524445523"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:gaafc4e2f213c40bba66c83e6524445523"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaafc4e2f213c40bba66c83e6524445523">gmx::gatherLoadUTranspose</a> (const double *base, const std::int32_t offset[], SimdDouble *v0, SimdDouble *v1, SimdDouble *v2)</td></tr>
<tr class="memdesc:gaafc4e2f213c40bba66c83e6524445523"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 3 consecutive doubles from each of GMX_SIMD_DOUBLE_WIDTH offsets, and transpose into 3 SIMD double variables.  <a href="group__module__simd.xhtml#gaafc4e2f213c40bba66c83e6524445523">More...</a><br/></td></tr>
<tr class="separator:gaafc4e2f213c40bba66c83e6524445523"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa23e5431ddc22611d3304ac96c461cc5"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:gaa23e5431ddc22611d3304ac96c461cc5"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaa23e5431ddc22611d3304ac96c461cc5">gmx::transposeScatterStoreU</a> (double *base, const std::int32_t offset[], SimdDouble v0, SimdDouble v1, SimdDouble v2)</td></tr>
<tr class="memdesc:gaa23e5431ddc22611d3304ac96c461cc5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transpose and store 3 SIMD doubles to 3 consecutive addresses at GMX_SIMD_DOUBLE_WIDTH offsets.  <a href="group__module__simd.xhtml#gaa23e5431ddc22611d3304ac96c461cc5">More...</a><br/></td></tr>
<tr class="separator:gaa23e5431ddc22611d3304ac96c461cc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaecbb196e76a516c1e3672a8fa0df6f87"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:gaecbb196e76a516c1e3672a8fa0df6f87"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaecbb196e76a516c1e3672a8fa0df6f87">gmx::transposeScatterIncrU</a> (double *base, const std::int32_t offset[], SimdDouble v0, SimdDouble v1, SimdDouble v2)</td></tr>
<tr class="memdesc:gaecbb196e76a516c1e3672a8fa0df6f87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transpose and add 3 SIMD doubles to 3 consecutive addresses at GMX_SIMD_DOUBLE_WIDTH offsets.  <a href="group__module__simd.xhtml#gaecbb196e76a516c1e3672a8fa0df6f87">More...</a><br/></td></tr>
<tr class="separator:gaecbb196e76a516c1e3672a8fa0df6f87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga15283d6034452bcbee9c5f7538d7b560"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:ga15283d6034452bcbee9c5f7538d7b560"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga15283d6034452bcbee9c5f7538d7b560">gmx::transposeScatterDecrU</a> (double *base, const std::int32_t offset[], SimdDouble v0, SimdDouble v1, SimdDouble v2)</td></tr>
<tr class="memdesc:ga15283d6034452bcbee9c5f7538d7b560"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transpose and subtract 3 SIMD doubles to 3 consecutive addresses at GMX_SIMD_DOUBLE_WIDTH offsets.  <a href="group__module__simd.xhtml#ga15283d6034452bcbee9c5f7538d7b560">More...</a><br/></td></tr>
<tr class="separator:ga15283d6034452bcbee9c5f7538d7b560"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad8d730c26297155e1aa934c2bc91e750"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gad8d730c26297155e1aa934c2bc91e750">gmx::expandScalarsToTriplets</a> (SimdDouble scalar, SimdDouble *triplets0, SimdDouble *triplets1, SimdDouble *triplets2)</td></tr>
<tr class="memdesc:gad8d730c26297155e1aa934c2bc91e750"><td class="mdescLeft">&#160;</td><td class="mdescRight">Expand each element of double SIMD variable into three identical consecutive elements in three SIMD outputs.  <a href="group__module__simd.xhtml#gad8d730c26297155e1aa934c2bc91e750">More...</a><br/></td></tr>
<tr class="separator:gad8d730c26297155e1aa934c2bc91e750"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1008329474744f6987edf28c4124ac24"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:ga1008329474744f6987edf28c4124ac24"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga1008329474744f6987edf28c4124ac24">gmx::gatherLoadBySimdIntTranspose</a> (const double *base, SimdDInt32 offset, SimdDouble *v0, SimdDouble *v1, SimdDouble *v2, SimdDouble *v3)</td></tr>
<tr class="memdesc:ga1008329474744f6987edf28c4124ac24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 4 consecutive doubles from each of GMX_SIMD_DOUBLE_WIDTH offsets specified by a SIMD integer, transpose into 4 SIMD double variables.  <a href="group__module__simd.xhtml#ga1008329474744f6987edf28c4124ac24">More...</a><br/></td></tr>
<tr class="separator:ga1008329474744f6987edf28c4124ac24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad15c3a27898a9f9dbb2963dee1a7cacf"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:gad15c3a27898a9f9dbb2963dee1a7cacf"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gad15c3a27898a9f9dbb2963dee1a7cacf">gmx::gatherLoadUBySimdIntTranspose</a> (const double *base, SimdDInt32 offset, SimdDouble *v0, SimdDouble *v1)</td></tr>
<tr class="memdesc:gad15c3a27898a9f9dbb2963dee1a7cacf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 consecutive doubles from each of GMX_SIMD_DOUBLE_WIDTH offsets (unaligned) specified by SIMD integer, transpose into 2 SIMD doubles.  <a href="group__module__simd.xhtml#gad15c3a27898a9f9dbb2963dee1a7cacf">More...</a><br/></td></tr>
<tr class="separator:gad15c3a27898a9f9dbb2963dee1a7cacf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga11385272a2b5123ca3aa3e5696e55dbc"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:ga11385272a2b5123ca3aa3e5696e55dbc"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga11385272a2b5123ca3aa3e5696e55dbc">gmx::gatherLoadBySimdIntTranspose</a> (const double *base, SimdDInt32 offset, SimdDouble *v0, SimdDouble *v1)</td></tr>
<tr class="memdesc:ga11385272a2b5123ca3aa3e5696e55dbc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 consecutive doubles from each of GMX_SIMD_DOUBLE_WIDTH offsets specified by a SIMD integer, transpose into 2 SIMD double variables.  <a href="group__module__simd.xhtml#ga11385272a2b5123ca3aa3e5696e55dbc">More...</a><br/></td></tr>
<tr class="separator:ga11385272a2b5123ca3aa3e5696e55dbc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gace1c53e05ba045977e06eb98778c0123"><td class="memItemLeft" align="right" valign="top">static double gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gace1c53e05ba045977e06eb98778c0123">gmx::reduceIncr4ReturnSum</a> (double *m, SimdDouble v0, SimdDouble v1, SimdDouble v2, SimdDouble v3)</td></tr>
<tr class="memdesc:gace1c53e05ba045977e06eb98778c0123"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reduce each of four SIMD doubles, add those values to four consecutive doubles in memory, return sum.  <a href="group__module__simd.xhtml#gace1c53e05ba045977e06eb98778c0123">More...</a><br/></td></tr>
<tr class="separator:gace1c53e05ba045977e06eb98778c0123"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Higher-level SIMD utilities accessing partial (half-width) SIMD doubles.</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>See the single-precision versions for documentation. Since double precision is typically half the width of single, this double version is likely only useful with 512-bit and larger implementations. </p>
</div></td></tr>
<tr class="memitem:a5ddc2fd6582a66337e35df94128c183c"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a5ddc2fd6582a66337e35df94128c183c">gmx::loadDualHsimd</a> (const double *m0, const double *m1)</td></tr>
<tr class="memdesc:a5ddc2fd6582a66337e35df94128c183c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load low &amp; high parts of SIMD double from different locations.  <a href="#a5ddc2fd6582a66337e35df94128c183c">More...</a><br/></td></tr>
<tr class="separator:a5ddc2fd6582a66337e35df94128c183c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fc17c3e9b2d0f83db3b7f1274f945b5"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0fc17c3e9b2d0f83db3b7f1274f945b5">gmx::loadDuplicateHsimd</a> (const double *m)</td></tr>
<tr class="memdesc:a0fc17c3e9b2d0f83db3b7f1274f945b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load half-SIMD-width double data, spread to both halves.  <a href="#a0fc17c3e9b2d0f83db3b7f1274f945b5">More...</a><br/></td></tr>
<tr class="separator:a0fc17c3e9b2d0f83db3b7f1274f945b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a037b15ee8ff585453423ae4c8e061d7c"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a037b15ee8ff585453423ae4c8e061d7c">gmx::loadU1DualHsimd</a> (const double *m)</td></tr>
<tr class="memdesc:a037b15ee8ff585453423ae4c8e061d7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load two doubles, spread 1st in low half, 2nd in high half.  <a href="#a037b15ee8ff585453423ae4c8e061d7c">More...</a><br/></td></tr>
<tr class="separator:a037b15ee8ff585453423ae4c8e061d7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a875057cc36d19c7e9be3f840612428d4"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a875057cc36d19c7e9be3f840612428d4">gmx::storeDualHsimd</a> (double *m0, double *m1, SimdDouble a)</td></tr>
<tr class="memdesc:a875057cc36d19c7e9be3f840612428d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store low &amp; high parts of SIMD double to different locations.  <a href="#a875057cc36d19c7e9be3f840612428d4">More...</a><br/></td></tr>
<tr class="separator:a875057cc36d19c7e9be3f840612428d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e7f54c2fe31c60ecc1dd2b4c95667d8"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2e7f54c2fe31c60ecc1dd2b4c95667d8">gmx::incrDualHsimd</a> (double *m0, double *m1, SimdDouble a)</td></tr>
<tr class="memdesc:a2e7f54c2fe31c60ecc1dd2b4c95667d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add each half of SIMD variable to separate memory adresses.  <a href="#a2e7f54c2fe31c60ecc1dd2b4c95667d8">More...</a><br/></td></tr>
<tr class="separator:a2e7f54c2fe31c60ecc1dd2b4c95667d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0233e7b9cab30a7cd2ad5e59d8910a35"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0233e7b9cab30a7cd2ad5e59d8910a35">gmx::decrHsimd</a> (double *m, SimdDouble a)</td></tr>
<tr class="memdesc:a0233e7b9cab30a7cd2ad5e59d8910a35"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the two halves of a SIMD double, subtract the sum from half-SIMD-width consecutive doubles in memory.  <a href="#a0233e7b9cab30a7cd2ad5e59d8910a35">More...</a><br/></td></tr>
<tr class="separator:a0233e7b9cab30a7cd2ad5e59d8910a35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66c1f8fc580e64de5835134f18f75f61"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:a66c1f8fc580e64de5835134f18f75f61"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a66c1f8fc580e64de5835134f18f75f61">gmx::gatherLoadTransposeHsimd</a> (const double *base0, const double *base1, std::int32_t offset[], SimdDouble *v0, SimdDouble *v1)</td></tr>
<tr class="memdesc:a66c1f8fc580e64de5835134f18f75f61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 consecutive doubles from each of GMX_SIMD_DOUBLE_WIDTH/2 offsets, transpose into SIMD double (low half from base0, high from base1).  <a href="#a66c1f8fc580e64de5835134f18f75f61">More...</a><br/></td></tr>
<tr class="separator:a66c1f8fc580e64de5835134f18f75f61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a774b79fe30e71192635a3081e369023e"><td class="memItemLeft" align="right" valign="top">static double gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a774b79fe30e71192635a3081e369023e">gmx::reduceIncr4ReturnSumHsimd</a> (double *m, SimdDouble v0, SimdDouble v1)</td></tr>
<tr class="memdesc:a774b79fe30e71192635a3081e369023e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reduce the 4 half-SIMD-with doubles in 2 SIMD variables (sum halves), increment four consecutive doubles in memory, return sum.  <a href="#a774b79fe30e71192635a3081e369023e">More...</a><br/></td></tr>
<tr class="separator:a774b79fe30e71192635a3081e369023e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48240220eea9e0812731ec802ffec596"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a48240220eea9e0812731ec802ffec596">gmx::loadUNDuplicate4</a> (const double *m)</td></tr>
<tr class="memdesc:a48240220eea9e0812731ec802ffec596"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load N doubles and duplicate them 4 times each.  <a href="#a48240220eea9e0812731ec802ffec596">More...</a><br/></td></tr>
<tr class="separator:a48240220eea9e0812731ec802ffec596"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb2c66a84e6d8d595403579f02f71914"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#abb2c66a84e6d8d595403579f02f71914">gmx::load4DuplicateN</a> (const double *m)</td></tr>
<tr class="memdesc:abb2c66a84e6d8d595403579f02f71914"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 4 doubles and duplicate them N times each.  <a href="#abb2c66a84e6d8d595403579f02f71914">More...</a><br/></td></tr>
<tr class="separator:abb2c66a84e6d8d595403579f02f71914"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1a44fb0caec534f45b42611ca598b3a"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ab1a44fb0caec534f45b42611ca598b3a">gmx::loadU4NOffset</a> (const double *m, int offset)</td></tr>
<tr class="memdesc:ab1a44fb0caec534f45b42611ca598b3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load doubles in blocks of 4 at fixed offsets.  <a href="#ab1a44fb0caec534f45b42611ca598b3a">More...</a><br/></td></tr>
<tr class="separator:ab1a44fb0caec534f45b42611ca598b3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:ga9237b6439778ed0fdfd9008a78c25f3c"><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga9237b6439778ed0fdfd9008a78c25f3c">gmx::c_simdBestPairAlignmentDouble</a> = 2</td></tr>
<tr class="memdesc:ga9237b6439778ed0fdfd9008a78c25f3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Best alignment to use for aligned pairs of double data.  <a href="group__module__simd.xhtml#ga9237b6439778ed0fdfd9008a78c25f3c">More...</a><br/></td></tr>
<tr class="separator:ga9237b6439778ed0fdfd9008a78c25f3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:56:08 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
