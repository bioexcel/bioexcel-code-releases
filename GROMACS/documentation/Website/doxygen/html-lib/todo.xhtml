<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: Todo List</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li class="current"><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Todo List </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><dl class="reflist">
<dt><a class="anchor" id="_todo000053"></a>Member <a class="el" href="state_8h.xhtml#ae0050de065f8435f3a7f90c4a36dd4dd">df_history_t</a>  </dt>
<dd>Split out into microstate and observables history.  </dd>
<dt><a class="anchor" id="_todo000075"></a>Member <a class="el" href="dir__separator_8h.xhtml#a0920890c442b665b0c6609fa796e9047">DIR_SEPARATOR</a>  </dt>
<dd>Get rid of this (Redmine #950). It is not necessary for constructing paths on the systems that it currently supports, and is not reliable in parsing input paths either, since Windows needs to accept both instead of only DIR_SEPARATOR. At the very least, we should refactor the clients of this header so that they operate upon path objects rather than raw path strings.  </dd>
<dt><a class="anchor" id="_todo000016"></a>File <a class="el" href="domdec__network_8h.xhtml">domdec_network.h</a>  </dt>
<dd>Wrap the raw dd_bcast in md.cpp into a higher-level function in the domdec module, then this file can be module-internal. </dd>
<dt><a class="anchor" id="_todo000014"></a>Member <a class="el" href="expfit_8h.xhtml#a560ea7d97277b9e0576776ec695fb9b3">fit_acf</a>  (int ncorr, int fitfn, const gmx_output_env_t *oenv, gmx_bool bVerbose, real tbeginfit, real tendfit, real dt, real c1[], real *fit)</dt>
<dd>check parameters  </dd>
<dt><a class="anchor" id="_todo000036"></a>Member <a class="el" href="listed-forces_8h.xhtml#af9092de62680856f5250dbef08056f74">ftype_is_bonded_potential</a>  (int ftype)</dt>
<dd>This function could go away when idef is not a big bucket of everything.  </dd>
<dt><a class="anchor" id="_todo000006"></a>Class <a class="el" href="classgmx_1_1AbstractAnalysisArrayData.xhtml">gmx::AbstractAnalysisArrayData</a>  </dt>
<dd>Add support for multiple data sets. </dd>
<dt><a class="anchor" id="_todo000001"></a>Class <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">gmx::AbstractAnalysisData</a>  </dt>
<dd>Improve the exception-handling semantics. In most cases, it doesn't make much sense to continue data processing after one module fails, but having the alternative would not hurt. </dd>
<dt><a class="anchor" id="_todo000002"></a>Member <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml#a8e6f762df563d577f8a1d34a35273952">gmx::AbstractAnalysisData::addColumnModule</a>  (int col, int span, AnalysisDataModulePointer module)</dt>
<dd><p class="startdd">This method doesn't currently work in all cases with multipoint data or with multiple data sets. In particular, if the added module requests storage and uses getDataFrame(), it will behave unpredictably (most likely asserts).</p>
<p>Generalize this method to multiple data sets (e.g., for adding modules that only process a single data set).</p>
<p>Generalize this method to multiple data sets (e.g., for adding modules that only process a single data set).</p>
<p>Generalize this method to multiple data sets (e.g., for adding modules that only process a single data set).</p>
<p>Generalize this method to multiple data sets (e.g., for adding modules that only process a single data set).</p>
<p>Generalize this method to multiple data sets (e.g., for adding modules that only process a single data set).</p>
<p>Generalize this method to multiple data sets (e.g., for adding modules that only process a single data set).</p>
<p>Generalize this method to multiple data sets (e.g., for adding modules that only process a single data set).</p>
<p>Generalize this method to multiple data sets (e.g., for adding modules that only process a single data set).</p>
<p>Generalize this method to multiple data sets (e.g., for adding modules that only process a single data set).</p>
<p>Generalize this method to multiple data sets (e.g., for adding modules that only process a single data set).</p>
<p>Generalize this method to multiple data sets (e.g., for adding modules that only process a single data set).</p>
<p class="enddd">Generalize this method to multiple data sets (e.g., for adding modules that only process a single data set). </p>
</dd>
<dt><a class="anchor" id="_todo000004"></a>Member <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml#ae095550bd347b42db3c49e064bc44228">gmx::AbstractAnalysisData::applyModule</a>  (IAnalysisDataModule *module)</dt>
<dd>Currently, this method may not work correctly if <code>module</code> requests storage (addModule() has the same problem if called after data is started).  </dd>
<dt><a class="anchor" id="_todo000056"></a>Member <a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a9aa8495e558f50edd35b80754a508052">gmx::AbstractOptionStorage::processSet</a>  ()=0</dt>
<dd>Improve the call semantics. </dd>
<dt><a class="anchor" id="_todo000005"></a>Class <a class="el" href="classgmx_1_1AnalysisData.xhtml">gmx::AnalysisData</a>  </dt>
<dd>Parallel implementation is not complete. </dd>
<dt><a class="anchor" id="_todo000010"></a>Member <a class="el" href="classgmx_1_1AnalysisDataPlotSettings.xhtml#aef8546966ea7b5238aa92d91a6df291b">gmx::AnalysisDataPlotSettings::plotFormat</a>  () const </dt>
<dd>Use a proper enum.  </dd>
<dt><a class="anchor" id="_todo000009"></a>Class <a class="el" href="classgmx_1_1AnalysisDataStorage.xhtml">gmx::AnalysisDataStorage</a>  </dt>
<dd>Proper multi-threaded implementation. </dd>
<dt><a class="anchor" id="_todo000061"></a>Class <a class="el" href="classgmx_1_1AnalysisNeighborhood.xhtml">gmx::AnalysisNeighborhood</a>  </dt>
<dd>Generalize the exclusion machinery to make it easier to use for other cases than atom-atom exclusions from the topology. </dd>
<dt><a class="anchor" id="_todo000062"></a>Class <a class="el" href="classgmx_1_1AnalysisNeighborhoodSearch.xhtml">gmx::AnalysisNeighborhoodSearch</a>  </dt>
<dd><p class="startdd">Make it such that reset() is not necessary to call in code that repeatedly assigns the result of AnalysisNeighborhood::initSearch() to the same variable (see sm_distance.cpp).</p>
<p class="enddd">Consider removing minimumDistance(), as nearestPoint() already returns the distance. </p>
</dd>
<dt><a class="anchor" id="_todo000073"></a>Class <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef&lt; T &gt;</a>  </dt>
<dd>This class is not complete. There are likely also methods missing (not required for current usage). </dd>
<dt><a class="anchor" id="_todo000012"></a>Class <a class="el" href="classgmx_1_1Awh.xhtml">gmx::Awh</a>  </dt>
<dd>Update parameter reading and checkpointing, when general C++ framework is ready.  </dd>
<dt><a class="anchor" id="_todo000069"></a>Member <a class="el" href="namespacegmx.xhtml#a36a614356b557457126513747fbb559f">gmx::checkUserGpuIds</a>  (const gmx_gpu_info_t &amp;gpu_info, const std::vector&lt; int &gt; &amp;compatibleGpus, const std::vector&lt; int &gt; &amp;gpuIds)</dt>
<dd>Note that the selected GPUs can be different on each rank, and the IDs of compatible GPUs can be different on each node, so this routine ought to do communication to determine whether all ranks are able to proceed. Currently this relies on the MPI runtime to kill the other processes because GROMACS lacks the appropriate infrastructure to do a good job of coordinating error messages and behaviour across MPMD ranks and multiple simulations. </dd>
<dt><a class="anchor" id="_todo000074"></a>Member <a class="el" href="structgmx_1_1DataFileInfo.xhtml#a539535c0a378efd8cc95d7124fcfdec5">gmx::DataFileInfo::bFromDefaultDir</a>  </dt>
<dd>Consider replacing with an enum that identifies the source (current dir, GMXLIB, default).  </dd>
<dt><a class="anchor" id="_todo000076"></a>Class <a class="el" href="classgmx_1_1ExceptionInitializer.xhtml">gmx::ExceptionInitializer</a>  </dt>
<dd>With the exception of the reason string, information added with this class is not currently accessible through any public API, except for calling <a class="el" href="group__module__utility.xhtml#gac6287dc8a550a2d54429e44994e00e58" title="Formats a standard fatal error message for reporting an exception. ">printFatalErrorMessage()</a>, <a class="el" href="group__module__utility.xhtml#gac7703ad35b606758d2d12edc0a3d5217" title="Formats an error message for reporting an exception. ">formatExceptionMessageToString()</a> or <a class="el" href="group__module__utility.xhtml#gac5e6f6ec944fb2484d6f273c9a0ff495" title="Formats an error message for reporting an exception. ">formatExceptionMessageToFile()</a>. This is not implemented as there is not yet need for it, and it is not clear what would be the best alternative for the access. It should be possible to refactor the internal implementation to suit the needs of such external access without requiring changes in code that throws these exceptions. </dd>
<dt><a class="anchor" id="_todo000057"></a>Member <a class="el" href="classgmx_1_1FileNameOption.xhtml#aa182da8a00d4ff7556615cedc38a8de2">gmx::FileNameOption::libraryFile</a>  (bool bLibrary=true)</dt>
<dd>Currently, this flag only affects the help output. Callers must take care themselves to actually search the file in the library directories. It would be nicer to do this searching within the file name option implementation.  </dd>
<dt><a class="anchor" id="_todo000058"></a>Class <a class="el" href="classgmx_1_1FileNameOptionManager.xhtml">gmx::FileNameOptionManager</a>  </dt>
<dd>Most of the functionality in this class is specific to command line parsing, so it would be cleaner to replace this with an interface, and have the actual code in the <code>commandline</code> module. </dd>
<dt><a class="anchor" id="_todo000072"></a>Member <a class="el" href="namespacegmx.xhtml#a14ac652392d2a98ce5a3b3a3ca809206">gmx::getPageSize</a>  ()</dt>
<dd>Move this function into sysinfo.cpp where other OS-specific code/includes live  </dd>
<dt><a class="anchor" id="_todo000077"></a>Member <a class="el" href="classgmx_1_1GromacsException.xhtml#a1bd116912e67c096ae949ddae85afe06">gmx::GromacsException::prependContext</a>  (const std::string &amp;context)</dt>
<dd>The added information is currently not accessible through what(), nor through any other means except for calling <a class="el" href="group__module__utility.xhtml#gac6287dc8a550a2d54429e44994e00e58" title="Formats a standard fatal error message for reporting an exception. ">printFatalErrorMessage()</a>, <a class="el" href="group__module__utility.xhtml#gac7703ad35b606758d2d12edc0a3d5217" title="Formats an error message for reporting an exception. ">formatExceptionMessageToString()</a> or <a class="el" href="group__module__utility.xhtml#gac5e6f6ec944fb2484d6f273c9a0ff495" title="Formats an error message for reporting an exception. ">formatExceptionMessageToFile()</a>. See ExceptionInitializer for more discussion.  </dd>
<dt><a class="anchor" id="_todo000055"></a>Member <a class="el" href="classgmx_1_1HelpWriterContext.xhtml#a6bec872f46ecd34601df72141fca3739">gmx::HelpWriterContext::setReplacement</a>  (const std::string &amp;search, const std::string &amp;replace)</dt>
<dd>Improve semantics if the same <code>search</code> item is set multiple times.  </dd>
<dt><a class="anchor" id="_todo000029"></a>Class <a class="el" href="classgmx_1_1HostAllocationPolicy.xhtml">gmx::HostAllocationPolicy</a>  </dt>
<dd>As a minor optimization, consider also having a stateless version of this policy, which might be slightly faster or more convenient to use in the cases where it is known at compile time that the allocation will be used to transfer to a GPU.  </dd>
<dt><a class="anchor" id="_todo000034"></a>Member <a class="el" href="namespacegmx.xhtml#a112b366b91e4bbca373f7491b272e0db">gmx::hwinfo_g</a>  </dt>
<dd>This should become a shared_ptr owned by e.g. Mdrunner::runner() that is shared across any threads as needed (e.g. for thread-MPI). That offers about the same run time performance as we get here, and avoids a lot of custom code.  </dd>
<dt><a class="anchor" id="_todo000051"></a>Class <a class="el" href="classgmx_1_1IForceProvider.xhtml">gmx::IForceProvider</a>  </dt>
<dd>Extend this interface with a virial container and flag if the virial is needed here </dd>
<dt><a class="anchor" id="_todo000041"></a>Class <a class="el" href="classgmx_1_1MDAtoms.xhtml">gmx::MDAtoms</a>  </dt>
<dd>Refactor this class and rename MDAtoms once the group scheme is removed.  </dd>
<dt><a class="anchor" id="_todo000082"></a>Class <a class="el" href="classgmx_1_1Mdrunner.xhtml">gmx::Mdrunner</a>  </dt>
<dd><p class="startdd">Most of the attributes should be declared by specific modules as command-line options. Accordingly, they do not conform to the naming scheme, because that would make for a lot of noise in the diff, only to have it change again when the options move to their modules.</p>
<p class="enddd">Preparing logging and MPI contexts could probably be a higher-level responsibility, so that an Mdrunner would get made without needing to re-initialize these components (as currently happens always for the master rank, and differently for the spawned ranks with thread-MPI).  </p>
</dd>
<dt><a class="anchor" id="_todo000084"></a>Member <a class="el" href="classgmx_1_1Mdrunner.xhtml#a04393f301711961546e1018294c1a3be">gmx::Mdrunner::reinitializeOnSpawnedThread</a>  ()</dt>
<dd>Can this be refactored so that the Mdrunner on a spawned thread is constructed ready to use?  </dd>
<dt><a class="anchor" id="_todo000059"></a>Member <a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987">gmx::OptionFlag</a>  </dt>
<dd>The flags related to default values are confusing, consider reorganizing them.  </dd>
<dt><a class="anchor" id="_todo000038"></a>Member <a class="el" href="namespacegmx.xhtml#a7ed9d94613445e3a616e7116786ed534">gmx::PaddedArrayRef</a>  </dt>
<dd>Find a more permanent solution that permits the update code to safely use a padded, aligned array-ref type.  </dd>
<dt><a class="anchor" id="_todo000037"></a>Member <a class="el" href="namespacegmx.xhtml#ab5162006582f166d58667a890f462eba">gmx::PaddedRVecVector</a>  </dt>
<dd><p class="startdd">Consider replacing the padding applied in resizePaddedRVecVector() by automated padding on resize() of the vector. </p>
<p class="enddd">Undo the move of <a class="el" href="allocator_8h.xhtml" title="Declares gmx::Allocator template whose allocation functionality is configured both by type of object ...">allocator.h</a> and <a class="el" href="alignedallocator_8h.xhtml" title="Declares allocation policy classes and allocators that are used to make library containers compatible...">alignedallocator.h</a> from the internal to be public API applied in Change-Id: Ifb8dacf, needed to use AlignedAllocationPolicy here, when replacing std::vector here.  </p>
</dd>
<dt><a class="anchor" id="_todo000078"></a>Member <a class="el" href="classgmx_1_1Regex.xhtml#aceab26e90155f03d222ce104b5243cc6">gmx::Regex::Regex</a>  (const char *value)</dt>
<dd>Consider whether some other exception type would be better.  </dd>
<dt><a class="anchor" id="_todo000068"></a>Member <a class="el" href="namespacegmx.xhtml#a9e7149c73e79faf42117ef7006229094">gmx::reportGpuUsage</a>  (const MDLogger &amp;mdlog, bool userSetGpuIds, const GpuTaskAssignments &amp;gpuTaskAssignmentOnRanksOfThisNode, size_t numGpuTasksOnThisNode, size_t numPpRanks, bool bPrintHostName)</dt>
<dd>It could be useful to report also whether any nodes differed, and in what way. </dd>
<dt><a class="anchor" id="_todo000065"></a>Member <a class="el" href="classgmx_1_1Selection.xhtml#aa7007210627e2b003a1ee0d54c02908a">gmx::Selection::setEvaluateVelocities</a>  (bool bEnabled)</dt>
<dd>Implement it such that in the above case, hasVelocities() will return false for such frames. </dd>
<dt><a class="anchor" id="_todo000066"></a>Class <a class="el" href="classgmx_1_1SelectionOption.xhtml">gmx::SelectionOption</a>  </dt>
<dd><p class="startdd">Support for specifying that an option accepts, e.g., two to four selections. Currently, only a fixed count or any number of selections is possible.</p>
<p class="enddd"></p>
</dd>
<dt><a class="anchor" id="_todo000011"></a>Class <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml">gmx::test::AnalysisDataTestFixture</a>  </dt>
<dd>Support for arbitrary AnalysisDataValues (errors and missing values). </dd>
<dt><a class="anchor" id="_todo000089"></a>Class <a class="el" href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml">gmx::test::FloatingPointTolerance</a>  </dt>
<dd>The factory methods that take ULP difference could be better formulated as methods that take the acceptable number of incorrect bits and/or the number of accurate bits. </dd>
<dt><a class="anchor" id="_todo000088"></a>Member <a class="el" href="namespacegmx_1_1test.xhtml#a26d94b8bbe10b3fa39e5c03ef3833b4a">gmx::test::throwIfNonEmptyAndOnlyWhitespace</a>  (const std::string &amp;s, const char *id)</dt>
<dd>Eliminate this limitation of TinyXML2. See e.g. <a href="https://github.com/leethomason/tinyxml2/issues/432">https://github.com/leethomason/tinyxml2/issues/432</a>  </dd>
<dt><a class="anchor" id="_todo000081"></a>Member <a class="el" href="classgmx_1_1TextWriter.xhtml#a87a974330d5791f7410e6b20e516d5ae">gmx::TextWriter::wrapperSettings</a>  ()</dt>
<dd>Wrapping is not currently implemented for code that writes partial lines with writeString().  </dd>
<dt><a class="anchor" id="_todo000070"></a>Class <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">gmx::TrajectoryAnalysisSettings</a>  </dt>
<dd>Remove plain flags from the public interface. </dd>
<dt><a class="anchor" id="_todo000026"></a>Member <a class="el" href="gpuregiontimer_8h.xhtml#a4f8e3bfb11af73c5e9c702d844004f2c">GpuFramework</a>  </dt>
<dd>Move somewhere general?  </dd>
<dt><a class="anchor" id="_todo000027"></a>Class <a class="el" href="structGpuTraits.xhtml">GpuTraits&lt; GpuFramework &gt;</a>  </dt>
<dd>Move somewhere general?  </dd>
<dt><a class="anchor" id="_todo000050"></a>File <a class="el" href="handlerestart_8h.xhtml">handlerestart.h</a>  </dt>
<dd>There may be other code in runner.cpp etc. that can usefully live here </dd>
<dt><a class="anchor" id="_todo000052"></a>Class <a class="el" href="classhistory__t.xhtml">history_t</a>  </dt>
<dd>Rename this with a more descriptive name.  </dd>
<dt><a class="anchor" id="_todo000028"></a>File <a class="el" href="hostallocator_8h.xhtml">hostallocator.h</a>  </dt>
<dd>This should not be in the public API, but it needs to be for the moment because <a class="el" href="state_8h.xhtml" title="This file contains the definition of the microstate of the simulated system. ">state.h</a> is in that API. </dd>
<dt><a class="anchor" id="_todo000015"></a>Group <a class="el" href="group__module__domdec.xhtml">module_domdec</a>  </dt>
<dd>Get domdec stuff out of mdtypes/commrec.h </dd>
<dt><a class="anchor" id="_todo000033"></a>Member <a class="el" href="oclutils_8h.xhtml#a820dcad2db335a788636545ba5769adf">ocl_pmalloc</a>  (void **h_ptr, size_t nbytes)</dt>
<dd>This function should allocate page-locked memory to help reduce D2H and H2D transfer times, similar with pmalloc from pmalloc_cuda.cu. </dd>
<dt><a class="anchor" id="_todo000019"></a>File <a class="el" href="pme-gpu-types_8h.xhtml">pme-gpu-types.h</a>  </dt>
<dd>Due to Gerrit workflow and time constraints, some renaming/refactoring which does not impair the performance will be performed once most of the initial PME CUDA implementation is merged into the master branch (likely, after release 2017). This should include: &ndash; bringing the function names up to guidelines &ndash; PmeGpuSettings -&gt; PmeGpuTasks &ndash; refining GPU notation application (#2053) &ndash; renaming coefficients to charges (?) </dd>
<dt><a class="anchor" id="_todo000024"></a>Member <a class="el" href="pme_8h.xhtml#a9faddde52f5a636410141f52cc95d3e1">pme_gpu_task_enabled</a>  (const gmx_pme_t *pme)</dt>
<dd>This is a rather static data that should be managed by the hardware assignment manager. For now, it is synonymous with the active PME codepath (in the absence of dynamic switching). </dd>
<dt><a class="anchor" id="_todo000023"></a>Member <a class="el" href="pme_8h.xhtml#a9cfbe9fa691aabaf1a9e10fa06858c96">pme_run_mode</a>  (const gmx_pme_t *pme)</dt>
<dd>This is a rather static data that should be managed by the higher level task scheduler. </dd>
<dt><a class="anchor" id="_todo000022"></a>Member <a class="el" href="pme_8h.xhtml#adc082ed1af9a4868af13352373ed3791">PmeRunMode</a>  </dt>
<dd>: make this enum class with gmx_pme_t C++ refactoring  </dd>
<dt><a class="anchor" id="_todo000079"></a>Member <a class="el" href="smalloc_8h.xhtml#ab3d98b1efa6c2b42d2c0d216eafafec5">set_over_alloc_dd</a>  (gmx_bool set)</dt>
<dd>This is mdrun-specific, so it might be better to put this and <a class="el" href="smalloc_8h.xhtml#af1533c63c1d40c5bb9bfaaa6d898369a" title="Returns new allocation count for domain decomposition allocations. ">over_alloc_dd()</a> much higher up.  </dd>
<dt><a class="anchor" id="_todo000045"></a>File <a class="el" href="simulationsignal_8h.xhtml">simulationsignal.h</a>  </dt>
<dd>Move this to mdrunutility module alongside gathering multi-simulation communication infrastructure there. </dd>
<dt><a class="anchor" id="_todo000080"></a>File <a class="el" href="snprintf_8h.xhtml">snprintf.h</a>  </dt>
<dd>When all callers of snprintf compile as C++, perhaps use <a class="el" href="group__module__utility.xhtml#gaed06df18ca6f9fc3f42bad9ea4d7e025" title="Formats a string (snprintf() wrapper). ">gmx::formatString()</a> everywhere instead of snprintf. </dd>
<dt><a class="anchor" id="_todo000054"></a>Class <a class="el" href="classt__state.xhtml">t_state</a>  </dt>
<dd>Move pure observables history to <a class="el" href="structObservablesHistory.xhtml" title="Observables history, for writing/reading to/from checkpoint file. ">ObservablesHistory</a>. </dd>
</dl>
</div></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:56:11 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
