<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/gpu_utils/gpu_utils.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_8a21c46af9718d1f610eb513153099d7.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a46192700e9e8ed44c648f0a55ee9a53.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_cbbda348be622d4188e9f9890e0fe79d.xhtml">gpu_utils</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">gpu_utils.h File Reference<div class="ingroups"><a class="el" href="group__group__libraryapi.xhtml">Library API</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;cstdio&gt;</code><br/>
<code>#include &lt;string&gt;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &quot;gromacs/gpu_utils/gpu_macros.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="basedefinitions_8h.xhtml">gromacs/utility/basedefinitions.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for gpu_utils.h:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="gpu__utils_8h__incl.svg" width="464" height="202"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><div class="textblock"><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> This graph shows which files directly or indirectly include this file:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="gpu__utils_8h__dep__incl.svg" width="172" height="142"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Declare functions for detection and initialization for GPU devices. </p>
<dl class="section author"><dt>Author</dt><dd>Szilard Pall <a href="#" onclick="location.href='mai'+'lto:'+'pal'+'l.'+'szi'+'la'+'rd@'+'gm'+'ail'+'.c'+'om'; return false;">pall.<span style="display: none;">.nosp@m.</span>szil<span style="display: none;">.nosp@m.</span>ard@g<span style="display: none;">.nosp@m.</span>mail<span style="display: none;">.nosp@m.</span>.com</a> </dd>
<dd>
Mark Abraham <a href="#" onclick="location.href='mai'+'lto:'+'mar'+'k.'+'j.a'+'br'+'aha'+'m@'+'gma'+'il'+'.co'+'m'; return false;">mark.<span style="display: none;">.nosp@m.</span>j.ab<span style="display: none;">.nosp@m.</span>raham<span style="display: none;">.nosp@m.</span>@gma<span style="display: none;">.nosp@m.</span>il.co<span style="display: none;">.nosp@m.</span>m</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a4a5340aac0cf9145eaae8a5ac5d6b0dc"><td class="memItemLeft" align="right" valign="top">typedef void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a4a5340aac0cf9145eaae8a5ac5d6b0dc">gmx_host_alloc_t</a> (void **ptr, size_t nbytes)</td></tr>
<tr class="memdesc:a4a5340aac0cf9145eaae8a5ac5d6b0dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer *ptr to page-locked memory of size nbytes.  <a href="#a4a5340aac0cf9145eaae8a5ac5d6b0dc">More...</a><br/></td></tr>
<tr class="separator:a4a5340aac0cf9145eaae8a5ac5d6b0dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff7e0f62ae0592b0aefadcf9071d0435"><td class="memItemLeft" align="right" valign="top">typedef void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#aff7e0f62ae0592b0aefadcf9071d0435">gmx_host_free_t</a> (void *ptr)</td></tr>
<tr class="memdesc:aff7e0f62ae0592b0aefadcf9071d0435"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees page-locked memory pointed to by *ptr.  <a href="#aff7e0f62ae0592b0aefadcf9071d0435">More...</a><br/></td></tr>
<tr class="separator:aff7e0f62ae0592b0aefadcf9071d0435"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:adc305319540d3e36bec5adedeec9645c"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#adc305319540d3e36bec5adedeec9645c">GpuApiCallBehavior</a> { <b>Sync</b>, 
<b>Async</b>
 }</td></tr>
<tr class="memdesc:adc305319540d3e36bec5adedeec9645c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enum which is only used to describe transfer calls at the moment. <br/></td></tr>
<tr class="separator:adc305319540d3e36bec5adedeec9645c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab3d31c4bd3fcb89aa5d554b125b403e"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#aab3d31c4bd3fcb89aa5d554b125b403e">GpuTaskCompletion</a> { <b>Wait</b>, 
<b>Check</b>
 }</td></tr>
<tr class="memdesc:aab3d31c4bd3fcb89aa5d554b125b403e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Types of actions associated to waiting or checking the completion of GPU tasks. <br/></td></tr>
<tr class="separator:aab3d31c4bd3fcb89aa5d554b125b403e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a0e5655da488ed8af048ead6b840f746b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a0e5655da488ed8af048ead6b840f746b">canDetectGpus</a> (std::string *errorMessage)</td></tr>
<tr class="memdesc:a0e5655da488ed8af048ead6b840f746b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return whether GPUs can be detected.  <a href="#a0e5655da488ed8af048ead6b840f746b">More...</a><br/></td></tr>
<tr class="separator:a0e5655da488ed8af048ead6b840f746b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a230bceb7222795e5412e20c7fad240b5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a230bceb7222795e5412e20c7fad240b5">findGpus</a> (struct gmx_gpu_info_t *gpu_info)</td></tr>
<tr class="memdesc:a230bceb7222795e5412e20c7fad240b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find all GPUs in the system.  <a href="#a230bceb7222795e5412e20c7fad240b5">More...</a><br/></td></tr>
<tr class="separator:a230bceb7222795e5412e20c7fad240b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bc16b56a441046ce9ebaa9f402875d5"><td class="memItemLeft" align="right" valign="top">std::vector&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a2bc16b56a441046ce9ebaa9f402875d5">getCompatibleGpus</a> (const gmx_gpu_info_t &amp;gpu_info)</td></tr>
<tr class="memdesc:a2bc16b56a441046ce9ebaa9f402875d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a container of the detected GPUs that are compatible.  <a href="#a2bc16b56a441046ce9ebaa9f402875d5">More...</a><br/></td></tr>
<tr class="separator:a2bc16b56a441046ce9ebaa9f402875d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a803acba7fe33d56059490710cd092f6b"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a803acba7fe33d56059490710cd092f6b">getGpuCompatibilityDescription</a> (const gmx_gpu_info_t &amp;gpu_info, int index)</td></tr>
<tr class="memdesc:a803acba7fe33d56059490710cd092f6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a string describing how compatible the GPU with given <code>index</code> is.  <a href="#a803acba7fe33d56059490710cd092f6b">More...</a><br/></td></tr>
<tr class="separator:a803acba7fe33d56059490710cd092f6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca84b5cc77147071ae8504cfd6193ad5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#aca84b5cc77147071ae8504cfd6193ad5">free_gpu_info</a> (const struct gmx_gpu_info_t *gpu_info)</td></tr>
<tr class="memdesc:aca84b5cc77147071ae8504cfd6193ad5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees the gpu_dev and dev_use array fields of <code>gpu_info</code>.  <a href="#aca84b5cc77147071ae8504cfd6193ad5">More...</a><br/></td></tr>
<tr class="separator:aca84b5cc77147071ae8504cfd6193ad5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa93da9291223566f4f0fb6ea4bcfb4e7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#aa93da9291223566f4f0fb6ea4bcfb4e7">init_gpu</a> (const <a class="el" href="classgmx_1_1MDLogger.xhtml">gmx::MDLogger</a> &amp;mdlog, gmx_device_info_t *deviceInfo)</td></tr>
<tr class="memdesc:aa93da9291223566f4f0fb6ea4bcfb4e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the GPU described by <code>deviceInfo</code>.  <a href="#aa93da9291223566f4f0fb6ea4bcfb4e7">More...</a><br/></td></tr>
<tr class="separator:aa93da9291223566f4f0fb6ea4bcfb4e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a580cb1657b3272778f0ff881e7e30ac0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a580cb1657b3272778f0ff881e7e30ac0">free_gpu</a> (const gmx_device_info_t *deviceInfo)</td></tr>
<tr class="memdesc:a580cb1657b3272778f0ff881e7e30ac0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees up the CUDA GPU used by the active context at the time of calling.  <a href="#a580cb1657b3272778f0ff881e7e30ac0">More...</a><br/></td></tr>
<tr class="separator:a580cb1657b3272778f0ff881e7e30ac0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed4287f67e5c2d2c46a585c34146f634"><td class="memItemLeft" align="right" valign="top">gmx_device_info_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#aed4287f67e5c2d2c46a585c34146f634">getDeviceInfo</a> (const gmx_gpu_info_t &amp;gpu_info, int deviceId)</td></tr>
<tr class="memdesc:aed4287f67e5c2d2c46a585c34146f634"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a pointer to the device info for <code>deviceId</code>.  <a href="#aed4287f67e5c2d2c46a585c34146f634">More...</a><br/></td></tr>
<tr class="separator:aed4287f67e5c2d2c46a585c34146f634"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefeb87fd57039f9d5dd877d6f2caf857"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#aefeb87fd57039f9d5dd877d6f2caf857">get_current_cuda_gpu_device_id</a> (void)</td></tr>
<tr class="memdesc:aefeb87fd57039f9d5dd877d6f2caf857"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the device ID of the CUDA GPU currently in use.  <a href="#aefeb87fd57039f9d5dd877d6f2caf857">More...</a><br/></td></tr>
<tr class="separator:aefeb87fd57039f9d5dd877d6f2caf857"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2af951ecf915d1c240ccdfae64abebd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#ae2af951ecf915d1c240ccdfae64abebd">get_gpu_device_info_string</a> (char *s, const struct gmx_gpu_info_t &amp;gpu_info, int index)</td></tr>
<tr class="memdesc:ae2af951ecf915d1c240ccdfae64abebd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats and returns a device information string for a given GPU.  <a href="#ae2af951ecf915d1c240ccdfae64abebd">More...</a><br/></td></tr>
<tr class="separator:ae2af951ecf915d1c240ccdfae64abebd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac368c4a971290513fbabe74a0c80b716"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#ac368c4a971290513fbabe74a0c80b716">sizeof_gpu_dev_info</a> (void)</td></tr>
<tr class="memdesc:ac368c4a971290513fbabe74a0c80b716"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the size of the gpu_dev_info struct.  <a href="#ac368c4a971290513fbabe74a0c80b716">More...</a><br/></td></tr>
<tr class="separator:ac368c4a971290513fbabe74a0c80b716"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab791918a19cd4aefc96a099f27f0ca1e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#ab791918a19cd4aefc96a099f27f0ca1e">gpu_set_host_malloc_and_free</a> (bool bUseGpuKernels, <a class="el" href="gpu__utils_8h.xhtml#a4a5340aac0cf9145eaae8a5ac5d6b0dc">gmx_host_alloc_t</a> **nb_alloc, <a class="el" href="gpu__utils_8h.xhtml#aff7e0f62ae0592b0aefadcf9071d0435">gmx_host_free_t</a> **nb_free)</td></tr>
<tr class="memdesc:ab791918a19cd4aefc96a099f27f0ca1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set page-locked memory allocation functions used by the GPU host.  <a href="#ab791918a19cd4aefc96a099f27f0ca1e">More...</a><br/></td></tr>
<tr class="separator:ab791918a19cd4aefc96a099f27f0ca1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a7aa4fffbbd8a56589d49b25021f268"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a4a7aa4fffbbd8a56589d49b25021f268">startGpuProfiler</a> (void)</td></tr>
<tr class="memdesc:a4a7aa4fffbbd8a56589d49b25021f268"><td class="mdescLeft">&#160;</td><td class="mdescRight">Starts the GPU profiler if mdrun is being profiled.  <a href="#a4a7aa4fffbbd8a56589d49b25021f268">More...</a><br/></td></tr>
<tr class="separator:a4a7aa4fffbbd8a56589d49b25021f268"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a437ab09a563614df382d80d53f662b4a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a437ab09a563614df382d80d53f662b4a">resetGpuProfiler</a> (void)</td></tr>
<tr class="memdesc:a437ab09a563614df382d80d53f662b4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets the GPU profiler if mdrun is being profiled.  <a href="#a437ab09a563614df382d80d53f662b4a">More...</a><br/></td></tr>
<tr class="separator:a437ab09a563614df382d80d53f662b4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49e144aebbc0f0af255f1b49c67d598b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a49e144aebbc0f0af255f1b49c67d598b">stopGpuProfiler</a> (void)</td></tr>
<tr class="memdesc:a49e144aebbc0f0af255f1b49c67d598b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stops the CUDA profiler if mdrun is being profiled.  <a href="#a49e144aebbc0f0af255f1b49c67d598b">More...</a><br/></td></tr>
<tr class="separator:a49e144aebbc0f0af255f1b49c67d598b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ad85325fbd79893355ccc0f7d111511"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3ad85325fbd79893355ccc0f7d111511"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a3ad85325fbd79893355ccc0f7d111511">isHostMemoryPinned</a> (void *h_ptr)</td></tr>
<tr class="memdesc:a3ad85325fbd79893355ccc0f7d111511"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tells whether the host buffer was pinned for non-blocking transfers. Only implemented for CUDA. <br/></td></tr>
<tr class="separator:a3ad85325fbd79893355ccc0f7d111511"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a class="anchor" id="a4a5340aac0cf9145eaae8a5ac5d6b0dc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef void gmx_host_alloc_t(void **ptr, size_t nbytes)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a pointer *ptr to page-locked memory of size nbytes. </p>
<p>The allocated memory is suitable to be used for data transfers between host and GPU. Error handling should be done within this function. </p>

</div>
</div>
<a class="anchor" id="aff7e0f62ae0592b0aefadcf9071d0435"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef void gmx_host_free_t(void *ptr)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees page-locked memory pointed to by *ptr. </p>
<p>NULL should not be passed to this function. </p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a0e5655da488ed8af048ead6b840f746b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool canDetectGpus </td>
          <td>(</td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>errorMessage</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return whether GPUs can be detected. </p>
<p>Returns true when this is a build of GROMACS configured to support GPU usage, and a valid device driver, ICD, and/or runtime was detected.</p>
<p>This function is not intended to be called from build configurations that do not support GPUs, and there will be no descriptive message in that case.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">errorMessage</td><td>When returning false on a build configured with GPU support and non-nullptr was passed, the string contains a descriptive message about why GPUs cannot be detected.</td></tr>
  </table>
  </dd>
</dl>
<p>Does not throw.</p>
<p>Return whether GPUs can be detected. </p>

</div>
</div>
<a class="anchor" id="a230bceb7222795e5412e20c7fad240b5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void findGpus </td>
          <td>(</td>
          <td class="paramtype">gmx_gpu_info_t *&#160;</td>
          <td class="paramname"><em>gpu_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find all GPUs in the system. </p>
<p>Will detect every GPU supported by the device driver in use. Must only be called if <a class="el" href="gpu__utils_8h.xhtml#a0e5655da488ed8af048ead6b840f746b" title="Return whether GPUs can be detected. ">canDetectGpus()</a> has returned true. This routine also checks for the compatibility of each and fill the gpu_info-&gt;gpu_dev array with the required information on each the device: ID, device properties, status.</p>
<p>Note that this function leaves the GPU runtime API error state clean; this is implemented ATM in the CUDA flavor. TODO: check if errors do propagate in OpenCL as they do in CUDA and whether there is a mechanism to "clear" them.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_info</td><td>pointer to structure holding GPU information.</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">InternalError</td><td>if a GPU API returns an unexpected failure (because the call to <a class="el" href="gpu__utils_8h.xhtml#a0e5655da488ed8af048ead6b840f746b" title="Return whether GPUs can be detected. ">canDetectGpus()</a> should always prevent this occuring)</td></tr>
  </table>
  </dd>
</dl>
<p>Find all GPUs in the system. </p>

</div>
</div>
<a class="anchor" id="a580cb1657b3272778f0ff881e7e30ac0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void free_gpu </td>
          <td>(</td>
          <td class="paramtype">const gmx_device_info_t *&#160;</td>
          <td class="paramname"><em>deviceInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees up the CUDA GPU used by the active context at the time of calling. </p>
<p>If <code>deviceInfo</code> is nullptr, then it is understood that no device was selected so no context is active to be freed. Otherwise, the context is explicitly destroyed and therefore all data uploaded to the GPU is lost. This must only be called when none of this data is required anymore, because subsequent attempts to free memory associated with the context will otherwise fail.</p>
<p>Calls gmx_warning upon errors.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">deviceInfo</td><td>device info of the GPU to clean up for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if no error occurs during the freeing. </dd></dl>

</div>
</div>
<a class="anchor" id="aca84b5cc77147071ae8504cfd6193ad5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void free_gpu_info </td>
          <td>(</td>
          <td class="paramtype">const struct gmx_gpu_info_t *&#160;</td>
          <td class="paramname"><em>gpu_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees the gpu_dev and dev_use array fields of <code>gpu_info</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_info</td><td>pointer to structure holding GPU information </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aefeb87fd57039f9d5dd877d6f2caf857"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int get_current_cuda_gpu_device_id </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the device ID of the CUDA GPU currently in use. </p>
<p>The GPU used is the one that is active at the time of the call in the active context.</p>
<dl class="section return"><dt>Returns</dt><dd>device ID of the GPU in use at the time of the call </dd></dl>

</div>
</div>
<a class="anchor" id="ae2af951ecf915d1c240ccdfae64abebd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void get_gpu_device_info_string </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const struct gmx_gpu_info_t &amp;&#160;</td>
          <td class="paramname"><em>gpu_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formats and returns a device information string for a given GPU. </p>
<p>Given an index <em>directly</em> into the array of available GPUs (gpu_dev) returns a formatted info string for the respective GPU which includes ID, name, compute capability, and detection status.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">s</td><td>pointer to output string (has to be allocated externally) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_info</td><td>Information about detected GPUs </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>an index <em>directly</em> into the array of available GPUs </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2bc16b56a441046ce9ebaa9f402875d5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;int&gt; getCompatibleGpus </td>
          <td>(</td>
          <td class="paramtype">const gmx_gpu_info_t &amp;&#160;</td>
          <td class="paramname"><em>gpu_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a container of the detected GPUs that are compatible. </p>
<p>This function filters the result of the detection for compatible GPUs, based on the previously run compatibility tests.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_info</td><td>Information detected about GPUs, including compatibility. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>vector of IDs of GPUs already recorded as compatible</dd></dl>
<p>Return a container of the detected GPUs that are compatible. </p>

</div>
</div>
<a class="anchor" id="aed4287f67e5c2d2c46a585c34146f634"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">gmx_device_info_t* getDeviceInfo </td>
          <td>(</td>
          <td class="paramtype">const gmx_gpu_info_t &amp;&#160;</td>
          <td class="paramname"><em>gpu_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>deviceId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a pointer to the device info for <code>deviceId</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_info</td><td>GPU info of all detected devices in the system. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">deviceId</td><td>ID for the GPU device requested.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to the device info for <code>deviceId</code>.</dd></dl>
<p>Return a pointer to the device info for <code>deviceId</code>. </p>

</div>
</div>
<a class="anchor" id="a803acba7fe33d56059490710cd092f6b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* getGpuCompatibilityDescription </td>
          <td>(</td>
          <td class="paramtype">const gmx_gpu_info_t &amp;&#160;</td>
          <td class="paramname"><em>gpu_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a string describing how compatible the GPU with given <code>index</code> is. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_info</td><td>Information about detected GPUs </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>index of GPU to ask about </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A null-terminated C string describing the compatibility status, useful for error messages.</dd></dl>
<p>Return a string describing how compatible the GPU with given <code>index</code> is. </p>

</div>
</div>
<a class="anchor" id="ab791918a19cd4aefc96a099f27f0ca1e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gpu_set_host_malloc_and_free </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="gpu__utils_8h.xhtml#a4a5340aac0cf9145eaae8a5ac5d6b0dc">gmx_host_alloc_t</a> **&#160;</td>
          <td class="paramname"><em>nb_alloc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="gpu__utils_8h.xhtml#aff7e0f62ae0592b0aefadcf9071d0435">gmx_host_free_t</a> **&#160;</td>
          <td class="paramname"><em>nb_free</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set page-locked memory allocation functions used by the GPU host. </p>
<p>Set page-locked memory allocation functions used by the GPU host.</p>
<p>Since GPU support is not configured, there is no host memory to allocate. </p>

</div>
</div>
<a class="anchor" id="aa93da9291223566f4f0fb6ea4bcfb4e7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init_gpu </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1MDLogger.xhtml">gmx::MDLogger</a> &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_device_info_t *&#160;</td>
          <td class="paramname"><em>deviceInfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes the GPU described by <code>deviceInfo</code>. </p>
<p>TODO Doxygen complains about these - probably a Doxygen bug, since the patterns here are the same as elsewhere in this header.</p>
<p>param[in] mdlog log file to write to </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">deviceInfo</td><td>device info of the GPU to initialize</td></tr>
  </table>
  </dd>
</dl>
<p>Issues a fatal error for any critical errors that occur during initialization.</p>
<p>Initializes the GPU described by <code>deviceInfo</code>. </p>

</div>
</div>
<a class="anchor" id="a437ab09a563614df382d80d53f662b4a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void resetGpuProfiler </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Resets the GPU profiler if mdrun is being profiled. </p>
<p>When a profiler run is in progress (based on the presence of the NVPROF_ID env. var.), the profiler data is restet in order to eliminate the data collected from the preceding part fo the run.</p>
<p>This function should typically be called at the mdrun counter reset time.</p>
<p>Note that this is implemented only for the CUDA API. </p>

</div>
</div>
<a class="anchor" id="ac368c4a971290513fbabe74a0c80b716"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t sizeof_gpu_dev_info </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the size of the gpu_dev_info struct. </p>
<p>The size of gpu_dev_info can be used for allocation and communication.</p>
<dl class="section return"><dt>Returns</dt><dd>size in bytes of gpu_dev_info</dd></dl>
<p>Returns the size of the gpu_dev_info struct. </p>

</div>
</div>
<a class="anchor" id="a4a7aa4fffbbd8a56589d49b25021f268"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void startGpuProfiler </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Starts the GPU profiler if mdrun is being profiled. </p>
<p>When a profiler run is in progress (based on the presence of the NVPROF_ID env. var.), the profiler is started to begin collecting data during the rest of the run (or until stopGpuProfiler is called).</p>
<p>Note that this is implemented only for the CUDA API. </p>

</div>
</div>
<a class="anchor" id="a49e144aebbc0f0af255f1b49c67d598b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stopGpuProfiler </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Stops the CUDA profiler if mdrun is being profiled. </p>
<p>This function can be called at cleanup when skipping recording recording subsequent API calls from being traces/profiled is desired, e.g. before uninitialization.</p>
<p>Note that this is implemented only for the CUDA API. </p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:56:07 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
