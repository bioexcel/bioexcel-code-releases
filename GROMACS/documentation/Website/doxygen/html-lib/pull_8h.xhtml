<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/pulling/pull.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_8a21c46af9718d1f610eb513153099d7.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a46192700e9e8ed44c648f0a55ee9a53.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_f0525b1fd47aeb3c14bec98caed922ee.xhtml">pulling</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">pull.h File Reference<div class="ingroups"><a class="el" href="group__group__libraryapi.xhtml">Library API</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;cstdio&gt;</code><br/>
<code>#include &quot;gromacs/math/vectypes.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="pull-params_8h.xhtml">gromacs/mdtypes/pull-params.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="pull__internal_8h.xhtml">gromacs/pulling/pull_internal.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="basedefinitions_8h.xhtml">gromacs/utility/basedefinitions.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="real_8h.xhtml">gromacs/utility/real.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for pull.h:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="pull_8h__incl.svg" width="606" height="470"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>This file contains datatypes and function declarations necessary for mdrun to interface with the pull code. </p>
<dl class="section author"><dt>Author</dt><dd>Berk Hess </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a81eaa5fa98a457caf1063c9d47a01894"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#a81eaa5fa98a457caf1063c9d47a01894">pull_coordinate_is_angletype</a> (const t_pull_coord *pcrd)</td></tr>
<tr class="memdesc:a81eaa5fa98a457caf1063c9d47a01894"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns if the pull coordinate is an angle.  <a href="#a81eaa5fa98a457caf1063c9d47a01894">More...</a><br/></td></tr>
<tr class="separator:a81eaa5fa98a457caf1063c9d47a01894"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fa4ceb3c6e0e9d914ad71b37a658736"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#a6fa4ceb3c6e0e9d914ad71b37a658736">pull_coordinate_units</a> (const t_pull_coord *pcrd)</td></tr>
<tr class="memdesc:a6fa4ceb3c6e0e9d914ad71b37a658736"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the units of the pull coordinate.  <a href="#a6fa4ceb3c6e0e9d914ad71b37a658736">More...</a><br/></td></tr>
<tr class="separator:a6fa4ceb3c6e0e9d914ad71b37a658736"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a325eb8522d1fed29fca6659ce2359835"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#a325eb8522d1fed29fca6659ce2359835">pull_conversion_factor_userinput2internal</a> (const t_pull_coord *pcrd)</td></tr>
<tr class="memdesc:a325eb8522d1fed29fca6659ce2359835"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the conversion factor from the pull coord init/rate unit to internal value unit.  <a href="#a325eb8522d1fed29fca6659ce2359835">More...</a><br/></td></tr>
<tr class="separator:a325eb8522d1fed29fca6659ce2359835"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23b5c3acf1da25883f0fa8b216d0c63e"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#a23b5c3acf1da25883f0fa8b216d0c63e">pull_conversion_factor_internal2userinput</a> (const t_pull_coord *pcrd)</td></tr>
<tr class="memdesc:a23b5c3acf1da25883f0fa8b216d0c63e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the conversion factor from the pull coord internal value unit to the init/rate unit.  <a href="#a23b5c3acf1da25883f0fa8b216d0c63e">More...</a><br/></td></tr>
<tr class="separator:a23b5c3acf1da25883f0fa8b216d0c63e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af239aa76e3a6ba47c308afddfda25b14"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#af239aa76e3a6ba47c308afddfda25b14">get_pull_coord_value</a> (struct pull_t *pull, int coord_ind, const struct <a class="el" href="structt__pbc.xhtml">t_pbc</a> *pbc)</td></tr>
<tr class="memdesc:af239aa76e3a6ba47c308afddfda25b14"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the value for pull coord coord_ind.  <a href="#af239aa76e3a6ba47c308afddfda25b14">More...</a><br/></td></tr>
<tr class="separator:af239aa76e3a6ba47c308afddfda25b14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86dbe05b3e003570d0fa27706bebe5df"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#a86dbe05b3e003570d0fa27706bebe5df">register_external_pull_potential</a> (struct pull_t *pull, int coord_index, const char *provider)</td></tr>
<tr class="memdesc:a86dbe05b3e003570d0fa27706bebe5df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registers the provider of an external potential for a coordinate.  <a href="#a86dbe05b3e003570d0fa27706bebe5df">More...</a><br/></td></tr>
<tr class="separator:a86dbe05b3e003570d0fa27706bebe5df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1b7edf5490d0b7e509a3a612064a782"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#ad1b7edf5490d0b7e509a3a612064a782">apply_external_pull_coord_force</a> (struct pull_t *pull, int coord_index, double coord_force, const <a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *mdatoms, <a class="el" href="classgmx_1_1ForceWithVirial.xhtml">gmx::ForceWithVirial</a> *forceWithVirial)</td></tr>
<tr class="memdesc:ad1b7edf5490d0b7e509a3a612064a782"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply forces of an external potential to a pull coordinate.  <a href="#ad1b7edf5490d0b7e509a3a612064a782">More...</a><br/></td></tr>
<tr class="separator:ad1b7edf5490d0b7e509a3a612064a782"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb54950ad8ca63a394bb6667d9fe041c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#aeb54950ad8ca63a394bb6667d9fe041c">clear_pull_forces</a> (struct pull_t *pull)</td></tr>
<tr class="memdesc:aeb54950ad8ca63a394bb6667d9fe041c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the all the pull forces to zero.  <a href="#aeb54950ad8ca63a394bb6667d9fe041c">More...</a><br/></td></tr>
<tr class="separator:aeb54950ad8ca63a394bb6667d9fe041c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b55e2848d41bbc16426142c0593d1f7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#a0b55e2848d41bbc16426142c0593d1f7">pull_potential</a> (struct pull_t *pull, <a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *md, struct <a class="el" href="structt__pbc.xhtml">t_pbc</a> *pbc, t_commrec *cr, double t, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> lambda, rvec *x, <a class="el" href="classgmx_1_1ForceWithVirial.xhtml">gmx::ForceWithVirial</a> *force, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *dvdlambda)</td></tr>
<tr class="memdesc:a0b55e2848d41bbc16426142c0593d1f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determine the COM pull forces and add them to f, return the potential.  <a href="#a0b55e2848d41bbc16426142c0593d1f7">More...</a><br/></td></tr>
<tr class="separator:a0b55e2848d41bbc16426142c0593d1f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b1dad06723dff60a45d5774815c8e63"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#a9b1dad06723dff60a45d5774815c8e63">pull_constraint</a> (struct pull_t *pull, <a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *md, struct <a class="el" href="structt__pbc.xhtml">t_pbc</a> *pbc, t_commrec *cr, double dt, double t, rvec *x, rvec *xp, rvec *v, tensor vir)</td></tr>
<tr class="memdesc:a9b1dad06723dff60a45d5774815c8e63"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constrain the coordinates xp in the directions in x and also constrain v when v != NULL.  <a href="#a9b1dad06723dff60a45d5774815c8e63">More...</a><br/></td></tr>
<tr class="separator:a9b1dad06723dff60a45d5774815c8e63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c0994758d27eec2e24551de9c7b6808"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#a3c0994758d27eec2e24551de9c7b6808">dd_make_local_pull_groups</a> (t_commrec *cr, struct pull_t *pull, <a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *md)</td></tr>
<tr class="memdesc:a3c0994758d27eec2e24551de9c7b6808"><td class="mdescLeft">&#160;</td><td class="mdescRight">Make a selection of the home atoms for all pull groups. Should be called at every domain decomposition.  <a href="#a3c0994758d27eec2e24551de9c7b6808">More...</a><br/></td></tr>
<tr class="separator:a3c0994758d27eec2e24551de9c7b6808"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd6e3e7f51eb98589ad27944394dd8d4"><td class="memItemLeft" align="right" valign="top">struct pull_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#acd6e3e7f51eb98589ad27944394dd8d4">init_pull</a> (FILE *fplog, const pull_params_t *pull_params, const t_inputrec *ir, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[], const gmx_mtop_t *mtop, t_commrec *cr, const gmx_output_env_t *oenv, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> lambda, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bOutFile, const ContinuationOptions &amp;continuationOptions)</td></tr>
<tr class="memdesc:acd6e3e7f51eb98589ad27944394dd8d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate, initialize and return a pull work struct.  <a href="#acd6e3e7f51eb98589ad27944394dd8d4">More...</a><br/></td></tr>
<tr class="separator:acd6e3e7f51eb98589ad27944394dd8d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13f47d536a7dbf42621f5b69e5ee603a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#a13f47d536a7dbf42621f5b69e5ee603a">finish_pull</a> (struct pull_t *pull)</td></tr>
<tr class="memdesc:a13f47d536a7dbf42621f5b69e5ee603a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Close the pull output files.  <a href="#a13f47d536a7dbf42621f5b69e5ee603a">More...</a><br/></td></tr>
<tr class="separator:a13f47d536a7dbf42621f5b69e5ee603a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a2e05b09b4d34fb43b79e5ee4e961fc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#a2a2e05b09b4d34fb43b79e5ee4e961fc">pull_print_output</a> (struct pull_t *pull, gmx_int64_t step, double time)</td></tr>
<tr class="memdesc:a2a2e05b09b4d34fb43b79e5ee4e961fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the pull output (x and/or f)  <a href="#a2a2e05b09b4d34fb43b79e5ee4e961fc">More...</a><br/></td></tr>
<tr class="separator:a2a2e05b09b4d34fb43b79e5ee4e961fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0858cf06c8c6fb9d10c2dedf0111bce"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#ac0858cf06c8c6fb9d10c2dedf0111bce">pull_calc_coms</a> (t_commrec *cr, struct pull_t *pull, <a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *md, struct <a class="el" href="structt__pbc.xhtml">t_pbc</a> *pbc, double t, rvec x[], rvec *xp)</td></tr>
<tr class="memdesc:ac0858cf06c8c6fb9d10c2dedf0111bce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates centers of mass all pull groups.  <a href="#ac0858cf06c8c6fb9d10c2dedf0111bce">More...</a><br/></td></tr>
<tr class="separator:ac0858cf06c8c6fb9d10c2dedf0111bce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a583ab75cc18678c2b7d4478040975587"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#a583ab75cc18678c2b7d4478040975587">pullCheckPbcWithinGroups</a> (const pull_t &amp;pull, const rvec *x, const <a class="el" href="structt__pbc.xhtml">t_pbc</a> &amp;pbc)</td></tr>
<tr class="memdesc:a583ab75cc18678c2b7d4478040975587"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether all groups that use a reference atom are within PBC restrictions.  <a href="#a583ab75cc18678c2b7d4478040975587">More...</a><br/></td></tr>
<tr class="separator:a583ab75cc18678c2b7d4478040975587"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc627897a8189d68747111b971b417b2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#abc627897a8189d68747111b971b417b2">pull_have_potential</a> (const struct pull_t *pull)</td></tr>
<tr class="memdesc:abc627897a8189d68747111b971b417b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns if we have pull coordinates with potential pulling.  <a href="#abc627897a8189d68747111b971b417b2">More...</a><br/></td></tr>
<tr class="separator:abc627897a8189d68747111b971b417b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae2e9a5b5af8eeeacb6333d1f301c421"><td class="memItemLeft" align="right" valign="top"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#aae2e9a5b5af8eeeacb6333d1f301c421">pull_have_constraint</a> (const struct pull_t *pull)</td></tr>
<tr class="memdesc:aae2e9a5b5af8eeeacb6333d1f301c421"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns if we have pull coordinates with constraint pulling.  <a href="#aae2e9a5b5af8eeeacb6333d1f301c421">More...</a><br/></td></tr>
<tr class="separator:aae2e9a5b5af8eeeacb6333d1f301c421"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af97d4786cc5f164d05c8d0a75dc7bf44"><td class="memItemLeft" align="right" valign="top"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#af97d4786cc5f164d05c8d0a75dc7bf44">max_pull_distance2</a> (const pull_coord_work_t *pcrd, const <a class="el" href="structt__pbc.xhtml">t_pbc</a> *pbc)</td></tr>
<tr class="memdesc:af97d4786cc5f164d05c8d0a75dc7bf44"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the maxing distance for pulling.  <a href="#af97d4786cc5f164d05c8d0a75dc7bf44">More...</a><br/></td></tr>
<tr class="separator:af97d4786cc5f164d05c8d0a75dc7bf44"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a98f772136c45528b8d405dd8e13d00b0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a98f772136c45528b8d405dd8e13d00b0"></a>
static constexpr <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pull_8h.xhtml#a98f772136c45528b8d405dd8e13d00b0">c_pullGroupPbcMargin</a> = 0.9</td></tr>
<tr class="memdesc:a98f772136c45528b8d405dd8e13d00b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Margin for checking PBC distances compared to half the box size in <a class="el" href="pull_8h.xhtml#a583ab75cc18678c2b7d4478040975587" title="Checks whether all groups that use a reference atom are within PBC restrictions. ">pullCheckPbcWithinGroups()</a> <br/></td></tr>
<tr class="separator:a98f772136c45528b8d405dd8e13d00b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ad1b7edf5490d0b7e509a3a612064a782"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void apply_external_pull_coord_force </td>
          <td>(</td>
          <td class="paramtype">struct pull_t *&#160;</td>
          <td class="paramname"><em>pull</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>coord_index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>coord_force</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *&#160;</td>
          <td class="paramname"><em>mdatoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ForceWithVirial.xhtml">gmx::ForceWithVirial</a> *&#160;</td>
          <td class="paramname"><em>forceWithVirial</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Apply forces of an external potential to a pull coordinate. </p>
<p>This function applies the external scalar force <code>coord_force</code> to the pull coordinate, distributing it over the atoms in the groups involved in the pull coordinate. The corresponding potential energy value should be added to the pull or the module's potential energy term separately by the module itself. This function should be called after pull_potential has been called and, obviously, before the coordinates are updated uses the forces.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pull</td><td>The pull struct. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">coord_index</td><td>The pull coordinate index to set the force for. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">coord_force</td><td>The scalar force for the pull coordinate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mdatoms</td><td>Atom properties, only masses are used. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">forceWithVirial</td><td>Force and virial buffers. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aeb54950ad8ca63a394bb6667d9fe041c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void clear_pull_forces </td>
          <td>(</td>
          <td class="paramtype">struct pull_t *&#160;</td>
          <td class="paramname"><em>pull</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the all the pull forces to zero. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pull</td><td>The pull group. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a3c0994758d27eec2e24551de9c7b6808"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void dd_make_local_pull_groups </td>
          <td>(</td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct pull_t *&#160;</td>
          <td class="paramname"><em>pull</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *&#160;</td>
          <td class="paramname"><em>md</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Make a selection of the home atoms for all pull groups. Should be called at every domain decomposition. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cr</td><td>Structure for communication info. </td></tr>
    <tr><td class="paramname">pull</td><td>The pull group. </td></tr>
    <tr><td class="paramname">md</td><td>All atoms. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a13f47d536a7dbf42621f5b69e5ee603a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void finish_pull </td>
          <td>(</td>
          <td class="paramtype">struct pull_t *&#160;</td>
          <td class="paramname"><em>pull</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Close the pull output files. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pull</td><td>The pull group. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af239aa76e3a6ba47c308afddfda25b14"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double get_pull_coord_value </td>
          <td>(</td>
          <td class="paramtype">struct pull_t *&#160;</td>
          <td class="paramname"><em>pull</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>coord_ind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const struct <a class="el" href="structt__pbc.xhtml">t_pbc</a> *&#160;</td>
          <td class="paramname"><em>pbc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the value for pull coord coord_ind. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pull</td><td>The pull struct. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">coord_ind</td><td>Number of the pull coordinate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pbc</td><td>Information structure about periodicity. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the value of the pull coordinate. </dd></dl>

</div>
</div>
<a class="anchor" id="acd6e3e7f51eb98589ad27944394dd8d4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct pull_t* init_pull </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fplog</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pull_params_t *&#160;</td>
          <td class="paramname"><em>pull_params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_inputrec *&#160;</td>
          <td class="paramname"><em>ir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nfile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structt__filenm.xhtml">t_filenm</a>&#160;</td>
          <td class="paramname"><em>fnm</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_mtop_t *&#160;</td>
          <td class="paramname"><em>mtop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_output_env_t *&#160;</td>
          <td class="paramname"><em>oenv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>lambda</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bOutFile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ContinuationOptions &amp;&#160;</td>
          <td class="paramname"><em>continuationOptions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocate, initialize and return a pull work struct. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fplog</td><td>General output file, normally md.log. </td></tr>
    <tr><td class="paramname">pull_params</td><td>The pull input parameters containing all pull settings. </td></tr>
    <tr><td class="paramname">ir</td><td>The inputrec. </td></tr>
    <tr><td class="paramname">nfile</td><td>Number of files. </td></tr>
    <tr><td class="paramname">fnm</td><td>Standard filename struct. </td></tr>
    <tr><td class="paramname">mtop</td><td>The topology of the whole system. </td></tr>
    <tr><td class="paramname">cr</td><td>Struct for communication info. </td></tr>
    <tr><td class="paramname">oenv</td><td>Output options. </td></tr>
    <tr><td class="paramname">lambda</td><td>FEP lambda. </td></tr>
    <tr><td class="paramname">bOutFile</td><td>Open output files? </td></tr>
    <tr><td class="paramname">continuationOptions</td><td>Options for continuing from checkpoint file </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af97d4786cc5f164d05c8d0a75dc7bf44"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> max_pull_distance2 </td>
          <td>(</td>
          <td class="paramtype">const pull_coord_work_t *&#160;</td>
          <td class="paramname"><em>pcrd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structt__pbc.xhtml">t_pbc</a> *&#160;</td>
          <td class="paramname"><em>pbc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the maxing distance for pulling. </p>
<p>For distance geometries, only dimensions with pcrd-&gt;params[dim]=1 are included in the distance calculation. For directional geometries, only dimensions with pcrd-&gt;vec[dim]!=0 are included in the distance calculation.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pcrd</td><td>Pulling data structure </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pbc</td><td>Information on periodic boundary conditions </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The maximume distance </dd></dl>

</div>
</div>
<a class="anchor" id="ac0858cf06c8c6fb9d10c2dedf0111bce"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pull_calc_coms </td>
          <td>(</td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct pull_t *&#160;</td>
          <td class="paramname"><em>pull</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *&#160;</td>
          <td class="paramname"><em>md</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structt__pbc.xhtml">t_pbc</a> *&#160;</td>
          <td class="paramname"><em>pbc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>t</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>x</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec *&#160;</td>
          <td class="paramname"><em>xp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates centers of mass all pull groups. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">cr</td><td>Struct for communication info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pull</td><td>The pull data structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">md</td><td>All atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pbc</td><td>Information struct about periodicity. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">t</td><td>Time, only used for cylinder ref. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>The local positions. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">xp</td><td>Updated x, can be NULL. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9b1dad06723dff60a45d5774815c8e63"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pull_constraint </td>
          <td>(</td>
          <td class="paramtype">struct pull_t *&#160;</td>
          <td class="paramname"><em>pull</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *&#160;</td>
          <td class="paramname"><em>md</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structt__pbc.xhtml">t_pbc</a> *&#160;</td>
          <td class="paramname"><em>pbc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>dt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>t</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec *&#160;</td>
          <td class="paramname"><em>xp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec *&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">tensor&#160;</td>
          <td class="paramname"><em>vir</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constrain the coordinates xp in the directions in x and also constrain v when v != NULL. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pull</td><td>The pull data. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">md</td><td>All atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pbc</td><td>Information struct about periodicity. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cr</td><td>Struct for communication info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>The time step length. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">t</td><td>The time. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Positions. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">xp</td><td>Updated x, can be NULL. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">v</td><td>Velocities, which may get a pull correction. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">vir</td><td>The virial, which, if != NULL, gets a pull correction. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a23b5c3acf1da25883f0fa8b216d0c63e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double pull_conversion_factor_internal2userinput </td>
          <td>(</td>
          <td class="paramtype">const t_pull_coord *&#160;</td>
          <td class="paramname"><em>pcrd</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the conversion factor from the pull coord internal value unit to the init/rate unit. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pcrd</td><td>The pull coordinate to get the conversion factor for. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the conversion factor. </dd></dl>

</div>
</div>
<a class="anchor" id="a325eb8522d1fed29fca6659ce2359835"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double pull_conversion_factor_userinput2internal </td>
          <td>(</td>
          <td class="paramtype">const t_pull_coord *&#160;</td>
          <td class="paramname"><em>pcrd</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the conversion factor from the pull coord init/rate unit to internal value unit. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pcrd</td><td>The pull coordinate to get the conversion factor for. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the conversion factor. </dd></dl>

</div>
</div>
<a class="anchor" id="a81eaa5fa98a457caf1063c9d47a01894"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pull_coordinate_is_angletype </td>
          <td>(</td>
          <td class="paramtype">const t_pull_coord *&#160;</td>
          <td class="paramname"><em>pcrd</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns if the pull coordinate is an angle. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pcrd</td><td>The pull coordinate to query the type for. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a boolean telling if the coordinate is of angle type. </dd></dl>

</div>
</div>
<a class="anchor" id="a6fa4ceb3c6e0e9d914ad71b37a658736"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* pull_coordinate_units </td>
          <td>(</td>
          <td class="paramtype">const t_pull_coord *&#160;</td>
          <td class="paramname"><em>pcrd</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the units of the pull coordinate. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pcrd</td><td>The pull coordinate to query the units for. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a string with the units of the coordinate. </dd></dl>

</div>
</div>
<a class="anchor" id="aae2e9a5b5af8eeeacb6333d1f301c421"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> pull_have_constraint </td>
          <td>(</td>
          <td class="paramtype">const struct pull_t *&#160;</td>
          <td class="paramname"><em>pull</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns if we have pull coordinates with constraint pulling. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pull</td><td>The pull data structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="abc627897a8189d68747111b971b417b2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> pull_have_potential </td>
          <td>(</td>
          <td class="paramtype">const struct pull_t *&#160;</td>
          <td class="paramname"><em>pull</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns if we have pull coordinates with potential pulling. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pull</td><td>The pull data structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0b55e2848d41bbc16426142c0593d1f7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> pull_potential </td>
          <td>(</td>
          <td class="paramtype">struct pull_t *&#160;</td>
          <td class="paramname"><em>pull</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *&#160;</td>
          <td class="paramname"><em>md</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structt__pbc.xhtml">t_pbc</a> *&#160;</td>
          <td class="paramname"><em>pbc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>t</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>lambda</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ForceWithVirial.xhtml">gmx::ForceWithVirial</a> *&#160;</td>
          <td class="paramname"><em>force</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>dvdlambda</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine the COM pull forces and add them to f, return the potential. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pull</td><td>The pull struct. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">md</td><td>All atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pbc</td><td>Information struct about periodicity. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cr</td><td>Struct for communication info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">t</td><td>Time. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lambda</td><td>The value of lambda in FEP calculations. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Positions. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">force</td><td>Forces and virial. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dvdlambda</td><td>Pull contribution to dV/d(lambda).</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The pull potential energy. </dd></dl>

</div>
</div>
<a class="anchor" id="a2a2e05b09b4d34fb43b79e5ee4e961fc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pull_print_output </td>
          <td>(</td>
          <td class="paramtype">struct pull_t *&#160;</td>
          <td class="paramname"><em>pull</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_int64_t&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>time</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Print the pull output (x and/or f) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pull</td><td>The pull data structure. </td></tr>
    <tr><td class="paramname">step</td><td>Time step number. </td></tr>
    <tr><td class="paramname">time</td><td>Time. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a583ab75cc18678c2b7d4478040975587"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pullCheckPbcWithinGroups </td>
          <td>(</td>
          <td class="paramtype">const pull_t &amp;&#160;</td>
          <td class="paramname"><em>pull</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const rvec *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structt__pbc.xhtml">t_pbc</a> &amp;&#160;</td>
          <td class="paramname"><em>pbc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks whether all groups that use a reference atom are within PBC restrictions. </p>
<p>Groups that use a reference atom for determining PBC should have all their atoms within half the box size from the PBC atom. The box size is used per dimension for rectangular boxes, but can be a combination of dimensions for triclinic boxes, depending on which dimensions are involved in the pull coordinates a group is involved in.</p>
<p>Should be called without MPI parallelization and after <a class="el" href="pull_8h.xhtml#ac0858cf06c8c6fb9d10c2dedf0111bce" title="Calculates centers of mass all pull groups. ">pull_calc_coms()</a> has been called at least once.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pull</td><td>The pull data structure </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>The coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pbc</td><td>Information struct about periodicity </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>-1 when all groups obey PBC or the first group index that fails PBC </dd></dl>

</div>
</div>
<a class="anchor" id="a86dbe05b3e003570d0fa27706bebe5df"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void register_external_pull_potential </td>
          <td>(</td>
          <td class="paramtype">struct pull_t *&#160;</td>
          <td class="paramname"><em>pull</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>coord_index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>provider</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Registers the provider of an external potential for a coordinate. </p>
<p>This function is only used for checking the consistency of the pull setup. For each pull coordinate of type external-potential, selected by the user in the mdp file, there has to be a module that provides this potential. The module registers itself as the provider by calling this function. The passed <code>provider</code> string has to match the string that the user passed with the potential-provider pull coordinate mdp option. This function should be called after init_pull has been called and before pull_potential is called for the first time. This function does many consistency checks and when it returns and the first call to do_potential passes, the pull setup is guaranteed to be correct (unless the module doesn't call apply_external_pull_coord_force every step or calls it with incorrect forces). This registering function will exit with a (release) assertion failure when used incorrely or with a fatal error when the user (mdp) input in inconsistent.</p>
<p>Thread-safe for simultaneous registration from multiple threads.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pull</td><td>The pull struct. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">coord_index</td><td>The pull coordinate index to register the external potential for. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">provider</td><td>Provider string, should match the potential-provider pull coordinate mdp option. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:56:07 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
