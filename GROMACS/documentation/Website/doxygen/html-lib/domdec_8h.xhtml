<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/domdec/domdec.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_8a21c46af9718d1f610eb513153099d7.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a46192700e9e8ed44c648f0a55ee9a53.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_6598fadafaab67e0226add65c1e27d8d.xhtml">domdec</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">domdec.h File Reference<div class="ingroups"><a class="el" href="group__group__libraryapi.xhtml">Library API</a> &#124; <a class="el" href="group__module__domdec.xhtml">Spatial domain decomposition (for parallelization over MPI)</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;stdio.h&gt;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &quot;gromacs/gmxlib/nrnb.h&quot;</code><br/>
<code>#include &quot;gromacs/math/vectypes.h&quot;</code><br/>
<code>#include &quot;gromacs/mdlib/vsite.h&quot;</code><br/>
<code>#include &quot;gromacs/mdtypes/forcerec.h&quot;</code><br/>
<code>#include &quot;gromacs/mdtypes/mdatom.h&quot;</code><br/>
<code>#include &quot;gromacs/timing/wallcycle.h&quot;</code><br/>
<code>#include &quot;gromacs/topology/block.h&quot;</code><br/>
<code>#include &quot;gromacs/topology/idef.h&quot;</code><br/>
<code>#include &quot;gromacs/topology/topology.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="arrayref_8h.xhtml">gromacs/utility/arrayref.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="basedefinitions_8h.xhtml">gromacs/utility/basedefinitions.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="real_8h.xhtml">gromacs/utility/real.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for domdec.h:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="domdec_8h__incl.svg" width="930" height="366"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><div class="textblock"><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> This graph shows which files directly or indirectly include this file:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="domdec_8h__dep__incl.svg" width="155" height="142"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>This file declares functions for mdrun to call to manage the details of its domain decomposition. </p>
<dl class="section author"><dt>Author</dt><dd>Berk Hess <a href="#" onclick="location.href='mai'+'lto:'+'hes'+'s@'+'kth'+'.s'+'e'; return false;">hess@<span style="display: none;">.nosp@m.</span>kth.<span style="display: none;">.nosp@m.</span>se</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structDomdecOptions.xhtml">DomdecOptions</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Structure containing all (command line) options for the domain decomposition.  <a href="structDomdecOptions.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:afbaeb09824aab3269073f92000ab0df5"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#afbaeb09824aab3269073f92000ab0df5">DdRankOrder</a> { <br/>
&#160;&#160;<a class="el" href="domdec_8h.xhtml#afbaeb09824aab3269073f92000ab0df5a99938282f04071859941e18f16efcf42">DdRankOrder::select</a>, 
<a class="el" href="domdec_8h.xhtml#afbaeb09824aab3269073f92000ab0df5a1923b917a5138b89a7add100c381dea6">DdRankOrder::interleave</a>, 
<a class="el" href="domdec_8h.xhtml#afbaeb09824aab3269073f92000ab0df5ab78362913a3cd117b6a63997bbfb4883">DdRankOrder::pp_pme</a>, 
<a class="el" href="domdec_8h.xhtml#afbaeb09824aab3269073f92000ab0df5a7949e6c02de2124dcdddd71b5430b8f0">DdRankOrder::cartesian</a>, 
<br/>
&#160;&#160;<a class="el" href="domdec_8h.xhtml#afbaeb09824aab3269073f92000ab0df5a0ab3e5d0801aea3f3758bcbd812e8f10">DdRankOrder::nr</a>
<br/>
 }</td></tr>
<tr class="memdesc:afbaeb09824aab3269073f92000ab0df5"><td class="mdescLeft">&#160;</td><td class="mdescRight">The options for the domain decomposition MPI task ordering.  <a href="domdec_8h.xhtml#afbaeb09824aab3269073f92000ab0df5">More...</a><br/></td></tr>
<tr class="separator:afbaeb09824aab3269073f92000ab0df5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ba6c2019a69499f8c09967c9cc7dd0f"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a1ba6c2019a69499f8c09967c9cc7dd0f">DlbOption</a> { <br/>
&#160;&#160;<a class="el" href="domdec_8h.xhtml#a1ba6c2019a69499f8c09967c9cc7dd0fa99938282f04071859941e18f16efcf42">DlbOption::select</a>, 
<a class="el" href="domdec_8h.xhtml#a1ba6c2019a69499f8c09967c9cc7dd0fa9782b4e1f49c1f0f6b05de02eeafe863">DlbOption::turnOnWhenUseful</a>, 
<a class="el" href="domdec_8h.xhtml#a1ba6c2019a69499f8c09967c9cc7dd0fa7fa3b767c460b54a2be4d49030b349c7">DlbOption::no</a>, 
<a class="el" href="domdec_8h.xhtml#a1ba6c2019a69499f8c09967c9cc7dd0faa6105c0a611b41b08f1209506350279e">DlbOption::yes</a>, 
<br/>
&#160;&#160;<a class="el" href="domdec_8h.xhtml#a1ba6c2019a69499f8c09967c9cc7dd0fa0ab3e5d0801aea3f3758bcbd812e8f10">DlbOption::nr</a>
<br/>
 }</td></tr>
<tr class="memdesc:a1ba6c2019a69499f8c09967c9cc7dd0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">The options for the dynamic load balancing.  <a href="domdec_8h.xhtml#a1ba6c2019a69499f8c09967c9cc7dd0f">More...</a><br/></td></tr>
<tr class="separator:a1ba6c2019a69499f8c09967c9cc7dd0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61dadd085c1777f559549e05962b2c9e"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <br/>
&#160;&#160;<b>ddCyclStep</b>, 
<b>ddCyclPPduringPME</b>, 
<b>ddCyclF</b>, 
<b>ddCyclWaitGPU</b>, 
<br/>
&#160;&#160;<b>ddCyclPME</b>, 
<b>ddCyclNr</b>
<br/>
 }</td></tr>
<tr class="memdesc:a61dadd085c1777f559549e05962b2c9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cycle counter indices used internally in the domain decomposition. <br/></td></tr>
<tr class="separator:a61dadd085c1777f559549e05962b2c9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a70ac1da1701259851d5c21c733196097"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a70ac1da1701259851d5c21c733196097">ddglatnr</a> (const gmx_domdec_t *dd, int i)</td></tr>
<tr class="memdesc:a70ac1da1701259851d5c21c733196097"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the global topology atom number belonging to local atom index i.  <a href="#a70ac1da1701259851d5c21c733196097">More...</a><br/></td></tr>
<tr class="separator:a70ac1da1701259851d5c21c733196097"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a036167ff277d202e98c6686fa565667a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a036167ff277d202e98c6686fa565667a"></a>
t_block *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a036167ff277d202e98c6686fa565667a">dd_charge_groups_global</a> (struct gmx_domdec_t *dd)</td></tr>
<tr class="memdesc:a036167ff277d202e98c6686fa565667a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a block struct for the charge groups of the whole system. <br/></td></tr>
<tr class="separator:a036167ff277d202e98c6686fa565667a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71c08796224e9ed7b147682fb4f017f8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a71c08796224e9ed7b147682fb4f017f8">dd_store_state</a> (struct gmx_domdec_t *dd, <a class="el" href="classt__state.xhtml">t_state</a> *state)</td></tr>
<tr class="memdesc:a71c08796224e9ed7b147682fb4f017f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store the global cg indices of the home cgs in state,.  <a href="#a71c08796224e9ed7b147682fb4f017f8">More...</a><br/></td></tr>
<tr class="separator:a71c08796224e9ed7b147682fb4f017f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9234a08b74a50e8ffb411540ba5fbc1c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9234a08b74a50e8ffb411540ba5fbc1c"></a>
struct gmx_domdec_zones_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a9234a08b74a50e8ffb411540ba5fbc1c">domdec_zones</a> (struct gmx_domdec_t *dd)</td></tr>
<tr class="memdesc:a9234a08b74a50e8ffb411540ba5fbc1c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the gmx_domdec_zones_t struct. <br/></td></tr>
<tr class="separator:a9234a08b74a50e8ffb411540ba5fbc1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae20e725bcaa3d69b3538f7988dbd9a72"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae20e725bcaa3d69b3538f7988dbd9a72"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#ae20e725bcaa3d69b3538f7988dbd9a72">dd_get_ns_ranges</a> (const gmx_domdec_t *dd, int icg, int *jcg0, int *jcg1, ivec shift0, ivec shift1)</td></tr>
<tr class="memdesc:ae20e725bcaa3d69b3538f7988dbd9a72"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the j-charge-group range for i-charge-group <code>icg</code>. <br/></td></tr>
<tr class="separator:ae20e725bcaa3d69b3538f7988dbd9a72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6beb7eda6e92879e50609d0b2ca45ac5"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6beb7eda6e92879e50609d0b2ca45ac5"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a6beb7eda6e92879e50609d0b2ca45ac5">dd_natoms_mdatoms</a> (const gmx_domdec_t *dd)</td></tr>
<tr class="memdesc:a6beb7eda6e92879e50609d0b2ca45ac5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the atom range in the local state for atoms that need to be present in mdatoms. <br/></td></tr>
<tr class="separator:a6beb7eda6e92879e50609d0b2ca45ac5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accfe1e787fb06f058e4e532d0bf30205"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="accfe1e787fb06f058e4e532d0bf30205"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#accfe1e787fb06f058e4e532d0bf30205">dd_natoms_vsite</a> (const gmx_domdec_t *dd)</td></tr>
<tr class="memdesc:accfe1e787fb06f058e4e532d0bf30205"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the atom range in the local state for atoms involved in virtual sites. <br/></td></tr>
<tr class="separator:accfe1e787fb06f058e4e532d0bf30205"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac68d614c7b4f5851920fe13d6345bf22"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac68d614c7b4f5851920fe13d6345bf22"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#ac68d614c7b4f5851920fe13d6345bf22">dd_get_constraint_range</a> (const gmx_domdec_t *dd, int *at_start, int *at_end)</td></tr>
<tr class="memdesc:ac68d614c7b4f5851920fe13d6345bf22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the atom range for atom in the local state for atoms received in constraints communication. <br/></td></tr>
<tr class="separator:ac68d614c7b4f5851920fe13d6345bf22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9002b2633f6733be0c7035ab70b9da9b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9002b2633f6733be0c7035ab70b9da9b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a9002b2633f6733be0c7035ab70b9da9b">get_pme_nnodes</a> (const struct gmx_domdec_t *dd, int *npmenodes_x, int *npmenodes_y)</td></tr>
<tr class="memdesc:a9002b2633f6733be0c7035ab70b9da9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of PME nodes along x and y, can be called with dd=NULL. <br/></td></tr>
<tr class="separator:a9002b2633f6733be0c7035ab70b9da9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a588a00fc666c943f4301b4b29a1d707f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a588a00fc666c943f4301b4b29a1d707f"></a>
std::vector&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a588a00fc666c943f4301b4b29a1d707f">get_pme_ddranks</a> (t_commrec *cr, int pmenodeid)</td></tr>
<tr class="memdesc:a588a00fc666c943f4301b4b29a1d707f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the set of DD ranks that communicate with pme node cr-&gt;nodeid. <br/></td></tr>
<tr class="separator:a588a00fc666c943f4301b4b29a1d707f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39ef4241738874c1bb53b54c48dea05b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a39ef4241738874c1bb53b54c48dea05b"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a39ef4241738874c1bb53b54c48dea05b">dd_pme_maxshift_x</a> (const gmx_domdec_t *dd)</td></tr>
<tr class="memdesc:a39ef4241738874c1bb53b54c48dea05b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the maximum shift for coordinate communication in PME, dim x. <br/></td></tr>
<tr class="separator:a39ef4241738874c1bb53b54c48dea05b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79d702710f2c6e41c255aaae97d85fd8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a79d702710f2c6e41c255aaae97d85fd8"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a79d702710f2c6e41c255aaae97d85fd8">dd_pme_maxshift_y</a> (const gmx_domdec_t *dd)</td></tr>
<tr class="memdesc:a79d702710f2c6e41c255aaae97d85fd8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the maximum shift for coordinate communication in PME, dim y. <br/></td></tr>
<tr class="separator:a79d702710f2c6e41c255aaae97d85fd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09eeb460cc15cf01d1239f5e7f8d94aa"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a09eeb460cc15cf01d1239f5e7f8d94aa"></a>
gmx_domdec_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a09eeb460cc15cf01d1239f5e7f8d94aa">init_domain_decomposition</a> (FILE *fplog, t_commrec *cr, const <a class="el" href="structDomdecOptions.xhtml">DomdecOptions</a> &amp;options, const MdrunOptions &amp;mdrunOptions, const gmx_mtop_t *mtop, const t_inputrec *ir, const matrix box, const rvec *xGlobal, gmx_ddbox_t *ddbox, int *npme_x, int *npme_y)</td></tr>
<tr class="memdesc:a09eeb460cc15cf01d1239f5e7f8d94aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialized the domain decomposition, chooses the DD grid and PME ranks, return the DD struct. <br/></td></tr>
<tr class="separator:a09eeb460cc15cf01d1239f5e7f8d94aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a438260ec4ff9c4edaab6a674d8fd2076"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a438260ec4ff9c4edaab6a674d8fd2076"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a438260ec4ff9c4edaab6a674d8fd2076">dd_init_bondeds</a> (FILE *fplog, gmx_domdec_t *dd, const gmx_mtop_t *mtop, const gmx_vsite_t *vsite, const t_inputrec *ir, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bBCheck, cginfo_mb_t *cginfo_mb)</td></tr>
<tr class="memdesc:a438260ec4ff9c4edaab6a674d8fd2076"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize data structures for bonded interactions. <br/></td></tr>
<tr class="separator:a438260ec4ff9c4edaab6a674d8fd2076"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e465d30f4c3728b212cd23638002bb7"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3e465d30f4c3728b212cd23638002bb7"></a>
<a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a3e465d30f4c3728b212cd23638002bb7">dd_bonded_molpbc</a> (const gmx_domdec_t *dd, int ePBC)</td></tr>
<tr class="memdesc:a3e465d30f4c3728b212cd23638002bb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns if we need to do pbc for calculating bonded interactions. <br/></td></tr>
<tr class="separator:a3e465d30f4c3728b212cd23638002bb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39b9064778f7b7136fcdfae4a83088f0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a39b9064778f7b7136fcdfae4a83088f0">change_dd_cutoff</a> (struct t_commrec *cr, <a class="el" href="classt__state.xhtml">t_state</a> *state, const t_inputrec *ir, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> cutoff_req)</td></tr>
<tr class="memdesc:a39b9064778f7b7136fcdfae4a83088f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the DD non-bonded communication cut-off.  <a href="#a39b9064778f7b7136fcdfae4a83088f0">More...</a><br/></td></tr>
<tr class="separator:a39b9064778f7b7136fcdfae4a83088f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a157bf71cdab9ea140756a04b124db881"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a157bf71cdab9ea140756a04b124db881">set_dd_dlb_max_cutoff</a> (struct t_commrec *cr, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> cutoff)</td></tr>
<tr class="memdesc:a157bf71cdab9ea140756a04b124db881"><td class="mdescLeft">&#160;</td><td class="mdescRight">Limit DLB to preserve the option of returning to the current cut-off.  <a href="#a157bf71cdab9ea140756a04b124db881">More...</a><br/></td></tr>
<tr class="separator:a157bf71cdab9ea140756a04b124db881"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a461178fa2c87fb4c294ebbb341a75089"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a461178fa2c87fb4c294ebbb341a75089"></a>
<a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a461178fa2c87fb4c294ebbb341a75089">dd_dlb_is_on</a> (const struct gmx_domdec_t *dd)</td></tr>
<tr class="memdesc:a461178fa2c87fb4c294ebbb341a75089"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return if we are currently using dynamic load balancing. <br/></td></tr>
<tr class="separator:a461178fa2c87fb4c294ebbb341a75089"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad74a1d923b2ab447ba63d8f9f95001b9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad74a1d923b2ab447ba63d8f9f95001b9"></a>
<a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#ad74a1d923b2ab447ba63d8f9f95001b9">dd_dlb_is_locked</a> (const struct gmx_domdec_t *dd)</td></tr>
<tr class="memdesc:ad74a1d923b2ab447ba63d8f9f95001b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return if the DLB lock is set. <br/></td></tr>
<tr class="separator:ad74a1d923b2ab447ba63d8f9f95001b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace557070a75d6e41050d67978e8d34e6"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ace557070a75d6e41050d67978e8d34e6"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#ace557070a75d6e41050d67978e8d34e6">dd_dlb_lock</a> (struct gmx_domdec_t *dd)</td></tr>
<tr class="memdesc:ace557070a75d6e41050d67978e8d34e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set a lock such that with DLB=auto DLB cannot get turned on. <br/></td></tr>
<tr class="separator:ace557070a75d6e41050d67978e8d34e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab40142ccd9301de26265db1f0d3c2f63"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab40142ccd9301de26265db1f0d3c2f63"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#ab40142ccd9301de26265db1f0d3c2f63">dd_dlb_unlock</a> (struct gmx_domdec_t *dd)</td></tr>
<tr class="memdesc:ab40142ccd9301de26265db1f0d3c2f63"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear a lock such that with DLB=auto DLB may get turned on later. <br/></td></tr>
<tr class="separator:ab40142ccd9301de26265db1f0d3c2f63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a581f646d5c463fe4735d37cbeaf70a47"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a581f646d5c463fe4735d37cbeaf70a47">dd_setup_dlb_resource_sharing</a> (t_commrec *cr, int gpu_id)</td></tr>
<tr class="memdesc:a581f646d5c463fe4735d37cbeaf70a47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set up communication for averaging GPU wait times over domains.  <a href="#a581f646d5c463fe4735d37cbeaf70a47">More...</a><br/></td></tr>
<tr class="separator:a581f646d5c463fe4735d37cbeaf70a47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae17711fbb0f58bad064b96dd57a7f02"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aae17711fbb0f58bad064b96dd57a7f02"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#aae17711fbb0f58bad064b96dd57a7f02">dd_collect_vec</a> (struct gmx_domdec_t *dd, const <a class="el" href="classt__state.xhtml">t_state</a> *state_local, <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">gmx::RVec</a> &gt; lv, <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">gmx::RVec</a> &gt; v)</td></tr>
<tr class="memdesc:aae17711fbb0f58bad064b96dd57a7f02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collects local rvec arrays <code>lv</code> to <code>v</code> on the master rank. <br/></td></tr>
<tr class="separator:aae17711fbb0f58bad064b96dd57a7f02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa43db5c3cf7b79793c0cee54ca75ec74"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa43db5c3cf7b79793c0cee54ca75ec74"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#aa43db5c3cf7b79793c0cee54ca75ec74">dd_collect_state</a> (struct gmx_domdec_t *dd, const <a class="el" href="classt__state.xhtml">t_state</a> *state_local, <a class="el" href="classt__state.xhtml">t_state</a> *state)</td></tr>
<tr class="memdesc:aa43db5c3cf7b79793c0cee54ca75ec74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collects the local state <code>state_local</code> to <code>state</code> on the master rank. <br/></td></tr>
<tr class="separator:aa43db5c3cf7b79793c0cee54ca75ec74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7dfae0580a90d2e4225efb827267814f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7dfae0580a90d2e4225efb827267814f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a7dfae0580a90d2e4225efb827267814f">dd_cycles_add</a> (const gmx_domdec_t *dd, float cycles, int ddCycl)</td></tr>
<tr class="memdesc:a7dfae0580a90d2e4225efb827267814f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the wallcycle count to the DD counter. <br/></td></tr>
<tr class="separator:a7dfae0580a90d2e4225efb827267814f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45bc9612c061171dc38fd56dc449a9b4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a45bc9612c061171dc38fd56dc449a9b4"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a45bc9612c061171dc38fd56dc449a9b4">dd_force_flop_start</a> (struct gmx_domdec_t *dd, t_nrnb *nrnb)</td></tr>
<tr class="memdesc:a45bc9612c061171dc38fd56dc449a9b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start the force flop count. <br/></td></tr>
<tr class="separator:a45bc9612c061171dc38fd56dc449a9b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d8da377f2301387c62eeaecfb8f6b21"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9d8da377f2301387c62eeaecfb8f6b21"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a9d8da377f2301387c62eeaecfb8f6b21">dd_force_flop_stop</a> (struct gmx_domdec_t *dd, t_nrnb *nrnb)</td></tr>
<tr class="memdesc:a9d8da377f2301387c62eeaecfb8f6b21"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stop the force flop count. <br/></td></tr>
<tr class="separator:a9d8da377f2301387c62eeaecfb8f6b21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51aa87146f02e412e251c8390d2c91aa"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a51aa87146f02e412e251c8390d2c91aa">dd_pme_f_ratio</a> (struct gmx_domdec_t *dd)</td></tr>
<tr class="memdesc:a51aa87146f02e412e251c8390d2c91aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the PME/PP force load ratio, or -1 if nothing was measured.  <a href="#a51aa87146f02e412e251c8390d2c91aa">More...</a><br/></td></tr>
<tr class="separator:a51aa87146f02e412e251c8390d2c91aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0264c22f080fcf6906322e9cec0a1e20"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0264c22f080fcf6906322e9cec0a1e20"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a0264c22f080fcf6906322e9cec0a1e20">dd_move_x</a> (struct gmx_domdec_t *dd, matrix box, rvec x[])</td></tr>
<tr class="memdesc:a0264c22f080fcf6906322e9cec0a1e20"><td class="mdescLeft">&#160;</td><td class="mdescRight">Communicate the coordinates to the neighboring cells and do pbc. <br/></td></tr>
<tr class="separator:a0264c22f080fcf6906322e9cec0a1e20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addf6dbec1520bc43b463769f7b16ae5a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#addf6dbec1520bc43b463769f7b16ae5a">dd_move_f</a> (struct gmx_domdec_t *dd, rvec f[], rvec *fshift)</td></tr>
<tr class="memdesc:addf6dbec1520bc43b463769f7b16ae5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sum the forces over the neighboring cells.  <a href="#addf6dbec1520bc43b463769f7b16ae5a">More...</a><br/></td></tr>
<tr class="separator:addf6dbec1520bc43b463769f7b16ae5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35a5043af51d3e08354f56bdf4b13c59"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a35a5043af51d3e08354f56bdf4b13c59"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a35a5043af51d3e08354f56bdf4b13c59">dd_atom_spread_real</a> (struct gmx_domdec_t *dd, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> v[])</td></tr>
<tr class="memdesc:a35a5043af51d3e08354f56bdf4b13c59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Communicate a real for each atom to the neighboring cells. <br/></td></tr>
<tr class="separator:a35a5043af51d3e08354f56bdf4b13c59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af97684ce710c54c6a6047a71ff2e376e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af97684ce710c54c6a6047a71ff2e376e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#af97684ce710c54c6a6047a71ff2e376e">dd_atom_sum_real</a> (struct gmx_domdec_t *dd, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> v[])</td></tr>
<tr class="memdesc:af97684ce710c54c6a6047a71ff2e376e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sum the contributions to a real for each atom over the neighboring cells. <br/></td></tr>
<tr class="separator:af97684ce710c54c6a6047a71ff2e376e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a101ba6a12f31662c770c1a8f0b12069f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a101ba6a12f31662c770c1a8f0b12069f">dd_partition_system</a> (FILE *fplog, gmx_int64_t step, t_commrec *cr, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bMasterState, int nstglobalcomm, <a class="el" href="classt__state.xhtml">t_state</a> *state_global, const gmx_mtop_t *top_global, const t_inputrec *ir, <a class="el" href="classt__state.xhtml">t_state</a> *state_local, PaddedRVecVector *f, <a class="el" href="classgmx_1_1MDAtoms.xhtml">gmx::MDAtoms</a> *mdatoms, gmx_localtop_t *top_local, t_forcerec *fr, gmx_vsite_t *vsite, struct gmx_constr *constr, t_nrnb *nrnb, gmx_wallcycle_t wcycle, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bVerbose)</td></tr>
<tr class="memdesc:a101ba6a12f31662c770c1a8f0b12069f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Partition the system over the nodes.  <a href="#a101ba6a12f31662c770c1a8f0b12069f">More...</a><br/></td></tr>
<tr class="separator:a101ba6a12f31662c770c1a8f0b12069f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acad96b67c454abcc6a288f405e6fcbc8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="acad96b67c454abcc6a288f405e6fcbc8"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#acad96b67c454abcc6a288f405e6fcbc8">reset_dd_statistics_counters</a> (struct gmx_domdec_t *dd)</td></tr>
<tr class="memdesc:acad96b67c454abcc6a288f405e6fcbc8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset all the statistics and counters for total run counting. <br/></td></tr>
<tr class="separator:acad96b67c454abcc6a288f405e6fcbc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa72940891233c59fdf2358c46bf6b0fa"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa72940891233c59fdf2358c46bf6b0fa"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#aa72940891233c59fdf2358c46bf6b0fa">print_dd_statistics</a> (struct t_commrec *cr, const t_inputrec *ir, FILE *fplog)</td></tr>
<tr class="memdesc:aa72940891233c59fdf2358c46bf6b0fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print statistics for domain decomposition communication. <br/></td></tr>
<tr class="separator:aa72940891233c59fdf2358c46bf6b0fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf5e5f2e0cb197a18322f7f1fbbbc9b1"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="adf5e5f2e0cb197a18322f7f1fbbbc9b1"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#adf5e5f2e0cb197a18322f7f1fbbbc9b1">dd_move_f_vsites</a> (struct gmx_domdec_t *dd, rvec *f, rvec *fshift)</td></tr>
<tr class="memdesc:adf5e5f2e0cb197a18322f7f1fbbbc9b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Communicates the virtual site forces, reduces the shift forces when <code>fshift</code> != NULL. <br/></td></tr>
<tr class="separator:adf5e5f2e0cb197a18322f7f1fbbbc9b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8648b405d9a61a2cc1052827338f3776"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8648b405d9a61a2cc1052827338f3776"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a8648b405d9a61a2cc1052827338f3776">dd_clear_f_vsites</a> (struct gmx_domdec_t *dd, rvec *f)</td></tr>
<tr class="memdesc:a8648b405d9a61a2cc1052827338f3776"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears the forces for virtual sites. <br/></td></tr>
<tr class="separator:a8648b405d9a61a2cc1052827338f3776"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a172b3b6d4322297bff2a70318dca6022"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a172b3b6d4322297bff2a70318dca6022"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a172b3b6d4322297bff2a70318dca6022">dd_move_x_constraints</a> (struct gmx_domdec_t *dd, matrix box, rvec *x0, rvec *x1, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bX1IsCoord)</td></tr>
<tr class="memdesc:a172b3b6d4322297bff2a70318dca6022"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move x0 and also x1 if x1!=NULL. bX1IsCoord tells if to do PBC on x1. <br/></td></tr>
<tr class="separator:a172b3b6d4322297bff2a70318dca6022"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afff4b8060492f672dd92fbc3a461bc61"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="afff4b8060492f672dd92fbc3a461bc61"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#afff4b8060492f672dd92fbc3a461bc61">dd_move_x_vsites</a> (struct gmx_domdec_t *dd, const matrix box, rvec *x)</td></tr>
<tr class="memdesc:afff4b8060492f672dd92fbc3a461bc61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Communicates the coordinates involved in virtual sites. <br/></td></tr>
<tr class="separator:afff4b8060492f672dd92fbc3a461bc61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4c9d737b2030e1124505e8c1026e085"><td class="memItemLeft" align="right" valign="top">int *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#ae4c9d737b2030e1124505e8c1026e085">dd_constraints_nlocalatoms</a> (struct gmx_domdec_t *dd)</td></tr>
<tr class="memdesc:ae4c9d737b2030e1124505e8c1026e085"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the local atom count array for all constraints.  <a href="#ae4c9d737b2030e1124505e8c1026e085">More...</a><br/></td></tr>
<tr class="separator:ae4c9d737b2030e1124505e8c1026e085"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5f5721ca4800b35b465a2c6dd501583"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab5f5721ca4800b35b465a2c6dd501583"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#ab5f5721ca4800b35b465a2c6dd501583">dd_print_missing_interactions</a> (FILE *fplog, struct t_commrec *cr, int local_count, const gmx_mtop_t *top_global, const gmx_localtop_t *top_local, <a class="el" href="classt__state.xhtml">t_state</a> *state_local)</td></tr>
<tr class="memdesc:ab5f5721ca4800b35b465a2c6dd501583"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print error output when interactions are missing. <br/></td></tr>
<tr class="separator:ab5f5721ca4800b35b465a2c6dd501583"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34d70fd6a194a58cf82283c5e1c69384"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a34d70fd6a194a58cf82283c5e1c69384"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a34d70fd6a194a58cf82283c5e1c69384">dd_make_reverse_top</a> (FILE *fplog, gmx_domdec_t *dd, const gmx_mtop_t *mtop, const gmx_vsite_t *vsite, const t_inputrec *ir, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bBCheck)</td></tr>
<tr class="memdesc:a34d70fd6a194a58cf82283c5e1c69384"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generate and store the reverse topology. <br/></td></tr>
<tr class="separator:a34d70fd6a194a58cf82283c5e1c69384"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ba112a77cee61dc32b8907da97ecd01"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3ba112a77cee61dc32b8907da97ecd01"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a3ba112a77cee61dc32b8907da97ecd01">dd_make_local_cgs</a> (struct gmx_domdec_t *dd, t_block *lcgs)</td></tr>
<tr class="memdesc:a3ba112a77cee61dc32b8907da97ecd01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store the local charge group index in <code>lcgs</code>. <br/></td></tr>
<tr class="separator:a3ba112a77cee61dc32b8907da97ecd01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a735dc18ed5d7942a7139a84ac512ab44"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a735dc18ed5d7942a7139a84ac512ab44"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a735dc18ed5d7942a7139a84ac512ab44">dd_make_local_top</a> (struct gmx_domdec_t *dd, struct gmx_domdec_zones_t *zones, int npbcdim, matrix box, rvec cellsize_min, ivec npulse, t_forcerec *fr, rvec *cgcm_or_x, gmx_vsite_t *vsite, const gmx_mtop_t *top, gmx_localtop_t *ltop)</td></tr>
<tr class="memdesc:a735dc18ed5d7942a7139a84ac512ab44"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generate the local topology and virtual site data. <br/></td></tr>
<tr class="separator:a735dc18ed5d7942a7139a84ac512ab44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac601074954c9b537d8d3fbc795622c53"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac601074954c9b537d8d3fbc795622c53"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#ac601074954c9b537d8d3fbc795622c53">dd_sort_local_top</a> (gmx_domdec_t *dd, const <a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *mdatoms, gmx_localtop_t *ltop)</td></tr>
<tr class="memdesc:ac601074954c9b537d8d3fbc795622c53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sort ltop-&gt;ilist when we are doing free energy. <br/></td></tr>
<tr class="separator:ac601074954c9b537d8d3fbc795622c53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44e5b7b1f4da1acda483c4544a87a319"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a44e5b7b1f4da1acda483c4544a87a319"></a>
gmx_localtop_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a44e5b7b1f4da1acda483c4544a87a319">dd_init_local_top</a> (const gmx_mtop_t *top_global)</td></tr>
<tr class="memdesc:a44e5b7b1f4da1acda483c4544a87a319"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct local topology. <br/></td></tr>
<tr class="separator:a44e5b7b1f4da1acda483c4544a87a319"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a0caf903107cf950a88471ff01054de"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4a0caf903107cf950a88471ff01054de"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a4a0caf903107cf950a88471ff01054de">dd_init_local_state</a> (struct gmx_domdec_t *dd, <a class="el" href="classt__state.xhtml">t_state</a> *state_global, <a class="el" href="classt__state.xhtml">t_state</a> *local_state)</td></tr>
<tr class="memdesc:a4a0caf903107cf950a88471ff01054de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct local state. <br/></td></tr>
<tr class="separator:a4a0caf903107cf950a88471ff01054de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5bee59b32b705f5903c7158429314f4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac5bee59b32b705f5903c7158429314f4"></a>
t_blocka *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#ac5bee59b32b705f5903c7158429314f4">make_charge_group_links</a> (const gmx_mtop_t *mtop, gmx_domdec_t *dd, cginfo_mb_t *cginfo_mb)</td></tr>
<tr class="memdesc:ac5bee59b32b705f5903c7158429314f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generate a list of links between charge groups that are linked by bonded interactions. <br/></td></tr>
<tr class="separator:ac5bee59b32b705f5903c7158429314f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a96b85ac2c37d9d6fe754efa551b36d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3a96b85ac2c37d9d6fe754efa551b36d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a3a96b85ac2c37d9d6fe754efa551b36d">dd_bonded_cg_distance</a> (FILE *fplog, const gmx_mtop_t *mtop, const t_inputrec *ir, const rvec *x, const matrix box, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bBCheck, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *r_2b, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *r_mb)</td></tr>
<tr class="memdesc:a3a96b85ac2c37d9d6fe754efa551b36d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the maximum distance involved in 2-body and multi-body bonded interactions. <br/></td></tr>
<tr class="separator:a3a96b85ac2c37d9d6fe754efa551b36d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0de4aa34eefbe8227ab862d07bd6f0fb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a0de4aa34eefbe8227ab862d07bd6f0fb">write_dd_pdb</a> (const char *fn, gmx_int64_t step, const char *title, const gmx_mtop_t *mtop, t_commrec *cr, int natoms, rvec x[], matrix box)</td></tr>
<tr class="memdesc:a0de4aa34eefbe8227ab862d07bd6f0fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dump a pdb file with the current DD home + communicated atoms.  <a href="#a0de4aa34eefbe8227ab862d07bd6f0fb">More...</a><br/></td></tr>
<tr class="separator:a0de4aa34eefbe8227ab862d07bd6f0fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9765dd6a98248ef7aedc8273dfefc52"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af9765dd6a98248ef7aedc8273dfefc52"></a>
<a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#af9765dd6a98248ef7aedc8273dfefc52">comm_box_frac</a> (const ivec dd_nc, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> cutoff, const gmx_ddbox_t *ddbox)</td></tr>
<tr class="memdesc:af9765dd6a98248ef7aedc8273dfefc52"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the volume fraction of the system that is communicated. <br/></td></tr>
<tr class="separator:af9765dd6a98248ef7aedc8273dfefc52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42ff2378b1d059ff107be5d1e6134573"><td class="memItemLeft" align="right" valign="top"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a42ff2378b1d059ff107be5d1e6134573">dd_choose_grid</a> (FILE *fplog, t_commrec *cr, gmx_domdec_t *dd, const t_inputrec *ir, const gmx_mtop_t *mtop, const matrix box, const gmx_ddbox_t *ddbox, int nPmeRanks, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bDynLoadBal, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> dlb_scale, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> cellsize_limit, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> cutoff_dd, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bInterCGBondeds)</td></tr>
<tr class="memdesc:a42ff2378b1d059ff107be5d1e6134573"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determines the optimal DD cell setup dd-&gt;nc and possibly npmenodes for the system.  <a href="#a42ff2378b1d059ff107be5d1e6134573">More...</a><br/></td></tr>
<tr class="separator:a42ff2378b1d059ff107be5d1e6134573"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa30fb311628bf733539d37092247736d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa30fb311628bf733539d37092247736d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#aa30fb311628bf733539d37092247736d">set_ddbox</a> (gmx_domdec_t *dd, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bMasterState, t_commrec *cr_sum, const t_inputrec *ir, const matrix box, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bCalcUnboundedSize, const t_block *cgs, const rvec *x, gmx_ddbox_t *ddbox)</td></tr>
<tr class="memdesc:aa30fb311628bf733539d37092247736d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the box and PBC data in <code>ddbox</code>. <br/></td></tr>
<tr class="separator:aa30fb311628bf733539d37092247736d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11c33f6fad7fff4af0e8d6394893a418"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a11c33f6fad7fff4af0e8d6394893a418"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="domdec_8h.xhtml#a11c33f6fad7fff4af0e8d6394893a418">set_ddbox_cr</a> (t_commrec *cr, const ivec *dd_nc, const t_inputrec *ir, const matrix box, const t_block *cgs, const rvec *x, gmx_ddbox_t *ddbox)</td></tr>
<tr class="memdesc:a11c33f6fad7fff4af0e8d6394893a418"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the box and PBC data in <code>ddbox</code>. <br/></td></tr>
<tr class="separator:a11c33f6fad7fff4af0e8d6394893a418"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a class="anchor" id="afbaeb09824aab3269073f92000ab0df5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="domdec_8h.xhtml#afbaeb09824aab3269073f92000ab0df5">DdRankOrder</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The options for the domain decomposition MPI task ordering. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="afbaeb09824aab3269073f92000ab0df5a99938282f04071859941e18f16efcf42"></a>select</em>&nbsp;</td><td class="fielddoc">
<p>First value (needed to cope with command-line parsing) </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="afbaeb09824aab3269073f92000ab0df5a1923b917a5138b89a7add100c381dea6"></a>interleave</em>&nbsp;</td><td class="fielddoc">
<p>Interleave the PP and PME ranks. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="afbaeb09824aab3269073f92000ab0df5ab78362913a3cd117b6a63997bbfb4883"></a>pp_pme</em>&nbsp;</td><td class="fielddoc">
<p>First all PP ranks, all PME rank at the end. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="afbaeb09824aab3269073f92000ab0df5a7949e6c02de2124dcdddd71b5430b8f0"></a>cartesian</em>&nbsp;</td><td class="fielddoc">
<p>Use Cartesian communicators for PP, PME and PP-PME. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="afbaeb09824aab3269073f92000ab0df5a0ab3e5d0801aea3f3758bcbd812e8f10"></a>nr</em>&nbsp;</td><td class="fielddoc">
<p>The number of options. </p>
</td></tr>
</table>

</div>
</div>
<a class="anchor" id="a1ba6c2019a69499f8c09967c9cc7dd0f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="domdec_8h.xhtml#a1ba6c2019a69499f8c09967c9cc7dd0f">DlbOption</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The options for the dynamic load balancing. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="a1ba6c2019a69499f8c09967c9cc7dd0fa99938282f04071859941e18f16efcf42"></a>select</em>&nbsp;</td><td class="fielddoc">
<p>First value (needed to cope with command-line parsing) </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a1ba6c2019a69499f8c09967c9cc7dd0fa9782b4e1f49c1f0f6b05de02eeafe863"></a>turnOnWhenUseful</em>&nbsp;</td><td class="fielddoc">
<p>Turn on DLB when we think it would improve performance. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a1ba6c2019a69499f8c09967c9cc7dd0fa7fa3b767c460b54a2be4d49030b349c7"></a>no</em>&nbsp;</td><td class="fielddoc">
<p>Never turn on DLB. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a1ba6c2019a69499f8c09967c9cc7dd0faa6105c0a611b41b08f1209506350279e"></a>yes</em>&nbsp;</td><td class="fielddoc">
<p>Turn on DLB from the start and keep it on. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a1ba6c2019a69499f8c09967c9cc7dd0fa0ab3e5d0801aea3f3758bcbd812e8f10"></a>nr</em>&nbsp;</td><td class="fielddoc">
<p>The number of options. </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a39b9064778f7b7136fcdfae4a83088f0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> change_dd_cutoff </td>
          <td>(</td>
          <td class="paramtype">struct t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classt__state.xhtml">t_state</a> *&#160;</td>
          <td class="paramname"><em>state</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_inputrec *&#160;</td>
          <td class="paramname"><em>ir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>cutoff_req</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change the DD non-bonded communication cut-off. </p>
<p>This could fail when trying to increase the cut-off, then FALSE will be returned and the cut-off is not modified. </p>

</div>
</div>
<a class="anchor" id="a42ff2378b1d059ff107be5d1e6134573"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> dd_choose_grid </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fplog</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_domdec_t *&#160;</td>
          <td class="paramname"><em>dd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_inputrec *&#160;</td>
          <td class="paramname"><em>ir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_mtop_t *&#160;</td>
          <td class="paramname"><em>mtop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const matrix&#160;</td>
          <td class="paramname"><em>box</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_ddbox_t *&#160;</td>
          <td class="paramname"><em>ddbox</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nPmeRanks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bDynLoadBal</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>dlb_scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>cellsize_limit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>cutoff_dd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bInterCGBondeds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determines the optimal DD cell setup dd-&gt;nc and possibly npmenodes for the system. </p>
<p>On the master node returns the actual cellsize limit used. </p>

</div>
</div>
<a class="anchor" id="ae4c9d737b2030e1124505e8c1026e085"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int* dd_constraints_nlocalatoms </td>
          <td>(</td>
          <td class="paramtype">struct gmx_domdec_t *&#160;</td>
          <td class="paramname"><em>dd</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the local atom count array for all constraints. </p>
<p>The local atom count for a constraint, possible values 2/1/0, is needed to avoid not/double-counting contributions linked to the Lagrange multiplier, such as the virial and free-energy derivatives. </p>

</div>
</div>
<a class="anchor" id="addf6dbec1520bc43b463769f7b16ae5a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void dd_move_f </td>
          <td>(</td>
          <td class="paramtype">struct gmx_domdec_t *&#160;</td>
          <td class="paramname"><em>dd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>f</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec *&#160;</td>
          <td class="paramname"><em>fshift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sum the forces over the neighboring cells. </p>
<p>When fshift!=NULL the shift forces are updated to obtain the correct virial from the single sum including f. </p>

</div>
</div>
<a class="anchor" id="a101ba6a12f31662c770c1a8f0b12069f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void dd_partition_system </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fplog</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_int64_t&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bMasterState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nstglobalcomm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classt__state.xhtml">t_state</a> *&#160;</td>
          <td class="paramname"><em>state_global</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_mtop_t *&#160;</td>
          <td class="paramname"><em>top_global</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_inputrec *&#160;</td>
          <td class="paramname"><em>ir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classt__state.xhtml">t_state</a> *&#160;</td>
          <td class="paramname"><em>state_local</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PaddedRVecVector *&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1MDAtoms.xhtml">gmx::MDAtoms</a> *&#160;</td>
          <td class="paramname"><em>mdatoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_localtop_t *&#160;</td>
          <td class="paramname"><em>top_local</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_forcerec *&#160;</td>
          <td class="paramname"><em>fr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_vsite_t *&#160;</td>
          <td class="paramname"><em>vsite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct gmx_constr *&#160;</td>
          <td class="paramname"><em>constr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_nrnb *&#160;</td>
          <td class="paramname"><em>nrnb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bVerbose</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Partition the system over the nodes. </p>
<p>step is only used for printing error messages. If bMasterState==TRUE then state_global from the master node is used, else state_local is redistributed between the nodes. When f!=NULL, *f will be reallocated to the size of state_local. </p>

</div>
</div>
<a class="anchor" id="a51aa87146f02e412e251c8390d2c91aa"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float dd_pme_f_ratio </td>
          <td>(</td>
          <td class="paramtype">struct gmx_domdec_t *&#160;</td>
          <td class="paramname"><em>dd</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the PME/PP force load ratio, or -1 if nothing was measured. </p>
<p>Should only be called on the DD master node. </p>

</div>
</div>
<a class="anchor" id="a581f646d5c463fe4735d37cbeaf70a47"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void dd_setup_dlb_resource_sharing </td>
          <td>(</td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>gpu_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set up communication for averaging GPU wait times over domains. </p>
<p>When domains (PP MPI ranks) share a GPU, the individual GPU wait times are meaningless, as it depends on the order in which tasks on the same GPU finish. Therefore there wait times need to be averaged over the ranks sharing the same GPU. This function sets up the communication for that. </p>

</div>
</div>
<a class="anchor" id="a71c08796224e9ed7b147682fb4f017f8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void dd_store_state </td>
          <td>(</td>
          <td class="paramtype">struct gmx_domdec_t *&#160;</td>
          <td class="paramname"><em>dd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classt__state.xhtml">t_state</a> *&#160;</td>
          <td class="paramname"><em>state</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Store the global cg indices of the home cgs in state,. </p>
<p>This means it can be reset, even after a new DD partitioning. </p>

</div>
</div>
<a class="anchor" id="a70ac1da1701259851d5c21c733196097"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ddglatnr </td>
          <td>(</td>
          <td class="paramtype">const gmx_domdec_t *&#160;</td>
          <td class="paramname"><em>dd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the global topology atom number belonging to local atom index i. </p>
<p>This function is intended for writing ASCII output and returns atom numbers starting at 1. When dd=NULL returns i+1. </p>

</div>
</div>
<a class="anchor" id="a157bf71cdab9ea140756a04b124db881"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_dd_dlb_max_cutoff </td>
          <td>(</td>
          <td class="paramtype">struct t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>cutoff</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Limit DLB to preserve the option of returning to the current cut-off. </p>
<p>Domain boundary changes due to the DD dynamic load balancing can limit the cut-off distance that can be set in change_dd_cutoff. This function sets/changes the DLB limit such that using the passed (pair-list) cut-off should still be possible after subsequently setting a shorter cut-off with change_dd_cutoff. </p>

</div>
</div>
<a class="anchor" id="a0de4aa34eefbe8227ab862d07bd6f0fb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void write_dd_pdb </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_int64_t&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>title</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_mtop_t *&#160;</td>
          <td class="paramname"><em>mtop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>natoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>x</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">matrix&#160;</td>
          <td class="paramname"><em>box</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Dump a pdb file with the current DD home + communicated atoms. </p>
<p>When natoms=-1, dump all known atoms. </p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:56:07 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
