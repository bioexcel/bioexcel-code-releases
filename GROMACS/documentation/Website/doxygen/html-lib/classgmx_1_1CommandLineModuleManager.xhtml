<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::CommandLineModuleManager Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml">CommandLineModuleManager</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="classgmx_1_1CommandLineModuleManager-members.xhtml">List of all members</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">gmx::CommandLineModuleManager Class Reference<div class="ingroups"><a class="el" href="group__module__commandline.xhtml">Command Line Program Management (commandline)</a> &#124; <a class="el" href="group__group__libraryapi.xhtml">Library API</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;gromacs/commandline/cmdlinemodulemanager.h&gt;</code></p>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Implements a wrapper command-line interface for multiple modules. </p>
<p>Typical usage: </p>
<div class="fragment"><div class="line">  <span class="keywordtype">int</span> <a class="code" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])</div>
<div class="line">  {</div>
<div class="line">      <a class="code" href="classgmx_1_1CommandLineProgramContext.xhtml">gmx::CommandLineProgramContext</a> &amp;programContext = <a class="code" href="group__module__commandline.xhtml#ga8c376f5f94bd1a63a3a97e288c4be50d">gmx::initForCommandLine</a>(&amp;argc, &amp;argv);</div>
<div class="line">      <span class="keywordflow">try</span></div>
<div class="line">      {</div>
<div class="line">          <a class="code" href="classgmx_1_1CommandLineModuleManager.xhtml">gmx::CommandLineModuleManager</a> manager(<span class="stringliteral">&quot;gmx&quot;</span>, &amp;programContext);</div>
<div class="line">          <span class="comment">// &lt;register all necessary modules&gt;</span></div>
<div class="line">          <span class="keywordtype">int</span> rc = manager.run(argc, argv);</div>
<div class="line">          <a class="code" href="group__module__commandline.xhtml#ga49311a4a4e3f3ec07a9ae925fb63151f">gmx::finalizeForCommandLine</a>();</div>
<div class="line">          <span class="keywordflow">return</span> rc;</div>
<div class="line">      }</div>
<div class="line">      <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception &amp;ex)</div>
<div class="line">      {</div>
<div class="line">          <a class="code" href="group__module__utility.xhtml#gac6287dc8a550a2d54429e44994e00e58">gmx::printFatalErrorMessage</a>(stderr, ex);</div>
<div class="line">          <span class="keywordflow">return</span> <a class="code" href="namespacegmx.xhtml#ad8fe34835a6e197f2731e7d604f28992">gmx::processExceptionAtExitForCommandLine</a>(ex);</div>
<div class="line">      }</div>
<div class="line">  }</div>
<div class="line">* </div>
</div><!-- fragment --><dl class="section see"><dt>See Also</dt><dd>page_wrapperbinary </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a94bd50159202f6c90d5625bc00a60d7f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a94bd50159202f6c90d5625bc00a60d7f"></a>
typedef int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a94bd50159202f6c90d5625bc00a60d7f">CMainFunction</a> )(int argc, char *argv[])</td></tr>
<tr class="memdesc:a94bd50159202f6c90d5625bc00a60d7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function pointer type for a C main function. <br/></td></tr>
<tr class="separator:a94bd50159202f6c90d5625bc00a60d7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cc4c17942e77a57739f8050335f2bc8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2cc4c17942e77a57739f8050335f2bc8"></a>
typedef void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a2cc4c17942e77a57739f8050335f2bc8">InitSettingsFunction</a> )(<a class="el" href="classgmx_1_1CommandLineModuleSettings.xhtml">CommandLineModuleSettings</a> *settings)</td></tr>
<tr class="memdesc:a2cc4c17942e77a57739f8050335f2bc8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function pointer to a settings provider. <br/></td></tr>
<tr class="separator:a2cc4c17942e77a57739f8050335f2bc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a03290a2c767a1e7ff7c6673658074cb0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a03290a2c767a1e7ff7c6673658074cb0">CommandLineModuleManager</a> (const char *binaryName, <a class="el" href="classgmx_1_1CommandLineProgramContext.xhtml">CommandLineProgramContext</a> *programContext)</td></tr>
<tr class="memdesc:a03290a2c767a1e7ff7c6673658074cb0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes a command-line module manager.  <a href="#a03290a2c767a1e7ff7c6673658074cb0">More...</a><br/></td></tr>
<tr class="separator:a03290a2c767a1e7ff7c6673658074cb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36d83b3b08b82460acc422ad129f47e6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a36d83b3b08b82460acc422ad129f47e6">setQuiet</a> (bool bQuiet)</td></tr>
<tr class="memdesc:a36d83b3b08b82460acc422ad129f47e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the module manager to quiet mode: don't print anything.  <a href="#a36d83b3b08b82460acc422ad129f47e6">More...</a><br/></td></tr>
<tr class="separator:a36d83b3b08b82460acc422ad129f47e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae24e2bb5b578bf3517385cd92f8225c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#aae24e2bb5b578bf3517385cd92f8225c">setOutputRedirector</a> (<a class="el" href="classgmx_1_1IFileOutputRedirector.xhtml">IFileOutputRedirector</a> *output)</td></tr>
<tr class="memdesc:aae24e2bb5b578bf3517385cd92f8225c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Redirects the output of the module manager to a file.  <a href="#aae24e2bb5b578bf3517385cd92f8225c">More...</a><br/></td></tr>
<tr class="separator:aae24e2bb5b578bf3517385cd92f8225c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addea672d0288f039526cd3a7c87fa4f7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#addea672d0288f039526cd3a7c87fa4f7">setSingleModule</a> (<a class="el" href="classgmx_1_1ICommandLineModule.xhtml">ICommandLineModule</a> *module)</td></tr>
<tr class="memdesc:addea672d0288f039526cd3a7c87fa4f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Makes the manager always run a single module.  <a href="#addea672d0288f039526cd3a7c87fa4f7">More...</a><br/></td></tr>
<tr class="separator:addea672d0288f039526cd3a7c87fa4f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbfda58116f0d497b78a9f82254baddf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#adbfda58116f0d497b78a9f82254baddf">addModule</a> (<a class="el" href="group__module__commandline.xhtml#ga92d17acbe7afad4effeda8d9be200305">CommandLineModulePointer</a> module)</td></tr>
<tr class="memdesc:adbfda58116f0d497b78a9f82254baddf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a given module to this manager.  <a href="#adbfda58116f0d497b78a9f82254baddf">More...</a><br/></td></tr>
<tr class="separator:adbfda58116f0d497b78a9f82254baddf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af70e6bccbcd30cb41d7ce54cafbd8583"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#af70e6bccbcd30cb41d7ce54cafbd8583">addModuleCMain</a> (const char *name, const char *shortDescription, <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a94bd50159202f6c90d5625bc00a60d7f">CMainFunction</a> mainFunction)</td></tr>
<tr class="memdesc:af70e6bccbcd30cb41d7ce54cafbd8583"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a module that runs a given <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>-like function.  <a href="#af70e6bccbcd30cb41d7ce54cafbd8583">More...</a><br/></td></tr>
<tr class="separator:af70e6bccbcd30cb41d7ce54cafbd8583"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af21af5e9ad63041beb004b294181318a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#af21af5e9ad63041beb004b294181318a">addModuleCMainWithSettings</a> (const char *name, const char *shortDescription, <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a94bd50159202f6c90d5625bc00a60d7f">CMainFunction</a> mainFunction, <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a2cc4c17942e77a57739f8050335f2bc8">InitSettingsFunction</a> settingsFunction)</td></tr>
<tr class="memdesc:af21af5e9ad63041beb004b294181318a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a module that runs a given <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>-like function with custom settings.  <a href="#af21af5e9ad63041beb004b294181318a">More...</a><br/></td></tr>
<tr class="separator:af21af5e9ad63041beb004b294181318a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f9f28cb035bad5e8b217e9ab13bb217"><td class="memTemplParams" colspan="2">template&lt;class Module &gt; </td></tr>
<tr class="memitem:a6f9f28cb035bad5e8b217e9ab13bb217"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a6f9f28cb035bad5e8b217e9ab13bb217">registerModule</a> ()</td></tr>
<tr class="memdesc:a6f9f28cb035bad5e8b217e9ab13bb217"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registers a module of a certain type to this manager.  <a href="#a6f9f28cb035bad5e8b217e9ab13bb217">More...</a><br/></td></tr>
<tr class="separator:a6f9f28cb035bad5e8b217e9ab13bb217"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5759ea1e79f4b2267161794d507b109c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1CommandLineModuleGroup.xhtml">CommandLineModuleGroup</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a5759ea1e79f4b2267161794d507b109c">addModuleGroup</a> (const char *title)</td></tr>
<tr class="memdesc:a5759ea1e79f4b2267161794d507b109c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a group for modules to use in help output.  <a href="#a5759ea1e79f4b2267161794d507b109c">More...</a><br/></td></tr>
<tr class="separator:a5759ea1e79f4b2267161794d507b109c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9da9a1f0cf8646a91e5e096f1fbf7eb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#ae9da9a1f0cf8646a91e5e096f1fbf7eb">addHelpTopic</a> (<a class="el" href="namespacegmx.xhtml#abb455c7711ece592606e70a093ff80b4">HelpTopicPointer</a> topic)</td></tr>
<tr class="memdesc:ae9da9a1f0cf8646a91e5e096f1fbf7eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Makes given help topic available through the manager's help module.  <a href="#ae9da9a1f0cf8646a91e5e096f1fbf7eb">More...</a><br/></td></tr>
<tr class="separator:ae9da9a1f0cf8646a91e5e096f1fbf7eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b3468b2c6cbafe1b528267208f6db46"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a6b3468b2c6cbafe1b528267208f6db46">run</a> (int argc, char *argv[])</td></tr>
<tr class="memdesc:a6b3468b2c6cbafe1b528267208f6db46"><td class="mdescLeft">&#160;</td><td class="mdescRight">Runs a module based on given command line.  <a href="#a6b3468b2c6cbafe1b528267208f6db46">More...</a><br/></td></tr>
<tr class="separator:a6b3468b2c6cbafe1b528267208f6db46"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a81d63649f04804faf577e44ddf158073"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a81d63649f04804faf577e44ddf158073">runAsMainSingleModule</a> (int argc, char *argv[], <a class="el" href="classgmx_1_1ICommandLineModule.xhtml">ICommandLineModule</a> *module)</td></tr>
<tr class="memdesc:a81d63649f04804faf577e44ddf158073"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements a <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a> method that runs a single module.  <a href="#a81d63649f04804faf577e44ddf158073">More...</a><br/></td></tr>
<tr class="separator:a81d63649f04804faf577e44ddf158073"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4854a50ca50f67912d7cf149d5577f41"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a4854a50ca50f67912d7cf149d5577f41">runAsMainCMain</a> (int argc, char *argv[], <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a94bd50159202f6c90d5625bc00a60d7f">CMainFunction</a> mainFunction)</td></tr>
<tr class="memdesc:a4854a50ca50f67912d7cf149d5577f41"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements a <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a> method that runs a given function.  <a href="#a4854a50ca50f67912d7cf149d5577f41">More...</a><br/></td></tr>
<tr class="separator:a4854a50ca50f67912d7cf149d5577f41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83264d16575326b1986713f1e55de503"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a83264d16575326b1986713f1e55de503">runAsMainCMainWithSettings</a> (int argc, char *argv[], <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a94bd50159202f6c90d5625bc00a60d7f">CMainFunction</a> mainFunction, <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a2cc4c17942e77a57739f8050335f2bc8">InitSettingsFunction</a> settingsFunction)</td></tr>
<tr class="memdesc:a83264d16575326b1986713f1e55de503"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements a <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a> method that runs a given function with custom settings.  <a href="#a83264d16575326b1986713f1e55de503">More...</a><br/></td></tr>
<tr class="separator:a83264d16575326b1986713f1e55de503"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a03290a2c767a1e7ff7c6673658074cb0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">gmx::CommandLineModuleManager::CommandLineModuleManager </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>binaryName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1CommandLineProgramContext.xhtml">CommandLineProgramContext</a> *&#160;</td>
          <td class="paramname"><em>programContext</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes a command-line module manager. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">binaryName</td><td>Name of the running binary (without Gromacs binary suffix or .exe on Windows). </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">programContext</td><td>Program information for the running binary. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p><code>binaryName</code> is used to detect when the binary is run through a symlink, and automatically invoke a matching module in such a case.</p>
<p><code>programInfo</code> is non-const to allow the manager to amend it based on the actual module that is getting executed. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ae9da9a1f0cf8646a91e5e096f1fbf7eb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::CommandLineModuleManager::addHelpTopic </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacegmx.xhtml#abb455c7711ece592606e70a093ff80b4">HelpTopicPointer</a>&#160;</td>
          <td class="paramname"><em>topic</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Makes given help topic available through the manager's help module. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">topic</td><td>Help topic to add. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>The manager takes ownership of the help topic. </p>

</div>
</div>
<a class="anchor" id="adbfda58116f0d497b78a9f82254baddf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::CommandLineModuleManager::addModule </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__module__commandline.xhtml#ga92d17acbe7afad4effeda8d9be200305">CommandLineModulePointer</a>&#160;</td>
          <td class="paramname"><em>module</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a given module to this manager. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">module</td><td>Module to add. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>The manager takes ownership of the object.</p>
<p>This method is public mostly for testing purposes; for typical uses, <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a6f9f28cb035bad5e8b217e9ab13bb217" title="Registers a module of a certain type to this manager. ">registerModule()</a> is a more convenient way of adding modules.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a6f9f28cb035bad5e8b217e9ab13bb217" title="Registers a module of a certain type to this manager. ">registerModule()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af70e6bccbcd30cb41d7ce54cafbd8583"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::CommandLineModuleManager::addModuleCMain </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>shortDescription</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a94bd50159202f6c90d5625bc00a60d7f">CMainFunction</a>&#160;</td>
          <td class="paramname"><em>mainFunction</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a module that runs a given <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>-like function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Name for the module. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">shortDescription</td><td>One-line description for the module. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mainFunction</td><td>Main function to wrap. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>There is normally no need to call this method outside the Gromacs library. User code usually wants to use <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a4854a50ca50f67912d7cf149d5577f41" title="Implements a main() method that runs a given function. ">runAsMainCMain()</a>.</p>
<p><code>name</code> and <code>shortDescription</code> should be string constants, or the caller should otherwise ensure that they stay in scope for the duration the <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml" title="Implements a wrapper command-line interface for multiple modules. ">CommandLineModuleManager</a> object exists. <code>mainFunction</code> should call <a class="el" href="group__module__commandline.xhtml#ga5140c89919960e8e1e218a5b0d881cd5" title="Parse command-line arguments. ">parse_common_args()</a> to process its command-line arguments. </p>

</div>
</div>
<a class="anchor" id="af21af5e9ad63041beb004b294181318a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::CommandLineModuleManager::addModuleCMainWithSettings </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>shortDescription</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a94bd50159202f6c90d5625bc00a60d7f">CMainFunction</a>&#160;</td>
          <td class="paramname"><em>mainFunction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a2cc4c17942e77a57739f8050335f2bc8">InitSettingsFunction</a>&#160;</td>
          <td class="paramname"><em>settingsFunction</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a module that runs a given <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>-like function with custom settings. </p>
<p>This method does the same as <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a4854a50ca50f67912d7cf149d5577f41" title="Implements a main() method that runs a given function. ">runAsMainCMain()</a>, but additionally calls <code>settingsFunction</code> to initialize <a class="el" href="classgmx_1_1CommandLineModuleSettings.xhtml" title="Settings to pass information between a module and the general runner. ">CommandLineModuleSettings</a>. This allows specifying, e.g., a different default nice level. </p>

</div>
</div>
<a class="anchor" id="a5759ea1e79f4b2267161794d507b109c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1CommandLineModuleGroup.xhtml">CommandLineModuleGroup</a> gmx::CommandLineModuleManager::addModuleGroup </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>title</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a group for modules to use in help output. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">title</td><td>Short title for the group. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Handle that can be used to add modules to the group. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>Creates a group that is used to structure the list of all modules in help output. Modules are added to the group using the returned object. </p>

</div>
</div>
<a class="anchor" id="a6f9f28cb035bad5e8b217e9ab13bb217"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Module &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::CommandLineModuleManager::registerModule </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Registers a module of a certain type to this manager. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Module</td><td>Type of module to register. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p><code>Module</code> must be default-constructible and implement <a class="el" href="classgmx_1_1ICommandLineModule.xhtml" title="Module that can be run from command line using CommandLineModuleManager. ">ICommandLineModule</a>.</p>
<p>This method is provided as a convenient alternative to <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#adbfda58116f0d497b78a9f82254baddf" title="Adds a given module to this manager. ">addModule()</a> for cases where each module is implemented by a different type (which should be the case for typical situations outside unit tests). </p>

</div>
</div>
<a class="anchor" id="a6b3468b2c6cbafe1b528267208f6db46"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx::CommandLineModuleManager::run </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Runs a module based on given command line. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">argc</td><td>Number of elements in <code>argv</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">argv</td><td>Command-line arguments. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">unspecified</td><td>Throws any exception that the selected module throws. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Exit code for the program. </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>on successful termination. </td></tr>
    <tr><td class="paramname">2</td><td>if no module is specified, or if the module is not found.</td></tr>
  </table>
  </dd>
</dl>
<p>Runs the module whose name matches <code>argv</code>[1]. </p>

</div>
</div>
<a class="anchor" id="a4854a50ca50f67912d7cf149d5577f41"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int gmx::CommandLineModuleManager::runAsMainCMain </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a94bd50159202f6c90d5625bc00a60d7f">CMainFunction</a>&#160;</td>
          <td class="paramname"><em>mainFunction</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements a <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a> method that runs a given function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">argc</td><td><code>argc</code> passed to <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>. </td></tr>
    <tr><td class="paramname">argv</td><td><code>argv</code> passed to <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>. </td></tr>
    <tr><td class="paramname">mainFunction</td><td>The <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>-like method to wrap.</td></tr>
  </table>
  </dd>
</dl>
<p>This method creates a dummy command-line module that does its processing by calling <code>mainFunction</code>; see <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#af70e6bccbcd30cb41d7ce54cafbd8583" title="Adds a module that runs a given main()-like function. ">addModuleCMain()</a> for details. It then runs this module with <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a81d63649f04804faf577e44ddf158073" title="Implements a main() method that runs a single module. ">runAsMainSingleModule()</a>. This allows the resulting executable to handle common options and do other common actions (e.g., startup headers) without duplicate code in the main methods.</p>
<p>Usage: </p>
<div class="fragment"><div class="line">  <span class="keywordtype">int</span> my_main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])</div>
<div class="line">  {</div>
<div class="line">      <span class="comment">// &lt;...&gt;</span></div>
<div class="line">  }</div>
<div class="line"></div>
<div class="line">  <span class="keywordtype">int</span> <a class="code" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])</div>
<div class="line">  {</div>
<div class="line">      <span class="keywordflow">return</span> <a class="code" href="classgmx_1_1CommandLineModuleManager.xhtml#a4854a50ca50f67912d7cf149d5577f41">gmx::CommandLineModuleManager::runAsMainCMain</a>(argc, argv, &amp;my_main);</div>
<div class="line">  }</div>
<div class="line">* </div>
</div><!-- fragment --><p>Does not throw. All exceptions are caught and handled internally. </p>

</div>
</div>
<a class="anchor" id="a83264d16575326b1986713f1e55de503"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int gmx::CommandLineModuleManager::runAsMainCMainWithSettings </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a94bd50159202f6c90d5625bc00a60d7f">CMainFunction</a>&#160;</td>
          <td class="paramname"><em>mainFunction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a2cc4c17942e77a57739f8050335f2bc8">InitSettingsFunction</a>&#160;</td>
          <td class="paramname"><em>settingsFunction</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements a <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a> method that runs a given function with custom settings. </p>
<p>This method does the same as <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a4854a50ca50f67912d7cf149d5577f41" title="Implements a main() method that runs a given function. ">runAsMainCMain()</a>, but additionally calls <code>settingsFunction</code> to initialize <a class="el" href="classgmx_1_1CommandLineModuleSettings.xhtml" title="Settings to pass information between a module and the general runner. ">CommandLineModuleSettings</a>. This allows specifying, e.g., a different default nice level. </p>

</div>
</div>
<a class="anchor" id="a81d63649f04804faf577e44ddf158073"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int gmx::CommandLineModuleManager::runAsMainSingleModule </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ICommandLineModule.xhtml">ICommandLineModule</a> *&#160;</td>
          <td class="paramname"><em>module</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements a <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a> method that runs a single module. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">argc</td><td><code>argc</code> passed to <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>. </td></tr>
    <tr><td class="paramname">argv</td><td><code>argv</code> passed to <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>. </td></tr>
    <tr><td class="paramname">module</td><td>Module to run.</td></tr>
  </table>
  </dd>
</dl>
<p>This method allows for uniform behavior for binaries that only contain a single module without duplicating any of the implementation from <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml" title="Implements a wrapper command-line interface for multiple modules. ">CommandLineModuleManager</a> (startup headers, common options etc.).</p>
<p>The signature assumes that <code>module</code> construction does not throw (because otherwise the caller would need to duplicate all the exception handling code). It is possible to move the construction inside the try/catch in this method using an indirection similar to <a class="el" href="classgmx_1_1TrajectoryAnalysisCommandLineRunner.xhtml#a12cd1b40ed04cda667f315e2adee3337" title="Implements a main() method that runs a given module. ">TrajectoryAnalysisCommandLineRunner::runAsMain()</a>, but until that is necessary, the current approach leads to simpler code.</p>
<p>Usage: </p>
<div class="fragment"><div class="line">  <span class="keywordtype">int</span> <a class="code" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])</div>
<div class="line">  {</div>
<div class="line">      CustomCommandLineModule module;</div>
<div class="line">      <span class="keywordflow">return</span> <a class="code" href="classgmx_1_1CommandLineModuleManager.xhtml#a81d63649f04804faf577e44ddf158073">gmx::CommandLineModuleManager::runAsMainSingleModule</a>(argc, argv, &amp;module);</div>
<div class="line">  }</div>
<div class="line">* </div>
</div><!-- fragment --><p>Does not throw. All exceptions are caught and handled internally. </p>

</div>
</div>
<a class="anchor" id="aae24e2bb5b578bf3517385cd92f8225c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::CommandLineModuleManager::setOutputRedirector </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1IFileOutputRedirector.xhtml">IFileOutputRedirector</a> *&#160;</td>
          <td class="paramname"><em>output</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Redirects the output of the module manager to a file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">output</td><td>File redirector to use for output.</td></tr>
  </table>
  </dd>
</dl>
<p>Normally, the module manager prints explicitly requested text such as help output to <code>stdout</code>, but this method can be used to redirect that output to a file. For exporting help from the module manager, several files are written, and can be redirected with this method as well.</p>
<p>This is used for unit tests, either to keep them quiet or to verify that output. To keep implementation options open, behavior with <code>output == NULL</code> is undefined and should not be relied on. For tests, there should only be need to call this a single time, right after creating the manager. </p>

</div>
</div>
<a class="anchor" id="a36d83b3b08b82460acc422ad129f47e6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::CommandLineModuleManager::setQuiet </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bQuiet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the module manager to quiet mode: don't print anything. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bQuiet</td><td>Whether the module manager should remain silent.</td></tr>
  </table>
  </dd>
</dl>
<p>Normally, the module manager prints out some information to <code>stderr</code> before it starts the module and after it finishes. This removes that output, which is useful in particular for unit tests so that they don't spam <code>stderr</code>. </p>

</div>
</div>
<a class="anchor" id="addea672d0288f039526cd3a7c87fa4f7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::CommandLineModuleManager::setSingleModule </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ICommandLineModule.xhtml">ICommandLineModule</a> *&#160;</td>
          <td class="paramname"><em>module</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Makes the manager always run a single module. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">module</td><td>Module to run.</td></tr>
  </table>
  </dd>
</dl>
<p>This method disables all mechanisms for selecting a module, and directly passes all command-line arguments to <code>module</code>. Help arguments are an exception: these are still recognized by the manager and translated into a call to <a class="el" href="classgmx_1_1ICommandLineModule.xhtml#a947eea9c2e648aa837d385fcbe01c1bd" title="Prints help for the module. ">ICommandLineModule::writeHelp()</a>.</p>
<p>This is public mainly for unit testing purposes; for other code, <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a81d63649f04804faf577e44ddf158073" title="Implements a main() method that runs a single module. ">runAsMainSingleModule()</a> typically provides the desired functionality.</p>
<p>Does not throw. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/gromacs/commandline/<a class="el" href="cmdlinemodulemanager_8h.xhtml">cmdlinemodulemanager.h</a></li>
<li>src/gromacs/commandline/cmdlinemodulemanager.cpp</li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:56:15 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
