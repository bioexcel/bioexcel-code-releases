<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::test::CommandLineTestHelper Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="namespacegmx_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml">CommandLineTestHelper</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="classgmx_1_1test_1_1CommandLineTestHelper-members.xhtml">List of all members</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">gmx::test::CommandLineTestHelper Class Reference<div class="ingroups"><a class="el" href="group__group__libraryapi.xhtml">Library API</a> &#124; <a class="el" href="group__module__testutils.xhtml">Testing Utilities (testutils)</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;testutils/cmdlinetest.h&gt;</code></p>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Helper class for tests that construct command lines that need to reference existing files. </p>
<p>This class provides helper methods for:</p>
<ol type="1">
<li>Adding input files to a <a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml" title="Helper class for tests that need to construct command lines. ">CommandLine</a> instance by generating them from a string provided in the test (<a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a4e7a9dd4bbcd57f9554185b7c84aa022" title="Generates and sets an input file. ">setInputFileContents()</a>).</li>
<li>Adding output files to a <a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml" title="Helper class for tests that need to construct command lines. ">CommandLine</a> instance (<a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a4d9a0e1150be7ba9faea9522fc1bd274" title="Sets an output file parameter and adds it to the set of tested files. ">setOutputFile()</a>).</li>
<li>Checking the contents of some of the output files using <a class="el" href="classgmx_1_1test_1_1TestReferenceData.xhtml" title="Handles creation of and comparison to test reference data. ">TestReferenceData</a> (<a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a4d9a0e1150be7ba9faea9522fc1bd274" title="Sets an output file parameter and adds it to the set of tested files. ">setOutputFile()</a> and <a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a03dcf4f3e2400defe8eb88d99af452ec" title="Checks output files added with setOutputFile() against reference data. ">checkOutputFiles()</a>).</li>
<li>Static methods for easily executing command-line modules (various overloads of runModule()).</li>
</ol>
<p>All files created during the test are cleaned up at the end of the test.</p>
<p>All methods can throw std::bad_alloc.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1test_1_1TestFileManager.xhtml" title="Helper for tests that need input and output files. ">TestFileManager</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aff6fd2523ae1245870bd5cff112859f9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#aff6fd2523ae1245870bd5cff112859f9">CommandLineTestHelper</a> (<a class="el" href="classgmx_1_1test_1_1TestFileManager.xhtml">TestFileManager</a> *fileManager)</td></tr>
<tr class="memdesc:aff6fd2523ae1245870bd5cff112859f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes an instance.  <a href="#aff6fd2523ae1245870bd5cff112859f9">More...</a><br/></td></tr>
<tr class="separator:aff6fd2523ae1245870bd5cff112859f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e7a9dd4bbcd57f9554185b7c84aa022"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a4e7a9dd4bbcd57f9554185b7c84aa022">setInputFileContents</a> (<a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> *args, const char *option, const char *extension, const std::string &amp;contents)</td></tr>
<tr class="memdesc:a4e7a9dd4bbcd57f9554185b7c84aa022"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates and sets an input file.  <a href="#a4e7a9dd4bbcd57f9554185b7c84aa022">More...</a><br/></td></tr>
<tr class="separator:a4e7a9dd4bbcd57f9554185b7c84aa022"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07778891c320be23549b34ebd90f3278"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a07778891c320be23549b34ebd90f3278">setInputFileContents</a> (<a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> *args, const char *option, const char *extension, const <a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; const char *const  &gt; &amp;contents)</td></tr>
<tr class="memdesc:a07778891c320be23549b34ebd90f3278"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates and sets an input file.  <a href="#a07778891c320be23549b34ebd90f3278">More...</a><br/></td></tr>
<tr class="separator:a07778891c320be23549b34ebd90f3278"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d9a0e1150be7ba9faea9522fc1bd274"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a4d9a0e1150be7ba9faea9522fc1bd274">setOutputFile</a> (<a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> *args, const char *option, const char *filename, const <a class="el" href="classgmx_1_1test_1_1ITextBlockMatcherSettings.xhtml">ITextBlockMatcherSettings</a> &amp;matcher)</td></tr>
<tr class="memdesc:a4d9a0e1150be7ba9faea9522fc1bd274"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an output file parameter and adds it to the set of tested files.  <a href="#a4d9a0e1150be7ba9faea9522fc1bd274">More...</a><br/></td></tr>
<tr class="separator:a4d9a0e1150be7ba9faea9522fc1bd274"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27d92ff7ecc403ac99102dce89d0cf2f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a27d92ff7ecc403ac99102dce89d0cf2f">setOutputFile</a> (<a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> *args, const char *option, const char *filename, const <a class="el" href="classgmx_1_1test_1_1IFileMatcherSettings.xhtml">IFileMatcherSettings</a> &amp;matcher)</td></tr>
<tr class="memdesc:a27d92ff7ecc403ac99102dce89d0cf2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an output file parameter and adds it to the set of tested files.  <a href="#a27d92ff7ecc403ac99102dce89d0cf2f">More...</a><br/></td></tr>
<tr class="separator:a27d92ff7ecc403ac99102dce89d0cf2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03dcf4f3e2400defe8eb88d99af452ec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a03dcf4f3e2400defe8eb88d99af452ec">checkOutputFiles</a> (<a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a> checker) const </td></tr>
<tr class="memdesc:a03dcf4f3e2400defe8eb88d99af452ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks output files added with <a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a4d9a0e1150be7ba9faea9522fc1bd274" title="Sets an output file parameter and adds it to the set of tested files. ">setOutputFile()</a> against reference data.  <a href="#a03dcf4f3e2400defe8eb88d99af452ec">More...</a><br/></td></tr>
<tr class="separator:a03dcf4f3e2400defe8eb88d99af452ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a53aa890fc717cc97b4c100464b4a9dad"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a53aa890fc717cc97b4c100464b4a9dad">runModuleDirect</a> (<a class="el" href="classgmx_1_1ICommandLineModule.xhtml">ICommandLineModule</a> *module, <a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> *commandLine)</td></tr>
<tr class="memdesc:a53aa890fc717cc97b4c100464b4a9dad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Runs a command-line program that implements <a class="el" href="classgmx_1_1ICommandLineModule.xhtml" title="Module that can be run from command line using CommandLineModuleManager. ">ICommandLineModule</a>.  <a href="#a53aa890fc717cc97b4c100464b4a9dad">More...</a><br/></td></tr>
<tr class="separator:a53aa890fc717cc97b4c100464b4a9dad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a552184baa5cad3cd9bf45c068a34fa11"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a552184baa5cad3cd9bf45c068a34fa11">runModuleDirect</a> (std::unique_ptr&lt; <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml">ICommandLineOptionsModule</a> &gt; module, <a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> *commandLine)</td></tr>
<tr class="memdesc:a552184baa5cad3cd9bf45c068a34fa11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Runs a command-line program that implements <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml" title="Module that can be run from a command line and uses gmx::Options for argument processing. ">ICommandLineOptionsModule</a>.  <a href="#a552184baa5cad3cd9bf45c068a34fa11">More...</a><br/></td></tr>
<tr class="separator:a552184baa5cad3cd9bf45c068a34fa11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31f8d02f226f3a79fa48c68bcfd24ada"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a31f8d02f226f3a79fa48c68bcfd24ada">runModuleFactory</a> (std::function&lt; std::unique_ptr&lt; <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml">ICommandLineOptionsModule</a> &gt;()&gt; factory, <a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> *commandLine)</td></tr>
<tr class="memdesc:a31f8d02f226f3a79fa48c68bcfd24ada"><td class="mdescLeft">&#160;</td><td class="mdescRight">Runs a command-line program that implements <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml" title="Module that can be run from a command line and uses gmx::Options for argument processing. ">ICommandLineOptionsModule</a>.  <a href="#a31f8d02f226f3a79fa48c68bcfd24ada">More...</a><br/></td></tr>
<tr class="separator:a31f8d02f226f3a79fa48c68bcfd24ada"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="aff6fd2523ae1245870bd5cff112859f9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">gmx::test::CommandLineTestHelper::CommandLineTestHelper </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1test_1_1TestFileManager.xhtml">TestFileManager</a> *&#160;</td>
          <td class="paramname"><em>fileManager</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes an instance. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fileManager</td><td>File manager to use for generating temporary file names and to track temporary files. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a03dcf4f3e2400defe8eb88d99af452ec"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::CommandLineTestHelper::checkOutputFiles </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a>&#160;</td>
          <td class="paramname"><em>checker</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks output files added with <a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a4d9a0e1150be7ba9faea9522fc1bd274" title="Sets an output file parameter and adds it to the set of tested files. ">setOutputFile()</a> against reference data. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">checker</td><td>Reference data root location where the reference data is stored.</td></tr>
  </table>
  </dd>
</dl>
<p>The file contents are tested verbatim, using direct string comparison. The text can be found verbatim in the reference data XML files for manual inspection.</p>
<p>Generates non-fatal test failures if some output file contents do not match the reference data. </p>

</div>
</div>
<a class="anchor" id="a53aa890fc717cc97b4c100464b4a9dad"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int gmx::test::CommandLineTestHelper::runModuleDirect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ICommandLineModule.xhtml">ICommandLineModule</a> *&#160;</td>
          <td class="paramname"><em>module</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> *&#160;</td>
          <td class="paramname"><em>commandLine</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Runs a command-line program that implements <a class="el" href="classgmx_1_1ICommandLineModule.xhtml" title="Module that can be run from command line using CommandLineModuleManager. ">ICommandLineModule</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">module</td><td>Module to run. The function does not take ownership. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">commandLine</td><td>Command line parameters to pass. This is only modified if <code>module</code> modifies it. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The return value of the module. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">unspecified</td><td>Any exception thrown by the module. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a552184baa5cad3cd9bf45c068a34fa11"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int gmx::test::CommandLineTestHelper::runModuleDirect </td>
          <td>(</td>
          <td class="paramtype">std::unique_ptr&lt; <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml">ICommandLineOptionsModule</a> &gt;&#160;</td>
          <td class="paramname"><em>module</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> *&#160;</td>
          <td class="paramname"><em>commandLine</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Runs a command-line program that implements <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml" title="Module that can be run from a command line and uses gmx::Options for argument processing. ">ICommandLineOptionsModule</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">module</td><td>Module to run. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">commandLine</td><td>Command line parameters to pass. This is only modified if <code>module</code> modifies it. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The return value of the module. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">unspecified</td><td>Any exception thrown by the module. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a31f8d02f226f3a79fa48c68bcfd24ada"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int gmx::test::CommandLineTestHelper::runModuleFactory </td>
          <td>(</td>
          <td class="paramtype">std::function&lt; std::unique_ptr&lt; <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml">ICommandLineOptionsModule</a> &gt;()&gt;&#160;</td>
          <td class="paramname"><em>factory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> *&#160;</td>
          <td class="paramname"><em>commandLine</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Runs a command-line program that implements <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml" title="Module that can be run from a command line and uses gmx::Options for argument processing. ">ICommandLineOptionsModule</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">factory</td><td>Factory method for the module to run. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">commandLine</td><td>Command line parameters to pass. This is only modified if the module modifies it. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The return value of the module. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">unspecified</td><td>Any exception thrown by the factory or the module. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4e7a9dd4bbcd57f9554185b7c84aa022"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::CommandLineTestHelper::setInputFileContents </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> *&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>extension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>contents</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Generates and sets an input file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">args</td><td><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml" title="Helper class for tests that need to construct command lines. ">CommandLine</a> to which to add the option. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">option</td><td>Option to set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">extension</td><td>Extension for the file to create. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">contents</td><td>Text to write to the input file.</td></tr>
  </table>
  </dd>
</dl>
<p>Creates a temporary file with contents from <code>contents</code>, and adds <code>option</code> to <code>args</code> with a value that points to the generated file. </p>

</div>
</div>
<a class="anchor" id="a07778891c320be23549b34ebd90f3278"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::CommandLineTestHelper::setInputFileContents </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> *&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>extension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; const char *const  &gt; &amp;&#160;</td>
          <td class="paramname"><em>contents</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Generates and sets an input file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">args</td><td><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml" title="Helper class for tests that need to construct command lines. ">CommandLine</a> to which to add the option. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">option</td><td>Option to set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">extension</td><td>Extension for the file to create. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">contents</td><td>Text to write to the input file.</td></tr>
  </table>
  </dd>
</dl>
<p>Creates a temporary file with contents from <code>contents</code> (each array entry on its own line), and adds <code>option</code> to <code>args</code> with a value that points to the generated file. </p>

</div>
</div>
<a class="anchor" id="a4d9a0e1150be7ba9faea9522fc1bd274"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::CommandLineTestHelper::setOutputFile </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> *&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1test_1_1ITextBlockMatcherSettings.xhtml">ITextBlockMatcherSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>matcher</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets an output file parameter and adds it to the set of tested files. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">args</td><td><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml" title="Helper class for tests that need to construct command lines. ">CommandLine</a> to which to add the option. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">option</td><td>Option to set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Name of the output file. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">matcher</td><td>Specifies how the contents of the file are tested.</td></tr>
  </table>
  </dd>
</dl>
<p>This method does the following:</p>
<ul>
<li>Adds <code>option</code> to <code>args</code> to point a temporary file name constructed from <code>filename</code>.</li>
<li>Makes <a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a03dcf4f3e2400defe8eb88d99af452ec" title="Checks output files added with setOutputFile() against reference data. ">checkOutputFiles()</a> to check the contents of the file against reference data, using <code>matcher</code>.</li>
<li>Marks the temporary file for removal at test teardown.</li>
</ul>
<p><code>filename</code> is given to TestTemporaryFileManager to make a unique filename for the temporary file. If <code>filename</code> starts with a dot, a unique number is prefixed (such that it is possible to create multiple files with the same extension by just specifying the extension for every call of <a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a4d9a0e1150be7ba9faea9522fc1bd274" title="Sets an output file parameter and adds it to the set of tested files. ">setOutputFile()</a>).</p>
<p>If the output file is needed to trigger some computation, or is unconditionally produced by the code under test, but the contents are not interesting for the test, use <a class="el" href="classgmx_1_1test_1_1NoContentsMatch.xhtml" title="Do not check the contents of the file. ">NoContentsMatch</a> as the matcher. Note that the existence of the output file is still verified. </p>

</div>
</div>
<a class="anchor" id="a27d92ff7ecc403ac99102dce89d0cf2f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::CommandLineTestHelper::setOutputFile </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> *&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1test_1_1IFileMatcherSettings.xhtml">IFileMatcherSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>matcher</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets an output file parameter and adds it to the set of tested files. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">args</td><td><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml" title="Helper class for tests that need to construct command lines. ">CommandLine</a> to which to add the option. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">option</td><td>Option to set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Name of the output file. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">matcher</td><td>Specifies how the contents of the file are tested.</td></tr>
  </table>
  </dd>
</dl>
<p>This method does the following:</p>
<ul>
<li>Adds <code>option</code> to <code>args</code> to point a temporary file name constructed from <code>filename</code>.</li>
<li>Makes <a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a03dcf4f3e2400defe8eb88d99af452ec" title="Checks output files added with setOutputFile() against reference data. ">checkOutputFiles()</a> to check the contents of the file against reference data, using <code>matcher</code>.</li>
<li>Marks the temporary file for removal at test teardown.</li>
</ul>
<p><code>filename</code> is given to TestTemporaryFileManager to make a unique filename for the temporary file. If <code>filename</code> starts with a dot, a unique number is prefixed (such that it is possible to create multiple files with the same extension by just specifying the extension for every call of <a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#a4d9a0e1150be7ba9faea9522fc1bd274" title="Sets an output file parameter and adds it to the set of tested files. ">setOutputFile()</a>).</p>
<p>If the output file is needed to trigger some computation, or is unconditionally produced by the code under test, but the contents are not interesting for the test, use <a class="el" href="classgmx_1_1test_1_1NoContentsMatch.xhtml" title="Do not check the contents of the file. ">NoContentsMatch</a> as the matcher. Note that the existence of the output file is still verified. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/testutils/<a class="el" href="cmdlinetest_8h.xhtml">cmdlinetest.h</a></li>
<li>src/testutils/cmdlinetest.cpp</li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:56:17 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
