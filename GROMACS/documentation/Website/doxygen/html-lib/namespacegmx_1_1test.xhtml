<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::test Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li class="current"><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.xhtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.xhtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="namespacegmx_1_1test.xhtml">test</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">gmx::test Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Testing utilities namespace. </p>
<p>This namespace contains utilities for writing unit tests, mostly from the <a class="el" href="group__module__testutils.xhtml">Testing Utilities (testutils)</a> module. </p>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInputPointSet.xhtml">AnalysisDataTestInputPointSet</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a single set of points in <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInputFrame.xhtml" title="Represents a single frame in AnalysisDataTestInput structure. ">AnalysisDataTestInputFrame</a> structure.  <a href="classgmx_1_1test_1_1AnalysisDataTestInputPointSet.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInputFrame.xhtml">AnalysisDataTestInputFrame</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a single frame in <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a> structure.  <a href="classgmx_1_1test_1_1AnalysisDataTestInputFrame.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml">AnalysisDataTestInput</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents static input data for <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml" title="Abstract base class for all objects that provide data. ">AbstractAnalysisData</a> tests.  <a href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml">AnalysisDataTestFixture</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test fixture for <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml" title="Abstract base class for all objects that provide data. ">AbstractAnalysisData</a> testing.  <a href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AllocatorTest.xhtml">AllocatorTest</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Templated test fixture.  <a href="classgmx_1_1test_1_1AllocatorTest.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1MdrunComparisonFixture.xhtml">MdrunComparisonFixture</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares abstract base text fixture class for integration tests of mdrun functionality that will compare multiple calls to mdrun.  <a href="classgmx_1_1test_1_1MdrunComparisonFixture.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class for tests that need to construct command lines.  <a href="classgmx_1_1test_1_1CommandLine.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml">CommandLineTestHelper</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class for tests that construct command lines that need to reference existing files.  <a href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLineTestBase.xhtml">CommandLineTestBase</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test fixture for tests that call a single command-line program with input/output files.  <a href="classgmx_1_1test_1_1CommandLineTestBase.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1ConfMatch.xhtml">ConfMatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Match the contents as an gro file.  <a href="classgmx_1_1test_1_1ConfMatch.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1IFileMatcher.xhtml">IFileMatcher</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a file matcher, matching file contents against reference (or other) data.  <a href="classgmx_1_1test_1_1IFileMatcher.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1IFileMatcherSettings.xhtml">IFileMatcherSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a factory for creating a file matcher.  <a href="classgmx_1_1test_1_1IFileMatcherSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TextFileMatch.xhtml">TextFileMatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use a ITextStreamMatcher for matching the contents.  <a href="classgmx_1_1test_1_1TextFileMatch.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1NoContentsMatch.xhtml">NoContentsMatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do not check the contents of the file.  <a href="classgmx_1_1test_1_1NoContentsMatch.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1InteractiveTestHelper.xhtml">InteractiveTestHelper</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class for testing interactive sessions.  <a href="classgmx_1_1test_1_1InteractiveTestHelper.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1LoggerTestHelper.xhtml">LoggerTestHelper</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class for tests to check output written to a logger.  <a href="classgmx_1_1test_1_1LoggerTestHelper.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handles comparison to test reference data.  <a href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceData.xhtml">TestReferenceData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handles creation of and comparison to test reference data.  <a href="classgmx_1_1test_1_1TestReferenceData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1StdioTestHelper.xhtml">StdioTestHelper</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class for tests where code reads directly from <code>stdin</code>.  <a href="classgmx_1_1test_1_1StdioTestHelper.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1StringTestBase.xhtml">StringTestBase</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test fixture for tests that check string formatting.  <a href="classgmx_1_1test_1_1StringTestBase.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1FloatingPointDifference.xhtml">FloatingPointDifference</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes and represents a floating-point difference value.  <a href="classgmx_1_1test_1_1FloatingPointDifference.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml">FloatingPointTolerance</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies a floating-point comparison tolerance and checks whether a difference is within the tolerance.  <a href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestException.xhtml">TestException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for reporting errors in tests.  <a href="classgmx_1_1test_1_1TestException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestFileManager.xhtml">TestFileManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper for tests that need input and output files.  <a href="classgmx_1_1test_1_1TestFileManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestFileInputRedirector.xhtml">TestFileInputRedirector</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">In-memory implementation for <a class="el" href="classgmx_1_1IFileInputRedirector.xhtml" title="Allows overriding file existence checks from code that supports it. ">IFileInputRedirector</a> for tests.  <a href="classgmx_1_1test_1_1TestFileInputRedirector.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestFileOutputRedirector.xhtml">TestFileOutputRedirector</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">In-memory implementation of <a class="el" href="classgmx_1_1IFileOutputRedirector.xhtml" title="Allows capturing stdout and file output from code that supports it. ">IFileOutputRedirector</a> for tests.  <a href="classgmx_1_1test_1_1TestFileOutputRedirector.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestOptionsProvider.xhtml">TestOptionsProvider</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides additional options for the test executable.  <a href="classgmx_1_1test_1_1TestOptionsProvider.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1ITextBlockMatcher.xhtml">ITextBlockMatcher</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a text matcher, matching text stream contents against reference data.  <a href="classgmx_1_1test_1_1ITextBlockMatcher.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1ITextBlockMatcherSettings.xhtml">ITextBlockMatcherSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a factory for creating a text matcher.  <a href="classgmx_1_1test_1_1ITextBlockMatcherSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1ExactTextMatch.xhtml">ExactTextMatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use an exact text match (the contents should be exactly equal).  <a href="classgmx_1_1test_1_1ExactTextMatch.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1NoTextMatch.xhtml">NoTextMatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do not match the text (the contents are ignored).  <a href="classgmx_1_1test_1_1NoTextMatch.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1XvgMatch.xhtml">XvgMatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Match the contents as an xvg file.  <a href="classgmx_1_1test_1_1XvgMatch.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a2987dd0c79606a4d1ab555d34c616906"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2987dd0c79606a4d1ab555d34c616906"></a>
typedef std::shared_ptr<br class="typebreak"/>
&lt; MockAnalysisDataModule &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a2987dd0c79606a4d1ab555d34c616906">MockAnalysisDataModulePointer</a></td></tr>
<tr class="memdesc:a2987dd0c79606a4d1ab555d34c616906"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer to manage an MockAnalysisDataModule object. <br/></td></tr>
<tr class="separator:a2987dd0c79606a4d1ab555d34c616906"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a466114917d782503fd2fb7d93f4befca"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a466114917d782503fd2fb7d93f4befca"></a>
typedef std::tuple&lt; int, int, <br class="typebreak"/>
BiasParams::DisableUpdateSkips &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a466114917d782503fd2fb7d93f4befca">BiasTestParameters</a></td></tr>
<tr class="memdesc:a466114917d782503fd2fb7d93f4befca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience typedef: growth type enum, potential type enum, disable update skips. <br/></td></tr>
<tr class="separator:a466114917d782503fd2fb7d93f4befca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaa8ca0139f36a88f147667766fc7e50"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aaaa8ca0139f36a88f147667766fc7e50"></a>
typedef <a class="el" href="namespacegmx.xhtml#a89d1da25b1e1f9331f1fe99b15072eac">gmx::unique_cptr</a><br class="typebreak"/>
&lt; gmx_pme_t, <a class="el" href="pme_8h.xhtml#ac5a75a2d477885fcb0260908f6e7b2f2">gmx_pme_destroy</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#aaaa8ca0139f36a88f147667766fc7e50">PmeSafePointer</a></td></tr>
<tr class="memdesc:aaaa8ca0139f36a88f147667766fc7e50"><td class="mdescLeft">&#160;</td><td class="mdescRight">A safe pointer type for PME. <br/></td></tr>
<tr class="separator:aaaa8ca0139f36a88f147667766fc7e50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acec376ab6eee2d37cad97e5a4fc3971b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="acec376ab6eee2d37cad97e5a4fc3971b"></a>
typedef <a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; const <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#acec376ab6eee2d37cad97e5a4fc3971b">ChargesVector</a></td></tr>
<tr class="memdesc:acec376ab6eee2d37cad97e5a4fc3971b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Charges. <br/></td></tr>
<tr class="separator:acec376ab6eee2d37cad97e5a4fc3971b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92d5f4a0dfe0e7321256dfe596b6f7bc"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a92d5f4a0dfe0e7321256dfe596b6f7bc"></a>
typedef std::vector&lt; <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">RVec</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a92d5f4a0dfe0e7321256dfe596b6f7bc">CoordinatesVector</a></td></tr>
<tr class="memdesc:a92d5f4a0dfe0e7321256dfe596b6f7bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Coordinates. <br/></td></tr>
<tr class="separator:a92d5f4a0dfe0e7321256dfe596b6f7bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad784e0ed3eca143a1a3a36da930300df"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad784e0ed3eca143a1a3a36da930300df"></a>
typedef <a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">RVec</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ad784e0ed3eca143a1a3a36da930300df">ForcesVector</a></td></tr>
<tr class="memdesc:ad784e0ed3eca143a1a3a36da930300df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Forces. <br/></td></tr>
<tr class="separator:ad784e0ed3eca143a1a3a36da930300df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9291e32dedddd7972e1738b3f5b1e00b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9291e32dedddd7972e1738b3f5b1e00b"></a>
typedef <a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; const <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">IVec</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a9291e32dedddd7972e1738b3f5b1e00b">GridLineIndicesVector</a></td></tr>
<tr class="memdesc:a9291e32dedddd7972e1738b3f5b1e00b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gridline indices. <br/></td></tr>
<tr class="separator:a9291e32dedddd7972e1738b3f5b1e00b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84f15596ff84b0232b7ded7fdf84225e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a84f15596ff84b0232b7ded7fdf84225e"></a>
typedef <a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; const <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a84f15596ff84b0232b7ded7fdf84225e">SplineParamsDimVector</a></td></tr>
<tr class="memdesc:a84f15596ff84b0232b7ded7fdf84225e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Spline parameters (theta or dtheta). A reference to a single dimension's spline data; this means (atomCount * pmeOrder) values or derivatives. <br/></td></tr>
<tr class="separator:a84f15596ff84b0232b7ded7fdf84225e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bfda26e28097ebe27d0a19c35bd3250"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8bfda26e28097ebe27d0a19c35bd3250"></a>
typedef std::array<br class="typebreak"/>
&lt; <a class="el" href="namespacegmx_1_1test.xhtml#a84f15596ff84b0232b7ded7fdf84225e">SplineParamsDimVector</a>, 3 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a8bfda26e28097ebe27d0a19c35bd3250">SplineParamsVector</a></td></tr>
<tr class="memdesc:a8bfda26e28097ebe27d0a19c35bd3250"><td class="mdescLeft">&#160;</td><td class="mdescRight">Spline parameters (theta or dtheta) in all 3 dimensions. <br/></td></tr>
<tr class="separator:a8bfda26e28097ebe27d0a19c35bd3250"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f4bf09a7384aa5d64f79d917f3c994a"><td class="memTemplParams" colspan="2"><a class="anchor" id="a4f4bf09a7384aa5d64f79d917f3c994a"></a>
template&lt;typename ValueType &gt; </td></tr>
<tr class="memitem:a4f4bf09a7384aa5d64f79d917f3c994a"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a4f4bf09a7384aa5d64f79d917f3c994a">SparseGridValuesInput</a> = std::map&lt; <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">IVec</a>, ValueType &gt;</td></tr>
<tr class="memdesc:a4f4bf09a7384aa5d64f79d917f3c994a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Non-zero grid values for test input; keys are 3d indices (IVec) <br/></td></tr>
<tr class="separator:a4f4bf09a7384aa5d64f79d917f3c994a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3abf010984bd9d86117531d390cc818"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae3abf010984bd9d86117531d390cc818"></a>
typedef <a class="el" href="namespacegmx_1_1test.xhtml#a4f4bf09a7384aa5d64f79d917f3c994a">SparseGridValuesInput</a><br class="typebreak"/>
&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ae3abf010984bd9d86117531d390cc818">SparseRealGridValuesInput</a></td></tr>
<tr class="memdesc:ae3abf010984bd9d86117531d390cc818"><td class="mdescLeft">&#160;</td><td class="mdescRight">Non-zero real grid values. <br/></td></tr>
<tr class="separator:ae3abf010984bd9d86117531d390cc818"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f33a6eb9abccf0718e28287d2f65c09"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6f33a6eb9abccf0718e28287d2f65c09"></a>
typedef <a class="el" href="namespacegmx_1_1test.xhtml#a4f4bf09a7384aa5d64f79d917f3c994a">SparseGridValuesInput</a><br class="typebreak"/>
&lt; t_complex &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a6f33a6eb9abccf0718e28287d2f65c09">SparseComplexGridValuesInput</a></td></tr>
<tr class="memdesc:a6f33a6eb9abccf0718e28287d2f65c09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Non-zero complex grid values. <br/></td></tr>
<tr class="separator:a6f33a6eb9abccf0718e28287d2f65c09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15668f52ff9a77a1a088482ee1379a38"><td class="memTemplParams" colspan="2"><a class="anchor" id="a15668f52ff9a77a1a088482ee1379a38"></a>
template&lt;typename ValueType &gt; </td></tr>
<tr class="memitem:a15668f52ff9a77a1a088482ee1379a38"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a15668f52ff9a77a1a088482ee1379a38">SparseGridValuesOutput</a> = std::map&lt; std::string, ValueType &gt;</td></tr>
<tr class="memdesc:a15668f52ff9a77a1a088482ee1379a38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Non-zero grid values for test output; keys are string representations of the cells' 3d indices (IVec); this allows for better sorting. <br/></td></tr>
<tr class="separator:a15668f52ff9a77a1a088482ee1379a38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5be7457b34714af9bb38e1796b6c120f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5be7457b34714af9bb38e1796b6c120f"></a>
typedef <a class="el" href="namespacegmx_1_1test.xhtml#a15668f52ff9a77a1a088482ee1379a38">SparseGridValuesOutput</a><br class="typebreak"/>
&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a5be7457b34714af9bb38e1796b6c120f">SparseRealGridValuesOutput</a></td></tr>
<tr class="memdesc:a5be7457b34714af9bb38e1796b6c120f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Non-zero real grid values. <br/></td></tr>
<tr class="separator:a5be7457b34714af9bb38e1796b6c120f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a629bd8118a331f7678290abd58efdcaf"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a629bd8118a331f7678290abd58efdcaf"></a>
typedef <a class="el" href="namespacegmx_1_1test.xhtml#a15668f52ff9a77a1a088482ee1379a38">SparseGridValuesOutput</a><br class="typebreak"/>
&lt; t_complex &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a629bd8118a331f7678290abd58efdcaf">SparseComplexGridValuesOutput</a></td></tr>
<tr class="memdesc:a629bd8118a331f7678290abd58efdcaf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Non-zero complex grid values. <br/></td></tr>
<tr class="separator:a629bd8118a331f7678290abd58efdcaf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74fe68cc05ba6596ac5d7ab6a397ab5f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a74fe68cc05ba6596ac5d7ab6a397ab5f"></a>
typedef std::array&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>, 3 *3 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a74fe68cc05ba6596ac5d7ab6a397ab5f">Matrix3x3</a></td></tr>
<tr class="memdesc:a74fe68cc05ba6596ac5d7ab6a397ab5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">TODO: make proper C++ matrix for the whole Gromacs, get rid of this. <br/></td></tr>
<tr class="separator:a74fe68cc05ba6596ac5d7ab6a397ab5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaab9d442c43c4adb6c71502f10c46ca0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aaab9d442c43c4adb6c71502f10c46ca0"></a>
typedef std::tuple&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>, <br class="typebreak"/>
<a class="el" href="namespacegmx_1_1test.xhtml#a74fe68cc05ba6596ac5d7ab6a397ab5f">Matrix3x3</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#aaab9d442c43c4adb6c71502f10c46ca0">PmeSolveOutput</a></td></tr>
<tr class="memdesc:aaab9d442c43c4adb6c71502f10c46ca0"><td class="mdescLeft">&#160;</td><td class="mdescRight">PME solver results - reciprocal energy and virial. <br/></td></tr>
<tr class="separator:aaab9d442c43c4adb6c71502f10c46ca0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae26ee03e11afa627d9bb0191ef09eb85"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae26ee03e11afa627d9bb0191ef09eb85"></a>
typedef std::list<br class="typebreak"/>
&lt; TestHardwareContext &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ae26ee03e11afa627d9bb0191ef09eb85">TestHardwareContexts</a></td></tr>
<tr class="memdesc:ae26ee03e11afa627d9bb0191ef09eb85"><td class="mdescLeft">&#160;</td><td class="mdescRight">A list of hardware contexts. <br/></td></tr>
<tr class="separator:ae26ee03e11afa627d9bb0191ef09eb85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae66ac556ce21b022b954b74a4862e68"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aae66ac556ce21b022b954b74a4862e68"></a>
typedef std::tuple&lt; int, bool, <br class="typebreak"/>
bool, bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#aae66ac556ce21b022b954b74a4862e68">SettleTestParameters</a></td></tr>
<tr class="memdesc:aae66ac556ce21b022b954b74a4862e68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience typedef. <br/></td></tr>
<tr class="separator:aae66ac556ce21b022b954b74a4862e68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71c173cf5a50348e7595fb6289e62f78"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a71c173cf5a50348e7595fb6289e62f78"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a71c173cf5a50348e7595fb6289e62f78">AllocatorTypesToTest</a> = ::testing::Types&lt; <a class="el" href="namespacegmx.xhtml#ac3ca6adcfda5170180c2140c7b2f9d47">AlignedAllocator</a>&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt;, <a class="el" href="namespacegmx.xhtml#af01c69345463ebb433d1fedfd356b74a">PageAlignedAllocator</a>&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt;, <a class="el" href="namespacegmx.xhtml#ac3ca6adcfda5170180c2140c7b2f9d47">AlignedAllocator</a>&lt; int &gt;, <a class="el" href="namespacegmx.xhtml#af01c69345463ebb433d1fedfd356b74a">PageAlignedAllocator</a>&lt; int &gt;, <a class="el" href="namespacegmx.xhtml#ac3ca6adcfda5170180c2140c7b2f9d47">AlignedAllocator</a>&lt; <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">RVec</a> &gt;, <a class="el" href="namespacegmx.xhtml#af01c69345463ebb433d1fedfd356b74a">PageAlignedAllocator</a>&lt; <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">RVec</a> &gt; &gt;</td></tr>
<tr class="memdesc:a71c173cf5a50348e7595fb6289e62f78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declare allocator types to test. <br/></td></tr>
<tr class="separator:a71c173cf5a50348e7595fb6289e62f78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaf53810da1094987057767b0714fb27"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="adaf53810da1094987057767b0714fb27"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; EnergyFrameReader &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#adaf53810da1094987057767b0714fb27">EnergyFrameReaderPtr</a></td></tr>
<tr class="memdesc:adaf53810da1094987057767b0714fb27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience smart pointer typedef. <br/></td></tr>
<tr class="separator:adaf53810da1094987057767b0714fb27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cf2e1e7224ea64c7762046eb635aaf7"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0cf2e1e7224ea64c7762046eb635aaf7"></a>
typedef <a class="el" href="namespacegmx.xhtml#a89d1da25b1e1f9331f1fe99b15072eac">unique_cptr</a>&lt; ener_file, <br class="typebreak"/>
done_ener_file &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a0cf2e1e7224ea64c7762046eb635aaf7">ener_file_ptr</a></td></tr>
<tr class="memdesc:a0cf2e1e7224ea64c7762046eb635aaf7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience smart pointer typedef. <br/></td></tr>
<tr class="separator:a0cf2e1e7224ea64c7762046eb635aaf7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7bf1e5c3b54dbe80eda1f2b355f3bf06"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7bf1e5c3b54dbe80eda1f2b355f3bf06"></a>
typedef <a class="el" href="namespacegmx.xhtml#a89d1da25b1e1f9331f1fe99b15072eac">unique_cptr</a><br class="typebreak"/>
&lt; t_enxframe, <a class="el" href="namespacegmx_1_1test.xhtml#aba30b242a0aed11e08b4c7f57dbac8e9">done_enxframe</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a7bf1e5c3b54dbe80eda1f2b355f3bf06">enxframe_ptr</a></td></tr>
<tr class="memdesc:a7bf1e5c3b54dbe80eda1f2b355f3bf06"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience smart pointer typedef. <br/></td></tr>
<tr class="separator:a7bf1e5c3b54dbe80eda1f2b355f3bf06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48cdc0c618f8f53c711a2a006d067c87"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a48cdc0c618f8f53c711a2a006d067c87"></a>
typedef gmx::test::ImdTestFixture&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a48cdc0c618f8f53c711a2a006d067c87">ImdTest</a></td></tr>
<tr class="memdesc:a48cdc0c618f8f53c711a2a006d067c87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test fixture for mdrun with IMD settings. <br/></td></tr>
<tr class="separator:a48cdc0c618f8f53c711a2a006d067c87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab370581bf9c1efd3678f7ec928a67324"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab370581bf9c1efd3678f7ec928a67324"></a>
typedef MultiSimTest&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ab370581bf9c1efd3678f7ec928a67324">MultiSimTerminationTest</a></td></tr>
<tr class="memdesc:ab370581bf9c1efd3678f7ec928a67324"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience typedef. <br/></td></tr>
<tr class="separator:ab370581bf9c1efd3678f7ec928a67324"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ff224dd094f2706d4224fadf046483a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2ff224dd094f2706d4224fadf046483a"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a2ff224dd094f2706d4224fadf046483a">CommandLinePointer</a></td></tr>
<tr class="memdesc:a2ff224dd094f2706d4224fadf046483a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience typedef. <br/></td></tr>
<tr class="separator:a2ff224dd094f2706d4224fadf046483a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18925960bf5114a04e0932b589ff75f0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a18925960bf5114a04e0932b589ff75f0"></a>
typedef MultiSimTest&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a18925960bf5114a04e0932b589ff75f0">ReplicaExchangeEnsembleTest</a></td></tr>
<tr class="memdesc:a18925960bf5114a04e0932b589ff75f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience typedef. <br/></td></tr>
<tr class="separator:a18925960bf5114a04e0932b589ff75f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0e6fbbc16a9a5ea5374565e86a58380"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac0e6fbbc16a9a5ea5374565e86a58380"></a>
typedef MultiSimTest&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ac0e6fbbc16a9a5ea5374565e86a58380">ReplicaExchangeTerminationTest</a></td></tr>
<tr class="memdesc:ac0e6fbbc16a9a5ea5374565e86a58380"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience typedef. <br/></td></tr>
<tr class="separator:ac0e6fbbc16a9a5ea5374565e86a58380"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28768cab0a7836447cc29bc00cf740f5"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a28768cab0a7836447cc29bc00cf740f5"></a>
typedef gmx::test::SwapTestFixture&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a28768cab0a7836447cc29bc00cf740f5">CompelTest</a></td></tr>
<tr class="memdesc:a28768cab0a7836447cc29bc00cf740f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test fixture for mdrun with "Computational Electrophysiology" settings,. <br/></td></tr>
<tr class="separator:a28768cab0a7836447cc29bc00cf740f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bf6cc9e49e6deb4469f79b764bf6680"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1bf6cc9e49e6deb4469f79b764bf6680"></a>
typedef MdrunTestFixture&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a1bf6cc9e49e6deb4469f79b764bf6680">MdrunTerminationTest</a></td></tr>
<tr class="memdesc:a1bf6cc9e49e6deb4469f79b764bf6680"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience typedef. <br/></td></tr>
<tr class="separator:a1bf6cc9e49e6deb4469f79b764bf6680"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27c86a6485f51dc8941f8e1b4a4d24a2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a27c86a6485f51dc8941f8e1b4a4d24a2"></a>
typedef <a class="el" href="namespacegmx.xhtml#a89d1da25b1e1f9331f1fe99b15072eac">unique_cptr</a><br class="typebreak"/>
&lt; gmx_output_env_t, <br class="typebreak"/>
output_env_done &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a27c86a6485f51dc8941f8e1b4a4d24a2">oenv_ptr</a></td></tr>
<tr class="memdesc:a27c86a6485f51dc8941f8e1b4a4d24a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience smart pointer typedef. <br/></td></tr>
<tr class="separator:a27c86a6485f51dc8941f8e1b4a4d24a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a460360400d7eca022312e7e68fafbc31"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a460360400d7eca022312e7e68fafbc31"></a>
typedef <a class="el" href="namespacegmx.xhtml#a89d1da25b1e1f9331f1fe99b15072eac">unique_cptr</a><br class="typebreak"/>
&lt; t_trxstatus, close_trx &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a460360400d7eca022312e7e68fafbc31">trxstatus_file_ptr</a></td></tr>
<tr class="memdesc:a460360400d7eca022312e7e68fafbc31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience smart pointer typedef. <br/></td></tr>
<tr class="separator:a460360400d7eca022312e7e68fafbc31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebae156df1e311f5de471ddd2be38784"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aebae156df1e311f5de471ddd2be38784"></a>
typedef <a class="el" href="namespacegmx.xhtml#a89d1da25b1e1f9331f1fe99b15072eac">unique_cptr</a><br class="typebreak"/>
&lt; t_trxframe, <a class="el" href="namespacegmx_1_1test.xhtml#a38e926a71822704ecee2753eec73d8e5">done_trxframe</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#aebae156df1e311f5de471ddd2be38784">trxframe_ptr</a></td></tr>
<tr class="memdesc:aebae156df1e311f5de471ddd2be38784"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience smart pointer typedef. <br/></td></tr>
<tr class="separator:aebae156df1e311f5de471ddd2be38784"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa37ca161973ffde331a669d4fa07b1a2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa37ca161973ffde331a669d4fa07b1a2"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; TrajectoryFrameReader &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#aa37ca161973ffde331a669d4fa07b1a2">TrajectoryFrameReaderPtr</a></td></tr>
<tr class="memdesc:aa37ca161973ffde331a669d4fa07b1a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience smart pointer typedef. <br/></td></tr>
<tr class="separator:aa37ca161973ffde331a669d4fa07b1a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96729fee4a52b37c0ae0784af1e9eaa3"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a96729fee4a52b37c0ae0784af1e9eaa3"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1test_1_1IFileMatcher.xhtml">IFileMatcher</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a96729fee4a52b37c0ae0784af1e9eaa3">FileMatcherPointer</a></td></tr>
<tr class="memdesc:a96729fee4a52b37c0ae0784af1e9eaa3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer for managing a <a class="el" href="classgmx_1_1test_1_1IFileMatcher.xhtml" title="Represents a file matcher, matching file contents against reference (or other) data. ">IFileMatcher</a>. <br/></td></tr>
<tr class="separator:a96729fee4a52b37c0ae0784af1e9eaa3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab67aed93a000e8ab0343052804f18d03"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab67aed93a000e8ab0343052804f18d03"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1test_1_1ITextBlockMatcher.xhtml">ITextBlockMatcher</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ab67aed93a000e8ab0343052804f18d03">TextBlockMatcherPointer</a></td></tr>
<tr class="memdesc:ab67aed93a000e8ab0343052804f18d03"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer for managing a <a class="el" href="classgmx_1_1test_1_1ITextBlockMatcher.xhtml" title="Represents a text matcher, matching text stream contents against reference data. ">ITextBlockMatcher</a>. <br/></td></tr>
<tr class="separator:ab67aed93a000e8ab0343052804f18d03"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a132e86b8150b498685276c35a87132a3"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a132e86b8150b498685276c35a87132a3">PmeSolveAlgorithm</a> { <b>Coulomb</b>, 
<b>LennardJones</b>
 }</td></tr>
<tr class="memdesc:a132e86b8150b498685276c35a87132a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">PME solver type. <br/></td></tr>
<tr class="separator:a132e86b8150b498685276c35a87132a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acaaca5966412c55da097f9e9b5254b7a"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> { <b>CPU</b>, 
<b>CUDA</b>
 }</td></tr>
<tr class="memdesc:acaaca5966412c55da097f9e9b5254b7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Hardware code path being tested. <br/></td></tr>
<tr class="separator:acaaca5966412c55da097f9e9b5254b7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad7a0c1ac11a9748556948309218fc08a"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gad7a0c1ac11a9748556948309218fc08a">ReferenceDataMode</a> { <a class="el" href="group__module__testutils.xhtml#ggad7a0c1ac11a9748556948309218fc08aaf5623014171529e1db8e56212300eb02">erefdataCompare</a>, 
<a class="el" href="group__module__testutils.xhtml#ggad7a0c1ac11a9748556948309218fc08aa00a47e9712009f3cf96d99a29e9624fe">erefdataCreateMissing</a>, 
<a class="el" href="group__module__testutils.xhtml#ggad7a0c1ac11a9748556948309218fc08aab551acebd822aba51d7f40993b418988">erefdataUpdateChanged</a>, 
<a class="el" href="group__module__testutils.xhtml#ggad7a0c1ac11a9748556948309218fc08aa67803fee1c34e6e1926d843157533d50">erefdataUpdateAll</a>
 }</td></tr>
<tr class="memdesc:gad7a0c1ac11a9748556948309218fc08a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Mode of operation for reference data handling.  <a href="group__module__testutils.xhtml#gad7a0c1ac11a9748556948309218fc08a">More...</a><br/></td></tr>
<tr class="separator:gad7a0c1ac11a9748556948309218fc08a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a3ea81dc3e7bfc85e1c5057fb18604955"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3ea81dc3e7bfc85e1c5057fb18604955"></a>
static AwhTestParameters&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a3ea81dc3e7bfc85e1c5057fb18604955">getAwhTestParameters</a> (int eawhgrowth, int eawhpotential)</td></tr>
<tr class="memdesc:a3ea81dc3e7bfc85e1c5057fb18604955"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to set up the C-style AWH parameters for the test. <br/></td></tr>
<tr class="separator:a3ea81dc3e7bfc85e1c5057fb18604955"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8afebcdee3e4040bd9e6eedba4e10a0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae8afebcdee3e4040bd9e6eedba4e10a0"></a>
static AwhTestParameters&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ae8afebcdee3e4040bd9e6eedba4e10a0">getAwhTestParameters</a> ()</td></tr>
<tr class="memdesc:ae8afebcdee3e4040bd9e6eedba4e10a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to set up the C-style AWH parameters for the test. <br/></td></tr>
<tr class="separator:ae8afebcdee3e4040bd9e6eedba4e10a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc50743650edc1d9c88b61b1e4bf6fdd"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="adc50743650edc1d9c88b61b1e4bf6fdd"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#adc50743650edc1d9c88b61b1e4bf6fdd">pmeSupportsInputForMode</a> (const t_inputrec *inputRec, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode)</td></tr>
<tr class="memdesc:adc50743650edc1d9c88b61b1e4bf6fdd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tells if this generally valid PME input is supported for this mode. <br/></td></tr>
<tr class="separator:adc50743650edc1d9c88b61b1e4bf6fdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a453ac8bc3aa58ada94a37b6a1568b4d8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a453ac8bc3aa58ada94a37b6a1568b4d8"></a>
gmx_uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a453ac8bc3aa58ada94a37b6a1568b4d8">getSplineModuliDoublePrecisionUlps</a> (int splineOrder)</td></tr>
<tr class="memdesc:a453ac8bc3aa58ada94a37b6a1568b4d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">For double precision checks, the recursive interpolation and use of trig functions in make_dft_mod require a lot more flops, and thus opportunity for deviation between implementations. <br/></td></tr>
<tr class="separator:a453ac8bc3aa58ada94a37b6a1568b4d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79eb0c50875853309a14a97b22db952e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a79eb0c50875853309a14a97b22db952e"></a>
static <a class="el" href="namespacegmx_1_1test.xhtml#aaaa8ca0139f36a88f147667766fc7e50">PmeSafePointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a79eb0c50875853309a14a97b22db952e">pmeInitInternal</a> (const t_inputrec *inputRec, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode, gmx_device_info_t *gpuInfo, size_t atomCount, const <a class="el" href="namespacegmx_1_1test.xhtml#a74fe68cc05ba6596ac5d7ab6a397ab5f">Matrix3x3</a> &amp;box, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> ewaldCoeff_q=1.0f, real ewaldCoeff_lj=1.0f)</td></tr>
<tr class="memdesc:a79eb0c50875853309a14a97b22db952e"><td class="mdescLeft">&#160;</td><td class="mdescRight">PME initialization - internal. <br/></td></tr>
<tr class="separator:a79eb0c50875853309a14a97b22db952e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4696b27a8e7eb4f4dfc0be4becb89d51"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacegmx_1_1test.xhtml#aaaa8ca0139f36a88f147667766fc7e50">PmeSafePointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a4696b27a8e7eb4f4dfc0be4becb89d51">pmeInitEmpty</a> (const t_inputrec *inputRec, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode, gmx_device_info_t *gpuInfo, const <a class="el" href="namespacegmx_1_1test.xhtml#a74fe68cc05ba6596ac5d7ab6a397ab5f">Matrix3x3</a> &amp;box, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> ewaldCoeff_q, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> ewaldCoeff_lj)</td></tr>
<tr class="memdesc:a4696b27a8e7eb4f4dfc0be4becb89d51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple PME initialization based on input, no atom data.  <a href="#a4696b27a8e7eb4f4dfc0be4becb89d51">More...</a><br/></td></tr>
<tr class="separator:a4696b27a8e7eb4f4dfc0be4becb89d51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a234314be1a2b322d08eb11462cc7f190"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacegmx_1_1test.xhtml#aaaa8ca0139f36a88f147667766fc7e50">PmeSafePointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a234314be1a2b322d08eb11462cc7f190">pmeInitAtoms</a> (const t_inputrec *inputRec, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode, gmx_device_info_t *gpuInfo, const <a class="el" href="namespacegmx_1_1test.xhtml#a92d5f4a0dfe0e7321256dfe596b6f7bc">CoordinatesVector</a> &amp;coordinates, const <a class="el" href="namespacegmx_1_1test.xhtml#acec376ab6eee2d37cad97e5a4fc3971b">ChargesVector</a> &amp;charges, const <a class="el" href="namespacegmx_1_1test.xhtml#a74fe68cc05ba6596ac5d7ab6a397ab5f">Matrix3x3</a> &amp;box)</td></tr>
<tr class="memdesc:a234314be1a2b322d08eb11462cc7f190"><td class="mdescLeft">&#160;</td><td class="mdescRight">PME initialization with atom data.  <a href="#a234314be1a2b322d08eb11462cc7f190">More...</a><br/></td></tr>
<tr class="separator:a234314be1a2b322d08eb11462cc7f190"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf6e22bacfca9058795e508a2982e341"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="abf6e22bacfca9058795e508a2982e341"></a>
static <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#abf6e22bacfca9058795e508a2982e341">pmeGetRealGridInternal</a> (const gmx_pme_t *pme)</td></tr>
<tr class="memdesc:abf6e22bacfca9058795e508a2982e341"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getting local PME real grid pointer for test I/O. <br/></td></tr>
<tr class="separator:abf6e22bacfca9058795e508a2982e341"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a6c86c8a2d4ad8f87e1a50aef85197a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1a6c86c8a2d4ad8f87e1a50aef85197a"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a1a6c86c8a2d4ad8f87e1a50aef85197a">pmeGetRealGridSizesInternal</a> (const gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode, <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">IVec</a> &amp;gridSize, <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">IVec</a> &amp;paddedGridSize)</td></tr>
<tr class="memdesc:a1a6c86c8a2d4ad8f87e1a50aef85197a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getting local PME real grid dimensions. <br/></td></tr>
<tr class="separator:a1a6c86c8a2d4ad8f87e1a50aef85197a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af56fcb04608b8e217093ce086e367ed2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af56fcb04608b8e217093ce086e367ed2"></a>
static t_complex *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#af56fcb04608b8e217093ce086e367ed2">pmeGetComplexGridInternal</a> (const gmx_pme_t *pme)</td></tr>
<tr class="memdesc:af56fcb04608b8e217093ce086e367ed2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getting local PME complex grid pointer for test I/O. <br/></td></tr>
<tr class="separator:af56fcb04608b8e217093ce086e367ed2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a611b81b5fa91c5af3a1d55f0dcccd403"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a611b81b5fa91c5af3a1d55f0dcccd403"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a611b81b5fa91c5af3a1d55f0dcccd403">pmeGetComplexGridSizesInternal</a> (const gmx_pme_t *pme, <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">IVec</a> &amp;gridSize, <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">IVec</a> &amp;paddedGridSize)</td></tr>
<tr class="memdesc:a611b81b5fa91c5af3a1d55f0dcccd403"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getting local PME complex grid dimensions. <br/></td></tr>
<tr class="separator:a611b81b5fa91c5af3a1d55f0dcccd403"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b502cb38e6a78aef8d61616f23d9b86"><td class="memTemplParams" colspan="2"><a class="anchor" id="a4b502cb38e6a78aef8d61616f23d9b86"></a>
template&lt;typename ValueType &gt; </td></tr>
<tr class="memitem:a4b502cb38e6a78aef8d61616f23d9b86"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a4b502cb38e6a78aef8d61616f23d9b86">pmeGetGridAndSizesInternal</a> (const gmx_pme_t *, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a>, ValueType *&amp;, <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">IVec</a> &amp;, <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">IVec</a> &amp;)</td></tr>
<tr class="memdesc:a4b502cb38e6a78aef8d61616f23d9b86"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getting the PME grid memory buffer and its sizes - template definition. <br/></td></tr>
<tr class="separator:a4b502cb38e6a78aef8d61616f23d9b86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa75b5c890774b90c501d9124e09e2e9b"><td class="memTemplParams" colspan="2"><a class="anchor" id="aa75b5c890774b90c501d9124e09e2e9b"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:aa75b5c890774b90c501d9124e09e2e9b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#aa75b5c890774b90c501d9124e09e2e9b">pmeGetGridAndSizesInternal&lt; real &gt;</a> (const gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&amp;grid, <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">IVec</a> &amp;gridSize, <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">IVec</a> &amp;paddedGridSize)</td></tr>
<tr class="memdesc:aa75b5c890774b90c501d9124e09e2e9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getting the PME real grid memory buffer and its sizes. <br/></td></tr>
<tr class="separator:aa75b5c890774b90c501d9124e09e2e9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ef1b83c5bdeff7aadb9cba1f3051132"><td class="memTemplParams" colspan="2"><a class="anchor" id="a0ef1b83c5bdeff7aadb9cba1f3051132"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a0ef1b83c5bdeff7aadb9cba1f3051132"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a0ef1b83c5bdeff7aadb9cba1f3051132">pmeGetGridAndSizesInternal&lt; t_complex &gt;</a> (const gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a>, t_complex *&amp;grid, <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">IVec</a> &amp;gridSize, <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">IVec</a> &amp;paddedGridSize)</td></tr>
<tr class="memdesc:a0ef1b83c5bdeff7aadb9cba1f3051132"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getting the PME complex grid memory buffer and its sizes. <br/></td></tr>
<tr class="separator:a0ef1b83c5bdeff7aadb9cba1f3051132"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ca32a3032115f7d3287676d2c0e6f17"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a1ca32a3032115f7d3287676d2c0e6f17">pmePerformSplineAndSpread</a> (gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode, bool computeSplines, bool spreadCharges)</td></tr>
<tr class="memdesc:a1ca32a3032115f7d3287676d2c0e6f17"><td class="mdescLeft">&#160;</td><td class="mdescRight">PME spline calculation and charge spreading.  <a href="#a1ca32a3032115f7d3287676d2c0e6f17">More...</a><br/></td></tr>
<tr class="separator:a1ca32a3032115f7d3287676d2c0e6f17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6688e1c60f83063c0a3941404363eaa"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa6688e1c60f83063c0a3941404363eaa"></a>
static <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#aa6688e1c60f83063c0a3941404363eaa">pmeGetSplineDataInternal</a> (const gmx_pme_t *pme, PmeSplineDataType type, int dimIndex)</td></tr>
<tr class="memdesc:aa6688e1c60f83063c0a3941404363eaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getting the internal spline data buffer pointer. <br/></td></tr>
<tr class="separator:aa6688e1c60f83063c0a3941404363eaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf397294cc77a33540b53c4d12b2303d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aaf397294cc77a33540b53c4d12b2303d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#aaf397294cc77a33540b53c4d12b2303d">pmePerformSolve</a> (const gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode, <a class="el" href="namespacegmx_1_1test.xhtml#a132e86b8150b498685276c35a87132a3">PmeSolveAlgorithm</a> method, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> cellVolume, GridOrdering gridOrdering, bool computeEnergyAndVirial)</td></tr>
<tr class="memdesc:aaf397294cc77a33540b53c4d12b2303d"><td class="mdescLeft">&#160;</td><td class="mdescRight">PME solving. <br/></td></tr>
<tr class="separator:aaf397294cc77a33540b53c4d12b2303d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac20e16ad5f2b3e1313c147f77623b40b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac20e16ad5f2b3e1313c147f77623b40b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ac20e16ad5f2b3e1313c147f77623b40b">pmePerformGather</a> (gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode, <a class="el" href="pme_8h.xhtml#acbcd1495b351f6a99fa2bf5b10aca640">PmeForceOutputHandling</a> inputTreatment, <a class="el" href="namespacegmx_1_1test.xhtml#ad784e0ed3eca143a1a3a36da930300df">ForcesVector</a> &amp;forces)</td></tr>
<tr class="memdesc:ac20e16ad5f2b3e1313c147f77623b40b"><td class="mdescLeft">&#160;</td><td class="mdescRight">PME force gathering. <br/></td></tr>
<tr class="separator:ac20e16ad5f2b3e1313c147f77623b40b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1edd6d8cc0e4fa820be454dbf3877f4f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1edd6d8cc0e4fa820be454dbf3877f4f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a1edd6d8cc0e4fa820be454dbf3877f4f">pmeFinalizeTest</a> (const gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode)</td></tr>
<tr class="memdesc:a1edd6d8cc0e4fa820be454dbf3877f4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">PME test finalization before fetching the outputs. <br/></td></tr>
<tr class="separator:a1edd6d8cc0e4fa820be454dbf3877f4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b2ab56f6d1dd12ead96b688493b1f3e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a3b2ab56f6d1dd12ead96b688493b1f3e">pmeSetSplineData</a> (const gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode, const <a class="el" href="namespacegmx_1_1test.xhtml#a84f15596ff84b0232b7ded7fdf84225e">SplineParamsDimVector</a> &amp;splineValues, PmeSplineDataType type, int dimIndex)</td></tr>
<tr class="memdesc:a3b2ab56f6d1dd12ead96b688493b1f3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Setting atom spline values/derivatives to be used in spread/gather.  <a href="#a3b2ab56f6d1dd12ead96b688493b1f3e">More...</a><br/></td></tr>
<tr class="separator:a3b2ab56f6d1dd12ead96b688493b1f3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c2390232e924060f609fe3b5e8cce88"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a9c2390232e924060f609fe3b5e8cce88">pmeSetGridLineIndices</a> (const gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode, const <a class="el" href="namespacegmx_1_1test.xhtml#a9291e32dedddd7972e1738b3f5b1e00b">GridLineIndicesVector</a> &amp;gridLineIndices)</td></tr>
<tr class="memdesc:a9c2390232e924060f609fe3b5e8cce88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Setting gridline indices to be used in spread/gather.  <a href="#a9c2390232e924060f609fe3b5e8cce88">More...</a><br/></td></tr>
<tr class="separator:a9c2390232e924060f609fe3b5e8cce88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60ef82e23c14b05f86ed003b1b6ba6e1"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a60ef82e23c14b05f86ed003b1b6ba6e1"></a>
size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a60ef82e23c14b05f86ed003b1b6ba6e1">pmeGetGridPlainIndexInternal</a> (const <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">IVec</a> &amp;index, const <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">IVec</a> &amp;paddedGridSize, GridOrdering gridOrdering)</td></tr>
<tr class="memdesc:a60ef82e23c14b05f86ed003b1b6ba6e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getting plain index into the complex 3d grid. <br/></td></tr>
<tr class="separator:a60ef82e23c14b05f86ed003b1b6ba6e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a0e5a4c3e4056aadc2f173f30997383"><td class="memTemplParams" colspan="2"><a class="anchor" id="a1a0e5a4c3e4056aadc2f173f30997383"></a>
template&lt;typename ValueType &gt; </td></tr>
<tr class="memitem:a1a0e5a4c3e4056aadc2f173f30997383"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a1a0e5a4c3e4056aadc2f173f30997383">pmeSetGridInternal</a> (const gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode, GridOrdering gridOrdering, const <a class="el" href="namespacegmx_1_1test.xhtml#a4f4bf09a7384aa5d64f79d917f3c994a">SparseGridValuesInput</a>&lt; ValueType &gt; &amp;gridValues)</td></tr>
<tr class="memdesc:a1a0e5a4c3e4056aadc2f173f30997383"><td class="mdescLeft">&#160;</td><td class="mdescRight">Setting real or complex grid. <br/></td></tr>
<tr class="separator:a1a0e5a4c3e4056aadc2f173f30997383"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6afa41f76ebc52a30125d51e9924748a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6afa41f76ebc52a30125d51e9924748a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a6afa41f76ebc52a30125d51e9924748a">pmeSetRealGrid</a> (const gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode, const <a class="el" href="namespacegmx_1_1test.xhtml#ae3abf010984bd9d86117531d390cc818">SparseRealGridValuesInput</a> &amp;gridValues)</td></tr>
<tr class="memdesc:a6afa41f76ebc52a30125d51e9924748a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Setting real grid to be used in gather. <br/></td></tr>
<tr class="separator:a6afa41f76ebc52a30125d51e9924748a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dfd0cc8da794cd800197ecee0533f8f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2dfd0cc8da794cd800197ecee0533f8f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a2dfd0cc8da794cd800197ecee0533f8f">pmeSetComplexGrid</a> (const gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode, GridOrdering gridOrdering, const <a class="el" href="namespacegmx_1_1test.xhtml#a6f33a6eb9abccf0718e28287d2f65c09">SparseComplexGridValuesInput</a> &amp;gridValues)</td></tr>
<tr class="memdesc:a2dfd0cc8da794cd800197ecee0533f8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Setting complex grid to be used in solve. <br/></td></tr>
<tr class="separator:a2dfd0cc8da794cd800197ecee0533f8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedc489ae843884b7f9a2d10ad9883565"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aedc489ae843884b7f9a2d10ad9883565"></a>
<a class="el" href="namespacegmx_1_1test.xhtml#a84f15596ff84b0232b7ded7fdf84225e">SplineParamsDimVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#aedc489ae843884b7f9a2d10ad9883565">pmeGetSplineData</a> (const gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode, PmeSplineDataType type, int dimIndex)</td></tr>
<tr class="memdesc:aedc489ae843884b7f9a2d10ad9883565"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getting the single dimension's spline values or derivatives. <br/></td></tr>
<tr class="separator:aedc489ae843884b7f9a2d10ad9883565"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a221a012f970602d4581d7187e95efb7c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a221a012f970602d4581d7187e95efb7c"></a>
<a class="el" href="namespacegmx_1_1test.xhtml#a9291e32dedddd7972e1738b3f5b1e00b">GridLineIndicesVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a221a012f970602d4581d7187e95efb7c">pmeGetGridlineIndices</a> (const gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode)</td></tr>
<tr class="memdesc:a221a012f970602d4581d7187e95efb7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getting the gridline indices. <br/></td></tr>
<tr class="separator:a221a012f970602d4581d7187e95efb7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c9cb972e48db3209997324bb8d9509d"><td class="memTemplParams" colspan="2"><a class="anchor" id="a8c9cb972e48db3209997324bb8d9509d"></a>
template&lt;typename ValueType &gt; </td></tr>
<tr class="memitem:a8c9cb972e48db3209997324bb8d9509d"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="namespacegmx_1_1test.xhtml#a15668f52ff9a77a1a088482ee1379a38">SparseGridValuesOutput</a><br class="typebreak"/>
&lt; ValueType &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a8c9cb972e48db3209997324bb8d9509d">pmeGetGridInternal</a> (const gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode, GridOrdering gridOrdering)</td></tr>
<tr class="memdesc:a8c9cb972e48db3209997324bb8d9509d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getting real or complex grid - only non zero values. <br/></td></tr>
<tr class="separator:a8c9cb972e48db3209997324bb8d9509d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9229059f2bbfab0c108248b965ce7e3c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9229059f2bbfab0c108248b965ce7e3c"></a>
<a class="el" href="namespacegmx_1_1test.xhtml#a5be7457b34714af9bb38e1796b6c120f">SparseRealGridValuesOutput</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a9229059f2bbfab0c108248b965ce7e3c">pmeGetRealGrid</a> (const gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode)</td></tr>
<tr class="memdesc:a9229059f2bbfab0c108248b965ce7e3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getting the real grid (spreading output of <a class="el" href="namespacegmx_1_1test.xhtml#a1ca32a3032115f7d3287676d2c0e6f17" title="PME spline calculation and charge spreading. ">pmePerformSplineAndSpread()</a>) <br/></td></tr>
<tr class="separator:a9229059f2bbfab0c108248b965ce7e3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2787a8ad9629a010c0afae83e1fe7f28"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2787a8ad9629a010c0afae83e1fe7f28"></a>
<a class="el" href="namespacegmx_1_1test.xhtml#a629bd8118a331f7678290abd58efdcaf">SparseComplexGridValuesOutput</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a2787a8ad9629a010c0afae83e1fe7f28">pmeGetComplexGrid</a> (const gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode, GridOrdering gridOrdering)</td></tr>
<tr class="memdesc:a2787a8ad9629a010c0afae83e1fe7f28"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getting the complex grid output of <a class="el" href="namespacegmx_1_1test.xhtml#aaf397294cc77a33540b53c4d12b2303d" title="PME solving. ">pmePerformSolve()</a> <br/></td></tr>
<tr class="separator:a2787a8ad9629a010c0afae83e1fe7f28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7099324c51ad1274c3a53440474ff0f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae7099324c51ad1274c3a53440474ff0f"></a>
<a class="el" href="namespacegmx_1_1test.xhtml#aaab9d442c43c4adb6c71502f10c46ca0">PmeSolveOutput</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ae7099324c51ad1274c3a53440474ff0f">pmeGetReciprocalEnergyAndVirial</a> (const gmx_pme_t *pme, <a class="el" href="namespacegmx_1_1test.xhtml#acaaca5966412c55da097f9e9b5254b7a">CodePath</a> mode, <a class="el" href="namespacegmx_1_1test.xhtml#a132e86b8150b498685276c35a87132a3">PmeSolveAlgorithm</a> method)</td></tr>
<tr class="memdesc:ae7099324c51ad1274c3a53440474ff0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getting the reciprocal energy and virial. <br/></td></tr>
<tr class="separator:ae7099324c51ad1274c3a53440474ff0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a6040a1ed80c537ea66b401402294a2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9a6040a1ed80c537ea66b401402294a2"></a>
const PmeTestEnvironment *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a9a6040a1ed80c537ea66b401402294a2">getPmeTestEnv</a> ()</td></tr>
<tr class="memdesc:a9a6040a1ed80c537ea66b401402294a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the test environment. <br/></td></tr>
<tr class="separator:a9a6040a1ed80c537ea66b401402294a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9c6f491fc3446bda1f53761a418d23b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ab9c6f491fc3446bda1f53761a418d23b">callAddGlobalTestEnvironment</a> ()</td></tr>
<tr class="memdesc:ab9c6f491fc3446bda1f53761a418d23b"><td class="mdescLeft">&#160;</td><td class="mdescRight">This constructs the test environment during setup of the unit test so that they can use the hardware context.  <a href="#ab9c6f491fc3446bda1f53761a418d23b">More...</a><br/></td></tr>
<tr class="separator:ab9c6f491fc3446bda1f53761a418d23b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7abd728c6a4748163af31f7287152ed4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7abd728c6a4748163af31f7287152ed4"></a>
static gmx_hw_info_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a7abd728c6a4748163af31f7287152ed4">hardwareInit</a> ()</td></tr>
<tr class="memdesc:a7abd728c6a4748163af31f7287152ed4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple hardware initialization. <br/></td></tr>
<tr class="separator:a7abd728c6a4748163af31f7287152ed4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f0a07eba4641c66724f87100aa8eaa0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacegmx_1_1test.xhtml#adaf53810da1094987057767b0714fb27">EnergyFrameReaderPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a9f0a07eba4641c66724f87100aa8eaa0">openEnergyFileToReadFields</a> (const std::string &amp;filename, const std::vector&lt; std::string &gt; &amp;requiredEnergyFieldNames)</td></tr>
<tr class="memdesc:a9f0a07eba4641c66724f87100aa8eaa0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Open the file and return an object that can read the required fields from frames of an .edr file.  <a href="#a9f0a07eba4641c66724f87100aa8eaa0">More...</a><br/></td></tr>
<tr class="separator:a9f0a07eba4641c66724f87100aa8eaa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32a4f67bb5cc6496f6bb9d68305af953"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a32a4f67bb5cc6496f6bb9d68305af953"></a>
static t_enxframe *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a32a4f67bb5cc6496f6bb9d68305af953">make_enxframe</a> ()</td></tr>
<tr class="memdesc:a32a4f67bb5cc6496f6bb9d68305af953"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to obtain resources. <br/></td></tr>
<tr class="separator:a32a4f67bb5cc6496f6bb9d68305af953"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba30b242a0aed11e08b4c7f57dbac8e9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#aba30b242a0aed11e08b4c7f57dbac8e9">done_enxframe</a> (t_enxframe *fr)</td></tr>
<tr class="memdesc:aba30b242a0aed11e08b4c7f57dbac8e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to clean up resources.  <a href="#aba30b242a0aed11e08b4c7f57dbac8e9">More...</a><br/></td></tr>
<tr class="separator:aba30b242a0aed11e08b4c7f57dbac8e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3294871401e53338ae611b132c508ae5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a3294871401e53338ae611b132c508ae5">compareFrames</a> (const std::pair&lt; EnergyFrame, EnergyFrame &gt; &amp;frames, <a class="el" href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml">FloatingPointTolerance</a> tolerance)</td></tr>
<tr class="memdesc:a3294871401e53338ae611b132c508ae5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare all fields of reference with all matching fields from test.  <a href="#a3294871401e53338ae611b132c508ae5">More...</a><br/></td></tr>
<tr class="separator:a3294871401e53338ae611b132c508ae5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d4ef01049444a472d033ac2ebe07b87"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3d4ef01049444a472d033ac2ebe07b87"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a3d4ef01049444a472d033ac2ebe07b87">organizeMdpFile</a> (SimulationRunner *runner)</td></tr>
<tr class="memdesc:a3d4ef01049444a472d033ac2ebe07b87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Build a simple .mdp file. <br/></td></tr>
<tr class="separator:a3d4ef01049444a472d033ac2ebe07b87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4abfd9db65ab579345f8925c6d0c4d52"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4abfd9db65ab579345f8925c6d0c4d52"></a>
static t_trxframe *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a4abfd9db65ab579345f8925c6d0c4d52">make_trxframe</a> ()</td></tr>
<tr class="memdesc:a4abfd9db65ab579345f8925c6d0c4d52"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to obtain resources. <br/></td></tr>
<tr class="separator:a4abfd9db65ab579345f8925c6d0c4d52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38e926a71822704ecee2753eec73d8e5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a38e926a71822704ecee2753eec73d8e5">done_trxframe</a> (t_trxframe *fr)</td></tr>
<tr class="memdesc:a38e926a71822704ecee2753eec73d8e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to clean up resources.  <a href="#a38e926a71822704ecee2753eec73d8e5">More...</a><br/></td></tr>
<tr class="separator:a38e926a71822704ecee2753eec73d8e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8c9242354b103b20a654fe674fe21ea"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ad8c9242354b103b20a654fe674fe21ea">compareFrames</a> (const std::pair&lt; TrajectoryFrame, TrajectoryFrame &gt; &amp;frames, <a class="el" href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml">FloatingPointTolerance</a> tolerance)</td></tr>
<tr class="memdesc:ad8c9242354b103b20a654fe674fe21ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare the fields of the two frames for equality within the <code>tolerance</code>.  <a href="#ad8c9242354b103b20a654fe674fe21ea">More...</a><br/></td></tr>
<tr class="separator:ad8c9242354b103b20a654fe674fe21ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab12f4df4bfc1db7445b7ad238d062913"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ab12f4df4bfc1db7445b7ad238d062913">checkConfFile</a> (<a class="el" href="classgmx_1_1TextInputStream.xhtml">TextInputStream</a> *input, <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a> *checker, const ConfMatchSettings &amp;settings)</td></tr>
<tr class="memdesc:ab12f4df4bfc1db7445b7ad238d062913"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds content of a gro file to <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml" title="Handles comparison to test reference data. ">TestReferenceChecker</a> object.  <a href="#ab12f4df4bfc1db7445b7ad238d062913">More...</a><br/></td></tr>
<tr class="separator:ab12f4df4bfc1db7445b7ad238d062913"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaba05f898b13924fdf611804f1c8ad52b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gaba05f898b13924fdf611804f1c8ad52b">getNumberOfTestMpiRanks</a> ()</td></tr>
<tr class="memdesc:gaba05f898b13924fdf611804f1c8ad52b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of MPI ranks to use for an MPI test.  <a href="group__module__testutils.xhtml#gaba05f898b13924fdf611804f1c8ad52b">More...</a><br/></td></tr>
<tr class="separator:gaba05f898b13924fdf611804f1c8ad52b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a434d56bea5a70c7b33f04a2d2370ef"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6a434d56bea5a70c7b33f04a2d2370ef"></a>
static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a6a434d56bea5a70c7b33f04a2d2370ef">convertDoubleReferenceValue</a> (const std::string &amp;value)</td></tr>
<tr class="memdesc:a6a434d56bea5a70c7b33f04a2d2370ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to parse a floating-point reference data value. <br/></td></tr>
<tr class="separator:a6a434d56bea5a70c7b33f04a2d2370ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac88155b9b78810f4117349514b93fe00"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gac88155b9b78810f4117349514b93fe00">initReferenceData</a> (<a class="el" href="classgmx_1_1IOptionsContainer.xhtml">IOptionsContainer</a> *options)</td></tr>
<tr class="memdesc:gac88155b9b78810f4117349514b93fe00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes reference data handling.  <a href="group__module__testutils.xhtml#gac88155b9b78810f4117349514b93fe00">More...</a><br/></td></tr>
<tr class="separator:gac88155b9b78810f4117349514b93fe00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26d94b8bbe10b3fa39e5c03ef3833b4a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a26d94b8bbe10b3fa39e5c03ef3833b4a">throwIfNonEmptyAndOnlyWhitespace</a> (const std::string &amp;s, const char *id)</td></tr>
<tr class="memdesc:a26d94b8bbe10b3fa39e5c03ef3833b4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Throw a <a class="el" href="classgmx_1_1test_1_1TestException.xhtml" title="Exception class for reporting errors in tests. ">TestException</a> if the caller tries to write particular refdata that can't work.  <a href="#a26d94b8bbe10b3fa39e5c03ef3833b4a">More...</a><br/></td></tr>
<tr class="separator:a26d94b8bbe10b3fa39e5c03ef3833b4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9b0da354984c1f3ef4e6530d54204cc1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga9b0da354984c1f3ef4e6530d54204cc1">registerTestOptions</a> (const char *name, <a class="el" href="classgmx_1_1test_1_1TestOptionsProvider.xhtml">TestOptionsProvider</a> *provider)</td></tr>
<tr class="memdesc:ga9b0da354984c1f3ef4e6530d54204cc1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registers a test option provider with the test framework.  <a href="group__module__testutils.xhtml#ga9b0da354984c1f3ef4e6530d54204cc1">More...</a><br/></td></tr>
<tr class="separator:ga9b0da354984c1f3ef4e6530d54204cc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabca45f04287813b96ad94839f9a10cb3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gabca45f04287813b96ad94839f9a10cb3">initTestOptions</a> (<a class="el" href="classgmx_1_1IOptionsContainer.xhtml">IOptionsContainer</a> *options)</td></tr>
<tr class="memdesc:gabca45f04287813b96ad94839f9a10cb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the options from all registered test providers.  <a href="group__module__testutils.xhtml#gabca45f04287813b96ad94839f9a10cb3">More...</a><br/></td></tr>
<tr class="separator:gabca45f04287813b96ad94839f9a10cb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26c7bb1a6f6c06b006a800f8d4d125ab"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a26c7bb1a6f6c06b006a800f8d4d125ab">checkXvgFile</a> (<a class="el" href="classgmx_1_1TextInputStream.xhtml">TextInputStream</a> *input, <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a> *checker, const XvgMatchSettings &amp;settings)</td></tr>
<tr class="memdesc:a26c7bb1a6f6c06b006a800f8d4d125ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds content of xvg file to <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml" title="Handles comparison to test reference data. ">TestReferenceChecker</a> object.  <a href="#a26c7bb1a6f6c06b006a800f8d4d125ab">More...</a><br/></td></tr>
<tr class="separator:a26c7bb1a6f6c06b006a800f8d4d125ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:ac206a59b89cb3065dd39e8ed2790affa"><td class="memItemLeft" align="right" valign="top">const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ac206a59b89cb3065dd39e8ed2790affa">g_coords</a> []</td></tr>
<tr class="memdesc:ac206a59b89cb3065dd39e8ed2790affa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Database of 21 test coordinates that represent a trajectory */.  <a href="#ac206a59b89cb3065dd39e8ed2790affa">More...</a><br/></td></tr>
<tr class="separator:ac206a59b89cb3065dd39e8ed2790affa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad675792bccbf836d034dc449bcf038d7"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad675792bccbf836d034dc449bcf038d7"></a>
constexpr gmx_int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ad675792bccbf836d034dc449bcf038d7">c_splineModuliSinglePrecisionUlps</a> = 1</td></tr>
<tr class="memdesc:ad675792bccbf836d034dc449bcf038d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Spline moduli are computed in double precision, so they're very good in single precision. <br/></td></tr>
<tr class="separator:ad675792bccbf836d034dc449bcf038d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc2b21942f523ce739d801ae0652e01e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="afc2b21942f523ce739d801ae0652e01e"></a>
const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#afc2b21942f523ce739d801ae0652e01e">g_positions</a> []</td></tr>
<tr class="memdesc:afc2b21942f523ce739d801ae0652e01e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Database of 51 water atom input positions (DIM reals per atom, taken from spc216.gro) for use as test inputs. <br/></td></tr>
<tr class="separator:afc2b21942f523ce739d801ae0652e01e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae09f7400768147dd31fe2778f92e7985"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae09f7400768147dd31fe2778f92e7985"></a>
matrix&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ae09f7400768147dd31fe2778f92e7985">g_box</a> = {{<a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>(1.86206), 0, 0}, {0, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>(1.86206), 0}, {0, 0, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>(1.86206)}}</td></tr>
<tr class="memdesc:ae09f7400768147dd31fe2778f92e7985"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple cubic simulation box to use in tests. <br/></td></tr>
<tr class="separator:ae09f7400768147dd31fe2778f92e7985"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b73ce4b125bef6a7142cff78280c2e9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8b73ce4b125bef6a7142cff78280c2e9"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a8b73ce4b125bef6a7142cff78280c2e9">g_butaneTopFileFormatString</a></td></tr>
<tr class="memdesc:a8b73ce4b125bef6a7142cff78280c2e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Format string for building a configurable .top file. <br/></td></tr>
<tr class="separator:a8b73ce4b125bef6a7142cff78280c2e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abedb4677d6c18c46b7287cd3427f4b68"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#abedb4677d6c18c46b7287cd3427f4b68">g_bDeleteFilesAfterTest</a> = true</td></tr>
<tr class="memdesc:abedb4677d6c18c46b7287cd3427f4b68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Controls whether <a class="el" href="classgmx_1_1test_1_1TestFileManager.xhtml" title="Helper for tests that need input and output files. ">TestFileManager</a> should delete temporary files after the test finishes.  <a href="#abedb4677d6c18c46b7287cd3427f4b68">More...</a><br/></td></tr>
<tr class="separator:abedb4677d6c18c46b7287cd3427f4b68"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ab9c6f491fc3446bda1f53761a418d23b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::callAddGlobalTestEnvironment </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This constructs the test environment during setup of the unit test so that they can use the hardware context. </p>
<p>Implement a stub definition for tests that don't ask for a real one.</p>
<p>Declare a function that all unit test implementations can use to set up any environment that they need.</p>
<p>When registering the unit test in CMake, the HARDWARE_DETECTION flag requires that the code for that unit test implements this function. Otherwise, a default stub implementation is provided.</p>
<p>This approach conforms to the recommendation by GoogleTest to arrange for the code that sets up the global test environment to be called from main, rather than potentially rely on brittle static initialization order. </p>

</div>
</div>
<a class="anchor" id="ab12f4df4bfc1db7445b7ad238d062913"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::checkConfFile </td>
          <td>(</td>
          <td class="paramtype">TextInputStream *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TestReferenceChecker *&#160;</td>
          <td class="paramname"><em>checker</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ConfMatchSettings &amp;&#160;</td>
          <td class="paramname"><em>settings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds content of a gro file to <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml" title="Handles comparison to test reference data. ">TestReferenceChecker</a> object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Stream that provides the gro content. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">checker</td><td>Checker to use. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">settings</td><td>Settings to use for matching.</td></tr>
  </table>
  </dd>
</dl>
<p>Parses a gro file from the input stream, and checks the contents against reference data (only first two lines for now).</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1test_1_1ConfMatch.xhtml" title="Match the contents as an gro file. ">ConfMatch</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a26c7bb1a6f6c06b006a800f8d4d125ab"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::checkXvgFile </td>
          <td>(</td>
          <td class="paramtype">TextInputStream *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TestReferenceChecker *&#160;</td>
          <td class="paramname"><em>checker</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const XvgMatchSettings &amp;&#160;</td>
          <td class="paramname"><em>settings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds content of xvg file to <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml" title="Handles comparison to test reference data. ">TestReferenceChecker</a> object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Stream that provides the xvg content. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">checker</td><td>Checker to use. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">settings</td><td>Settings to use for matching.</td></tr>
  </table>
  </dd>
</dl>
<p>Parses an xvg file from the input stream, and checks the contents against reference data. <code>settings</code> can be used to customize the matching. Only a single data set is supported (but multiple columns work). A subset of xmgrace formatting is also checked; static content that is nearly always the same is skipped.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1test_1_1XvgMatch.xhtml" title="Match the contents as an xvg file. ">XvgMatch</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad8c9242354b103b20a654fe674fe21ea"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::compareFrames </td>
          <td>(</td>
          <td class="paramtype">const std::pair&lt; TrajectoryFrame, TrajectoryFrame &gt; &amp;&#160;</td>
          <td class="paramname"><em>frames</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FloatingPointTolerance&#160;</td>
          <td class="paramname"><em>tolerance</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compare the fields of the two frames for equality within the <code>tolerance</code>. </p>
<p>The two frames are required to have valid and matching values for time and step. Positions, velocities and/or forces will be compared when present in both frames, and expected to be equal within <code>tolerance</code>. </p>

</div>
</div>
<a class="anchor" id="a3294871401e53338ae611b132c508ae5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::compareFrames </td>
          <td>(</td>
          <td class="paramtype">const std::pair&lt; EnergyFrame, EnergyFrame &gt; &amp;&#160;</td>
          <td class="paramname"><em>frames</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FloatingPointTolerance&#160;</td>
          <td class="paramname"><em>tolerance</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compare all fields of reference with all matching fields from test. </p>
<p>Ignore any key found in either <code>reference</code> or <code>test</code> that is not found in the other. For all keys found in both frames, compare the values with EXPECT_REAL_EQ_TOL and the given tolerance. </p>

</div>
</div>
<a class="anchor" id="aba30b242a0aed11e08b4c7f57dbac8e9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::done_enxframe </td>
          <td>(</td>
          <td class="paramtype">t_enxframe *&#160;</td>
          <td class="paramname"><em>fr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to clean up resources. </p>
<p>Helper function to free resources (NB free_enxframe only frees the contents, not the pointer itself) </p>

</div>
</div>
<a class="anchor" id="a38e926a71822704ecee2753eec73d8e5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::done_trxframe </td>
          <td>(</td>
          <td class="paramtype">t_trxframe *&#160;</td>
          <td class="paramname"><em>fr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to clean up resources. </p>
<p>Helper function to free all resources. </p>

</div>
</div>
<a class="anchor" id="a9f0a07eba4641c66724f87100aa8eaa0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacegmx_1_1test.xhtml#adaf53810da1094987057767b0714fb27">EnergyFrameReaderPtr</a> gmx::test::openEnergyFileToReadFields </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>requiredEnergyFieldNames</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Open the file and return an object that can read the required fields from frames of an .edr file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Name of the energy file to use </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">requiredEnergyFieldNames</td><td>Names of the energy fields that the caller requires to be present for an .edr file frame to be considered valid </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1FileIOError.xhtml" title="Exception class for file I/O errors. ">FileIOError</a></td><td>If the .edr file cannot be opened </td></tr>
    <tr><td class="paramname"><a class="el" href="classgmx_1_1APIError.xhtml" title="Exception class for incorrect use of an API. ">APIError</a></td><td>If any required energy field is not present in the file </td></tr>
    <tr><td class="paramname">std::bad_alloc</td><td>When out of memory</td></tr>
  </table>
  </dd>
</dl>
<p>This function is intended to have the main responsibility for making EnergyFrameReader objects. </p>

</div>
</div>
<a class="anchor" id="a234314be1a2b322d08eb11462cc7f190"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacegmx_1_1test.xhtml#aaaa8ca0139f36a88f147667766fc7e50">PmeSafePointer</a> gmx::test::pmeInitAtoms </td>
          <td>(</td>
          <td class="paramtype">const t_inputrec *&#160;</td>
          <td class="paramname"><em>inputRec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">CodePath&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_device_info_t *&#160;</td>
          <td class="paramname"><em>gpuInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const CoordinatesVector &amp;&#160;</td>
          <td class="paramname"><em>coordinates</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ChargesVector &amp;&#160;</td>
          <td class="paramname"><em>charges</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Matrix3x3 &amp;&#160;</td>
          <td class="paramname"><em>box</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>PME initialization with atom data. </p>
<p>PME initialization with atom data and system box. </p>

</div>
</div>
<a class="anchor" id="a4696b27a8e7eb4f4dfc0be4becb89d51"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacegmx_1_1test.xhtml#aaaa8ca0139f36a88f147667766fc7e50">PmeSafePointer</a> gmx::test::pmeInitEmpty </td>
          <td>(</td>
          <td class="paramtype">const t_inputrec *&#160;</td>
          <td class="paramname"><em>inputRec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">CodePath&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_device_info_t *&#160;</td>
          <td class="paramname"><em>gpuInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Matrix3x3 &amp;&#160;</td>
          <td class="paramname"><em>box</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>ewaldCoeff_q</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>ewaldCoeff_lj</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Simple PME initialization based on input, no atom data. </p>
<p>Simple PME initialization (no atom data) </p>

</div>
</div>
<a class="anchor" id="a1ca32a3032115f7d3287676d2c0e6f17"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::pmePerformSplineAndSpread </td>
          <td>(</td>
          <td class="paramtype">gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">CodePath&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>computeSplines</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>spreadCharges</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>PME spline calculation and charge spreading. </p>
<p>PME spline computation and charge spreading. </p>

</div>
</div>
<a class="anchor" id="a9c2390232e924060f609fe3b5e8cce88"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::pmeSetGridLineIndices </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">CodePath&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const GridLineIndicesVector &amp;&#160;</td>
          <td class="paramname"><em>gridLineIndices</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Setting gridline indices to be used in spread/gather. </p>
<p>Setting gridline indices be used in spread/gather. </p>

</div>
</div>
<a class="anchor" id="a3b2ab56f6d1dd12ead96b688493b1f3e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::pmeSetSplineData </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">CodePath&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const SplineParamsDimVector &amp;&#160;</td>
          <td class="paramname"><em>splineValues</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PmeSplineDataType&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dimIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Setting atom spline values/derivatives to be used in spread/gather. </p>
<p>Setting atom spline values or derivatives to be used in spread/gather. </p>

</div>
</div>
<a class="anchor" id="a26d94b8bbe10b3fa39e5c03ef3833b4a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::test::throwIfNonEmptyAndOnlyWhitespace </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Throw a <a class="el" href="classgmx_1_1test_1_1TestException.xhtml" title="Exception class for reporting errors in tests. ">TestException</a> if the caller tries to write particular refdata that can't work. </p>
<p>If the string to write is non-empty and has only whitespace, TinyXML2 can't read it correctly, so throw an exception for this case, so that we can't accidentally use it and run into mysterious problems.</p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000088">Todo:</a></b></dt><dd>Eliminate this limitation of TinyXML2. See e.g. <a href="https://github.com/leethomason/tinyxml2/issues/432">https://github.com/leethomason/tinyxml2/issues/432</a> </dd></dl>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a class="anchor" id="abedb4677d6c18c46b7287cd3427f4b68"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool gmx::test::g_bDeleteFilesAfterTest = true</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Controls whether <a class="el" href="classgmx_1_1test_1_1TestFileManager.xhtml" title="Helper for tests that need input and output files. ">TestFileManager</a> should delete temporary files after the test finishes. </p>

</div>
</div>
<a class="anchor" id="ac206a59b89cb3065dd39e8ed2790affa"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const double gmx::test::g_coords[]</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {</div>
<div class="line">    0.62,</div>
<div class="line">    0.70,</div>
<div class="line">    0.68,</div>
<div class="line">    0.80,</div>
<div class="line">    0.93,</div>
<div class="line">    0.87,</div>
<div class="line">    1.16,</div>
<div class="line">    1.14,</div>
<div class="line">    0.95,</div>
<div class="line">    0.89,</div>
<div class="line">    0.91,</div>
<div class="line">    0.86,</div>
<div class="line">    0.88,</div>
<div class="line">    0.79,</div>
<div class="line">    0.75,</div>
<div class="line">    0.82,</div>
<div class="line">    0.74,</div>
<div class="line">    0.70,</div>
<div class="line">    0.68,</div>
<div class="line">    0.71,</div>
<div class="line">    0.73</div>
<div class="line">}</div>
</div><!-- fragment -->
<p>Database of 21 test coordinates that represent a trajectory */. </p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:56:17 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
