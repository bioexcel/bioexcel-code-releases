<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::TextReader Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="classgmx_1_1TextReader.xhtml">TextReader</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="classgmx_1_1TextReader-members.xhtml">List of all members</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">gmx::TextReader Class Reference<div class="ingroups"><a class="el" href="group__group__libraryapi.xhtml">Library API</a> &#124; <a class="el" href="group__module__utility.xhtml">Low-Level Utilities (utility)</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;gromacs/utility/textreader.h&gt;</code></p>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Reads text from a <a class="el" href="classgmx_1_1TextInputStream.xhtml" title="Interface for reading text. ">TextInputStream</a>. </p>
<p>This class provides more formatted reading capabilities than reading raw lines from the stream (and a natural place to implement more such capabilities).</p>
<p>All methods that read from the stream can throw any exceptions that the underlying stream throws. </p>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a0bca11456ee1434b63a181610168cd87"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextReader.xhtml#a0bca11456ee1434b63a181610168cd87">TextReader</a> (const std::string &amp;filename)</td></tr>
<tr class="memdesc:a0bca11456ee1434b63a181610168cd87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a reader that reads from specified file.  <a href="#a0bca11456ee1434b63a181610168cd87">More...</a><br/></td></tr>
<tr class="separator:a0bca11456ee1434b63a181610168cd87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea62d36e19b8255aa17cdcc8837d7e29"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextReader.xhtml#aea62d36e19b8255aa17cdcc8837d7e29">TextReader</a> (<a class="el" href="classgmx_1_1TextInputStream.xhtml">TextInputStream</a> *stream)</td></tr>
<tr class="memdesc:aea62d36e19b8255aa17cdcc8837d7e29"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a reader that reads from specified stream.  <a href="#aea62d36e19b8255aa17cdcc8837d7e29">More...</a><br/></td></tr>
<tr class="separator:aea62d36e19b8255aa17cdcc8837d7e29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a325b37c56a1e7150059bc4214aeb8f57"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextReader.xhtml#a325b37c56a1e7150059bc4214aeb8f57">TextReader</a> (const <a class="el" href="namespacegmx.xhtml#a2fbe80608de8e00e55049289ef0148c1">TextInputStreamPointer</a> &amp;stream)</td></tr>
<tr class="memdesc:a325b37c56a1e7150059bc4214aeb8f57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a reader that reads from specified stream.  <a href="#a325b37c56a1e7150059bc4214aeb8f57">More...</a><br/></td></tr>
<tr class="separator:a325b37c56a1e7150059bc4214aeb8f57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a4578260ea39592894870109d92e723"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextReader.xhtml#a8a4578260ea39592894870109d92e723">readLine</a> (std::string *line)</td></tr>
<tr class="memdesc:a8a4578260ea39592894870109d92e723"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads a single line (including newline) from the stream.  <a href="#a8a4578260ea39592894870109d92e723">More...</a><br/></td></tr>
<tr class="separator:a8a4578260ea39592894870109d92e723"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe4ec4b5499f470a661252d344f39641"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextReader.xhtml#abe4ec4b5499f470a661252d344f39641">setTrimLeadingWhiteSpace</a> (bool doTrimming)</td></tr>
<tr class="memdesc:abe4ec4b5499f470a661252d344f39641"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets whether the reader should trim leading whitespace from a line before returning it.  <a href="#abe4ec4b5499f470a661252d344f39641">More...</a><br/></td></tr>
<tr class="separator:abe4ec4b5499f470a661252d344f39641"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b7948b47920c764546a3c1cacaf6669"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextReader.xhtml#a6b7948b47920c764546a3c1cacaf6669">setTrimTrailingWhiteSpace</a> (bool doTrimming)</td></tr>
<tr class="memdesc:a6b7948b47920c764546a3c1cacaf6669"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets whether the reader should trim trailing whitespace from a line before returning it.  <a href="#a6b7948b47920c764546a3c1cacaf6669">More...</a><br/></td></tr>
<tr class="separator:a6b7948b47920c764546a3c1cacaf6669"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af04d9ef2bd302d0212380d096f786d7f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextReader.xhtml#af04d9ef2bd302d0212380d096f786d7f">setTrimTrailingComment</a> (bool doTrimming, char commentChar)</td></tr>
<tr class="memdesc:af04d9ef2bd302d0212380d096f786d7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets whether the reader should trim at trailing comment from a line before returning it.  <a href="#af04d9ef2bd302d0212380d096f786d7f">More...</a><br/></td></tr>
<tr class="separator:af04d9ef2bd302d0212380d096f786d7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fe2f628d9f57041bd5c14a712e5c0b1"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextReader.xhtml#a0fe2f628d9f57041bd5c14a712e5c0b1">readAll</a> ()</td></tr>
<tr class="memdesc:a0fe2f628d9f57041bd5c14a712e5c0b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads all remaining lines from the stream as a single string.  <a href="#a0fe2f628d9f57041bd5c14a712e5c0b1">More...</a><br/></td></tr>
<tr class="separator:a0fe2f628d9f57041bd5c14a712e5c0b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a832ce4203c67ac5b86859954c8c96b8f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a832ce4203c67ac5b86859954c8c96b8f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextReader.xhtml#a832ce4203c67ac5b86859954c8c96b8f">close</a> ()</td></tr>
<tr class="memdesc:a832ce4203c67ac5b86859954c8c96b8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Closes the underlying stream. <br/></td></tr>
<tr class="separator:a832ce4203c67ac5b86859954c8c96b8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a1b45b91d2bf6a6b0142a9a48d469ca25"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextReader.xhtml#a1b45b91d2bf6a6b0142a9a48d469ca25">readFileToString</a> (const char *filename)</td></tr>
<tr class="memdesc:a1b45b91d2bf6a6b0142a9a48d469ca25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads contents of a file to a std::string.  <a href="#a1b45b91d2bf6a6b0142a9a48d469ca25">More...</a><br/></td></tr>
<tr class="separator:a1b45b91d2bf6a6b0142a9a48d469ca25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a335a497245704967c1431f364ea0ca00"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextReader.xhtml#a335a497245704967c1431f364ea0ca00">readFileToString</a> (const std::string &amp;filename)</td></tr>
<tr class="memdesc:a335a497245704967c1431f364ea0ca00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads contents of a file to a std::string.  <a href="#a335a497245704967c1431f364ea0ca00">More...</a><br/></td></tr>
<tr class="separator:a335a497245704967c1431f364ea0ca00"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a0bca11456ee1434b63a181610168cd87"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">gmx::TextReader::TextReader </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a reader that reads from specified file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Path to the file to open. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
    <tr><td class="paramname"><a class="el" href="classgmx_1_1FileIOError.xhtml" title="Exception class for file I/O errors. ">FileIOError</a></td><td>on any I/O error.</td></tr>
  </table>
  </dd>
</dl>
<p>This constructor is provided for convenience for reading directly from a file, without the need to construct multiple objects. </p>

</div>
</div>
<a class="anchor" id="aea62d36e19b8255aa17cdcc8837d7e29"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">gmx::TextReader::TextReader </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1TextInputStream.xhtml">TextInputStream</a> *&#160;</td>
          <td class="paramname"><em>stream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a reader that reads from specified stream. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">stream</td><td>Stream to read from. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>The caller is responsible of the lifetime of the stream (should remain in existence as long as the reader exists).</p>
<p>This constructor is provided for convenience for cases where the stream is not allocated with <code>new</code> and/or not managed by a std::shared_ptr (e.g., if the stream is an object on the stack). </p>

</div>
</div>
<a class="anchor" id="a325b37c56a1e7150059bc4214aeb8f57"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">gmx::TextReader::TextReader </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacegmx.xhtml#a2fbe80608de8e00e55049289ef0148c1">TextInputStreamPointer</a> &amp;&#160;</td>
          <td class="paramname"><em>stream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a reader that reads from specified stream. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">stream</td><td>Stream to read from. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>The reader keeps a reference to the stream, so the caller can pass in a temporary if necessary. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a0fe2f628d9f57041bd5c14a712e5c0b1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::TextReader::readAll </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reads all remaining lines from the stream as a single string. </p>
<dl class="section return"><dt>Returns</dt><dd>Full contents of the stream (from the current point to the end). </dd></dl>

</div>
</div>
<a class="anchor" id="a1b45b91d2bf6a6b0142a9a48d469ca25"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::TextReader::readFileToString </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reads contents of a file to a std::string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Name of the file to read. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The contents of <code>filename</code>. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
    <tr><td class="paramname"><a class="el" href="classgmx_1_1FileIOError.xhtml" title="Exception class for file I/O errors. ">FileIOError</a></td><td>on any I/O error. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a335a497245704967c1431f364ea0ca00"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::TextReader::readFileToString </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reads contents of a file to a std::string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Name of the file to read. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The contents of <code>filename</code>. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
    <tr><td class="paramname"><a class="el" href="classgmx_1_1FileIOError.xhtml" title="Exception class for file I/O errors. ">FileIOError</a></td><td>on any I/O error. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8a4578260ea39592894870109d92e723"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool gmx::TextReader::readLine </td>
          <td>(</td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>line</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reads a single line (including newline) from the stream. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">line</td><td>String to receive the line. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><code>false</code> if nothing was read because the file ended.</dd></dl>
<p>On error or when false is returned, <code>line</code> will be empty. Newlines will be returned as part of <code>line</code> if it was present in the stream. To loop over all lines in the stream, use: </p>
<div class="fragment"><div class="line">std::string line;</div>
<div class="line"><span class="keywordflow">while</span> (reader.readLine(&amp;line))</div>
<div class="line">{</div>
<div class="line">    <span class="comment">// ...</span></div>
<div class="line">}</div>
</div><!-- fragment --><p>Behaviours such as trimming whitespace or comments can be configured by calling other methods before this one. </p>

</div>
</div>
<a class="anchor" id="abe4ec4b5499f470a661252d344f39641"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::TextReader::setTrimLeadingWhiteSpace </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>doTrimming</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets whether the reader should trim leading whitespace from a line before returning it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">doTrimming</td><td>Whether trimming should be active. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af04d9ef2bd302d0212380d096f786d7f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::TextReader::setTrimTrailingComment </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>doTrimming</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>commentChar</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets whether the reader should trim at trailing comment from a line before returning it. </p>
<p>Note that comment trimming will precede whitespace trimming when both are active.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">commentChar</td><td>The character that begins a comment.</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">doTrimming</td><td>Whether trimming should be active. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6b7948b47920c764546a3c1cacaf6669"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::TextReader::setTrimTrailingWhiteSpace </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>doTrimming</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets whether the reader should trim trailing whitespace from a line before returning it. </p>
<p>Note that comment trimming will precede whitespace trimming when both are active.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">doTrimming</td><td>Whether trimming should be active. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/gromacs/utility/<a class="el" href="textreader_8h.xhtml">textreader.h</a></li>
<li>src/gromacs/utility/textreader.cpp</li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:56:17 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
