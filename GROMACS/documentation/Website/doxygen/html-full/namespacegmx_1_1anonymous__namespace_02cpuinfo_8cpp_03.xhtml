<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::anonymous_namespace{cpuinfo.cpp} Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li class="current"><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.xhtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.xhtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03.xhtml">anonymous_namespace{cpuinfo.cpp}</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">gmx::anonymous_namespace{cpuinfo.cpp} Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1_1ApicIdLayout.xhtml">ApicIdLayout</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The layout of the bits in the APIC ID.  <a href="structgmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1_1ApicIdLayout.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a44e29d4443e1e21b3d4ac6e2bf33bd3b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03.xhtml#a44e29d4443e1e21b3d4ac6e2bf33bd3b">trimString</a> (std::string *s)</td></tr>
<tr class="memdesc:a44e29d4443e1e21b3d4ac6e2bf33bd3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove initial and trailing whitespace from string.  <a href="#a44e29d4443e1e21b3d4ac6e2bf33bd3b">More...</a><br/></td></tr>
<tr class="separator:a44e29d4443e1e21b3d4ac6e2bf33bd3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bdcaf6e3d69274eccecdeeae144d1bd"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03.xhtml#a4bdcaf6e3d69274eccecdeeae144d1bd">executeX86CpuID</a> (unsigned int level, unsigned int ecxval, unsigned int *eax, unsigned int *ebx, unsigned int *ecx, unsigned int *edx)</td></tr>
<tr class="memdesc:a4bdcaf6e3d69274eccecdeeae144d1bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">execute x86 cpuid instructions with custom level and extended level  <a href="#a4bdcaf6e3d69274eccecdeeae144d1bd">More...</a><br/></td></tr>
<tr class="separator:a4bdcaf6e3d69274eccecdeeae144d1bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeee53d102302715b4473dca0c1dca042"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1CpuInfo.xhtml#acd7ff27553f3ff9fd1037c30c21a24f1">CpuInfo::Vendor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03.xhtml#aeee53d102302715b4473dca0c1dca042">detectX86Vendor</a> ()</td></tr>
<tr class="memdesc:aeee53d102302715b4473dca0c1dca042"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detect x86 vendors by using the cpuid assembly instructions.  <a href="#aeee53d102302715b4473dca0c1dca042">More...</a><br/></td></tr>
<tr class="separator:aeee53d102302715b4473dca0c1dca042"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f74228670a6b37eb982e7ee0b40e414"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03.xhtml#a7f74228670a6b37eb982e7ee0b40e414">setFeatureFromBit</a> (<a class="el" href="parser__internal_8h.xhtml#a8553aeb4ef79ad62e90241cf54e221d5">std::set</a>&lt; <a class="el" href="classgmx_1_1CpuInfo.xhtml#ac8981fb299411577dccba90b335a9085">CpuInfo::Feature</a> &gt; *featureSet, <a class="el" href="classgmx_1_1CpuInfo.xhtml#ac8981fb299411577dccba90b335a9085">CpuInfo::Feature</a> feature, unsigned int registerValue, unsigned char bit)</td></tr>
<tr class="memdesc:a7f74228670a6b37eb982e7ee0b40e414"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple utility function to set/clear feature in a set.  <a href="#a7f74228670a6b37eb982e7ee0b40e414">More...</a><br/></td></tr>
<tr class="separator:a7f74228670a6b37eb982e7ee0b40e414"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74301a4d26acaa1d54b9fa6307238ebe"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03.xhtml#a74301a4d26acaa1d54b9fa6307238ebe">detectX86Features</a> (std::string *brand, int *family, int *model, int *stepping, <a class="el" href="parser__internal_8h.xhtml#a8553aeb4ef79ad62e90241cf54e221d5">std::set</a>&lt; <a class="el" href="classgmx_1_1CpuInfo.xhtml#ac8981fb299411577dccba90b335a9085">CpuInfo::Feature</a> &gt; *features)</td></tr>
<tr class="memdesc:a74301a4d26acaa1d54b9fa6307238ebe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Process x86 cpuinfo features that are common to Intel and AMD CPUs.  <a href="#a74301a4d26acaa1d54b9fa6307238ebe">More...</a><br/></td></tr>
<tr class="separator:a74301a4d26acaa1d54b9fa6307238ebe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7e75432756584073167c1afadfbbafa"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; unsigned int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03.xhtml#ad7e75432756584073167c1afadfbbafa">detectX86ApicIDs</a> (bool haveX2Apic)</td></tr>
<tr class="memdesc:ad7e75432756584073167c1afadfbbafa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a vector with x86 APIC IDs for all threads.  <a href="#ad7e75432756584073167c1afadfbbafa">More...</a><br/></td></tr>
<tr class="separator:ad7e75432756584073167c1afadfbbafa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d715595b28fc59b8ad7293a0adf48fc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03.xhtml#a5d715595b28fc59b8ad7293a0adf48fc">renumberIndex</a> (std::vector&lt; unsigned int &gt; *v)</td></tr>
<tr class="memdesc:a5d715595b28fc59b8ad7293a0adf48fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Utility to renumber indices extracted from APIC IDs.  <a href="#a5d715595b28fc59b8ad7293a0adf48fc">More...</a><br/></td></tr>
<tr class="separator:a5d715595b28fc59b8ad7293a0adf48fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63909edc88ac1cf356d3d31f6f7e6de0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a63909edc88ac1cf356d3d31f6f7e6de0"></a>
<a class="el" href="structgmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1_1ApicIdLayout.xhtml">ApicIdLayout</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03.xhtml#a63909edc88ac1cf356d3d31f6f7e6de0">detectX2ApicIdLayout</a> ()</td></tr>
<tr class="memdesc:a63909edc88ac1cf356d3d31f6f7e6de0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detect the APIC ID layout for x2APIC. <br/></td></tr>
<tr class="separator:a63909edc88ac1cf356d3d31f6f7e6de0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba97bd2744c1dae8d09128ba04728b59"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structgmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1_1ApicIdLayout.xhtml">ApicIdLayout</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03.xhtml#aba97bd2744c1dae8d09128ba04728b59">detectAmdApicIdLayout</a> (unsigned int maxExtLevel)</td></tr>
<tr class="memdesc:aba97bd2744c1dae8d09128ba04728b59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detect the APIC ID layout for standard APIC or xAPIC on AMD.  <a href="#aba97bd2744c1dae8d09128ba04728b59">More...</a><br/></td></tr>
<tr class="separator:aba97bd2744c1dae8d09128ba04728b59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad382ef6cdcccb70e56a4c6036afd56e6"><td class="memItemLeft" align="right" valign="top">std::vector<br class="typebreak"/>
&lt; <a class="el" href="structgmx_1_1CpuInfo_1_1LogicalProcessor.xhtml">CpuInfo::LogicalProcessor</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03.xhtml#ad382ef6cdcccb70e56a4c6036afd56e6">detectX86LogicalProcessors</a> ()</td></tr>
<tr class="memdesc:ad382ef6cdcccb70e56a4c6036afd56e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Try to detect basic CPU topology information using x86 cpuid.  <a href="#ad382ef6cdcccb70e56a4c6036afd56e6">More...</a><br/></td></tr>
<tr class="separator:ad382ef6cdcccb70e56a4c6036afd56e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48bc3acdd308d4c69c76b239d96de2a2"><td class="memItemLeft" align="right" valign="top">const std::map&lt; std::string, <br class="typebreak"/>
std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03.xhtml#a48bc3acdd308d4c69c76b239d96de2a2">parseProcCpuInfo</a> ()</td></tr>
<tr class="memdesc:a48bc3acdd308d4c69c76b239d96de2a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse /proc/cpuinfo into a simple string map.  <a href="#a48bc3acdd308d4c69c76b239d96de2a2">More...</a><br/></td></tr>
<tr class="separator:a48bc3acdd308d4c69c76b239d96de2a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae08bde9ffb0fd51a7b932b30906876dd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1CpuInfo.xhtml#acd7ff27553f3ff9fd1037c30c21a24f1">CpuInfo::Vendor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03.xhtml#ae08bde9ffb0fd51a7b932b30906876dd">detectProcCpuInfoVendor</a> (const std::map&lt; std::string, std::string &gt; &amp;cpuInfo)</td></tr>
<tr class="memdesc:ae08bde9ffb0fd51a7b932b30906876dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Try to detect vendor from /proc/cpuinfo.  <a href="#ae08bde9ffb0fd51a7b932b30906876dd">More...</a><br/></td></tr>
<tr class="separator:ae08bde9ffb0fd51a7b932b30906876dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade3cf177f1036630e2a1bc0fbb7e8a42"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03.xhtml#ade3cf177f1036630e2a1bc0fbb7e8a42">detectProcCpuInfoIbm</a> (const std::map&lt; std::string, std::string &gt; &amp;cpuInfo, std::string *brand, <a class="el" href="parser__internal_8h.xhtml#a8553aeb4ef79ad62e90241cf54e221d5">std::set</a>&lt; <a class="el" href="classgmx_1_1CpuInfo.xhtml#ac8981fb299411577dccba90b335a9085">CpuInfo::Feature</a> &gt; *features)</td></tr>
<tr class="memdesc:ade3cf177f1036630e2a1bc0fbb7e8a42"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detect IBM processor name and features from /proc/cpuinfo.  <a href="#ade3cf177f1036630e2a1bc0fbb7e8a42">More...</a><br/></td></tr>
<tr class="separator:ade3cf177f1036630e2a1bc0fbb7e8a42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e4b8369e087c591af34972269eaedbd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03.xhtml#a3e4b8369e087c591af34972269eaedbd">detectProcCpuInfoArm</a> (const std::map&lt; std::string, std::string &gt; &amp;cpuInfo, std::string *brand, int *family, int *model, int *stepping, <a class="el" href="parser__internal_8h.xhtml#a8553aeb4ef79ad62e90241cf54e221d5">std::set</a>&lt; <a class="el" href="classgmx_1_1CpuInfo.xhtml#ac8981fb299411577dccba90b335a9085">CpuInfo::Feature</a> &gt; *features)</td></tr>
<tr class="memdesc:a3e4b8369e087c591af34972269eaedbd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detect ARM processor name and features from /proc/cpuinfo.  <a href="#a3e4b8369e087c591af34972269eaedbd">More...</a><br/></td></tr>
<tr class="separator:a3e4b8369e087c591af34972269eaedbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbf5bc3ecda5f4158fb6f39ca9408876"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03.xhtml#afbf5bc3ecda5f4158fb6f39ca9408876">detectProcCpuInfo</a> (<a class="el" href="classgmx_1_1CpuInfo.xhtml#acd7ff27553f3ff9fd1037c30c21a24f1">CpuInfo::Vendor</a> *vendor, std::string *brand, int *family, int *model, int *stepping, <a class="el" href="parser__internal_8h.xhtml#a8553aeb4ef79ad62e90241cf54e221d5">std::set</a>&lt; <a class="el" href="classgmx_1_1CpuInfo.xhtml#ac8981fb299411577dccba90b335a9085">CpuInfo::Feature</a> &gt; *features)</td></tr>
<tr class="memdesc:afbf5bc3ecda5f4158fb6f39ca9408876"><td class="mdescLeft">&#160;</td><td class="mdescRight">Try to detect vendor, cpu and features from /proc/cpuinfo.  <a href="#afbf5bc3ecda5f4158fb6f39ca9408876">More...</a><br/></td></tr>
<tr class="separator:afbf5bc3ecda5f4158fb6f39ca9408876"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="aba97bd2744c1dae8d09128ba04728b59"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structgmx_1_1anonymous__namespace_02cpuinfo_8cpp_03_1_1ApicIdLayout.xhtml">ApicIdLayout</a> gmx::anonymous_namespace{cpuinfo.cpp}::detectAmdApicIdLayout </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>maxExtLevel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Detect the APIC ID layout for standard APIC or xAPIC on AMD. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">maxExtLevel</td><td>The largest CPUID extended function input value supported by the processor implementation </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afbf5bc3ecda5f4158fb6f39ca9408876"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{cpuinfo.cpp}::detectProcCpuInfo </td>
          <td>(</td>
          <td class="paramtype">CpuInfo::Vendor *&#160;</td>
          <td class="paramname"><em>vendor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>brand</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>family</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>stepping</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="parser__internal_8h.xhtml#a8553aeb4ef79ad62e90241cf54e221d5">std::set</a>&lt; CpuInfo::Feature &gt; *&#160;</td>
          <td class="paramname"><em>features</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Try to detect vendor, cpu and features from /proc/cpuinfo. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">vendor</td><td>Detected hardware vendor </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">brand</td><td>String where to write the brand string </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">family</td><td>Major version of processor </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">model</td><td>Middle version of processor </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">stepping</td><td>Minor version of processor </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">features</td><td>Feature set where supported features are inserted</td></tr>
  </table>
  </dd>
</dl>
<p>This routine reads the /proc/cpuinfo file into a map and calls subroutines that attempt to parse by matching keys and values to known strings. It is much more fragile than our x86 detection, but it does not depend on specific system calls, intrinsics or assembly instructions. </p>

</div>
</div>
<a class="anchor" id="a3e4b8369e087c591af34972269eaedbd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{cpuinfo.cpp}::detectProcCpuInfoArm </td>
          <td>(</td>
          <td class="paramtype">const std::map&lt; std::string, std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>cpuInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>brand</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>family</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>stepping</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="parser__internal_8h.xhtml#a8553aeb4ef79ad62e90241cf54e221d5">std::set</a>&lt; CpuInfo::Feature &gt; *&#160;</td>
          <td class="paramname"><em>features</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Detect ARM processor name and features from /proc/cpuinfo. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">cpuInfo</td><td>Map returned from parseProcCpuinfo() </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">brand</td><td>String where to write the brand string </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">family</td><td>Major version of processor </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">model</td><td>Middle version of processor </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">stepping</td><td>Minor version of processor </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">features</td><td>Feature set where supported features are inserted</td></tr>
  </table>
  </dd>
</dl>
<p>This routine tries to match a few common labels in /proc/cpuinfo to see if we can find the processor name and features. It is likely fragile. </p>

</div>
</div>
<a class="anchor" id="ade3cf177f1036630e2a1bc0fbb7e8a42"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{cpuinfo.cpp}::detectProcCpuInfoIbm </td>
          <td>(</td>
          <td class="paramtype">const std::map&lt; std::string, std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>cpuInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>brand</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="parser__internal_8h.xhtml#a8553aeb4ef79ad62e90241cf54e221d5">std::set</a>&lt; CpuInfo::Feature &gt; *&#160;</td>
          <td class="paramname"><em>features</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Detect IBM processor name and features from /proc/cpuinfo. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">cpuInfo</td><td>Map returned from parseProcCpuinfo() </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">brand</td><td>String where to write the brand string </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">features</td><td>Feature set where supported features are inserted</td></tr>
  </table>
  </dd>
</dl>
<p>This routine tries to match a few common labels in /proc/cpuinfo to see if we can find the processor name and features. It is likely fragile. </p>

</div>
</div>
<a class="anchor" id="ae08bde9ffb0fd51a7b932b30906876dd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1CpuInfo.xhtml#acd7ff27553f3ff9fd1037c30c21a24f1">CpuInfo::Vendor</a> gmx::anonymous_namespace{cpuinfo.cpp}::detectProcCpuInfoVendor </td>
          <td>(</td>
          <td class="paramtype">const std::map&lt; std::string, std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>cpuInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Try to detect vendor from /proc/cpuinfo. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cpuInfo</td><td>Map returned from parseProcCpuinfo()</td></tr>
  </table>
  </dd>
</dl>
<p>This routine tries to match a few common labels in /proc/cpuinfo to see if they begin with the name of a standard vendor. If the file cannot be read or if no match is found, we return <a class="el" href="classgmx_1_1CpuInfo.xhtml#acd7ff27553f3ff9fd1037c30c21a24f1a88183b946cc5f0e8c96b2e66e1c74a7e" title="Unidentified. ">gmx::CpuInfo::Vendor::Unknown</a>. </p>

</div>
</div>
<a class="anchor" id="ad7e75432756584073167c1afadfbbafa"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;unsigned int&gt; gmx::anonymous_namespace{cpuinfo.cpp}::detectX86ApicIDs </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>haveX2Apic</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a vector with x86 APIC IDs for all threads. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">haveX2Apic</td><td>True if the processors supports x2APIC, otherwise vanilla APIC.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A new std::vector of unsigned integer APIC IDs, one for each logical processor in the system. </dd></dl>

</div>
</div>
<a class="anchor" id="a74301a4d26acaa1d54b9fa6307238ebe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{cpuinfo.cpp}::detectX86Features </td>
          <td>(</td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>brand</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>family</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>stepping</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="parser__internal_8h.xhtml#a8553aeb4ef79ad62e90241cf54e221d5">std::set</a>&lt; CpuInfo::Feature &gt; *&#160;</td>
          <td class="paramname"><em>features</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Process x86 cpuinfo features that are common to Intel and AMD CPUs. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">brand</td><td>String where to write the x86 brand string </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">family</td><td>Major version of processor </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">model</td><td>Middle version of processor </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">stepping</td><td>Minor version of processor </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">features</td><td>Feature set where supported features are inserted </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad382ef6cdcccb70e56a4c6036afd56e6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="structgmx_1_1CpuInfo_1_1LogicalProcessor.xhtml">CpuInfo::LogicalProcessor</a>&gt; gmx::anonymous_namespace{cpuinfo.cpp}::detectX86LogicalProcessors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Try to detect basic CPU topology information using x86 cpuid. </p>
<p>If x2APIC support is present, this is our first choice, otherwise we attempt to use old vanilla APIC.</p>
<dl class="section return"><dt>Returns</dt><dd>A new vector of entries with socket, core, hwthread information for each logical processor. </dd></dl>

</div>
</div>
<a class="anchor" id="aeee53d102302715b4473dca0c1dca042"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1CpuInfo.xhtml#acd7ff27553f3ff9fd1037c30c21a24f1">CpuInfo::Vendor</a> gmx::anonymous_namespace{cpuinfo.cpp}::detectX86Vendor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Detect x86 vendors by using the cpuid assembly instructions. </p>
<p>If support for the cpuid instruction is present, we check for Intel or AMD vendors.</p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classgmx_1_1CpuInfo.xhtml#acd7ff27553f3ff9fd1037c30c21a24f1aff97a9fdede09eaf6e1c8ec9f6a61dd5" title="GenuineIntel. ">gmx::CpuInfo::Vendor::Intel</a>, <a class="el" href="classgmx_1_1CpuInfo.xhtml#acd7ff27553f3ff9fd1037c30c21a24f1abfd16f84e6b719aba6717bf2f3eb3580" title="AuthenticAMD. ">gmx::CpuInfo::Vendor::Amd</a>. If neither Intel nor Amd can be identified, or if the code fails to execute, <a class="el" href="classgmx_1_1CpuInfo.xhtml#acd7ff27553f3ff9fd1037c30c21a24f1a88183b946cc5f0e8c96b2e66e1c74a7e" title="Unidentified. ">gmx::CpuInfo::Vendor::Unknown</a> is returned. </dd></dl>

</div>
</div>
<a class="anchor" id="a4bdcaf6e3d69274eccecdeeae144d1bd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx::anonymous_namespace{cpuinfo.cpp}::executeX86CpuID </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>level</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>ecxval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&#160;</td>
          <td class="paramname"><em>eax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&#160;</td>
          <td class="paramname"><em>ebx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&#160;</td>
          <td class="paramname"><em>ecx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&#160;</td>
          <td class="paramname"><em>edx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>execute x86 cpuid instructions with custom level and extended level </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">level</td><td>The main cpuid level (input argument for eax register) </td></tr>
    <tr><td class="paramname">ecxval</td><td>Extended level (input argument for ecx register) </td></tr>
    <tr><td class="paramname">eax</td><td>Output in eax register </td></tr>
    <tr><td class="paramname">ebx</td><td>Output in ebx register </td></tr>
    <tr><td class="paramname">ecx</td><td>Output in ecx register </td></tr>
    <tr><td class="paramname">edx</td><td>Output in edx register</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 on success, or non-zero if the instruction could not execute. </dd></dl>

</div>
</div>
<a class="anchor" id="a48bc3acdd308d4c69c76b239d96de2a2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::map&lt;std::string, std::string&gt; gmx::anonymous_namespace{cpuinfo.cpp}::parseProcCpuInfo </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Parse /proc/cpuinfo into a simple string map. </p>
<p>This routine will read the contents of /proc/cpuinfo, and for each line that is not empty we will assign the (trimmed) string to the right of the colon as a key, and the left-hand side as the value in the map. For multi-processor systems where lines are repeated the latter lines will overwrite the first occurrence.</p>
<dl class="section return"><dt>Returns</dt><dd>New map with the contents. If the file is not available, the returned map will be empty. </dd></dl>

</div>
</div>
<a class="anchor" id="a5d715595b28fc59b8ad7293a0adf48fc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{cpuinfo.cpp}::renumberIndex </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; *&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Utility to renumber indices extracted from APIC IDs. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">v</td><td>Vector with unsigned integer indices</td></tr>
  </table>
  </dd>
</dl>
<p>This routine returns the number of unique different elements found in the vector, and renumbers these starting from 0. For example, the vector {0,1,2,8,9,10,8,9,10,0,1,2} will be rewritten to {0,1,2,3,4,5,3,4,5,0,1,2}, and it returns 6 for the number of unique elements. </p>

</div>
</div>
<a class="anchor" id="a7f74228670a6b37eb982e7ee0b40e414"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{cpuinfo.cpp}::setFeatureFromBit </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="parser__internal_8h.xhtml#a8553aeb4ef79ad62e90241cf54e221d5">std::set</a>&lt; CpuInfo::Feature &gt; *&#160;</td>
          <td class="paramname"><em>featureSet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">CpuInfo::Feature&#160;</td>
          <td class="paramname"><em>feature</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>registerValue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>bit</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Simple utility function to set/clear feature in a set. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">featureSet</td><td>Pointer to the feature set to update </td></tr>
    <tr><td class="paramname">feature</td><td>The specific feature to set/clear </td></tr>
    <tr><td class="paramname">registerValue</td><td>Register value (returned from cpuid) </td></tr>
    <tr><td class="paramname">bit</td><td>Bit to check in registerValue. The feature will be added to the featureSet if this bit is set.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>Nothing is done if the bit is not set. In particular, this will not erase anything if the feature already exists in the set. </dd></dl>

</div>
</div>
<a class="anchor" id="a44e29d4443e1e21b3d4ac6e2bf33bd3b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{cpuinfo.cpp}::trimString </td>
          <td>(</td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove initial and trailing whitespace from string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>Pointer to string where whitespace will be removed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:57:30 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
