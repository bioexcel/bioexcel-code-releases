<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::anonymous_namespace{biasstate.cpp} Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li class="current"><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.xhtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.xhtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03.xhtml">anonymous_namespace{biasstate.cpp}</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">gmx::anonymous_namespace{biasstate.cpp} Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a35de2b696b3d831e104e467a04ee21cb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03.xhtml#a35de2b696b3d831e104e467a04ee21cb">sumOverSimulations</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; int &gt; arrayRef, const gmx_multisim_t *multiSimComm)</td></tr>
<tr class="memdesc:a35de2b696b3d831e104e467a04ee21cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sum an array over all simulations on the master rank of each simulation.  <a href="#a35de2b696b3d831e104e467a04ee21cb">More...</a><br/></td></tr>
<tr class="separator:a35de2b696b3d831e104e467a04ee21cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06d8443ed515a25d417f329b6fc5d2de"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03.xhtml#a06d8443ed515a25d417f329b6fc5d2de">sumOverSimulations</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; double &gt; arrayRef, const gmx_multisim_t *multiSimComm)</td></tr>
<tr class="memdesc:a06d8443ed515a25d417f329b6fc5d2de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sum an array over all simulations on the master rank of each simulation.  <a href="#a06d8443ed515a25d417f329b6fc5d2de">More...</a><br/></td></tr>
<tr class="separator:a06d8443ed515a25d417f329b6fc5d2de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea99634f5c1d73c18cb07a9db27ba78a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aea99634f5c1d73c18cb07a9db27ba78a"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03.xhtml#aea99634f5c1d73c18cb07a9db27ba78a">sumOverSimulations</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; T &gt; arrayRef, const t_commrec *commRecord, const gmx_multisim_t *multiSimComm)</td></tr>
<tr class="memdesc:aea99634f5c1d73c18cb07a9db27ba78a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sum an array over all simulations on all ranks of each simulation.  <a href="#aea99634f5c1d73c18cb07a9db27ba78a">More...</a><br/></td></tr>
<tr class="separator:aea99634f5c1d73c18cb07a9db27ba78a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a40c2b14cd270dbbeb93a2f05fc05b9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03.xhtml#a1a40c2b14cd270dbbeb93a2f05fc05b9">sumPmf</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; <a class="el" href="classgmx_1_1PointState.xhtml">PointState</a> &gt; pointState, int numSharedUpdate, const t_commrec *commRecord, const gmx_multisim_t *multiSimComm)</td></tr>
<tr class="memdesc:a1a40c2b14cd270dbbeb93a2f05fc05b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sum PMF over multiple simulations, when requested.  <a href="#a1a40c2b14cd270dbbeb93a2f05fc05b9">More...</a><br/></td></tr>
<tr class="separator:a1a40c2b14cd270dbbeb93a2f05fc05b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd2052f08307e882b2324bbd4d4404fe"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03.xhtml#abd2052f08307e882b2324bbd4d4404fe">freeEnergyMinimumValue</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const <a class="el" href="classgmx_1_1PointState.xhtml">PointState</a> &gt; pointState)</td></tr>
<tr class="memdesc:abd2052f08307e882b2324bbd4d4404fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the minimum free energy value.  <a href="#abd2052f08307e882b2324bbd4d4404fe">More...</a><br/></td></tr>
<tr class="separator:abd2052f08307e882b2324bbd4d4404fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf0135bd2340045f0513a7b84b9b9ea7"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03.xhtml#aaf0135bd2340045f0513a7b84b9b9ea7">biasedLogWeightFromPoint</a> (const std::vector&lt; <a class="el" href="structgmx_1_1DimParams.xhtml">DimParams</a> &gt; &amp;dimParams, const std::vector&lt; <a class="el" href="classgmx_1_1PointState.xhtml">PointState</a> &gt; &amp;points, const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid, int pointIndex, double pointBias, const <a class="el" href="namespacegmx.xhtml#a079fa4aee8e4c6663f35aa1d0f4bac4b">awh_dvec</a> value)</td></tr>
<tr class="memdesc:aaf0135bd2340045f0513a7b84b9b9ea7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find and return the log of the probability weight of a point given a coordinate value.  <a href="#aaf0135bd2340045f0513a7b84b9b9ea7">More...</a><br/></td></tr>
<tr class="separator:aaf0135bd2340045f0513a7b84b9b9ea7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afeb2ea590ea8dab586ca9959305c6dd9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03.xhtml#afeb2ea590ea8dab586ca9959305c6dd9">updateTargetDistribution</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; <a class="el" href="classgmx_1_1PointState.xhtml">PointState</a> &gt; pointState, const <a class="el" href="classgmx_1_1BiasParams.xhtml">BiasParams</a> &amp;params)</td></tr>
<tr class="memdesc:afeb2ea590ea8dab586ca9959305c6dd9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates the target distribution for all points.  <a href="#afeb2ea590ea8dab586ca9959305c6dd9">More...</a><br/></td></tr>
<tr class="separator:afeb2ea590ea8dab586ca9959305c6dd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bfa801f705286cbc0546376caf1de8a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03.xhtml#a9bfa801f705286cbc0546376caf1de8a">gridPointValueString</a> (const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid, int point)</td></tr>
<tr class="memdesc:a9bfa801f705286cbc0546376caf1de8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Puts together a string describing a grid point.  <a href="#a9bfa801f705286cbc0546376caf1de8a">More...</a><br/></td></tr>
<tr class="separator:a9bfa801f705286cbc0546376caf1de8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5ce0c3c41198ed59a80d2bdec6be746"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03.xhtml#aa5ce0c3c41198ed59a80d2bdec6be746">setHistogramUpdateScaleFactors</a> (const <a class="el" href="classgmx_1_1BiasParams.xhtml">BiasParams</a> &amp;params, double newHistogramSize, double oldHistogramSize, double *weightHistScaling, double *logPmfSumScaling)</td></tr>
<tr class="memdesc:aa5ce0c3c41198ed59a80d2bdec6be746"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the histogram rescaling factors needed to control the histogram size.  <a href="#aa5ce0c3c41198ed59a80d2bdec6be746">More...</a><br/></td></tr>
<tr class="separator:aa5ce0c3c41198ed59a80d2bdec6be746"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7aa37aeaccf1b231286dc3709eb63203"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03.xhtml#a7aa37aeaccf1b231286dc3709eb63203">mergeSharedUpdateLists</a> (std::vector&lt; int &gt; *updateList, int numPoints, const t_commrec *commRecord, const gmx_multisim_t *multiSimComm)</td></tr>
<tr class="memdesc:a7aa37aeaccf1b231286dc3709eb63203"><td class="mdescLeft">&#160;</td><td class="mdescRight">Merge update lists from multiple sharing simulations.  <a href="#a7aa37aeaccf1b231286dc3709eb63203">More...</a><br/></td></tr>
<tr class="separator:a7aa37aeaccf1b231286dc3709eb63203"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6420c1f1d5e452d108586787407d3b8c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03.xhtml#a6420c1f1d5e452d108586787407d3b8c">makeLocalUpdateList</a> (const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid, const std::vector&lt; <a class="el" href="classgmx_1_1PointState.xhtml">PointState</a> &gt; &amp;points, const <a class="el" href="namespacegmx.xhtml#a74baae008f9132c5e0daf2a02b122b3b">awh_ivec</a> originUpdatelist, const <a class="el" href="namespacegmx.xhtml#a74baae008f9132c5e0daf2a02b122b3b">awh_ivec</a> endUpdatelist, std::vector&lt; int &gt; *updateList)</td></tr>
<tr class="memdesc:a6420c1f1d5e452d108586787407d3b8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generate an update list of points sampled since the last update.  <a href="#a6420c1f1d5e452d108586787407d3b8c">More...</a><br/></td></tr>
<tr class="separator:a6420c1f1d5e452d108586787407d3b8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46bdf925776fbb73f5b64ade5554e5f1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03.xhtml#a46bdf925776fbb73f5b64ade5554e5f1">sumHistograms</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; <a class="el" href="classgmx_1_1PointState.xhtml">PointState</a> &gt; pointState, <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; double &gt; weightSumCovering, int numSharedUpdate, const t_commrec *commRecord, const gmx_multisim_t *multiSimComm, const std::vector&lt; int &gt; &amp;localUpdateList)</td></tr>
<tr class="memdesc:a46bdf925776fbb73f5b64ade5554e5f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add partial histograms (accumulating between updates) to accumulating histograms.  <a href="#a46bdf925776fbb73f5b64ade5554e5f1">More...</a><br/></td></tr>
<tr class="separator:a46bdf925776fbb73f5b64ade5554e5f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27577fbdc869882943b26c60ca5caa94"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02biasstate_8cpp_03.xhtml#a27577fbdc869882943b26c60ca5caa94">labelCoveredPoints</a> (const std::vector&lt; bool &gt; &amp;visited, const std::vector&lt; bool &gt; &amp;checkCovering, int numPoints, int period, int coverRadius, <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; int &gt; covered)</td></tr>
<tr class="memdesc:a27577fbdc869882943b26c60ca5caa94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Label points along an axis as covered or not.  <a href="#a27577fbdc869882943b26c60ca5caa94">More...</a><br/></td></tr>
<tr class="separator:a27577fbdc869882943b26c60ca5caa94"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="aaf0135bd2340045f0513a7b84b9b9ea7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double gmx::anonymous_namespace{biasstate.cpp}::biasedLogWeightFromPoint </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; DimParams &gt; &amp;&#160;</td>
          <td class="paramname"><em>dimParams</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; PointState &gt; &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Grid &amp;&#160;</td>
          <td class="paramname"><em>grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>pointIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>pointBias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const awh_dvec&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find and return the log of the probability weight of a point given a coordinate value. </p>
<p>The unnormalized weight is given by w(point|value) = exp(bias(point) - U(value,point)), where U is a harmonic umbrella potential.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimParams</td><td>The bias dimensions parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">points</td><td>The point state. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The grid. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pointIndex</td><td>Point to evaluate probability weight for. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pointBias</td><td><a class="el" href="classgmx_1_1Bias.xhtml" title="A bias acting on a multidimensional coordinate. ">Bias</a> for the point (as a log weight). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Coordinate value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the log of the biased probability weight. </dd></dl>

</div>
</div>
<a class="anchor" id="abd2052f08307e882b2324bbd4d4404fe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double gmx::anonymous_namespace{biasstate.cpp}::freeEnergyMinimumValue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const PointState &gt;&#160;</td>
          <td class="paramname"><em>pointState</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find the minimum free energy value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pointState</td><td>The state of the points. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the minimum free energy value. </dd></dl>

</div>
</div>
<a class="anchor" id="a9bfa801f705286cbc0546376caf1de8a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::anonymous_namespace{biasstate.cpp}::gridPointValueString </td>
          <td>(</td>
          <td class="paramtype">const Grid &amp;&#160;</td>
          <td class="paramname"><em>grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>point</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Puts together a string describing a grid point. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The grid. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">point</td><td><a class="el" href="classgmx_1_1Grid.xhtml" title="The grid, generally multidimensional and periodic. ">Grid</a> point index. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a string for the point. </dd></dl>

</div>
</div>
<a class="anchor" id="a27577fbdc869882943b26c60ca5caa94"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{biasstate.cpp}::labelCoveredPoints </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; bool &gt; &amp;&#160;</td>
          <td class="paramname"><em>visited</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; bool &gt; &amp;&#160;</td>
          <td class="paramname"><em>checkCovering</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>numPoints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>period</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>coverRadius</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; int &gt;&#160;</td>
          <td class="paramname"><em>covered</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Label points along an axis as covered or not. </p>
<p>A point is covered if it is surrounded by visited points up to a radius = coverRadius.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">visited</td><td>Visited? For each point. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">checkCovering</td><td>Check for covering? For each point. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">numPoints</td><td>The number of grid points along this dimension. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">period</td><td>Period in number of points. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">coverRadius</td><td>Cover radius, in points, needed for defining a point as covered. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">covered</td><td>In this array elements are 1 for covered points and 0 for non-covered points, this routine assumes that <code>covered</code> has at least size <code>numPoints</code>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6420c1f1d5e452d108586787407d3b8c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{biasstate.cpp}::makeLocalUpdateList </td>
          <td>(</td>
          <td class="paramtype">const Grid &amp;&#160;</td>
          <td class="paramname"><em>grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; PointState &gt; &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const awh_ivec&#160;</td>
          <td class="paramname"><em>originUpdatelist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const awh_ivec&#160;</td>
          <td class="paramname"><em>endUpdatelist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; *&#160;</td>
          <td class="paramname"><em>updateList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Generate an update list of points sampled since the last update. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The AWH bias. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">points</td><td>The point state. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">originUpdatelist</td><td>The origin of the rectangular region that has been sampled since last update. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">endUpdatelist</td><td>The end of the rectangular that has been sampled since last update. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">updateList</td><td>Local update list to set (assumed &gt;= npoints long). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7aa37aeaccf1b231286dc3709eb63203"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{biasstate.cpp}::mergeSharedUpdateLists </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; *&#160;</td>
          <td class="paramname"><em>updateList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>numPoints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_commrec *&#160;</td>
          <td class="paramname"><em>commRecord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_multisim_t *&#160;</td>
          <td class="paramname"><em>multiSimComm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Merge update lists from multiple sharing simulations. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">updateList</td><td>Update list for this simulation (assumed &gt;= npoints long). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">numPoints</td><td>Total number of points. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">commRecord</td><td>Struct for intra-simulation communication. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">multiSimComm</td><td>Struct for multi-simulation communication. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa5ce0c3c41198ed59a80d2bdec6be746"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{biasstate.cpp}::setHistogramUpdateScaleFactors </td>
          <td>(</td>
          <td class="paramtype">const BiasParams &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>newHistogramSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>oldHistogramSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>weightHistScaling</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>logPmfSumScaling</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the histogram rescaling factors needed to control the histogram size. </p>
<p>For sake of robustness, the reference weight histogram can grow at a rate different from the actual sampling rate. Typically this happens for a limited initial time, alternatively growth is scaled down by a constant factor for all times. Since the size of the reference histogram sets the size of the free energy update this should be reflected also in the PMF. Thus the PMF histogram needs to be rescaled too.</p>
<p>This function should only be called by the bias update function or wrapped by a function that knows what scale factors should be applied when, e.g, getSkippedUpdateHistogramScaleFactors().</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>The bias parameters. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">newHistogramSize</td><td>New reference weight histogram size. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">oldHistogramSize</td><td>Previous reference weight histogram size (before adding new samples). </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">weightHistScaling</td><td>Scaling factor for the reference weight histogram. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">logPmfSumScaling</td><td>Log of the scaling factor for the PMF histogram. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a46bdf925776fbb73f5b64ade5554e5f1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{biasstate.cpp}::sumHistograms </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; PointState &gt;&#160;</td>
          <td class="paramname"><em>pointState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; double &gt;&#160;</td>
          <td class="paramname"><em>weightSumCovering</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>numSharedUpdate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_commrec *&#160;</td>
          <td class="paramname"><em>commRecord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_multisim_t *&#160;</td>
          <td class="paramname"><em>multiSimComm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>localUpdateList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add partial histograms (accumulating between updates) to accumulating histograms. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pointState</td><td>The state of the points in the bias. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">weightSumCovering</td><td>The weights for checking covering. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">numSharedUpdate</td><td>The number of biases sharing the histrogram. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">commRecord</td><td>Struct for intra-simulation communication. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">multiSimComm</td><td>Struct for multi-simulation communication. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">localUpdateList</td><td>List of points with data. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a35de2b696b3d831e104e467a04ee21cb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{biasstate.cpp}::sumOverSimulations </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; int &gt;&#160;</td>
          <td class="paramname"><em>arrayRef</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_multisim_t *&#160;</td>
          <td class="paramname"><em>multiSimComm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sum an array over all simulations on the master rank of each simulation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">arrayRef</td><td>The data to sum. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">multiSimComm</td><td>Struct for multi-simulation communication. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a06d8443ed515a25d417f329b6fc5d2de"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{biasstate.cpp}::sumOverSimulations </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; double &gt;&#160;</td>
          <td class="paramname"><em>arrayRef</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_multisim_t *&#160;</td>
          <td class="paramname"><em>multiSimComm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sum an array over all simulations on the master rank of each simulation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">arrayRef</td><td>The data to sum. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">multiSimComm</td><td>Struct for multi-simulation communication. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aea99634f5c1d73c18cb07a9db27ba78a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{biasstate.cpp}::sumOverSimulations </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; T &gt;&#160;</td>
          <td class="paramname"><em>arrayRef</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_commrec *&#160;</td>
          <td class="paramname"><em>commRecord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_multisim_t *&#160;</td>
          <td class="paramname"><em>multiSimComm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sum an array over all simulations on all ranks of each simulation. </p>
<p>This assumes the data is identical on all ranks within each simulation.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">arrayRef</td><td>The data to sum. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">commRecord</td><td>Struct for intra-simulation communication. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">multiSimComm</td><td>Struct for multi-simulation communication. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a1a40c2b14cd270dbbeb93a2f05fc05b9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{biasstate.cpp}::sumPmf </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; PointState &gt;&#160;</td>
          <td class="paramname"><em>pointState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>numSharedUpdate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_commrec *&#160;</td>
          <td class="paramname"><em>commRecord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_multisim_t *&#160;</td>
          <td class="paramname"><em>multiSimComm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sum PMF over multiple simulations, when requested. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pointState</td><td>The state of the points in the bias. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">numSharedUpdate</td><td>The number of biases sharing the histogram. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">commRecord</td><td>Struct for intra-simulation communication. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">multiSimComm</td><td>Struct for multi-simulation communication. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afeb2ea590ea8dab586ca9959305c6dd9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{biasstate.cpp}::updateTargetDistribution </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; PointState &gt;&#160;</td>
          <td class="paramname"><em>pointState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const BiasParams &amp;&#160;</td>
          <td class="paramname"><em>params</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Updates the target distribution for all points. </p>
<p>The target distribution is always updated for all points at the same time.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pointState</td><td>The state of all points. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>The bias parameters. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:57:30 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
