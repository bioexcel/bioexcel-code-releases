<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/ewald/pme-gpu.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_8a21c46af9718d1f610eb513153099d7.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a46192700e9e8ed44c648f0a55ee9a53.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_69ef3b2caaf4d875cb2a3215a087d3ea.xhtml">ewald</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">pme-gpu.cpp File Reference<div class="ingroups"><a class="el" href="group__module__ewald.xhtml">Ewald-family treatments of long-ranged forces</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="gmxpre_8h.xhtml">gmxpre.h</a>&quot;</code><br/>
<code>#include &quot;config.h&quot;</code><br/>
<code>#include &lt;list&gt;</code><br/>
<code>#include &quot;<a class="el" href="ewald-utils_8h.xhtml">gromacs/ewald/ewald-utils.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="pme_8h.xhtml">gromacs/ewald/pme.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/fft/parallel_3dfft.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="invertmatrix_8h.xhtml">gromacs/math/invertmatrix.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/mdtypes/inputrec.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="exceptions_8h.xhtml">gromacs/utility/exceptions.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="fatalerror_8h.xhtml">gromacs/utility/fatalerror.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="gmxassert_8h.xhtml">gromacs/utility/gmxassert.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="stringutil_8h.xhtml">gromacs/utility/stringutil.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="pme-gpu-internal_8h.xhtml">pme-gpu-internal.h</a>&quot;</code><br/>
<code>#include &quot;pme-grid.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="pme-internal_8h.xhtml">pme-internal.h</a>&quot;</code><br/>
<code>#include &quot;pme-solve.h&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for pme-gpu.cpp:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="pme-gpu_8cpp__incl.svg" width="2596" height="619"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Implements high-level PME GPU functions which do not require GPU framework-specific code. </p>
<dl class="section author"><dt>Author</dt><dd>Aleksei Iupinov <a href="#" onclick="location.href='mai'+'lto:'+'a.y'+'up'+'ino'+'v@'+'gma'+'il'+'.co'+'m'; return false;">a.yup<span style="display: none;">.nosp@m.</span>inov<span style="display: none;">.nosp@m.</span>@gmai<span style="display: none;">.nosp@m.</span>l.co<span style="display: none;">.nosp@m.</span>m</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a9cfbe9fa691aabaf1a9e10fa06858c96"><td class="memItemLeft" align="right" valign="top"><a class="el" href="pme_8h.xhtml#adc082ed1af9a4868af13352373ed3791">PmeRunMode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu_8cpp.xhtml#a9cfbe9fa691aabaf1a9e10fa06858c96">pme_run_mode</a> (const gmx_pme_t *pme)</td></tr>
<tr class="memdesc:a9cfbe9fa691aabaf1a9e10fa06858c96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the active PME codepath (CPU, GPU, mixed).  <a href="#a9cfbe9fa691aabaf1a9e10fa06858c96">More...</a><br/></td></tr>
<tr class="separator:a9cfbe9fa691aabaf1a9e10fa06858c96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a877779523026740bee18ecc68ca9ab42"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu_8cpp.xhtml#a877779523026740bee18ecc68ca9ab42">pme_gpu_supports_input</a> (const t_inputrec *ir, std::string *error)</td></tr>
<tr class="memdesc:a877779523026740bee18ecc68ca9ab42"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the input system allows to run PME on GPU. TODO: this mostly duplicates an internal PME assert function <a class="el" href="pme-gpu-internal_8cpp.xhtml#a30f29ab01f4617cea28a55ee8552ee6a" title="Finds out if PME with given inputs is possible to run on GPU. ">pme_gpu_check_restrictions()</a>, except that works with a formed gmx_pme_t structure. Should that one go away/work with inputrec?  <a href="#a877779523026740bee18ecc68ca9ab42">More...</a><br/></td></tr>
<tr class="separator:a877779523026740bee18ecc68ca9ab42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e82dc29271032072ff9ffb1418a1954"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu_8cpp.xhtml#a9e82dc29271032072ff9ffb1418a1954">pme_gpu_reset_timings</a> (const gmx_pme_t *pme)</td></tr>
<tr class="memdesc:a9e82dc29271032072ff9ffb1418a1954"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets the PME GPU timings. To be called at the reset step.  <a href="#a9e82dc29271032072ff9ffb1418a1954">More...</a><br/></td></tr>
<tr class="separator:a9e82dc29271032072ff9ffb1418a1954"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadcdbd368ce25a9899c3cab4ec895cba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu_8cpp.xhtml#aadcdbd368ce25a9899c3cab4ec895cba">pme_gpu_get_timings</a> (const gmx_pme_t *pme, <a class="el" href="structgmx__wallclock__gpu__pme__t.xhtml">gmx_wallclock_gpu_pme_t</a> *timings)</td></tr>
<tr class="memdesc:aadcdbd368ce25a9899c3cab4ec895cba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the PME GPU timings to the <a class="el" href="structgmx__wallclock__gpu__pme__t.xhtml" title="GPU timings for PME. ">gmx_wallclock_gpu_pme_t</a> structure (for log output). To be called at the run end.  <a href="#aadcdbd368ce25a9899c3cab4ec895cba">More...</a><br/></td></tr>
<tr class="separator:aadcdbd368ce25a9899c3cab4ec895cba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af407346691cc3bb7fe4f5599d88fc7fc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu_8cpp.xhtml#af407346691cc3bb7fe4f5599d88fc7fc">parallel_3dfft_execute_gpu_wrapper</a> (gmx_pme_t *pme, const int gridIndex, enum <a class="el" href="fft_8h.xhtml#af2aa0b3a5f3a4339ecb2bd67cb8f8302">gmx_fft_direction</a> dir, gmx_wallcycle_t wcycle)</td></tr>
<tr class="memdesc:af407346691cc3bb7fe4f5599d88fc7fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">A convenience wrapper for launching either the GPU or CPU FFT.  <a href="#af407346691cc3bb7fe4f5599d88fc7fc">More...</a><br/></td></tr>
<tr class="separator:af407346691cc3bb7fe4f5599d88fc7fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2db9507955e1908ed647984a9c62f641"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu_8cpp.xhtml#a2db9507955e1908ed647984a9c62f641">pme_gpu_prepare_computation</a> (gmx_pme_t *pme, bool needToUpdateBox, const matrix box, gmx_wallcycle_t wcycle, int flags)</td></tr>
<tr class="memdesc:a2db9507955e1908ed647984a9c62f641"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepares PME on GPU computation (updating the box if needed)  <a href="#a2db9507955e1908ed647984a9c62f641">More...</a><br/></td></tr>
<tr class="separator:a2db9507955e1908ed647984a9c62f641"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa0375d05b42903aa5fa89ecca162848"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu_8cpp.xhtml#afa0375d05b42903aa5fa89ecca162848">pme_gpu_launch_spread</a> (gmx_pme_t *pme, const rvec *x, gmx_wallcycle_t wcycle)</td></tr>
<tr class="memdesc:afa0375d05b42903aa5fa89ecca162848"><td class="mdescLeft">&#160;</td><td class="mdescRight">Launches first stage of PME on GPU - H2D input transfers, spreading kernel, and D2H grid transfer if needed.  <a href="#afa0375d05b42903aa5fa89ecca162848">More...</a><br/></td></tr>
<tr class="separator:afa0375d05b42903aa5fa89ecca162848"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2efd4cd94bfa8f861b22936d2655b148"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu_8cpp.xhtml#a2efd4cd94bfa8f861b22936d2655b148">pme_gpu_launch_complex_transforms</a> (gmx_pme_t *pme, gmx_wallcycle_t wcycle)</td></tr>
<tr class="memdesc:a2efd4cd94bfa8f861b22936d2655b148"><td class="mdescLeft">&#160;</td><td class="mdescRight">Launches middle stages of PME (FFT R2C, solving, FFT C2R) either on GPU or on CPU, depending on the run mode.  <a href="#a2efd4cd94bfa8f861b22936d2655b148">More...</a><br/></td></tr>
<tr class="separator:a2efd4cd94bfa8f861b22936d2655b148"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48278ccbf705df4307a2e9cc984a6b3a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu_8cpp.xhtml#a48278ccbf705df4307a2e9cc984a6b3a">pme_gpu_launch_gather</a> (const gmx_pme_t *pme, gmx_wallcycle_t wcycle, <a class="el" href="pme_8h.xhtml#acbcd1495b351f6a99fa2bf5b10aca640">PmeForceOutputHandling</a> forceTreatment)</td></tr>
<tr class="memdesc:a48278ccbf705df4307a2e9cc984a6b3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Launches last stage of PME on GPU - force gathering and D2H force transfer.  <a href="#a48278ccbf705df4307a2e9cc984a6b3a">More...</a><br/></td></tr>
<tr class="separator:a48278ccbf705df4307a2e9cc984a6b3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b4dee276a6df89faed721da9567e963"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu_8cpp.xhtml#a4b4dee276a6df89faed721da9567e963">pme_gpu_get_staged_results</a> (const gmx_pme_t *pme, <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">gmx::RVec</a> &gt; *forces, matrix virial, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *energy)</td></tr>
<tr class="memdesc:a4b4dee276a6df89faed721da9567e963"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reduce staged virial and energy outputs.  <a href="#a4b4dee276a6df89faed721da9567e963">More...</a><br/></td></tr>
<tr class="separator:a4b4dee276a6df89faed721da9567e963"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f34e80606d5e1fbc6f825e3e9d6cffc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu_8cpp.xhtml#a3f34e80606d5e1fbc6f825e3e9d6cffc">pme_gpu_try_finish_task</a> (const gmx_pme_t *pme, gmx_wallcycle_t wcycle, <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">gmx::RVec</a> &gt; *forces, matrix virial, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *energy, <a class="el" href="gpu__utils_8h.xhtml#aab3d31c4bd3fcb89aa5d554b125b403e">GpuTaskCompletion</a> completionKind)</td></tr>
<tr class="memdesc:a3f34e80606d5e1fbc6f825e3e9d6cffc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attempts to complete PME GPU tasks.  <a href="#a3f34e80606d5e1fbc6f825e3e9d6cffc">More...</a><br/></td></tr>
<tr class="separator:a3f34e80606d5e1fbc6f825e3e9d6cffc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6675ff9b6502c7f5e4a9b43eb0103da3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu_8cpp.xhtml#a6675ff9b6502c7f5e4a9b43eb0103da3">pme_gpu_wait_finish_task</a> (const gmx_pme_t *pme, gmx_wallcycle_t wcycle, <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">gmx::RVec</a> &gt; *forces, matrix virial, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *energy)</td></tr>
<tr class="memdesc:a6675ff9b6502c7f5e4a9b43eb0103da3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Blocks until PME GPU tasks are completed, and gets the output forces and virial/energy (if they were to be computed).  <a href="#a6675ff9b6502c7f5e4a9b43eb0103da3">More...</a><br/></td></tr>
<tr class="separator:a6675ff9b6502c7f5e4a9b43eb0103da3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="af407346691cc3bb7fe4f5599d88fc7fc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void parallel_3dfft_execute_gpu_wrapper </td>
          <td>(</td>
          <td class="paramtype">gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>gridIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">enum <a class="el" href="fft_8h.xhtml#af2aa0b3a5f3a4339ecb2bd67cb8f8302">gmx_fft_direction</a>&#160;</td>
          <td class="paramname"><em>dir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A convenience wrapper for launching either the GPU or CPU FFT. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gridIndex</td><td>The grid index - should currently always be 0. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dir</td><td>The FFT direction enum. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>The wallclock counter. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4b4dee276a6df89faed721da9567e963"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void pme_gpu_get_staged_results </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">gmx::RVec</a> &gt; *&#160;</td>
          <td class="paramname"><em>forces</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">matrix&#160;</td>
          <td class="paramname"><em>virial</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>energy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reduce staged virial and energy outputs. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME data structure. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">forces</td><td>Output forces pointer, the internal ArrayRef pointers gets assigned to it. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">virial</td><td>The output virial matrix. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">energy</td><td>The output energy. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aadcdbd368ce25a9899c3cab4ec895cba"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_get_timings </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__wallclock__gpu__pme__t.xhtml">gmx_wallclock_gpu_pme_t</a> *&#160;</td>
          <td class="paramname"><em>timings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copies the PME GPU timings to the <a class="el" href="structgmx__wallclock__gpu__pme__t.xhtml" title="GPU timings for PME. ">gmx_wallclock_gpu_pme_t</a> structure (for log output). To be called at the run end. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">timings</td><td>The <a class="el" href="structgmx__wallclock__gpu__pme__t.xhtml" title="GPU timings for PME. ">gmx_wallclock_gpu_pme_t</a> structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2efd4cd94bfa8f861b22936d2655b148"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_launch_complex_transforms </td>
          <td>(</td>
          <td class="paramtype">gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Launches middle stages of PME (FFT R2C, solving, FFT C2R) either on GPU or on CPU, depending on the run mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME data structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>The wallclock counter. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a48278ccbf705df4307a2e9cc984a6b3a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_launch_gather </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="pme_8h.xhtml#acbcd1495b351f6a99fa2bf5b10aca640">PmeForceOutputHandling</a>&#160;</td>
          <td class="paramname"><em>forceTreatment</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Launches last stage of PME on GPU - force gathering and D2H force transfer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME data structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>The wallclock counter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">forceTreatment</td><td>Tells how data should be treated. The gathering kernel either stores the output reciprocal forces into the host array, or copies its contents to the GPU first and accumulates. The reduction is non-atomic. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afa0375d05b42903aa5fa89ecca162848"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_launch_spread </td>
          <td>(</td>
          <td class="paramtype">gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const rvec *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Launches first stage of PME on GPU - H2D input transfers, spreading kernel, and D2H grid transfer if needed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME data structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>The array of local atoms' coordinates. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>The wallclock counter. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2db9507955e1908ed647984a9c62f641"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_prepare_computation </td>
          <td>(</td>
          <td class="paramtype">gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>needToUpdateBox</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const matrix&#160;</td>
          <td class="paramname"><em>box</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Prepares PME on GPU computation (updating the box if needed) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME data structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">needToUpdateBox</td><td>Tells if the stored unit cell parameters should be updated from <code>box</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">box</td><td>The unit cell box. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>The wallclock counter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">flags</td><td>The combination of flags to affect this PME computation. The flags are the GMX_PME_ flags from <a class="el" href="pme_8h.xhtml" title="This file contains function declarations necessary for computing energies and forces for the PME long...">pme.h</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9e82dc29271032072ff9ffb1418a1954"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_reset_timings </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Resets the PME GPU timings. To be called at the reset step. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a877779523026740bee18ecc68ca9ab42"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pme_gpu_supports_input </td>
          <td>(</td>
          <td class="paramtype">const t_inputrec *&#160;</td>
          <td class="paramname"><em>ir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>error</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks whether the input system allows to run PME on GPU. TODO: this mostly duplicates an internal PME assert function <a class="el" href="pme-gpu-internal_8cpp.xhtml#a30f29ab01f4617cea28a55ee8552ee6a" title="Finds out if PME with given inputs is possible to run on GPU. ">pme_gpu_check_restrictions()</a>, except that works with a formed gmx_pme_t structure. Should that one go away/work with inputrec? </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ir</td><td>Input system. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">error</td><td>The error message if the input is not supported on GPU.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if PME can run on GPU with this input, false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a3f34e80606d5e1fbc6f825e3e9d6cffc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pme_gpu_try_finish_task </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">gmx::RVec</a> &gt; *&#160;</td>
          <td class="paramname"><em>forces</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">matrix&#160;</td>
          <td class="paramname"><em>virial</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>energy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="gpu__utils_8h.xhtml#aab3d31c4bd3fcb89aa5d554b125b403e">GpuTaskCompletion</a>&#160;</td>
          <td class="paramname"><em>completionKind</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Attempts to complete PME GPU tasks. </p>
<p>The <code>completionKind</code> argument controls whether the function blocks until all PME GPU tasks enqueued completed (as <a class="el" href="pme-gpu_8cpp.xhtml#a6675ff9b6502c7f5e4a9b43eb0103da3" title="Blocks until PME GPU tasks are completed, and gets the output forces and virial/energy (if they were ...">pme_gpu_wait_finish_task()</a> does) or only checks and returns immediately if they did not. When blocking or the tasks have completed it also gets the output forces by assigning the ArrayRef to the <code>forces</code> pointer passed in. Virial/energy are also outputs if they were to be computed.</p>
<p>Note: also launches the reinitalization of the PME output buffers. TODO: this should be moved out to avoid miscounting its wall-time (as wait iso launch).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME data structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>The wallclock counter. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">forces</td><td>The output forces. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">virial</td><td>The output virial matrix. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">energy</td><td>The output energy. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">completionKind</td><td>Indicates whether PME task completion should only be checked rather than waited for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the PME GPU tasks have completed </dd></dl>

</div>
</div>
<a class="anchor" id="a6675ff9b6502c7f5e4a9b43eb0103da3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_wait_finish_task </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">gmx::RVec</a> &gt; *&#160;</td>
          <td class="paramname"><em>forces</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">matrix&#160;</td>
          <td class="paramname"><em>virial</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>energy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Blocks until PME GPU tasks are completed, and gets the output forces and virial/energy (if they were to be computed). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME data structure. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">wcycle</td><td>The wallclock counter. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">forces</td><td>The output forces. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">virial</td><td>The output virial matrix. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">energy</td><td>The output energy. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9cfbe9fa691aabaf1a9e10fa06858c96"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="pme_8h.xhtml#adc082ed1af9a4868af13352373ed3791">PmeRunMode</a> pme_run_mode </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the active PME codepath (CPU, GPU, mixed). </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000025">Todo:</a></b></dt><dd>This is a rather static data that should be managed by the higher level task scheduler.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME data structure. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>active PME codepath. </dd></dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:57:16 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
