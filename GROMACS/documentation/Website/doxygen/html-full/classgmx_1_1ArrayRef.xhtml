<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::ArrayRef&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="classgmx_1_1ArrayRef-members.xhtml">List of all members</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#related">Related Functions</a>  </div>
  <div class="headertitle">
<div class="title">gmx::ArrayRef&lt; T &gt; Class Template Reference<div class="ingroups"><a class="el" href="group__group__publicapi.xhtml">Public API</a> &#124; <a class="el" href="group__module__utility.xhtml">Low-Level Utilities (utility)</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;gromacs/utility/arrayref.h&gt;</code></p>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br/>
class gmx::ArrayRef&lt; T &gt;</h3>

<p>STL-like container for an interface to a C array of T (or part of a std::vector&lt;T, A&gt; or std::array&lt;T&gt;). </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Value type of elements.</td></tr>
  </table>
  </dd>
</dl>
<p>This class provides an interface similar to <code>std::vector&lt;T, A&gt;</code>, with the following main differences:</p>
<ul>
<li>This class does not have its own storage. Instead, it references an existing array of values (either a C-style array or part of an existing std::vector&lt;T, A&gt; or std::array&lt;T&gt;).</li>
<li>It is only possible to modify the values themselves through <a class="el" href="classgmx_1_1ArrayRef.xhtml" title="STL-like container for an interface to a C array of T (or part of a std::vector&lt;T, A&gt; or std::array&lt;T&gt;). ">ArrayRef</a>; it is not possible to add or remove values.</li>
<li>Copying objects of this type is cheap, and the copies behave identically to the original object: the copy references the same set of values.</li>
</ul>
<p>This class is useful for writing wrappers that expose a view of the internal data stored as a single vector/array, which can be a whole or part of the underlying storage.</p>
<p>Methods in this class do not throw, except where indicated.</p>
<p>Note that due to a Doxygen limitation, the constructor that takes a C array whose size is known at compile time does not appear in the documentation.</p>
<p>To refer to const data of type T, ArrayRef&lt;const T&gt; is used. For both const and non-const std::vector and std::array an <a class="el" href="classgmx_1_1ArrayRef.xhtml" title="STL-like container for an interface to a C array of T (or part of a std::vector&lt;T, A&gt; or std::array&lt;T&gt;). ">ArrayRef</a> view can be created. Attempting to create a non-const <a class="el" href="classgmx_1_1ArrayRef.xhtml" title="STL-like container for an interface to a C array of T (or part of a std::vector&lt;T, A&gt; or std::array&lt;T&gt;). ">ArrayRef</a> of a const vector/array will result in a compiler error in the respective constructor.</p>
<p>For SIMD types there is template specialization available (e.g. ArrayRef&lt;SimdReal&gt;) in <a class="el" href="simd__memory_8h.xhtml" title="Declares SimdArrayRef. ">gromacs/simd/simd_memory.h</a> which should have the same functionality as much as possible.</p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000096">Todo:</a></b></dt><dd>This class is not complete. There are likely also methods missing (not required for current usage).</dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a830f66ddf148488309fe6de17574eaa7"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a830f66ddf148488309fe6de17574eaa7"></a>
typedef T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a830f66ddf148488309fe6de17574eaa7">value_type</a></td></tr>
<tr class="memdesc:a830f66ddf148488309fe6de17574eaa7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of values stored in the container. <br/></td></tr>
<tr class="separator:a830f66ddf148488309fe6de17574eaa7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12524b640e7173078bb983a450022346"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a12524b640e7173078bb983a450022346"></a>
typedef size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a12524b640e7173078bb983a450022346">size_type</a></td></tr>
<tr class="memdesc:a12524b640e7173078bb983a450022346"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type for representing size of the container. <br/></td></tr>
<tr class="separator:a12524b640e7173078bb983a450022346"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8895b8b6139fe648d37ea4e7e6bab050"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8895b8b6139fe648d37ea4e7e6bab050"></a>
typedef ptrdiff_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a8895b8b6139fe648d37ea4e7e6bab050">difference_type</a></td></tr>
<tr class="memdesc:a8895b8b6139fe648d37ea4e7e6bab050"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type for representing difference between two container indices. <br/></td></tr>
<tr class="separator:a8895b8b6139fe648d37ea4e7e6bab050"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa523e3e573d94dfb5f1c72b884c4174b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa523e3e573d94dfb5f1c72b884c4174b"></a>
typedef const T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#aa523e3e573d94dfb5f1c72b884c4174b">const_reference</a></td></tr>
<tr class="memdesc:aa523e3e573d94dfb5f1c72b884c4174b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Const reference to a container element. <br/></td></tr>
<tr class="separator:aa523e3e573d94dfb5f1c72b884c4174b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a813d9d7b5e1974c2062e990e096aca62"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a813d9d7b5e1974c2062e990e096aca62"></a>
typedef const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a813d9d7b5e1974c2062e990e096aca62">const_pointer</a></td></tr>
<tr class="memdesc:a813d9d7b5e1974c2062e990e096aca62"><td class="mdescLeft">&#160;</td><td class="mdescRight">Const pointer to a container element. <br/></td></tr>
<tr class="separator:a813d9d7b5e1974c2062e990e096aca62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf23600a1fe8cb879fe29ee366f6bb9d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="adf23600a1fe8cb879fe29ee366f6bb9d"></a>
typedef const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#adf23600a1fe8cb879fe29ee366f6bb9d">const_iterator</a></td></tr>
<tr class="memdesc:adf23600a1fe8cb879fe29ee366f6bb9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Const iterator type for the container. <br/></td></tr>
<tr class="separator:adf23600a1fe8cb879fe29ee366f6bb9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa7f6ef205b5793ab33635f887e9f0bb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aaa7f6ef205b5793ab33635f887e9f0bb"></a>
typedef T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#aaa7f6ef205b5793ab33635f887e9f0bb">reference</a></td></tr>
<tr class="memdesc:aaa7f6ef205b5793ab33635f887e9f0bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reference to a container element. <br/></td></tr>
<tr class="separator:aaa7f6ef205b5793ab33635f887e9f0bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d3b7bcef0b244efc5d3da2fe2278390"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7d3b7bcef0b244efc5d3da2fe2278390"></a>
typedef T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a7d3b7bcef0b244efc5d3da2fe2278390">pointer</a></td></tr>
<tr class="memdesc:a7d3b7bcef0b244efc5d3da2fe2278390"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pointer to a container element. <br/></td></tr>
<tr class="separator:a7d3b7bcef0b244efc5d3da2fe2278390"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4340dee5b6fad7c05e609f156ea54958"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4340dee5b6fad7c05e609f156ea54958"></a>
typedef T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a4340dee5b6fad7c05e609f156ea54958">iterator</a></td></tr>
<tr class="memdesc:a4340dee5b6fad7c05e609f156ea54958"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator type for the container. <br/></td></tr>
<tr class="separator:a4340dee5b6fad7c05e609f156ea54958"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a3dbf927d466898190de4a40584e96a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0a3dbf927d466898190de4a40584e96a"></a>
typedef std::reverse_iterator<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1ArrayRef.xhtml#a4340dee5b6fad7c05e609f156ea54958">iterator</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a0a3dbf927d466898190de4a40584e96a">reverse_iterator</a></td></tr>
<tr class="memdesc:a0a3dbf927d466898190de4a40584e96a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard reverse iterator. <br/></td></tr>
<tr class="separator:a0a3dbf927d466898190de4a40584e96a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af942afb4b73e5d3071f8d55e0a820595"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af942afb4b73e5d3071f8d55e0a820595"></a>
typedef std::reverse_iterator<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1ArrayRef.xhtml#adf23600a1fe8cb879fe29ee366f6bb9d">const_iterator</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#af942afb4b73e5d3071f8d55e0a820595">const_reverse_iterator</a></td></tr>
<tr class="memdesc:af942afb4b73e5d3071f8d55e0a820595"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard reverse iterator. <br/></td></tr>
<tr class="separator:af942afb4b73e5d3071f8d55e0a820595"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad114f59f4d3ab734ba5460ead18a110e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad114f59f4d3ab734ba5460ead18a110e"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#ad114f59f4d3ab734ba5460ead18a110e">ArrayRef</a> ()</td></tr>
<tr class="memdesc:ad114f59f4d3ab734ba5460ead18a110e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs an empty reference. <br/></td></tr>
<tr class="separator:ad114f59f4d3ab734ba5460ead18a110e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d71d8ba14566b55336d666b3666684c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a1d71d8ba14566b55336d666b3666684c">ArrayRef</a> (const <a class="el" href="structgmx_1_1EmptyArrayRef.xhtml">EmptyArrayRef</a> &amp;)</td></tr>
<tr class="memdesc:a1d71d8ba14566b55336d666b3666684c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs an empty reference.  <a href="#a1d71d8ba14566b55336d666b3666684c">More...</a><br/></td></tr>
<tr class="separator:a1d71d8ba14566b55336d666b3666684c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c3b09727267265b3ca1b024fdc31516"><td class="memTemplParams" colspan="2">template&lt;typename U , typename  = typename std::enable_if&lt;                         std::is_convertible&lt;typename std::remove_reference&lt;U&gt;::type::pointer,                                             pointer&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a5c3b09727267265b3ca1b024fdc31516"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a5c3b09727267265b3ca1b024fdc31516">ArrayRef</a> (U &amp;&amp;o)</td></tr>
<tr class="memdesc:a5c3b09727267265b3ca1b024fdc31516"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs a reference to a container or reference.  <a href="#a5c3b09727267265b3ca1b024fdc31516">More...</a><br/></td></tr>
<tr class="separator:a5c3b09727267265b3ca1b024fdc31516"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed10da86fd23acfb22a64c7c6699a5e3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#aed10da86fd23acfb22a64c7c6699a5e3">ArrayRef</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml#a7d3b7bcef0b244efc5d3da2fe2278390">pointer</a> <a class="el" href="classgmx_1_1ArrayRef.xhtml#a636969a931ec85c6f9b2e54e9bae11fb">begin</a>, <a class="el" href="classgmx_1_1ArrayRef.xhtml#a7d3b7bcef0b244efc5d3da2fe2278390">pointer</a> <a class="el" href="classgmx_1_1ArrayRef.xhtml#a93c4352348369bd6e6274c34c3a4462e">end</a>)</td></tr>
<tr class="memdesc:aed10da86fd23acfb22a64c7c6699a5e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs a reference to a particular range.  <a href="#aed10da86fd23acfb22a64c7c6699a5e3">More...</a><br/></td></tr>
<tr class="separator:aed10da86fd23acfb22a64c7c6699a5e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51deb1155148a8ff4d5fa135de5ae4ff"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a51deb1155148a8ff4d5fa135de5ae4ff"></a>
<a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a51deb1155148a8ff4d5fa135de5ae4ff">subArray</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml#a12524b640e7173078bb983a450022346">size_type</a> start, <a class="el" href="classgmx_1_1ArrayRef.xhtml#a12524b640e7173078bb983a450022346">size_type</a> count) const </td></tr>
<tr class="memdesc:a51deb1155148a8ff4d5fa135de5ae4ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a reference to part of the container. <br/></td></tr>
<tr class="separator:a51deb1155148a8ff4d5fa135de5ae4ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a636969a931ec85c6f9b2e54e9bae11fb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a636969a931ec85c6f9b2e54e9bae11fb"></a>
<a class="el" href="classgmx_1_1ArrayRef.xhtml#a4340dee5b6fad7c05e609f156ea54958">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a636969a931ec85c6f9b2e54e9bae11fb">begin</a> () const </td></tr>
<tr class="memdesc:a636969a931ec85c6f9b2e54e9bae11fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to the beginning of the container. <br/></td></tr>
<tr class="separator:a636969a931ec85c6f9b2e54e9bae11fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93c4352348369bd6e6274c34c3a4462e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a93c4352348369bd6e6274c34c3a4462e"></a>
<a class="el" href="classgmx_1_1ArrayRef.xhtml#a4340dee5b6fad7c05e609f156ea54958">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a93c4352348369bd6e6274c34c3a4462e">end</a> () const </td></tr>
<tr class="memdesc:a93c4352348369bd6e6274c34c3a4462e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to the end of the container. <br/></td></tr>
<tr class="separator:a93c4352348369bd6e6274c34c3a4462e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43e83ba6a7944e7e55123c4d4ab0435c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a43e83ba6a7944e7e55123c4d4ab0435c"></a>
<a class="el" href="classgmx_1_1ArrayRef.xhtml#a0a3dbf927d466898190de4a40584e96a">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a43e83ba6a7944e7e55123c4d4ab0435c">rbegin</a> () const </td></tr>
<tr class="memdesc:a43e83ba6a7944e7e55123c4d4ab0435c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to the reverse beginning of the container. <br/></td></tr>
<tr class="separator:a43e83ba6a7944e7e55123c4d4ab0435c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e924e1aa00418f3079d16980ee3a9d6"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7e924e1aa00418f3079d16980ee3a9d6"></a>
<a class="el" href="classgmx_1_1ArrayRef.xhtml#a0a3dbf927d466898190de4a40584e96a">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a7e924e1aa00418f3079d16980ee3a9d6">rend</a> () const </td></tr>
<tr class="memdesc:a7e924e1aa00418f3079d16980ee3a9d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to the reverse end of the container. <br/></td></tr>
<tr class="separator:a7e924e1aa00418f3079d16980ee3a9d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a064803b42a30e450dba3e20cc16b87d8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a064803b42a30e450dba3e20cc16b87d8"></a>
<a class="el" href="classgmx_1_1ArrayRef.xhtml#a12524b640e7173078bb983a450022346">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a064803b42a30e450dba3e20cc16b87d8">size</a> () const </td></tr>
<tr class="memdesc:a064803b42a30e450dba3e20cc16b87d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the size of the container. <br/></td></tr>
<tr class="separator:a064803b42a30e450dba3e20cc16b87d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8f4798e07e54a2ceb053ccd1f8ad65e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa8f4798e07e54a2ceb053ccd1f8ad65e"></a>
<a class="el" href="classgmx_1_1ArrayRef.xhtml#a12524b640e7173078bb983a450022346">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#aa8f4798e07e54a2ceb053ccd1f8ad65e">capacity</a> () const </td></tr>
<tr class="memdesc:aa8f4798e07e54a2ceb053ccd1f8ad65e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Identical to <a class="el" href="classgmx_1_1ArrayRef.xhtml#a064803b42a30e450dba3e20cc16b87d8" title="Returns the size of the container. ">size()</a>. <br/></td></tr>
<tr class="separator:aa8f4798e07e54a2ceb053ccd1f8ad65e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a556df99ffcf4512ae8be245d6af788bf"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a556df99ffcf4512ae8be245d6af788bf"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a556df99ffcf4512ae8be245d6af788bf">empty</a> () const </td></tr>
<tr class="memdesc:a556df99ffcf4512ae8be245d6af788bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether the container is empty. <br/></td></tr>
<tr class="separator:a556df99ffcf4512ae8be245d6af788bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a590c0297f10a6ba489bb2f96a6cc143d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a590c0297f10a6ba489bb2f96a6cc143d"></a>
<a class="el" href="classgmx_1_1ArrayRef.xhtml#aaa7f6ef205b5793ab33635f887e9f0bb">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a590c0297f10a6ba489bb2f96a6cc143d">operator[]</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml#a12524b640e7173078bb983a450022346">size_type</a> n) const </td></tr>
<tr class="memdesc:a590c0297f10a6ba489bb2f96a6cc143d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access container element. <br/></td></tr>
<tr class="separator:a590c0297f10a6ba489bb2f96a6cc143d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99d798862329c2e48fe28beaf0b23815"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a99d798862329c2e48fe28beaf0b23815"></a>
<a class="el" href="classgmx_1_1ArrayRef.xhtml#aaa7f6ef205b5793ab33635f887e9f0bb">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a99d798862329c2e48fe28beaf0b23815">at</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml#a12524b640e7173078bb983a450022346">size_type</a> n) const </td></tr>
<tr class="memdesc:a99d798862329c2e48fe28beaf0b23815"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access container element (throws on out-of-range error). <br/></td></tr>
<tr class="separator:a99d798862329c2e48fe28beaf0b23815"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8d0bf3c91184f9cfc458b00036c6229"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa8d0bf3c91184f9cfc458b00036c6229"></a>
<a class="el" href="classgmx_1_1ArrayRef.xhtml#aaa7f6ef205b5793ab33635f887e9f0bb">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#aa8d0bf3c91184f9cfc458b00036c6229">front</a> () const </td></tr>
<tr class="memdesc:aa8d0bf3c91184f9cfc458b00036c6229"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the first element in the container. <br/></td></tr>
<tr class="separator:aa8d0bf3c91184f9cfc458b00036c6229"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a9d019764cd022cc69df3cefe602ac4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1a9d019764cd022cc69df3cefe602ac4"></a>
<a class="el" href="classgmx_1_1ArrayRef.xhtml#aaa7f6ef205b5793ab33635f887e9f0bb">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a1a9d019764cd022cc69df3cefe602ac4">back</a> () const </td></tr>
<tr class="memdesc:a1a9d019764cd022cc69df3cefe602ac4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the first element in the container. <br/></td></tr>
<tr class="separator:a1a9d019764cd022cc69df3cefe602ac4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88cc45d7039d1f6f738cf66463d18f81"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a88cc45d7039d1f6f738cf66463d18f81"></a>
<a class="el" href="classgmx_1_1ArrayRef.xhtml#a7d3b7bcef0b244efc5d3da2fe2278390">pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a88cc45d7039d1f6f738cf66463d18f81">data</a> () const </td></tr>
<tr class="memdesc:a88cc45d7039d1f6f738cf66463d18f81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a raw pointer to the contents of the array. <br/></td></tr>
<tr class="separator:a88cc45d7039d1f6f738cf66463d18f81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b0d543799e64b307d4832545e16f6f7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a6b0d543799e64b307d4832545e16f6f7">swap</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; T &gt; &amp;other)</td></tr>
<tr class="memdesc:a6b0d543799e64b307d4832545e16f6f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps referenced memory with the other object.  <a href="#a6b0d543799e64b307d4832545e16f6f7">More...</a><br/></td></tr>
<tr class="separator:a6b0d543799e64b307d4832545e16f6f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="related"></a>
Related Functions</h2></td></tr>
<tr><td class="ititle" colspan="2"><p>(Note that these are not member functions.) </p>
</td></tr>
<tr class="memitem:a24928de2a6e2169edd97fc08e557cf95"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a24928de2a6e2169edd97fc08e557cf95"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a24928de2a6e2169edd97fc08e557cf95">arrayRefFromArray</a> (T *<a class="el" href="classgmx_1_1ArrayRef.xhtml#a636969a931ec85c6f9b2e54e9bae11fb">begin</a>, size_t <a class="el" href="classgmx_1_1ArrayRef.xhtml#a064803b42a30e450dba3e20cc16b87d8">size</a>)</td></tr>
<tr class="separator:a24928de2a6e2169edd97fc08e557cf95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ad7566d3e99e1e1b3f6360d3ae89314"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a3ad7566d3e99e1e1b3f6360d3ae89314"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; const T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a3ad7566d3e99e1e1b3f6360d3ae89314">constArrayRefFromArray</a> (const T *<a class="el" href="classgmx_1_1ArrayRef.xhtml#a636969a931ec85c6f9b2e54e9bae11fb">begin</a>, size_t <a class="el" href="classgmx_1_1ArrayRef.xhtml#a064803b42a30e450dba3e20cc16b87d8">size</a>)</td></tr>
<tr class="separator:a3ad7566d3e99e1e1b3f6360d3ae89314"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a1d71d8ba14566b55336d666b3666684c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; T &gt;::<a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structgmx_1_1EmptyArrayRef.xhtml">EmptyArrayRef</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs an empty reference. </p>
<p>This is provided for convenience, such that <a class="el" href="structgmx_1_1EmptyArrayRef.xhtml" title="Tag type to initialize empty array references. ">EmptyArrayRef</a> can be used to initialize any <a class="el" href="classgmx_1_1ArrayRef.xhtml" title="STL-like container for an interface to a C array of T (or part of a std::vector&lt;T, A&gt; or std::array&lt;T&gt;). ">ArrayRef</a>, without specifying the template type. It is not explicit to enable that usage. </p>

</div>
</div>
<a class="anchor" id="a5c3b09727267265b3ca1b024fdc31516"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<div class="memtemplate">
template&lt;typename U , typename  = typename std::enable_if&lt;                         std::is_convertible&lt;typename std::remove_reference&lt;U&gt;::type::pointer,                                             pointer&gt;::value&gt;::type&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; T &gt;::<a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a> </td>
          <td>(</td>
          <td class="paramtype">U &amp;&amp;&#160;</td>
          <td class="paramname"><em>o</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs a reference to a container or reference. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">o</td><td>container to reference.</td></tr>
  </table>
  </dd>
</dl>
<p>Can be used to create a reference to a whole vector, std::array or an <a class="el" href="classgmx_1_1ArrayRef.xhtml" title="STL-like container for an interface to a C array of T (or part of a std::vector&lt;T, A&gt; or std::array&lt;T&gt;). ">ArrayRef</a>. The destination has to have a convertible pointer type (identical besides const or base class).</p>
<p>Passed container must remain valid and not be reallocated for the lifetime of this object.</p>
<p>This constructor is not explicit to allow directly passing a container to a method that takes <a class="el" href="classgmx_1_1ArrayRef.xhtml" title="STL-like container for an interface to a C array of T (or part of a std::vector&lt;T, A&gt; or std::array&lt;T&gt;). ">ArrayRef</a>. </p>

</div>
</div>
<a class="anchor" id="aed10da86fd23acfb22a64c7c6699a5e3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; T &gt;::<a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a7d3b7bcef0b244efc5d3da2fe2278390">pointer</a>&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml#a7d3b7bcef0b244efc5d3da2fe2278390">pointer</a>&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs a reference to a particular range. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">begin</td><td>Pointer to the beginning of a range. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end</td><td>Pointer to the end of a range.</td></tr>
  </table>
  </dd>
</dl>
<p>Passed pointers must remain valid for the lifetime of this object. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a6b0d543799e64b307d4832545e16f6f7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; T &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Swaps referenced memory with the other object. </p>
<p>The actual memory areas are not modified, only the references are swapped. </p>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a class="anchor" id="a24928de2a6e2169edd97fc08e557cf95"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; T &gt; arrayRefFromArray </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p></p>

</div>
</div>
<a class="anchor" id="a3ad7566d3e99e1e1b3f6360d3ae89314"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; const T &gt; constArrayRefFromArray </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p></p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/gromacs/commandline/<a class="el" href="cmdlinehelpwriter_8h.xhtml">cmdlinehelpwriter.h</a></li>
<li>src/gromacs/utility/<a class="el" href="arrayref_8h.xhtml">arrayref.h</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:57:27 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
