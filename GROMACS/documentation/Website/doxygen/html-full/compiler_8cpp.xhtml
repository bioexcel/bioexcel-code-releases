<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/selection/compiler.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_8a21c46af9718d1f610eb513153099d7.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a46192700e9e8ed44c648f0a55ee9a53.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_e7e88b26b6f22ac834fce3ecdbf03d20.xhtml">selection</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">compiler.cpp File Reference<div class="ingroups"><a class="el" href="group__module__selection.xhtml">Parsing and Evaluation of Analysis Selections (selection)</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="gmxpre_8h.xhtml">gmxpre.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="compiler_8h.xhtml">compiler.h</a>&quot;</code><br/>
<code>#include &lt;stdarg.h&gt;</code><br/>
<code>#include &lt;cmath&gt;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
<code>#include &quot;gromacs/math/vec.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="indexutil_8h.xhtml">gromacs/selection/indexutil.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="selection_2selection_8h.xhtml">gromacs/selection/selection.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="exceptions_8h.xhtml">gromacs/utility/exceptions.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="smalloc_8h.xhtml">gromacs/utility/smalloc.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="stringutil_8h.xhtml">gromacs/utility/stringutil.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="evaluate_8h.xhtml">evaluate.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="keywords_8h.xhtml">keywords.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="mempool_8h.xhtml">mempool.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="poscalc_8h.xhtml">poscalc.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="selectioncollection-impl_8h.xhtml">selectioncollection-impl.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="selelem_8h.xhtml">selelem.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="selmethod_8h.xhtml">selmethod.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for compiler.cpp:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="compiler_8cpp__incl.svg" width="3442" height="619"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Selection compilation and optimization. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000068">Todo:</a></b></dt><dd>Better error handling and memory management in error situations. At least, the main compilation function leaves the selection collection in a bad state if an error occurs.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000069">Todo:</a></b></dt><dd>The memory usage could still be optimized. Use of memory pooling could still be extended, and a lot of redundant gmin/gmax data could be eliminated for complex arithmetic expressions.</dd></dl>
<dl class="section author"><dt>Author</dt><dd>Teemu Murtola <a href="#" onclick="location.href='mai'+'lto:'+'tee'+'mu'+'.mu'+'rt'+'ola'+'@g'+'mai'+'l.'+'com'; return false;">teemu<span style="display: none;">.nosp@m.</span>.mur<span style="display: none;">.nosp@m.</span>tola@<span style="display: none;">.nosp@m.</span>gmai<span style="display: none;">.nosp@m.</span>l.com</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structt__compiler__data.xhtml">t_compiler_data</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal data structure used by the compiler.  <a href="structt__compiler__data.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a31c256933da795acf9f5017d2694e9cd"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structt__compiler__data.xhtml">t_compiler_data</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a31c256933da795acf9f5017d2694e9cd">t_compiler_data</a></td></tr>
<tr class="memdesc:a31c256933da795acf9f5017d2694e9cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal data structure used by the compiler.  <a href="#a31c256933da795acf9f5017d2694e9cd">More...</a><br/></td></tr>
<tr class="separator:a31c256933da795acf9f5017d2694e9cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a7ada2556f3c386db5f31969fb6d4d002"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <br/>
&#160;&#160;<a class="el" href="compiler_8cpp.xhtml#a7ada2556f3c386db5f31969fb6d4d002aabd1ecaeb7bb8fd5f92acd03d8b1cce3">SEL_CDATA_FULLEVAL</a> = 1, 
<a class="el" href="compiler_8cpp.xhtml#a7ada2556f3c386db5f31969fb6d4d002a6d0cb69264496c5e7ba6b3e07a3f6432">SEL_CDATA_STATIC</a> = 2, 
<a class="el" href="compiler_8cpp.xhtml#a7ada2556f3c386db5f31969fb6d4d002ac177b607ec93d6abfd2bbf87c20806aa">SEL_CDATA_STATICEVAL</a> = 4, 
<a class="el" href="compiler_8cpp.xhtml#a7ada2556f3c386db5f31969fb6d4d002a79f5dc2e4f9b949749f09195f126712e">SEL_CDATA_EVALMAX</a> = 8, 
<br/>
&#160;&#160;<a class="el" href="compiler_8cpp.xhtml#a7ada2556f3c386db5f31969fb6d4d002afd5a34e897d04d53b4087fd1308d54bf">SEL_CDATA_MINMAXALLOC</a> = 16, 
<a class="el" href="compiler_8cpp.xhtml#a7ada2556f3c386db5f31969fb6d4d002ad8403b0caca8a216f0a2085bddfbdd44">SEL_CDATA_DOMINMAX</a> = 256, 
<a class="el" href="compiler_8cpp.xhtml#a7ada2556f3c386db5f31969fb6d4d002a747da5bf2b0169daf9261da345c5b5c6">SEL_CDATA_SIMPLESUBEXPR</a> = 32, 
<a class="el" href="compiler_8cpp.xhtml#a7ada2556f3c386db5f31969fb6d4d002a3835ed26046cc8cdf788ad40095afba8">SEL_CDATA_STATICMULTIEVALSUBEXPR</a> = 64, 
<br/>
&#160;&#160;<a class="el" href="compiler_8cpp.xhtml#a7ada2556f3c386db5f31969fb6d4d002a6f054eb53eb7aad552ddfdbe2e47c36a">SEL_CDATA_COMMONSUBEXPR</a> = 128
<br/>
 }</td></tr>
<tr class="memdesc:a7ada2556f3c386db5f31969fb6d4d002"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compiler flags.  <a href="compiler_8cpp.xhtml#a7ada2556f3c386db5f31969fb6d4d002">More...</a><br/></td></tr>
<tr class="separator:a7ada2556f3c386db5f31969fb6d4d002"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:afffb8bba1fc9d8094dfe1f4cce0a11f0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="afffb8bba1fc9d8094dfe1f4cce0a11f0"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#afffb8bba1fc9d8094dfe1f4cce0a11f0">print_group_info</a> (FILE *fp, const char *name, const <a class="el" href="classgmx_1_1SelectionTreeElement.xhtml">SelectionTreeElement</a> &amp;sel, <a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *g)</td></tr>
<tr class="memdesc:afffb8bba1fc9d8094dfe1f4cce0a11f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper method for printing out debug information about a min/max group. <br/></td></tr>
<tr class="separator:afffb8bba1fc9d8094dfe1f4cce0a11f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5793b03743ef7709675b88dbdbff1ed6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a5793b03743ef7709675b88dbdbff1ed6">_gmx_selelem_print_compiler_info</a> (FILE *fp, const <a class="el" href="classgmx_1_1SelectionTreeElement.xhtml">SelectionTreeElement</a> &amp;sel, int level)</td></tr>
<tr class="memdesc:a5793b03743ef7709675b88dbdbff1ed6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prints a human-readable version of the internal compiler data structure.  <a href="#a5793b03743ef7709675b88dbdbff1ed6">More...</a><br/></td></tr>
<tr class="separator:a5793b03743ef7709675b88dbdbff1ed6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab72f7254a76a3560208912586a8295ed"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#ab72f7254a76a3560208912586a8295ed">alloc_selection_data</a> (const SelectionTreeElementPointer &amp;sel, int isize, bool bChildEval)</td></tr>
<tr class="memdesc:ab72f7254a76a3560208912586a8295ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates memory for storing the evaluated value of a selection element.  <a href="#ab72f7254a76a3560208912586a8295ed">More...</a><br/></td></tr>
<tr class="separator:ab72f7254a76a3560208912586a8295ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fa91722a6829d4caa8c1404ab501879"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a8fa91722a6829d4caa8c1404ab501879">alloc_selection_pos_data</a> (const SelectionTreeElementPointer &amp;sel)</td></tr>
<tr class="memdesc:a8fa91722a6829d4caa8c1404ab501879"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates memory for storing the evaluated value of a selection element.  <a href="#a8fa91722a6829d4caa8c1404ab501879">More...</a><br/></td></tr>
<tr class="separator:a8fa91722a6829d4caa8c1404ab501879"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35320786c5039f3728adb84d85bd4c2b"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a35320786c5039f3728adb84d85bd4c2b">set_evaluation_function</a> (const SelectionTreeElementPointer &amp;sel, <a class="el" href="namespacegmx.xhtml#af63a35a5828a347c7d53a3365de983e9">gmx::sel_evalfunc</a> eval)</td></tr>
<tr class="memdesc:a35320786c5039f3728adb84d85bd4c2b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace the evaluation function of each element in the subtree.  <a href="#a35320786c5039f3728adb84d85bd4c2b">More...</a><br/></td></tr>
<tr class="separator:a35320786c5039f3728adb84d85bd4c2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26a966e96b46724be68058405dd369e9"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a26a966e96b46724be68058405dd369e9">init_pos_keyword_defaults</a> (<a class="el" href="classgmx_1_1SelectionTreeElement.xhtml">SelectionTreeElement</a> *root, const char *spost, const char *rpost, const <a class="el" href="classgmx_1_1internal_1_1SelectionData.xhtml">gmx::internal::SelectionData</a> *sel)</td></tr>
<tr class="memdesc:a26a966e96b46724be68058405dd369e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes default values for position keyword evaluation.  <a href="#a26a966e96b46724be68058405dd369e9">More...</a><br/></td></tr>
<tr class="separator:a26a966e96b46724be68058405dd369e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a384e619869bf64aa2bf44132e721fa38"><td class="memItemLeft" align="right" valign="top">static SelectionTreeElementPointer&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a384e619869bf64aa2bf44132e721fa38">reverse_selelem_chain</a> (const SelectionTreeElementPointer &amp;root)</td></tr>
<tr class="memdesc:a384e619869bf64aa2bf44132e721fa38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reverses the chain of selection elements starting at <code>root</code>.  <a href="#a384e619869bf64aa2bf44132e721fa38">More...</a><br/></td></tr>
<tr class="separator:a384e619869bf64aa2bf44132e721fa38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae730a43c316325b32ac5c5fa397954f2"><td class="memItemLeft" align="right" valign="top">static SelectionTreeElementPointer&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#ae730a43c316325b32ac5c5fa397954f2">remove_unused_subexpressions</a> (SelectionTreeElementPointer root)</td></tr>
<tr class="memdesc:ae730a43c316325b32ac5c5fa397954f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes subexpressions that don't have any references.  <a href="#ae730a43c316325b32ac5c5fa397954f2">More...</a><br/></td></tr>
<tr class="separator:ae730a43c316325b32ac5c5fa397954f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb7640851913553c83b6469e356ef038"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#afb7640851913553c83b6469e356ef038">create_subexpression_name</a> (const SelectionTreeElementPointer &amp;sel, int i)</td></tr>
<tr class="memdesc:afb7640851913553c83b6469e356ef038"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a name with a running number for a subexpression.  <a href="#afb7640851913553c83b6469e356ef038">More...</a><br/></td></tr>
<tr class="separator:afb7640851913553c83b6469e356ef038"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e20e8707a7907142b4a2947506e3d9c"><td class="memItemLeft" align="right" valign="top">static SelectionTreeElementPointer&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a9e20e8707a7907142b4a2947506e3d9c">extract_item_subselections</a> (const SelectionTreeElementPointer &amp;sel, int *subexprn)</td></tr>
<tr class="memdesc:a9e20e8707a7907142b4a2947506e3d9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Processes and extracts subexpressions from a given selection subtree.  <a href="#a9e20e8707a7907142b4a2947506e3d9c">More...</a><br/></td></tr>
<tr class="separator:a9e20e8707a7907142b4a2947506e3d9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc3fe3207208bdcfac598136be953b81"><td class="memItemLeft" align="right" valign="top">static SelectionTreeElementPointer&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#adc3fe3207208bdcfac598136be953b81">extract_subexpressions</a> (SelectionTreeElementPointer sel)</td></tr>
<tr class="memdesc:adc3fe3207208bdcfac598136be953b81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extracts subexpressions of the selection chain.  <a href="#adc3fe3207208bdcfac598136be953b81">More...</a><br/></td></tr>
<tr class="separator:adc3fe3207208bdcfac598136be953b81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf983339164e05e4e7319e88683ca6d6"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#aaf983339164e05e4e7319e88683ca6d6">optimize_boolean_expressions</a> (const SelectionTreeElementPointer &amp;sel)</td></tr>
<tr class="memdesc:aaf983339164e05e4e7319e88683ca6d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes redundant boolean selection elements.  <a href="#aaf983339164e05e4e7319e88683ca6d6">More...</a><br/></td></tr>
<tr class="separator:aaf983339164e05e4e7319e88683ca6d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38bc921987c28127cb53b39c2f6cba8e"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a38bc921987c28127cb53b39c2f6cba8e">reorder_boolean_static_children</a> (const SelectionTreeElementPointer &amp;sel)</td></tr>
<tr class="memdesc:a38bc921987c28127cb53b39c2f6cba8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reorders children of boolean expressions such that static selections come first.  <a href="#a38bc921987c28127cb53b39c2f6cba8e">More...</a><br/></td></tr>
<tr class="separator:a38bc921987c28127cb53b39c2f6cba8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa22e901f96e3edaa72c2e222ed75bd01"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#aa22e901f96e3edaa72c2e222ed75bd01">optimize_arithmetic_expressions</a> (const SelectionTreeElementPointer &amp;sel)</td></tr>
<tr class="memdesc:aa22e901f96e3edaa72c2e222ed75bd01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Processes arithmetic expressions to simplify and speed up evaluation.  <a href="#aa22e901f96e3edaa72c2e222ed75bd01">More...</a><br/></td></tr>
<tr class="separator:aa22e901f96e3edaa72c2e222ed75bd01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fcb9dfd94f505bd2595ea495eb60550"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a2fcb9dfd94f505bd2595ea495eb60550">init_item_evalfunc</a> (const SelectionTreeElementPointer &amp;sel)</td></tr>
<tr class="memdesc:a2fcb9dfd94f505bd2595ea495eb60550"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the evaluation functions for the selection (sub)tree.  <a href="#a2fcb9dfd94f505bd2595ea495eb60550">More...</a><br/></td></tr>
<tr class="separator:a2fcb9dfd94f505bd2595ea495eb60550"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc148fb03ac46544df28a7dc49db44f0"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#acc148fb03ac46544df28a7dc49db44f0">setup_memory_pooling</a> (const SelectionTreeElementPointer &amp;sel, <a class="el" href="structgmx__sel__mempool__t.xhtml">gmx_sel_mempool_t</a> *mempool)</td></tr>
<tr class="memdesc:acc148fb03ac46544df28a7dc49db44f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the memory pool for selection elements that can use it.  <a href="#acc148fb03ac46544df28a7dc49db44f0">More...</a><br/></td></tr>
<tr class="separator:acc148fb03ac46544df28a7dc49db44f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7dfeb89b48417227771f7feade82602"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#aa7dfeb89b48417227771f7feade82602">init_item_evaloutput</a> (const SelectionTreeElementPointer &amp;sel)</td></tr>
<tr class="memdesc:aa7dfeb89b48417227771f7feade82602"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepares the selection (sub)tree for evaluation.  <a href="#aa7dfeb89b48417227771f7feade82602">More...</a><br/></td></tr>
<tr class="separator:aa7dfeb89b48417227771f7feade82602"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f3132ddfc8cdfdce05f5c50a61927c3"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a1f3132ddfc8cdfdce05f5c50a61927c3">init_item_compilerdata</a> (const SelectionTreeElementPointer &amp;sel)</td></tr>
<tr class="memdesc:a1f3132ddfc8cdfdce05f5c50a61927c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates memory for the compiler data and initializes the structure.  <a href="#a1f3132ddfc8cdfdce05f5c50a61927c3">More...</a><br/></td></tr>
<tr class="separator:a1f3132ddfc8cdfdce05f5c50a61927c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a615adc81dbea1214dbd858087405dc98"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a615adc81dbea1214dbd858087405dc98">init_item_staticeval</a> (const SelectionTreeElementPointer &amp;sel)</td></tr>
<tr class="memdesc:a615adc81dbea1214dbd858087405dc98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the static evaluation flag for a selection subtree.  <a href="#a615adc81dbea1214dbd858087405dc98">More...</a><br/></td></tr>
<tr class="separator:a615adc81dbea1214dbd858087405dc98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26980715c955d400823a4213c85ae953"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a26980715c955d400823a4213c85ae953">init_item_subexpr_refcount</a> (const SelectionTreeElementPointer &amp;sel)</td></tr>
<tr class="memdesc:a26980715c955d400823a4213c85ae953"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference counts for subexpressions.  <a href="#a26980715c955d400823a4213c85ae953">More...</a><br/></td></tr>
<tr class="separator:a26980715c955d400823a4213c85ae953"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af15d8b95ce2c513722ed9c6fb0440908"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#af15d8b95ce2c513722ed9c6fb0440908">init_item_subexpr_flags</a> (const SelectionTreeElementPointer &amp;sel)</td></tr>
<tr class="memdesc:af15d8b95ce2c513722ed9c6fb0440908"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes compiler flags for subexpressions.  <a href="#af15d8b95ce2c513722ed9c6fb0440908">More...</a><br/></td></tr>
<tr class="separator:af15d8b95ce2c513722ed9c6fb0440908"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2300b2daebced27f8f9fb6626e63bc3"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#ae2300b2daebced27f8f9fb6626e63bc3">init_item_minmax_groups</a> (const SelectionTreeElementPointer &amp;sel)</td></tr>
<tr class="memdesc:ae2300b2daebced27f8f9fb6626e63bc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the gmin and gmax fields of the compiler data structure.  <a href="#ae2300b2daebced27f8f9fb6626e63bc3">More...</a><br/></td></tr>
<tr class="separator:ae2300b2daebced27f8f9fb6626e63bc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8180e9255f0c8cf57f865523d1537607"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a8180e9255f0c8cf57f865523d1537607">initialize_evalgrps</a> (<a class="el" href="structgmx__ana__selcollection__t.xhtml">gmx_ana_selcollection_t</a> *sc)</td></tr>
<tr class="memdesc:a8180e9255f0c8cf57f865523d1537607"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes evaluation groups for root items.  <a href="#a8180e9255f0c8cf57f865523d1537607">More...</a><br/></td></tr>
<tr class="separator:a8180e9255f0c8cf57f865523d1537607"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ce676e6caff3877910cd9cfc27cb955"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a2ce676e6caff3877910cd9cfc27cb955">mark_subexpr_dynamic</a> (const SelectionTreeElementPointer &amp;sel, bool bDynamic)</td></tr>
<tr class="memdesc:a2ce676e6caff3877910cd9cfc27cb955"><td class="mdescLeft">&#160;</td><td class="mdescRight">Marks a subtree completely dynamic or undoes such a change.  <a href="#a2ce676e6caff3877910cd9cfc27cb955">More...</a><br/></td></tr>
<tr class="separator:a2ce676e6caff3877910cd9cfc27cb955"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03556fef583ab8dc316edcf57d457adc"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a03556fef583ab8dc316edcf57d457adc">release_subexpr_memory</a> (const SelectionTreeElementPointer &amp;sel)</td></tr>
<tr class="memdesc:a03556fef583ab8dc316edcf57d457adc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees memory for subexpressions that are no longer needed.  <a href="#a03556fef583ab8dc316edcf57d457adc">More...</a><br/></td></tr>
<tr class="separator:a03556fef583ab8dc316edcf57d457adc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a595082ba6c9b83cbdb5161de4ba495a4"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a595082ba6c9b83cbdb5161de4ba495a4">make_static</a> (const SelectionTreeElementPointer &amp;sel)</td></tr>
<tr class="memdesc:a595082ba6c9b83cbdb5161de4ba495a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Makes an evaluated selection element static.  <a href="#a595082ba6c9b83cbdb5161de4ba495a4">More...</a><br/></td></tr>
<tr class="separator:a595082ba6c9b83cbdb5161de4ba495a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a79847d59f377e50695756feae2818d"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a3a79847d59f377e50695756feae2818d">process_const</a> (<a class="el" href="structgmx__sel__evaluate__t.xhtml">gmx_sel_evaluate_t</a> *data, const SelectionTreeElementPointer &amp;sel, <a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *g)</td></tr>
<tr class="memdesc:a3a79847d59f377e50695756feae2818d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluates a constant expression during <a class="el" href="compiler_8cpp.xhtml#ac606faa067c02b2dc1bedfe5009ea455" title="Evaluates the static parts of sel and analyzes the structure. ">analyze_static()</a>.  <a href="#a3a79847d59f377e50695756feae2818d">More...</a><br/></td></tr>
<tr class="separator:a3a79847d59f377e50695756feae2818d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77f7a9f2e7090636063925f737876a50"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a77f7a9f2e7090636063925f737876a50">store_param_val</a> (const SelectionTreeElementPointer &amp;sel)</td></tr>
<tr class="memdesc:a77f7a9f2e7090636063925f737876a50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the parameter value pointer for <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46af3e44c019a776df8511a73457f9b32b4">SEL_SUBEXPRREF</a> params.  <a href="#a77f7a9f2e7090636063925f737876a50">More...</a><br/></td></tr>
<tr class="separator:a77f7a9f2e7090636063925f737876a50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1b906f82e266dd3c2fce45b0afee03e"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#ab1b906f82e266dd3c2fce45b0afee03e">init_method</a> (const SelectionTreeElementPointer &amp;sel, const gmx_mtop_t *top, int isize)</td></tr>
<tr class="memdesc:ab1b906f82e266dd3c2fce45b0afee03e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handles the initialization of a selection method during <a class="el" href="compiler_8cpp.xhtml#ac606faa067c02b2dc1bedfe5009ea455" title="Evaluates the static parts of sel and analyzes the structure. ">analyze_static()</a> pass.  <a href="#ab1b906f82e266dd3c2fce45b0afee03e">More...</a><br/></td></tr>
<tr class="separator:ab1b906f82e266dd3c2fce45b0afee03e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea4973b22226f5fc4b4cb47cc0666bf6"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#aea4973b22226f5fc4b4cb47cc0666bf6">evaluate_boolean_static_part</a> (<a class="el" href="structgmx__sel__evaluate__t.xhtml">gmx_sel_evaluate_t</a> *data, const SelectionTreeElementPointer &amp;sel, <a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *g)</td></tr>
<tr class="memdesc:aea4973b22226f5fc4b4cb47cc0666bf6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluates the static part of a boolean expression.  <a href="#aea4973b22226f5fc4b4cb47cc0666bf6">More...</a><br/></td></tr>
<tr class="separator:aea4973b22226f5fc4b4cb47cc0666bf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74fb88c9349ce758f799660da9d572a4"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a74fb88c9349ce758f799660da9d572a4">evaluate_boolean_minmax_grps</a> (const SelectionTreeElementPointer &amp;sel, <a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *g, <a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *gmin, <a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *gmax)</td></tr>
<tr class="memdesc:a74fb88c9349ce758f799660da9d572a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluates the minimum and maximum groups for a boolean expression.  <a href="#a74fb88c9349ce758f799660da9d572a4">More...</a><br/></td></tr>
<tr class="separator:a74fb88c9349ce758f799660da9d572a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac606faa067c02b2dc1bedfe5009ea455"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#ac606faa067c02b2dc1bedfe5009ea455">analyze_static</a> (<a class="el" href="structgmx__sel__evaluate__t.xhtml">gmx_sel_evaluate_t</a> *data, const SelectionTreeElementPointer &amp;sel, <a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *g)</td></tr>
<tr class="memdesc:ac606faa067c02b2dc1bedfe5009ea455"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluates the static parts of <code>sel</code> and analyzes the structure.  <a href="#ac606faa067c02b2dc1bedfe5009ea455">More...</a><br/></td></tr>
<tr class="separator:ac606faa067c02b2dc1bedfe5009ea455"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1dbfd7654f7bbfe6b8037df329590c2"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#ae1dbfd7654f7bbfe6b8037df329590c2">init_root_item</a> (const SelectionTreeElementPointer &amp;root, <a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *gall)</td></tr>
<tr class="memdesc:ae1dbfd7654f7bbfe6b8037df329590c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the evaluation group for a <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46a4374c0be00e03bae94a94c4f2d88569d">SEL_ROOT</a> element.  <a href="#ae1dbfd7654f7bbfe6b8037df329590c2">More...</a><br/></td></tr>
<tr class="separator:ae1dbfd7654f7bbfe6b8037df329590c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86cce09655ecc31494dbdc47b535799d"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a86cce09655ecc31494dbdc47b535799d">init_required_atoms</a> (const SelectionTreeElementPointer &amp;sel, <a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *requiredAtoms)</td></tr>
<tr class="memdesc:a86cce09655ecc31494dbdc47b535799d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds the highest atom index required to evaluate a selection subtree.  <a href="#a86cce09655ecc31494dbdc47b535799d">More...</a><br/></td></tr>
<tr class="separator:a86cce09655ecc31494dbdc47b535799d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a794bd695ad208084dc7018e4c90735c1"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a794bd695ad208084dc7018e4c90735c1">postprocess_item_subexpressions</a> (const SelectionTreeElementPointer &amp;sel)</td></tr>
<tr class="memdesc:a794bd695ad208084dc7018e4c90735c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Optimizes subexpression evaluation.  <a href="#a794bd695ad208084dc7018e4c90735c1">More...</a><br/></td></tr>
<tr class="separator:a794bd695ad208084dc7018e4c90735c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadd514a7f402e81eeda7c236382fdbc8"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#aadd514a7f402e81eeda7c236382fdbc8">init_item_comg</a> (const SelectionTreeElementPointer &amp;sel, <a class="el" href="classgmx_1_1PositionCalculationCollection.xhtml">gmx::PositionCalculationCollection</a> *pcc, <a class="el" href="poscalc_8h.xhtml#abda45ad4bf42febbe957a08c4ee291c2">e_poscalc_t</a> type, int flags)</td></tr>
<tr class="memdesc:aadd514a7f402e81eeda7c236382fdbc8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes COM/COG calculation for method expressions that require it.  <a href="#aadd514a7f402e81eeda7c236382fdbc8">More...</a><br/></td></tr>
<tr class="separator:aadd514a7f402e81eeda7c236382fdbc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69e743f49e37da9b7fc2d0cef6613523"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="compiler_8cpp.xhtml#a69e743f49e37da9b7fc2d0cef6613523">free_item_compilerdata</a> (const SelectionTreeElementPointer &amp;sel)</td></tr>
<tr class="memdesc:a69e743f49e37da9b7fc2d0cef6613523"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees the allocated compiler data recursively.  <a href="#a69e743f49e37da9b7fc2d0cef6613523">More...</a><br/></td></tr>
<tr class="separator:a69e743f49e37da9b7fc2d0cef6613523"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a class="anchor" id="a31c256933da795acf9f5017d2694e9cd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structt__compiler__data.xhtml">t_compiler_data</a>  <a class="el" href="structt__compiler__data.xhtml">t_compiler_data</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Internal data structure used by the compiler. </p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a class="anchor" id="a7ada2556f3c386db5f31969fb6d4d002"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compiler flags. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="a7ada2556f3c386db5f31969fb6d4d002aabd1ecaeb7bb8fd5f92acd03d8b1cce3"></a>SEL_CDATA_FULLEVAL</em>&nbsp;</td><td class="fielddoc">
<p>Whether a subexpression needs to evaluated for all atoms. </p>
<p>This flag is set for <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46a4b01539a457afb7dbdf486c2a2e6dafb">SEL_SUBEXPR</a> elements that are used to evaluate non-atom-valued selection method parameters, as well as those that are used directly as values of selections. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a7ada2556f3c386db5f31969fb6d4d002a6d0cb69264496c5e7ba6b3e07a3f6432"></a>SEL_CDATA_STATIC</em>&nbsp;</td><td class="fielddoc">
<p>Whether the whole subexpression should be treated as static. </p>
<p>This flag is always false if <a class="el" href="selelem_8h.xhtml#a7c6372a1eecd845aaaaf60326c9bba16">SEL_DYNAMIC</a> is set for the element, but it is also false for static elements within common subexpressions. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a7ada2556f3c386db5f31969fb6d4d002ac177b607ec93d6abfd2bbf87c20806aa"></a>SEL_CDATA_STATICEVAL</em>&nbsp;</td><td class="fielddoc">
<p>Whether the subexpression will always be evaluated in the same group. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a7ada2556f3c386db5f31969fb6d4d002a79f5dc2e4f9b949749f09195f126712e"></a>SEL_CDATA_EVALMAX</em>&nbsp;</td><td class="fielddoc">
<p>Whether the compiler evaluation routine should return the maximal selection. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a7ada2556f3c386db5f31969fb6d4d002afd5a34e897d04d53b4087fd1308d54bf"></a>SEL_CDATA_MINMAXALLOC</em>&nbsp;</td><td class="fielddoc">
<p>Whether memory has been allocated for <code>gmin</code> and <code>gmax</code>. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a7ada2556f3c386db5f31969fb6d4d002ad8403b0caca8a216f0a2085bddfbdd44"></a>SEL_CDATA_DOMINMAX</em>&nbsp;</td><td class="fielddoc">
<p>Whether to update <code>gmin</code> and <code>gmax</code> in static analysis. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a7ada2556f3c386db5f31969fb6d4d002a747da5bf2b0169daf9261da345c5b5c6"></a>SEL_CDATA_SIMPLESUBEXPR</em>&nbsp;</td><td class="fielddoc">
<p>Whether the subexpression uses simple pass evaluation functions. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a7ada2556f3c386db5f31969fb6d4d002a3835ed26046cc8cdf788ad40095afba8"></a>SEL_CDATA_STATICMULTIEVALSUBEXPR</em>&nbsp;</td><td class="fielddoc">
<p>Whether a static subexpression needs to support multiple evaluations. </p>
<p>This flag may only be set on <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46a4b01539a457afb7dbdf486c2a2e6dafb">SEL_SUBEXPR</a> elements that also have SEL_CDATA_SIMPLESUBEXPR. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a7ada2556f3c386db5f31969fb6d4d002a6f054eb53eb7aad552ddfdbe2e47c36a"></a>SEL_CDATA_COMMONSUBEXPR</em>&nbsp;</td><td class="fielddoc">
<p>Whether this expression is a part of a common subexpression. </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a5793b03743ef7709675b88dbdbff1ed6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void _gmx_selelem_print_compiler_info </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1SelectionTreeElement.xhtml">SelectionTreeElement</a> &amp;&#160;</td>
          <td class="paramname"><em>sel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>level</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Prints a human-readable version of the internal compiler data structure. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fp</td><td>File handle to receive the output. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sel</td><td>Selection element to print. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">level</td><td>Indentation level, starting from zero. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab72f7254a76a3560208912586a8295ed"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void alloc_selection_data </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>isize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bChildEval</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allocates memory for storing the evaluated value of a selection element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">sel</td><td>Selection element to initialize </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">isize</td><td>Maximum evaluation group size. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bChildEval</td><td>true if children have already been processed.</td></tr>
  </table>
  </dd>
</dl>
<p>If called more than once, memory is (re)allocated to ensure that the maximum of the <code>isize</code> values can be stored.</p>
<p>Allocation of POS_VALUE selection elements is a special case, and is handled by <a class="el" href="compiler_8cpp.xhtml#a8fa91722a6829d4caa8c1404ab501879" title="Allocates memory for storing the evaluated value of a selection element. ">alloc_selection_pos_data()</a>. </p>

</div>
</div>
<a class="anchor" id="a8fa91722a6829d4caa8c1404ab501879"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void alloc_selection_pos_data </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allocates memory for storing the evaluated value of a selection element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sel</td><td>Selection element to initialize.</td></tr>
  </table>
  </dd>
</dl>
<p>Allocation of POS_VALUE selection elements is a special case, and is handled by this function instead of by <a class="el" href="compiler_8cpp.xhtml#ab72f7254a76a3560208912586a8295ed" title="Allocates memory for storing the evaluated value of a selection element. ">alloc_selection_data()</a>. </p>

</div>
</div>
<a class="anchor" id="ac606faa067c02b2dc1bedfe5009ea455"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void analyze_static </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structgmx__sel__evaluate__t.xhtml">gmx_sel_evaluate_t</a> *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *&#160;</td>
          <td class="paramname"><em>g</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Evaluates the static parts of <code>sel</code> and analyzes the structure. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Evaluation data. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">sel</td><td>Selection currently being evaluated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td>Group for which <code>sel</code> should be evaluated. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 on success, a non-zero error code on error.</dd></dl>
<p>This function is used as the replacement for the <a class="el" href="classgmx_1_1SelectionTreeElement.xhtml#aa2729334e9625ab9446f87dee5e2acf4" title="Evaluation function for the element. ">gmx::SelectionTreeElement::evaluate</a> function pointer. It does the single most complex task in the compiler: after all elements have been processed, the <code>gmin</code> and <code>gmax</code> fields of <code><a class="el" href="structt__compiler__data.xhtml" title="Internal data structure used by the compiler. ">t_compiler_data</a></code> have been properly initialized, enough memory has been allocated for storing the value of each expression, and the static parts of the expressions have been evaluated. The above is exactly true only for elements other than subexpressions: another pass is required for subexpressions that are referred to more than once and whose evaluation group is not known in advance. </p>

</div>
</div>
<a class="anchor" id="afb7640851913553c83b6469e356ef038"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void create_subexpression_name </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a name with a running number for a subexpression. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">sel</td><td>The subexpression to be named. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Running number for the subexpression.</td></tr>
  </table>
  </dd>
</dl>
<p>The name of the selection becomes "SubExpr N", where N is <code>i</code>; Memory is allocated for the name and the name is stored both as the name of the subexpression element and as gmx::SelectionTreeElement::u::cgrp::name; the latter is freed by _gmx_selelem_free(). </p>

</div>
</div>
<a class="anchor" id="a74fb88c9349ce758f799660da9d572a4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void evaluate_boolean_minmax_grps </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *&#160;</td>
          <td class="paramname"><em>gmin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *&#160;</td>
          <td class="paramname"><em>gmax</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Evaluates the minimum and maximum groups for a boolean expression. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sel</td><td><a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46ae886c4e170c3abd5527de0af74ba4a45">SEL_BOOLEAN</a> element currently being evaluated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td>Group for which <code>sel</code> has been evaluated. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">gmin</td><td>Largest subset of the possible values of <code>sel</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">gmax</td><td>Smallest superset of the possible values of <code>sel</code>.</td></tr>
  </table>
  </dd>
</dl>
<p>This is a helper function for <a class="el" href="compiler_8cpp.xhtml#ac606faa067c02b2dc1bedfe5009ea455" title="Evaluates the static parts of sel and analyzes the structure. ">analyze_static()</a> that is called for dynamic <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46ae886c4e170c3abd5527de0af74ba4a45">SEL_BOOLEAN</a> elements after they have been evaluated. It uses the minimum and maximum groups of the children to calculate the minimum and maximum groups for <code>sel</code>, and also updates the static part of <code>sel</code> (which is in the first child) if the children give cause for this.</p>
<p>This function may allocate some extra memory for <code>gmin</code> and <code>gmax</code>, but as these groups are freed at the end of <a class="el" href="compiler_8cpp.xhtml#ac606faa067c02b2dc1bedfe5009ea455" title="Evaluates the static parts of sel and analyzes the structure. ">analyze_static()</a> (which is reached shortly after this function returns), this should not be a major problem. </p>

</div>
</div>
<a class="anchor" id="aea4973b22226f5fc4b4cb47cc0666bf6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void evaluate_boolean_static_part </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structgmx__sel__evaluate__t.xhtml">gmx_sel_evaluate_t</a> *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *&#160;</td>
          <td class="paramname"><em>g</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Evaluates the static part of a boolean expression. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Evaluation data. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">sel</td><td>Boolean selection element whose children should be processed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td>The evaluation group. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 on success, a non-zero error code on error.</dd></dl>
<p>reorder_item_static_children() should have been called. </p>

</div>
</div>
<a class="anchor" id="a9e20e8707a7907142b4a2947506e3d9c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static SelectionTreeElementPointer extract_item_subselections </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>subexprn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Processes and extracts subexpressions from a given selection subtree. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sel</td><td>Root of the subtree to process. </td></tr>
    <tr><td class="paramname">subexprn</td><td>Pointer to a subexpression counter. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to a chain of subselections, or NULL if none were found.</dd></dl>
<p>This function finds recursively all <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46af3e44c019a776df8511a73457f9b32b4">SEL_SUBEXPRREF</a> elements below the given root element and ensures that their children are within <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46a4b01539a457afb7dbdf486c2a2e6dafb">SEL_SUBEXPR</a> elements. It also creates a chain of <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46a4374c0be00e03bae94a94c4f2d88569d">SEL_ROOT</a> elements that contain the subexpression as their children and returns the first of these root elements. </p>

</div>
</div>
<a class="anchor" id="adc3fe3207208bdcfac598136be953b81"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static SelectionTreeElementPointer extract_subexpressions </td>
          <td>(</td>
          <td class="paramtype">SelectionTreeElementPointer&#160;</td>
          <td class="paramname"><em>sel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Extracts subexpressions of the selection chain. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sel</td><td>First selection in the whole selection chain. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The new first element for the chain.</dd></dl>
<p>Finds all the subexpressions (and their subexpressions) in the selection chain starting from <code>sel</code> and creates <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46a4b01539a457afb7dbdf486c2a2e6dafb">SEL_SUBEXPR</a> elements for them. <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46a4374c0be00e03bae94a94c4f2d88569d">SEL_ROOT</a> elements are also created for each subexpression and inserted into the selection chain before the expressions that refer to them. </p>

</div>
</div>
<a class="anchor" id="a69e743f49e37da9b7fc2d0cef6613523"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void free_item_compilerdata </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Frees the allocated compiler data recursively. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sel</td><td>Root of the selection subtree to process.</td></tr>
  </table>
  </dd>
</dl>
<p>Frees the data allocated for the compilation process. </p>

</div>
</div>
<a class="anchor" id="aadd514a7f402e81eeda7c236382fdbc8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void init_item_comg </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1PositionCalculationCollection.xhtml">gmx::PositionCalculationCollection</a> *&#160;</td>
          <td class="paramname"><em>pcc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="poscalc_8h.xhtml#abda45ad4bf42febbe957a08c4ee291c2">e_poscalc_t</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes COM/COG calculation for method expressions that require it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">sel</td><td>Selection subtree to process. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pcc</td><td>Position calculation collection to use. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>Default position calculation type. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">flags</td><td>Flags for default position calculation.</td></tr>
  </table>
  </dd>
</dl>
<p>Searches recursively through the selection tree for dynamic <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46a3d3bb644ace8fdc5beac6feed4911a1f">SEL_EXPRESSION</a> elements that define the <code><a class="el" href="structgmx__ana__selmethod__t.xhtml#a1c5c0b8aa5193ea0b329a649a9e166e7" title="Function to evaluate the value using positions. ">gmx_ana_selmethod_t::pupdate</a></code> function. For each such element found, position calculation is initialized for the maximal evaluation group. The type of the calculation is determined by <code>type</code> and <code>flags</code>. No calculation is initialized if <code>type</code> equals <a class="el" href="poscalc_8h.xhtml#abda45ad4bf42febbe957a08c4ee291c2a91ffdb6964763d88b5a784de222833d8">POS_ATOM</a> and the method also defines the <code><a class="el" href="structgmx__ana__selmethod__t.xhtml#a18d9fe0bff35116b4e12cc63c381fb47" title="Function to evaluate the value. ">gmx_ana_selmethod_t::update</a></code> method. </p>

</div>
</div>
<a class="anchor" id="a1f3132ddfc8cdfdce05f5c50a61927c3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void init_item_compilerdata </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allocates memory for the compiler data and initializes the structure. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sel</td><td>Root of the selection subtree to process. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2fcb9dfd94f505bd2595ea495eb60550"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void init_item_evalfunc </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the evaluation functions for the selection (sub)tree. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">sel</td><td>Root of the selection subtree to process.</td></tr>
  </table>
  </dd>
</dl>
<p>This function sets the evaluation function (<a class="el" href="classgmx_1_1SelectionTreeElement.xhtml#aa2729334e9625ab9446f87dee5e2acf4" title="Evaluation function for the element. ">gmx::SelectionTreeElement::evaluate</a>) for the selection elements. </p>

</div>
</div>
<a class="anchor" id="aa7dfeb89b48417227771f7feade82602"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void init_item_evaloutput </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepares the selection (sub)tree for evaluation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">sel</td><td>Root of the selection subtree to prepare.</td></tr>
  </table>
  </dd>
</dl>
<p>It also allocates memory for the <code>sel-&gt;v.u.g</code> or <code>sel-&gt;v.u.p</code> structure if required. </p>

</div>
</div>
<a class="anchor" id="ae2300b2daebced27f8f9fb6626e63bc3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void init_item_minmax_groups </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes the gmin and gmax fields of the compiler data structure. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sel</td><td>Root of the selection subtree to process. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a615adc81dbea1214dbd858087405dc98"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void init_item_staticeval </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes the static evaluation flag for a selection subtree. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">sel</td><td>Root of the selection subtree to process.</td></tr>
  </table>
  </dd>
</dl>
<p>Sets the <code>bStaticEval</code> in the compiler data structure: for any element for which the evaluation group may depend on the trajectory frame, the flag is cleared.</p>
<p><a class="el" href="compiler_8cpp.xhtml#a38bc921987c28127cb53b39c2f6cba8e" title="Reorders children of boolean expressions such that static selections come first. ">reorder_boolean_static_children()</a> should have been called. </p>

</div>
</div>
<a class="anchor" id="af15d8b95ce2c513722ed9c6fb0440908"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void init_item_subexpr_flags </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes compiler flags for subexpressions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sel</td><td>Root of the selection subtree to process. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a26980715c955d400823a4213c85ae953"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void init_item_subexpr_refcount </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compute reference counts for subexpressions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sel</td><td>Root of the selection subtree to process. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab1b906f82e266dd3c2fce45b0afee03e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void init_method </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_mtop_t *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>isize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Handles the initialization of a selection method during <a class="el" href="compiler_8cpp.xhtml#ac606faa067c02b2dc1bedfe5009ea455" title="Evaluates the static parts of sel and analyzes the structure. ">analyze_static()</a> pass. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">sel</td><td>Selection element to process. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">isize</td><td>Size of the evaluation group for the element. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 on success, a non-zero error code on return.</dd></dl>
<p>Calls <a class="el" href="selmethod_8h.xhtml#a09bc1abf0824d5baa5d52dbe5cd69a5c" title="Does initialization based on topology and/or parameter values. ">sel_initfunc()</a> (and possibly <a class="el" href="selmethod_8h.xhtml#a3eb421a75feaa37ef89191b6167b050a" title="Initializes output data structure. ">sel_outinitfunc()</a>) to initialize the method. If no <a class="el" href="selparam_8h.xhtml#ababaf52ada40922bb660a4949e1e52f0">SPAR_ATOMVAL</a> parameters are present, multiple initialization is prevented by using <a class="el" href="selelem_8h.xhtml#a817ef15e26829604cd54829b532f73dd">SEL_METHODINIT</a> and <a class="el" href="selelem_8h.xhtml#a65325c14d19726cb92041743c37a06b8">SEL_OUTINIT</a> flags. </p>

</div>
</div>
<a class="anchor" id="a26a966e96b46724be68058405dd369e9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void init_pos_keyword_defaults </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1SelectionTreeElement.xhtml">SelectionTreeElement</a> *&#160;</td>
          <td class="paramname"><em>root</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>spost</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rpost</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1internal_1_1SelectionData.xhtml">gmx::internal::SelectionData</a> *&#160;</td>
          <td class="paramname"><em>sel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes default values for position keyword evaluation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">root</td><td>Root of the element tree to initialize. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">spost</td><td>Default output position type. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rpost</td><td>Default reference position type. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sel</td><td>Selection that the element evaluates the positions for, or NULL if the element is an internal element. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a86cce09655ecc31494dbdc47b535799d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void init_required_atoms </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *&#160;</td>
          <td class="paramname"><em>requiredAtoms</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Finds the highest atom index required to evaluate a selection subtree. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sel</td><td>Root of the selection subtree to process. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">requiredAtoms</td><td>The atoms required to evaluate the subtree. The existing group is only added to, so multiple calls with the same parameter will compute the union over several subtrees.</td></tr>
  </table>
  </dd>
</dl>
<p>For evaluation that starts from a <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46a4374c0be00e03bae94a94c4f2d88569d">SEL_ROOT</a> element with a fixed group, children will never extend the evaluation group except for method parameter evaluation (which have their own root element), so it is sufficient to check the root. However, children of <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46a3d3bb644ace8fdc5beac6feed4911a1f">SEL_EXPRESSION</a> elements (i.e., the method parameters) may have been independently evaluated to a static group that no longer has a separate root, so those need to be checked as well.</p>
<p>Position calculations are not considered here, but are analyzed through the position calculation collection in the main compilation method. </p>

</div>
</div>
<a class="anchor" id="ae1dbfd7654f7bbfe6b8037df329590c2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void init_root_item </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>root</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *&#160;</td>
          <td class="paramname"><em>gall</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes the evaluation group for a <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46a4374c0be00e03bae94a94c4f2d88569d">SEL_ROOT</a> element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">root</td><td>Root element to initialize. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gall</td><td>Group of all atoms.</td></tr>
  </table>
  </dd>
</dl>
<p>Checks whether it is necessary to evaluate anything through the root element, and either clears the evaluation function or initializes the evaluation group. </p>

</div>
</div>
<a class="anchor" id="a8180e9255f0c8cf57f865523d1537607"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void initialize_evalgrps </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structgmx__ana__selcollection__t.xhtml">gmx_ana_selcollection_t</a> *&#160;</td>
          <td class="paramname"><em>sc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes evaluation groups for root items. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">sc</td><td>Selection collection data.</td></tr>
  </table>
  </dd>
</dl>
<p>The evaluation group of each <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46a4374c0be00e03bae94a94c4f2d88569d">SEL_ROOT</a> element corresponding to a selection in <code>sc</code> is set to NULL. The evaluation group for <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46a4374c0be00e03bae94a94c4f2d88569d">SEL_ROOT</a> elements corresponding to subexpressions that need full evaluation is set to <code>sc-&gt;gall</code>. </p>

</div>
</div>
<a class="anchor" id="a595082ba6c9b83cbdb5161de4ba495a4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void make_static </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Makes an evaluated selection element static. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sel</td><td>Selection element to make static.</td></tr>
  </table>
  </dd>
</dl>
<p>The evaluated value becomes the value of the static element. The element type is changed to SEL_CONST and the children are deleted. </p>

</div>
</div>
<a class="anchor" id="a2ce676e6caff3877910cd9cfc27cb955"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void mark_subexpr_dynamic </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bDynamic</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Marks a subtree completely dynamic or undoes such a change. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">sel</td><td>Selection subtree to mark. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bDynamic</td><td>If true, the <code>bStatic</code> flag of the whole selection subtree is cleared. If false, the flag is restored to using <a class="el" href="selelem_8h.xhtml#a7c6372a1eecd845aaaaf60326c9bba16">SEL_DYNAMIC</a>.</td></tr>
  </table>
  </dd>
</dl>
<p>Does not descend into parameters of methods unless the parameters are evaluated for each atom. </p>

</div>
</div>
<a class="anchor" id="aa22e901f96e3edaa72c2e222ed75bd01"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void optimize_arithmetic_expressions </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Processes arithmetic expressions to simplify and speed up evaluation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sel</td><td>Root of the selection subtree to process.</td></tr>
  </table>
  </dd>
</dl>
<p>Currently, this function only converts integer constants to reals within arithmetic expressions. </p>

</div>
</div>
<a class="anchor" id="aaf983339164e05e4e7319e88683ca6d6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void optimize_boolean_expressions </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes redundant boolean selection elements. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sel</td><td>Root of the selection subtree to optimize.</td></tr>
  </table>
  </dd>
</dl>
<p>This function merges similar boolean operations (e.g., (A or B) or C becomes a single OR operation with three operands). </p>

</div>
</div>
<a class="anchor" id="a794bd695ad208084dc7018e4c90735c1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void postprocess_item_subexpressions </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Optimizes subexpression evaluation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sel</td><td>Root of the selection subtree to process.</td></tr>
  </table>
  </dd>
</dl>
<p>Optimizes away some unnecessary evaluation of subexpressions that are only referenced once. </p>

</div>
</div>
<a class="anchor" id="a3a79847d59f377e50695756feae2818d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void process_const </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structgmx__sel__evaluate__t.xhtml">gmx_sel_evaluate_t</a> *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *&#160;</td>
          <td class="paramname"><em>g</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Evaluates a constant expression during <a class="el" href="compiler_8cpp.xhtml#ac606faa067c02b2dc1bedfe5009ea455" title="Evaluates the static parts of sel and analyzes the structure. ">analyze_static()</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Evaluation data. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">sel</td><td>Selection to process. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td>The evaluation group. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 on success, a non-zero error code on error. </dd></dl>

</div>
</div>
<a class="anchor" id="a03556fef583ab8dc316edcf57d457adc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void release_subexpr_memory </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Frees memory for subexpressions that are no longer needed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sel</td><td>Selection subtree to check.</td></tr>
  </table>
  </dd>
</dl>
<p>Checks whether the subtree rooted at <code>sel</code> refers to any <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46a4b01539a457afb7dbdf486c2a2e6dafb">SEL_SUBEXPR</a> elements that are not referred to by anything else except their own root element. If such elements are found, all memory allocated for them is freed except the actual element. The element is left because otherwise a dangling pointer would be left at the root element, which is not traversed by this function. Later compilation passes remove the stub elements. </p>

</div>
</div>
<a class="anchor" id="ae730a43c316325b32ac5c5fa397954f2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static SelectionTreeElementPointer remove_unused_subexpressions </td>
          <td>(</td>
          <td class="paramtype">SelectionTreeElementPointer&#160;</td>
          <td class="paramname"><em>root</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes subexpressions that don't have any references. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">root</td><td>First selection in the whole selection chain. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The new first element for the chain.</dd></dl>
<p>The elements are processed in reverse order to correctly detect subexpressions only referred to by other subexpressions. </p>

</div>
</div>
<a class="anchor" id="a38bc921987c28127cb53b39c2f6cba8e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void reorder_boolean_static_children </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reorders children of boolean expressions such that static selections come first. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sel</td><td>Root of the selection subtree to reorder.</td></tr>
  </table>
  </dd>
</dl>
<p>The relative order of static expressions does not change. The same is true for the dynamic expressions. </p>

</div>
</div>
<a class="anchor" id="a384e619869bf64aa2bf44132e721fa38"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static SelectionTreeElementPointer reverse_selelem_chain </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>root</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reverses the chain of selection elements starting at <code>root</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">root</td><td>First selection in the whole selection chain. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The new first element for the chain. </dd></dl>

</div>
</div>
<a class="anchor" id="a35320786c5039f3728adb84d85bd4c2b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void set_evaluation_function </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacegmx.xhtml#af63a35a5828a347c7d53a3365de983e9">gmx::sel_evalfunc</a>&#160;</td>
          <td class="paramname"><em>eval</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Replace the evaluation function of each element in the subtree. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">sel</td><td>Root of the selection subtree to process. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">eval</td><td>The new evaluation function. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="acc148fb03ac46544df28a7dc49db44f0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void setup_memory_pooling </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__sel__mempool__t.xhtml">gmx_sel_mempool_t</a> *&#160;</td>
          <td class="paramname"><em>mempool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the memory pool for selection elements that can use it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">sel</td><td>Root of the selection subtree to process. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mempool</td><td>Memory pool to use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a77f7a9f2e7090636063925f737876a50"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void store_param_val </td>
          <td>(</td>
          <td class="paramtype">const SelectionTreeElementPointer &amp;&#160;</td>
          <td class="paramname"><em>sel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the parameter value pointer for <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46af3e44c019a776df8511a73457f9b32b4">SEL_SUBEXPRREF</a> params. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">sel</td><td>Selection to process.</td></tr>
  </table>
  </dd>
</dl>
<p>Copies the value pointer of <code>sel</code> to <code>sel-&gt;u.param</code> if one is present and should receive the value from the compiler (most parameter values are handled during parsing). If <code>sel</code> is not of type <a class="el" href="selelem_8h.xhtml#a1f104d5c71b1198ef51acc4ef016ae46af3e44c019a776df8511a73457f9b32b4">SEL_SUBEXPRREF</a>, or if <code>sel-&gt;u.param</code> is NULL, the function does nothing. Also, if the <code>sel-&gt;u.param</code> does not have <a class="el" href="selparam_8h.xhtml#a400330277d7e17cdfef1610cc37838ea">SPAR_VARNUM</a> or <a class="el" href="selparam_8h.xhtml#ababaf52ada40922bb660a4949e1e52f0">SPAR_ATOMVAL</a>, the function returns immediately. </p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:57:17 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
