<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/mdlib/nbnxn_gpu_common.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_8a21c46af9718d1f610eb513153099d7.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a46192700e9e8ed44c648f0a55ee9a53.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_5c78749fb0acf3df2e9bdab18856bfa3.xhtml">mdlib</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">nbnxn_gpu_common.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;config.h&quot;</code><br/>
<code>#include &lt;string&gt;</code><br/>
<code>#include &quot;<a class="el" href="nbnxn__cuda__types_8h.xhtml">nbnxn_cuda/nbnxn_cuda_types.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="nbnxn__ocl__types_8h.xhtml">nbnxn_ocl/nbnxn_ocl_types.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="gpu__utils_8h.xhtml">gromacs/gpu_utils/gpu_utils.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/math/vec.h&quot;</code><br/>
<code>#include &quot;gromacs/mdlib/nbnxn_gpu_types.h&quot;</code><br/>
<code>#include &quot;gromacs/pbcutil/ishift.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="gpu__timing_8h.xhtml">gromacs/timing/gpu_timing.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="stringutil_8h.xhtml">gromacs/utility/stringutil.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="nbnxn__gpu__common__utils_8h.xhtml">nbnxn_gpu_common_utils.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for nbnxn_gpu_common.h:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="nbnxn__gpu__common_8h__incl.svg" width="1479" height="723"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><div class="textblock"><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> This graph shows which files directly or indirectly include this file:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="nbnxn__gpu__common_8h__dep__incl.svg" width="179" height="142"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Common functions for the different NBNXN GPU implementations. </p>
<dl class="section author"><dt>Author</dt><dd>Szilard Pall <a href="#" onclick="location.href='mai'+'lto:'+'pal'+'l.'+'szi'+'la'+'rd@'+'gm'+'ail'+'.c'+'om'; return false;">pall.<span style="display: none;">.nosp@m.</span>szil<span style="display: none;">.nosp@m.</span>ard@g<span style="display: none;">.nosp@m.</span>mail<span style="display: none;">.nosp@m.</span>.com</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a4e026482dbc819d9b51c0e14667d14d0"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__gpu__common_8h.xhtml#a4e026482dbc819d9b51c0e14667d14d0">validateGpuAtomLocality</a> (int atomLocality)</td></tr>
<tr class="memdesc:a4e026482dbc819d9b51c0e14667d14d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check that atom locality values are valid for the GPU module.  <a href="#a4e026482dbc819d9b51c0e14667d14d0">More...</a><br/></td></tr>
<tr class="separator:a4e026482dbc819d9b51c0e14667d14d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06d9a76817a1b0fa20f5734b691f4890"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__gpu__common_8h.xhtml#a06d9a76817a1b0fa20f5734b691f4890">gpuAtomToInteractionLocality</a> (int atomLocality)</td></tr>
<tr class="memdesc:a06d9a76817a1b0fa20f5734b691f4890"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert atom locality to interaction locality.  <a href="#a06d9a76817a1b0fa20f5734b691f4890">More...</a><br/></td></tr>
<tr class="separator:a06d9a76817a1b0fa20f5734b691f4890"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05bf9d36816b70412fffcb177cc26260"><td class="memTemplParams" colspan="2">template&lt;typename AtomDataT &gt; </td></tr>
<tr class="memitem:a05bf9d36816b70412fffcb177cc26260"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="nbnxn__gpu__common_8h.xhtml#a05bf9d36816b70412fffcb177cc26260">getGpuAtomRange</a> (const AtomDataT *atomData, int atomLocality, int &amp;atomRangeBegin, int &amp;atomRangeLen)</td></tr>
<tr class="memdesc:a05bf9d36816b70412fffcb177cc26260"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate atom range and return start index and length.  <a href="#a05bf9d36816b70412fffcb177cc26260">More...</a><br/></td></tr>
<tr class="separator:a05bf9d36816b70412fffcb177cc26260"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a295ddf80b9796ce66a327009934f9e51"><td class="memTemplParams" colspan="2">template&lt;typename GpuTimers &gt; </td></tr>
<tr class="memitem:a295ddf80b9796ce66a327009934f9e51"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="nbnxn__gpu__common_8h.xhtml#a295ddf80b9796ce66a327009934f9e51">countPruneKernelTime</a> (GpuTimers *timers, <a class="el" href="structgmx__wallclock__gpu__nbnxn__t.xhtml">gmx_wallclock_gpu_nbnxn_t</a> *timings, const int iloc)</td></tr>
<tr class="memdesc:a295ddf80b9796ce66a327009934f9e51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Count pruning kernel time if either kernel has been triggered.  <a href="#a295ddf80b9796ce66a327009934f9e51">More...</a><br/></td></tr>
<tr class="separator:a295ddf80b9796ce66a327009934f9e51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a774d56b035ddec621376efcf056335a9"><td class="memTemplParams" colspan="2">template&lt;typename StagingData &gt; </td></tr>
<tr class="memitem:a774d56b035ddec621376efcf056335a9"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="nbnxn__gpu__common_8h.xhtml#a774d56b035ddec621376efcf056335a9">nbnxn_gpu_reduce_staged_outputs</a> (const StagingData &amp;nbst, int iLocality, bool reduceEnergies, bool reduceFshift, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *e_lj, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *e_el, rvec *fshift)</td></tr>
<tr class="memdesc:a774d56b035ddec621376efcf056335a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reduce data staged internally in the nbnxn module.  <a href="#a774d56b035ddec621376efcf056335a9">More...</a><br/></td></tr>
<tr class="separator:a774d56b035ddec621376efcf056335a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b9ba7acd05060803fb13b2f35d51c93"><td class="memTemplParams" colspan="2">template&lt;typename GpuTimers , typename GpuPairlist &gt; </td></tr>
<tr class="memitem:a9b9ba7acd05060803fb13b2f35d51c93"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="nbnxn__gpu__common_8h.xhtml#a9b9ba7acd05060803fb13b2f35d51c93">nbnxn_gpu_accumulate_timings</a> (<a class="el" href="structgmx__wallclock__gpu__nbnxn__t.xhtml">gmx_wallclock_gpu_nbnxn_t</a> *timings, GpuTimers *timers, const GpuPairlist *plist, int atomLocality, bool didEnergyKernels, bool doTiming)</td></tr>
<tr class="memdesc:a9b9ba7acd05060803fb13b2f35d51c93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do the per-step timing accounting of the nonbonded tasks.  <a href="#a9b9ba7acd05060803fb13b2f35d51c93">More...</a><br/></td></tr>
<tr class="separator:a9b9ba7acd05060803fb13b2f35d51c93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99051c642e584444b7d30cf011b3e0d6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__gpu__common_8h.xhtml#a99051c642e584444b7d30cf011b3e0d6">nbnxn_gpu_try_finish_task</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_gpu_t</a> *nb, int flags, int aloc, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *e_lj, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *e_el, rvec *fshift, <a class="el" href="gpu__utils_8h.xhtml#aab3d31c4bd3fcb89aa5d554b125b403e">GpuTaskCompletion</a> completionKind)</td></tr>
<tr class="memdesc:a99051c642e584444b7d30cf011b3e0d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attempts to complete nonbonded GPU task.  <a href="#a99051c642e584444b7d30cf011b3e0d6">More...</a><br/></td></tr>
<tr class="separator:a99051c642e584444b7d30cf011b3e0d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ca8210020285dc8c926934c7d4d4b93"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__gpu__common_8h.xhtml#a9ca8210020285dc8c926934c7d4d4b93">nbnxn_gpu_wait_finish_task</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_gpu_t</a> *nb, int flags, int aloc, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *e_lj, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *e_el, rvec *fshift)</td></tr>
<tr class="memdesc:a9ca8210020285dc8c926934c7d4d4b93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait for the asynchronously launched nonbonded tasks and data transfers to finish.  <a href="#a9ca8210020285dc8c926934c7d4d4b93">More...</a><br/></td></tr>
<tr class="separator:a9ca8210020285dc8c926934c7d4d4b93"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a295ddf80b9796ce66a327009934f9e51"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename GpuTimers &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void countPruneKernelTime </td>
          <td>(</td>
          <td class="paramtype">GpuTimers *&#160;</td>
          <td class="paramname"><em>timers</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__wallclock__gpu__nbnxn__t.xhtml">gmx_wallclock_gpu_nbnxn_t</a> *&#160;</td>
          <td class="paramname"><em>timings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>iloc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Count pruning kernel time if either kernel has been triggered. </p>
<p>We do the accounting for either of the two pruning kernel flavors:</p>
<ul>
<li>1st pass prune: ran during the current step (prior to the force kernel);</li>
<li>rolling prune: ran at the end of the previous step (prior to the current step H2D xq);</li>
</ul>
<p>Note that the resetting of <a class="el" href="structnbnxn__gpu__timers__t.xhtml#ad64be82c648a187d6841ca789531841f" title="true when we timed pruning and the timings need to be accounted for ">cu_timers_t::didPrune</a> and <a class="el" href="structnbnxn__gpu__timers__t.xhtml#a167294a66197578dacb85a8c846d6fd3" title="true when we timed rolling pruning (at the previous step) and the timings need to be accounted for ...">cu_timers_t::didRollingPrune</a> should happen after calling this function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">timers</td><td>structs with GPU timer objects </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">timings</td><td>GPU task timing data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">iloc</td><td>interaction locality </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a05bf9d36816b70412fffcb177cc26260"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename AtomDataT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void getGpuAtomRange </td>
          <td>(</td>
          <td class="paramtype">const AtomDataT *&#160;</td>
          <td class="paramname"><em>atomData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>atomLocality</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>atomRangeBegin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>atomRangeLen</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate atom range and return start index and length. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">atomData</td><td>Atom descriptor data structure </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">atomLocality</td><td>Atom locality specifier </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">atomRangeBegin</td><td>Starting index of the atom range in the atom data array. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">atomRangeLen</td><td>Atom range length in the atom data array. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a06d9a76817a1b0fa20f5734b691f4890"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int gpuAtomToInteractionLocality </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>atomLocality</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert atom locality to interaction locality. </p>
<p>In the current implementation the this is straightforward conversion: local to local, non-local to non-local.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">atomLocality</td><td>Atom locality specifier </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Interaction locality corresponding to the atom locality passed. </dd></dl>

</div>
</div>
<a class="anchor" id="a9b9ba7acd05060803fb13b2f35d51c93"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename GpuTimers , typename GpuPairlist &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void nbnxn_gpu_accumulate_timings </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structgmx__wallclock__gpu__nbnxn__t.xhtml">gmx_wallclock_gpu_nbnxn_t</a> *&#160;</td>
          <td class="paramname"><em>timings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GpuTimers *&#160;</td>
          <td class="paramname"><em>timers</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const GpuPairlist *&#160;</td>
          <td class="paramname"><em>plist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>atomLocality</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>didEnergyKernels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>doTiming</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Do the per-step timing accounting of the nonbonded tasks. </p>
<p>Does timing accumulation and call-count increments for the nonbonded kernels. Note that this function should be called after the current step's nonbonded nonbonded tasks have completed with the exception of the rolling pruning kernels that are accounted for during the following step.</p>
<p>NOTE: if timing with multiple GPUs (streams) becomes possible, the counters could end up being inconsistent due to not being incremented on some of the node when this is skipped on empty local domains!</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">GpuTimers</td><td>GPU timers type </td></tr>
    <tr><td class="paramname">GpuPairlist</td><td>Pair list type </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">timings</td><td>Pointer to the NB GPU timings data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">timers</td><td>Pointer to GPU timers data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">plist</td><td>Pointer to the pair list data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">atomLocality</td><td>Atom locality specifier </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">didEnergyKernels</td><td>True if energy kernels have been called in the current step </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">doTiming</td><td>True if timing is enabled. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a774d56b035ddec621376efcf056335a9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename StagingData &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void nbnxn_gpu_reduce_staged_outputs </td>
          <td>(</td>
          <td class="paramtype">const StagingData &amp;&#160;</td>
          <td class="paramname"><em>nbst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iLocality</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reduceEnergies</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reduceFshift</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>e_lj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>e_el</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec *&#160;</td>
          <td class="paramname"><em>fshift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reduce data staged internally in the nbnxn module. </p>
<p>Shift forces and electrostatic/LJ energies copied from the GPU into a module-internal staging area are immediately reduced (CPU-side buffers passed) after having waited for the transfers' completion.</p>
<p>Note that this function should always be called after the transfers into the staging buffers has completed.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">StagingData</td><td>Type of staging data </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nbst</td><td>Nonbonded staging data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">iLocality</td><td>Interaction locality specifier </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">reduceEnergies</td><td>True if energy reduction should be done </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">reduceFshift</td><td>True if shift force reduction should be done </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">e_lj</td><td>Variable to accumulate LJ energy into </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">e_el</td><td>Variable to accumulate electrostatic energy into </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">fshift</td><td>Pointer to the array of shift forces to accumulate into </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a99051c642e584444b7d30cf011b3e0d6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool nbnxn_gpu_try_finish_task </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_gpu_t</a> *&#160;</td>
          <td class="paramname"><em>nb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>aloc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>e_lj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>e_el</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec *&#160;</td>
          <td class="paramname"><em>fshift</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="gpu__utils_8h.xhtml#aab3d31c4bd3fcb89aa5d554b125b403e">GpuTaskCompletion</a>&#160;</td>
          <td class="paramname"><em>completionKind</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Attempts to complete nonbonded GPU task. </p>
<p>This function attempts to complete the nonbonded task (both GPU and CPU auxiliary work). Success, i.e. that the tasks completed and results are ready to be consumed, is signaled by the return value (always true if blocking wait mode requested).</p>
<p>The <code>completionKind</code> parameter controls whether the behavior is non-blocking (achieved by passing GpuTaskCompletion::Check) or blocking wait until the results are ready (when GpuTaskCompletion::Wait is passed). As the "Check" mode the function will return immediately if the GPU stream still contain tasks that have not completed, it allows more flexible overlapping of work on the CPU with GPU execution.</p>
<p>Note that it is only safe to use the results, and to continue to the next MD step when this function has returned true which indicates successful completion of</p>
<ul>
<li>All nonbonded GPU tasks: both compute and device transfer(s)</li>
<li>auxiliary tasks: updating the internal module state (timing accumulation, list pruning states) and</li>
<li>internal staging reduction of (<code>fshift</code>, <code>e_el</code>, <code>e_lj</code>).</li>
</ul>
<p>TODO: improve the handling of outputs e.g. by ensuring that this function explcitly returns the force buffer (instead of that being passed only to <a class="el" href="nbnxn__gpu_8h.xhtml#ac4d9546662f5954ae56e3af4d09e4c4a" title="Launch asynchronously the download of nonbonded forces from the GPU (and energies/shift forces if req...">nbnxn_gpu_launch_cpyback()</a>) and by returning the energy and Fshift contributions for some external/centralized reduction.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nb</td><td>The nonbonded data GPU structure </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">flags</td><td>Force flags </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">aloc</td><td>Atom locality identifier </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">e_lj</td><td>Pointer to the LJ energy output to accumulate into </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">e_el</td><td>Pointer to the electrostatics energy output to accumulate into </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">fshift</td><td>Pointer to the shift force buffer to accumulate into </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">completionKind</td><td>Indicates whether nnbonded task completion should only be checked rather than waited for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the nonbonded tasks associated with <code>aloc</code> locality have completed </dd></dl>

</div>
</div>
<a class="anchor" id="a9ca8210020285dc8c926934c7d4d4b93"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void nbnxn_gpu_wait_finish_task </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_gpu_t</a> *&#160;</td>
          <td class="paramname"><em>nb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>aloc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>e_lj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>e_el</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec *&#160;</td>
          <td class="paramname"><em>fshift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wait for the asynchronously launched nonbonded tasks and data transfers to finish. </p>
<p>Completes the nonbonded GPU task blocking until GPU tasks and data transfers to finish.</p>
<p>Also does timing accounting and reduction of the internal staging buffers. As this is called at the end of the step, it also resets the pair list and pruning flags.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nb</td><td>The nonbonded data GPU structure </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">flags</td><td>Force flags </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">aloc</td><td>Atom locality identifier </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">e_lj</td><td>Pointer to the LJ energy output to accumulate into </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">e_el</td><td>Pointer to the electrostatics energy output to accumulate into </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">fshift</td><td>Pointer to the shift force buffer to accumulate into </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4e026482dbc819d9b51c0e14667d14d0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void validateGpuAtomLocality </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>atomLocality</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check that atom locality values are valid for the GPU module. </p>
<p>In the GPU module atom locality "all" is not supported, the local and non-local ranges are treated separately.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">atomLocality</td><td>atom locality specifier </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:57:17 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
