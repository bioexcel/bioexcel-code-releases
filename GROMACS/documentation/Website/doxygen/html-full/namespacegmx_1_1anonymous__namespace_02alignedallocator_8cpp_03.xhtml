<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::anonymous_namespace{alignedallocator.cpp} Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li class="current"><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.xhtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.xhtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="namespacegmx_1_1anonymous__namespace_02alignedallocator_8cpp_03.xhtml">anonymous_namespace{alignedallocator.cpp}</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">gmx::anonymous_namespace{alignedallocator.cpp} Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ad0d56cb5a37ddd8c7cd0f6453ce8ad3c"><td class="memItemLeft" align="right" valign="top">static void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02alignedallocator_8cpp_03.xhtml#ad0d56cb5a37ddd8c7cd0f6453ce8ad3c">alignedMallocGeneric</a> (std::size_t bytes, std::size_t alignment)</td></tr>
<tr class="memdesc:ad0d56cb5a37ddd8c7cd0f6453ce8ad3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate aligned memory in a fully portable way.  <a href="#ad0d56cb5a37ddd8c7cd0f6453ce8ad3c">More...</a><br/></td></tr>
<tr class="separator:ad0d56cb5a37ddd8c7cd0f6453ce8ad3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96474ba7edf3ce189ccd677484e15e51"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02alignedallocator_8cpp_03.xhtml#a96474ba7edf3ce189ccd677484e15e51">alignedFreeGeneric</a> (void *p)</td></tr>
<tr class="memdesc:a96474ba7edf3ce189ccd677484e15e51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free aligned memory.  <a href="#a96474ba7edf3ce189ccd677484e15e51">More...</a><br/></td></tr>
<tr class="separator:a96474ba7edf3ce189ccd677484e15e51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33994423fc58ba609d196a811b56f54b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a33994423fc58ba609d196a811b56f54b"></a>
static void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02alignedallocator_8cpp_03.xhtml#a33994423fc58ba609d196a811b56f54b">mallocImpl</a> (std::size_t bytes, std::size_t alignment)</td></tr>
<tr class="memdesc:a33994423fc58ba609d196a811b56f54b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implement malloc of <code>bytes</code> of memory, aligned to <code>alignment</code>. <br/></td></tr>
<tr class="separator:a33994423fc58ba609d196a811b56f54b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a158c7a9d69eeb06fb97389d8a6963bce"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a158c7a9d69eeb06fb97389d8a6963bce"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02alignedallocator_8cpp_03.xhtml#a158c7a9d69eeb06fb97389d8a6963bce">freeImpl</a> (void *p)</td></tr>
<tr class="memdesc:a158c7a9d69eeb06fb97389d8a6963bce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free aligned memory allocated with <a class="el" href="namespacegmx_1_1anonymous__namespace_02alignedallocator_8cpp_03.xhtml#a33994423fc58ba609d196a811b56f54b" title="Implement malloc of bytes of memory, aligned to alignment. ">mallocImpl()</a>. <br/></td></tr>
<tr class="separator:a158c7a9d69eeb06fb97389d8a6963bce"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a96474ba7edf3ce189ccd677484e15e51"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::anonymous_namespace{alignedallocator.cpp}::alignedFreeGeneric </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Free aligned memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>Memory pointer previously returned from gmx::internal::alignedFreePortable().</td></tr>
  </table>
  </dd>
</dl>
<p>Since this routine relies on the original pointer being stored just before the memory area p points to, bad things will happen if you call this routine with a pointer obtained any other way, or if you call the system free() with a pointer obtained from std::alignedMalloc().</p>
<dl class="section note"><dt>Note</dt><dd>This is an internal routine that should only be called from gmx::alignedFree(). </dd></dl>

</div>
</div>
<a class="anchor" id="ad0d56cb5a37ddd8c7cd0f6453ce8ad3c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void* gmx::anonymous_namespace{alignedallocator.cpp}::alignedMallocGeneric </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>alignment</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allocate aligned memory in a fully portable way. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bytes</td><td>Amount of memory (bytes) to allocate. The routine will return nullptr if the allocation fails. However, note that asking for zero bytes will return a pointer that is non-null and properly aligned (but obviously you cannot use it, since you promised not to access data beyond the 0 bytes you asked for).</td></tr>
    <tr><td class="paramname">alignment</td><td>Alignment specification in bytes, must be a power of 2.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Nonzero pointer if the allocation worked, otherwise nullptr. This routine should only be called from alignedMalloc(), which also does the checking for valid values. This particular function is used for platforms where we have no control of the alignment of memory returned by the system. Instead, we increase the amount of memory requested internally such that we both can create a pointer inside this memory that fulfills the memory alignment requested, and that we have room to store the original pointer just before this area.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is an internal routine that should only be called from gmx::alignedMalloc(). Just like system-provided routines, it provides memory that is aligned - but not padded. </dd></dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:57:30 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
