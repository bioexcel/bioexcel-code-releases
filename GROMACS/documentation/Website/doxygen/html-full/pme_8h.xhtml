<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/ewald/pme.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_8a21c46af9718d1f610eb513153099d7.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a46192700e9e8ed44c648f0a55ee9a53.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_69ef3b2caaf4d875cb2a3215a087d3ea.xhtml">ewald</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">pme.h File Reference<div class="ingroups"><a class="el" href="group__group__libraryapi.xhtml">Library API</a> &#124; <a class="el" href="group__module__ewald.xhtml">Ewald-family treatments of long-ranged forces</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;string&gt;</code><br/>
<code>#include &quot;gromacs/math/vectypes.h&quot;</code><br/>
<code>#include &quot;gromacs/timing/wallcycle.h&quot;</code><br/>
<code>#include &quot;gromacs/timing/walltime_accounting.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="arrayref_8h.xhtml">gromacs/utility/arrayref.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="basedefinitions_8h.xhtml">gromacs/utility/basedefinitions.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="real_8h.xhtml">gromacs/utility/real.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for pme.h:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="pme_8h__incl.svg" width="928" height="351"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><div class="textblock"><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> This graph shows which files directly or indirectly include this file:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="pme_8h__dep__incl.svg" width="1678" height="395"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>This file contains function declarations necessary for computing energies and forces for the PME long-ranged part (Coulomb and LJ). </p>
<dl class="section author"><dt>Author</dt><dd>Berk Hess <a href="#" onclick="location.href='mai'+'lto:'+'hes'+'s@'+'kth'+'.s'+'e'; return false;">hess@<span style="display: none;">.nosp@m.</span>kth.<span style="display: none;">.nosp@m.</span>se</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ab6d75b83531d15842aaa37feab7d83e2"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#ab6d75b83531d15842aaa37feab7d83e2">GMX_PME_SPREAD</a>&#160;&#160;&#160;(1&lt;&lt;0)</td></tr>
<tr class="memdesc:ab6d75b83531d15842aaa37feab7d83e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flag values that control what <a class="el" href="pme_8cpp.xhtml#a4f11dc953f2403aea6e1e1e49a0a3ac3" title="Do a PME calculation on a CPU for the long range electrostatics and/or LJ. ">gmx_pme_do()</a> will calculate.  <a href="#ab6d75b83531d15842aaa37feab7d83e2">More...</a><br/></td></tr>
<tr class="separator:ab6d75b83531d15842aaa37feab7d83e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6d1376d9a280f7910a157d75e8eba43"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac6d1376d9a280f7910a157d75e8eba43"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><b>GMX_PME_SOLVE</b>&#160;&#160;&#160;(1&lt;&lt;1)</td></tr>
<tr class="separator:ac6d1376d9a280f7910a157d75e8eba43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae563d0a2d83859bdbb9fc13746594662"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae563d0a2d83859bdbb9fc13746594662"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><b>GMX_PME_CALC_F</b>&#160;&#160;&#160;(1&lt;&lt;2)</td></tr>
<tr class="separator:ae563d0a2d83859bdbb9fc13746594662"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac367c183d9abb53f9d5c45e46070e72e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac367c183d9abb53f9d5c45e46070e72e"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><b>GMX_PME_CALC_ENER_VIR</b>&#160;&#160;&#160;(1&lt;&lt;3)</td></tr>
<tr class="separator:ac367c183d9abb53f9d5c45e46070e72e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53dd47b2f8893cb1209a1f0c7af9c493"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a53dd47b2f8893cb1209a1f0c7af9c493"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><b>GMX_PME_CALC_POT</b>&#160;&#160;&#160;(1&lt;&lt;4)</td></tr>
<tr class="separator:a53dd47b2f8893cb1209a1f0c7af9c493"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f3f5bfad0e83132220cbeebc499b5e2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5f3f5bfad0e83132220cbeebc499b5e2"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><b>GMX_PME_DO_ALL_F</b>&#160;&#160;&#160;(<a class="el" href="pme_8h.xhtml#ab6d75b83531d15842aaa37feab7d83e2">GMX_PME_SPREAD</a> | GMX_PME_SOLVE | GMX_PME_CALC_F)</td></tr>
<tr class="separator:a5f3f5bfad0e83132220cbeebc499b5e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:abc5c98fcc1211af2b80116dd6e0a035d"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <b>GMX_SUM_GRID_FORWARD</b>, 
<b>GMX_SUM_GRID_BACKWARD</b>
 }</td></tr>
<tr class="separator:abc5c98fcc1211af2b80116dd6e0a035d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc082ed1af9a4868af13352373ed3791"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#adc082ed1af9a4868af13352373ed3791">PmeRunMode</a> { <a class="el" href="pme_8h.xhtml#adc082ed1af9a4868af13352373ed3791ac9d3e887722f2bc482bcca9d41c512af">None</a>, 
<a class="el" href="pme_8h.xhtml#adc082ed1af9a4868af13352373ed3791a0035eb0600d18dfc302f6bf7a7cbfa3b">CPU</a>, 
<a class="el" href="pme_8h.xhtml#adc082ed1af9a4868af13352373ed3791a90768d506a26e2fd926bc5920b63daad">GPU</a>, 
<a class="el" href="pme_8h.xhtml#adc082ed1af9a4868af13352373ed3791ab92f302712b561470bfc9be49649f99f">Mixed</a>
 }</td></tr>
<tr class="memdesc:adc082ed1af9a4868af13352373ed3791"><td class="mdescLeft">&#160;</td><td class="mdescRight">Possible PME codepaths on a rank.  <a href="pme_8h.xhtml#adc082ed1af9a4868af13352373ed3791">More...</a><br/></td></tr>
<tr class="separator:adc082ed1af9a4868af13352373ed3791"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbcd1495b351f6a99fa2bf5b10aca640"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#acbcd1495b351f6a99fa2bf5b10aca640">PmeForceOutputHandling</a> { <a class="el" href="pme_8h.xhtml#acbcd1495b351f6a99fa2bf5b10aca640a5d5b78699e57104f2fa03bbdf7b9197b">PmeForceOutputHandling::Set</a>, 
<a class="el" href="pme_8h.xhtml#acbcd1495b351f6a99fa2bf5b10aca640a42f1eb7ac5a7918712e21bf4e5ca731b">PmeForceOutputHandling::ReduceWithInput</a>
 }</td></tr>
<tr class="memdesc:acbcd1495b351f6a99fa2bf5b10aca640"><td class="mdescLeft">&#160;</td><td class="mdescRight">PME gathering output forces treatment.  <a href="pme_8h.xhtml#acbcd1495b351f6a99fa2bf5b10aca640">More...</a><br/></td></tr>
<tr class="separator:acbcd1495b351f6a99fa2bf5b10aca640"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a3167e04d492823ba4279c5e11417cb8f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3167e04d492823ba4279c5e11417cb8f"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a3167e04d492823ba4279c5e11417cb8f">minimalPmeGridSize</a> (int pmeOrder)</td></tr>
<tr class="memdesc:a3167e04d492823ba4279c5e11417cb8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the smallest allowed PME grid size for <code>pmeOrder</code>. <br/></td></tr>
<tr class="separator:a3167e04d492823ba4279c5e11417cb8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addb389aeee720cd4f4d6bd2f33b31873"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#addb389aeee720cd4f4d6bd2f33b31873">gmx_pme_check_restrictions</a> (int pme_order, int nkx, int nky, int nkz, int nnodes_major, bool useThreads, bool errorsAreFatal)</td></tr>
<tr class="memdesc:addb389aeee720cd4f4d6bd2f33b31873"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check restrictions on pme_order and the PME grid nkx,nky,nkz.  <a href="#addb389aeee720cd4f4d6bd2f33b31873">More...</a><br/></td></tr>
<tr class="separator:addb389aeee720cd4f4d6bd2f33b31873"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb51e1b6f53cdf7342fb660a22d65119"><td class="memItemLeft" align="right" valign="top">gmx_pme_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#aeb51e1b6f53cdf7342fb660a22d65119">gmx_pme_init</a> (const t_commrec *cr, int nnodes_major, int nnodes_minor, const t_inputrec *ir, int homenr, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bFreeEnergy_q, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bFreeEnergy_lj, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bReproducible, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> ewaldcoeff_q, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> ewaldcoeff_lj, int nthread, <a class="el" href="pme_8h.xhtml#adc082ed1af9a4868af13352373ed3791">PmeRunMode</a> runMode, <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, <a class="el" href="structgmx__device__info__t.xhtml">gmx_device_info_t</a> *gpuInfo, const <a class="el" href="classgmx_1_1MDLogger.xhtml">gmx::MDLogger</a> &amp;mdlog)</td></tr>
<tr class="memdesc:aeb51e1b6f53cdf7342fb660a22d65119"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct PME data.  <a href="#aeb51e1b6f53cdf7342fb660a22d65119">More...</a><br/></td></tr>
<tr class="separator:aeb51e1b6f53cdf7342fb660a22d65119"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5a75a2d477885fcb0260908f6e7b2f2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac5a75a2d477885fcb0260908f6e7b2f2"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#ac5a75a2d477885fcb0260908f6e7b2f2">gmx_pme_destroy</a> (gmx_pme_t *pme)</td></tr>
<tr class="memdesc:ac5a75a2d477885fcb0260908f6e7b2f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys the PME data structure. <br/></td></tr>
<tr class="separator:ac5a75a2d477885fcb0260908f6e7b2f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f11dc953f2403aea6e1e1e49a0a3ac3"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a4f11dc953f2403aea6e1e1e49a0a3ac3">gmx_pme_do</a> (struct gmx_pme_t *pme, int start, int homenr, rvec x[], rvec f[], <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> chargeA[], <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> chargeB[], <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> c6A[], <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> c6B[], <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> sigmaA[], <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> sigmaB[], matrix box, t_commrec *cr, int maxshift_x, int maxshift_y, t_nrnb *nrnb, gmx_wallcycle_t wcycle, matrix vir_q, matrix vir_lj, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *energy_q, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *energy_lj, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> lambda_q, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> lambda_lj, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *dvdlambda_q, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *dvdlambda_lj, int flags)</td></tr>
<tr class="memdesc:a4f11dc953f2403aea6e1e1e49a0a3ac3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do a PME calculation on a CPU for the long range electrostatics and/or LJ.  <a href="#a4f11dc953f2403aea6e1e1e49a0a3ac3">More...</a><br/></td></tr>
<tr class="separator:a4f11dc953f2403aea6e1e1e49a0a3ac3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a516424aeaca910d927b8b1ee74e1758d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a516424aeaca910d927b8b1ee74e1758d"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a516424aeaca910d927b8b1ee74e1758d">gmx_pmeonly</a> (struct gmx_pme_t *pme, struct t_commrec *cr, t_nrnb *mynrnb, gmx_wallcycle_t wcycle, <a class="el" href="structgmx__walltime__accounting.xhtml">gmx_walltime_accounting_t</a> walltime_accounting, t_inputrec *ir, <a class="el" href="pme_8h.xhtml#adc082ed1af9a4868af13352373ed3791">PmeRunMode</a> runMode)</td></tr>
<tr class="memdesc:a516424aeaca910d927b8b1ee74e1758d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called on the nodes that do PME exclusively (as slaves) <br/></td></tr>
<tr class="separator:a516424aeaca910d927b8b1ee74e1758d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a1f7f848b8e4e23576a856f80251abd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a6a1f7f848b8e4e23576a856f80251abd">gmx_pme_calc_energy</a> (struct gmx_pme_t *pme, int n, rvec *x, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *q, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *V)</td></tr>
<tr class="memdesc:a6a1f7f848b8e4e23576a856f80251abd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the PME grid energy V for n charges.  <a href="#a6a1f7f848b8e4e23576a856f80251abd">More...</a><br/></td></tr>
<tr class="separator:a6a1f7f848b8e4e23576a856f80251abd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9036aa66d9959c10ab85d96e0966b84e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9036aa66d9959c10ab85d96e0966b84e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a9036aa66d9959c10ab85d96e0966b84e">gmx_pme_send_parameters</a> (struct t_commrec *cr, const interaction_const_t *ic, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bFreeEnergy_q, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bFreeEnergy_lj, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *chargeA, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *chargeB, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *sqrt_c6A, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *sqrt_c6B, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *sigmaA, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *sigmaB, int maxshift_x, int maxshift_y)</td></tr>
<tr class="memdesc:a9036aa66d9959c10ab85d96e0966b84e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send the charges and maxshift to out PME-only node. <br/></td></tr>
<tr class="separator:a9036aa66d9959c10ab85d96e0966b84e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e6232a31facc9ae1295456fe2ed852f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8e6232a31facc9ae1295456fe2ed852f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a8e6232a31facc9ae1295456fe2ed852f">gmx_pme_send_coordinates</a> (struct t_commrec *cr, matrix box, rvec *x, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> lambda_q, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> lambda_lj, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bEnerVir, gmx_int64_t step)</td></tr>
<tr class="memdesc:a8e6232a31facc9ae1295456fe2ed852f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send the coordinates to our PME-only node and request a PME calculation. <br/></td></tr>
<tr class="separator:a8e6232a31facc9ae1295456fe2ed852f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f834326084fb098046006e21cf0a186"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2f834326084fb098046006e21cf0a186"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a2f834326084fb098046006e21cf0a186">gmx_pme_send_finish</a> (struct t_commrec *cr)</td></tr>
<tr class="memdesc:a2f834326084fb098046006e21cf0a186"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell our PME-only node to finish. <br/></td></tr>
<tr class="separator:a2f834326084fb098046006e21cf0a186"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c472206ea895284fd905ef66ec72d57"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4c472206ea895284fd905ef66ec72d57"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a4c472206ea895284fd905ef66ec72d57">gmx_pme_send_resetcounters</a> (struct t_commrec *cr, gmx_int64_t step)</td></tr>
<tr class="memdesc:a4c472206ea895284fd905ef66ec72d57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell our PME-only node to reset all cycle and flop counters. <br/></td></tr>
<tr class="separator:a4c472206ea895284fd905ef66ec72d57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65c64c95cb32d5a4c8e0f7a61a042eef"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a65c64c95cb32d5a4c8e0f7a61a042eef"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a65c64c95cb32d5a4c8e0f7a61a042eef">gmx_pme_receive_f</a> (struct t_commrec *cr, <a class="el" href="classgmx_1_1ForceWithVirial.xhtml">gmx::ForceWithVirial</a> *forceWithVirial, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *energy_q, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *energy_lj, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *dvdlambda_q, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *dvdlambda_lj, float *pme_cycles)</td></tr>
<tr class="memdesc:a65c64c95cb32d5a4c8e0f7a61a042eef"><td class="mdescLeft">&#160;</td><td class="mdescRight">PP nodes receive the long range forces from the PME nodes. <br/></td></tr>
<tr class="separator:a65c64c95cb32d5a4c8e0f7a61a042eef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bbcd1698af0baadd183fc819b0c96f2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a2bbcd1698af0baadd183fc819b0c96f2">gmx_pme_reinit_atoms</a> (const gmx_pme_t *pme, const int nAtoms, const <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *charges)</td></tr>
<tr class="memdesc:a2bbcd1698af0baadd183fc819b0c96f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function updates the local atom data on GPU after DD (charges, coordinates, etc.). TODO: it should update the PME CPU atom data as well. (currently PME CPU call <a class="el" href="pme_8cpp.xhtml#a4f11dc953f2403aea6e1e1e49a0a3ac3" title="Do a PME calculation on a CPU for the long range electrostatics and/or LJ. ">gmx_pme_do()</a> gets passed the input pointers for each computation).  <a href="#a2bbcd1698af0baadd183fc819b0c96f2">More...</a><br/></td></tr>
<tr class="separator:a2bbcd1698af0baadd183fc819b0c96f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a877779523026740bee18ecc68ca9ab42"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a877779523026740bee18ecc68ca9ab42">pme_gpu_supports_input</a> (const t_inputrec *ir, std::string *error)</td></tr>
<tr class="memdesc:a877779523026740bee18ecc68ca9ab42"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the input system allows to run PME on GPU. TODO: this mostly duplicates an internal PME assert function <a class="el" href="pme-gpu-internal_8cpp.xhtml#a30f29ab01f4617cea28a55ee8552ee6a" title="Finds out if PME with given inputs is possible to run on GPU. ">pme_gpu_check_restrictions()</a>, except that works with a formed gmx_pme_t structure. Should that one go away/work with inputrec?  <a href="#a877779523026740bee18ecc68ca9ab42">More...</a><br/></td></tr>
<tr class="separator:a877779523026740bee18ecc68ca9ab42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cfbe9fa691aabaf1a9e10fa06858c96"><td class="memItemLeft" align="right" valign="top"><a class="el" href="pme_8h.xhtml#adc082ed1af9a4868af13352373ed3791">PmeRunMode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a9cfbe9fa691aabaf1a9e10fa06858c96">pme_run_mode</a> (const gmx_pme_t *pme)</td></tr>
<tr class="memdesc:a9cfbe9fa691aabaf1a9e10fa06858c96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the active PME codepath (CPU, GPU, mixed).  <a href="#a9cfbe9fa691aabaf1a9e10fa06858c96">More...</a><br/></td></tr>
<tr class="separator:a9cfbe9fa691aabaf1a9e10fa06858c96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9faddde52f5a636410141f52cc95d3e1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a9faddde52f5a636410141f52cc95d3e1">pme_gpu_task_enabled</a> (const gmx_pme_t *pme)</td></tr>
<tr class="memdesc:a9faddde52f5a636410141f52cc95d3e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tells if PME is enabled to run on GPU (not necessarily active at the moment).  <a href="#a9faddde52f5a636410141f52cc95d3e1">More...</a><br/></td></tr>
<tr class="separator:a9faddde52f5a636410141f52cc95d3e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e82dc29271032072ff9ffb1418a1954"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a9e82dc29271032072ff9ffb1418a1954">pme_gpu_reset_timings</a> (const gmx_pme_t *pme)</td></tr>
<tr class="memdesc:a9e82dc29271032072ff9ffb1418a1954"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets the PME GPU timings. To be called at the reset step.  <a href="#a9e82dc29271032072ff9ffb1418a1954">More...</a><br/></td></tr>
<tr class="separator:a9e82dc29271032072ff9ffb1418a1954"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadcdbd368ce25a9899c3cab4ec895cba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#aadcdbd368ce25a9899c3cab4ec895cba">pme_gpu_get_timings</a> (const gmx_pme_t *pme, <a class="el" href="structgmx__wallclock__gpu__pme__t.xhtml">gmx_wallclock_gpu_pme_t</a> *timings)</td></tr>
<tr class="memdesc:aadcdbd368ce25a9899c3cab4ec895cba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the PME GPU timings to the <a class="el" href="structgmx__wallclock__gpu__pme__t.xhtml" title="GPU timings for PME. ">gmx_wallclock_gpu_pme_t</a> structure (for log output). To be called at the run end.  <a href="#aadcdbd368ce25a9899c3cab4ec895cba">More...</a><br/></td></tr>
<tr class="separator:aadcdbd368ce25a9899c3cab4ec895cba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2db9507955e1908ed647984a9c62f641"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a2db9507955e1908ed647984a9c62f641">pme_gpu_prepare_computation</a> (gmx_pme_t *pme, bool needToUpdateBox, const matrix box, gmx_wallcycle_t wcycle, int flags)</td></tr>
<tr class="memdesc:a2db9507955e1908ed647984a9c62f641"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepares PME on GPU computation (updating the box if needed)  <a href="#a2db9507955e1908ed647984a9c62f641">More...</a><br/></td></tr>
<tr class="separator:a2db9507955e1908ed647984a9c62f641"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa0375d05b42903aa5fa89ecca162848"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#afa0375d05b42903aa5fa89ecca162848">pme_gpu_launch_spread</a> (gmx_pme_t *pme, const rvec *x, gmx_wallcycle_t wcycle)</td></tr>
<tr class="memdesc:afa0375d05b42903aa5fa89ecca162848"><td class="mdescLeft">&#160;</td><td class="mdescRight">Launches first stage of PME on GPU - H2D input transfers, spreading kernel, and D2H grid transfer if needed.  <a href="#afa0375d05b42903aa5fa89ecca162848">More...</a><br/></td></tr>
<tr class="separator:afa0375d05b42903aa5fa89ecca162848"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2efd4cd94bfa8f861b22936d2655b148"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a2efd4cd94bfa8f861b22936d2655b148">pme_gpu_launch_complex_transforms</a> (gmx_pme_t *pme, gmx_wallcycle_t wcycle)</td></tr>
<tr class="memdesc:a2efd4cd94bfa8f861b22936d2655b148"><td class="mdescLeft">&#160;</td><td class="mdescRight">Launches middle stages of PME (FFT R2C, solving, FFT C2R) either on GPU or on CPU, depending on the run mode.  <a href="#a2efd4cd94bfa8f861b22936d2655b148">More...</a><br/></td></tr>
<tr class="separator:a2efd4cd94bfa8f861b22936d2655b148"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48278ccbf705df4307a2e9cc984a6b3a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a48278ccbf705df4307a2e9cc984a6b3a">pme_gpu_launch_gather</a> (const gmx_pme_t *pme, gmx_wallcycle_t wcycle, <a class="el" href="pme_8h.xhtml#acbcd1495b351f6a99fa2bf5b10aca640">PmeForceOutputHandling</a> forceTreatment)</td></tr>
<tr class="memdesc:a48278ccbf705df4307a2e9cc984a6b3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Launches last stage of PME on GPU - force gathering and D2H force transfer.  <a href="#a48278ccbf705df4307a2e9cc984a6b3a">More...</a><br/></td></tr>
<tr class="separator:a48278ccbf705df4307a2e9cc984a6b3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6675ff9b6502c7f5e4a9b43eb0103da3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a6675ff9b6502c7f5e4a9b43eb0103da3">pme_gpu_wait_finish_task</a> (const gmx_pme_t *pme, gmx_wallcycle_t wcycle, <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">gmx::RVec</a> &gt; *forces, matrix virial, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *energy)</td></tr>
<tr class="memdesc:a6675ff9b6502c7f5e4a9b43eb0103da3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Blocks until PME GPU tasks are completed, and gets the output forces and virial/energy (if they were to be computed).  <a href="#a6675ff9b6502c7f5e4a9b43eb0103da3">More...</a><br/></td></tr>
<tr class="separator:a6675ff9b6502c7f5e4a9b43eb0103da3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f34e80606d5e1fbc6f825e3e9d6cffc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme_8h.xhtml#a3f34e80606d5e1fbc6f825e3e9d6cffc">pme_gpu_try_finish_task</a> (const gmx_pme_t *pme, gmx_wallcycle_t wcycle, <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">gmx::RVec</a> &gt; *forces, matrix virial, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *energy, <a class="el" href="gpu__utils_8h.xhtml#aab3d31c4bd3fcb89aa5d554b125b403e">GpuTaskCompletion</a> completionKind)</td></tr>
<tr class="memdesc:a3f34e80606d5e1fbc6f825e3e9d6cffc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attempts to complete PME GPU tasks.  <a href="#a3f34e80606d5e1fbc6f825e3e9d6cffc">More...</a><br/></td></tr>
<tr class="separator:a3f34e80606d5e1fbc6f825e3e9d6cffc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a class="anchor" id="ab6d75b83531d15842aaa37feab7d83e2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define GMX_PME_SPREAD&#160;&#160;&#160;(1&lt;&lt;0)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Flag values that control what <a class="el" href="pme_8cpp.xhtml#a4f11dc953f2403aea6e1e1e49a0a3ac3" title="Do a PME calculation on a CPU for the long range electrostatics and/or LJ. ">gmx_pme_do()</a> will calculate. </p>
<p>These can be combined with bitwise-OR if more than one thing is required. </p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a class="anchor" id="acbcd1495b351f6a99fa2bf5b10aca640"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="pme_8h.xhtml#acbcd1495b351f6a99fa2bf5b10aca640">PmeForceOutputHandling</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>PME gathering output forces treatment. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="acbcd1495b351f6a99fa2bf5b10aca640a5d5b78699e57104f2fa03bbdf7b9197b"></a>Set</em>&nbsp;</td><td class="fielddoc">
<p>Gather simply writes into provided force buffer. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="acbcd1495b351f6a99fa2bf5b10aca640a42f1eb7ac5a7918712e21bf4e5ca731b"></a>ReduceWithInput</em>&nbsp;</td><td class="fielddoc">
<p>Gather adds its output to the buffer. </p>
<p>On GPU, that means additional H2D copy before the kernel launch. </p>
</td></tr>
</table>

</div>
</div>
<a class="anchor" id="adc082ed1af9a4868af13352373ed3791"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="pme_8h.xhtml#adc082ed1af9a4868af13352373ed3791">PmeRunMode</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Possible PME codepaths on a rank. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000024">Todo:</a></b></dt><dd>: make this enum class with gmx_pme_t C++ refactoring </dd></dl>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="adc082ed1af9a4868af13352373ed3791ac9d3e887722f2bc482bcca9d41c512af"></a>None</em>&nbsp;</td><td class="fielddoc">
<p>No PME task is done. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="adc082ed1af9a4868af13352373ed3791a0035eb0600d18dfc302f6bf7a7cbfa3b"></a>CPU</em>&nbsp;</td><td class="fielddoc">
<p>Whole PME computation is done on CPU. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="adc082ed1af9a4868af13352373ed3791a90768d506a26e2fd926bc5920b63daad"></a>GPU</em>&nbsp;</td><td class="fielddoc">
<p>Whole PME computation is done on GPU. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="adc082ed1af9a4868af13352373ed3791ab92f302712b561470bfc9be49649f99f"></a>Mixed</em>&nbsp;</td><td class="fielddoc">
<p>Mixed mode: only spread and gather run on GPU; FFT and solving are done on CPU. </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a6a1f7f848b8e4e23576a856f80251abd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_pme_calc_energy </td>
          <td>(</td>
          <td class="paramtype">struct gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>q</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>V</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate the PME grid energy V for n charges. </p>
<p>The potential (found in <code>pme</code>) must have been found already with a call to <a class="el" href="pme_8cpp.xhtml#a4f11dc953f2403aea6e1e1e49a0a3ac3" title="Do a PME calculation on a CPU for the long range electrostatics and/or LJ. ">gmx_pme_do()</a> with at least GMX_PME_SPREAD and GMX_PME_SOLVE specified. Note that the charges are not spread on the grid in the pme struct. Currently does not work in parallel or with free energy. </p>

</div>
</div>
<a class="anchor" id="addb389aeee720cd4f4d6bd2f33b31873"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool gmx_pme_check_restrictions </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>pme_order</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nkx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nky</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nkz</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nnodes_major</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>useThreads</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>errorsAreFatal</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check restrictions on pme_order and the PME grid nkx,nky,nkz. </p>
<p>With errorsAreFatal=true, an exception or fatal error is generated on violation of restrictions. With errorsAreFatal=false, false is returned on violation of restrictions. When all restrictions are obeyed, true is returned. Argument useThreads tells if any MPI rank doing PME uses more than 1 threads. If at calling useThreads is unknown, pass true for conservative checking.</p>
<p>The PME GPU restrictions are checked separately during <a class="el" href="pme-gpu-internal_8cpp.xhtml#adf72d90341055cd222ad34c061236cb9" title="Initializes the PME GPU data at the beginning of the run. ">pme_gpu_init()</a>. </p>

</div>
</div>
<a class="anchor" id="a4f11dc953f2403aea6e1e1e49a0a3ac3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_pme_do </td>
          <td>(</td>
          <td class="paramtype">struct gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>homenr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>x</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>f</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>chargeA</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>chargeB</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>c6A</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>c6B</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>sigmaA</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>sigmaB</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">matrix&#160;</td>
          <td class="paramname"><em>box</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>maxshift_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>maxshift_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_nrnb *&#160;</td>
          <td class="paramname"><em>nrnb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">matrix&#160;</td>
          <td class="paramname"><em>vir_q</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">matrix&#160;</td>
          <td class="paramname"><em>vir_lj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>energy_q</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>energy_lj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>lambda_q</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>lambda_lj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>dvdlambda_q</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>dvdlambda_lj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Do a PME calculation on a CPU for the long range electrostatics and/or LJ. </p>
<p>The meaning of <code>flags</code> is defined above, and determines which parts of the calculation are performed.</p>
<dl class="section return"><dt>Returns</dt><dd>0 indicates all well, non zero is an error code. </dd></dl>

</div>
</div>
<a class="anchor" id="aeb51e1b6f53cdf7342fb660a22d65119"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">gmx_pme_t* gmx_pme_init </td>
          <td>(</td>
          <td class="paramtype">const t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nnodes_major</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nnodes_minor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_inputrec *&#160;</td>
          <td class="paramname"><em>ir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>homenr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bFreeEnergy_q</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bFreeEnergy_lj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bReproducible</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>ewaldcoeff_q</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>ewaldcoeff_lj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nthread</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="pme_8h.xhtml#adc082ed1af9a4868af13352373ed3791">PmeRunMode</a>&#160;</td>
          <td class="paramname"><em>runMode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__device__info__t.xhtml">gmx_device_info_t</a> *&#160;</td>
          <td class="paramname"><em>gpuInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1MDLogger.xhtml">gmx::MDLogger</a> &amp;&#160;</td>
          <td class="paramname"><em>mdlog</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct PME data. </p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1InconsistentInputError.xhtml" title="Exception class for situations where user input is inconsistent. ">gmx::InconsistentInputError</a></td><td>if input grid sizes/PME order are inconsistent. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to newly allocated and initialized PME data. </dd></dl>

</div>
</div>
<a class="anchor" id="a2bbcd1698af0baadd183fc819b0c96f2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_pme_reinit_atoms </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>nAtoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>charges</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function updates the local atom data on GPU after DD (charges, coordinates, etc.). TODO: it should update the PME CPU atom data as well. (currently PME CPU call <a class="el" href="pme_8cpp.xhtml#a4f11dc953f2403aea6e1e1e49a0a3ac3" title="Do a PME calculation on a CPU for the long range electrostatics and/or LJ. ">gmx_pme_do()</a> gets passed the input pointers for each computation). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nAtoms</td><td>The number of particles. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">charges</td><td>The pointer to the array of particle charges. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aadcdbd368ce25a9899c3cab4ec895cba"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_get_timings </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__wallclock__gpu__pme__t.xhtml">gmx_wallclock_gpu_pme_t</a> *&#160;</td>
          <td class="paramname"><em>timings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copies the PME GPU timings to the <a class="el" href="structgmx__wallclock__gpu__pme__t.xhtml" title="GPU timings for PME. ">gmx_wallclock_gpu_pme_t</a> structure (for log output). To be called at the run end. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">timings</td><td>The <a class="el" href="structgmx__wallclock__gpu__pme__t.xhtml" title="GPU timings for PME. ">gmx_wallclock_gpu_pme_t</a> structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2efd4cd94bfa8f861b22936d2655b148"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_launch_complex_transforms </td>
          <td>(</td>
          <td class="paramtype">gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Launches middle stages of PME (FFT R2C, solving, FFT C2R) either on GPU or on CPU, depending on the run mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME data structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>The wallclock counter. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a48278ccbf705df4307a2e9cc984a6b3a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_launch_gather </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="pme_8h.xhtml#acbcd1495b351f6a99fa2bf5b10aca640">PmeForceOutputHandling</a>&#160;</td>
          <td class="paramname"><em>forceTreatment</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Launches last stage of PME on GPU - force gathering and D2H force transfer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME data structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>The wallclock counter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">forceTreatment</td><td>Tells how data should be treated. The gathering kernel either stores the output reciprocal forces into the host array, or copies its contents to the GPU first and accumulates. The reduction is non-atomic. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afa0375d05b42903aa5fa89ecca162848"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_launch_spread </td>
          <td>(</td>
          <td class="paramtype">gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const rvec *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Launches first stage of PME on GPU - H2D input transfers, spreading kernel, and D2H grid transfer if needed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME data structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>The array of local atoms' coordinates. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>The wallclock counter. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2db9507955e1908ed647984a9c62f641"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_prepare_computation </td>
          <td>(</td>
          <td class="paramtype">gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>needToUpdateBox</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const matrix&#160;</td>
          <td class="paramname"><em>box</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Prepares PME on GPU computation (updating the box if needed) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME data structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">needToUpdateBox</td><td>Tells if the stored unit cell parameters should be updated from <code>box</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">box</td><td>The unit cell box. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>The wallclock counter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">flags</td><td>The combination of flags to affect this PME computation. The flags are the GMX_PME_ flags from <a class="el" href="pme_8h.xhtml" title="This file contains function declarations necessary for computing energies and forces for the PME long...">pme.h</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9e82dc29271032072ff9ffb1418a1954"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_reset_timings </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Resets the PME GPU timings. To be called at the reset step. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a877779523026740bee18ecc68ca9ab42"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pme_gpu_supports_input </td>
          <td>(</td>
          <td class="paramtype">const t_inputrec *&#160;</td>
          <td class="paramname"><em>ir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>error</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks whether the input system allows to run PME on GPU. TODO: this mostly duplicates an internal PME assert function <a class="el" href="pme-gpu-internal_8cpp.xhtml#a30f29ab01f4617cea28a55ee8552ee6a" title="Finds out if PME with given inputs is possible to run on GPU. ">pme_gpu_check_restrictions()</a>, except that works with a formed gmx_pme_t structure. Should that one go away/work with inputrec? </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ir</td><td>Input system. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">error</td><td>The error message if the input is not supported on GPU.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if PME can run on GPU with this input, false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a9faddde52f5a636410141f52cc95d3e1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool pme_gpu_task_enabled </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tells if PME is enabled to run on GPU (not necessarily active at the moment). </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000026">Todo:</a></b></dt><dd>This is a rather static data that should be managed by the hardware assignment manager. For now, it is synonymous with the active PME codepath (in the absence of dynamic switching).</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME data structure. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if PME can run on GPU, false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a3f34e80606d5e1fbc6f825e3e9d6cffc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pme_gpu_try_finish_task </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">gmx::RVec</a> &gt; *&#160;</td>
          <td class="paramname"><em>forces</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">matrix&#160;</td>
          <td class="paramname"><em>virial</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>energy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="gpu__utils_8h.xhtml#aab3d31c4bd3fcb89aa5d554b125b403e">GpuTaskCompletion</a>&#160;</td>
          <td class="paramname"><em>completionKind</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Attempts to complete PME GPU tasks. </p>
<p>The <code>completionKind</code> argument controls whether the function blocks until all PME GPU tasks enqueued completed (as <a class="el" href="pme-gpu_8cpp.xhtml#a6675ff9b6502c7f5e4a9b43eb0103da3" title="Blocks until PME GPU tasks are completed, and gets the output forces and virial/energy (if they were ...">pme_gpu_wait_finish_task()</a> does) or only checks and returns immediately if they did not. When blocking or the tasks have completed it also gets the output forces by assigning the ArrayRef to the <code>forces</code> pointer passed in. Virial/energy are also outputs if they were to be computed.</p>
<p>Note: also launches the reinitalization of the PME output buffers. TODO: this should be moved out to avoid miscounting its wall-time (as wait iso launch).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME data structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>The wallclock counter. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">forces</td><td>The output forces. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">virial</td><td>The output virial matrix. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">energy</td><td>The output energy. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">completionKind</td><td>Indicates whether PME task completion should only be checked rather than waited for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the PME GPU tasks have completed </dd></dl>

</div>
</div>
<a class="anchor" id="a6675ff9b6502c7f5e4a9b43eb0103da3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_wait_finish_task </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">gmx::RVec</a> &gt; *&#160;</td>
          <td class="paramname"><em>forces</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">matrix&#160;</td>
          <td class="paramname"><em>virial</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>energy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Blocks until PME GPU tasks are completed, and gets the output forces and virial/energy (if they were to be computed). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME data structure. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">wcycle</td><td>The wallclock counter. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">forces</td><td>The output forces. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">virial</td><td>The output virial matrix. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">energy</td><td>The output energy. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9cfbe9fa691aabaf1a9e10fa06858c96"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="pme_8h.xhtml#adc082ed1af9a4868af13352373ed3791">PmeRunMode</a> pme_run_mode </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the active PME codepath (CPU, GPU, mixed). </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000025">Todo:</a></b></dt><dd>This is a rather static data that should be managed by the higher level task scheduler.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME data structure. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>active PME codepath. </dd></dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:57:16 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
