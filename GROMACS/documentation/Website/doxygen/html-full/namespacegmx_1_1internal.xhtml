<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::internal Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li class="current"><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.xhtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.xhtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="namespacegmx_1_1internal.xhtml">internal</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">gmx::internal Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Internal GROMACS namespace. </p>
<p>This namespace is used to contain some implementation-specific functions and classes. These are not meant for direct user access, but typically reside in public headers because of implementation reasons. </p>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacegmx_1_1internal_1_1anonymous__namespace_02selection_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal_1_1anonymous__namespace_02selection_8cpp_03.xhtml">anonymous_namespace{selection.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1AnalysisDataHandleImpl.xhtml">AnalysisDataHandleImpl</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Private implementation class for <a class="el" href="classgmx_1_1AnalysisDataHandle.xhtml" title="Handle for inserting data into AnalysisData. ">AnalysisDataHandle</a>.  <a href="classgmx_1_1internal_1_1AnalysisDataHandleImpl.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1AnalysisDataStorageImpl.xhtml">AnalysisDataStorageImpl</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Private implementation class for <a class="el" href="classgmx_1_1AnalysisDataStorage.xhtml" title="Helper class that implements storage of data. ">AnalysisDataStorage</a>.  <a href="classgmx_1_1internal_1_1AnalysisDataStorageImpl.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1AnalysisDataStorageFrameData.xhtml">AnalysisDataStorageFrameData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal representation for a single stored frame.  <a href="classgmx_1_1internal_1_1AnalysisDataStorageFrameData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1BasicAverageHistogramModule.xhtml">BasicAverageHistogramModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements average histogram module that averages per-frame histograms.  <a href="classgmx_1_1internal_1_1BasicAverageHistogramModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1BasicHistogramImpl.xhtml">BasicHistogramImpl</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for private implementation classes for histogram modules.  <a href="classgmx_1_1internal_1_1BasicHistogramImpl.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1EnumIndexStore.xhtml">EnumIndexStore</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type-specific implementation for <a class="el" href="classgmx_1_1IOptionValueStore.xhtml" title="Represents the final storage location of option values. ">IOptionValueStore</a> for an enum option.  <a href="classgmx_1_1internal_1_1EnumIndexStore.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1OptionSectionImpl.xhtml">OptionSectionImpl</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal implementation class for storing an option section.  <a href="classgmx_1_1internal_1_1OptionSectionImpl.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1OptionsImpl.xhtml">OptionsImpl</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Private implementation class for <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a>.  <a href="classgmx_1_1internal_1_1OptionsImpl.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1SelectionData.xhtml">SelectionData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal data for a single selection.  <a href="classgmx_1_1internal_1_1SelectionData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgmx_1_1internal_1_1SimdTraits.xhtml">SimdTraits</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simd traits.  <a href="structgmx_1_1internal_1_1SimdTraits.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1SimdArrayRef.xhtml">SimdArrayRef</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">STL-like container for aligned SIMD type. Used as ArrayRef&lt;SimdReal&gt;.  <a href="classgmx_1_1internal_1_1SimdArrayRef.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1IExceptionInfo.xhtml">IExceptionInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for <a class="el" href="classgmx_1_1ExceptionInfo.xhtml" title="Stores additional context information for exceptions. ">ExceptionInfo</a>.  <a href="classgmx_1_1internal_1_1IExceptionInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a10329904859eb4035ac1a2464a9745b2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a10329904859eb4035ac1a2464a9745b2"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1AnalysisDataStorageFrame.xhtml">AnalysisDataStorageFrame</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#a10329904859eb4035ac1a2464a9745b2">AnalysisDataFrameBuilderPointer</a></td></tr>
<tr class="memdesc:a10329904859eb4035ac1a2464a9745b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer type for managing a storage frame builder. <br/></td></tr>
<tr class="separator:a10329904859eb4035ac1a2464a9745b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac21a2a7809b800b7a38d52106cb23576"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac21a2a7809b800b7a38d52106cb23576"></a>
typedef std::vector<br class="typebreak"/>
&lt; std::exception_ptr &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#ac21a2a7809b800b7a38d52106cb23576">NestedExceptionList</a></td></tr>
<tr class="memdesc:ac21a2a7809b800b7a38d52106cb23576"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal container type for storing a list of nested exceptions. <br/></td></tr>
<tr class="separator:ac21a2a7809b800b7a38d52106cb23576"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8255fddd22431a907c2932b034f75023"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8255fddd22431a907c2932b034f75023"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1internal_1_1IExceptionInfo.xhtml">IExceptionInfo</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#a8255fddd22431a907c2932b034f75023">ExceptionInfoPointer</a></td></tr>
<tr class="memdesc:a8255fddd22431a907c2932b034f75023"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer to manage <a class="el" href="classgmx_1_1internal_1_1IExceptionInfo.xhtml" title="Base class for ExceptionInfo. ">IExceptionInfo</a> ownership. <br/></td></tr>
<tr class="separator:a8255fddd22431a907c2932b034f75023"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga5d6e44acec82796430372618e7b7919e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml">AbstractOptionStorage</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__options.xhtml#ga5d6e44acec82796430372618e7b7919e">createEnumOptionStorage</a> (const <a class="el" href="classgmx_1_1AbstractOption.xhtml">AbstractOption</a> &amp;option, const char *const *enumValues, int count, int defaultValue, int defaultValueIfSet, <a class="el" href="classgmx_1_1IOptionValueStore.xhtml">IOptionValueStore</a>&lt; int &gt; *<a class="el" href="namespacegmx.xhtml#a9c1227e97a6084a280a611c2934c8ee1">store</a>)</td></tr>
<tr class="memdesc:ga5d6e44acec82796430372618e7b7919e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper to create <a class="el" href="classgmx_1_1EnumOptionStorage.xhtml" title="Converts, validates, and stores enum values. ">EnumOptionStorage</a> instances.  <a href="group__module__options.xhtml#ga5d6e44acec82796430372618e7b7919e">More...</a><br/></td></tr>
<tr class="separator:ga5d6e44acec82796430372618e7b7919e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71aba30ffd645096a2944c75870c2adc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#a71aba30ffd645096a2944c75870c2adc">throwUnlessDerivativeIsConsistentWithFunction</a> (const std::function&lt; double(double)&gt; &amp;function, const std::function&lt; double(double)&gt; &amp;derivative, const std::pair&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; &amp;range)</td></tr>
<tr class="memdesc:a71aba30ffd645096a2944c75870c2adc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ensure analytical derivative is the derivative of analytical function.  <a href="#a71aba30ffd645096a2944c75870c2adc">More...</a><br/></td></tr>
<tr class="separator:a71aba30ffd645096a2944c75870c2adc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84d04970d8b90387337f316491ed1d73"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#a84d04970d8b90387337f316491ed1d73">throwUnlessDerivativeIsConsistentWithFunction</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; const double &gt; function, <a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; const double &gt; derivative, double inputSpacing, const std::pair&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; &amp;range)</td></tr>
<tr class="memdesc:a84d04970d8b90387337f316491ed1d73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ensure vector of derivative values is the derivative of function vector.  <a href="#a84d04970d8b90387337f316491ed1d73">More...</a><br/></td></tr>
<tr class="separator:a84d04970d8b90387337f316491ed1d73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a786e811f53adda36ce69b4e79bc9127d"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#a786e811f53adda36ce69b4e79bc9127d">quotientOfFunctionAndSecondDerivative</a> (double previousPoint, double thisPoint, double nextPoint, double spacing)</td></tr>
<tr class="memdesc:a786e811f53adda36ce69b4e79bc9127d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate absolute quotient of function and its second derivative.  <a href="#a786e811f53adda36ce69b4e79bc9127d">More...</a><br/></td></tr>
<tr class="separator:a786e811f53adda36ce69b4e79bc9127d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cd4438648f0d8b7f4fda76fda90733c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#a5cd4438648f0d8b7f4fda76fda90733c">findSmallestQuotientOfFunctionAndSecondDerivative</a> (const std::function&lt; double(double)&gt; &amp;f, const std::pair&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; &amp;range)</td></tr>
<tr class="memdesc:a5cd4438648f0d8b7f4fda76fda90733c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find smallest quotient between analytical function and its 2nd derivative.  <a href="#a5cd4438648f0d8b7f4fda76fda90733c">More...</a><br/></td></tr>
<tr class="separator:a5cd4438648f0d8b7f4fda76fda90733c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18b94ecee47c00ff772c4558ec9de9f8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#a18b94ecee47c00ff772c4558ec9de9f8">findSmallestQuotientOfFunctionAndSecondDerivative</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; const double &gt; function, double inputSpacing, const std::pair&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; &amp;range)</td></tr>
<tr class="memdesc:a18b94ecee47c00ff772c4558ec9de9f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find smallest quotient between vector of values and its 2nd derivative.  <a href="#a18b94ecee47c00ff772c4558ec9de9f8">More...</a><br/></td></tr>
<tr class="separator:a18b94ecee47c00ff772c4558ec9de9f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48c7d332a59803748a65fe5c47529917"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#a48c7d332a59803748a65fe5c47529917">quotientOfFunctionAndThirdDerivative</a> (double previousPreviousPoint, double previousPoint, double thisPoint, double nextPoint, double nextNextPoint, double spacing)</td></tr>
<tr class="memdesc:a48c7d332a59803748a65fe5c47529917"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate absolute quotient of function and its third derivative.  <a href="#a48c7d332a59803748a65fe5c47529917">More...</a><br/></td></tr>
<tr class="separator:a48c7d332a59803748a65fe5c47529917"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa91a1483ec637aeb3608ae2ba3d9c86"><td class="memItemLeft" align="right" valign="top"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#afa91a1483ec637aeb3608ae2ba3d9c86">findSmallestQuotientOfFunctionAndThirdDerivative</a> (const std::function&lt; double(double)&gt; &amp;f, const std::pair&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; &amp;range)</td></tr>
<tr class="memdesc:afa91a1483ec637aeb3608ae2ba3d9c86"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find smallest quotient between analytical function and its 3rd derivative.  <a href="#afa91a1483ec637aeb3608ae2ba3d9c86">More...</a><br/></td></tr>
<tr class="separator:afa91a1483ec637aeb3608ae2ba3d9c86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac97262613788ed1e55e38baf4c66940f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#ac97262613788ed1e55e38baf4c66940f">findSmallestQuotientOfFunctionAndThirdDerivative</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; const double &gt; function, double inputSpacing, const std::pair&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; &amp;range)</td></tr>
<tr class="memdesc:ac97262613788ed1e55e38baf4c66940f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find smallest quotient between function and 2nd derivative (vectors)  <a href="#ac97262613788ed1e55e38baf4c66940f">More...</a><br/></td></tr>
<tr class="separator:ac97262613788ed1e55e38baf4c66940f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3cfc781466eaa1331bd09bc9ed68399"><td class="memItemLeft" align="right" valign="top">std::vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#ab3cfc781466eaa1331bd09bc9ed68399">vectorSecondDerivative</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; const double &gt; f, double spacing)</td></tr>
<tr class="memdesc:ab3cfc781466eaa1331bd09bc9ed68399"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate second derivative of vector and return vector of same length.  <a href="#ab3cfc781466eaa1331bd09bc9ed68399">More...</a><br/></td></tr>
<tr class="separator:ab3cfc781466eaa1331bd09bc9ed68399"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae671e4e4da364f994bc18e7bb086c99d"><td class="memTemplParams" colspan="2">template&lt;class T , class U &gt; </td></tr>
<tr class="memitem:ae671e4e4da364f994bc18e7bb086c99d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#ae671e4e4da364f994bc18e7bb086c99d">fillMultiplexedTableData</a> (const T inputData, U *multiplexedOutputData, std::size_t valuesPerTablePoint, std::size_t numTables, std::size_t thisTableIndex)</td></tr>
<tr class="memdesc:ae671e4e4da364f994bc18e7bb086c99d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy (temporary) table data into aligned multiplexed vector.  <a href="#ae671e4e4da364f994bc18e7bb086c99d">More...</a><br/></td></tr>
<tr class="separator:ae671e4e4da364f994bc18e7bb086c99d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga921af955af13677427b80c3237a798fe"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga921af955af13677427b80c3237a798fe"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga921af955af13677427b80c3237a798fe">ignoreValueHelper</a> (const T &amp;)</td></tr>
<tr class="memdesc:ga921af955af13677427b80c3237a798fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper for ignoring values in macros.  <a href="group__module__utility.xhtml#ga921af955af13677427b80c3237a798fe">More...</a><br/></td></tr>
<tr class="separator:ga921af955af13677427b80c3237a798fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c0ea704fa958e9e7c79e7484a2d6f6b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3c0ea704fa958e9e7c79e7484a2d6f6b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#a3c0ea704fa958e9e7c79e7484a2d6f6b">current_function_helper</a> ()</td></tr>
<tr class="memdesc:a3c0ea704fa958e9e7c79e7484a2d6f6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper for defining GMX_CURRENT_FUNCTION. <br/></td></tr>
<tr class="separator:a3c0ea704fa958e9e7c79e7484a2d6f6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga34257490d770efb0f6a87adeef2629c6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga34257490d770efb0f6a87adeef2629c6">printFatalErrorHeader</a> (FILE *fp, const char *title, const char *func, const char *file, int line)</td></tr>
<tr class="memdesc:ga34257490d770efb0f6a87adeef2629c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats a common header for fatal error messages.  <a href="group__module__utility.xhtml#ga34257490d770efb0f6a87adeef2629c6">More...</a><br/></td></tr>
<tr class="separator:ga34257490d770efb0f6a87adeef2629c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0a42e4f258d42ec3a31c6a633de8d5da"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga0a42e4f258d42ec3a31c6a633de8d5da">printFatalErrorMessageLine</a> (FILE *fp, const char *text, int indent)</td></tr>
<tr class="memdesc:ga0a42e4f258d42ec3a31c6a633de8d5da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats a line of fatal error message text.  <a href="group__module__utility.xhtml#ga0a42e4f258d42ec3a31c6a633de8d5da">More...</a><br/></td></tr>
<tr class="separator:ga0a42e4f258d42ec3a31c6a633de8d5da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadcb892c734184fade6b913a4d3a66aa7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gadcb892c734184fade6b913a4d3a66aa7">printFatalErrorFooter</a> (FILE *fp)</td></tr>
<tr class="memdesc:gadcb892c734184fade6b913a4d3a66aa7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats a common footer for fatal error messages.  <a href="group__module__utility.xhtml#gadcb892c734184fade6b913a4d3a66aa7">More...</a><br/></td></tr>
<tr class="separator:gadcb892c734184fade6b913a4d3a66aa7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaebf12d5435f39db87d2627d024b0b4c1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaebf12d5435f39db87d2627d024b0b4c1">assertHandler</a> (const char *condition, const char *msg, const char *func, const char *file, int line)</td></tr>
<tr class="memdesc:gaebf12d5435f39db87d2627d024b0b4c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when an assert fails.  <a href="group__module__utility.xhtml#gaebf12d5435f39db87d2627d024b0b4c1">More...</a><br/></td></tr>
<tr class="separator:gaebf12d5435f39db87d2627d024b0b4c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ae671e4e4da364f994bc18e7bb086c99d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , class U &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void gmx::internal::fillMultiplexedTableData </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>inputData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">U *&#160;</td>
          <td class="paramname"><em>multiplexedOutputData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>valuesPerTablePoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>numTables</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>thisTableIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy (temporary) table data into aligned multiplexed vector. </p>
<p>This routine takes the temporary data generated for a single table and writes multiplexed output into a multiple-table-data vector. If the output vector is empty we will resize it to fit the data, and otherwise we assert the size is correct to add out input data.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Type of container for input data </td></tr>
    <tr><td class="paramname">U</td><td>Type of container for output data</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">inputData</td><td>Input data for single table </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">multiplexedOutputData</td><td>Multiplexed output vector, many tables. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">valuesPerTablePoint</td><td>Number of real values for each table point, for instance 4 in DDFZ tables. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">numTables</td><td>Number of tables mixed into multiplexed output </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">thisTableIndex</td><td>Index of this table in multiplexed output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>The output container type can be different from the input since the latter sometimes uses an aligned allocator so the data can be loaded efficiently in the GROMACS nonbonded kernels. </dd></dl>

</div>
</div>
<a class="anchor" id="a5cd4438648f0d8b7f4fda76fda90733c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> gmx::internal::findSmallestQuotientOfFunctionAndSecondDerivative </td>
          <td>(</td>
          <td class="paramtype">const std::function&lt; double(double)&gt; &amp;&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::pair&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>range</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find smallest quotient between analytical function and its 2nd derivative. </p>
<p>Used to calculate spacing for quadratic spline tables. This function divides the function value by the second derivative (or a very small number when that is zero), and returns the smallest such quotient found in the range.</p>
<p>Our quadratic tables corresponds to linear interpolation of the derivative, which means the derivative will typically have larger error than the value when interpolating. The spacing required to reach a particular relative tolerance in the derivative depends on the quotient between the first derivative and the third derivative of the function itself.</p>
<p>You should call this routine with the analytical derivative as the "function" parameter, and the quotient between "function and second derivative" will then correspond to the quotient bewteen the derivative and the third derivative of the actual function we want to tabulate.</p>
<p>Since all functions that can be tabulated efficiently are reasonably smooth, we simply check 1,000 points in the interval rather than bother about implementing any complicated global optimization scheme.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">f</td><td>Analytical function </td></tr>
    <tr><td class="paramname">range</td><td>Interval</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Smallest quotient found in range.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>The function is always double-valued to avoid accuracy loss. </dd></dl>

</div>
</div>
<a class="anchor" id="a18b94ecee47c00ff772c4558ec9de9f8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> gmx::internal::findSmallestQuotientOfFunctionAndSecondDerivative </td>
          <td>(</td>
          <td class="paramtype">ArrayRef&lt; const double &gt;&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>inputSpacing</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::pair&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>range</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find smallest quotient between vector of values and its 2nd derivative. </p>
<p>Used to calculate spacing for quadratic spline tables. This function divides the function value by the second derivative (or a very small number when that is zero), and returns the smallest such quotient found in the range.</p>
<p>Our quadratic tables corresponds to linear interpolation of the derivative, which means the derivative will typically have larger error than the value when interpolating. The spacing required to reach a particular relative tolerance in the derivative depends on the quotient between the first derivative and the third derivative of the function itself.</p>
<p>You should call this routine with the analytical derivative as the "function" parameter, and the quotient between "function and second derivative" will then correspond to the quotient bewteen the derivative and the third derivative of the actual function we want to tabulate.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">function</td><td>Vector with function values </td></tr>
    <tr><td class="paramname">inputSpacing</td><td>Spacing between function values </td></tr>
    <tr><td class="paramname">range</td><td>Interval to check</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Smallest quotient found in range.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>The function vector and input spacing are always double-valued to avoid accuracy loss. </dd></dl>

</div>
</div>
<a class="anchor" id="afa91a1483ec637aeb3608ae2ba3d9c86"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> gmx::internal::findSmallestQuotientOfFunctionAndThirdDerivative </td>
          <td>(</td>
          <td class="paramtype">const std::function&lt; double(double)&gt; &amp;&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::pair&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>range</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find smallest quotient between analytical function and its 3rd derivative. </p>
<p>Used to calculate table spacing. This function divides the function value by the second derivative (or a very small number when that is zero), and returns the smallest such quotient found in the range.</p>
<p>Our quadratic tables corresponds to linear interpolation of the derivative, which means the derivative will typically have larger error than the value when interpolating. The spacing required to reach a particular relative tolerance in the derivative depends on the quotient between the first derivative and the third derivative of the function itself.</p>
<p>You should call this routine with the analytical derivative as the "function" parameter, and the quotient between "function and second derivative" will then correspond to the quotient bewteen the derivative and the third derivative of the actual function we want to tabulate.</p>
<p>Since all functions that can be tabulated efficiently are reasonably smooth, we simply check 1,000 points in the interval rather than bother about implementing any complicated global optimization scheme.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">f</td><td>Analytical function </td></tr>
    <tr><td class="paramname">range</td><td>Interval</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Smallest quotient found in range.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>The function is always double-valued to avoid accuracy loss. </dd></dl>

</div>
</div>
<a class="anchor" id="ac97262613788ed1e55e38baf4c66940f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> gmx::internal::findSmallestQuotientOfFunctionAndThirdDerivative </td>
          <td>(</td>
          <td class="paramtype">ArrayRef&lt; const double &gt;&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>inputSpacing</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::pair&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>range</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find smallest quotient between function and 2nd derivative (vectors) </p>
<p>Used to calculate table spacing. This function divides the function value by the second derivative (or a very small number when that is zero), and returns the smallest such quotient found in the range.</p>
<p>Our quadratic tables corresponds to linear interpolation of the derivative, which means the derivative will typically have larger error than the value when interpolating. The spacing required to reach a particular relative tolerance in the derivative depends on the quotient between the first derivative and the third derivative of the function itself.</p>
<p>You should call this routine with the analytical derivative as the "function" parameter, and the quotient between "function and second derivative" will then correspond to the quotient bewteen the derivative and the third derivative of the actual function we want to tabulate.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">function</td><td>Vector with function values </td></tr>
    <tr><td class="paramname">inputSpacing</td><td>Spacing between function values </td></tr>
    <tr><td class="paramname">range</td><td>Interval to check</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Smallest quotient found in range.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>The function vector and input spacing are always double-valued to avoid accuracy loss. </dd></dl>

</div>
</div>
<a class="anchor" id="a786e811f53adda36ce69b4e79bc9127d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::internal::quotientOfFunctionAndSecondDerivative </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>previousPoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>thisPoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>nextPoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>spacing</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate absolute quotient of function and its second derivative. </p>
<p>This is a utility function used in the functions to find the smallest quotient in a range.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">previousPoint</td><td>Value of function at x-h. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">thisPoint</td><td>Value of function at x. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nextPoint</td><td>Value of function at x+h. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">spacing</td><td>Value of h.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The absolute value of the quotient. If either the function or second derivative is smaller than sqrt(GMX_REAL_MIN), they will be set to that value. </dd></dl>

</div>
</div>
<a class="anchor" id="a48c7d332a59803748a65fe5c47529917"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::internal::quotientOfFunctionAndThirdDerivative </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>previousPreviousPoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>previousPoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>thisPoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>nextPoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>nextNextPoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>spacing</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate absolute quotient of function and its third derivative. </p>
<p>This is a utility function used in the functions to find the smallest quotient in a range.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">previousPreviousPoint</td><td>Value of function at x-2h. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">previousPoint</td><td>Value of function at x-h. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">thisPoint</td><td>Value of function at x. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nextPoint</td><td>Value of function at x+h. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nextNextPoint</td><td>Value of function at x+2h. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">spacing</td><td>Value of h.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The absolute value of the quotient. If either the function or third derivative is smaller than sqrt(GMX_REAL_MIN), they will be set to that value. </dd></dl>

</div>
</div>
<a class="anchor" id="a71aba30ffd645096a2944c75870c2adc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::internal::throwUnlessDerivativeIsConsistentWithFunction </td>
          <td>(</td>
          <td class="paramtype">const std::function&lt; double(double)&gt; &amp;&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::function&lt; double(double)&gt; &amp;&#160;</td>
          <td class="paramname"><em>derivative</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::pair&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>range</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Ensure analytical derivative is the derivative of analytical function. </p>
<p>This routine evaluates the numerical derivative of the function for a few (1000) points in the interval and checks that the relative difference between numerical and analytical derivative is within the expected error for the numerical derivative approximation we use.</p>
<p>The main point of this routine is to make sure the user has not made a mistake or sign error when defining the functions.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">function</td><td>Analytical function to differentiate </td></tr>
    <tr><td class="paramname">derivative</td><td>Analytical derivative to compare with </td></tr>
    <tr><td class="paramname">range</td><td>Range to test</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">If</td><td>the provided derivative does not seem to match the function.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>The function/derivative are always double-valued to avoid accuracy loss. </dd></dl>

</div>
</div>
<a class="anchor" id="a84d04970d8b90387337f316491ed1d73"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::internal::throwUnlessDerivativeIsConsistentWithFunction </td>
          <td>(</td>
          <td class="paramtype">ArrayRef&lt; const double &gt;&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ArrayRef&lt; const double &gt;&#160;</td>
          <td class="paramname"><em>derivative</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>inputSpacing</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::pair&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>range</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Ensure vector of derivative values is the derivative of function vector. </p>
<p>This routine differentiates a vector of numerical values and checks that the relative difference to a provided vector of numerical derivatives is smaller than the expected error from the numerical differentiation.</p>
<p>The main point of this routine is to make sure the user has not made a mistake or sign error when defining the functions.</p>
<p>To avoid problems if the vectors change from zero to finite values at the start/end of the interval, we only check inside the range requested.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">function</td><td>Numerical function value vector to differentiate </td></tr>
    <tr><td class="paramname">derivative</td><td>Numerical derivative vector to compare with </td></tr>
    <tr><td class="paramname">inputSpacing</td><td>Distance between input points </td></tr>
    <tr><td class="paramname">range</td><td>Range to test</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">If</td><td>the provided derivative does not seem to match the function.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>The function/derivative vectors and spacing are always double-valued to avoid accuracy loss. </dd></dl>

</div>
</div>
<a class="anchor" id="ab3cfc781466eaa1331bd09bc9ed68399"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; double &gt; gmx::internal::vectorSecondDerivative </td>
          <td>(</td>
          <td class="paramtype">ArrayRef&lt; const double &gt;&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>spacing</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate second derivative of vector and return vector of same length. </p>
<p>5-point approximations are used, with endpoints using non-center interpolation.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">f</td><td>Vector (function) for which to calculate second derivative </td></tr>
    <tr><td class="paramname">spacing</td><td>Spacing of input data.</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">If</td><td>the input vector has fewer than five data points.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function always uses double precision arguments since it is meant to be used on raw user input data for tables, where we want to avoid accuracy loss (since differentiation can be numerically fragile). </dd></dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:57:30 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
