<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/ewald/pme-gpu-internal.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_8a21c46af9718d1f610eb513153099d7.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a46192700e9e8ed44c648f0a55ee9a53.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_69ef3b2caaf4d875cb2a3215a087d3ea.xhtml">ewald</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">pme-gpu-internal.cpp File Reference<div class="ingroups"><a class="el" href="group__module__ewald.xhtml">Ewald-family treatments of long-ranged forces</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="gmxpre_8h.xhtml">gmxpre.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="pme-gpu-internal_8h.xhtml">pme-gpu-internal.h</a>&quot;</code><br/>
<code>#include &quot;config.h&quot;</code><br/>
<code>#include &lt;list&gt;</code><br/>
<code>#include &lt;string&gt;</code><br/>
<code>#include &quot;<a class="el" href="ewald-utils_8h.xhtml">gromacs/ewald/ewald-utils.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="gpu__utils_8h.xhtml">gromacs/gpu_utils/gpu_utils.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="invertmatrix_8h.xhtml">gromacs/math/invertmatrix.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/math/units.h&quot;</code><br/>
<code>#include &quot;gromacs/mdtypes/commrec.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="exceptions_8h.xhtml">gromacs/utility/exceptions.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="gmxassert_8h.xhtml">gromacs/utility/gmxassert.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="logger_8h.xhtml">gromacs/utility/logger.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="stringutil_8h.xhtml">gromacs/utility/stringutil.h</a>&quot;</code><br/>
<code>#include &quot;pme-grid.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="pme-internal_8h.xhtml">pme-internal.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for pme-gpu-internal.cpp:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="pme-gpu-internal_8cpp__incl.svg" width="2564" height="619"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>This file contains internal function implementations for performing the PME calculations on GPU. </p>
<dl class="section author"><dt>Author</dt><dd>Aleksei Iupinov <a href="#" onclick="location.href='mai'+'lto:'+'a.y'+'up'+'ino'+'v@'+'gma'+'il'+'.co'+'m'; return false;">a.yup<span style="display: none;">.nosp@m.</span>inov<span style="display: none;">.nosp@m.</span>@gmai<span style="display: none;">.nosp@m.</span>l.co<span style="display: none;">.nosp@m.</span>m</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aaa741a73522d57e9c7af2c1fda0ccde0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="structPmeGpuKernelParamsBase.xhtml">PmeGpuKernelParamsBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8cpp.xhtml#aaa741a73522d57e9c7af2c1fda0ccde0">pme_gpu_get_kernel_params_base_ptr</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:aaa741a73522d57e9c7af2c1fda0ccde0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrapper for getting a pointer to the plain C++ part of the GPU kernel parameters structure.  <a href="#aaa741a73522d57e9c7af2c1fda0ccde0">More...</a><br/></td></tr>
<tr class="separator:aaa741a73522d57e9c7af2c1fda0ccde0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88c3c7cfd40227a0314f6e997521afed"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">gmx::RVec</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8cpp.xhtml#a88c3c7cfd40227a0314f6e997521afed">pme_gpu_get_forces</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a88c3c7cfd40227a0314f6e997521afed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the GPU gathering staging forces buffer.  <a href="#a88c3c7cfd40227a0314f6e997521afed">More...</a><br/></td></tr>
<tr class="separator:a88c3c7cfd40227a0314f6e997521afed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bea55789e0572d1ff0c4f78cdb6e8ad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8cpp.xhtml#a1bea55789e0572d1ff0c4f78cdb6e8ad">pme_gpu_get_energy_virial</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *energy, matrix virial)</td></tr>
<tr class="memdesc:a1bea55789e0572d1ff0c4f78cdb6e8ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the output virial and energy of the PME solving.  <a href="#a1bea55789e0572d1ff0c4f78cdb6e8ad">More...</a><br/></td></tr>
<tr class="separator:a1bea55789e0572d1ff0c4f78cdb6e8ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79575e51e673f2d13315370dba0e7191"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8cpp.xhtml#a79575e51e673f2d13315370dba0e7191">pme_gpu_update_input_box</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, const matrix box)</td></tr>
<tr class="memdesc:a79575e51e673f2d13315370dba0e7191"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates the unit cell parameters. Does not check if update is necessary - that is done in <a class="el" href="pme-gpu_8cpp.xhtml#a2db9507955e1908ed647984a9c62f641" title="Prepares PME on GPU computation (updating the box if needed) ">pme_gpu_prepare_computation()</a>.  <a href="#a79575e51e673f2d13315370dba0e7191">More...</a><br/></td></tr>
<tr class="separator:a79575e51e673f2d13315370dba0e7191"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69066d5a6d2bd3cfd48c22a7da4fd88b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8cpp.xhtml#a69066d5a6d2bd3cfd48c22a7da4fd88b">pme_gpu_reinit_computation</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a69066d5a6d2bd3cfd48c22a7da4fd88b"><td class="mdescLeft">&#160;</td><td class="mdescRight">The PME GPU reinitialization function that is called both at the end of any PME computation and on any load balancing.  <a href="#a69066d5a6d2bd3cfd48c22a7da4fd88b">More...</a><br/></td></tr>
<tr class="separator:a69066d5a6d2bd3cfd48c22a7da4fd88b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f87f8ca2058ea113ad2bc7287682576"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8cpp.xhtml#a0f87f8ca2058ea113ad2bc7287682576">pme_gpu_reinit_grids</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a0f87f8ca2058ea113ad2bc7287682576"><td class="mdescLeft">&#160;</td><td class="mdescRight">(Re-)initializes all the PME GPU data related to the grid size and cut-off.  <a href="#a0f87f8ca2058ea113ad2bc7287682576">More...</a><br/></td></tr>
<tr class="separator:a0f87f8ca2058ea113ad2bc7287682576"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96a23ba273d3788baab82d8c71854663"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8cpp.xhtml#a96a23ba273d3788baab82d8c71854663">pme_gpu_copy_common_data_from</a> (const gmx_pme_t *pme)</td></tr>
<tr class="memdesc:a96a23ba273d3788baab82d8c71854663"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies everything useful from the PME CPU to the PME GPU structure. The goal is to minimize interaction with the PME CPU structure in the GPU code.  <a href="#a96a23ba273d3788baab82d8c71854663">More...</a><br/></td></tr>
<tr class="separator:a96a23ba273d3788baab82d8c71854663"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30f29ab01f4617cea28a55ee8552ee6a"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8cpp.xhtml#a30f29ab01f4617cea28a55ee8552ee6a">pme_gpu_check_restrictions</a> (const gmx_pme_t *pme, std::string *error)</td></tr>
<tr class="memdesc:a30f29ab01f4617cea28a55ee8552ee6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds out if PME with given inputs is possible to run on GPU.  <a href="#a30f29ab01f4617cea28a55ee8552ee6a">More...</a><br/></td></tr>
<tr class="separator:a30f29ab01f4617cea28a55ee8552ee6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf72d90341055cd222ad34c061236cb9"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8cpp.xhtml#adf72d90341055cd222ad34c061236cb9">pme_gpu_init</a> (gmx_pme_t *pme, <a class="el" href="structgmx__device__info__t.xhtml">gmx_device_info_t</a> *gpuInfo)</td></tr>
<tr class="memdesc:adf72d90341055cd222ad34c061236cb9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the PME GPU data at the beginning of the run.  <a href="#adf72d90341055cd222ad34c061236cb9">More...</a><br/></td></tr>
<tr class="separator:adf72d90341055cd222ad34c061236cb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55174cd4bc39d7f14fe375a38ee811ba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8cpp.xhtml#a55174cd4bc39d7f14fe375a38ee811ba">pme_gpu_transform_spline_atom_data</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, const pme_atomcomm_t *atc, <a class="el" href="pme-gpu-internal_8h.xhtml#a0f754eebaa9461af5829e9d32c8156cb">PmeSplineDataType</a> type, int dimIndex, <a class="el" href="pme-gpu-internal_8h.xhtml#a8e828a9e22c6ef7676e82bbf2fbd2dec">PmeLayoutTransform</a> transform)</td></tr>
<tr class="memdesc:a55174cd4bc39d7f14fe375a38ee811ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rearranges the atom spline data between the GPU and host layouts. Only used for test purposes so far, likely to be horribly slow.  <a href="#a55174cd4bc39d7f14fe375a38ee811ba">More...</a><br/></td></tr>
<tr class="separator:a55174cd4bc39d7f14fe375a38ee811ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ba882d2de50fa957af00828162dd06e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8cpp.xhtml#a7ba882d2de50fa957af00828162dd06e">pme_gpu_get_real_grid_sizes</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">gmx::IVec</a> *gridSize, <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">gmx::IVec</a> *paddedGridSize)</td></tr>
<tr class="memdesc:a7ba882d2de50fa957af00828162dd06e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the normal/padded grid dimensions of the real-space PME grid on GPU. Only used in tests.  <a href="#a7ba882d2de50fa957af00828162dd06e">More...</a><br/></td></tr>
<tr class="separator:a7ba882d2de50fa957af00828162dd06e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae81445001fbc385bc2868fcbb4eb226b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8cpp.xhtml#ae81445001fbc385bc2868fcbb4eb226b">pme_gpu_reinit</a> (gmx_pme_t *pme, <a class="el" href="structgmx__device__info__t.xhtml">gmx_device_info_t</a> *gpuInfo)</td></tr>
<tr class="memdesc:ae81445001fbc385bc2868fcbb4eb226b"><td class="mdescLeft">&#160;</td><td class="mdescRight">(Re-)initializes the PME GPU data at the beginning of the run or on DLB.  <a href="#ae81445001fbc385bc2868fcbb4eb226b">More...</a><br/></td></tr>
<tr class="separator:ae81445001fbc385bc2868fcbb4eb226b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e5ef8957b2366acbb1eb097aa06d755"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8cpp.xhtml#a7e5ef8957b2366acbb1eb097aa06d755">pme_gpu_destroy</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a7e5ef8957b2366acbb1eb097aa06d755"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys the PME GPU data at the end of the run.  <a href="#a7e5ef8957b2366acbb1eb097aa06d755">More...</a><br/></td></tr>
<tr class="separator:a7e5ef8957b2366acbb1eb097aa06d755"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e377588a4bede4919cdcf5ef29ae9b4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8cpp.xhtml#a4e377588a4bede4919cdcf5ef29ae9b4">pme_gpu_reinit_atoms</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, const int nAtoms, const <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *charges)</td></tr>
<tr class="memdesc:a4e377588a4bede4919cdcf5ef29ae9b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reallocates the local atoms data (charges, coordinates, etc.). Copies the charges to the GPU.  <a href="#a4e377588a4bede4919cdcf5ef29ae9b4">More...</a><br/></td></tr>
<tr class="separator:a4e377588a4bede4919cdcf5ef29ae9b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a30f29ab01f4617cea28a55ee8552ee6a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool pme_gpu_check_restrictions </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>error</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Finds out if PME with given inputs is possible to run on GPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME structure. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">error</td><td>The error message if the input is not supported on GPU. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if this PME input is possible to run on GPU, false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a96a23ba273d3788baab82d8c71854663"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void pme_gpu_copy_common_data_from </td>
          <td>(</td>
          <td class="paramtype">const gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copies everything useful from the PME CPU to the PME GPU structure. The goal is to minimize interaction with the PME CPU structure in the GPU code. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pme</td><td>The PME structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7e5ef8957b2366acbb1eb097aa06d755"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_destroy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Destroys the PME GPU data at the end of the run. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a1bea55789e0572d1ff0c4f78cdb6e8ad"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_get_energy_virial </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>energy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">matrix&#160;</td>
          <td class="paramname"><em>virial</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the output virial and energy of the PME solving. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">energy</td><td>The output energy. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">virial</td><td>The output virial matrix. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a88c3c7cfd40227a0314f6e997521afed"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt;<a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">gmx::RVec</a>&gt; pme_gpu_get_forces </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the GPU gathering staging forces buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The input/output forces. </dd></dl>

</div>
</div>
<a class="anchor" id="aaa741a73522d57e9c7af2c1fda0ccde0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structPmeGpuKernelParamsBase.xhtml">PmeGpuKernelParamsBase</a>* pme_gpu_get_kernel_params_base_ptr </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Wrapper for getting a pointer to the plain C++ part of the GPU kernel parameters structure. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The pointer to the kernel parameters. </dd></dl>

</div>
</div>
<a class="anchor" id="a7ba882d2de50fa957af00828162dd06e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_get_real_grid_sizes </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">gmx::IVec</a> *&#160;</td>
          <td class="paramname"><em>gridSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">gmx::IVec</a> *&#160;</td>
          <td class="paramname"><em>paddedGridSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the normal/padded grid dimensions of the real-space PME grid on GPU. Only used in tests. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">gridSize</td><td>Pointer to the grid dimensions to fill in. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">paddedGridSize</td><td>Pointer to the padded grid dimensions to fill in. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="adf72d90341055cd222ad34c061236cb9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void pme_gpu_init </td>
          <td>(</td>
          <td class="paramtype">gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__device__info__t.xhtml">gmx_device_info_t</a> *&#160;</td>
          <td class="paramname"><em>gpuInfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes the PME GPU data at the beginning of the run. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pme</td><td>The PME structure. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gpuInfo</td><td>The GPU information structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae81445001fbc385bc2868fcbb4eb226b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_reinit </td>
          <td>(</td>
          <td class="paramtype">gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__device__info__t.xhtml">gmx_device_info_t</a> *&#160;</td>
          <td class="paramname"><em>gpuInfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>(Re-)initializes the PME GPU data at the beginning of the run or on DLB. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pme</td><td>The PME structure. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gpuInfo</td><td>The GPU information structure. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1NotImplementedError.xhtml" title="Exception class for use of an unimplemented feature. ">gmx::NotImplementedError</a></td><td>if this generally valid PME structure is not valid for GPU runs. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4e377588a4bede4919cdcf5ef29ae9b4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_reinit_atoms </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>nAtoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>charges</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reallocates the local atoms data (charges, coordinates, etc.). Copies the charges to the GPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nAtoms</td><td>The number of particles. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">charges</td><td>The pointer to the host-side array of particle charges.</td></tr>
  </table>
  </dd>
</dl>
<p>This is a function that should only be called in the beginning of the run and on domain decomposition. Should be called before the pme_gpu_set_io_ranges. </p>

</div>
</div>
<a class="anchor" id="a69066d5a6d2bd3cfd48c22a7da4fd88b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_reinit_computation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The PME GPU reinitialization function that is called both at the end of any PME computation and on any load balancing. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0f87f8ca2058ea113ad2bc7287682576"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void pme_gpu_reinit_grids </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>(Re-)initializes all the PME GPU data related to the grid size and cut-off. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a55174cd4bc39d7f14fe375a38ee811ba"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_transform_spline_atom_data </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pme_atomcomm_t *&#160;</td>
          <td class="paramname"><em>atc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="pme-gpu-internal_8h.xhtml#a0f754eebaa9461af5829e9d32c8156cb">PmeSplineDataType</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dimIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="pme-gpu-internal_8h.xhtml#a8e828a9e22c6ef7676e82bbf2fbd2dec">PmeLayoutTransform</a>&#160;</td>
          <td class="paramname"><em>transform</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Rearranges the atom spline data between the GPU and host layouts. Only used for test purposes so far, likely to be horribly slow. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">atc</td><td>The PME CPU atom data structure (with a single-threaded layout). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>The spline data type (values or derivatives). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dimIndex</td><td>Dimension index. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">transform</td><td>Layout transform type </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a79575e51e673f2d13315370dba0e7191"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_update_input_box </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const matrix&#160;</td>
          <td class="paramname"><em>box</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Updates the unit cell parameters. Does not check if update is necessary - that is done in <a class="el" href="pme-gpu_8cpp.xhtml#a2db9507955e1908ed647984a9c62f641" title="Prepares PME on GPU computation (updating the box if needed) ">pme_gpu_prepare_computation()</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">box</td><td>The unit cell box. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:57:16 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
