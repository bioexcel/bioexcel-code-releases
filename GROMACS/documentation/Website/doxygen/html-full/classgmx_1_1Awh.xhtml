<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::Awh Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="classgmx_1_1Awh.xhtml">Awh</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="classgmx_1_1Awh-members.xhtml">List of all members</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">gmx::Awh Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;gromacs/awh/awh.h&gt;</code></p>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Coupling of the accelerated weight histogram method (AWH) with the system. </p>
<p>AWH calculates the free energy along order parameters of the system. Free energy barriers are overcome by adaptively tuning a bias potential along the order parameter such that the biased distribution along the parameter converges toward a chosen target distribution.</p>
<p>The <a class="el" href="classgmx_1_1Awh.xhtml" title="Coupling of the accelerated weight histogram method (AWH) with the system. ">Awh</a> class takes care of the coupling between the system and the AWH bias(es). The <a class="el" href="classgmx_1_1Awh.xhtml" title="Coupling of the accelerated weight histogram method (AWH) with the system. ">Awh</a> class contains one or more <a class="el" href="structgmx_1_1BiasCoupledToSystem.xhtml" title="A bias and its coupling to the system. ">BiasCoupledToSystem</a> objects. The <a class="el" href="structgmx_1_1BiasCoupledToSystem.xhtml" title="A bias and its coupling to the system. ">BiasCoupledToSystem</a> class takes care of the reaction coordinate input and force output for the single <a class="el" href="classgmx_1_1Bias.xhtml" title="A bias acting on a multidimensional coordinate. ">Bias</a> object it containts.</p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000012">Todo:</a></b></dt><dd>Update parameter reading and checkpointing, when general C++ framework is ready. </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a60002aa6c5ae4f1f911e3eb89d7258af"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Awh.xhtml#a60002aa6c5ae4f1f911e3eb89d7258af">Awh</a> (FILE *fplog, const t_inputrec &amp;inputRecord, const t_commrec *commRecord, const AwhParams &amp;awhParams, const std::string &amp;biasInitFilename, pull_t *pull_work)</td></tr>
<tr class="memdesc:a60002aa6c5ae4f1f911e3eb89d7258af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct an AWH at the start of a simulation.  <a href="#a60002aa6c5ae4f1f911e3eb89d7258af">More...</a><br/></td></tr>
<tr class="separator:a60002aa6c5ae4f1f911e3eb89d7258af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afef568f17886a51ade64bb8c2d32300a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="afef568f17886a51ade64bb8c2d32300a"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Awh.xhtml#afef568f17886a51ade64bb8c2d32300a">~Awh</a> ()</td></tr>
<tr class="memdesc:afef568f17886a51ade64bb8c2d32300a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor. <br/></td></tr>
<tr class="separator:afef568f17886a51ade64bb8c2d32300a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cf1744279c6168dc7bc6ce1d4faf6a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Awh.xhtml#a2cf1744279c6168dc7bc6ce1d4faf6a2">applyBiasForcesAndUpdateBias</a> (int ePBC, const <a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> &amp;mdatoms, const matrix box, <a class="el" href="classgmx_1_1ForceWithVirial.xhtml">gmx::ForceWithVirial</a> *forceWithVirial, double t, gmx_int64_t step, gmx_wallcycle *wallcycle, FILE *fplog)</td></tr>
<tr class="memdesc:a2cf1744279c6168dc7bc6ce1d4faf6a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Peform an AWH update, to be called every MD step.  <a href="#a2cf1744279c6168dc7bc6ce1d4faf6a2">More...</a><br/></td></tr>
<tr class="separator:a2cf1744279c6168dc7bc6ce1d4faf6a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94f8ccd17d2ba5687dcd2c37cbc7d24a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Awh.xhtml#a94f8ccd17d2ba5687dcd2c37cbc7d24a">updateHistory</a> (AwhHistory *awhHistory) const </td></tr>
<tr class="memdesc:a94f8ccd17d2ba5687dcd2c37cbc7d24a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the AWH history in preparation for writing to checkpoint file.  <a href="#a94f8ccd17d2ba5687dcd2c37cbc7d24a">More...</a><br/></td></tr>
<tr class="separator:a94f8ccd17d2ba5687dcd2c37cbc7d24a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cb56070bfe1cac1c9933697c93fab57"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; AwhHistory &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Awh.xhtml#a7cb56070bfe1cac1c9933697c93fab57">initHistoryFromState</a> () const </td></tr>
<tr class="memdesc:a7cb56070bfe1cac1c9933697c93fab57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate and initialize an AWH history with the given AWH state.  <a href="#a7cb56070bfe1cac1c9933697c93fab57">More...</a><br/></td></tr>
<tr class="separator:a7cb56070bfe1cac1c9933697c93fab57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab81baa3827202340b4a98f62cb9f9b77"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Awh.xhtml#ab81baa3827202340b4a98f62cb9f9b77">restoreStateFromHistory</a> (const AwhHistory *awhHistory)</td></tr>
<tr class="memdesc:ab81baa3827202340b4a98f62cb9f9b77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Restore the AWH state from the given history.  <a href="#ab81baa3827202340b4a98f62cb9f9b77">More...</a><br/></td></tr>
<tr class="separator:ab81baa3827202340b4a98f62cb9f9b77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46a86a2544ffe2ff68e20f4461306196"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Awh.xhtml#a46a86a2544ffe2ff68e20f4461306196">writeToEnergyFrame</a> (gmx_int64_t step, t_enxframe *fr) const </td></tr>
<tr class="memdesc:a46a86a2544ffe2ff68e20f4461306196"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills the AWH data block of an energy frame with data at certain steps.  <a href="#a46a86a2544ffe2ff68e20f4461306196">More...</a><br/></td></tr>
<tr class="separator:a46a86a2544ffe2ff68e20f4461306196"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a78c82d85f9a1f4ea2406be938a4dea47"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a78c82d85f9a1f4ea2406be938a4dea47"></a>
static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Awh.xhtml#a78c82d85f9a1f4ea2406be938a4dea47">externalPotentialString</a> ()</td></tr>
<tr class="memdesc:a78c82d85f9a1f4ea2406be938a4dea47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns string "AWH" for registering AWH as an external potential provider with the pull module. <br/></td></tr>
<tr class="separator:a78c82d85f9a1f4ea2406be938a4dea47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8957a0084804002508feb702f0e924a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Awh.xhtml#af8957a0084804002508feb702f0e924a">registerAwhWithPull</a> (const AwhParams &amp;awhParams, pull_t *pull_work)</td></tr>
<tr class="memdesc:af8957a0084804002508feb702f0e924a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Register the AWH biased coordinates with pull.  <a href="#af8957a0084804002508feb702f0e924a">More...</a><br/></td></tr>
<tr class="separator:af8957a0084804002508feb702f0e924a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a60002aa6c5ae4f1f911e3eb89d7258af"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">gmx::Awh::Awh </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fplog</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_inputrec &amp;&#160;</td>
          <td class="paramname"><em>inputRecord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_commrec *&#160;</td>
          <td class="paramname"><em>commRecord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const AwhParams &amp;&#160;</td>
          <td class="paramname"><em>awhParams</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>biasInitFilename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">pull_t *&#160;</td>
          <td class="paramname"><em>pull_work</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct an AWH at the start of a simulation. </p>
<p>AWH will here also register itself with the pull struct as the potential provider for the pull coordinates given as AWH coordinates in the user input. This allows AWH to later apply the bias force to these coordinate in <a class="el" href="classgmx_1_1Awh.xhtml#a2cf1744279c6168dc7bc6ce1d4faf6a2">Awh::applyBiasForcesAndUpdateBias</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">fplog</td><td>General output file, normally md.log, can be nullptr. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">inputRecord</td><td>General input parameters (as set up by grompp). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">commRecord</td><td>Struct for communication, can be nullptr. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">awhParams</td><td>AWH input parameters, consistent with the relevant parts of <code>inputRecord</code> (as set up by grompp). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">biasInitFilename</td><td>Name of file to read PMF and target from. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pull_work</td><td>Pointer to a pull struct which AWH will couple to, has to be initialized, is assumed not to change during the lifetime of the <a class="el" href="classgmx_1_1Awh.xhtml" title="Coupling of the accelerated weight histogram method (AWH) with the system. ">Awh</a> object. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a2cf1744279c6168dc7bc6ce1d4faf6a2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> gmx::Awh::applyBiasForcesAndUpdateBias </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ePBC</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> &amp;&#160;</td>
          <td class="paramname"><em>mdatoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const matrix&#160;</td>
          <td class="paramname"><em>box</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ForceWithVirial.xhtml">gmx::ForceWithVirial</a> *&#160;</td>
          <td class="paramname"><em>forceWithVirial</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>t</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_int64_t&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle *&#160;</td>
          <td class="paramname"><em>wallcycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fplog</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Peform an AWH update, to be called every MD step. </p>
<p>An update has two tasks: apply the bias force and improve the bias and the free energy estimate that AWH keeps internally.</p>
<p>For the first task, AWH retrieves the pull coordinate values from the pull struct. With these, the bias potential and forces are calculated. The bias force together with the atom forces and virial are passed on to pull which applies the bias force to the atoms. This is done at every step.</p>
<p>Secondly, coordinate values are regularly sampled and kept by AWH. Convergence of the bias and free energy estimate is achieved by updating the AWH bias state after a certain number of samples has been collected.</p>
<dl class="section note"><dt>Note</dt><dd>Requires that pull_potential from <a class="el" href="pull_8h.xhtml" title="This file contains datatypes and function declarations necessary for mdrun to interface with the pull...">pull.h</a> has been called first since AWH needs the current coordinate values (the pull code checks for this).</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">mdatoms</td><td>Atom properties. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ePBC</td><td>Type of periodic boundary conditions. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">box</td><td>Box vectors. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">forceWithVirial</td><td>Force and virial buffers, should cover at least the local atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">t</td><td>Time. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">step</td><td>The current MD step. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">wallcycle</td><td>Wallcycle counter, can be nullptr. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">fplog</td><td>General output file, normally md.log, can be nullptr. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the potential energy for the bias. </dd></dl>

</div>
</div>
<a class="anchor" id="a7cb56070bfe1cac1c9933697c93fab57"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; AwhHistory &gt; gmx::Awh::initHistoryFromState </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocate and initialize an AWH history with the given AWH state. </p>
<p>This function should be called at the start of a new simulation at least on the master rank. Note that only constant data will be initialized here. History data is set by <a class="el" href="classgmx_1_1Awh.xhtml#a94f8ccd17d2ba5687dcd2c37cbc7d24a">Awh::updateHistory</a>.</p>
<dl class="section return"><dt>Returns</dt><dd>a shared pointer to the AWH history on the rank that does I/O, nullptr otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="af8957a0084804002508feb702f0e924a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::Awh::registerAwhWithPull </td>
          <td>(</td>
          <td class="paramtype">const AwhParams &amp;&#160;</td>
          <td class="paramname"><em>awhParams</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">pull_t *&#160;</td>
          <td class="paramname"><em>pull_work</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Register the AWH biased coordinates with pull. </p>
<p>This function is public because it needs to be called by grompp (and is otherwise only called by <a class="el" href="classgmx_1_1Awh.xhtml#a60002aa6c5ae4f1f911e3eb89d7258af" title="Construct an AWH at the start of a simulation. ">Awh()</a>). Pull requires all external potentials to register themselves before the end of pre-processing and before the first MD step. If this has not happened, pull with throw an error.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">awhParams</td><td>The AWH parameters. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pull_work</td><td>Pull struct which AWH will register the bias into. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab81baa3827202340b4a98f62cb9f9b77"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::Awh::restoreStateFromHistory </td>
          <td>(</td>
          <td class="paramtype">const AwhHistory *&#160;</td>
          <td class="paramname"><em>awhHistory</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Restore the AWH state from the given history. </p>
<p>Should be called on all ranks (for internal MPI broadcast). Should pass a point to an AwhHistory on the master rank that is compatible with the AWH setup in this simulation. Will throw an exception if it is not compatible.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">awhHistory</td><td>AWH history to restore from. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a94f8ccd17d2ba5687dcd2c37cbc7d24a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::Awh::updateHistory </td>
          <td>(</td>
          <td class="paramtype">AwhHistory *&#160;</td>
          <td class="paramname"><em>awhHistory</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update the AWH history in preparation for writing to checkpoint file. </p>
<p>Should be called at least on the master rank at checkpoint steps.</p>
<p>Should be called with a valid <code>awhHistory</code> (is checked).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">awhHistory</td><td>AWH history to set. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a46a86a2544ffe2ff68e20f4461306196"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::Awh::writeToEnergyFrame </td>
          <td>(</td>
          <td class="paramtype">gmx_int64_t&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_enxframe *&#160;</td>
          <td class="paramname"><em>fr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fills the AWH data block of an energy frame with data at certain steps. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">step</td><td>The current MD step. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">fr</td><td>Energy data frame. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/gromacs/awh/<a class="el" href="awh_8h.xhtml">awh.h</a></li>
<li>src/gromacs/awh/<a class="el" href="awh_8cpp.xhtml">awh.cpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:57:27 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
