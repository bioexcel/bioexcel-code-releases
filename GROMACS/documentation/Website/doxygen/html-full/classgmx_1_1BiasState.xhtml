<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::BiasState Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="classgmx_1_1BiasState.xhtml">BiasState</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="classgmx_1_1BiasState-members.xhtml">List of all members</a> &#124;
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">gmx::BiasState Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;gromacs/awh/biasstate.h&gt;</code></p>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>The state of a bias. </p>
<p>The bias state has the current coordinate state: its value and the grid point it maps to (the grid point of the umbrella potential if needed). It contains a vector with the state for each point on the grid. It also counts the number of updates issued and tracks which points have been sampled since last update. Finally, the convergence state is a global property set ultimately by the histogram size histogramSize in the sub-class <a class="el" href="classgmx_1_1HistogramSize.xhtml" title="Tracks global size related properties of the bias histogram. ">HistogramSize</a>, since the update sizes are ~ 1/histogramSize. </p>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:af2b7c8ef670b4107c27d6b7292de2e3a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#af2b7c8ef670b4107c27d6b7292de2e3a">BiasState</a> (const AwhBiasParams &amp;awhBiasParams, double histogramSizeInitial, const std::vector&lt; <a class="el" href="structgmx_1_1DimParams.xhtml">DimParams</a> &gt; &amp;dimParams, const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid)</td></tr>
<tr class="memdesc:af2b7c8ef670b4107c27d6b7292de2e3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#af2b7c8ef670b4107c27d6b7292de2e3a">More...</a><br/></td></tr>
<tr class="separator:af2b7c8ef670b4107c27d6b7292de2e3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76314d7126ef1644b32204140346ee10"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#a76314d7126ef1644b32204140346ee10">restoreFromHistory</a> (const AwhBiasHistory &amp;biasHistory, const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid)</td></tr>
<tr class="memdesc:a76314d7126ef1644b32204140346ee10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Restore the bias state from history.  <a href="#a76314d7126ef1644b32204140346ee10">More...</a><br/></td></tr>
<tr class="separator:a76314d7126ef1644b32204140346ee10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae162a66283708c47cda9fccf70545750"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#ae162a66283708c47cda9fccf70545750">broadcast</a> (const t_commrec *commRecord)</td></tr>
<tr class="memdesc:ae162a66283708c47cda9fccf70545750"><td class="mdescLeft">&#160;</td><td class="mdescRight">Broadcast the bias state over the MPI ranks in this simulation.  <a href="#ae162a66283708c47cda9fccf70545750">More...</a><br/></td></tr>
<tr class="separator:ae162a66283708c47cda9fccf70545750"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08affe673e22a51463eb1b99a638fe50"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#a08affe673e22a51463eb1b99a638fe50">initHistoryFromState</a> (AwhBiasHistory *biasHistory) const </td></tr>
<tr class="memdesc:a08affe673e22a51463eb1b99a638fe50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate and initialize a bias history with the given bias state.  <a href="#a08affe673e22a51463eb1b99a638fe50">More...</a><br/></td></tr>
<tr class="separator:a08affe673e22a51463eb1b99a638fe50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a458a7b8536e1880302bbc8d00ea6a412"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#a458a7b8536e1880302bbc8d00ea6a412">updateHistory</a> (AwhBiasHistory *biasHistory, const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid) const </td></tr>
<tr class="memdesc:a458a7b8536e1880302bbc8d00ea6a412"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the bias state history with the current state.  <a href="#a458a7b8536e1880302bbc8d00ea6a412">More...</a><br/></td></tr>
<tr class="separator:a458a7b8536e1880302bbc8d00ea6a412"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a967bd0741cfba5ce740d4232db9b6444"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#a967bd0741cfba5ce740d4232db9b6444">initGridPointState</a> (const AwhBiasParams &amp;awhBiasParams, const std::vector&lt; <a class="el" href="structgmx_1_1DimParams.xhtml">DimParams</a> &gt; &amp;dimParams, const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid, const <a class="el" href="classgmx_1_1BiasParams.xhtml">BiasParams</a> &amp;params, const std::string &amp;filename, int numBias)</td></tr>
<tr class="memdesc:a967bd0741cfba5ce740d4232db9b6444"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the state of grid coordinate points.  <a href="#a967bd0741cfba5ce740d4232db9b6444">More...</a><br/></td></tr>
<tr class="separator:a967bd0741cfba5ce740d4232db9b6444"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c4a2b114f25064f825fd74c95264278"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#a4c4a2b114f25064f825fd74c95264278">warnForHistogramAnomalies</a> (const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid, int biasIndex, double t, FILE *fplog, int maxNumWarnings) const </td></tr>
<tr class="memdesc:a4c4a2b114f25064f825fd74c95264278"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs statistical checks on the collected histograms and warns if issues are detected.  <a href="#a4c4a2b114f25064f825fd74c95264278">More...</a><br/></td></tr>
<tr class="separator:a4c4a2b114f25064f825fd74c95264278"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad44816f83e9b5fc0376f88df5570763e"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#ad44816f83e9b5fc0376f88df5570763e">calcUmbrellaForceAndPotential</a> (const std::vector&lt; <a class="el" href="structgmx_1_1DimParams.xhtml">DimParams</a> &gt; &amp;dimParams, const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid, int point, <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; double &gt; force) const </td></tr>
<tr class="memdesc:ad44816f83e9b5fc0376f88df5570763e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates and sets the force the coordinate experiences from an umbrella centered at the given point.  <a href="#ad44816f83e9b5fc0376f88df5570763e">More...</a><br/></td></tr>
<tr class="separator:ad44816f83e9b5fc0376f88df5570763e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06b5ebaa9bbec441c7f23e0a6829b855"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#a06b5ebaa9bbec441c7f23e0a6829b855">calcConvolvedForce</a> (const std::vector&lt; <a class="el" href="structgmx_1_1DimParams.xhtml">DimParams</a> &gt; &amp;dimParams, const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid, <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const double &gt; probWeightNeighbor, <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; double &gt; forceWorkBuffer, <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; double &gt; force) const </td></tr>
<tr class="memdesc:a06b5ebaa9bbec441c7f23e0a6829b855"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates and sets the convolved force acting on the coordinate.  <a href="#a06b5ebaa9bbec441c7f23e0a6829b855">More...</a><br/></td></tr>
<tr class="separator:a06b5ebaa9bbec441c7f23e0a6829b855"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf7aa1e2f28a69878cb925b9a37f635b"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#adf7aa1e2f28a69878cb925b9a37f635b">moveUmbrella</a> (const std::vector&lt; <a class="el" href="structgmx_1_1DimParams.xhtml">DimParams</a> &gt; &amp;dimParams, const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid, <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const double &gt; probWeightNeighbor, <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; double &gt; biasForce, gmx_int64_t step, gmx_int64_t seed, int indexSeed)</td></tr>
<tr class="memdesc:adf7aa1e2f28a69878cb925b9a37f635b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move the center point of the umbrella potential.  <a href="#adf7aa1e2f28a69878cb925b9a37f635b">More...</a><br/></td></tr>
<tr class="separator:adf7aa1e2f28a69878cb925b9a37f635b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac082fcce52b440dfa32ef11064ad225e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#ac082fcce52b440dfa32ef11064ad225e">doSkippedUpdatesForAllPoints</a> (const <a class="el" href="classgmx_1_1BiasParams.xhtml">BiasParams</a> &amp;params)</td></tr>
<tr class="memdesc:ac082fcce52b440dfa32ef11064ad225e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do all previously skipped updates. Public for use by tests.  <a href="#ac082fcce52b440dfa32ef11064ad225e">More...</a><br/></td></tr>
<tr class="separator:ac082fcce52b440dfa32ef11064ad225e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e883b5fa0f4a4e9cb21cb71ea88ef84"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#a8e883b5fa0f4a4e9cb21cb71ea88ef84">doSkippedUpdatesInNeighborhood</a> (const <a class="el" href="classgmx_1_1BiasParams.xhtml">BiasParams</a> &amp;params, const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid)</td></tr>
<tr class="memdesc:a8e883b5fa0f4a4e9cb21cb71ea88ef84"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do previously skipped updates in this neighborhood.  <a href="#a8e883b5fa0f4a4e9cb21cb71ea88ef84">More...</a><br/></td></tr>
<tr class="separator:a8e883b5fa0f4a4e9cb21cb71ea88ef84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a911f6af343d16f5f549fd24f8b03f6f0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#a911f6af343d16f5f549fd24f8b03f6f0">setCoordValue</a> (const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid, const <a class="el" href="namespacegmx.xhtml#a079fa4aee8e4c6663f35aa1d0f4bac4b">awh_dvec</a> coordValue)</td></tr>
<tr class="memdesc:a911f6af343d16f5f549fd24f8b03f6f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the reaction coordinate value.  <a href="#a911f6af343d16f5f549fd24f8b03f6f0">More...</a><br/></td></tr>
<tr class="separator:a911f6af343d16f5f549fd24f8b03f6f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b04a169195d0b043aff9c063aba74c3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#a2b04a169195d0b043aff9c063aba74c3">updateFreeEnergyAndAddSamplesToHistogram</a> (const std::vector&lt; <a class="el" href="structgmx_1_1DimParams.xhtml">DimParams</a> &gt; &amp;dimParams, const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid, const <a class="el" href="classgmx_1_1BiasParams.xhtml">BiasParams</a> &amp;params, const t_commrec *commRecord, const gmx_multisim_t *ms, double t, gmx_int64_t step, FILE *fplog, std::vector&lt; int &gt; *updateList)</td></tr>
<tr class="memdesc:a2b04a169195d0b043aff9c063aba74c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an update of the bias.  <a href="#a2b04a169195d0b043aff9c063aba74c3">More...</a><br/></td></tr>
<tr class="separator:a2b04a169195d0b043aff9c063aba74c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4475843ac17da2d88e5b1afe827ea29"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#ab4475843ac17da2d88e5b1afe827ea29">updateProbabilityWeightsAndConvolvedBias</a> (const std::vector&lt; <a class="el" href="structgmx_1_1DimParams.xhtml">DimParams</a> &gt; &amp;dimParams, const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid, std::vector&lt; double, <a class="el" href="namespacegmx.xhtml#ac3ca6adcfda5170180c2140c7b2f9d47">AlignedAllocator</a>&lt; double &gt;&gt; *weight) const </td></tr>
<tr class="memdesc:ab4475843ac17da2d88e5b1afe827ea29"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the probability weights and the convolved bias.  <a href="#ab4475843ac17da2d88e5b1afe827ea29">More...</a><br/></td></tr>
<tr class="separator:ab4475843ac17da2d88e5b1afe827ea29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7a9cbe562a93e106131cfde4eb3dcb6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#ac7a9cbe562a93e106131cfde4eb3dcb6">sampleProbabilityWeights</a> (const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid, <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const double &gt; probWeightNeighbor)</td></tr>
<tr class="memdesc:ac7a9cbe562a93e106131cfde4eb3dcb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Take samples of the current probability weights for future updates and analysis.  <a href="#ac7a9cbe562a93e106131cfde4eb3dcb6">More...</a><br/></td></tr>
<tr class="separator:ac7a9cbe562a93e106131cfde4eb3dcb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2086c2717683f61be6796d41a3f25911"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#a2086c2717683f61be6796d41a3f25911">sampleCoordAndPmf</a> (const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid, <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const double &gt; probWeightNeighbor, double convolvedBias)</td></tr>
<tr class="memdesc:a2086c2717683f61be6796d41a3f25911"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sample the reaction coordinate and PMF for future updates or analysis.  <a href="#a2086c2717683f61be6796d41a3f25911">More...</a><br/></td></tr>
<tr class="separator:a2086c2717683f61be6796d41a3f25911"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a080053b5debb4af52a54ce787d2705c3"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#a080053b5debb4af52a54ce787d2705c3">calcConvolvedBias</a> (const std::vector&lt; <a class="el" href="structgmx_1_1DimParams.xhtml">DimParams</a> &gt; &amp;dimParams, const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;grid, const <a class="el" href="namespacegmx.xhtml#a079fa4aee8e4c6663f35aa1d0f4bac4b">awh_dvec</a> &amp;coordValue) const </td></tr>
<tr class="memdesc:a080053b5debb4af52a54ce787d2705c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the convolved bias for a given coordinate value.  <a href="#a080053b5debb4af52a54ce787d2705c3">More...</a><br/></td></tr>
<tr class="separator:a080053b5debb4af52a54ce787d2705c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a491ac07baa597e3dbc207e4f7db54665"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#a491ac07baa597e3dbc207e4f7db54665">getPmf</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; float &gt;) const </td></tr>
<tr class="memdesc:a491ac07baa597e3dbc207e4f7db54665"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills the given array with PMF values.  <a href="#a491ac07baa597e3dbc207e4f7db54665">More...</a><br/></td></tr>
<tr class="separator:a491ac07baa597e3dbc207e4f7db54665"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62b95dffc27c243512fac68c0ccb4cdc"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a62b95dffc27c243512fac68c0ccb4cdc"></a>
const <a class="el" href="classgmx_1_1CoordState.xhtml">CoordState</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#a62b95dffc27c243512fac68c0ccb4cdc">coordState</a> () const </td></tr>
<tr class="memdesc:a62b95dffc27c243512fac68c0ccb4cdc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the current coordinate state. <br/></td></tr>
<tr class="separator:a62b95dffc27c243512fac68c0ccb4cdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9032131c602a3c39c077f5d8f3a793df"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9032131c602a3c39c077f5d8f3a793df"></a>
const std::vector&lt; <a class="el" href="classgmx_1_1PointState.xhtml">PointState</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#a9032131c602a3c39c077f5d8f3a793df">points</a> () const </td></tr>
<tr class="memdesc:a9032131c602a3c39c077f5d8f3a793df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a const reference to the point state. <br/></td></tr>
<tr class="separator:a9032131c602a3c39c077f5d8f3a793df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61d3e06a039f9c145357f520b372f2f3"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a61d3e06a039f9c145357f520b372f2f3"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#a61d3e06a039f9c145357f520b372f2f3">inInitialStage</a> () const </td></tr>
<tr class="memdesc:a61d3e06a039f9c145357f520b372f2f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if we are in the initial stage. <br/></td></tr>
<tr class="separator:a61d3e06a039f9c145357f520b372f2f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6de4d309893ac59e2d18eca540efc39c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6de4d309893ac59e2d18eca540efc39c"></a>
<a class="el" href="classgmx_1_1HistogramSize.xhtml">HistogramSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BiasState.xhtml#a6de4d309893ac59e2d18eca540efc39c">histogramSize</a> () const </td></tr>
<tr class="memdesc:a6de4d309893ac59e2d18eca540efc39c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the current histogram size. <br/></td></tr>
<tr class="separator:a6de4d309893ac59e2d18eca540efc39c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="af2b7c8ef670b4107c27d6b7292de2e3a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">gmx::BiasState::BiasState </td>
          <td>(</td>
          <td class="paramtype">const AwhBiasParams &amp;&#160;</td>
          <td class="paramname"><em>awhBiasParams</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>histogramSizeInitial</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="structgmx_1_1DimParams.xhtml">DimParams</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>dimParams</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;&#160;</td>
          <td class="paramname"><em>grid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<p>Constructs the global state and the point states on a provided geometric grid passed in <code>grid</code>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">awhBiasParams</td><td>The <a class="el" href="classgmx_1_1Bias.xhtml" title="A bias acting on a multidimensional coordinate. ">Bias</a> parameters from inputrec. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">histogramSizeInitial</td><td>The estimated initial histogram size. This is floating-point, since histograms use weighted entries and grow by a floating-point scaling factor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dimParams</td><td>The dimension parameters. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The bias grid. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ae162a66283708c47cda9fccf70545750"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::BiasState::broadcast </td>
          <td>(</td>
          <td class="paramtype">const t_commrec *&#160;</td>
          <td class="paramname"><em>commRecord</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Broadcast the bias state over the MPI ranks in this simulation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">commRecord</td><td>Struct for communication. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a080053b5debb4af52a54ce787d2705c3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double gmx::BiasState::calcConvolvedBias </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="structgmx_1_1DimParams.xhtml">DimParams</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>dimParams</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;&#160;</td>
          <td class="paramname"><em>grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacegmx.xhtml#a079fa4aee8e4c6663f35aa1d0f4bac4b">awh_dvec</a> &amp;&#160;</td>
          <td class="paramname"><em>coordValue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates the convolved bias for a given coordinate value. </p>
<p>The convolved bias is the effective bias acting on the coordinate. Since the bias here has arbitrary normalization, this only makes sense as a relative, to other coordinate values, measure of the bias.</p>
<dl class="section note"><dt>Note</dt><dd>If it turns out to be costly to calculate this pointwise the convolved bias for the whole grid could be returned instead.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimParams</td><td>The bias dimensions parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The grid. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">coordValue</td><td>Coordinate value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the convolved bias &gt;= -GMX_FLOAT_MAX. </dd></dl>

</div>
</div>
<a class="anchor" id="a06b5ebaa9bbec441c7f23e0a6829b855"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::BiasState::calcConvolvedForce </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="structgmx_1_1DimParams.xhtml">DimParams</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>dimParams</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;&#160;</td>
          <td class="paramname"><em>grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const double &gt;&#160;</td>
          <td class="paramname"><em>probWeightNeighbor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; double &gt;&#160;</td>
          <td class="paramname"><em>forceWorkBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; double &gt;&#160;</td>
          <td class="paramname"><em>force</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates and sets the convolved force acting on the coordinate. </p>
<p>The convolved force is the weighted sum of forces from umbrellas located at each point in the grid.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimParams</td><td>The bias dimensions parameters. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The grid. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">probWeightNeighbor</td><td>Probability weights of the neighbors. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">forceWorkBuffer</td><td>Force work buffer, values only used internally. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">force</td><td><a class="el" href="classgmx_1_1Bias.xhtml" title="A bias acting on a multidimensional coordinate. ">Bias</a> force vector to set. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad44816f83e9b5fc0376f88df5570763e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double gmx::BiasState::calcUmbrellaForceAndPotential </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="structgmx_1_1DimParams.xhtml">DimParams</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>dimParams</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;&#160;</td>
          <td class="paramname"><em>grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>point</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; double &gt;&#160;</td>
          <td class="paramname"><em>force</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates and sets the force the coordinate experiences from an umbrella centered at the given point. </p>
<p>The umbrella potential is an harmonic potential given by 0.5k(coord value - point value)^2. This value is also returned.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimParams</td><td>The bias dimensions parameters. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The grid. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">point</td><td>Point for umbrella center. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">force</td><td>Force vector to set. Returns the umbrella potential. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac082fcce52b440dfa32ef11064ad225e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::BiasState::doSkippedUpdatesForAllPoints </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1BiasParams.xhtml">BiasParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Do all previously skipped updates. Public for use by tests. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>The bias parameters. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8e883b5fa0f4a4e9cb21cb71ea88ef84"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::BiasState::doSkippedUpdatesInNeighborhood </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1BiasParams.xhtml">BiasParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;&#160;</td>
          <td class="paramname"><em>grid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Do previously skipped updates in this neighborhood. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>The bias parameters. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The grid. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a491ac07baa597e3dbc207e4f7db54665"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::BiasState::getPmf </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; float &gt;&#160;</td>
          <td class="paramname"><em>pmf</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fills the given array with PMF values. </p>
<p>Points outside of the biasing target region will get PMF = GMX_FLOAT_MAX. </p>
<dl class="section note"><dt>Note</dt><dd>: The PMF is in single precision, because it is a statistical quantity and therefore never reaches full float precision.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">pmf</td><td>Array(ref) to be filled with the PMF values, should have the same size as the bias grid. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a967bd0741cfba5ce740d4232db9b6444"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::BiasState::initGridPointState </td>
          <td>(</td>
          <td class="paramtype">const AwhBiasParams &amp;&#160;</td>
          <td class="paramname"><em>awhBiasParams</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="structgmx_1_1DimParams.xhtml">DimParams</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>dimParams</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;&#160;</td>
          <td class="paramname"><em>grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1BiasParams.xhtml">BiasParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>numBias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the state of grid coordinate points. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">awhBiasParams</td><td><a class="el" href="classgmx_1_1Bias.xhtml" title="A bias acting on a multidimensional coordinate. ">Bias</a> parameters from inputrec. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dimParams</td><td>The dimension parameters. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The grid. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>The bias parameters. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Name of file to read PMF and target from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">numBias</td><td>The number of biases. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a08affe673e22a51463eb1b99a638fe50"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::BiasState::initHistoryFromState </td>
          <td>(</td>
          <td class="paramtype">AwhBiasHistory *&#160;</td>
          <td class="paramname"><em>biasHistory</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocate and initialize a bias history with the given bias state. </p>
<p>This function will be called at the start of a new simulation. Note that this only sets the correct size and does produce a valid history object, but with all data set to zero. Actual history data is set by <a class="el" href="classgmx_1_1BiasState.xhtml#a458a7b8536e1880302bbc8d00ea6a412">updateHistory</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">biasHistory</td><td>AWH history to initialize. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="adf7aa1e2f28a69878cb925b9a37f635b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double gmx::BiasState::moveUmbrella </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="structgmx_1_1DimParams.xhtml">DimParams</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>dimParams</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;&#160;</td>
          <td class="paramname"><em>grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const double &gt;&#160;</td>
          <td class="paramname"><em>probWeightNeighbor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; double &gt;&#160;</td>
          <td class="paramname"><em>biasForce</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_int64_t&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_int64_t&#160;</td>
          <td class="paramname"><em>seed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>indexSeed</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Move the center point of the umbrella potential. </p>
<p>A new umbrella center is sampled from the biased distibution. Also, the bias force is updated and the new potential is return.</p>
<p>This function should only be called when the bias force is not being convolved. It is assumed that the probability distribution has been updated.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimParams</td><td><a class="el" href="classgmx_1_1Bias.xhtml" title="A bias acting on a multidimensional coordinate. ">Bias</a> dimension parameters. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The grid. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">probWeightNeighbor</td><td>Probability weights of the neighbors. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">biasForce</td><td>The AWH bias force. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">step</td><td>Step number, needed for the random number generator. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">seed</td><td>Random seed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">indexSeed</td><td>Second random seed, should be the bias Index. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the new potential value. </dd></dl>

</div>
</div>
<a class="anchor" id="a76314d7126ef1644b32204140346ee10"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::BiasState::restoreFromHistory </td>
          <td>(</td>
          <td class="paramtype">const AwhBiasHistory &amp;&#160;</td>
          <td class="paramname"><em>biasHistory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;&#160;</td>
          <td class="paramname"><em>grid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Restore the bias state from history. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">biasHistory</td><td><a class="el" href="classgmx_1_1Bias.xhtml" title="A bias acting on a multidimensional coordinate. ">Bias</a> history struct. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The bias grid. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2086c2717683f61be6796d41a3f25911"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::BiasState::sampleCoordAndPmf </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;&#160;</td>
          <td class="paramname"><em>grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const double &gt;&#160;</td>
          <td class="paramname"><em>probWeightNeighbor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>convolvedBias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sample the reaction coordinate and PMF for future updates or analysis. </p>
<p>These samples do not affect the (future) sampling and are thus pure observables. Statisics of these are stored in the energy file.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The grid. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">probWeightNeighbor</td><td>Probability weights of the neighbors. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">convolvedBias</td><td>The convolved bias. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac7a9cbe562a93e106131cfde4eb3dcb6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::BiasState::sampleProbabilityWeights </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;&#160;</td>
          <td class="paramname"><em>grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; const double &gt;&#160;</td>
          <td class="paramname"><em>probWeightNeighbor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Take samples of the current probability weights for future updates and analysis. </p>
<p>Points in the current neighborhood will now have data meaning they need to be included in the local update list of the next update. Therefore, the local update range is also update here.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The grid. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">probWeightNeighbor</td><td>Probability weights of the neighbors. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a911f6af343d16f5f549fd24f8b03f6f0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::BiasState::setCoordValue </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;&#160;</td>
          <td class="paramname"><em>grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacegmx.xhtml#a079fa4aee8e4c6663f35aa1d0f4bac4b">awh_dvec</a>&#160;</td>
          <td class="paramname"><em>coordValue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update the reaction coordinate value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The bias grid. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">coordValue</td><td>The current reaction coordinate value (there are no limits on allowed values). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2b04a169195d0b043aff9c063aba74c3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::BiasState::updateFreeEnergyAndAddSamplesToHistogram </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="structgmx_1_1DimParams.xhtml">DimParams</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>dimParams</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;&#160;</td>
          <td class="paramname"><em>grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1BiasParams.xhtml">BiasParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_commrec *&#160;</td>
          <td class="paramname"><em>commRecord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_multisim_t *&#160;</td>
          <td class="paramname"><em>ms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>t</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_int64_t&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fplog</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; *&#160;</td>
          <td class="paramname"><em>updateList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an update of the bias. </p>
<p>The objective of the update is to use collected samples (probability weights) to improve the free energy estimate. For sake of efficiency, the update is local whenever possible, meaning that only points that have actually been sampled are accessed and updated here. For certain AWH settings or at certain steps however, global need to be performed. Besides the actual free energy update, this function takes care of ensuring future convergence of the free energy. Convergence is obtained by increasing the size of the reference weight histogram in a controlled (sometimes dynamic) manner. Also, there are AWH variables that are direct functions of the free energy or sampling history that need to be updated here, namely the target distribution and the bias function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimParams</td><td>The dimension parameters. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The grid. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>The bias parameters. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">commRecord</td><td>Struct for intra-simulation communication. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ms</td><td>Struct for multi-simulation communication. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">t</td><td>Time. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">step</td><td>Time step. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">fplog</td><td>Log file. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">updateList</td><td>Work space to store a temporary list. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a458a7b8536e1880302bbc8d00ea6a412"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::BiasState::updateHistory </td>
          <td>(</td>
          <td class="paramtype">AwhBiasHistory *&#160;</td>
          <td class="paramname"><em>biasHistory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;&#160;</td>
          <td class="paramname"><em>grid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update the bias state history with the current state. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">biasHistory</td><td><a class="el" href="classgmx_1_1Bias.xhtml" title="A bias acting on a multidimensional coordinate. ">Bias</a> history struct. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The bias grid. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab4475843ac17da2d88e5b1afe827ea29"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double gmx::BiasState::updateProbabilityWeightsAndConvolvedBias </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="structgmx_1_1DimParams.xhtml">DimParams</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>dimParams</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;&#160;</td>
          <td class="paramname"><em>grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; double, <a class="el" href="namespacegmx.xhtml#ac3ca6adcfda5170180c2140c7b2f9d47">AlignedAllocator</a>&lt; double &gt;&gt; *&#160;</td>
          <td class="paramname"><em>weight</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update the probability weights and the convolved bias. </p>
<p>Given a coordinate value, each grid point is assigned a probability weight, w(point|value), that depends on the current bias function. The sum of these weights is needed for normalizing the probability sum to 1 but also equals the effective, or convolved, biasing weight for this coordinate value. The convolved bias is needed e.g. for extracting the PMF, so we save it here since this saves us from doing extra exponential function evaluations later on.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimParams</td><td>The bias dimensions parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The grid. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">weight</td><td>Probability weights of the neighbors, SIMD aligned. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the convolved bias. </dd></dl>

</div>
</div>
<a class="anchor" id="a4c4a2b114f25064f825fd74c95264278"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx::BiasState::warnForHistogramAnomalies </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1Grid.xhtml">Grid</a> &amp;&#160;</td>
          <td class="paramname"><em>grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>biasIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>t</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fplog</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>maxNumWarnings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs statistical checks on the collected histograms and warns if issues are detected. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">grid</td><td>The grid. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">biasIndex</td><td>The index of the bias we are checking for. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">t</td><td>Time. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">fplog</td><td>Output file for warnings. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">maxNumWarnings</td><td>Don't issue more than this number of warnings. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the number of warnings issued. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/gromacs/awh/<a class="el" href="biasstate_8h.xhtml">biasstate.h</a></li>
<li>src/gromacs/awh/<a class="el" href="biasstate_8cpp.xhtml">biasstate.cpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:57:27 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
