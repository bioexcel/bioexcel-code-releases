<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/imd/imd.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_8a21c46af9718d1f610eb513153099d7.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a46192700e9e8ed44c648f0a55ee9a53.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_53ea27555e548117091c7e10c4231eb6.xhtml">imd</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">imd.cpp File Reference<div class="ingroups"><a class="el" href="group__module__imd.xhtml">Interactive molecular dynamics (IMD)</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="gmxpre_8h.xhtml">gmxpre.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="imd_8h.xhtml">imd.h</a>&quot;</code><br/>
<code>#include &quot;config.h&quot;</code><br/>
<code>#include &lt;errno.h&gt;</code><br/>
<code>#include &lt;string.h&gt;</code><br/>
<code>#include &lt;unistd.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="filenm_8h.xhtml">gromacs/commandline/filenm.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="domdec__struct_8h.xhtml">gromacs/domdec/domdec_struct.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ga2la_8h.xhtml">gromacs/domdec/ga2la.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/fileio/confio.h&quot;</code><br/>
<code>#include &quot;gromacs/fileio/gmxfio.h&quot;</code><br/>
<code>#include &quot;gromacs/fileio/xvgr.h&quot;</code><br/>
<code>#include &quot;gromacs/gmxlib/network.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="imdsocket_8h.xhtml">gromacs/imd/imdsocket.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/math/units.h&quot;</code><br/>
<code>#include &quot;gromacs/math/vec.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="broadcaststructs_8h.xhtml">gromacs/mdlib/broadcaststructs.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="groupcoord_8h.xhtml">gromacs/mdlib/groupcoord.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="mdrun_8h.xhtml">gromacs/mdlib/mdrun.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/mdlib/sighandler.h&quot;</code><br/>
<code>#include &quot;gromacs/mdlib/sim_util.h&quot;</code><br/>
<code>#include &quot;gromacs/mdtypes/inputrec.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="md__enums_8h.xhtml">gromacs/mdtypes/md_enums.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="state_8h.xhtml">gromacs/mdtypes/state.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/pbcutil/pbc.h&quot;</code><br/>
<code>#include &quot;gromacs/timing/wallcycle.h&quot;</code><br/>
<code>#include &quot;gromacs/topology/mtop_util.h&quot;</code><br/>
<code>#include &quot;gromacs/topology/topology.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="fatalerror_8h.xhtml">gromacs/utility/fatalerror.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="smalloc_8h.xhtml">gromacs/utility/smalloc.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for imd.cpp:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="imd_8cpp__incl.svg" width="3466" height="530"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Implements functions of <a class="el" href="imd_8h.xhtml" title="This file contains datatypes and function declarations necessary for mdrun to interface with VMD via ...">imd.h</a>. </p>
<p>Re-implementation of basic IMD functions from NAMD/VMD from scratch, see <a class="el" href="imdsocket_8h.xhtml" title="Implements the parts of the vmdsock.h interface needed for IMD communication. ">imdsocket.h</a> for references to the IMD API.</p>
<dl class="section author"><dt>Author</dt><dd>Martin Hoefling, Carsten Kutzner <a href="#" onclick="location.href='mai'+'lto:'+'cku'+'tz'+'ne@'+'gw'+'dg.'+'de'; return false;">ckutz<span style="display: none;">.nosp@m.</span>ne@g<span style="display: none;">.nosp@m.</span>wdg.d<span style="display: none;">.nosp@m.</span>e</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structIMDEnergyBlock.xhtml">IMDEnergyBlock</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">IMD (interactive molecular dynamics) energy record.  <a href="structIMDEnergyBlock.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structIMDHeader.xhtml">IMDHeader</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">IMD (interactive molecular dynamics) communication structure.  <a href="structIMDHeader.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structt__gmx__IMD.xhtml">t_gmx_IMD</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">IMD (interactive molecular dynamics) main data structure.  <a href="structt__gmx__IMD.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ab6ecc30e44510b12bda8e088eab6b570"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab6ecc30e44510b12bda8e088eab6b570"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#ab6ecc30e44510b12bda8e088eab6b570">IMDLOOPWAIT</a>&#160;&#160;&#160;1</td></tr>
<tr class="memdesc:ab6ecc30e44510b12bda8e088eab6b570"><td class="mdescLeft">&#160;</td><td class="mdescRight">How long shall we wait in seconds until we check for a connection again? <br/></td></tr>
<tr class="separator:ab6ecc30e44510b12bda8e088eab6b570"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e470e83f1b78d380419466816f7f70f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8e470e83f1b78d380419466816f7f70f"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a8e470e83f1b78d380419466816f7f70f">IMDCONNECTWAIT</a>&#160;&#160;&#160;2</td></tr>
<tr class="memdesc:a8e470e83f1b78d380419466816f7f70f"><td class="mdescLeft">&#160;</td><td class="mdescRight">How long shall we check for the IMD_GO? <br/></td></tr>
<tr class="separator:a8e470e83f1b78d380419466816f7f70f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed732fc470f974350bb2b3e6acc81885"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aed732fc470f974350bb2b3e6acc81885"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#aed732fc470f974350bb2b3e6acc81885">HEADERSIZE</a>&#160;&#160;&#160;8</td></tr>
<tr class="memdesc:aed732fc470f974350bb2b3e6acc81885"><td class="mdescLeft">&#160;</td><td class="mdescRight">IMD Header Size. <br/></td></tr>
<tr class="separator:aed732fc470f974350bb2b3e6acc81885"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adeb3d4ff7c322e91910abb1a0d8651f9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="adeb3d4ff7c322e91910abb1a0d8651f9"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#adeb3d4ff7c322e91910abb1a0d8651f9">IMDVERSION</a>&#160;&#160;&#160;2</td></tr>
<tr class="memdesc:adeb3d4ff7c322e91910abb1a0d8651f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">IMD Protocol Version. <br/></td></tr>
<tr class="separator:adeb3d4ff7c322e91910abb1a0d8651f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a93ec6165f7e636336ee6f4e48e202b08"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structt__gmx__IMD.xhtml">t_gmx_IMD</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a></td></tr>
<tr class="memdesc:a93ec6165f7e636336ee6f4e48e202b08"><td class="mdescLeft">&#160;</td><td class="mdescRight">IMD (interactive molecular dynamics) main data structure.  <a href="#a93ec6165f7e636336ee6f4e48e202b08">More...</a><br/></td></tr>
<tr class="separator:a93ec6165f7e636336ee6f4e48e202b08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8989c3f0a5c85cb7126bf6e72bd58258"><td class="memItemLeft" align="right" valign="top">typedef enum <a class="el" href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1b">IMDType_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a8989c3f0a5c85cb7126bf6e72bd58258">IMDMessageType</a></td></tr>
<tr class="memdesc:a8989c3f0a5c85cb7126bf6e72bd58258"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enum for types of IMD messages.  <a href="#a8989c3f0a5c85cb7126bf6e72bd58258">More...</a><br/></td></tr>
<tr class="separator:a8989c3f0a5c85cb7126bf6e72bd58258"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:af5cb6d7737e9bb4c9747225aea161f1b"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1b">IMDType_t</a> { <br/>
&#160;&#160;<a class="el" href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1baff432ca97d7b28c3281f706fa6cafbc4">IMD_DISCONNECT</a>, 
<a class="el" href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1bac993f99d21082fd450c4b2de1e05063f">IMD_ENERGIES</a>, 
<a class="el" href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1ba166d65a305fff233066ba2f83d79460c">IMD_FCOORDS</a>, 
<a class="el" href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1ba958e9f69f993ec05e7d04e1af7013406">IMD_GO</a>, 
<br/>
&#160;&#160;<a class="el" href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1ba17f229cfffe9e48eb733cd1e0574dc47">IMD_HANDSHAKE</a>, 
<a class="el" href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1ba4855c30bdc6943df4691f70338ca7c89">IMD_KILL</a>, 
<a class="el" href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1ba304c8e808c2e56731f6ab17de4d8e643">IMD_MDCOMM</a>, 
<a class="el" href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1ba0d684f3e2480b9d7f92210f565664895">IMD_PAUSE</a>, 
<br/>
&#160;&#160;<a class="el" href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1ba4e71e0f5e6758b099db5cf51b527c1ca">IMD_TRATE</a>, 
<a class="el" href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1bad7f2af819f4e05f0e6e4415a51846697">IMD_IOERROR</a>, 
<a class="el" href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1ba1fdeb1fce4ce51229f260660a4cdcb56">IMD_NR</a>
<br/>
 }</td></tr>
<tr class="memdesc:af5cb6d7737e9bb4c9747225aea161f1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enum for types of IMD messages.  <a href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1b">More...</a><br/></td></tr>
<tr class="separator:af5cb6d7737e9bb4c9747225aea161f1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a3d433b2e289b100310db5096f1f9144c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3d433b2e289b100310db5096f1f9144c"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a3d433b2e289b100310db5096f1f9144c">fill_header</a> (<a class="el" href="structIMDHeader.xhtml">IMDHeader</a> *header, <a class="el" href="imd_8cpp.xhtml#a8989c3f0a5c85cb7126bf6e72bd58258">IMDMessageType</a> type, gmx_int32_t length)</td></tr>
<tr class="memdesc:a3d433b2e289b100310db5096f1f9144c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills the header with message and the length argument. <br/></td></tr>
<tr class="separator:a3d433b2e289b100310db5096f1f9144c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9c35bd99b0324b25cccc12105b2f888"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af9c35bd99b0324b25cccc12105b2f888"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#af9c35bd99b0324b25cccc12105b2f888">swap_header</a> (<a class="el" href="structIMDHeader.xhtml">IMDHeader</a> *header)</td></tr>
<tr class="memdesc:af9c35bd99b0324b25cccc12105b2f888"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps the endianess of the header. <br/></td></tr>
<tr class="separator:af9c35bd99b0324b25cccc12105b2f888"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a567dc09a11f2cfbcab33289ecf9b3edd"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a567dc09a11f2cfbcab33289ecf9b3edd"></a>
static gmx_int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a567dc09a11f2cfbcab33289ecf9b3edd">imd_read_multiple</a> (<a class="el" href="structIMDSocket.xhtml">IMDSocket</a> *socket, char *datptr, gmx_int32_t toread)</td></tr>
<tr class="memdesc:a567dc09a11f2cfbcab33289ecf9b3edd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads multiple bytes from socket. <br/></td></tr>
<tr class="separator:a567dc09a11f2cfbcab33289ecf9b3edd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6db5f14249f290fade67f8b0eac0938"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad6db5f14249f290fade67f8b0eac0938"></a>
static gmx_int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#ad6db5f14249f290fade67f8b0eac0938">imd_write_multiple</a> (<a class="el" href="structIMDSocket.xhtml">IMDSocket</a> *socket, const char *datptr, gmx_int32_t towrite)</td></tr>
<tr class="memdesc:ad6db5f14249f290fade67f8b0eac0938"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes multiple bytes to socket in analogy to imd_read_multiple. <br/></td></tr>
<tr class="separator:ad6db5f14249f290fade67f8b0eac0938"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a001a4b65c8a0a8715971b345010998d9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a001a4b65c8a0a8715971b345010998d9"></a>
static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a001a4b65c8a0a8715971b345010998d9">imd_handshake</a> (<a class="el" href="structIMDSocket.xhtml">IMDSocket</a> *socket)</td></tr>
<tr class="memdesc:a001a4b65c8a0a8715971b345010998d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handshake with IMD client. <br/></td></tr>
<tr class="separator:a001a4b65c8a0a8715971b345010998d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e39cd51a68ba5c3af2638b11e9a8a6f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9e39cd51a68ba5c3af2638b11e9a8a6f"></a>
static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a9e39cd51a68ba5c3af2638b11e9a8a6f">imd_send_energies</a> (<a class="el" href="structIMDSocket.xhtml">IMDSocket</a> *socket, const <a class="el" href="structIMDEnergyBlock.xhtml">IMDEnergyBlock</a> *energies, char *buffer)</td></tr>
<tr class="memdesc:a9e39cd51a68ba5c3af2638b11e9a8a6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send energies using the energy block and the send buffer. <br/></td></tr>
<tr class="separator:a9e39cd51a68ba5c3af2638b11e9a8a6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61f454a1ee3f86d05be2805392e5f093"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a61f454a1ee3f86d05be2805392e5f093"></a>
static <a class="el" href="imd_8cpp.xhtml#a8989c3f0a5c85cb7126bf6e72bd58258">IMDMessageType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a61f454a1ee3f86d05be2805392e5f093">imd_recv_header</a> (<a class="el" href="structIMDSocket.xhtml">IMDSocket</a> *socket, gmx_int32_t *length)</td></tr>
<tr class="memdesc:a61f454a1ee3f86d05be2805392e5f093"><td class="mdescLeft">&#160;</td><td class="mdescRight">Receive IMD header from socket, sets the length and returns the IMD message. <br/></td></tr>
<tr class="separator:a61f454a1ee3f86d05be2805392e5f093"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc517ad512e416c4f7fcd2da66a922b6"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#afc517ad512e416c4f7fcd2da66a922b6">imd_recv_mdcomm</a> (<a class="el" href="structIMDSocket.xhtml">IMDSocket</a> *socket, gmx_int32_t nforces, gmx_int32_t *forcendx, float *forces)</td></tr>
<tr class="memdesc:afc517ad512e416c4f7fcd2da66a922b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Receive force indices and forces.  <a href="#afc517ad512e416c4f7fcd2da66a922b6">More...</a><br/></td></tr>
<tr class="separator:afc517ad512e416c4f7fcd2da66a922b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ded056a05fd8c2d626848ff1ab9d2c7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a8ded056a05fd8c2d626848ff1ab9d2c7">write_IMDgroup_to_file</a> (<a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bIMD, t_inputrec *ir, <a class="el" href="classt__state.xhtml">t_state</a> *state, gmx_mtop_t *sys, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[])</td></tr>
<tr class="memdesc:a8ded056a05fd8c2d626848ff1ab9d2c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes out the group of atoms selected for interactive manipulation.  <a href="#a8ded056a05fd8c2d626848ff1ab9d2c7">More...</a><br/></td></tr>
<tr class="separator:a8ded056a05fd8c2d626848ff1ab9d2c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a242797cc2d052fad8f9d2d5b6b0443df"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a242797cc2d052fad8f9d2d5b6b0443df">dd_make_local_IMD_atoms</a> (<a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bIMD, gmx_domdec_t *dd, t_IMD *imd)</td></tr>
<tr class="memdesc:a242797cc2d052fad8f9d2d5b6b0443df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Make a selection of the home atoms for the IMD group.  <a href="#a242797cc2d052fad8f9d2d5b6b0443df">More...</a><br/></td></tr>
<tr class="separator:a242797cc2d052fad8f9d2d5b6b0443df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ad175b0e7c01384124be628b9264dcd"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a6ad175b0e7c01384124be628b9264dcd">imd_send_rvecs</a> (<a class="el" href="structIMDSocket.xhtml">IMDSocket</a> *socket, int nat, rvec *x, char *buffer)</td></tr>
<tr class="memdesc:a6ad175b0e7c01384124be628b9264dcd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send positions from rvec.  <a href="#a6ad175b0e7c01384124be628b9264dcd">More...</a><br/></td></tr>
<tr class="separator:a6ad175b0e7c01384124be628b9264dcd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13e1ee568c53a9f54499fb3a68d6ef05"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a13e1ee568c53a9f54499fb3a68d6ef05"></a>
static <a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a13e1ee568c53a9f54499fb3a68d6ef05">imd_create</a> (int imdatoms, int nstimddef, int imdport)</td></tr>
<tr class="memdesc:a13e1ee568c53a9f54499fb3a68d6ef05"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the IMD private data. <br/></td></tr>
<tr class="separator:a13e1ee568c53a9f54499fb3a68d6ef05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2685d2c270b2d1cb0af658eb0d5a560"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa2685d2c270b2d1cb0af658eb0d5a560"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#aa2685d2c270b2d1cb0af658eb0d5a560">imd_prepare_master_socket</a> (<a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *IMDsetup)</td></tr>
<tr class="memdesc:aa2685d2c270b2d1cb0af658eb0d5a560"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepare the socket on the MASTER. <br/></td></tr>
<tr class="separator:aa2685d2c270b2d1cb0af658eb0d5a560"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a242ebae1bdbed8f7b98d31882711ba"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8a242ebae1bdbed8f7b98d31882711ba"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a8a242ebae1bdbed8f7b98d31882711ba">imd_disconnect</a> (<a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *IMDsetup)</td></tr>
<tr class="memdesc:a8a242ebae1bdbed8f7b98d31882711ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disconnect the client. <br/></td></tr>
<tr class="separator:a8a242ebae1bdbed8f7b98d31882711ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f7b8a35f3a1f0840f63a2de52c09003"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a7f7b8a35f3a1f0840f63a2de52c09003">imd_fatal</a> (<a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *IMDsetup, const char *msg)</td></tr>
<tr class="memdesc:a7f7b8a35f3a1f0840f63a2de52c09003"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prints an error message and disconnects the client.  <a href="#a7f7b8a35f3a1f0840f63a2de52c09003">More...</a><br/></td></tr>
<tr class="separator:a7f7b8a35f3a1f0840f63a2de52c09003"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5436cbd4cb74b66dcf145df775b0697"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac5436cbd4cb74b66dcf145df775b0697"></a>
static <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#ac5436cbd4cb74b66dcf145df775b0697">imd_tryconnect</a> (<a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *IMDsetup)</td></tr>
<tr class="memdesc:ac5436cbd4cb74b66dcf145df775b0697"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check whether we got an incoming connection. <br/></td></tr>
<tr class="separator:ac5436cbd4cb74b66dcf145df775b0697"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c8f0a73fd87c3ba33bc06bbd51eead5"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a2c8f0a73fd87c3ba33bc06bbd51eead5">imd_blockconnect</a> (<a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *IMDsetup)</td></tr>
<tr class="memdesc:a2c8f0a73fd87c3ba33bc06bbd51eead5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrap imd_tryconnect in order to make it blocking.  <a href="#a2c8f0a73fd87c3ba33bc06bbd51eead5">More...</a><br/></td></tr>
<tr class="separator:a2c8f0a73fd87c3ba33bc06bbd51eead5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac05bd2d52b6b2ea9ac5d08d3bb204fa9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac05bd2d52b6b2ea9ac5d08d3bb204fa9"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#ac05bd2d52b6b2ea9ac5d08d3bb204fa9">imd_prepare_vmd_Forces</a> (<a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *IMDsetup)</td></tr>
<tr class="memdesc:ac05bd2d52b6b2ea9ac5d08d3bb204fa9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Make sure that our array holding the forces received via IMD is large enough. <br/></td></tr>
<tr class="separator:ac05bd2d52b6b2ea9ac5d08d3bb204fa9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3d330ad1c2d79bcb7531e37904ff2e5"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac3d330ad1c2d79bcb7531e37904ff2e5"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#ac3d330ad1c2d79bcb7531e37904ff2e5">imd_read_vmd_Forces</a> (<a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *IMDsetup)</td></tr>
<tr class="memdesc:ac3d330ad1c2d79bcb7531e37904ff2e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads forces received via IMD. <br/></td></tr>
<tr class="separator:ac3d330ad1c2d79bcb7531e37904ff2e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f8f2d401997550980b6d62820a92c41"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3f8f2d401997550980b6d62820a92c41"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a3f8f2d401997550980b6d62820a92c41">imd_prepare_MD_Forces</a> (<a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *IMDsetup)</td></tr>
<tr class="memdesc:a3f8f2d401997550980b6d62820a92c41"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepares the MD force arrays. <br/></td></tr>
<tr class="separator:a3f8f2d401997550980b6d62820a92c41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acef9a50d0c88969aa8cc58f6986147e3"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#acef9a50d0c88969aa8cc58f6986147e3">imd_copyto_MD_Forces</a> (<a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *IMDsetup)</td></tr>
<tr class="memdesc:acef9a50d0c88969aa8cc58f6986147e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy IMD forces to MD forces.  <a href="#acef9a50d0c88969aa8cc58f6986147e3">More...</a><br/></td></tr>
<tr class="separator:acef9a50d0c88969aa8cc58f6986147e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf95395b0a60c36db863d5a5664a751a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="abf95395b0a60c36db863d5a5664a751a"></a>
static <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#abf95395b0a60c36db863d5a5664a751a">bForcesChanged</a> (<a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *IMDsetup)</td></tr>
<tr class="memdesc:abf95395b0a60c36db863d5a5664a751a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return TRUE if any of the forces or indices changed. <br/></td></tr>
<tr class="separator:abf95395b0a60c36db863d5a5664a751a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57599f35cd4fc68cd659b87c11be5cec"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a57599f35cd4fc68cd659b87c11be5cec"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a57599f35cd4fc68cd659b87c11be5cec">keep_old_values</a> (<a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *IMDsetup)</td></tr>
<tr class="memdesc:a57599f35cd4fc68cd659b87c11be5cec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fill the old_f_ind and old_forces arrays with the new, old values. <br/></td></tr>
<tr class="separator:a57599f35cd4fc68cd659b87c11be5cec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a544269586af1c7b5ce2bb2b13fae58ba"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a544269586af1c7b5ce2bb2b13fae58ba"></a>
static <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a544269586af1c7b5ce2bb2b13fae58ba">rvecs_differ</a> (const rvec v1, const rvec v2)</td></tr>
<tr class="memdesc:a544269586af1c7b5ce2bb2b13fae58ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns TRUE if any component of the two rvecs differs. <br/></td></tr>
<tr class="separator:a544269586af1c7b5ce2bb2b13fae58ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbae681a1df5251675f030429a9993b4"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#adbae681a1df5251675f030429a9993b4">output_imd_forces</a> (t_inputrec *ir, double time)</td></tr>
<tr class="memdesc:adbae681a1df5251675f030429a9993b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write the applied pull forces to logfile.  <a href="#adbae681a1df5251675f030429a9993b4">More...</a><br/></td></tr>
<tr class="separator:adbae681a1df5251675f030429a9993b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2490ab462131d59189fb1dccfc0719e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad2490ab462131d59189fb1dccfc0719e"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#ad2490ab462131d59189fb1dccfc0719e">imd_sync_nodes</a> (t_inputrec *ir, t_commrec *cr, double t)</td></tr>
<tr class="memdesc:ad2490ab462131d59189fb1dccfc0719e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Synchronize the nodes. <br/></td></tr>
<tr class="separator:ad2490ab462131d59189fb1dccfc0719e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa88012214ba44474e4d1dbd862fea6a6"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa88012214ba44474e4d1dbd862fea6a6"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#aa88012214ba44474e4d1dbd862fea6a6">imd_readcommand</a> (<a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *IMDsetup)</td></tr>
<tr class="memdesc:aa88012214ba44474e4d1dbd862fea6a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads header from the client and decides what to do. <br/></td></tr>
<tr class="separator:aa88012214ba44474e4d1dbd862fea6a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b4e723366d8d36a37326aa8c8fa04dc"><td class="memItemLeft" align="right" valign="top">static FILE *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a3b4e723366d8d36a37326aa8c8fa04dc">open_imd_out</a> (const char *fn, <a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *IMDsetup, int nat_total, const gmx_output_env_t *oenv, const <a class="el" href="structContinuationOptions.xhtml">ContinuationOptions</a> &amp;continuationOptions)</td></tr>
<tr class="memdesc:a3b4e723366d8d36a37326aa8c8fa04dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Open IMD output file and write header information.  <a href="#a3b4e723366d8d36a37326aa8c8fa04dc">More...</a><br/></td></tr>
<tr class="separator:a3b4e723366d8d36a37326aa8c8fa04dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a430d90b2f13df735b9476c4b4c3967f5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a430d90b2f13df735b9476c4b4c3967f5">IMD_finalize</a> (<a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bIMD, t_IMD *imd)</td></tr>
<tr class="memdesc:a430d90b2f13df735b9476c4b4c3967f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finalize IMD and do some cleaning up.  <a href="#a430d90b2f13df735b9476c4b4c3967f5">More...</a><br/></td></tr>
<tr class="separator:a430d90b2f13df735b9476c4b4c3967f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c9e243483d0f42779fab3177c63372a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8c9e243483d0f42779fab3177c63372a"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a8c9e243483d0f42779fab3177c63372a">init_imd_prepare_mols_in_imdgroup</a> (<a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *IMDsetup, gmx_mtop_t *top_global)</td></tr>
<tr class="memdesc:a8c9e243483d0f42779fab3177c63372a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates the molecule start-end position array of molecules in the IMD group. <br/></td></tr>
<tr class="separator:a8c9e243483d0f42779fab3177c63372a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb039e556ac32f42fabead5d2e29ff14"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="afb039e556ac32f42fabead5d2e29ff14"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#afb039e556ac32f42fabead5d2e29ff14">shift_positions</a> (matrix box, rvec x[], ivec is, int nr)</td></tr>
<tr class="memdesc:afb039e556ac32f42fabead5d2e29ff14"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copied and modified from groupcoord.c shift_positions_group(). <br/></td></tr>
<tr class="separator:afb039e556ac32f42fabead5d2e29ff14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab16a6ca671ce13381981a055281561eb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab16a6ca671ce13381981a055281561eb"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#ab16a6ca671ce13381981a055281561eb">imd_remove_molshifts</a> (<a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *IMDsetup, matrix box)</td></tr>
<tr class="memdesc:ab16a6ca671ce13381981a055281561eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes shifts of molecules diffused outside of the box. <br/></td></tr>
<tr class="separator:ab16a6ca671ce13381981a055281561eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af347f1c183beb36ae82131e4d4efd6e0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af347f1c183beb36ae82131e4d4efd6e0"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#af347f1c183beb36ae82131e4d4efd6e0">init_imd_prepare_for_x_assembly</a> (t_commrec *cr, rvec x[], <a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *IMDsetup)</td></tr>
<tr class="memdesc:af347f1c183beb36ae82131e4d4efd6e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize arrays used to assemble the positions from the other nodes. <br/></td></tr>
<tr class="separator:af347f1c183beb36ae82131e4d4efd6e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a956e726e0a1c8ff447253c1217176cab"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a956e726e0a1c8ff447253c1217176cab"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a956e726e0a1c8ff447253c1217176cab">imd_check_integrator_parallel</a> (t_inputrec *ir, t_commrec *cr)</td></tr>
<tr class="memdesc:a956e726e0a1c8ff447253c1217176cab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check for non-working integrator / parallel options. <br/></td></tr>
<tr class="separator:a956e726e0a1c8ff447253c1217176cab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad18d80d7aade3a8253e65a9354843069"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#ad18d80d7aade3a8253e65a9354843069">init_IMD</a> (t_inputrec *ir, t_commrec *cr, gmx_mtop_t *top_global, FILE *fplog, int defnstimd, rvec x[], int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[], const gmx_output_env_t *oenv, const <a class="el" href="structMdrunOptions.xhtml">MdrunOptions</a> &amp;mdrunOptions)</td></tr>
<tr class="memdesc:ad18d80d7aade3a8253e65a9354843069"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes (or disables) IMD.  <a href="#ad18d80d7aade3a8253e65a9354843069">More...</a><br/></td></tr>
<tr class="separator:ad18d80d7aade3a8253e65a9354843069"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e14923fdb4755f6482e542fcea49da6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a0e14923fdb4755f6482e542fcea49da6">do_IMD</a> (<a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bIMD, gmx_int64_t step, t_commrec *cr, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bNS, matrix box, rvec x[], t_inputrec *ir, double t, gmx_wallcycle *wcycle)</td></tr>
<tr class="memdesc:a0e14923fdb4755f6482e542fcea49da6"><td class="mdescLeft">&#160;</td><td class="mdescRight">IMD required in this time step? Also checks for new IMD connection and syncs the nodes.  <a href="#a0e14923fdb4755f6482e542fcea49da6">More...</a><br/></td></tr>
<tr class="separator:a0e14923fdb4755f6482e542fcea49da6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac82fa9858abb2431780d17c114773ed5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#ac82fa9858abb2431780d17c114773ed5">IMD_fill_energy_record</a> (<a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bIMD, t_IMD *imd, gmx_enerdata_t *enerd, gmx_int64_t step, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bHaveNewEnergies)</td></tr>
<tr class="memdesc:ac82fa9858abb2431780d17c114773ed5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy energies and convert to float from enerdata to the IMD energy record.  <a href="#ac82fa9858abb2431780d17c114773ed5">More...</a><br/></td></tr>
<tr class="separator:ac82fa9858abb2431780d17c114773ed5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa544913d1f33471af56c10f5322c16a6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#aa544913d1f33471af56c10f5322c16a6">IMD_send_positions</a> (t_IMD *imd)</td></tr>
<tr class="memdesc:aa544913d1f33471af56c10f5322c16a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send positions and energies to the client.  <a href="#aa544913d1f33471af56c10f5322c16a6">More...</a><br/></td></tr>
<tr class="separator:aa544913d1f33471af56c10f5322c16a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74c08f7aade311825ad4ee58330afd9c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a74c08f7aade311825ad4ee58330afd9c">IMD_prep_energies_send_positions</a> (<a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bIMD, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bIMDstep, t_IMD *imd, gmx_enerdata_t *enerd, gmx_int64_t step, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bHaveNewEnergies, gmx_wallcycle *wcycle)</td></tr>
<tr class="memdesc:a74c08f7aade311825ad4ee58330afd9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls IMD_prepare_energies() and then <a class="el" href="imd_8cpp.xhtml#aa544913d1f33471af56c10f5322c16a6" title="Send positions and energies to the client. ">IMD_send_positions()</a>.  <a href="#a74c08f7aade311825ad4ee58330afd9c">More...</a><br/></td></tr>
<tr class="separator:a74c08f7aade311825ad4ee58330afd9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b1a8995da8e5541994f60e8da36cf83"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a0b1a8995da8e5541994f60e8da36cf83">IMD_get_step</a> (<a class="el" href="structt__gmx__IMD.xhtml">t_gmx_IMD</a> *IMDsetup)</td></tr>
<tr class="memdesc:a0b1a8995da8e5541994f60e8da36cf83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the IMD update frequency.  <a href="#a0b1a8995da8e5541994f60e8da36cf83">More...</a><br/></td></tr>
<tr class="separator:a0b1a8995da8e5541994f60e8da36cf83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7e4add33dc345210142a8d0c57779f3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#ae7e4add33dc345210142a8d0c57779f3">IMD_apply_forces</a> (<a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bIMD, t_IMD *imd, t_commrec *cr, rvec *f, gmx_wallcycle *wcycle)</td></tr>
<tr class="memdesc:ae7e4add33dc345210142a8d0c57779f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add external forces from a running interactive molecular dynamics session.  <a href="#ae7e4add33dc345210142a8d0c57779f3">More...</a><br/></td></tr>
<tr class="separator:ae7e4add33dc345210142a8d0c57779f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a27660ef4ae52f6152c406e59b3993ed1"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="imd_8cpp.xhtml#a27660ef4ae52f6152c406e59b3993ed1">eIMDType_names</a> [<a class="el" href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1ba1fdeb1fce4ce51229f260660a4cdcb56">IMD_NR</a>+1]</td></tr>
<tr class="memdesc:a27660ef4ae52f6152c406e59b3993ed1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Names of the IMDType for error messages.  <a href="#a27660ef4ae52f6152c406e59b3993ed1">More...</a><br/></td></tr>
<tr class="separator:a27660ef4ae52f6152c406e59b3993ed1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a class="anchor" id="a8989c3f0a5c85cb7126bf6e72bd58258"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef enum <a class="el" href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1b">IMDType_t</a>  <a class="el" href="imd_8cpp.xhtml#a8989c3f0a5c85cb7126bf6e72bd58258">IMDMessageType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enum for types of IMD messages. </p>
<p>We use the same records as the NAMD/VMD IMD implementation. </p>

</div>
</div>
<a class="anchor" id="a93ec6165f7e636336ee6f4e48e202b08"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structt__gmx__IMD.xhtml">t_gmx_IMD</a>  <a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>IMD (interactive molecular dynamics) main data structure. </p>
<p>Contains private IMD data </p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a class="anchor" id="af5cb6d7737e9bb4c9747225aea161f1b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1b">IMDType_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enum for types of IMD messages. </p>
<p>We use the same records as the NAMD/VMD IMD implementation. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="af5cb6d7737e9bb4c9747225aea161f1baff432ca97d7b28c3281f706fa6cafbc4"></a>IMD_DISCONNECT</em>&nbsp;</td><td class="fielddoc">
<p>client disconnect </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="af5cb6d7737e9bb4c9747225aea161f1bac993f99d21082fd450c4b2de1e05063f"></a>IMD_ENERGIES</em>&nbsp;</td><td class="fielddoc">
<p>energy data </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="af5cb6d7737e9bb4c9747225aea161f1ba166d65a305fff233066ba2f83d79460c"></a>IMD_FCOORDS</em>&nbsp;</td><td class="fielddoc">
<p>atomic coordinates </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="af5cb6d7737e9bb4c9747225aea161f1ba958e9f69f993ec05e7d04e1af7013406"></a>IMD_GO</em>&nbsp;</td><td class="fielddoc">
<p>start command for the simulation </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="af5cb6d7737e9bb4c9747225aea161f1ba17f229cfffe9e48eb733cd1e0574dc47"></a>IMD_HANDSHAKE</em>&nbsp;</td><td class="fielddoc">
<p>handshake to determine little/big endianness </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="af5cb6d7737e9bb4c9747225aea161f1ba4855c30bdc6943df4691f70338ca7c89"></a>IMD_KILL</em>&nbsp;</td><td class="fielddoc">
<p>terminates the simulation </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="af5cb6d7737e9bb4c9747225aea161f1ba304c8e808c2e56731f6ab17de4d8e643"></a>IMD_MDCOMM</em>&nbsp;</td><td class="fielddoc">
<p>force data </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="af5cb6d7737e9bb4c9747225aea161f1ba0d684f3e2480b9d7f92210f565664895"></a>IMD_PAUSE</em>&nbsp;</td><td class="fielddoc">
<p>pauses the simulation </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="af5cb6d7737e9bb4c9747225aea161f1ba4e71e0f5e6758b099db5cf51b527c1ca"></a>IMD_TRATE</em>&nbsp;</td><td class="fielddoc">
<p>sets the IMD transmission and processing rate </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="af5cb6d7737e9bb4c9747225aea161f1bad7f2af819f4e05f0e6e4415a51846697"></a>IMD_IOERROR</em>&nbsp;</td><td class="fielddoc">
<p>I/O error. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="af5cb6d7737e9bb4c9747225aea161f1ba1fdeb1fce4ce51229f260660a4cdcb56"></a>IMD_NR</em>&nbsp;</td><td class="fielddoc">
<p>number of entries </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a242797cc2d052fad8f9d2d5b6b0443df"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void dd_make_local_IMD_atoms </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bIMD</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_domdec_t *&#160;</td>
          <td class="paramname"><em>dd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_IMD *&#160;</td>
          <td class="paramname"><em>imd</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Make a selection of the home atoms for the IMD group. </p>
<p>Should be called at every domain decomposition. Each node checks which of the atoms from "ind" are local and puts its local atom numbers into the "ind_local" array. Furthermore, in "xa_ind" it is stored at which position each local atom belongs in the assembled/collective array, so that on the master node all positions can be merged into the assembled array correctly.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bIMD</td><td>Only springs into action if bIMD is TRUE. Otherwise returns directly. </td></tr>
    <tr><td class="paramname">dd</td><td>Structure containing domain decomposition data. </td></tr>
    <tr><td class="paramname">imd</td><td>The IMD group of atoms. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0e14923fdb4755f6482e542fcea49da6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> do_IMD </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bIMD</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_int64_t&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bNS</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">matrix&#160;</td>
          <td class="paramname"><em>box</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>x</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_inputrec *&#160;</td>
          <td class="paramname"><em>ir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>t</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle *&#160;</td>
          <td class="paramname"><em>wcycle</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>IMD required in this time step? Also checks for new IMD connection and syncs the nodes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bIMD</td><td>Only springs into action if bIMD is TRUE. Otherwise returns directly. </td></tr>
    <tr><td class="paramname">step</td><td>The time step. </td></tr>
    <tr><td class="paramname">cr</td><td>Information structure for MPI communication. </td></tr>
    <tr><td class="paramname">bNS</td><td>Is this a neighbor searching step? </td></tr>
    <tr><td class="paramname">box</td><td>The simulation box. </td></tr>
    <tr><td class="paramname">x</td><td>The local atomic positions on this node. </td></tr>
    <tr><td class="paramname">ir</td><td>The inputrec structure containing the MD input parameters including a pointer to the IMD data structure. </td></tr>
    <tr><td class="paramname">t</td><td>The time. </td></tr>
    <tr><td class="paramname">wcycle</td><td>Count wallcycles of IMD routines for diagnostic output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Whether or not we have to do IMD communication at this step. </dd></dl>

</div>
</div>
<a class="anchor" id="ae7e4add33dc345210142a8d0c57779f3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IMD_apply_forces </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bIMD</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_IMD *&#160;</td>
          <td class="paramname"><em>imd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec *&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle *&#160;</td>
          <td class="paramname"><em>wcycle</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add external forces from a running interactive molecular dynamics session. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bIMD</td><td>Returns directly if bIMD is FALSE. </td></tr>
    <tr><td class="paramname">imd</td><td>The IMD data structure. </td></tr>
    <tr><td class="paramname">cr</td><td>Information structure for MPI communication. </td></tr>
    <tr><td class="paramname">f</td><td>The forces. </td></tr>
    <tr><td class="paramname">wcycle</td><td>Count wallcycles of IMD routines for diagnostic output. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2c8f0a73fd87c3ba33bc06bbd51eead5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void imd_blockconnect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *&#160;</td>
          <td class="paramname"><em>IMDsetup</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Wrap imd_tryconnect in order to make it blocking. </p>
<p>Used when the simulation should wait for an incoming connection. </p>

</div>
</div>
<a class="anchor" id="acef9a50d0c88969aa8cc58f6986147e3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void imd_copyto_MD_Forces </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *&#160;</td>
          <td class="paramname"><em>IMDsetup</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy IMD forces to MD forces. </p>
<p>Do conversion from Cal-&gt;Joule and from Angstrom -&gt; nm and from a pointer array to arrays to 3*N array. </p>

</div>
</div>
<a class="anchor" id="a7f7b8a35f3a1f0840f63a2de52c09003"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void imd_fatal </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *&#160;</td>
          <td class="paramname"><em>IMDsetup</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>msg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prints an error message and disconnects the client. </p>
<p>Does not terminate mdrun! </p>

</div>
</div>
<a class="anchor" id="ac82fa9858abb2431780d17c114773ed5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IMD_fill_energy_record </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bIMD</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_IMD *&#160;</td>
          <td class="paramname"><em>imd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_enerdata_t *&#160;</td>
          <td class="paramname"><em>enerd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_int64_t&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bHaveNewEnergies</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy energies and convert to float from enerdata to the IMD energy record. </p>
<p>We do no conversion, so units in client are SI!</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bIMD</td><td>Only springs into action if bIMD is TRUE. Otherwise returns directly. </td></tr>
    <tr><td class="paramname">imd</td><td>The IMD data structure. </td></tr>
    <tr><td class="paramname">enerd</td><td>Contains the GROMACS energies for the different interaction types. </td></tr>
    <tr><td class="paramname">step</td><td>The time step. </td></tr>
    <tr><td class="paramname">bHaveNewEnergies</td><td>Only copy energies if we have done global summing of them before. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a430d90b2f13df735b9476c4b4c3967f5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IMD_finalize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bIMD</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_IMD *&#160;</td>
          <td class="paramname"><em>imd</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Finalize IMD and do some cleaning up. </p>
<p>Currently, IMD finalize closes the force output file.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bIMD</td><td>Returns directly if bIMD is FALSE. </td></tr>
    <tr><td class="paramname">imd</td><td>The IMD data structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0b1a8995da8e5541994f60e8da36cf83"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int IMD_get_step </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structt__gmx__IMD.xhtml">t_gmx_IMD</a> *&#160;</td>
          <td class="paramname"><em>IMDsetup</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the IMD update frequency. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">IMDsetup</td><td>Opaque pointer to IMD private data.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The current IMD update/communication frequency </dd></dl>

</div>
</div>
<a class="anchor" id="a74c08f7aade311825ad4ee58330afd9c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IMD_prep_energies_send_positions </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bIMD</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bIMDstep</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_IMD *&#160;</td>
          <td class="paramname"><em>imd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_enerdata_t *&#160;</td>
          <td class="paramname"><em>enerd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_int64_t&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bHaveNewEnergies</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle *&#160;</td>
          <td class="paramname"><em>wcycle</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calls IMD_prepare_energies() and then <a class="el" href="imd_8cpp.xhtml#aa544913d1f33471af56c10f5322c16a6" title="Send positions and energies to the client. ">IMD_send_positions()</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bIMD</td><td>Returns directly if bIMD is FALSE. </td></tr>
    <tr><td class="paramname">bIMDstep</td><td>If true, transfer the positions. Otherwise just update the time step and potentially the energy record. </td></tr>
    <tr><td class="paramname">imd</td><td>The IMD data structure. </td></tr>
    <tr><td class="paramname">enerd</td><td>Contains the GROMACS energies for the different interaction types. </td></tr>
    <tr><td class="paramname">step</td><td>The time step. </td></tr>
    <tr><td class="paramname">bHaveNewEnergies</td><td>Only update the energy record if we have done global summing of the energies. </td></tr>
    <tr><td class="paramname">wcycle</td><td>Count wallcycles of IMD routines for diagnostic output. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afc517ad512e416c4f7fcd2da66a922b6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int imd_recv_mdcomm </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structIMDSocket.xhtml">IMDSocket</a> *&#160;</td>
          <td class="paramname"><em>socket</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_int32_t&#160;</td>
          <td class="paramname"><em>nforces</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_int32_t *&#160;</td>
          <td class="paramname"><em>forcendx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>forces</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Receive force indices and forces. </p>
<p>The number of forces was previously communicated via the header. </p>

</div>
</div>
<a class="anchor" id="aa544913d1f33471af56c10f5322c16a6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IMD_send_positions </td>
          <td>(</td>
          <td class="paramtype">t_IMD *&#160;</td>
          <td class="paramname"><em>imd</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send positions and energies to the client. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">imd</td><td>The IMD data structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6ad175b0e7c01384124be628b9264dcd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int imd_send_rvecs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structIMDSocket.xhtml">IMDSocket</a> *&#160;</td>
          <td class="paramname"><em>socket</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buffer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Send positions from rvec. </p>
<p>We need a separate send buffer and conversion to Angstrom. </p>

</div>
</div>
<a class="anchor" id="ad18d80d7aade3a8253e65a9354843069"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init_IMD </td>
          <td>(</td>
          <td class="paramtype">t_inputrec *&#160;</td>
          <td class="paramname"><em>ir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_mtop_t *&#160;</td>
          <td class="paramname"><em>top_global</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fplog</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>defnstimd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>x</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nfile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structt__filenm.xhtml">t_filenm</a>&#160;</td>
          <td class="paramname"><em>fnm</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_output_env_t *&#160;</td>
          <td class="paramname"><em>oenv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structMdrunOptions.xhtml">MdrunOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>mdrunOptions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes (or disables) IMD. </p>
<p>This function is called before the main MD loop over time steps, and it must be called prior to any call to dd_partition_system if in parallel.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ir</td><td>The inputrec structure containing the MD input parameters including a pointer to the IMD data structure. </td></tr>
    <tr><td class="paramname">cr</td><td>Information structure for MPI communication. </td></tr>
    <tr><td class="paramname">top_global</td><td>The topology of the whole system. </td></tr>
    <tr><td class="paramname">fplog</td><td>General output file, normally md.log. </td></tr>
    <tr><td class="paramname">defnstimd</td><td>Default IMD update (=communication) frequency. </td></tr>
    <tr><td class="paramname">x</td><td>The starting positions of the atoms. </td></tr>
    <tr><td class="paramname">nfile</td><td>Number of files. </td></tr>
    <tr><td class="paramname">fnm</td><td>Struct containing file names etc. </td></tr>
    <tr><td class="paramname">oenv</td><td>Output options. </td></tr>
    <tr><td class="paramname">mdrunOptions</td><td>Options for mdrun. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a3b4e723366d8d36a37326aa8c8fa04dc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static FILE* open_imd_out </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="imd_8cpp.xhtml#a93ec6165f7e636336ee6f4e48e202b08">t_gmx_IMD_setup</a> *&#160;</td>
          <td class="paramname"><em>IMDsetup</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nat_total</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_output_env_t *&#160;</td>
          <td class="paramname"><em>oenv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structContinuationOptions.xhtml">ContinuationOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>continuationOptions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Open IMD output file and write header information. </p>
<p>Call on master only. </p>

</div>
</div>
<a class="anchor" id="adbae681a1df5251675f030429a9993b4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void output_imd_forces </td>
          <td>(</td>
          <td class="paramtype">t_inputrec *&#160;</td>
          <td class="paramname"><em>ir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>time</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Write the applied pull forces to logfile. </p>
<p>Call on master only! </p>

</div>
</div>
<a class="anchor" id="a8ded056a05fd8c2d626848ff1ab9d2c7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void write_IMDgroup_to_file </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bIMD</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_inputrec *&#160;</td>
          <td class="paramname"><em>ir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classt__state.xhtml">t_state</a> *&#160;</td>
          <td class="paramname"><em>state</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_mtop_t *&#160;</td>
          <td class="paramname"><em>sys</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nfile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structt__filenm.xhtml">t_filenm</a>&#160;</td>
          <td class="paramname"><em>fnm</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Writes out the group of atoms selected for interactive manipulation. </p>
<p>Called by grompp. The resulting file has to be read in by VMD if one wants it to connect to mdrun.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bIMD</td><td>Only springs into action if bIMD is TRUE. Otherwise returns directly. </td></tr>
    <tr><td class="paramname">ir</td><td>Structure containing MD input parameters, among those the IMD data structure. </td></tr>
    <tr><td class="paramname">state</td><td>The current state of the MD system. </td></tr>
    <tr><td class="paramname">sys</td><td>The global, complete system topology. </td></tr>
    <tr><td class="paramname">nfile</td><td>Number of files. </td></tr>
    <tr><td class="paramname">fnm</td><td>Filename struct. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a class="anchor" id="a27660ef4ae52f6152c406e59b3993ed1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* eIMDType_names[<a class="el" href="imd_8cpp.xhtml#af5cb6d7737e9bb4c9747225aea161f1ba1fdeb1fce4ce51229f260660a4cdcb56">IMD_NR</a>+1]</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {</div>
<div class="line">    <span class="stringliteral">&quot;IMD_DISCONNECT&quot;</span>,</div>
<div class="line">    <span class="stringliteral">&quot;IMD_ENERGIES&quot;</span>,</div>
<div class="line">    <span class="stringliteral">&quot;IMD_FCOORDS&quot;</span>,</div>
<div class="line">    <span class="stringliteral">&quot;IMD_GO&quot;</span>,</div>
<div class="line">    <span class="stringliteral">&quot;IMD_HANDSHAKE&quot;</span>,</div>
<div class="line">    <span class="stringliteral">&quot;IMD_KILL&quot;</span>,</div>
<div class="line">    <span class="stringliteral">&quot;IMD_MDCOMM&quot;</span>,</div>
<div class="line">    <span class="stringliteral">&quot;IMD_PAUSE&quot;</span>,</div>
<div class="line">    <span class="stringliteral">&quot;IMD_TRATE&quot;</span>,</div>
<div class="line">    <span class="stringliteral">&quot;IMD_IOERROR&quot;</span>,</div>
<div class="line">    <span class="keyword">nullptr</span></div>
<div class="line">}</div>
</div><!-- fragment -->
<p>Names of the IMDType for error messages. </p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:57:16 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
