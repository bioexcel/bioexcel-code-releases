<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/ewald/pme-gpu-internal.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_8a21c46af9718d1f610eb513153099d7.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a46192700e9e8ed44c648f0a55ee9a53.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_69ef3b2caaf4d875cb2a3215a087d3ea.xhtml">ewald</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">pme-gpu-internal.h File Reference<div class="ingroups"><a class="el" href="group__module__ewald.xhtml">Ewald-family treatments of long-ranged forces</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="fft_8h.xhtml">gromacs/fft/fft.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/gpu_utils/gpu_macros.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="arrayref_8h.xhtml">gromacs/utility/arrayref.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="pme-gpu-types_8h.xhtml">pme-gpu-types.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for pme-gpu-internal.h:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="pme-gpu-internal_8h__incl.svg" width="2150" height="530"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><div class="textblock"><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> This graph shows which files directly or indirectly include this file:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="pme-gpu-internal_8h__dep__incl.svg" width="1047" height="231"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>This file contains internal function definitions for performing the PME calculations on GPU. These are not meant to be exposed outside of the PME GPU code. As of now, their bodies are still in the common <a class="el" href="pme-gpu_8cpp.xhtml" title="Implements high-level PME GPU functions which do not require GPU framework-specific code...">pme-gpu.cpp</a> files. </p>
<dl class="section author"><dt>Author</dt><dd>Aleksei Iupinov <a href="#" onclick="location.href='mai'+'lto:'+'a.y'+'up'+'ino'+'v@'+'gma'+'il'+'.co'+'m'; return false;">a.yup<span style="display: none;">.nosp@m.</span>inov<span style="display: none;">.nosp@m.</span>@gmai<span style="display: none;">.nosp@m.</span>l.co<span style="display: none;">.nosp@m.</span>m</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a0f754eebaa9461af5829e9d32c8156cb"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a0f754eebaa9461af5829e9d32c8156cb">PmeSplineDataType</a> { <b>Values</b>, 
<b>Derivatives</b>
 }</td></tr>
<tr class="memdesc:a0f754eebaa9461af5829e9d32c8156cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of spline data. <br/></td></tr>
<tr class="separator:a0f754eebaa9461af5829e9d32c8156cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68be0dbcc0dc3960694fc024c5996d79"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a68be0dbcc0dc3960694fc024c5996d79">GridOrdering</a> { <b>YZX</b>, 
<b>XYZ</b>
 }</td></tr>
<tr class="memdesc:a68be0dbcc0dc3960694fc024c5996d79"><td class="mdescLeft">&#160;</td><td class="mdescRight">PME grid dimension ordering (from major to minor) <br/></td></tr>
<tr class="separator:a68be0dbcc0dc3960694fc024c5996d79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e828a9e22c6ef7676e82bbf2fbd2dec"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a8e828a9e22c6ef7676e82bbf2fbd2dec">PmeLayoutTransform</a> { <b>GpuToHost</b>, 
<b>HostToGpu</b>
 }</td></tr>
<tr class="memdesc:a8e828a9e22c6ef7676e82bbf2fbd2dec"><td class="mdescLeft">&#160;</td><td class="mdescRight">A binary enum for spline data layout transformation. <br/></td></tr>
<tr class="separator:a8e828a9e22c6ef7676e82bbf2fbd2dec"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a05193e01dc0479ad49401b1732d86639"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a05193e01dc0479ad49401b1732d86639">pme_gpu_get_atom_data_alignment</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a05193e01dc0479ad49401b1732d86639"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of atoms per chunk in the atom charges/coordinates data layout. Depends on CUDA-specific block sizes, needed for the atom data padding.  <a href="#a05193e01dc0479ad49401b1732d86639">More...</a><br/></td></tr>
<tr class="separator:a05193e01dc0479ad49401b1732d86639"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad1216680366effd5fd9a016f8abd21b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#aad1216680366effd5fd9a016f8abd21b">pme_gpu_get_atoms_per_warp</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:aad1216680366effd5fd9a016f8abd21b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of atoms per chunk in the atom spline theta/dtheta data layout.  <a href="#aad1216680366effd5fd9a016f8abd21b">More...</a><br/></td></tr>
<tr class="separator:aad1216680366effd5fd9a016f8abd21b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af988b8256d624cfccf2fa2e4d0f7718f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#af988b8256d624cfccf2fa2e4d0f7718f">pme_gpu_synchronize</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:af988b8256d624cfccf2fa2e4d0f7718f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Synchronizes the current computation, waiting for the GPU kernels/transfers to finish.  <a href="#af988b8256d624cfccf2fa2e4d0f7718f">More...</a><br/></td></tr>
<tr class="separator:af988b8256d624cfccf2fa2e4d0f7718f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedb575cbd90b3246bc7f144fbbf8354a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#aedb575cbd90b3246bc7f144fbbf8354a">pme_gpu_alloc_energy_virial</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:aedb575cbd90b3246bc7f144fbbf8354a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates the fixed size energy and virial buffer both on GPU and CPU.  <a href="#aedb575cbd90b3246bc7f144fbbf8354a">More...</a><br/></td></tr>
<tr class="separator:aedb575cbd90b3246bc7f144fbbf8354a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf81c931d4564000972c2c860ac5e64b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#abf81c931d4564000972c2c860ac5e64b">pme_gpu_free_energy_virial</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:abf81c931d4564000972c2c860ac5e64b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees the energy and virial memory both on GPU and CPU.  <a href="#abf81c931d4564000972c2c860ac5e64b">More...</a><br/></td></tr>
<tr class="separator:abf81c931d4564000972c2c860ac5e64b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab88677e1a5388251916282db3659dac6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#ab88677e1a5388251916282db3659dac6">pme_gpu_clear_energy_virial</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:ab88677e1a5388251916282db3659dac6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears the energy and virial memory on GPU with 0. Should be called at the end of PME computation which returned energy/virial.  <a href="#ab88677e1a5388251916282db3659dac6">More...</a><br/></td></tr>
<tr class="separator:ab88677e1a5388251916282db3659dac6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a226b7e3d43ba272c1a11886f08598187"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a226b7e3d43ba272c1a11886f08598187">pme_gpu_realloc_and_copy_bspline_values</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a226b7e3d43ba272c1a11886f08598187"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reallocates and copies the pre-computed B-spline values to the GPU.  <a href="#a226b7e3d43ba272c1a11886f08598187">More...</a><br/></td></tr>
<tr class="separator:a226b7e3d43ba272c1a11886f08598187"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc35829e3a2514ca9d0c567efe46d814"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#acc35829e3a2514ca9d0c567efe46d814">pme_gpu_free_bspline_values</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:acc35829e3a2514ca9d0c567efe46d814"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees the pre-computed B-spline values on the GPU (and the transfer CPU buffers).  <a href="#acc35829e3a2514ca9d0c567efe46d814">More...</a><br/></td></tr>
<tr class="separator:acc35829e3a2514ca9d0c567efe46d814"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5272eaf88e7b1110676df6cf6acc95e3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a5272eaf88e7b1110676df6cf6acc95e3">pme_gpu_realloc_forces</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a5272eaf88e7b1110676df6cf6acc95e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reallocates the GPU buffer for the PME forces.  <a href="#a5272eaf88e7b1110676df6cf6acc95e3">More...</a><br/></td></tr>
<tr class="separator:a5272eaf88e7b1110676df6cf6acc95e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59705d17c95ae26dcf4e5c9d3cad7686"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a59705d17c95ae26dcf4e5c9d3cad7686">pme_gpu_free_forces</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a59705d17c95ae26dcf4e5c9d3cad7686"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees the GPU buffer for the PME forces.  <a href="#a59705d17c95ae26dcf4e5c9d3cad7686">More...</a><br/></td></tr>
<tr class="separator:a59705d17c95ae26dcf4e5c9d3cad7686"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5db280d2fe0d5ea1ab7784b55d7b5326"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a5db280d2fe0d5ea1ab7784b55d7b5326">pme_gpu_copy_input_forces</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a5db280d2fe0d5ea1ab7784b55d7b5326"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the forces from the CPU buffer to the GPU (to reduce them with the PME GPU gathered forces). To be called e.g. after the bonded calculations.  <a href="#a5db280d2fe0d5ea1ab7784b55d7b5326">More...</a><br/></td></tr>
<tr class="separator:a5db280d2fe0d5ea1ab7784b55d7b5326"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6aa284d4700ed885ff6fbcf30028edec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a6aa284d4700ed885ff6fbcf30028edec">pme_gpu_copy_output_forces</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a6aa284d4700ed885ff6fbcf30028edec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the forces from the GPU to the CPU buffer. To be called after the gathering stage.  <a href="#a6aa284d4700ed885ff6fbcf30028edec">More...</a><br/></td></tr>
<tr class="separator:a6aa284d4700ed885ff6fbcf30028edec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aded614c4f44ad3c29689336a46f06c00"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#aded614c4f44ad3c29689336a46f06c00">pme_gpu_stream_query</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:aded614c4f44ad3c29689336a46f06c00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether work in the PME GPU stream has completed.  <a href="#aded614c4f44ad3c29689336a46f06c00">More...</a><br/></td></tr>
<tr class="separator:aded614c4f44ad3c29689336a46f06c00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73a5947c0ad0cb08d33b954fb3a5f503"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a73a5947c0ad0cb08d33b954fb3a5f503">pme_gpu_realloc_coordinates</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a73a5947c0ad0cb08d33b954fb3a5f503"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reallocates the input coordinates buffer on the GPU (and clears the padded part if needed).  <a href="#a73a5947c0ad0cb08d33b954fb3a5f503">More...</a><br/></td></tr>
<tr class="separator:a73a5947c0ad0cb08d33b954fb3a5f503"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a9ae10ae4389bcf436fac531e892707"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a4a9ae10ae4389bcf436fac531e892707">pme_gpu_copy_input_coordinates</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, const rvec *h_coordinates)</td></tr>
<tr class="memdesc:a4a9ae10ae4389bcf436fac531e892707"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the input coordinates from the CPU buffer onto the GPU.  <a href="#a4a9ae10ae4389bcf436fac531e892707">More...</a><br/></td></tr>
<tr class="separator:a4a9ae10ae4389bcf436fac531e892707"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a958fd0c6ec6b0956e464f4ce664d6aaf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a958fd0c6ec6b0956e464f4ce664d6aaf">pme_gpu_free_coordinates</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a958fd0c6ec6b0956e464f4ce664d6aaf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees the coordinates on the GPU.  <a href="#a958fd0c6ec6b0956e464f4ce664d6aaf">More...</a><br/></td></tr>
<tr class="separator:a958fd0c6ec6b0956e464f4ce664d6aaf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a030300386acd47a107e6aaa89d7a87f9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a030300386acd47a107e6aaa89d7a87f9">pme_gpu_realloc_and_copy_input_coefficients</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, const float *h_coefficients)</td></tr>
<tr class="memdesc:a030300386acd47a107e6aaa89d7a87f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reallocates the buffer on the GPU and copies the charges/coefficients from the CPU buffer. Clears the padded part if needed.  <a href="#a030300386acd47a107e6aaa89d7a87f9">More...</a><br/></td></tr>
<tr class="separator:a030300386acd47a107e6aaa89d7a87f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55eee0cd4c26cf7dc543c2812476e64a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a55eee0cd4c26cf7dc543c2812476e64a">pme_gpu_free_coefficients</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a55eee0cd4c26cf7dc543c2812476e64a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees the charges/coefficients on the GPU.  <a href="#a55eee0cd4c26cf7dc543c2812476e64a">More...</a><br/></td></tr>
<tr class="separator:a55eee0cd4c26cf7dc543c2812476e64a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a820996b09dec5d75dda475d63564fad7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a820996b09dec5d75dda475d63564fad7">pme_gpu_realloc_spline_data</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a820996b09dec5d75dda475d63564fad7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reallocates the buffers on the GPU and the host for the atoms spline data.  <a href="#a820996b09dec5d75dda475d63564fad7">More...</a><br/></td></tr>
<tr class="separator:a820996b09dec5d75dda475d63564fad7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a482fd2b7060518e96c528a60241b5733"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a482fd2b7060518e96c528a60241b5733">pme_gpu_free_spline_data</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a482fd2b7060518e96c528a60241b5733"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees the buffers on the GPU for the atoms spline data.  <a href="#a482fd2b7060518e96c528a60241b5733">More...</a><br/></td></tr>
<tr class="separator:a482fd2b7060518e96c528a60241b5733"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89b9c510e5f884da85eb1aac7d12d548"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a89b9c510e5f884da85eb1aac7d12d548">pme_gpu_realloc_grid_indices</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a89b9c510e5f884da85eb1aac7d12d548"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reallocates the buffers on the GPU and the host for the particle gridline indices.  <a href="#a89b9c510e5f884da85eb1aac7d12d548">More...</a><br/></td></tr>
<tr class="separator:a89b9c510e5f884da85eb1aac7d12d548"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4cb36ed8fd4dc8add0ae484502e701a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#ac4cb36ed8fd4dc8add0ae484502e701a">pme_gpu_free_grid_indices</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:ac4cb36ed8fd4dc8add0ae484502e701a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees the buffer on the GPU for the particle gridline indices.  <a href="#ac4cb36ed8fd4dc8add0ae484502e701a">More...</a><br/></td></tr>
<tr class="separator:ac4cb36ed8fd4dc8add0ae484502e701a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39b72f968b9907393e23b9d9ce37fd6d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a39b72f968b9907393e23b9d9ce37fd6d">pme_gpu_realloc_grids</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a39b72f968b9907393e23b9d9ce37fd6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reallocates the real space grid and the complex reciprocal grid (if needed) on the GPU.  <a href="#a39b72f968b9907393e23b9d9ce37fd6d">More...</a><br/></td></tr>
<tr class="separator:a39b72f968b9907393e23b9d9ce37fd6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28da8afcd93cb6b68e56927b91f58971"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a28da8afcd93cb6b68e56927b91f58971">pme_gpu_free_grids</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a28da8afcd93cb6b68e56927b91f58971"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees the real space grid and the complex reciprocal grid (if needed) on the GPU.  <a href="#a28da8afcd93cb6b68e56927b91f58971">More...</a><br/></td></tr>
<tr class="separator:a28da8afcd93cb6b68e56927b91f58971"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adad2de39f6b338c2b757f7ead3e06c19"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#adad2de39f6b338c2b757f7ead3e06c19">pme_gpu_clear_grids</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:adad2de39f6b338c2b757f7ead3e06c19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears the real space grid on the GPU. Should be called at the end of each computation.  <a href="#adad2de39f6b338c2b757f7ead3e06c19">More...</a><br/></td></tr>
<tr class="separator:adad2de39f6b338c2b757f7ead3e06c19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd6254378ab90de1dff115c61d0c9931"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#abd6254378ab90de1dff115c61d0c9931">pme_gpu_realloc_and_copy_fract_shifts</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:abd6254378ab90de1dff115c61d0c9931"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reallocates and copies the pre-computed fractional coordinates' shifts to the GPU.  <a href="#abd6254378ab90de1dff115c61d0c9931">More...</a><br/></td></tr>
<tr class="separator:abd6254378ab90de1dff115c61d0c9931"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b9dbf91825ee5a1dcd10832622bc6cf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a4b9dbf91825ee5a1dcd10832622bc6cf">pme_gpu_free_fract_shifts</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a4b9dbf91825ee5a1dcd10832622bc6cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees the pre-computed fractional coordinates' shifts on the GPU.  <a href="#a4b9dbf91825ee5a1dcd10832622bc6cf">More...</a><br/></td></tr>
<tr class="separator:a4b9dbf91825ee5a1dcd10832622bc6cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3861e7817283870059f011c2b382759"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#ac3861e7817283870059f011c2b382759">pme_gpu_copy_input_gather_grid</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, float *h_grid)</td></tr>
<tr class="memdesc:ac3861e7817283870059f011c2b382759"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the input real-space grid from the host to the GPU.  <a href="#ac3861e7817283870059f011c2b382759">More...</a><br/></td></tr>
<tr class="separator:ac3861e7817283870059f011c2b382759"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71a34b1e785bc25733856310173b4380"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a71a34b1e785bc25733856310173b4380">pme_gpu_copy_output_spread_grid</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, float *h_grid)</td></tr>
<tr class="memdesc:a71a34b1e785bc25733856310173b4380"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the output real-space grid from the GPU to the host.  <a href="#a71a34b1e785bc25733856310173b4380">More...</a><br/></td></tr>
<tr class="separator:a71a34b1e785bc25733856310173b4380"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8367e50be41bc42df58802095d615091"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a8367e50be41bc42df58802095d615091">pme_gpu_copy_output_spread_atom_data</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a8367e50be41bc42df58802095d615091"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the spread output spline data and gridline indices from the GPU to the host.  <a href="#a8367e50be41bc42df58802095d615091">More...</a><br/></td></tr>
<tr class="separator:a8367e50be41bc42df58802095d615091"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f637186d789670a691718b6e2093dcb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a0f637186d789670a691718b6e2093dcb">pme_gpu_copy_input_gather_atom_data</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a0f637186d789670a691718b6e2093dcb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the gather input spline data and gridline indices from the host to the GPU.  <a href="#a0f637186d789670a691718b6e2093dcb">More...</a><br/></td></tr>
<tr class="separator:a0f637186d789670a691718b6e2093dcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f7ceb99dc4b03f7af55cb2d244629cf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a9f7ceb99dc4b03f7af55cb2d244629cf">pme_gpu_sync_spread_grid</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a9f7ceb99dc4b03f7af55cb2d244629cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Waits for the grid copying to the host-side buffer after spreading to finish.  <a href="#a9f7ceb99dc4b03f7af55cb2d244629cf">More...</a><br/></td></tr>
<tr class="separator:a9f7ceb99dc4b03f7af55cb2d244629cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad13bf9ff1045e60dd7d3d4c5be3ea5bc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#ad13bf9ff1045e60dd7d3d4c5be3ea5bc">pme_gpu_init_internal</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:ad13bf9ff1045e60dd7d3d4c5be3ea5bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Does the one-time GPU-framework specific PME initialization. For CUDA, the PME stream is created with the highest priority.  <a href="#ad13bf9ff1045e60dd7d3d4c5be3ea5bc">More...</a><br/></td></tr>
<tr class="separator:ad13bf9ff1045e60dd7d3d4c5be3ea5bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9de6cbe75f1b38a5d6fb17a83d77dc3b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a9de6cbe75f1b38a5d6fb17a83d77dc3b">pme_gpu_destroy_specific</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a9de6cbe75f1b38a5d6fb17a83d77dc3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys the PME GPU-framework specific data. Should be called last in the PME GPU destructor.  <a href="#a9de6cbe75f1b38a5d6fb17a83d77dc3b">More...</a><br/></td></tr>
<tr class="separator:a9de6cbe75f1b38a5d6fb17a83d77dc3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a5d907676bd77a83006abb2d08d5827"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a4a5d907676bd77a83006abb2d08d5827">pme_gpu_init_sync_events</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a4a5d907676bd77a83006abb2d08d5827"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the PME GPU synchronization events.  <a href="#a4a5d907676bd77a83006abb2d08d5827">More...</a><br/></td></tr>
<tr class="separator:a4a5d907676bd77a83006abb2d08d5827"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af45fb5e4496345143b9daf14b6c33463"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#af45fb5e4496345143b9daf14b6c33463">pme_gpu_destroy_sync_events</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:af45fb5e4496345143b9daf14b6c33463"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys the PME GPU synchronization events.  <a href="#af45fb5e4496345143b9daf14b6c33463">More...</a><br/></td></tr>
<tr class="separator:af45fb5e4496345143b9daf14b6c33463"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9aa90037c75c67926f87351dd081d5a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#ad9aa90037c75c67926f87351dd081d5a">pme_gpu_reinit_3dfft</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:ad9aa90037c75c67926f87351dd081d5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the CUDA FFT structures.  <a href="#ad9aa90037c75c67926f87351dd081d5a">More...</a><br/></td></tr>
<tr class="separator:ad9aa90037c75c67926f87351dd081d5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04c25cffa052c81d0c7b201e40da4010"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a04c25cffa052c81d0c7b201e40da4010">pme_gpu_destroy_3dfft</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a04c25cffa052c81d0c7b201e40da4010"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys the CUDA FFT structures.  <a href="#a04c25cffa052c81d0c7b201e40da4010">More...</a><br/></td></tr>
<tr class="separator:a04c25cffa052c81d0c7b201e40da4010"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0588378ce36eda8bc7a685875ba4b3ae"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a0588378ce36eda8bc7a685875ba4b3ae">pme_gpu_update_timings</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a0588378ce36eda8bc7a685875ba4b3ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finalizes all the active PME GPU stage timings for the current computation. Should be called at the end of every computation.  <a href="#a0588378ce36eda8bc7a685875ba4b3ae">More...</a><br/></td></tr>
<tr class="separator:a0588378ce36eda8bc7a685875ba4b3ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa77fc00ad1c62f0e0acb03b644e2bc1a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#aa77fc00ad1c62f0e0acb03b644e2bc1a">pme_gpu_reinit_timings</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:aa77fc00ad1c62f0e0acb03b644e2bc1a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates the internal list of active PME GPU stages (if timings are enabled).  <a href="#aa77fc00ad1c62f0e0acb03b644e2bc1a">More...</a><br/></td></tr>
<tr class="separator:aa77fc00ad1c62f0e0acb03b644e2bc1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9c5c53ccebc4b241b0de1b0d3ca5fc0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#ac9c5c53ccebc4b241b0de1b0d3ca5fc0">pme_gpu_reset_timings</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:ac9c5c53ccebc4b241b0de1b0d3ca5fc0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets the PME GPU timings. To be called at the reset MD step.  <a href="#ac9c5c53ccebc4b241b0de1b0d3ca5fc0">More...</a><br/></td></tr>
<tr class="separator:ac9c5c53ccebc4b241b0de1b0d3ca5fc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac600d44fbeb29e467155b1b193410908"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#ac600d44fbeb29e467155b1b193410908">pme_gpu_get_timings</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, <a class="el" href="structgmx__wallclock__gpu__pme__t.xhtml">gmx_wallclock_gpu_pme_t</a> *timings)</td></tr>
<tr class="memdesc:ac600d44fbeb29e467155b1b193410908"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the PME GPU timings to the gmx_wallclock_gpu_t structure (for log output). To be called at the run end.  <a href="#ac600d44fbeb29e467155b1b193410908">More...</a><br/></td></tr>
<tr class="separator:ac600d44fbeb29e467155b1b193410908"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab826c78869c7ea686932c79c718ee785"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#ab826c78869c7ea686932c79c718ee785">pme_gpu_spread</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, int gridIndex, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *h_grid, bool computeSplines, bool spreadCharges)</td></tr>
<tr class="memdesc:ab826c78869c7ea686932c79c718ee785"><td class="mdescLeft">&#160;</td><td class="mdescRight">A GPU spline computation and charge spreading function.  <a href="#ab826c78869c7ea686932c79c718ee785">More...</a><br/></td></tr>
<tr class="separator:ab826c78869c7ea686932c79c718ee785"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a3dfd8ef120496bb8e2de24f439719f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a7a3dfd8ef120496bb8e2de24f439719f">pme_gpu_3dfft</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, enum <a class="el" href="fft_8h.xhtml#af2aa0b3a5f3a4339ecb2bd67cb8f8302">gmx_fft_direction</a> direction, const int gridIndex)</td></tr>
<tr class="memdesc:a7a3dfd8ef120496bb8e2de24f439719f"><td class="mdescLeft">&#160;</td><td class="mdescRight">3D FFT R2C/C2R routine.  <a href="#a7a3dfd8ef120496bb8e2de24f439719f">More...</a><br/></td></tr>
<tr class="separator:a7a3dfd8ef120496bb8e2de24f439719f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d5e0aac3ae4e01d565a8f6dc04000ec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a8d5e0aac3ae4e01d565a8f6dc04000ec">pme_gpu_solve</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, t_complex *h_grid, <a class="el" href="pme-gpu-internal_8h.xhtml#a68be0dbcc0dc3960694fc024c5996d79">GridOrdering</a> gridOrdering, bool computeEnergyAndVirial)</td></tr>
<tr class="memdesc:a8d5e0aac3ae4e01d565a8f6dc04000ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">A GPU Fourier space solving function.  <a href="#a8d5e0aac3ae4e01d565a8f6dc04000ec">More...</a><br/></td></tr>
<tr class="separator:a8d5e0aac3ae4e01d565a8f6dc04000ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f77ad3d3f962d38d4e39008dd897d74"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a9f77ad3d3f962d38d4e39008dd897d74">pme_gpu_gather</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, <a class="el" href="pme_8h.xhtml#acbcd1495b351f6a99fa2bf5b10aca640">PmeForceOutputHandling</a> forceTreatment, const float *h_grid)</td></tr>
<tr class="memdesc:a9f77ad3d3f962d38d4e39008dd897d74"><td class="mdescLeft">&#160;</td><td class="mdescRight">A GPU force gathering function.  <a href="#a9f77ad3d3f962d38d4e39008dd897d74">More...</a><br/></td></tr>
<tr class="separator:a9f77ad3d3f962d38d4e39008dd897d74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a466c37f38b87548e12409e53c5454782"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a466c37f38b87548e12409e53c5454782">pme_gpu_uses_dd</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a466c37f38b87548e12409e53c5454782"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tells if PME runs on multiple GPUs with the decomposition.  <a href="#a466c37f38b87548e12409e53c5454782">More...</a><br/></td></tr>
<tr class="separator:a466c37f38b87548e12409e53c5454782"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af125ef6f5b90c0a65ab54d876486270b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#af125ef6f5b90c0a65ab54d876486270b">pme_gpu_performs_gather</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:af125ef6f5b90c0a65ab54d876486270b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tells if PME performs the gathering stage on GPU.  <a href="#af125ef6f5b90c0a65ab54d876486270b">More...</a><br/></td></tr>
<tr class="separator:af125ef6f5b90c0a65ab54d876486270b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa880aaf9f6d9fef892cb81a3f2cdee8b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#aa880aaf9f6d9fef892cb81a3f2cdee8b">pme_gpu_performs_FFT</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:aa880aaf9f6d9fef892cb81a3f2cdee8b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tells if PME performs the FFT stages on GPU.  <a href="#aa880aaf9f6d9fef892cb81a3f2cdee8b">More...</a><br/></td></tr>
<tr class="separator:aa880aaf9f6d9fef892cb81a3f2cdee8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82946cfc6acbb5da584359aec1f5e0b1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a82946cfc6acbb5da584359aec1f5e0b1">pme_gpu_performs_wrapping</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a82946cfc6acbb5da584359aec1f5e0b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tells if PME performs the grid (un-)wrapping on GPU.  <a href="#a82946cfc6acbb5da584359aec1f5e0b1">More...</a><br/></td></tr>
<tr class="separator:a82946cfc6acbb5da584359aec1f5e0b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a331cf91d6afe3e6a24c3af0e6d87fefb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a331cf91d6afe3e6a24c3af0e6d87fefb">pme_gpu_performs_solve</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a331cf91d6afe3e6a24c3af0e6d87fefb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tells if PME performs the grid solving on GPU.  <a href="#a331cf91d6afe3e6a24c3af0e6d87fefb">More...</a><br/></td></tr>
<tr class="separator:a331cf91d6afe3e6a24c3af0e6d87fefb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09e861258a4869a92963dd6c30147491"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a09e861258a4869a92963dd6c30147491">pme_gpu_set_testing</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, bool testing)</td></tr>
<tr class="memdesc:a09e861258a4869a92963dd6c30147491"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables or disables the testing mode. Testing mode only implies copying all the outputs, even the intermediate ones, to the host, and also makes the copies synchronous.  <a href="#a09e861258a4869a92963dd6c30147491">More...</a><br/></td></tr>
<tr class="separator:a09e861258a4869a92963dd6c30147491"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2eea8129ee6f44acdaf39e1b71cbf819"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a2eea8129ee6f44acdaf39e1b71cbf819">pme_gpu_is_testing</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a2eea8129ee6f44acdaf39e1b71cbf819"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tells if PME is in the testing mode.  <a href="#a2eea8129ee6f44acdaf39e1b71cbf819">More...</a><br/></td></tr>
<tr class="separator:a2eea8129ee6f44acdaf39e1b71cbf819"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88c3c7cfd40227a0314f6e997521afed"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt; <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">gmx::RVec</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a88c3c7cfd40227a0314f6e997521afed">pme_gpu_get_forces</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a88c3c7cfd40227a0314f6e997521afed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the GPU gathering staging forces buffer.  <a href="#a88c3c7cfd40227a0314f6e997521afed">More...</a><br/></td></tr>
<tr class="separator:a88c3c7cfd40227a0314f6e997521afed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bea55789e0572d1ff0c4f78cdb6e8ad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a1bea55789e0572d1ff0c4f78cdb6e8ad">pme_gpu_get_energy_virial</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *energy, matrix virial)</td></tr>
<tr class="memdesc:a1bea55789e0572d1ff0c4f78cdb6e8ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the output virial and energy of the PME solving.  <a href="#a1bea55789e0572d1ff0c4f78cdb6e8ad">More...</a><br/></td></tr>
<tr class="separator:a1bea55789e0572d1ff0c4f78cdb6e8ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79575e51e673f2d13315370dba0e7191"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a79575e51e673f2d13315370dba0e7191">pme_gpu_update_input_box</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, const matrix box)</td></tr>
<tr class="memdesc:a79575e51e673f2d13315370dba0e7191"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates the unit cell parameters. Does not check if update is necessary - that is done in <a class="el" href="pme-gpu_8cpp.xhtml#a2db9507955e1908ed647984a9c62f641" title="Prepares PME on GPU computation (updating the box if needed) ">pme_gpu_prepare_computation()</a>.  <a href="#a79575e51e673f2d13315370dba0e7191">More...</a><br/></td></tr>
<tr class="separator:a79575e51e673f2d13315370dba0e7191"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab247f00ef7f36e9fbd3fb3c49e2cb6a8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#ab247f00ef7f36e9fbd3fb3c49e2cb6a8">pme_gpu_finish_computation</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:ab247f00ef7f36e9fbd3fb3c49e2cb6a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finishes the PME GPU computation, waiting for the output forces and/or energy/virial to be copied to the host. If forces were computed, they will have arrived at the external host buffer provided to gather. If virial/energy were computed, they will have arrived into the internal staging buffer (even though that should have already happened before even launching the gather). Finally, cudaEvent_t based GPU timers get updated if enabled. They also need stream synchronization for correctness. Additionally, device-side buffers are cleared asynchronously for the next computation.  <a href="#ab247f00ef7f36e9fbd3fb3c49e2cb6a8">More...</a><br/></td></tr>
<tr class="separator:ab247f00ef7f36e9fbd3fb3c49e2cb6a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55174cd4bc39d7f14fe375a38ee811ba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a55174cd4bc39d7f14fe375a38ee811ba">pme_gpu_transform_spline_atom_data</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, const pme_atomcomm_t *atc, <a class="el" href="pme-gpu-internal_8h.xhtml#a0f754eebaa9461af5829e9d32c8156cb">PmeSplineDataType</a> type, int dimIndex, <a class="el" href="pme-gpu-internal_8h.xhtml#a8e828a9e22c6ef7676e82bbf2fbd2dec">PmeLayoutTransform</a> transform)</td></tr>
<tr class="memdesc:a55174cd4bc39d7f14fe375a38ee811ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rearranges the atom spline data between the GPU and host layouts. Only used for test purposes so far, likely to be horribly slow.  <a href="#a55174cd4bc39d7f14fe375a38ee811ba">More...</a><br/></td></tr>
<tr class="separator:a55174cd4bc39d7f14fe375a38ee811ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ba882d2de50fa957af00828162dd06e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a7ba882d2de50fa957af00828162dd06e">pme_gpu_get_real_grid_sizes</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">gmx::IVec</a> *gridSize, <a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">gmx::IVec</a> *paddedGridSize)</td></tr>
<tr class="memdesc:a7ba882d2de50fa957af00828162dd06e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the normal/padded grid dimensions of the real-space PME grid on GPU. Only used in tests.  <a href="#a7ba882d2de50fa957af00828162dd06e">More...</a><br/></td></tr>
<tr class="separator:a7ba882d2de50fa957af00828162dd06e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae81445001fbc385bc2868fcbb4eb226b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#ae81445001fbc385bc2868fcbb4eb226b">pme_gpu_reinit</a> (gmx_pme_t *pme, <a class="el" href="structgmx__device__info__t.xhtml">gmx_device_info_t</a> *gpuInfo)</td></tr>
<tr class="memdesc:ae81445001fbc385bc2868fcbb4eb226b"><td class="mdescLeft">&#160;</td><td class="mdescRight">(Re-)initializes the PME GPU data at the beginning of the run or on DLB.  <a href="#ae81445001fbc385bc2868fcbb4eb226b">More...</a><br/></td></tr>
<tr class="separator:ae81445001fbc385bc2868fcbb4eb226b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e5ef8957b2366acbb1eb097aa06d755"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a7e5ef8957b2366acbb1eb097aa06d755">pme_gpu_destroy</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a7e5ef8957b2366acbb1eb097aa06d755"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys the PME GPU data at the end of the run.  <a href="#a7e5ef8957b2366acbb1eb097aa06d755">More...</a><br/></td></tr>
<tr class="separator:a7e5ef8957b2366acbb1eb097aa06d755"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e377588a4bede4919cdcf5ef29ae9b4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a4e377588a4bede4919cdcf5ef29ae9b4">pme_gpu_reinit_atoms</a> (<a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu, const int nAtoms, const <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *charges)</td></tr>
<tr class="memdesc:a4e377588a4bede4919cdcf5ef29ae9b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reallocates the local atoms data (charges, coordinates, etc.). Copies the charges to the GPU.  <a href="#a4e377588a4bede4919cdcf5ef29ae9b4">More...</a><br/></td></tr>
<tr class="separator:a4e377588a4bede4919cdcf5ef29ae9b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69066d5a6d2bd3cfd48c22a7da4fd88b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a69066d5a6d2bd3cfd48c22a7da4fd88b">pme_gpu_reinit_computation</a> (const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *pmeGpu)</td></tr>
<tr class="memdesc:a69066d5a6d2bd3cfd48c22a7da4fd88b"><td class="mdescLeft">&#160;</td><td class="mdescRight">The PME GPU reinitialization function that is called both at the end of any PME computation and on any load balancing.  <a href="#a69066d5a6d2bd3cfd48c22a7da4fd88b">More...</a><br/></td></tr>
<tr class="separator:a69066d5a6d2bd3cfd48c22a7da4fd88b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a60318df7520b83876d039831680929c8"><td class="memItemLeft" align="right" valign="top">const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a60318df7520b83876d039831680929c8">c_usePadding</a> = true</td></tr>
<tr class="memdesc:a60318df7520b83876d039831680929c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">false: The atom data GPU buffers are sized precisely according to the number of atoms. (Except GPU spline data layout which is regardless intertwined for 2 atoms per warp). The atom index checks in the spread/gather code potentially hinder the performance. true: The atom data GPU buffers are padded with zeroes so that the possible number of atoms fitting in is divisible by PME_ATOM_DATA_ALIGNMENT. The atom index checks are not performed. There should be a performance win, but how big is it, remains to be seen. Additional cudaMemsetAsync calls are done occasionally (only charges/coordinates; spline data is always recalculated now).  <a href="#a60318df7520b83876d039831680929c8">More...</a><br/></td></tr>
<tr class="separator:a60318df7520b83876d039831680929c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa408814d8c61c4e88c26ed74b27f97b"><td class="memItemLeft" align="right" valign="top">const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#afa408814d8c61c4e88c26ed74b27f97b">c_skipNeutralAtoms</a> = false</td></tr>
<tr class="memdesc:afa408814d8c61c4e88c26ed74b27f97b"><td class="mdescLeft">&#160;</td><td class="mdescRight">false: Atoms with zero charges are processed by PME. Could introduce some overhead. true: Atoms with zero charges are not processed by PME. Adds branching to the spread/gather. Could be good for performance in specific systems with lots of neutral atoms.  <a href="#afa408814d8c61c4e88c26ed74b27f97b">More...</a><br/></td></tr>
<tr class="separator:afa408814d8c61c4e88c26ed74b27f97b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a855e8e4c292a1588af619f7342e1d690"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a855e8e4c292a1588af619f7342e1d690"></a>
const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-gpu-internal_8h.xhtml#a855e8e4c292a1588af619f7342e1d690">c_virialAndEnergyCount</a> = 7</td></tr>
<tr class="memdesc:a855e8e4c292a1588af619f7342e1d690"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of PME solve output floating point numbers. 6 for symmetric virial matrix + 1 for reciprocal energy. <br/></td></tr>
<tr class="separator:a855e8e4c292a1588af619f7342e1d690"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a7a3dfd8ef120496bb8e2de24f439719f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_3dfft </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">enum <a class="el" href="fft_8h.xhtml#af2aa0b3a5f3a4339ecb2bd67cb8f8302">gmx_fft_direction</a>&#160;</td>
          <td class="paramname"><em>direction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>gridIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>3D FFT R2C/C2R routine. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">direction</td><td>Transform direction (real-to-complex or complex-to-real) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gridIndex</td><td>Index of the PME grid - unused, assumed to be 0. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aedb575cbd90b3246bc7f144fbbf8354a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_alloc_energy_virial </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocates the fixed size energy and virial buffer both on GPU and CPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab88677e1a5388251916282db3659dac6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_clear_energy_virial </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Clears the energy and virial memory on GPU with 0. Should be called at the end of PME computation which returned energy/virial. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="adad2de39f6b338c2b757f7ead3e06c19"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_clear_grids </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Clears the real space grid on the GPU. Should be called at the end of each computation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4a9ae10ae4389bcf436fac531e892707"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_copy_input_coordinates </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const rvec *&#160;</td>
          <td class="paramname"><em>h_coordinates</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copies the input coordinates from the CPU buffer onto the GPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">h_coordinates</td><td>Input coordinates (XYZ rvec array).</td></tr>
  </table>
  </dd>
</dl>
<p>Needs to be called for every PME computation. The coordinates are then used in the spline calculation. </p>

</div>
</div>
<a class="anchor" id="a5db280d2fe0d5ea1ab7784b55d7b5326"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_copy_input_forces </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copies the forces from the CPU buffer to the GPU (to reduce them with the PME GPU gathered forces). To be called e.g. after the bonded calculations. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0f637186d789670a691718b6e2093dcb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_copy_input_gather_atom_data </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copies the gather input spline data and gridline indices from the host to the GPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac3861e7817283870059f011c2b382759"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_copy_input_gather_grid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>h_grid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copies the input real-space grid from the host to the GPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">h_grid</td><td>The host-side grid buffer. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6aa284d4700ed885ff6fbcf30028edec"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_copy_output_forces </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copies the forces from the GPU to the CPU buffer. To be called after the gathering stage. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8367e50be41bc42df58802095d615091"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_copy_output_spread_atom_data </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copies the spread output spline data and gridline indices from the GPU to the host. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a71a34b1e785bc25733856310173b4380"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_copy_output_spread_grid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>h_grid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copies the output real-space grid from the GPU to the host. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">h_grid</td><td>The host-side grid buffer. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7e5ef8957b2366acbb1eb097aa06d755"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_destroy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Destroys the PME GPU data at the end of the run. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a04c25cffa052c81d0c7b201e40da4010"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_destroy_3dfft </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Destroys the CUDA FFT structures. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9de6cbe75f1b38a5d6fb17a83d77dc3b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_destroy_specific </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Destroys the PME GPU-framework specific data. Should be called last in the PME GPU destructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af45fb5e4496345143b9daf14b6c33463"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_destroy_sync_events </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Destroys the PME GPU synchronization events. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab247f00ef7f36e9fbd3fb3c49e2cb6a8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_finish_computation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Finishes the PME GPU computation, waiting for the output forces and/or energy/virial to be copied to the host. If forces were computed, they will have arrived at the external host buffer provided to gather. If virial/energy were computed, they will have arrived into the internal staging buffer (even though that should have already happened before even launching the gather). Finally, cudaEvent_t based GPU timers get updated if enabled. They also need stream synchronization for correctness. Additionally, device-side buffers are cleared asynchronously for the next computation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="acc35829e3a2514ca9d0c567efe46d814"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_free_bspline_values </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees the pre-computed B-spline values on the GPU (and the transfer CPU buffers). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a55eee0cd4c26cf7dc543c2812476e64a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_free_coefficients </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees the charges/coefficients on the GPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a958fd0c6ec6b0956e464f4ce664d6aaf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_free_coordinates </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees the coordinates on the GPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="abf81c931d4564000972c2c860ac5e64b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_free_energy_virial </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees the energy and virial memory both on GPU and CPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a59705d17c95ae26dcf4e5c9d3cad7686"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_free_forces </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees the GPU buffer for the PME forces. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4b9dbf91825ee5a1dcd10832622bc6cf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_free_fract_shifts </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees the pre-computed fractional coordinates' shifts on the GPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac4cb36ed8fd4dc8add0ae484502e701a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_free_grid_indices </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees the buffer on the GPU for the particle gridline indices. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a28da8afcd93cb6b68e56927b91f58971"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_free_grids </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees the real space grid and the complex reciprocal grid (if needed) on the GPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a482fd2b7060518e96c528a60241b5733"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_free_spline_data </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees the buffers on the GPU for the atoms spline data. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9f77ad3d3f962d38d4e39008dd897d74"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_gather </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="pme_8h.xhtml#acbcd1495b351f6a99fa2bf5b10aca640">PmeForceOutputHandling</a>&#160;</td>
          <td class="paramname"><em>forceTreatment</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>h_grid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A GPU force gathering function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">forceTreatment</td><td>Tells how data in h_forces should be treated. TODO: determine efficiency/balance of host/device-side reductions. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">h_grid</td><td>The host-side grid buffer (used only in testing mode) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a05193e01dc0479ad49401b1732d86639"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pme_gpu_get_atom_data_alignment </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of atoms per chunk in the atom charges/coordinates data layout. Depends on CUDA-specific block sizes, needed for the atom data padding. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Number of atoms in a single GPU atom data chunk. </dd></dl>

</div>
</div>
<a class="anchor" id="aad1216680366effd5fd9a016f8abd21b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pme_gpu_get_atoms_per_warp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of atoms per chunk in the atom spline theta/dtheta data layout. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Number of atoms in a single GPU atom spline data chunk. </dd></dl>

</div>
</div>
<a class="anchor" id="a1bea55789e0572d1ff0c4f78cdb6e8ad"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_get_energy_virial </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>energy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">matrix&#160;</td>
          <td class="paramname"><em>virial</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the output virial and energy of the PME solving. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">energy</td><td>The output energy. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">virial</td><td>The output virial matrix. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a88c3c7cfd40227a0314f6e997521afed"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef</a>&lt;<a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">gmx::RVec</a>&gt; pme_gpu_get_forces </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the GPU gathering staging forces buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The input/output forces. </dd></dl>

</div>
</div>
<a class="anchor" id="a7ba882d2de50fa957af00828162dd06e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_get_real_grid_sizes </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">gmx::IVec</a> *&#160;</td>
          <td class="paramname"><em>gridSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacegmx.xhtml#a9699d31c62e2a4cc2c730793a1224411">gmx::IVec</a> *&#160;</td>
          <td class="paramname"><em>paddedGridSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the normal/padded grid dimensions of the real-space PME grid on GPU. Only used in tests. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">gridSize</td><td>Pointer to the grid dimensions to fill in. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">paddedGridSize</td><td>Pointer to the padded grid dimensions to fill in. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac600d44fbeb29e467155b1b193410908"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_get_timings </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__wallclock__gpu__pme__t.xhtml">gmx_wallclock_gpu_pme_t</a> *&#160;</td>
          <td class="paramname"><em>timings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copies the PME GPU timings to the gmx_wallclock_gpu_t structure (for log output). To be called at the run end. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">timings</td><td>The <a class="el" href="structgmx__wallclock__gpu__pme__t.xhtml" title="GPU timings for PME. ">gmx_wallclock_gpu_pme_t</a> structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad13bf9ff1045e60dd7d3d4c5be3ea5bc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_init_internal </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Does the one-time GPU-framework specific PME initialization. For CUDA, the PME stream is created with the highest priority. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4a5d907676bd77a83006abb2d08d5827"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_init_sync_events </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes the PME GPU synchronization events. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2eea8129ee6f44acdaf39e1b71cbf819"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool pme_gpu_is_testing </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tells if PME is in the testing mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if testing mode is enabled, false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="aa880aaf9f6d9fef892cb81a3f2cdee8b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool pme_gpu_performs_FFT </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tells if PME performs the FFT stages on GPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if FFT is performed on GPU, false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="af125ef6f5b90c0a65ab54d876486270b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool pme_gpu_performs_gather </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tells if PME performs the gathering stage on GPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the gathering is performed on GPU, false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a331cf91d6afe3e6a24c3af0e6d87fefb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool pme_gpu_performs_solve </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tells if PME performs the grid solving on GPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if solving is performed on GPU, false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a82946cfc6acbb5da584359aec1f5e0b1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool pme_gpu_performs_wrapping </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tells if PME performs the grid (un-)wrapping on GPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if (un-)wrapping is performed on GPU, false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a226b7e3d43ba272c1a11886f08598187"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_realloc_and_copy_bspline_values </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reallocates and copies the pre-computed B-spline values to the GPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="abd6254378ab90de1dff115c61d0c9931"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_realloc_and_copy_fract_shifts </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reallocates and copies the pre-computed fractional coordinates' shifts to the GPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a030300386acd47a107e6aaa89d7a87f9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_realloc_and_copy_input_coefficients </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>h_coefficients</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reallocates the buffer on the GPU and copies the charges/coefficients from the CPU buffer. Clears the padded part if needed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">h_coefficients</td><td>The input atom charges/coefficients.</td></tr>
  </table>
  </dd>
</dl>
<p>Does not need to be done for every PME computation, only whenever the local charges change. (So, in the beginning of the run, or on DD step). </p>

</div>
</div>
<a class="anchor" id="a73a5947c0ad0cb08d33b954fb3a5f503"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_realloc_coordinates </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reallocates the input coordinates buffer on the GPU (and clears the padded part if needed). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure.</td></tr>
  </table>
  </dd>
</dl>
<p>Needs to be called on every DD step/in the beginning. </p>

</div>
</div>
<a class="anchor" id="a5272eaf88e7b1110676df6cf6acc95e3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_realloc_forces </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reallocates the GPU buffer for the PME forces. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a89b9c510e5f884da85eb1aac7d12d548"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_realloc_grid_indices </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reallocates the buffers on the GPU and the host for the particle gridline indices. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a39b72f968b9907393e23b9d9ce37fd6d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_realloc_grids </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reallocates the real space grid and the complex reciprocal grid (if needed) on the GPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a820996b09dec5d75dda475d63564fad7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_realloc_spline_data </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reallocates the buffers on the GPU and the host for the atoms spline data. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae81445001fbc385bc2868fcbb4eb226b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_reinit </td>
          <td>(</td>
          <td class="paramtype">gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__device__info__t.xhtml">gmx_device_info_t</a> *&#160;</td>
          <td class="paramname"><em>gpuInfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>(Re-)initializes the PME GPU data at the beginning of the run or on DLB. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pme</td><td>The PME structure. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gpuInfo</td><td>The GPU information structure. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1NotImplementedError.xhtml" title="Exception class for use of an unimplemented feature. ">gmx::NotImplementedError</a></td><td>if this generally valid PME structure is not valid for GPU runs. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad9aa90037c75c67926f87351dd081d5a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_reinit_3dfft </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes the CUDA FFT structures. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4e377588a4bede4919cdcf5ef29ae9b4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_reinit_atoms </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>nAtoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>charges</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reallocates the local atoms data (charges, coordinates, etc.). Copies the charges to the GPU. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nAtoms</td><td>The number of particles. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">charges</td><td>The pointer to the host-side array of particle charges.</td></tr>
  </table>
  </dd>
</dl>
<p>This is a function that should only be called in the beginning of the run and on domain decomposition. Should be called before the pme_gpu_set_io_ranges. </p>

</div>
</div>
<a class="anchor" id="a69066d5a6d2bd3cfd48c22a7da4fd88b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_reinit_computation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The PME GPU reinitialization function that is called both at the end of any PME computation and on any load balancing. </p>
<p>This clears the device-side working buffers in preparation for new computation.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure.</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa77fc00ad1c62f0e0acb03b644e2bc1a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_reinit_timings </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Updates the internal list of active PME GPU stages (if timings are enabled). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU data structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac9c5c53ccebc4b241b0de1b0d3ca5fc0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_reset_timings </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Resets the PME GPU timings. To be called at the reset MD step. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a09e861258a4869a92963dd6c30147491"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_set_testing </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>testing</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enables or disables the testing mode. Testing mode only implies copying all the outputs, even the intermediate ones, to the host, and also makes the copies synchronous. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">testing</td><td>Should the testing mode be enabled, or disabled. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8d5e0aac3ae4e01d565a8f6dc04000ec"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_solve </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_complex *&#160;</td>
          <td class="paramname"><em>h_grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="pme-gpu-internal_8h.xhtml#a68be0dbcc0dc3960694fc024c5996d79">GridOrdering</a>&#160;</td>
          <td class="paramname"><em>gridOrdering</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>computeEnergyAndVirial</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A GPU Fourier space solving function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">h_grid</td><td>The host-side input and output Fourier grid buffer (used only with testing or host-side FFT) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gridOrdering</td><td>Specifies the dimenion ordering of the complex grid. TODO: store this information? </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">computeEnergyAndVirial</td><td>Tells if the energy and virial computation should also be performed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab826c78869c7ea686932c79c718ee785"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_spread </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>gridIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>h_grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>computeSplines</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>spreadCharges</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A GPU spline computation and charge spreading function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gridIndex</td><td>Index of the PME grid - unused, assumed to be 0. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">h_grid</td><td>The host-side grid buffer (used only if the result of the spread is expected on the host, e.g. testing or host-side FFT) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">computeSplines</td><td>Should the computation of spline parameters and gridline indices be performed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">spreadCharges</td><td>Should the charges/coefficients be spread on the grid. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aded614c4f44ad3c29689336a46f06c00"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pme_gpu_stream_query </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks whether work in the PME GPU stream has completed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if work in the PME stream has completed. </dd></dl>

</div>
</div>
<a class="anchor" id="a9f7ceb99dc4b03f7af55cb2d244629cf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_sync_spread_grid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Waits for the grid copying to the host-side buffer after spreading to finish. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af988b8256d624cfccf2fa2e4d0f7718f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_synchronize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Synchronizes the current computation, waiting for the GPU kernels/transfers to finish. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a55174cd4bc39d7f14fe375a38ee811ba"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_transform_spline_atom_data </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pme_atomcomm_t *&#160;</td>
          <td class="paramname"><em>atc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="pme-gpu-internal_8h.xhtml#a0f754eebaa9461af5829e9d32c8156cb">PmeSplineDataType</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dimIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="pme-gpu-internal_8h.xhtml#a8e828a9e22c6ef7676e82bbf2fbd2dec">PmeLayoutTransform</a>&#160;</td>
          <td class="paramname"><em>transform</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Rearranges the atom spline data between the GPU and host layouts. Only used for test purposes so far, likely to be horribly slow. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">atc</td><td>The PME CPU atom data structure (with a single-threaded layout). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>The spline data type (values or derivatives). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dimIndex</td><td>Dimension index. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">transform</td><td>Layout transform type </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a79575e51e673f2d13315370dba0e7191"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_update_input_box </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const matrix&#160;</td>
          <td class="paramname"><em>box</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Updates the unit cell parameters. Does not check if update is necessary - that is done in <a class="el" href="pme-gpu_8cpp.xhtml#a2db9507955e1908ed647984a9c62f641" title="Prepares PME on GPU computation (updating the box if needed) ">pme_gpu_prepare_computation()</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">box</td><td>The unit cell box. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0588378ce36eda8bc7a685875ba4b3ae"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_gpu_update_timings </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Finalizes all the active PME GPU stage timings for the current computation. Should be called at the end of every computation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a466c37f38b87548e12409e53c5454782"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool pme_gpu_uses_dd </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPmeGpu.xhtml">PmeGpu</a> *&#160;</td>
          <td class="paramname"><em>pmeGpu</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tells if PME runs on multiple GPUs with the decomposition. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pmeGpu</td><td>The PME GPU structure. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if PME runs on multiple GPUs, false otherwise. </dd></dl>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a class="anchor" id="afa408814d8c61c4e88c26ed74b27f97b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const bool c_skipNeutralAtoms = false</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>false: Atoms with zero charges are processed by PME. Could introduce some overhead. true: Atoms with zero charges are not processed by PME. Adds branching to the spread/gather. Could be good for performance in specific systems with lots of neutral atoms. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000020">Todo:</a></b></dt><dd>Estimate performance differences. </dd></dl>

</div>
</div>
<a class="anchor" id="a60318df7520b83876d039831680929c8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const bool c_usePadding = true</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>false: The atom data GPU buffers are sized precisely according to the number of atoms. (Except GPU spline data layout which is regardless intertwined for 2 atoms per warp). The atom index checks in the spread/gather code potentially hinder the performance. true: The atom data GPU buffers are padded with zeroes so that the possible number of atoms fitting in is divisible by PME_ATOM_DATA_ALIGNMENT. The atom index checks are not performed. There should be a performance win, but how big is it, remains to be seen. Additional cudaMemsetAsync calls are done occasionally (only charges/coordinates; spline data is always recalculated now). </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000019">Todo:</a></b></dt><dd>Estimate performance differences </dd></dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:57:16 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
