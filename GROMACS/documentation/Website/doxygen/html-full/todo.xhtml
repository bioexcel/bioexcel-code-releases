<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: Todo List</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li class="current"><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Todo List </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><dl class="reflist">
<dt><a class="anchor" id="_todo000072"></a>Member <a class="el" href="evaluate_8h.xhtml#a83156ae734e0a975b7498826dee5bee4">_gmx_sel_evaluate_subexpr</a>  (<a class="el" href="structgmx__sel__evaluate__t.xhtml" title="Data structure for passing information required during evaluation. ">gmx_sel_evaluate_t</a> *data, const <a class="el" href="namespacegmx.xhtml#a2804c9c82f2a9bd0ec94d3c2f1003f42" title="Smart pointer type for selection tree element pointers. ">gmx::SelectionTreeElementPointer</a> &amp;sel, <a class="el" href="structgmx__ana__index__t.xhtml" title="Stores a single index group. ">gmx_ana_index_t</a> *g)</dt>
<dd>The call to <a class="el" href="indexutil_8cpp.xhtml#a36418762a1d83eed47840281d779e312" title="Calculates the set difference between two sorted index groups. ">gmx_ana_index_difference()</a> can take quite a lot of unnecessary time if the subexpression is evaluated either several times for the same group or for completely distinct groups. However, in the majority of cases, these situations occur when <a class="el" href="evaluate_8cpp.xhtml#ac475341903c467650d7a6ee8fed4282b" title="Evaluates a subexpression when the evaluation group is static. ">_gmx_sel_evaluate_subexpr_staticeval()</a> can be used, so this should not be a major problem.  </dd>
<dt><a class="anchor" id="_todo000020"></a>Member <a class="el" href="pme-gpu-internal_8h.xhtml#afa408814d8c61c4e88c26ed74b27f97b">c_skipNeutralAtoms</a>  </dt>
<dd>Estimate performance differences.  </dd>
<dt><a class="anchor" id="_todo000019"></a>Member <a class="el" href="pme-gpu-internal_8h.xhtml#a60318df7520b83876d039831680929c8">c_usePadding</a>  </dt>
<dd>Estimate performance differences  </dd>
<dt><a class="anchor" id="_todo000078"></a>Member <a class="el" href="parser__internal_8h.xhtml#a62f90d9ec52c521531374502dccc7cc2">CHECK_SEL</a>  (sel)</dt>
<dd>Get rid of this macro. It should now be possible to handle all errors using exceptions.  </dd>
<dt><a class="anchor" id="_todo000093"></a>File <a class="el" href="clustsize_8cpp.xhtml">clustsize.cpp</a>  </dt>
<dd>These will be superseded by tests of the new style analysis modules. </dd>
<dt><a class="anchor" id="_todo000068"></a>File <a class="el" href="compiler_8cpp.xhtml">compiler.cpp</a>  </dt>
<dd><p class="startdd">Better error handling and memory management in error situations. At least, the main compilation function leaves the selection collection in a bad state if an error occurs.</p>
<p class="enddd">The memory usage could still be optimized. Use of memory pooling could still be extended, and a lot of redundant gmin/gmax data could be eliminated for complex arithmetic expressions. </p>
</dd>
<dt><a class="anchor" id="_todo000084"></a>Page <a class="el" href="page_module_selection_custom.xhtml">Custom selection methods</a>  </dt>
<dd>The modifier handling could be made more flexible and more generic; the current implementation does not allow many things which would be possible with slight changes in the internals of the library. </dd>
<dt><a class="anchor" id="_todo000059"></a>Member <a class="el" href="state_8h.xhtml#ae0050de065f8435f3a7f90c4a36dd4dd">df_history_t</a>  </dt>
<dd>Split out into microstate and observables history.  </dd>
<dt><a class="anchor" id="_todo000098"></a>Member <a class="el" href="dir__separator_8h.xhtml#a0920890c442b665b0c6609fa796e9047">DIR_SEPARATOR</a>  </dt>
<dd>Get rid of this (Redmine #950). It is not necessary for constructing paths on the systems that it currently supports, and is not reliable in parsing input paths either, since Windows needs to accept both instead of only DIR_SEPARATOR. At the very least, we should refactor the clients of this header so that they operate upon path objects rather than raw path strings.  </dd>
<dt><a class="anchor" id="_todo000017"></a>File <a class="el" href="domdec__network_8h.xhtml">domdec_network.h</a>  </dt>
<dd>Wrap the raw dd_bcast in md.cpp into a higher-level function in the domdec module, then this file can be module-internal. </dd>
<dt><a class="anchor" id="_todo000071"></a>File <a class="el" href="evaluate_8cpp.xhtml">evaluate.cpp</a>  </dt>
<dd>One of the major bottlenecks for selection performance is that all the evaluation is carried out for atoms. There are several cases when the evaluation could be done for residues or molecules instead, including keywords that select by residue and cases where residue centers are used as reference positions. Implementing this would require a mechanism for recognizing whether something can be evaluated by residue/molecule instead by atom, and converting selections by residue/molecule into selections by atom when necessary. </dd>
<dt><a class="anchor" id="_todo000054"></a>Member <a class="el" href="handlerestart_8cpp.xhtml#a87d603f29eae3a3e1ab7a6879ec247f4">exist_output_file</a>  (const char *fnm_cp, int nfile, const <a class="el" href="structt__filenm.xhtml" title="File name option definition for C code. ">t_filenm</a> fnm[])</dt>
<dd>This could be implemented sanely with a for loop.  </dd>
<dt><a class="anchor" id="_todo000015"></a>Member <a class="el" href="expfit_8h.xhtml#a560ea7d97277b9e0576776ec695fb9b3">fit_acf</a>  (int ncorr, int fitfn, const gmx_output_env_t *oenv, gmx_bool bVerbose, real tbeginfit, real tendfit, real dt, real c1[], real *fit)</dt>
<dd>check parameters  </dd>
<dt><a class="anchor" id="_todo000039"></a>Member <a class="el" href="listed-forces_8h.xhtml#af9092de62680856f5250dbef08056f74">ftype_is_bonded_potential</a>  (int ftype)</dt>
<dd>This function could go away when idef is not a big bucket of everything.  </dd>
<dt><a class="anchor" id="_todo000006"></a>Class <a class="el" href="classgmx_1_1AbstractAnalysisArrayData.xhtml">gmx::AbstractAnalysisArrayData</a>  </dt>
<dd>Add support for multiple data sets. </dd>
<dt><a class="anchor" id="_todo000001"></a>Class <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">gmx::AbstractAnalysisData</a>  </dt>
<dd>Improve the exception-handling semantics. In most cases, it doesn't make much sense to continue data processing after one module fails, but having the alternative would not hurt. </dd>
<dt><a class="anchor" id="_todo000002"></a>Member <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml#a8e6f762df563d577f8a1d34a35273952">gmx::AbstractAnalysisData::addColumnModule</a>  (int col, int span, AnalysisDataModulePointer module)</dt>
<dd><p class="startdd">This method doesn't currently work in all cases with multipoint data or with multiple data sets. In particular, if the added module requests storage and uses getDataFrame(), it will behave unpredictably (most likely asserts).</p>
<p class="enddd">Generalize this method to multiple data sets (e.g., for adding modules that only process a single data set). </p>
</dd>
<dt><a class="anchor" id="_todo000004"></a>Member <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml#ae095550bd347b42db3c49e064bc44228">gmx::AbstractAnalysisData::applyModule</a>  (IAnalysisDataModule *module)</dt>
<dd>Currently, this method may not work correctly if <code>module</code> requests storage (addModule() has the same problem if called after data is started).  </dd>
<dt><a class="anchor" id="_todo000062"></a>Member <a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a9aa8495e558f50edd35b80754a508052">gmx::AbstractOptionStorage::processSet</a>  ()=0</dt>
<dd>Improve the call semantics. </dd>
<dt><a class="anchor" id="_todo000005"></a>Class <a class="el" href="classgmx_1_1AnalysisData.xhtml">gmx::AnalysisData</a>  </dt>
<dd>Parallel implementation is not complete. </dd>
<dt><a class="anchor" id="_todo000010"></a>Member <a class="el" href="classgmx_1_1AnalysisDataPlotSettings.xhtml#aef8546966ea7b5238aa92d91a6df291b">gmx::AnalysisDataPlotSettings::plotFormat</a>  () const </dt>
<dd>Use a proper enum.  </dd>
<dt><a class="anchor" id="_todo000009"></a>Class <a class="el" href="classgmx_1_1AnalysisDataStorage.xhtml">gmx::AnalysisDataStorage</a>  </dt>
<dd>Proper multi-threaded implementation. </dd>
<dt><a class="anchor" id="_todo000075"></a>Class <a class="el" href="classgmx_1_1AnalysisNeighborhood.xhtml">gmx::AnalysisNeighborhood</a>  </dt>
<dd>Generalize the exclusion machinery to make it easier to use for other cases than atom-atom exclusions from the topology. </dd>
<dt><a class="anchor" id="_todo000076"></a>Class <a class="el" href="classgmx_1_1AnalysisNeighborhoodSearch.xhtml">gmx::AnalysisNeighborhoodSearch</a>  </dt>
<dd><p class="startdd">Make it such that reset() is not necessary to call in code that repeatedly assigns the result of AnalysisNeighborhood::initSearch() to the same variable (see <a class="el" href="sm__distance_8cpp.xhtml" title="Implements distance-based selection methods. ">sm_distance.cpp</a>).</p>
<p class="enddd">Consider removing minimumDistance(), as nearestPoint() already returns the distance. </p>
</dd>
<dt><a class="anchor" id="_todo000096"></a>Class <a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef&lt; T &gt;</a>  </dt>
<dd>This class is not complete. There are likely also methods missing (not required for current usage). </dd>
<dt><a class="anchor" id="_todo000012"></a>Class <a class="el" href="classgmx_1_1Awh.xhtml">gmx::Awh</a>  </dt>
<dd>Update parameter reading and checkpointing, when general C++ framework is ready.  </dd>
<dt><a class="anchor" id="_todo000013"></a>Member <a class="el" href="classgmx_1_1BiasParams.xhtml#a96a51eae4505718c235f144898884bea">gmx::BiasParams::isCheckHistogramForAnomaliesStep</a>  (gmx_int64_t step) const </dt>
<dd>Currently this function just calls isCheckCoveringStep but the checks could be done less frequently.  </dd>
<dt><a class="anchor" id="_todo000090"></a>Member <a class="el" href="namespacegmx.xhtml#a36a614356b557457126513747fbb559f">gmx::checkUserGpuIds</a>  (const gmx_gpu_info_t &amp;gpu_info, const std::vector&lt; int &gt; &amp;compatibleGpus, const std::vector&lt; int &gt; &amp;gpuIds)</dt>
<dd>Note that the selected GPUs can be different on each rank, and the IDs of compatible GPUs can be different on each node, so this routine ought to do communication to determine whether all ranks are able to proceed. Currently this relies on the MPI runtime to kill the other processes because GROMACS lacks the appropriate infrastructure to do a good job of coordinating error messages and behaviour across MPMD ranks and multiple simulations. </dd>
<dt><a class="anchor" id="_todo000097"></a>Member <a class="el" href="structgmx_1_1DataFileInfo.xhtml#a539535c0a378efd8cc95d7124fcfdec5">gmx::DataFileInfo::bFromDefaultDir</a>  </dt>
<dd>Consider replacing with an enum that identifies the source (current dir, GMXLIB, default).  </dd>
<dt><a class="anchor" id="_todo000099"></a>Class <a class="el" href="classgmx_1_1ExceptionInitializer.xhtml">gmx::ExceptionInitializer</a>  </dt>
<dd>With the exception of the reason string, information added with this class is not currently accessible through any public API, except for calling <a class="el" href="group__module__utility.xhtml#gac6287dc8a550a2d54429e44994e00e58" title="Formats a standard fatal error message for reporting an exception. ">printFatalErrorMessage()</a>, <a class="el" href="group__module__utility.xhtml#gac7703ad35b606758d2d12edc0a3d5217" title="Formats an error message for reporting an exception. ">formatExceptionMessageToString()</a> or <a class="el" href="group__module__utility.xhtml#gac5e6f6ec944fb2484d6f273c9a0ff495" title="Formats an error message for reporting an exception. ">formatExceptionMessageToFile()</a>. This is not implemented as there is not yet need for it, and it is not clear what would be the best alternative for the access. It should be possible to refactor the internal implementation to suit the needs of such external access without requiring changes in code that throws these exceptions. </dd>
<dt><a class="anchor" id="_todo000063"></a>Member <a class="el" href="classgmx_1_1FileNameOption.xhtml#aa182da8a00d4ff7556615cedc38a8de2">gmx::FileNameOption::libraryFile</a>  (bool bLibrary=true)</dt>
<dd>Currently, this flag only affects the help output. Callers must take care themselves to actually search the file in the library directories. It would be nicer to do this searching within the file name option implementation.  </dd>
<dt><a class="anchor" id="_todo000064"></a>Class <a class="el" href="classgmx_1_1FileNameOptionManager.xhtml">gmx::FileNameOptionManager</a>  </dt>
<dd>Most of the functionality in this class is specific to command line parsing, so it would be cleaner to replace this with an interface, and have the actual code in the <code>commandline</code> module. </dd>
<dt><a class="anchor" id="_todo000095"></a>Member <a class="el" href="namespacegmx.xhtml#a14ac652392d2a98ce5a3b3a3ca809206">gmx::getPageSize</a>  ()</dt>
<dd>Move this function into <a class="el" href="sysinfo_8cpp.xhtml" title="Implements functions from sysinfo.h. ">sysinfo.cpp</a> where other OS-specific code/includes live  </dd>
<dt><a class="anchor" id="_todo000100"></a>Member <a class="el" href="classgmx_1_1GromacsException.xhtml#a1bd116912e67c096ae949ddae85afe06">gmx::GromacsException::prependContext</a>  (const std::string &amp;context)</dt>
<dd>The added information is currently not accessible through what(), nor through any other means except for calling <a class="el" href="group__module__utility.xhtml#gac6287dc8a550a2d54429e44994e00e58" title="Formats a standard fatal error message for reporting an exception. ">printFatalErrorMessage()</a>, <a class="el" href="group__module__utility.xhtml#gac7703ad35b606758d2d12edc0a3d5217" title="Formats an error message for reporting an exception. ">formatExceptionMessageToString()</a> or <a class="el" href="group__module__utility.xhtml#gac5e6f6ec944fb2484d6f273c9a0ff495" title="Formats an error message for reporting an exception. ">formatExceptionMessageToFile()</a>. See ExceptionInitializer for more discussion.  </dd>
<dt><a class="anchor" id="_todo000061"></a>Member <a class="el" href="classgmx_1_1HelpWriterContext.xhtml#a6bec872f46ecd34601df72141fca3739">gmx::HelpWriterContext::setReplacement</a>  (const std::string &amp;search, const std::string &amp;replace)</dt>
<dd>Improve semantics if the same <code>search</code> item is set multiple times.  </dd>
<dt><a class="anchor" id="_todo000031"></a>Class <a class="el" href="classgmx_1_1HostAllocationPolicy.xhtml">gmx::HostAllocationPolicy</a>  </dt>
<dd>As a minor optimization, consider also having a stateless version of this policy, which might be slightly faster or more convenient to use in the cases where it is known at compile time that the allocation will be used to transfer to a GPU.  </dd>
<dt><a class="anchor" id="_todo000036"></a>Member <a class="el" href="namespacegmx.xhtml#a112b366b91e4bbca373f7491b272e0db">gmx::hwinfo_g</a>  </dt>
<dd>This should become a shared_ptr owned by e.g. Mdrunner::runner() that is shared across any threads as needed (e.g. for thread-MPI). That offers about the same run time performance as we get here, and avoids a lot of custom code.  </dd>
<dt><a class="anchor" id="_todo000057"></a>Class <a class="el" href="classgmx_1_1IForceProvider.xhtml">gmx::IForceProvider</a>  </dt>
<dd>Extend this interface with a virial container and flag if the virial is needed here </dd>
<dt><a class="anchor" id="_todo000007"></a>Member <a class="el" href="classgmx_1_1internal_1_1AnalysisDataStorageImpl.xhtml#a8dfd060c7a8f18c78a8e5ad4854ef000">gmx::internal::AnalysisDataStorageImpl::needStorage</a>  () const </dt>
<dd>This could be extended to non-multipoint data as well. </dd>
<dt><a class="anchor" id="_todo000008"></a>Member <a class="el" href="classgmx_1_1internal_1_1AnalysisDataStorageImpl.xhtml#ae5a3ef651453e7c82201e5ec01a29833">gmx::internal::AnalysisDataStorageImpl::pendingLimit_</a>  </dt>
<dd>Get rid of this alltogether, as it is no longer used much. </dd>
<dt><a class="anchor" id="_todo000065"></a>Class <a class="el" href="classgmx_1_1IOptionValueStore.xhtml">gmx::IOptionValueStore&lt; T &gt;</a>  </dt>
<dd>Try to make this more like a write-only interface, getting rid of the need to access the stored values through this interface. That would simplify things. </dd>
<dt><a class="anchor" id="_todo000045"></a>Class <a class="el" href="classgmx_1_1MDAtoms.xhtml">gmx::MDAtoms</a>  </dt>
<dd>Refactor this class and rename MDAtoms once the group scheme is removed.  </dd>
<dt><a class="anchor" id="_todo000105"></a>Class <a class="el" href="classgmx_1_1Mdrunner.xhtml">gmx::Mdrunner</a>  </dt>
<dd><p class="startdd">Most of the attributes should be declared by specific modules as command-line options. Accordingly, they do not conform to the naming scheme, because that would make for a lot of noise in the diff, only to have it change again when the options move to their modules.</p>
<p class="enddd">Preparing logging and MPI contexts could probably be a higher-level responsibility, so that an Mdrunner would get made without needing to re-initialize these components (as currently happens always for the master rank, and differently for the spawned ranks with thread-MPI).  </p>
</dd>
<dt><a class="anchor" id="_todo000107"></a>Member <a class="el" href="classgmx_1_1Mdrunner.xhtml#a04393f301711961546e1018294c1a3be">gmx::Mdrunner::reinitializeOnSpawnedThread</a>  ()</dt>
<dd>Can this be refactored so that the Mdrunner on a spawned thread is constructed ready to use?  </dd>
<dt><a class="anchor" id="_todo000066"></a>Member <a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987">gmx::OptionFlag</a>  </dt>
<dd>The flags related to default values are confusing, consider reorganizing them.  </dd>
<dt><a class="anchor" id="_todo000041"></a>Member <a class="el" href="namespacegmx.xhtml#a7ed9d94613445e3a616e7116786ed534">gmx::PaddedArrayRef</a>  </dt>
<dd>Find a more permanent solution that permits the update code to safely use a padded, aligned array-ref type.  </dd>
<dt><a class="anchor" id="_todo000040"></a>Member <a class="el" href="namespacegmx.xhtml#ab5162006582f166d58667a890f462eba">gmx::PaddedRVecVector</a>  </dt>
<dd><p class="startdd">Consider replacing the padding applied in resizePaddedRVecVector() by automated padding on resize() of the vector. </p>
<p class="enddd">Undo the move of <a class="el" href="allocator_8h.xhtml" title="Declares gmx::Allocator template whose allocation functionality is configured both by type of object ...">allocator.h</a> and <a class="el" href="alignedallocator_8h.xhtml" title="Declares allocation policy classes and allocators that are used to make library containers compatible...">alignedallocator.h</a> from the internal to be public API applied in Change-Id: Ifb8dacf, needed to use AlignedAllocationPolicy here, when replacing std::vector here.  </p>
</dd>
<dt><a class="anchor" id="_todo000101"></a>Member <a class="el" href="classgmx_1_1Regex.xhtml#aceab26e90155f03d222ce104b5243cc6">gmx::Regex::Regex</a>  (const char *value)</dt>
<dd>Consider whether some other exception type would be better.  </dd>
<dt><a class="anchor" id="_todo000089"></a>Member <a class="el" href="namespacegmx.xhtml#a9e7149c73e79faf42117ef7006229094">gmx::reportGpuUsage</a>  (const MDLogger &amp;mdlog, bool userSetGpuIds, const GpuTaskAssignments &amp;gpuTaskAssignmentOnRanksOfThisNode, size_t numGpuTasksOnThisNode, size_t numPpRanks, bool bPrintHostName)</dt>
<dd>It could be useful to report also whether any nodes differed, and in what way. </dd>
<dt><a class="anchor" id="_todo000081"></a>Member <a class="el" href="classgmx_1_1Selection.xhtml#aa7007210627e2b003a1ee0d54c02908a">gmx::Selection::setEvaluateVelocities</a>  (bool bEnabled)</dt>
<dd>Implement it such that in the above case, hasVelocities() will return false for such frames. </dd>
<dt><a class="anchor" id="_todo000082"></a>Class <a class="el" href="classgmx_1_1SelectionOption.xhtml">gmx::SelectionOption</a>  </dt>
<dd><p class="startdd">Support for specifying that an option accepts, e.g., two to four selections. Currently, only a fixed count or any number of selections is possible. In addition to allowing this in OptionTemplate, also SelectionOptionManager needs to be updated.</p>
<p class="enddd"></p>
</dd>
<dt><a class="anchor" id="_todo000092"></a>Member <a class="el" href="classgmx_1_1SurfaceAreaCalculator.xhtml#a394a6b0cd33620427f3ff8d2a86c62dd">gmx::SurfaceAreaCalculator::calculate</a>  (const rvec *x, const <a class="el" href="structt__pbc.xhtml" title="Structure containing info on periodic boundary conditions. ">t_pbc</a> *pbc, int nat, int index[], int flags, real *area, real *volume, real **at_area, real **lidots, int *n_dots) const </dt>
<dd>Make the output options more C++-like, in particular for the array outputs.  </dd>
<dt><a class="anchor" id="_todo000094"></a>Class <a class="el" href="classgmx_1_1test_1_1AbstractTrajectoryAnalysisModuleTestFixture.xhtml">gmx::test::AbstractTrajectoryAnalysisModuleTestFixture</a>  </dt>
<dd>Adding facilities to AnalysisData to check whether there are any output modules attached to the data object (directly or indirectly), marking the mocks as output modules, and using these checks in the tools instead of or in addition to the output file presence would be a superior. Also, the full file names should be deducible from the options. </dd>
<dt><a class="anchor" id="_todo000011"></a>Class <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml">gmx::test::AnalysisDataTestFixture</a>  </dt>
<dd>Support for arbitrary AnalysisDataValues (errors and missing values). </dd>
<dt><a class="anchor" id="_todo000111"></a>Class <a class="el" href="classgmx_1_1test_1_1anonymous__namespace_02pmetest_8cpp_03_1_1PmeTest.xhtml">gmx::test::anonymous_namespace{pmetest.cpp}::PmeTest</a>  </dt>
<dd>Consider also using GpuTest class.  </dd>
<dt><a class="anchor" id="_todo000117"></a>Class <a class="el" href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml">gmx::test::FloatingPointTolerance</a>  </dt>
<dd>The factory methods that take ULP difference could be better formulated as methods that take the acceptable number of incorrect bits and/or the number of accurate bits. </dd>
<dt><a class="anchor" id="_todo000051"></a>Class <a class="el" href="classgmx_1_1test_1_1SettleTest.xhtml">gmx::test::SettleTest</a>  </dt>
<dd><p class="startdd">This also tests that if the calling code requires velocities and virial updates, that those outputs do change, but does not test that those changes are correct.</p>
<p class="enddd">Only no-PBC and cubic-PBC are tested here, but the correct function of the SIMD version of set_pbx_auic in all cases should be tested elsewhere.  </p>
</dd>
<dt><a class="anchor" id="_todo000114"></a>Class <a class="el" href="classgmx_1_1test_1_1TerminationHelper.xhtml">gmx::test::TerminationHelper</a>  </dt>
<dd>This approach is not very elegant, but "stuff doesn't
segfault or give a fatal error" is a useful result. We can improve it when we can mock out more <a class="el" href="namespacegmx.xhtml#a19f6a93a5bf9ce1e585bebf205d6f6ea" title="MD simulations. ">do_md()</a> functionality. Before that, we'd probably prefer not to run this test case in per-patchset verification, but this is the best we can do for now. </dd>
<dt><a class="anchor" id="_todo000115"></a>Member <a class="el" href="namespacegmx_1_1test.xhtml#a26d94b8bbe10b3fa39e5c03ef3833b4a">gmx::test::throwIfNonEmptyAndOnlyWhitespace</a>  (const std::string &amp;s, const char *id)</dt>
<dd>Eliminate this limitation of TinyXML2. See e.g. <a href="https://github.com/leethomason/tinyxml2/issues/432">https://github.com/leethomason/tinyxml2/issues/432</a>  </dd>
<dt><a class="anchor" id="_todo000104"></a>Member <a class="el" href="classgmx_1_1TextWriter.xhtml#a87a974330d5791f7410e6b20e516d5ae">gmx::TextWriter::wrapperSettings</a>  ()</dt>
<dd>Wrapping is not currently implemented for code that writes partial lines with writeString().  </dd>
<dt><a class="anchor" id="_todo000067"></a>Class <a class="el" href="classgmx_1_1TimeUnitManager.xhtml">gmx::TimeUnitManager</a>  </dt>
<dd><p class="startdd">This class is independent of the options implementation. To ease reuse, it could be moved to the utility module, and only TimeUnitBehavior left here.</p>
<p class="enddd"></p>
</dd>
<dt><a class="anchor" id="_todo000091"></a>Class <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">gmx::TrajectoryAnalysisSettings</a>  </dt>
<dd>Remove plain flags from the public interface. </dd>
<dt><a class="anchor" id="_todo000037"></a>Class <a class="el" href="structgmx__hw__opt__t.xhtml">gmx_hw_opt_t</a>  </dt>
<dd>During mdrunner(), if the user has left any of these values at their defaults (which tends to mean "choose automatically"), then those values are over-written with the result of such automation. This creates problems for the subsequent code in knowing what was done, why, and reporting correctly to the user. Find a way to improve this.  </dd>
<dt><a class="anchor" id="_todo000028"></a>Member <a class="el" href="gpuregiontimer_8h.xhtml#a4f8e3bfb11af73c5e9c702d844004f2c">GpuFramework</a>  </dt>
<dd>Move somewhere general?  </dd>
<dt><a class="anchor" id="_todo000029"></a>Class <a class="el" href="structGpuTraits.xhtml">GpuTraits&lt; GpuFramework &gt;</a>  </dt>
<dd>Move somewhere general?  </dd>
<dt><a class="anchor" id="_todo000014"></a>File <a class="el" href="grid_8h.xhtml">grid.h</a>  </dt>
<dd>: Replace this by a more generic grid class once that is available. </dd>
<dt><a class="anchor" id="_todo000108"></a>File <a class="el" href="programs_2mdrun_2tests_2grompp_8cpp.xhtml">grompp.cpp</a>  </dt>
<dd>Refactor SimulationRunner to split off SimulationPreparer, so that integration tests of grompp can stand apart from tests of mdrun. </dd>
<dt><a class="anchor" id="_todo000053"></a>File <a class="el" href="handlerestart_8cpp.xhtml">handlerestart.cpp</a>  </dt>
<dd>Clean up the error-prone logic here. Add doxygen. </dd>
<dt><a class="anchor" id="_todo000056"></a>File <a class="el" href="handlerestart_8h.xhtml">handlerestart.h</a>  </dt>
<dd>There may be other code in <a class="el" href="runner_8cpp.xhtml" title="Implements the MD runner routine calling all integrators. ">runner.cpp</a> etc. that can usefully live here </dd>
<dt><a class="anchor" id="_todo000058"></a>Class <a class="el" href="classhistory__t.xhtml">history_t</a>  </dt>
<dd>Rename this with a more descriptive name.  </dd>
<dt><a class="anchor" id="_todo000030"></a>File <a class="el" href="hostallocator_8h.xhtml">hostallocator.h</a>  </dt>
<dd>This should not be in the public API, but it needs to be for the moment because <a class="el" href="state_8h.xhtml" title="This file contains the definition of the microstate of the simulated system. ">state.h</a> is in that API. </dd>
<dt><a class="anchor" id="_todo000087"></a>File <a class="el" href="tests_2indexutil_8cpp.xhtml">indexutil.cpp</a>  </dt>
<dd>Tests for other functions, at least the set operations. </dd>
<dt><a class="anchor" id="_todo000042"></a>File <a class="el" href="tests_2invertmatrix_8cpp.xhtml">invertmatrix.cpp</a>  </dt>
<dd>Test error conditions when they throw exceptions </dd>
<dt><a class="anchor" id="_todo000018"></a>File <a class="el" href="legacyenergy_8cpp.xhtml">legacyenergy.cpp</a>  </dt>
<dd>These will be superseded by tests of the energyanalysis modules. </dd>
<dt><a class="anchor" id="_todo000073"></a>File <a class="el" href="mempool_8h.xhtml">mempool.h</a>  </dt>
<dd>Document these functions. </dd>
<dt><a class="anchor" id="_todo000016"></a>Group <a class="el" href="group__module__domdec.xhtml">module_domdec</a>  </dt>
<dd>Get domdec stuff out of mdtypes/commrec.h </dd>
<dt><a class="anchor" id="_todo000109"></a>File <a class="el" href="multisimtest_8cpp.xhtml">multisimtest.cpp</a>  </dt>
<dd>Test mdrun -multidir also </dd>
<dt><a class="anchor" id="_todo000074"></a>File <a class="el" href="nbsearch_8cpp.xhtml">nbsearch.cpp</a>  </dt>
<dd>The grid implementation could still be optimized in several different ways:<ul>
<li>A better heuristic for selecting the grid size or falling back to a simple all-pairs search.</li>
<li>A multi-level grid implementation could be used to be able to use small grids for short cutoffs with very inhomogeneous particle distributions without a memory cost. </li>
</ul>
</dd>
<dt><a class="anchor" id="_todo000088"></a>File <a class="el" href="tests_2nbsearch_8cpp.xhtml">nbsearch.cpp</a>  </dt>
<dd>Increase coverage of these tests for different corner cases: other PBC cases than full 3D, large cutoffs (larger than half the box size), etc. At least some of these probably don't work correctly. </dd>
<dt><a class="anchor" id="_todo000035"></a>Member <a class="el" href="oclutils_8h.xhtml#a820dcad2db335a788636545ba5769adf">ocl_pmalloc</a>  (void **h_ptr, size_t nbytes)</dt>
<dd>This function should allocate page-locked memory to help reduce D2H and H2D transfer times, similar with pmalloc from pmalloc_cuda.cu. </dd>
<dt><a class="anchor" id="_todo000038"></a>Member <a class="el" href="bonded_8cpp.xhtml#a0b5b07882ef47de8bab88e30660c593b">pbc_rvec_sub</a>  (const <a class="el" href="structt__pbc.xhtml" title="Structure containing info on periodic boundary conditions. ">t_pbc</a> *pbc, const rvec xi, const rvec xj, rvec dx)</dt>
<dd>This kind of code appears in many places. Consolidate it  </dd>
<dt><a class="anchor" id="_todo000021"></a>File <a class="el" href="pme-gpu-types_8h.xhtml">pme-gpu-types.h</a>  </dt>
<dd>Due to Gerrit workflow and time constraints, some renaming/refactoring which does not impair the performance will be performed once most of the initial PME CUDA implementation is merged into the master branch (likely, after release 2017). This should include: &ndash; bringing the function names up to guidelines &ndash; <a class="el" href="structPmeGpuSettings.xhtml" title="The PME GPU settings structure, included in the main PME GPU structure by value. ">PmeGpuSettings</a> -&gt; PmeGpuTasks &ndash; refining GPU notation application (#2053) &ndash; renaming coefficients to charges (?) </dd>
<dt><a class="anchor" id="_todo000026"></a>Member <a class="el" href="pme_8h.xhtml#a9faddde52f5a636410141f52cc95d3e1">pme_gpu_task_enabled</a>  (const gmx_pme_t *pme)</dt>
<dd>This is a rather static data that should be managed by the hardware assignment manager. For now, it is synonymous with the active PME codepath (in the absence of dynamic switching). </dd>
<dt><a class="anchor" id="_todo000025"></a>Member <a class="el" href="pme_8h.xhtml#a9cfbe9fa691aabaf1a9e10fa06858c96">pme_run_mode</a>  (const gmx_pme_t *pme)</dt>
<dd>This is a rather static data that should be managed by the higher level task scheduler. </dd>
<dt><a class="anchor" id="_todo000023"></a>Member <a class="el" href="structPmeGpu.xhtml#a592a545094c1ba0847e5e5223c981cc9">PmeGpu::kernelParams</a>  </dt>
<dd>Test whether this should be copied to the constant GPU memory once for each computation (or even less often with no box updates) instead of being an argument.  </dd>
<dt><a class="anchor" id="_todo000024"></a>Member <a class="el" href="pme_8h.xhtml#adc082ed1af9a4868af13352373ed3791">PmeRunMode</a>  </dt>
<dd>: make this enum class with gmx_pme_t C++ refactoring  </dd>
<dt><a class="anchor" id="_todo000022"></a>Member <a class="el" href="structPmeShared.xhtml#ab9b6225eeb3328d7aac146cbf5f2fd70">PmeShared::previousBox</a>  </dt>
<dd><p class="startdd">Manage this on higher level. </p>
<p class="enddd">Alternatively, when this structure is used by CPU PME code, make use of this field there as well.  </p>
</dd>
<dt><a class="anchor" id="_todo000110"></a>File <a class="el" href="pmetest_8cpp.xhtml">pmetest.cpp</a>  </dt>
<dd><p class="startdd">Extend and generalize this for more multi-rank tests (-npme 0, -npme 2, etc). </p>
<p class="enddd">Implement death tests (e.g. for PME GPU decomposition). </p>
</dd>
<dt><a class="anchor" id="_todo000079"></a>File <a class="el" href="poscalc_8cpp.xhtml">poscalc.cpp</a>  </dt>
<dd><p class="startdd">There is probably some room for optimization in the calculation of positions with bases. In particular, the current implementation may do a lot of unnecessary copying. The interface would need to be changed to make it possible to use the same output positions for several calculations.</p>
<p class="enddd">The current algorithm for setting up base calculations could be improved in cases when there are calculations that cannot use a common base but still overlap partially (e.g., with three calculations A, B, and C such that A could use both B and C as a base, but B and C cannot use the same base). Setting up the bases in an optimal manner in every possible situation can be quite difficult unless several bases are allowed for one calculation, but better heuristics could probably be implemented. For best results, the setup should probably be postponed (at least partially) to gmx_ana_poscalc_init_eval(). </p>
</dd>
<dt><a class="anchor" id="_todo000055"></a>Member <a class="el" href="handlerestart_8cpp.xhtml#a27e1d88683a0ec4f57101bca0c917433">read_checkpoint_data</a>  (const char *filename, int *simulation_part, t_commrec *cr, gmx_bool bTryToAppendFiles, int nfile, const <a class="el" href="structt__filenm.xhtml" title="File name option definition for C code. ">t_filenm</a> fnm[], const char *part_suffix, gmx_bool *bAddPart, bool *bDoAppendFiles)</dt>
<dd>Clean this up (next patch) </dd>
<dt><a class="anchor" id="_todo000083"></a>Member <a class="el" href="selelem_8h.xhtml#a6fee1910b915d2f6e873f134e297ab47">SEL_ALLOCVAL</a>  </dt>
<dd>This flag overlaps with the function of <code>v.nalloc</code> field, and could probably be removed, making memory management simpler. Currently, the <code>v.nalloc</code> field is not kept up-to-date in all cases when this flag is changed and is used in places where this flag is not, so this would require a careful investigation of the selection code.  </dd>
<dt><a class="anchor" id="_todo000070"></a>Page <a class="el" href="page_module_selection_compiler.xhtml">Selection compilation</a>  </dt>
<dd>Some combinations of method parameter flags are not yet properly treated by the compiler or the evaluation functions in <a class="el" href="evaluate_8cpp.xhtml" title="Implements functions in evaluate.h. ">evaluate.cpp</a>. All the ones used by currently implemented methods should work, but new combinations might not. </dd>
<dt><a class="anchor" id="_todo000102"></a>Member <a class="el" href="smalloc_8h.xhtml#ab3d98b1efa6c2b42d2c0d216eafafec5">set_over_alloc_dd</a>  (gmx_bool set)</dt>
<dd>This is mdrun-specific, so it might be better to put this and <a class="el" href="smalloc_8h.xhtml#af1533c63c1d40c5bb9bfaaa6d898369a" title="Returns new allocation count for domain decomposition allocations. ">over_alloc_dd()</a> much higher up.  </dd>
<dt><a class="anchor" id="_todo000049"></a>File <a class="el" href="simulationsignal_8cpp.xhtml">simulationsignal.cpp</a>  </dt>
<dd>Move this to mdrunutility module alongside gathering multi-simulation communication infrastructure there. </dd>
<dt><a class="anchor" id="_todo000050"></a>File <a class="el" href="simulationsignal_8h.xhtml">simulationsignal.h</a>  </dt>
<dd>Move this to mdrunutility module alongside gathering multi-simulation communication infrastructure there. </dd>
<dt><a class="anchor" id="_todo000085"></a>File <a class="el" href="sm__insolidangle_8cpp.xhtml">sm_insolidangle.cpp</a>  </dt>
<dd><p class="startdd">The implementation could be optimized quite a bit.</p>
<p class="enddd">Move the covered fraction stuff somewhere else and make it more generic (along the lines it is handled in selection.h and trajana.h in the old C API). </p>
</dd>
<dt><a class="anchor" id="_todo000103"></a>File <a class="el" href="snprintf_8h.xhtml">snprintf.h</a>  </dt>
<dd>When all callers of snprintf compile as C++, perhaps use <a class="el" href="group__module__utility.xhtml#gaed06df18ca6f9fc3f42bad9ea4d7e025" title="Formats a string (snprintf() wrapper). ">gmx::formatString()</a> everywhere instead of snprintf. </dd>
<dt><a class="anchor" id="_todo000060"></a>Class <a class="el" href="classt__state.xhtml">t_state</a>  </dt>
<dd>Move pure observables history to <a class="el" href="structObservablesHistory.xhtml" title="Observables history, for writing/reading to/from checkpoint file. ">ObservablesHistory</a>.  </dd>
<dt><a class="anchor" id="_todo000116"></a>File <a class="el" href="testasserts_8h.xhtml">testasserts.h</a>  </dt>
<dd><p class="startdd">The implementation is somewhat ugly, and accesses some Google Test internals. Could be nice to clean it up a bit.</p>
<p class="enddd"></p>
</dd>
</dl>
</div></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:57:23 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
