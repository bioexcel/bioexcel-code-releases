<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/gpu_utils/oclutils.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_8a21c46af9718d1f610eb513153099d7.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a46192700e9e8ed44c648f0a55ee9a53.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_cbbda348be622d4188e9f9890e0fe79d.xhtml">gpu_utils</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">oclutils.h File Reference<div class="ingroups"><a class="el" href="group__group__libraryapi.xhtml">Library API</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;string&gt;</code><br/>
<code>#include &quot;<a class="el" href="gmxopencl_8h.xhtml">gromacs/gpu_utils/gmxopencl.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="gmxassert_8h.xhtml">gromacs/utility/gmxassert.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for oclutils.h:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="oclutils_8h__incl.svg" width="668" height="291"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><div class="textblock"><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> This graph shows which files directly or indirectly include this file:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="oclutils_8h__dep__incl.svg" width="1551" height="603"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Declare utility routines for OpenCL. </p>
<dl class="section author"><dt>Author</dt><dd>Anca Hamuraru <a href="#" onclick="location.href='mai'+'lto:'+'anc'+'a@'+'str'+'ea'+'mco'+'mp'+'uti'+'ng'+'.eu'; return false;">anca@<span style="display: none;">.nosp@m.</span>stre<span style="display: none;">.nosp@m.</span>amcom<span style="display: none;">.nosp@m.</span>puti<span style="display: none;">.nosp@m.</span>ng.eu</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structocl__gpu__id__t.xhtml">ocl_gpu_id_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL GPU device identificator.  <a href="structocl__gpu__id__t.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgmx__device__info__t.xhtml">gmx_device_info_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL device information.  <a href="structgmx__device__info__t.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgmx__device__runtime__data__t.xhtml">gmx_device_runtime_data_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL GPU runtime data.  <a href="structgmx__device__runtime__data__t.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a10849a150bcdfa716f8adaf20cfaabb7"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="oclutils_8h.xhtml#a10849a150bcdfa716f8adaf20cfaabb7">ocl_vendor_id_t</a> { <b>OCL_VENDOR_NVIDIA</b> = 0, 
<b>OCL_VENDOR_AMD</b>, 
<b>OCL_VENDOR_INTEL</b>, 
<b>OCL_VENDOR_UNKNOWN</b>
 }</td></tr>
<tr class="memdesc:a10849a150bcdfa716f8adaf20cfaabb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL vendor IDs. <br/></td></tr>
<tr class="separator:a10849a150bcdfa716f8adaf20cfaabb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a6a7a01c9399a761d8fec8cd8123d7ca9"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="oclutils_8h.xhtml#a6a7a01c9399a761d8fec8cd8123d7ca9">ocl_copy_D2H</a> (void *h_dest, cl_mem d_src, size_t offset, size_t bytes, <a class="el" href="gpu__utils_8h.xhtml#adc305319540d3e36bec5adedeec9645c">GpuApiCallBehavior</a> transferKind, cl_command_queue command_queue, cl_event *copy_event)</td></tr>
<tr class="memdesc:a6a7a01c9399a761d8fec8cd8123d7ca9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Launches synchronous or asynchronous device to host memory copy.  <a href="#a6a7a01c9399a761d8fec8cd8123d7ca9">More...</a><br/></td></tr>
<tr class="separator:a6a7a01c9399a761d8fec8cd8123d7ca9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7fa62d677b4780005d6ab88268291c3"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="oclutils_8h.xhtml#ac7fa62d677b4780005d6ab88268291c3">ocl_copy_D2H_async</a> (void *h_dest, cl_mem d_src, size_t offset, size_t bytes, cl_command_queue command_queue, cl_event *copy_event)</td></tr>
<tr class="memdesc:ac7fa62d677b4780005d6ab88268291c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Launches asynchronous device to host memory copy.  <a href="#ac7fa62d677b4780005d6ab88268291c3">More...</a><br/></td></tr>
<tr class="separator:ac7fa62d677b4780005d6ab88268291c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca67b8c5b0888638281ad4f4852db58c"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="oclutils_8h.xhtml#aca67b8c5b0888638281ad4f4852db58c">ocl_copy_H2D</a> (cl_mem d_dest, void *h_src, size_t offset, size_t bytes, <a class="el" href="gpu__utils_8h.xhtml#adc305319540d3e36bec5adedeec9645c">GpuApiCallBehavior</a> transferKind, cl_command_queue command_queue, cl_event *copy_event)</td></tr>
<tr class="memdesc:aca67b8c5b0888638281ad4f4852db58c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Launches synchronous or asynchronous host to device memory copy.  <a href="#aca67b8c5b0888638281ad4f4852db58c">More...</a><br/></td></tr>
<tr class="separator:aca67b8c5b0888638281ad4f4852db58c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa350f06928478dd3a9f3939b393363e"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="oclutils_8h.xhtml#aaa350f06928478dd3a9f3939b393363e">ocl_copy_H2D_async</a> (cl_mem d_dest, void *h_src, size_t offset, size_t bytes, cl_command_queue command_queue, cl_event *copy_event)</td></tr>
<tr class="memdesc:aaa350f06928478dd3a9f3939b393363e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Launches asynchronous host to device memory copy.  <a href="#aaa350f06928478dd3a9f3939b393363e">More...</a><br/></td></tr>
<tr class="separator:aaa350f06928478dd3a9f3939b393363e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40ffa70010dd8cd012bb267f440397f1"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a40ffa70010dd8cd012bb267f440397f1"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="oclutils_8h.xhtml#a40ffa70010dd8cd012bb267f440397f1">ocl_copy_H2D_sync</a> (cl_mem d_dest, void *h_src, size_t offset, size_t bytes, cl_command_queue command_queue)</td></tr>
<tr class="memdesc:a40ffa70010dd8cd012bb267f440397f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Launches synchronous host to device memory copy. <br/></td></tr>
<tr class="separator:a40ffa70010dd8cd012bb267f440397f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a820dcad2db335a788636545ba5769adf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="oclutils_8h.xhtml#a820dcad2db335a788636545ba5769adf">ocl_pmalloc</a> (void **h_ptr, size_t nbytes)</td></tr>
<tr class="memdesc:a820dcad2db335a788636545ba5769adf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate host memory in malloc style.  <a href="#a820dcad2db335a788636545ba5769adf">More...</a><br/></td></tr>
<tr class="separator:a820dcad2db335a788636545ba5769adf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44d6e2bc98cadbcb22619668bee73ebe"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="oclutils_8h.xhtml#a44d6e2bc98cadbcb22619668bee73ebe">ocl_pfree</a> (void *h_ptr)</td></tr>
<tr class="memdesc:a44d6e2bc98cadbcb22619668bee73ebe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free host memory in malloc style.  <a href="#a44d6e2bc98cadbcb22619668bee73ebe">More...</a><br/></td></tr>
<tr class="separator:a44d6e2bc98cadbcb22619668bee73ebe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1393b72bfedda92c51c2205085c4c6f0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1393b72bfedda92c51c2205085c4c6f0"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="oclutils_8h.xhtml#a1393b72bfedda92c51c2205085c4c6f0">ocl_get_error_string</a> (cl_int error)</td></tr>
<tr class="memdesc:a1393b72bfedda92c51c2205085c4c6f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert error code to diagnostic string. <br/></td></tr>
<tr class="separator:a1393b72bfedda92c51c2205085c4c6f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0573f2b11e130ccba28ba0bee196232"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="oclutils_8h.xhtml#ac0573f2b11e130ccba28ba0bee196232">gpuStreamSynchronize</a> (cl_command_queue s)</td></tr>
<tr class="memdesc:ac0573f2b11e130ccba28ba0bee196232"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls clFinish() in the stream <code>s</code>.  <a href="#ac0573f2b11e130ccba28ba0bee196232">More...</a><br/></td></tr>
<tr class="separator:ac0573f2b11e130ccba28ba0bee196232"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3232a315c3aab7e6f36a1af65c2f1547"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="oclutils_8h.xhtml#a3232a315c3aab7e6f36a1af65c2f1547">haveStreamTasksCompleted</a> (cl_command_queue s)</td></tr>
<tr class="memdesc:a3232a315c3aab7e6f36a1af65c2f1547"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pretend to synchronize an OpenCL stream (dummy implementation).  <a href="#a3232a315c3aab7e6f36a1af65c2f1547">More...</a><br/></td></tr>
<tr class="separator:a3232a315c3aab7e6f36a1af65c2f1547"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ac0573f2b11e130ccba28ba0bee196232"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gpuStreamSynchronize </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calls clFinish() in the stream <code>s</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>stream to synchronize with </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a3232a315c3aab7e6f36a1af65c2f1547"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool haveStreamTasksCompleted </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Pretend to synchronize an OpenCL stream (dummy implementation). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>queue to check</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if all tasks enqueued in the stream <code>s</code> (at the time of this call) have completed. </dd></dl>

</div>
</div>
<a class="anchor" id="a6a7a01c9399a761d8fec8cd8123d7ca9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ocl_copy_D2H </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>h_dest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>d_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="gpu__utils_8h.xhtml#adc305319540d3e36bec5adedeec9645c">GpuApiCallBehavior</a>&#160;</td>
          <td class="paramname"><em>transferKind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_event *&#160;</td>
          <td class="paramname"><em>copy_event</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Launches synchronous or asynchronous device to host memory copy. </p>
<p>If copy_event is not NULL, on return it will contain an event object identifying this particular device to host operation. The event can further be used to queue a wait for this operation or to query profiling information. </p>

</div>
</div>
<a class="anchor" id="ac7fa62d677b4780005d6ab88268291c3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ocl_copy_D2H_async </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>h_dest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>d_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_event *&#160;</td>
          <td class="paramname"><em>copy_event</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Launches asynchronous device to host memory copy. </p>
<p>If copy_event is not NULL, on return it will contain an event object identifying this particular host to device operation. The event can further be used to queue a wait for this operation or to query profiling information. </p>

</div>
</div>
<a class="anchor" id="aca67b8c5b0888638281ad4f4852db58c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ocl_copy_H2D </td>
          <td>(</td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>d_dest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>h_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="gpu__utils_8h.xhtml#adc305319540d3e36bec5adedeec9645c">GpuApiCallBehavior</a>&#160;</td>
          <td class="paramname"><em>transferKind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_event *&#160;</td>
          <td class="paramname"><em>copy_event</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Launches synchronous or asynchronous host to device memory copy. </p>
<p>If copy_event is not NULL, on return it will contain an event object identifying this particular host to device operation. The event can further be used to queue a wait for this operation or to query profiling information. </p>

</div>
</div>
<a class="anchor" id="aaa350f06928478dd3a9f3939b393363e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ocl_copy_H2D_async </td>
          <td>(</td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>d_dest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>h_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_event *&#160;</td>
          <td class="paramname"><em>copy_event</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Launches asynchronous host to device memory copy. </p>
<p>If copy_event is not NULL, on return it will contain an event object identifying this particular host to device operation. The event can further be used to queue a wait for this operation or to query profiling information. </p>

</div>
</div>
<a class="anchor" id="a44d6e2bc98cadbcb22619668bee73ebe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ocl_pfree </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>h_ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Free host memory in malloc style. </p>
<p>Free host memory in malloc style.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">h_ptr</td><td>Buffer allocated with ocl_pmalloc that needs to be freed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a820dcad2db335a788636545ba5769adf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ocl_pmalloc </td>
          <td>(</td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>h_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>nbytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocate host memory in malloc style. </p>
<p>Allocate host memory in malloc style.</p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000035">Todo:</a></b></dt><dd>This function should allocate page-locked memory to help reduce D2H and H2D transfer times, similar with pmalloc from pmalloc_cuda.cu.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">h_ptr</td><td>Pointer where to store the address of the newly allocated buffer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nbytes</td><td>Size in bytes of the buffer to be allocated. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:57:16 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
