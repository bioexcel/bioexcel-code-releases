<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/utility/smalloc.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_8a21c46af9718d1f610eb513153099d7.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a46192700e9e8ed44c648f0a55ee9a53.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_a64a619a73689309b11b91ae52c63e36.xhtml">utility</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">smalloc.h File Reference<div class="ingroups"><a class="el" href="group__group__publicapi.xhtml">Public API</a> &#124; <a class="el" href="group__module__utility.xhtml">Low-Level Utilities (utility)</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;stddef.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="basedefinitions_8h.xhtml">gromacs/utility/basedefinitions.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for smalloc.h:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="smalloc_8h__incl.svg" width="315" height="202"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>C memory allocation routines for GROMACS. </p>
<p>This header provides macros <a class="el" href="smalloc_8h.xhtml#a11f5e6d285a313414a895fb84c8c7194" title="Allocates memory for a given number of elements. ">snew()</a>, <a class="el" href="smalloc_8h.xhtml#a7fceb0e6af50dcbbb99b270951be060e" title="Reallocates memory for a given number of elements. ">srenew()</a>, <a class="el" href="smalloc_8h.xhtml#a435ad4efd4f0ff20e7ade4cc86e2969c" title="Allocates memory for a given number of bytes. ">smalloc()</a>, and <a class="el" href="smalloc_8h.xhtml#acd9f9223d6d8cad01c8f42a416d3292d" title="Frees memory referenced by ptr. ">sfree()</a> for C memory management. Additionally, <a class="el" href="smalloc_8h.xhtml#a5288c209907ae6db0870ce0412103d0c" title="Allocates aligned memory for a given number of elements. ">snew_aligned()</a> and <a class="el" href="smalloc_8h.xhtml#a746540f663a9e22da12123b3edaaefef" title="Frees aligned memory referenced by ptr. ">sfree_aligned()</a> are provided for managing memory with a specified byte alignment.</p>
<p>If an allocation fails, the program is halted by calling <a class="el" href="fatalerror_8h.xhtml#a3f6ee0e1ac19bfb1ebb1bbdd0b1e3852" title="Fatal error reporting routine for GROMACS. ">gmx_fatal()</a>, which outputs source file and line number and the name of the variable involved. This frees calling code from the trouble of checking the result of the allocations everywhere. It also provides a location for centrally logging memory allocations for diagnosing memory usage (currently can only enabled by changing the source code). Additionally, <a class="el" href="smalloc_8h.xhtml#acd9f9223d6d8cad01c8f42a416d3292d" title="Frees memory referenced by ptr. ">sfree()</a> works also with a <code>NULL</code> parameter, which standard free() does not.</p>
<p>The macros forward the calls to functions <a class="el" href="smalloc_8h.xhtml#a6e678051bdba16b4a5db399c8cc0c128" title="GROMACS wrapper for malloc(). ">save_malloc()</a>, <a class="el" href="smalloc_8h.xhtml#a6e6d52179c08b1acafb1e2dcb3aadd23" title="GROMACS wrapper for calloc(). ">save_calloc()</a>, <a class="el" href="smalloc_8h.xhtml#a50f9a1ae3317f66f3bb40f25fe9bd6ac" title="GROMACS wrapper for realloc(). ">save_realloc()</a>, <a class="el" href="smalloc_8h.xhtml#a1a8ebd96b293ca1f67b3dd41ff1eb43a" title="GROMACS wrapper for free(). ">save_free()</a>, <a class="el" href="smalloc_8h.xhtml#a073f66115e277b397e07c2ad86ee4075" title="GROMACS wrapper for allocating zero-initialized aligned memory. ">save_calloc_aligned()</a>, and <a class="el" href="smalloc_8h.xhtml#ae35d52a2d595ae960055674b4a0d566a" title="GROMACS wrapper for freeing aligned memory. ">save_free_aligned()</a>. There are a few low-level locations in GROMACS that call these directly, but generally the macros should be used. <a class="el" href="smalloc_8h.xhtml#a70925c108d1c6a8be40614483a58825b" title="GROMACS wrapper for allocating aligned memory. ">save_malloc_aligned()</a> exists for this purpose, although there is no macro to invoke it. </p>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:a11f5e6d285a313414a895fb84c8c7194"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#a11f5e6d285a313414a895fb84c8c7194">snew</a>(ptr, nelem)</td></tr>
<tr class="memdesc:a11f5e6d285a313414a895fb84c8c7194"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates memory for a given number of elements.  <a href="#a11f5e6d285a313414a895fb84c8c7194">More...</a><br/></td></tr>
<tr class="separator:a11f5e6d285a313414a895fb84c8c7194"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fceb0e6af50dcbbb99b270951be060e"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#a7fceb0e6af50dcbbb99b270951be060e">srenew</a>(ptr, nelem)</td></tr>
<tr class="memdesc:a7fceb0e6af50dcbbb99b270951be060e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reallocates memory for a given number of elements.  <a href="#a7fceb0e6af50dcbbb99b270951be060e">More...</a><br/></td></tr>
<tr class="separator:a7fceb0e6af50dcbbb99b270951be060e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a435ad4efd4f0ff20e7ade4cc86e2969c"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#a435ad4efd4f0ff20e7ade4cc86e2969c">smalloc</a>(ptr, size)</td></tr>
<tr class="memdesc:a435ad4efd4f0ff20e7ade4cc86e2969c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates memory for a given number of bytes.  <a href="#a435ad4efd4f0ff20e7ade4cc86e2969c">More...</a><br/></td></tr>
<tr class="separator:a435ad4efd4f0ff20e7ade4cc86e2969c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5288c209907ae6db0870ce0412103d0c"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#a5288c209907ae6db0870ce0412103d0c">snew_aligned</a>(ptr, nelem, alignment)</td></tr>
<tr class="memdesc:a5288c209907ae6db0870ce0412103d0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates aligned memory for a given number of elements.  <a href="#a5288c209907ae6db0870ce0412103d0c">More...</a><br/></td></tr>
<tr class="separator:a5288c209907ae6db0870ce0412103d0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd9f9223d6d8cad01c8f42a416d3292d"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#acd9f9223d6d8cad01c8f42a416d3292d">sfree</a>(ptr)</td></tr>
<tr class="memdesc:acd9f9223d6d8cad01c8f42a416d3292d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees memory referenced by <code>ptr</code>.  <a href="#acd9f9223d6d8cad01c8f42a416d3292d">More...</a><br/></td></tr>
<tr class="separator:acd9f9223d6d8cad01c8f42a416d3292d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a746540f663a9e22da12123b3edaaefef"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#a746540f663a9e22da12123b3edaaefef">sfree_aligned</a>(ptr)</td></tr>
<tr class="memdesc:a746540f663a9e22da12123b3edaaefef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees aligned memory referenced by <code>ptr</code>.  <a href="#a746540f663a9e22da12123b3edaaefef">More...</a><br/></td></tr>
<tr class="separator:a746540f663a9e22da12123b3edaaefef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa53ceb6b38a4499f6698b3e02005075c"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#aa53ceb6b38a4499f6698b3e02005075c">OVER_ALLOC_FAC</a>&#160;&#160;&#160;1.19</td></tr>
<tr class="memdesc:aa53ceb6b38a4499f6698b3e02005075c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Over allocation factor for memory allocations.  <a href="#aa53ceb6b38a4499f6698b3e02005075c">More...</a><br/></td></tr>
<tr class="separator:aa53ceb6b38a4499f6698b3e02005075c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fc73ec3a4b633f7483b99167c25ca01"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#a2fc73ec3a4b633f7483b99167c25ca01">over_alloc_small</a>(n)&#160;&#160;&#160;(int)(<a class="el" href="smalloc_8h.xhtml#aa53ceb6b38a4499f6698b3e02005075c">OVER_ALLOC_FAC</a>*(n) + 8000)</td></tr>
<tr class="memdesc:a2fc73ec3a4b633f7483b99167c25ca01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Over allocation for small data types: int, real etc.  <a href="#a2fc73ec3a4b633f7483b99167c25ca01">More...</a><br/></td></tr>
<tr class="separator:a2fc73ec3a4b633f7483b99167c25ca01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa651045991ec92103783ba4ebaf20bca"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa651045991ec92103783ba4ebaf20bca"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#aa651045991ec92103783ba4ebaf20bca">over_alloc_large</a>(n)&#160;&#160;&#160;(int)(<a class="el" href="smalloc_8h.xhtml#aa53ceb6b38a4499f6698b3e02005075c">OVER_ALLOC_FAC</a>*(n) + 1000)</td></tr>
<tr class="memdesc:aa651045991ec92103783ba4ebaf20bca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Over allocation for large data types: complex structs. <br/></td></tr>
<tr class="separator:aa651045991ec92103783ba4ebaf20bca"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a6e678051bdba16b4a5db399c8cc0c128"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#a6e678051bdba16b4a5db399c8cc0c128">save_malloc</a> (const char *name, const char *file, int line, size_t size)</td></tr>
<tr class="memdesc:a6e678051bdba16b4a5db399c8cc0c128"><td class="mdescLeft">&#160;</td><td class="mdescRight">GROMACS wrapper for malloc().  <a href="#a6e678051bdba16b4a5db399c8cc0c128">More...</a><br/></td></tr>
<tr class="separator:a6e678051bdba16b4a5db399c8cc0c128"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e6d52179c08b1acafb1e2dcb3aadd23"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#a6e6d52179c08b1acafb1e2dcb3aadd23">save_calloc</a> (const char *name, const char *file, int line, size_t nelem, size_t elsize)</td></tr>
<tr class="memdesc:a6e6d52179c08b1acafb1e2dcb3aadd23"><td class="mdescLeft">&#160;</td><td class="mdescRight">GROMACS wrapper for calloc().  <a href="#a6e6d52179c08b1acafb1e2dcb3aadd23">More...</a><br/></td></tr>
<tr class="separator:a6e6d52179c08b1acafb1e2dcb3aadd23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50f9a1ae3317f66f3bb40f25fe9bd6ac"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#a50f9a1ae3317f66f3bb40f25fe9bd6ac">save_realloc</a> (const char *name, const char *file, int line, void *ptr, size_t nelem, size_t elsize)</td></tr>
<tr class="memdesc:a50f9a1ae3317f66f3bb40f25fe9bd6ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">GROMACS wrapper for realloc().  <a href="#a50f9a1ae3317f66f3bb40f25fe9bd6ac">More...</a><br/></td></tr>
<tr class="separator:a50f9a1ae3317f66f3bb40f25fe9bd6ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a8ebd96b293ca1f67b3dd41ff1eb43a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#a1a8ebd96b293ca1f67b3dd41ff1eb43a">save_free</a> (const char *name, const char *file, int line, void *ptr)</td></tr>
<tr class="memdesc:a1a8ebd96b293ca1f67b3dd41ff1eb43a"><td class="mdescLeft">&#160;</td><td class="mdescRight">GROMACS wrapper for free().  <a href="#a1a8ebd96b293ca1f67b3dd41ff1eb43a">More...</a><br/></td></tr>
<tr class="separator:a1a8ebd96b293ca1f67b3dd41ff1eb43a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70925c108d1c6a8be40614483a58825b"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#a70925c108d1c6a8be40614483a58825b">save_malloc_aligned</a> (const char *name, const char *file, int line, size_t nelem, size_t elsize, size_t alignment)</td></tr>
<tr class="memdesc:a70925c108d1c6a8be40614483a58825b"><td class="mdescLeft">&#160;</td><td class="mdescRight">GROMACS wrapper for allocating aligned memory.  <a href="#a70925c108d1c6a8be40614483a58825b">More...</a><br/></td></tr>
<tr class="separator:a70925c108d1c6a8be40614483a58825b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a073f66115e277b397e07c2ad86ee4075"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#a073f66115e277b397e07c2ad86ee4075">save_calloc_aligned</a> (const char *name, const char *file, int line, size_t nelem, size_t elsize, size_t alignment)</td></tr>
<tr class="memdesc:a073f66115e277b397e07c2ad86ee4075"><td class="mdescLeft">&#160;</td><td class="mdescRight">GROMACS wrapper for allocating zero-initialized aligned memory.  <a href="#a073f66115e277b397e07c2ad86ee4075">More...</a><br/></td></tr>
<tr class="separator:a073f66115e277b397e07c2ad86ee4075"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae35d52a2d595ae960055674b4a0d566a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#ae35d52a2d595ae960055674b4a0d566a">save_free_aligned</a> (const char *name, const char *file, int line, void *ptr)</td></tr>
<tr class="memdesc:ae35d52a2d595ae960055674b4a0d566a"><td class="mdescLeft">&#160;</td><td class="mdescRight">GROMACS wrapper for freeing aligned memory.  <a href="#ae35d52a2d595ae960055674b4a0d566a">More...</a><br/></td></tr>
<tr class="separator:ae35d52a2d595ae960055674b4a0d566a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3d98b1efa6c2b42d2c0d216eafafec5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#ab3d98b1efa6c2b42d2c0d216eafafec5">set_over_alloc_dd</a> (<a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> set)</td></tr>
<tr class="memdesc:ab3d98b1efa6c2b42d2c0d216eafafec5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Turns over allocation for variable size atoms/cg/top arrays on or off, default is off.  <a href="#ab3d98b1efa6c2b42d2c0d216eafafec5">More...</a><br/></td></tr>
<tr class="separator:ab3d98b1efa6c2b42d2c0d216eafafec5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1533c63c1d40c5bb9bfaaa6d898369a"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml#af1533c63c1d40c5bb9bfaaa6d898369a">over_alloc_dd</a> (int n)</td></tr>
<tr class="memdesc:af1533c63c1d40c5bb9bfaaa6d898369a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns new allocation count for domain decomposition allocations.  <a href="#af1533c63c1d40c5bb9bfaaa6d898369a">More...</a><br/></td></tr>
<tr class="separator:af1533c63c1d40c5bb9bfaaa6d898369a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a class="anchor" id="aa53ceb6b38a4499f6698b3e02005075c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define OVER_ALLOC_FAC&#160;&#160;&#160;1.19</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Over allocation factor for memory allocations. </p>
<p>Memory (re)allocation can be VERY slow, especially with some MPI libraries that replace the standard malloc and realloc calls. To avoid slow memory allocation we use over_alloc to set the memory allocation size for large data blocks. Since this scales the size with a factor, we use log(n) realloc calls instead of n. This can reduce allocation times from minutes to seconds.</p>
<p>This factor leads to 4 realloc calls to double the array size. </p>

</div>
</div>
<a class="anchor" id="a2fc73ec3a4b633f7483b99167c25ca01"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define over_alloc_small</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">n</td><td>)</td>
          <td>&#160;&#160;&#160;(int)(<a class="el" href="smalloc_8h.xhtml#aa53ceb6b38a4499f6698b3e02005075c">OVER_ALLOC_FAC</a>*(n) + 8000)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Over allocation for small data types: int, real etc. </p>

</div>
</div>
<a class="anchor" id="acd9f9223d6d8cad01c8f42a416d3292d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define sfree</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">ptr</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees memory referenced by <code>ptr</code>. </p>
<p><code>ptr</code> is allowed to be NULL, in which case nothing is done. </p>

</div>
</div>
<a class="anchor" id="a746540f663a9e22da12123b3edaaefef"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define sfree_aligned</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">ptr</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees aligned memory referenced by <code>ptr</code>. </p>
<p>This must only be called with a pointer obtained through <a class="el" href="smalloc_8h.xhtml#a5288c209907ae6db0870ce0412103d0c" title="Allocates aligned memory for a given number of elements. ">snew_aligned()</a>. <code>ptr</code> is allowed to be NULL, in which case nothing is done. </p>

</div>
</div>
<a class="anchor" id="a435ad4efd4f0ff20e7ade4cc86e2969c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define smalloc</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">ptr, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">size&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocates memory for a given number of bytes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">ptr</td><td>Pointer to allocate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">size</td><td>Number of bytes to allocate.</td></tr>
  </table>
  </dd>
</dl>
<p>Allocates memory for <code>size</code> bytes and sets this to <code>ptr</code>. The allocated memory is initialized to zero. </p>

</div>
</div>
<a class="anchor" id="a11f5e6d285a313414a895fb84c8c7194"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define snew</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">ptr, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">nelem&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocates memory for a given number of elements. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">ptr</td><td>Pointer to allocate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nelem</td><td>Number of elements to allocate.</td></tr>
  </table>
  </dd>
</dl>
<p>Allocates memory for <code>nelem</code> elements of type <code>*ptr</code> and sets this to <code>ptr</code>. The allocated memory is initialized to zeros. </p>

</div>
</div>
<a class="anchor" id="a5288c209907ae6db0870ce0412103d0c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define snew_aligned</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">ptr, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">nelem, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">alignment&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocates aligned memory for a given number of elements. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">ptr</td><td>Pointer to allocate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nelem</td><td>Number of elements to allocate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">alignment</td><td>Requested alignment in bytes.</td></tr>
  </table>
  </dd>
</dl>
<p>Allocates memory for <code>nelem</code> elements of type <code>*ptr</code> and sets this to <code>ptr</code>. The returned pointer is <code>alignment</code>-byte aligned. The allocated memory is initialized to zeros.</p>
<p>The returned pointer should only be freed with <a class="el" href="smalloc_8h.xhtml#a746540f663a9e22da12123b3edaaefef" title="Frees aligned memory referenced by ptr. ">sfree_aligned()</a>. </p>

</div>
</div>
<a class="anchor" id="a7fceb0e6af50dcbbb99b270951be060e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define srenew</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">ptr, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">nelem&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reallocates memory for a given number of elements. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">ptr</td><td>Pointer to allocate/reallocate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nelem</td><td>Number of elements to allocate.</td></tr>
  </table>
  </dd>
</dl>
<p>(Re)allocates memory for <code>ptr</code> such that it can hold <code>nelem</code> elements of type <code>*ptr</code>, and sets the new pointer to <code>ptr</code>. If <code>ptr</code> is <code>NULL</code>, memory is allocated as if it was new. If <code>nelem</code> is zero, <code>ptr</code> is freed (if not <code>NULL</code>). Note that the allocated memory is not initialized, unlike with <a class="el" href="smalloc_8h.xhtml#a11f5e6d285a313414a895fb84c8c7194" title="Allocates memory for a given number of elements. ">snew()</a>. </p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="af1533c63c1d40c5bb9bfaaa6d898369a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int over_alloc_dd </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns new allocation count for domain decomposition allocations. </p>
<p>Returns n when domain decomposition over allocation is off. Returns OVER_ALLOC_FAC*n + 100 when over allocation in on. This is to avoid frequent reallocation during domain decomposition in mdrun. </p>

</div>
</div>
<a class="anchor" id="a6e6d52179c08b1acafb1e2dcb3aadd23"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* save_calloc </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>nelem</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>elsize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>GROMACS wrapper for calloc(). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Variable name identifying the allocation. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Source code file where the allocation originates from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Source code line where the allocation originates from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nelem</td><td>Number of elements to allocate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">elsize</td><td>Number of bytes per element. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to the allocated space.</dd></dl>
<p>This should generally be called through <a class="el" href="smalloc_8h.xhtml#a11f5e6d285a313414a895fb84c8c7194" title="Allocates memory for a given number of elements. ">snew()</a>, not directly. </p>

</div>
</div>
<a class="anchor" id="a073f66115e277b397e07c2ad86ee4075"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* save_calloc_aligned </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>nelem</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>elsize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>alignment</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>GROMACS wrapper for allocating zero-initialized aligned memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Variable name identifying the allocation. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Source code file where the allocation originates from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Source code line where the allocation originates from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nelem</td><td>Number of elements to allocate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">elsize</td><td>Number of bytes per element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">alignment</td><td>Requested alignment in bytes. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to the allocated space, aligned at <code>alignment</code>-byte boundary.</dd></dl>
<p>This should generally be called through <a class="el" href="smalloc_8h.xhtml#a5288c209907ae6db0870ce0412103d0c" title="Allocates aligned memory for a given number of elements. ">snew_aligned()</a>, not directly.</p>
<p>The returned pointer should only be freed with a call to <a class="el" href="smalloc_8h.xhtml#ae35d52a2d595ae960055674b4a0d566a" title="GROMACS wrapper for freeing aligned memory. ">save_free_aligned()</a>. </p>

</div>
</div>
<a class="anchor" id="a1a8ebd96b293ca1f67b3dd41ff1eb43a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void save_free </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>GROMACS wrapper for free(). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Variable name identifying the deallocation. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Source code file where the deallocation originates from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Source code line where the deallocation originates from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ptr</td><td>Pointer to the allocated memory (can be NULL).</td></tr>
  </table>
  </dd>
</dl>
<p>If <code>ptr</code> is NULL, does nothing. This should generally be called through <a class="el" href="smalloc_8h.xhtml#acd9f9223d6d8cad01c8f42a416d3292d" title="Frees memory referenced by ptr. ">sfree()</a>, not directly. This never fails. </p>

</div>
</div>
<a class="anchor" id="ae35d52a2d595ae960055674b4a0d566a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void save_free_aligned </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>GROMACS wrapper for freeing aligned memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Variable name identifying the deallocation. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Source code file where the deallocation originates from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Source code line where the deallocation originates from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ptr</td><td>Pointer to the allocated memory (can be NULL).</td></tr>
  </table>
  </dd>
</dl>
<p>If <code>ptr</code> is NULL, does nothing. <code>ptr</code> should have been allocated with <a class="el" href="smalloc_8h.xhtml#a70925c108d1c6a8be40614483a58825b" title="GROMACS wrapper for allocating aligned memory. ">save_malloc_aligned()</a> or <a class="el" href="smalloc_8h.xhtml#a073f66115e277b397e07c2ad86ee4075" title="GROMACS wrapper for allocating zero-initialized aligned memory. ">save_calloc_aligned()</a>. This should generally be called through <a class="el" href="smalloc_8h.xhtml#a746540f663a9e22da12123b3edaaefef" title="Frees aligned memory referenced by ptr. ">sfree_aligned()</a>, not directly. This never fails. </p>

</div>
</div>
<a class="anchor" id="a6e678051bdba16b4a5db399c8cc0c128"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* save_malloc </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>GROMACS wrapper for malloc(). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Variable name identifying the allocation. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Source code file where the allocation originates from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Source code line where the allocation originates from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">size</td><td>Number of bytes to allocate. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to the allocated space.</dd></dl>
<p>This should generally be called through <a class="el" href="smalloc_8h.xhtml#a435ad4efd4f0ff20e7ade4cc86e2969c" title="Allocates memory for a given number of bytes. ">smalloc()</a>, not directly. </p>

</div>
</div>
<a class="anchor" id="a70925c108d1c6a8be40614483a58825b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* save_malloc_aligned </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>nelem</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>elsize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>alignment</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>GROMACS wrapper for allocating aligned memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Variable name identifying the allocation. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Source code file where the allocation originates from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Source code line where the allocation originates from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nelem</td><td>Number of elements to allocate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">elsize</td><td>Number of bytes per element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">alignment</td><td>Requested alignment in bytes. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to the allocated space, aligned at <code>alignment</code>-byte boundary.</dd></dl>
<p>There is no macro that invokes this function.</p>
<p>The returned pointer should only be freed with a call to <a class="el" href="smalloc_8h.xhtml#ae35d52a2d595ae960055674b4a0d566a" title="GROMACS wrapper for freeing aligned memory. ">save_free_aligned()</a>. </p>

</div>
</div>
<a class="anchor" id="a50f9a1ae3317f66f3bb40f25fe9bd6ac"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* save_realloc </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>nelem</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>elsize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>GROMACS wrapper for realloc(). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Variable name identifying the allocation. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>Source code file where the allocation originates from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Source code line where the allocation originates from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ptr</td><td>Pointer to the previously allocated memory (can be NULL). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nelem</td><td>Number of elements to allocate. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">elsize</td><td>Number of bytes per element. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to the allocated space.</dd></dl>
<p>As with realloc(), if <code>ptr</code> is NULL, memory is allocated as if malloc() was called. This should generally be called through <a class="el" href="smalloc_8h.xhtml#a7fceb0e6af50dcbbb99b270951be060e" title="Reallocates memory for a given number of elements. ">srenew()</a>, not directly.</p>
<p>Note that the allocated memory is not initialized to zero. </p>

</div>
</div>
<a class="anchor" id="ab3d98b1efa6c2b42d2c0d216eafafec5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_over_alloc_dd </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>set</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Turns over allocation for variable size atoms/cg/top arrays on or off, default is off. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000063">Todo:</a></b></dt><dd>This is mdrun-specific, so it might be better to put this and <a class="el" href="smalloc_8h.xhtml#af1533c63c1d40c5bb9bfaaa6d898369a" title="Returns new allocation count for domain decomposition allocations. ">over_alloc_dd()</a> much higher up. </dd></dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:54:33 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
