<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::ICommandLineOptionsModule Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml">ICommandLineOptionsModule</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="classgmx_1_1ICommandLineOptionsModule-members.xhtml">List of all members</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">gmx::ICommandLineOptionsModule Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span><div class="ingroups"><a class="el" href="group__group__publicapi.xhtml">Public API</a> &#124; <a class="el" href="group__module__commandline.xhtml">Command Line Program Management (commandline)</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;gromacs/commandline/cmdlineoptionsmodule.h&gt;</code></p>

<p>Inherited by gmx::test::MockOptionsModule.</p>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Module that can be run from a command line and uses <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">gmx::Options</a> for argument processing. </p>
<p>This class provides a higher-level interface on top of <a class="el" href="classgmx_1_1ICommandLineModule.xhtml" title="Module that can be run from command line using CommandLineModuleManager. ">gmx::ICommandLineModule</a> for cases where <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">gmx::Options</a> will be used for declaring the command-line arguments. The module only needs to declare the options it uses, and the framework takes care of command-line parsing and help output. The module typically consists of the following parts:</p>
<ul>
<li><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#ab0e0aeb40f7e1c6bbe84c884f70e8194" title="Initializes the module and provides settings for the runner. ">init()</a> allows for some interaction between the module and the framework when running the module; see <a class="el" href="classgmx_1_1ICommandLineModule.xhtml#ac14aa7a701ad69ef53a6219b4d08cad5" title="Initializes the module and provides settings for the runner. ">ICommandLineModule::init()</a>. If no such customization is necessary, an empty implementation is sufficient.</li>
<li><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#af8fb627c7a80524d8c56798faaef25b9" title="Initializes command-line arguments understood by the module. ">initOptions()</a> is called both for running the module and for printing help for the module, and it should add the options that the module understands. Values provided for the options are typically stored in member variables.</li>
<li><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#ace80320e3379cc01c79e52c2a51e4e56" title="Called after all option values have been set. ">optionsFinished()</a> can be implemented in case additional processing is needed (e.g., checking whether an option was set by the user).</li>
<li><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#a338fccd494f73b5ac1e971c95047c292" title="Runs the module. ">run()</a> is called when running the module, after command-line options have been parsed and their values stored in the corresponding member variables.</li>
</ul>
<p>registerModule(), <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#a12df4840d77852b63615d8a960864eae" title="Implements a main() method that runs a single module. ">runAsMain()</a>, or <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#afda90519afc76589fc724ce37bcc8746" title="Creates a ICommandLineModule to run the specified module. ">createModule()</a> can be used to use modules of this type in all contexts where a <a class="el" href="classgmx_1_1ICommandLineModule.xhtml" title="Module that can be run from command line using CommandLineModuleManager. ">gmx::ICommandLineModule</a> is expected. These methods create a <a class="el" href="classgmx_1_1ICommandLineModule.xhtml" title="Module that can be run from command line using CommandLineModuleManager. ">gmx::ICommandLineModule</a> implementation that contains the common code needed to parse command-line options and write help, based on the information provided from the methods in this class. </p>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a600f22ce0fca3bca1aaf672395e4778e"><td class="memItemLeft" align="right" valign="top">typedef std::function<br class="typebreak"/>
&lt; <a class="el" href="namespacegmx.xhtml#a682ce4a779fde44ee633b8648eeafe87">ICommandLineOptionsModulePointer</a>()&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#a600f22ce0fca3bca1aaf672395e4778e">FactoryMethod</a></td></tr>
<tr class="memdesc:a600f22ce0fca3bca1aaf672395e4778e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function pointer to a factory method that returns an interface of this type.  <a href="#a600f22ce0fca3bca1aaf672395e4778e">More...</a><br/></td></tr>
<tr class="separator:a600f22ce0fca3bca1aaf672395e4778e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ab0e0aeb40f7e1c6bbe84c884f70e8194"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#ab0e0aeb40f7e1c6bbe84c884f70e8194">init</a> (<a class="el" href="classgmx_1_1CommandLineModuleSettings.xhtml">CommandLineModuleSettings</a> *settings)=0</td></tr>
<tr class="memdesc:ab0e0aeb40f7e1c6bbe84c884f70e8194"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the module and provides settings for the runner.  <a href="#ab0e0aeb40f7e1c6bbe84c884f70e8194">More...</a><br/></td></tr>
<tr class="separator:ab0e0aeb40f7e1c6bbe84c884f70e8194"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8fb627c7a80524d8c56798faaef25b9"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#af8fb627c7a80524d8c56798faaef25b9">initOptions</a> (<a class="el" href="classgmx_1_1IOptionsContainer.xhtml">IOptionsContainer</a> *options, <a class="el" href="classgmx_1_1ICommandLineOptionsModuleSettings.xhtml">ICommandLineOptionsModuleSettings</a> *settings)=0</td></tr>
<tr class="memdesc:af8fb627c7a80524d8c56798faaef25b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes command-line arguments understood by the module.  <a href="#af8fb627c7a80524d8c56798faaef25b9">More...</a><br/></td></tr>
<tr class="separator:af8fb627c7a80524d8c56798faaef25b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace80320e3379cc01c79e52c2a51e4e56"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#ace80320e3379cc01c79e52c2a51e4e56">optionsFinished</a> ()=0</td></tr>
<tr class="memdesc:ace80320e3379cc01c79e52c2a51e4e56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called after all option values have been set.  <a href="#ace80320e3379cc01c79e52c2a51e4e56">More...</a><br/></td></tr>
<tr class="separator:ace80320e3379cc01c79e52c2a51e4e56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a338fccd494f73b5ac1e971c95047c292"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#a338fccd494f73b5ac1e971c95047c292">run</a> ()=0</td></tr>
<tr class="memdesc:a338fccd494f73b5ac1e971c95047c292"><td class="mdescLeft">&#160;</td><td class="mdescRight">Runs the module.  <a href="#a338fccd494f73b5ac1e971c95047c292">More...</a><br/></td></tr>
<tr class="separator:a338fccd494f73b5ac1e971c95047c292"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:afda90519afc76589fc724ce37bcc8746"><td class="memItemLeft" align="right" valign="top">static std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1ICommandLineModule.xhtml">ICommandLineModule</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#afda90519afc76589fc724ce37bcc8746">createModule</a> (const char *name, const char *description, <a class="el" href="namespacegmx.xhtml#a682ce4a779fde44ee633b8648eeafe87">ICommandLineOptionsModulePointer</a> module)</td></tr>
<tr class="memdesc:afda90519afc76589fc724ce37bcc8746"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a <a class="el" href="classgmx_1_1ICommandLineModule.xhtml" title="Module that can be run from command line using CommandLineModuleManager. ">ICommandLineModule</a> to run the specified module.  <a href="#afda90519afc76589fc724ce37bcc8746">More...</a><br/></td></tr>
<tr class="separator:afda90519afc76589fc724ce37bcc8746"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12df4840d77852b63615d8a960864eae"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#a12df4840d77852b63615d8a960864eae">runAsMain</a> (int argc, char *argv[], const char *name, const char *description, <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#a600f22ce0fca3bca1aaf672395e4778e">FactoryMethod</a> factory)</td></tr>
<tr class="memdesc:a12df4840d77852b63615d8a960864eae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements a <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a> method that runs a single module.  <a href="#a12df4840d77852b63615d8a960864eae">More...</a><br/></td></tr>
<tr class="separator:a12df4840d77852b63615d8a960864eae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad041aee2d5501403c6c1f4f29d09b057"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#ad041aee2d5501403c6c1f4f29d09b057">registerModuleFactory</a> (CommandLineModuleManager *manager, const char *name, const char *description, <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#a600f22ce0fca3bca1aaf672395e4778e">FactoryMethod</a> factory)</td></tr>
<tr class="memdesc:ad041aee2d5501403c6c1f4f29d09b057"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registers a module of a certain type to this manager.  <a href="#ad041aee2d5501403c6c1f4f29d09b057">More...</a><br/></td></tr>
<tr class="separator:ad041aee2d5501403c6c1f4f29d09b057"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa44977fef1043dde0527e3a840a2e7a0"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#aa44977fef1043dde0527e3a840a2e7a0">registerModuleDirect</a> (CommandLineModuleManager *manager, const char *name, const char *description, <a class="el" href="namespacegmx.xhtml#a682ce4a779fde44ee633b8648eeafe87">ICommandLineOptionsModulePointer</a> module)</td></tr>
<tr class="memdesc:aa44977fef1043dde0527e3a840a2e7a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registers a module to this manager.  <a href="#aa44977fef1043dde0527e3a840a2e7a0">More...</a><br/></td></tr>
<tr class="separator:aa44977fef1043dde0527e3a840a2e7a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Typedef Documentation</h2>
<a class="anchor" id="a600f22ce0fca3bca1aaf672395e4778e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::function&lt;<a class="el" href="namespacegmx.xhtml#a682ce4a779fde44ee633b8648eeafe87">ICommandLineOptionsModulePointer</a>()&gt; <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#a600f22ce0fca3bca1aaf672395e4778e">gmx::ICommandLineOptionsModule::FactoryMethod</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function pointer to a factory method that returns an interface of this type. </p>
<dl class="section return"><dt>Returns</dt><dd>Module to run. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="afda90519afc76589fc724ce37bcc8746"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classgmx_1_1ICommandLineModule.xhtml">ICommandLineModule</a> &gt; gmx::ICommandLineOptionsModule::createModule </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>description</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacegmx.xhtml#a682ce4a779fde44ee633b8648eeafe87">ICommandLineOptionsModulePointer</a>&#160;</td>
          <td class="paramname"><em>module</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a <a class="el" href="classgmx_1_1ICommandLineModule.xhtml" title="Module that can be run from command line using CommandLineModuleManager. ">ICommandLineModule</a> to run the specified module. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Name for the module. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">description</td><td>Short description for the module. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">module</td><td>Module to run. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classgmx_1_1ICommandLineModule.xhtml" title="Module that can be run from command line using CommandLineModuleManager. ">ICommandLineModule</a> object that runs <code>module</code> module. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab0e0aeb40f7e1c6bbe84c884f70e8194"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void gmx::ICommandLineOptionsModule::init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1CommandLineModuleSettings.xhtml">CommandLineModuleSettings</a> *&#160;</td>
          <td class="paramname"><em>settings</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes the module and provides settings for the runner. </p>
<p>This will be called before <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#a338fccd494f73b5ac1e971c95047c292" title="Runs the module. ">run()</a>, and can be used to adjust initialization that the runner does.</p>
<p>This method is currently not called when writing the help. </p>

</div>
</div>
<a class="anchor" id="af8fb627c7a80524d8c56798faaef25b9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void gmx::ICommandLineOptionsModule::initOptions </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1IOptionsContainer.xhtml">IOptionsContainer</a> *&#160;</td>
          <td class="paramname"><em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ICommandLineOptionsModuleSettings.xhtml">ICommandLineOptionsModuleSettings</a> *&#160;</td>
          <td class="paramname"><em>settings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes command-line arguments understood by the module. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">options</td><td><a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a> object to add the options to. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">settings</td><td>Settings to communicate information to/from generic code running the module.</td></tr>
  </table>
  </dd>
</dl>
<p>When running the module, this method is called after <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#ab0e0aeb40f7e1c6bbe84c884f70e8194" title="Initializes the module and provides settings for the runner. ">init()</a>. When printing help, there is no call to <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#ab0e0aeb40f7e1c6bbe84c884f70e8194" title="Initializes the module and provides settings for the runner. ">init()</a>, and this is the only method called. In both cases, the implementation should add options understood by the module to <code>options</code>. Output values from options should be stored in member variables. </p>

</div>
</div>
<a class="anchor" id="ace80320e3379cc01c79e52c2a51e4e56"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void gmx::ICommandLineOptionsModule::optionsFinished </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called after all option values have been set. </p>
<p>When running the module, this method is called after all command-line arguments have been parsed. </p>

</div>
</div>
<a class="anchor" id="aa44977fef1043dde0527e3a840a2e7a0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::ICommandLineOptionsModule::registerModuleDirect </td>
          <td>(</td>
          <td class="paramtype">CommandLineModuleManager *&#160;</td>
          <td class="paramname"><em>manager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>description</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacegmx.xhtml#a682ce4a779fde44ee633b8648eeafe87">ICommandLineOptionsModulePointer</a>&#160;</td>
          <td class="paramname"><em>module</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Registers a module to this manager. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">manager</td><td>Manager to register to. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Name for the module. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">description</td><td>Short description for the module. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">module</td><td>Module to register. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>This method internally creates a <a class="el" href="classgmx_1_1ICommandLineModule.xhtml" title="Module that can be run from command line using CommandLineModuleManager. ">ICommandLineModule</a> module with the given <code>name</code> and <code>description</code>, and adds that to <code>manager</code>.</p>
<p>This method is mainly used by tests that need to have a reference to the <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml" title="Module that can be run from a command line and uses gmx::Options for argument processing. ">ICommandLineOptionsModule</a> instance (e.g., for mocking). </p>

</div>
</div>
<a class="anchor" id="ad041aee2d5501403c6c1f4f29d09b057"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::ICommandLineOptionsModule::registerModuleFactory </td>
          <td>(</td>
          <td class="paramtype">CommandLineModuleManager *&#160;</td>
          <td class="paramname"><em>manager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>description</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#a600f22ce0fca3bca1aaf672395e4778e">FactoryMethod</a>&#160;</td>
          <td class="paramname"><em>factory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Registers a module of a certain type to this manager. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">manager</td><td>Manager to register to. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Name for the module. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">description</td><td>Short description for the module. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">factory</td><td>Factory that returns the module to register. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>This method internally creates a <a class="el" href="classgmx_1_1ICommandLineModule.xhtml" title="Module that can be run from command line using CommandLineModuleManager. ">ICommandLineModule</a> module with the given <code>name</code> and <code>description</code>, and adds that to <code>manager</code>. When run or asked to write the help, the module calls <code>factory</code> to get the actual module, and forwards the necessary calls. </p>

</div>
</div>
<a class="anchor" id="a338fccd494f73b5ac1e971c95047c292"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int gmx::ICommandLineOptionsModule::run </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Runs the module. </p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">unspecified</td><td>May throw exceptions to indicate errors. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Exit code for the program. </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>on successful termination.</td></tr>
  </table>
  </dd>
</dl>
<p>This method is called after <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#ace80320e3379cc01c79e52c2a51e4e56" title="Called after all option values have been set. ">optionsFinished()</a> when running the module, and should do all the processing for the module. </p>

</div>
</div>
<a class="anchor" id="a12df4840d77852b63615d8a960864eae"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int gmx::ICommandLineOptionsModule::runAsMain </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>description</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml#a600f22ce0fca3bca1aaf672395e4778e">FactoryMethod</a>&#160;</td>
          <td class="paramname"><em>factory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements a <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a> method that runs a single module. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">argc</td><td><code>argc</code> passed to <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">argv</td><td><code>argv</code> passed to <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Name for the module. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">description</td><td>Short description for the module. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">factory</td><td>Factory that returns the module to run.</td></tr>
  </table>
  </dd>
</dl>
<p>This method allows for uniform behavior for binaries that only contain a single module without duplicating any of the implementation from CommandLineModuleManager (startup headers, common options etc.).</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="namespacegmx.xhtml#a5a3bc0e66dda7e48091ad129bede7eff" title="Implements a main() method that runs a single module. ">runCommandLineModule()</a> </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/gromacs/commandline/<a class="el" href="cmdlineoptionsmodule_8h.xhtml">cmdlineoptionsmodule.h</a></li>
<li>src/gromacs/commandline/cmdlineoptionsmodule.cpp</li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:54:36 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
