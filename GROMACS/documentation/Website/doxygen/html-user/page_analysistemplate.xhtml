<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: Example code for writing trajectory analysis tools</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li class="current"><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="index.xhtml">GROMACS</a></li><li class="navelem"><a class="el" href="page_analysisframework.xhtml">Framework for trajectory analysis</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Example code for writing trajectory analysis tools </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>GROMACS installation includes a template for writing trajectory analysis tools using <a class="el" href="page_analysisframework.xhtml">Framework for trajectory analysis</a>. It can be found from <code>share/gromacs/template/</code> under the installation directory, and from <code>share/template/</code> in the source distribution.</p>
<p>The full source code for the file is also included in this documentation: <a class="el" href="template_8cpp-example.xhtml">template.cpp</a> The rest of this page walks through the code to explain the different parts.</p>
<h1>Global definitions </h1>
<p>We start by including some generic C++ headers: <div class="fragment"><div class="line"><span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div>
</div><!-- fragment --> and continue by including the header for the analysis library: <div class="fragment"><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="trajectoryanalysis_8h.xhtml">gromacs/trajectoryanalysis.h</a>&gt;</span></div>
</div><!-- fragment --> This header includes other headers that together define all the basic data types needed for writing trajectory analysis tools. For convenience, we also import all names from the <a class="el" href="namespacegmx.xhtml" title="Generic GROMACS namespace. ">gmx</a> namespace into the global scope to avoid repeating the name everywhere: <div class="fragment"><div class="line"><span class="keyword">using namespace </span>gmx;</div>
</div><!-- fragment --></p>
<h1>Tool module class declaration </h1>
<p>We then define a class that implements our analysis tool: <div class="fragment"><div class="line"><span class="keyword">class </span>AnalysisTemplate : <span class="keyword">public</span> TrajectoryAnalysisModule</div>
<div class="line">{</div>
<div class="line">    <span class="keyword">public</span>:</div>
<div class="line">        AnalysisTemplate();</div>
<div class="line"></div>
<div class="line">        <span class="keyword">virtual</span> <span class="keywordtype">void</span> initOptions(IOptionsContainer          *options,</div>
<div class="line">                                 TrajectoryAnalysisSettings *settings);</div>
<div class="line">        <span class="keyword">virtual</span> <span class="keywordtype">void</span> initAnalysis(<span class="keyword">const</span> TrajectoryAnalysisSettings &amp;settings,</div>
<div class="line">                                  <span class="keyword">const</span> TopologyInformation        &amp;top);</div>
<div class="line"></div>
<div class="line">        <span class="keyword">virtual</span> <span class="keywordtype">void</span> analyzeFrame(<span class="keywordtype">int</span> frnr, <span class="keyword">const</span> t_trxframe &amp;fr, <a class="code" href="structt__pbc.xhtml">t_pbc</a> *pbc,</div>
<div class="line">                                  TrajectoryAnalysisModuleData *pdata);</div>
<div class="line"></div>
<div class="line">        <span class="keyword">virtual</span> <span class="keywordtype">void</span> finishAnalysis(<span class="keywordtype">int</span> nframes);</div>
<div class="line">        <span class="keyword">virtual</span> <span class="keywordtype">void</span> writeOutput();</div>
<div class="line"></div>
<div class="line">    <span class="keyword">private</span>:</div>
<div class="line">        <span class="keyword">class </span>ModuleData;</div>
<div class="line"></div>
<div class="line">        std::string                      fnDist_;</div>
<div class="line">        <span class="keywordtype">double</span>                           cutoff_;</div>
<div class="line">        Selection                        refsel_;</div>
<div class="line">        <a class="code" href="namespacegmx.xhtml#ac852a0801cf49723903e23bc77a32163">SelectionList</a>                    sel_;</div>
<div class="line"></div>
<div class="line">        AnalysisNeighborhood             nb_;</div>
<div class="line"></div>
<div class="line">        AnalysisData                     data_;</div>
<div class="line">        <a class="code" href="namespacegmx.xhtml#a87e4f5152c736da50dd59275f423a7a3">AnalysisDataAverageModulePointer</a> avem_;</div>
<div class="line">};</div>
</div><!-- fragment --> The analysis tool class inherits from <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml" title="Base class for trajectory analysis modules. ">gmx::TrajectoryAnalysisModule</a>, which is an interface with a few convenience functions for easier interfacing with other code. Below, we walk through the different methods as implemented in the template (note that the template does not implement some of the virtual methods because they are less often needed), discussing some issues that can arise in more complex cases. See documentation of <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml" title="Base class for trajectory analysis modules. ">gmx::TrajectoryAnalysisModule</a> for a full description of the available virtual methods and convenience functions. The first block of member variables are used to contain values provided to the different options. They will vary depending on the needs of the analysis tool. The AnalysisNeighborhood object provides neighborhood searching that is used in the analysis. The final block of variables are used to process output data. See initAnalysis() for details on how they are used.</p>
<p>For the template, we do not need any custom frame-local data. If you think you need some for more complex analysis needs, see documentation of <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">gmx::TrajectoryAnalysisModuleData</a> for more details. If you do not care about parallelization, you do not need to consider this part. You can simply declare all variables in the module class itself, initialize them in <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#ae5ae73770caad4ff1808c2ca655dad0e" title="Initializes the analysis. ">gmx::TrajectoryAnalysisModule::initAnalysis()</a>, and do any postprocessing in <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a3b9d902a262ba124be565eca5b714e4b" title="Postprocesses data after frames have been read. ">gmx::TrajectoryAnalysisModule::finishAnalysis()</a>).</p>
<h1>Construction </h1>
<p>The constructor (and possible destructor) of the analysis module should be simple: the constructor should just initialize default values, and the destructor should free any memory managed by the module. For the template, we have no attributes in our class that need to be explicitly freed, so we declare only a constructor: <div class="fragment"><div class="line">AnalysisTemplate::AnalysisTemplate()</div>
<div class="line">    : cutoff_(0.0)</div>
<div class="line">{</div>
<div class="line">    registerAnalysisDataset(&amp;data_, <span class="stringliteral">&quot;avedist&quot;</span>);</div>
<div class="line">}</div>
</div><!-- fragment --></p>
<h1>Input options </h1>
<p>Initialization of the module is split into a few methods, two of which are used in the template. <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#aba5990675e980bf746ecd224f814d549" title="Initializes options understood by the module. ">gmx::TrajectoryAnalysisModule::initOptions()</a> is used to set up options understood by the module, as well as for setting up different options through <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml" title="Trajectory analysis module configuration object. ">gmx::TrajectoryAnalysisSettings</a> (see the documentation of that class for more details): <div class="fragment"><div class="line"><span class="keywordtype">void</span></div>
<div class="line">AnalysisTemplate::initOptions(IOptionsContainer          *options,</div>
<div class="line">                              TrajectoryAnalysisSettings *settings)</div>
<div class="line">{</div>
<div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *<span class="keyword">const</span> desc[] = {</div>
<div class="line">        <span class="stringliteral">&quot;This is a template for writing your own analysis tools for&quot;</span>,</div>
<div class="line">        <span class="stringliteral">&quot;GROMACS. The advantage of using GROMACS for this is that you&quot;</span>,</div>
<div class="line">        <span class="stringliteral">&quot;have access to all information in the topology, and your&quot;</span>,</div>
<div class="line">        <span class="stringliteral">&quot;program will be able to handle all types of coordinates and&quot;</span>,</div>
<div class="line">        <span class="stringliteral">&quot;trajectory files supported by GROMACS. In addition,&quot;</span>,</div>
<div class="line">        <span class="stringliteral">&quot;you get a lot of functionality for free from the trajectory&quot;</span>,</div>
<div class="line">        <span class="stringliteral">&quot;analysis library, including support for flexible dynamic&quot;</span>,</div>
<div class="line">        <span class="stringliteral">&quot;selections. Go ahead an try it![PAR]&quot;</span>,</div>
<div class="line">        <span class="stringliteral">&quot;To get started with implementing your own analysis program,&quot;</span>,</div>
<div class="line">        <span class="stringliteral">&quot;follow the instructions in the README file provided.&quot;</span>,</div>
<div class="line">        <span class="stringliteral">&quot;This template implements a simple analysis programs that calculates&quot;</span>,</div>
<div class="line">        <span class="stringliteral">&quot;average distances from a reference group to one or more&quot;</span>,</div>
<div class="line">        <span class="stringliteral">&quot;analysis groups.&quot;</span></div>
<div class="line">    };</div>
<div class="line"></div>
<div class="line">    settings-&gt;setHelpText(desc);</div>
<div class="line"></div>
<div class="line">    options-&gt;addOption(FileNameOption(<span class="stringliteral">&quot;o&quot;</span>)</div>
<div class="line">                           .filetype(eftPlot).outputFile()</div>
<div class="line">                           .store(&amp;fnDist_).defaultBasename(<span class="stringliteral">&quot;avedist&quot;</span>)</div>
<div class="line">                           .description(<span class="stringliteral">&quot;Average distances from reference group&quot;</span>));</div>
<div class="line"></div>
<div class="line">    options-&gt;addOption(SelectionOption(<span class="stringliteral">&quot;reference&quot;</span>)</div>
<div class="line">                           .store(&amp;refsel_).required()</div>
<div class="line">                           .description(<span class="stringliteral">&quot;Reference group to calculate distances from&quot;</span>));</div>
<div class="line">    options-&gt;addOption(SelectionOption(<span class="stringliteral">&quot;select&quot;</span>)</div>
<div class="line">                           .storeVector(&amp;sel_).required().multiValue()</div>
<div class="line">                           .description(<span class="stringliteral">&quot;Groups to calculate distances to&quot;</span>));</div>
<div class="line"></div>
<div class="line">    options-&gt;addOption(DoubleOption(<span class="stringliteral">&quot;cutoff&quot;</span>).store(&amp;cutoff_)</div>
<div class="line">                           .description(<span class="stringliteral">&quot;Cutoff for distance calculation (0 = no cutoff)&quot;</span>));</div>
<div class="line"></div>
<div class="line">    settings-&gt;setFlag(TrajectoryAnalysisSettings::efRequireTop);</div>
<div class="line">}</div>
</div><!-- fragment --> For the template, we first set a description text for the tool (used for help text). Then we declare an option to specify the output file name, followed by options that are used to set selections, and finally an option to set a cutoff value. For the cutoff, the default value will be the one that was set in the constructor, but it would also be possible to explicitly set it here. The values provided by the user for the options will be stored in member variables. Finally, we indicate that the tool always requires topology information. This is done for demonstration purposes only; the code in the template works even without a topology.</p>
<p>For additional documentation on how to define different kinds of options, see <a class="el" href="classgmx_1_1IOptionsContainer.xhtml" title="Interface for adding input options. ">gmx::IOptionsContainer</a>, <a class="el" href="basicoptions_8h.xhtml" title="Declares option objects for basic option types. ">basicoptions.h</a>, and <a class="el" href="classgmx_1_1SelectionOption.xhtml" title="Specifies an option that provides selection(s). ">gmx::SelectionOption</a>. You only need to define options that are specific to the analysis; common options, e.g., for specifying input topology and trajectories are added by the framework.</p>
<p>To adjust settings or selection options (e.g., the number of accepted selections) based on option values, you need to override <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#afa3457cc922f1d16c4c19cec740e0442" title="Called after all option values have been set. ">gmx::TrajectoryAnalysisModule::optionsFinished()</a>. For simplicity, this is not done in the template.</p>
<h1>Analysis initialization </h1>
<p>The actual analysis is initialized in <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#ae5ae73770caad4ff1808c2ca655dad0e" title="Initializes the analysis. ">gmx::TrajectoryAnalysisModule::initAnalysis()</a>: <div class="fragment"><div class="line"><span class="keywordtype">void</span></div>
<div class="line">AnalysisTemplate::initAnalysis(<span class="keyword">const</span> TrajectoryAnalysisSettings &amp;settings,</div>
<div class="line">                               <span class="keyword">const</span> TopologyInformation         &amp; <span class="comment">/*top*/</span>)</div>
<div class="line">{</div>
<div class="line">    nb_.setCutoff(cutoff_);</div>
<div class="line"></div>
<div class="line">    data_.setColumnCount(0, sel_.size());</div>
<div class="line"></div>
<div class="line">    avem_.reset(<span class="keyword">new</span> AnalysisDataAverageModule());</div>
<div class="line">    data_.addModule(avem_);</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">if</span> (!fnDist_.empty())</div>
<div class="line">    {</div>
<div class="line">        <a class="code" href="namespacegmx.xhtml#a38eb9496e0b6e783869001733014b6d0">AnalysisDataPlotModulePointer</a> plotm(</div>
<div class="line">                <span class="keyword">new</span> AnalysisDataPlotModule(settings.plotSettings()));</div>
<div class="line">        plotm-&gt;setFileName(fnDist_);</div>
<div class="line">        plotm-&gt;setTitle(<span class="stringliteral">&quot;Average distance&quot;</span>);</div>
<div class="line">        plotm-&gt;setXAxisIsTime();</div>
<div class="line">        plotm-&gt;setYLabel(<span class="stringliteral">&quot;Distance (nm)&quot;</span>);</div>
<div class="line">        data_.addModule(plotm);</div>
<div class="line">    }</div>
<div class="line">}</div>
</div><!-- fragment --> Information about the topology is passed as a parameter. The settings object can also be used to access information about user input.</p>
<p>One of the main tasks of this method is to set up appropriate <a class="el" href="classgmx_1_1AnalysisData.xhtml" title="Parallelizable data container for raw data. ">gmx::AnalysisData</a> objects and modules for them (see <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml" title="Base class for trajectory analysis modules. ">gmx::TrajectoryAnalysisModule</a> for the general approach). These objects will be used to process output from the tool. Their main purpose is to support parallelization, but even if you don't care about parallelism, they still provide convenient building blocks, e.g., for histogramming and file output.</p>
<p>For the template, we first set the cutoff for the neighborhood search.</p>
<p>Then, we create and register one <a class="el" href="classgmx_1_1AnalysisData.xhtml" title="Parallelizable data container for raw data. ">gmx::AnalysisData</a> object that will contain, for each frame, one column for each input selection. This will contain the main output from the tool: minimum distance between the reference selection and that particular selection. We then create and setup a module that will compute the average distance for each selection (see writeOutput() for how it is used). Finally, if an output file has been provided, we create and setup a module that will plot the per-frame distances to a file.</p>
<p>If the analysis module needs some temporary storage during processing of a frame (i.e., it uses a custom class derived from <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">gmx::TrajectoryAnalysisModuleData</a>), this should be allocated in <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a6082fcf69bdc3b0a1945ece31437f195" title="Starts the analysis of frames. ">gmx::TrajectoryAnalysisModule::startFrames()</a> (see below) if parallelization is to be supported.</p>
<p>If you need to do initialization based on data from the first frame (most commonly, based on the box size), you need to override <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a419a3d7f950f0731a20d6a7fafaa6d05" title="Performs additional initialization after reading the first frame. ">gmx::TrajectoryAnalysisModule::initAfterFirstFrame()</a>, but this is not used in the template.</p>
<h1>Analyzing the frames </h1>
<p>There is one more initialization method that needs to be overridden to support automatic parallelization: <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a6082fcf69bdc3b0a1945ece31437f195" title="Starts the analysis of frames. ">gmx::TrajectoryAnalysisModule::startFrames()</a>. If you do not need custom frame-local data (or parallelization at all), you can skip this method and ignore the last parameter to <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" title="Analyzes a single frame. ">gmx::TrajectoryAnalysisModule::analyzeFrame()</a> to make things simpler. In the template, this method is not necessary.</p>
<p>The main part of the analysis is (in most analysis codes) done in the <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" title="Analyzes a single frame. ">gmx::TrajectoryAnalysisModule::analyzeFrame()</a> method, which is called once for each frame: <div class="fragment"><div class="line"><span class="keywordtype">void</span></div>
<div class="line">AnalysisTemplate::analyzeFrame(<span class="keywordtype">int</span> frnr, <span class="keyword">const</span> t_trxframe &amp;fr, <a class="code" href="structt__pbc.xhtml">t_pbc</a> *pbc,</div>
<div class="line">                               TrajectoryAnalysisModuleData *pdata)</div>
<div class="line">{</div>
</div><!-- fragment --> The <code>frnr</code> parameter gives a zero-based index of the current frame (mostly for use with <a class="el" href="classgmx_1_1AnalysisData.xhtml" title="Parallelizable data container for raw data. ">gmx::AnalysisData</a>), <code>pbc</code> contains the PBC information for the current frame for distance calculations with, e.g., pbc_dx(), and <code>pdata</code> points to a data structure created in startFrames(). Although usually not necessary (except for the time field), raw frame data can be accessed through <code>fr</code>. In most cases, the analysis should be written such that it gets all position data through selections, and does not assume a constant size for them. This is all that is required to support the full flexibility of the selection engine.</p>
<p>For the template, we first get data from our custom data structure for shorthand access (if you use a custom data object, you need a <code>static_cast</code> here): <div class="fragment"><div class="line">    AnalysisDataHandle         dh     = pdata-&gt;dataHandle(data_);</div>
<div class="line">    <span class="keyword">const</span> Selection           &amp;refsel = pdata-&gt;parallelSelection(refsel_);</div>
</div><!-- fragment --></p>
<p>We then do a simple calculation and use the AnalysisDataHandle class to set the per-frame output for the tool: <div class="fragment"><div class="line">    AnalysisNeighborhoodSearch nbsearch = nb_.initSearch(pbc, refsel);</div>
<div class="line">    dh.startFrame(frnr, fr.time);</div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> g = 0; g &lt; sel_.size(); ++g)</div>
<div class="line">    {</div>
<div class="line">        <span class="keyword">const</span> Selection &amp;sel   = pdata-&gt;parallelSelection(sel_[g]);</div>
<div class="line">        <span class="keywordtype">int</span>              nr    = sel.<a class="code" href="classgmx_1_1Selection.xhtml#a85afa66d42b9e51c3f70a9b3624ab4b8">posCount</a>();</div>
<div class="line">        <a class="code" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>             frave = 0.0;</div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nr; ++i)</div>
<div class="line">        {</div>
<div class="line">            SelectionPosition p = sel.position(i);</div>
<div class="line">            frave += nbsearch.minimumDistance(p.x());</div>
<div class="line">        }</div>
<div class="line">        frave /= nr;</div>
<div class="line">        dh.setPoint(g, frave);</div>
<div class="line">    }</div>
<div class="line">    dh.finishFrame();</div>
</div><!-- fragment --></p>
<p>After all the frames have been processed, <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a3b9d902a262ba124be565eca5b714e4b" title="Postprocesses data after frames have been read. ">gmx::TrajectoryAnalysisModule::finishAnalysis()</a> is called once. This is the place to do any custom postprocessing of the data. For the template, we do nothing, because all necessary processing is done in the data modules: <div class="fragment"><div class="line"><span class="keywordtype">void</span></div>
<div class="line">AnalysisTemplate::finishAnalysis(<span class="keywordtype">int</span> <span class="comment">/*nframes*/</span>)</div>
<div class="line">{</div>
<div class="line">}</div>
</div><!-- fragment --></p>
<p>If the data structure created in <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a6082fcf69bdc3b0a1945ece31437f195" title="Starts the analysis of frames. ">gmx::TrajectoryAnalysisModule::startFrames()</a> is used to aggregate data across frames, you need to override <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a9d14bf1683086d3fafdb11e23e003de4" title="Finishes the analysis of frames. ">gmx::TrajectoryAnalysisModule::finishFrames()</a> to combine the data from the data structures (see documentation of the method for details). This is not necessary for the template, because the ModuleData structure only contains data used during the analysis of a single frame.</p>
<h1>Output </h1>
<p>Finally, most programs need to write out some values after the analysis is complete. In some cases, this can be achieved with proper chaining of data modules, but often it is necessary to do some custom processing. All such activities should be done in <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a80869a7764274db8e314bf0a1c5858f6" title="Writes output into files and/or standard output/error. ">gmx::TrajectoryAnalysisModule::writeOutput()</a>. This makes it easier to reuse analysis modules in, e.g., scripting languages, where output into files might not be desired. The template simply prints out the average distances for each analysis group: <div class="fragment"><div class="line"><span class="keywordtype">void</span></div>
<div class="line">AnalysisTemplate::writeOutput()</div>
<div class="line">{</div>
<div class="line">    <span class="comment">// We print out the average of the mean distances for each group.</span></div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> g = 0; g &lt; sel_.size(); ++g)</div>
<div class="line">    {</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;Average mean distance for &#39;%s&#39;: %.3f nm\n&quot;</span>,</div>
<div class="line">                sel_[g].name(), avem_-&gt;average(0, g));</div>
<div class="line">    }</div>
<div class="line">}</div>
</div><!-- fragment --> Here, we use the <code>avem_</code> module, which we initialized in initAnalysis() to aggregate the averages of the computed distances.</p>
<h1>Definition of <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a> </h1>
<p>Now, the only thing remaining is to define the <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a> function. To implement a command-line tool, it should create a module and run it using <a class="el" href="classgmx_1_1TrajectoryAnalysisCommandLineRunner.xhtml" title="Runner for command-line trajectory analysis tools. ">gmx::TrajectoryAnalysisCommandLineRunner</a> using the boilerplate code below: <div class="fragment"><div class="line"><span class="keywordtype">int</span></div>
<div class="line"><a class="code" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])</div>
<div class="line">{</div>
<div class="line">    <span class="keywordflow">return</span> gmx::TrajectoryAnalysisCommandLineRunner::runAsMain&lt;AnalysisTemplate&gt;(argc, argv);</div>
<div class="line">}</div>
</div><!-- fragment --> </p>
</div></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:54:34 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
