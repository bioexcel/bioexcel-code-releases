<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: Command Line Program Management (commandline)</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2018.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#dirs">Directories</a> &#124;
<a href="#files">Files</a>  </div>
  <div class="headertitle">
<div class="title">Command Line Program Management (commandline)<div class="ingroups"><a class="el" href="group__group__utilitymodules.xhtml">Utility Modules</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for Command Line Program Management (commandline):</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<center><table><tr><td><div class="center"><iframe scrolling="no" frameborder="0" src="group__module__commandline.svg" width="703" height="374"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</td></tr></table></center>
</div>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<p>Provides functionality for managing command line programs. </p>
<p>This module provides utility classes and functions for implementing command line programs. They are mainly used within GROMACS, but can also be used from external programs if they want to get a similar user experience to GROMACS tools.</p>
<p>The classes exposed from this module can be roughly divided into two groups:</p>
<ul>
<li>Helper classes/functions for implementing the main() function. See <a class="el" href="page_usinglibrary.xhtml">Using GROMACS as a library</a> for an overview of those available for user programs. These are declared in <a class="el" href="cmdlineinit_8h.xhtml" title="Declares functions for initializing the GROMACS library for command line use. ">cmdlineinit.h</a> (<a class="el" href="classgmx_1_1ICommandLineModule.xhtml" title="Module that can be run from command line using CommandLineModuleManager. ">gmx::ICommandLineModule</a> is declared in <a class="el" href="cmdlinemodule_8h.xhtml" title="Declares gmx::ICommandLineModule and supporting classes. ">cmdlinemodule.h</a> and gmx::ICommandLineOptions in <a class="el" href="cmdlineoptionsmodule_8h.xhtml" title="Declares gmx::ICommandLineOptionsModule and supporting routines. ">cmdlineoptionsmodule.h</a>).</li>
<li>Helper classes for particular command line tasks:<ul>
<li><a class="el" href="classgmx_1_1CommandLineParser.xhtml" title="Implements command-line parsing for Options objects. ">gmx::CommandLineParser</a> implements command line parsing to assign values to <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">gmx::Options</a> (see <a class="el" href="group__module__options.xhtml">Extensible Handling of Options (options)</a>).</li>
<li><a class="el" href="classgmx_1_1CommandLineHelpWriter.xhtml" title="Writes help information for Options. ">gmx::CommandLineHelpWriter</a> writes help text for a program that uses the parser.</li>
<li><a class="el" href="group__module__commandline.xhtml#ga5140c89919960e8e1e218a5b0d881cd5" title="Parse command-line arguments. ">parse_common_args()</a> is an old interface to GROMACS command line parsing. This is still used by many parts of GROMACS.</li>
</ul>
</li>
</ul>
<dl class="section author"><dt>Author</dt><dd>Teemu Murtola <a href="#" onclick="location.href='mai'+'lto:'+'tee'+'mu'+'.mu'+'rt'+'ola'+'@g'+'mai'+'l.'+'com'; return false;">teemu<span style="display: none;">.nosp@m.</span>.mur<span style="display: none;">.nosp@m.</span>tola@<span style="display: none;">.nosp@m.</span>gmai<span style="display: none;">.nosp@m.</span>l.com</a> </dd></dl>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineHelpWriter.xhtml">gmx::CommandLineHelpWriter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes help information for <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a>.  <a href="classgmx_1_1CommandLineHelpWriter.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleSettings.xhtml">gmx::CommandLineModuleSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Settings to pass information between a module and the general runner.  <a href="classgmx_1_1CommandLineModuleSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ICommandLineModule.xhtml">gmx::ICommandLineModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Module that can be run from command line using CommandLineModuleManager.  <a href="classgmx_1_1ICommandLineModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ICommandLineOptionsModuleSettings.xhtml">gmx::ICommandLineOptionsModuleSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Settings to pass information between a CommandLineOptionsModule and generic code that runs it.  <a href="classgmx_1_1ICommandLineOptionsModuleSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml">gmx::ICommandLineOptionsModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Module that can be run from a command line and uses <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">gmx::Options</a> for argument processing.  <a href="classgmx_1_1ICommandLineOptionsModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineParser.xhtml">gmx::CommandLineParser</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements command-line parsing for <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a> objects.  <a href="classgmx_1_1CommandLineParser.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structt__filenm.xhtml">t_filenm</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">File name option definition for C code.  <a href="structt__filenm.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structt__pargs.xhtml">t_pargs</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Command-line argument definition for C code.  <a href="structt__pargs.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga2c4d042aa134c0ffb23a1553a335fc2c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga2c4d042aa134c0ffb23a1553a335fc2c"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga2c4d042aa134c0ffb23a1553a335fc2c">ffSET</a>&#160;&#160;&#160;1&lt;&lt;0</td></tr>
<tr class="memdesc:ga2c4d042aa134c0ffb23a1553a335fc2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether a file name option is set. <br/></td></tr>
<tr class="separator:ga2c4d042aa134c0ffb23a1553a335fc2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga329a4f1bb6cd80a0630547b0d027e24f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga329a4f1bb6cd80a0630547b0d027e24f"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga329a4f1bb6cd80a0630547b0d027e24f">ffREAD</a>&#160;&#160;&#160;1&lt;&lt;1</td></tr>
<tr class="memdesc:ga329a4f1bb6cd80a0630547b0d027e24f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether a file name option specifies an input file. <br/></td></tr>
<tr class="separator:ga329a4f1bb6cd80a0630547b0d027e24f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7631b25f5be9959c84dd7acc96bc04dd"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga7631b25f5be9959c84dd7acc96bc04dd"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga7631b25f5be9959c84dd7acc96bc04dd">ffWRITE</a>&#160;&#160;&#160;1&lt;&lt;2</td></tr>
<tr class="memdesc:ga7631b25f5be9959c84dd7acc96bc04dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether a file name option specifies an output file. <br/></td></tr>
<tr class="separator:ga7631b25f5be9959c84dd7acc96bc04dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga070f4190c2bc4a6af08333851ddf42ac"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga070f4190c2bc4a6af08333851ddf42ac"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga070f4190c2bc4a6af08333851ddf42ac">ffOPT</a>&#160;&#160;&#160;1&lt;&lt;3</td></tr>
<tr class="memdesc:ga070f4190c2bc4a6af08333851ddf42ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether a file name option specifies an optional file. <br/></td></tr>
<tr class="separator:ga070f4190c2bc4a6af08333851ddf42ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabcfe164407bc1fff8164f4779f0fe3ce"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gabcfe164407bc1fff8164f4779f0fe3ce"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gabcfe164407bc1fff8164f4779f0fe3ce">ffLIB</a>&#160;&#160;&#160;1&lt;&lt;4</td></tr>
<tr class="memdesc:gabcfe164407bc1fff8164f4779f0fe3ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether a file name option specifies a library file. <br/></td></tr>
<tr class="separator:gabcfe164407bc1fff8164f4779f0fe3ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga50cb2de9aec8429fb44074a1bfdb19b2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga50cb2de9aec8429fb44074a1bfdb19b2"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga50cb2de9aec8429fb44074a1bfdb19b2">ffMULT</a>&#160;&#160;&#160;1&lt;&lt;5</td></tr>
<tr class="memdesc:ga50cb2de9aec8429fb44074a1bfdb19b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether a file name option accepts multiple file names. <br/></td></tr>
<tr class="separator:ga50cb2de9aec8429fb44074a1bfdb19b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaae8f2f42809cc00c087b4359507abb81"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaae8f2f42809cc00c087b4359507abb81"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gaae8f2f42809cc00c087b4359507abb81">ffALLOW_MISSING</a>&#160;&#160;&#160;1&lt;&lt;6</td></tr>
<tr class="memdesc:gaae8f2f42809cc00c087b4359507abb81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether an input file name option accepts non-existent files. <br/></td></tr>
<tr class="separator:gaae8f2f42809cc00c087b4359507abb81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaff009165cc0826ee5f5e9069f5606cec"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaff009165cc0826ee5f5e9069f5606cec"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gaff009165cc0826ee5f5e9069f5606cec">ffRW</a>&#160;&#160;&#160;(<a class="el" href="group__module__commandline.xhtml#ga329a4f1bb6cd80a0630547b0d027e24f">ffREAD</a> | <a class="el" href="group__module__commandline.xhtml#ga7631b25f5be9959c84dd7acc96bc04dd">ffWRITE</a>)</td></tr>
<tr class="memdesc:gaff009165cc0826ee5f5e9069f5606cec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience flag for an input/output file. <br/></td></tr>
<tr class="separator:gaff009165cc0826ee5f5e9069f5606cec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaad72aa2d7b50f99b14435510ca044302"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaad72aa2d7b50f99b14435510ca044302"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gaad72aa2d7b50f99b14435510ca044302">ffOPTRD</a>&#160;&#160;&#160;(<a class="el" href="group__module__commandline.xhtml#ga329a4f1bb6cd80a0630547b0d027e24f">ffREAD</a> | <a class="el" href="group__module__commandline.xhtml#ga070f4190c2bc4a6af08333851ddf42ac">ffOPT</a>)</td></tr>
<tr class="memdesc:gaad72aa2d7b50f99b14435510ca044302"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience flag for an optional input file. <br/></td></tr>
<tr class="separator:gaad72aa2d7b50f99b14435510ca044302"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf7a64244d10f102b0575159197e320f3"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf7a64244d10f102b0575159197e320f3"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gaf7a64244d10f102b0575159197e320f3">ffOPTWR</a>&#160;&#160;&#160;(<a class="el" href="group__module__commandline.xhtml#ga7631b25f5be9959c84dd7acc96bc04dd">ffWRITE</a>| <a class="el" href="group__module__commandline.xhtml#ga070f4190c2bc4a6af08333851ddf42ac">ffOPT</a>)</td></tr>
<tr class="memdesc:gaf7a64244d10f102b0575159197e320f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience flag for an optional output file. <br/></td></tr>
<tr class="separator:gaf7a64244d10f102b0575159197e320f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga83143796e357adf8afa38323a85b3fcc"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga83143796e357adf8afa38323a85b3fcc"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga83143796e357adf8afa38323a85b3fcc">ffOPTRW</a>&#160;&#160;&#160;(<a class="el" href="group__module__commandline.xhtml#gaff009165cc0826ee5f5e9069f5606cec">ffRW</a>   | <a class="el" href="group__module__commandline.xhtml#ga070f4190c2bc4a6af08333851ddf42ac">ffOPT</a>)</td></tr>
<tr class="memdesc:ga83143796e357adf8afa38323a85b3fcc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience flag for an optional input/output file. <br/></td></tr>
<tr class="separator:ga83143796e357adf8afa38323a85b3fcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga70443d67e488b39409b37d98b9d2f8b8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga70443d67e488b39409b37d98b9d2f8b8"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga70443d67e488b39409b37d98b9d2f8b8">ffLIBRD</a>&#160;&#160;&#160;(<a class="el" href="group__module__commandline.xhtml#ga329a4f1bb6cd80a0630547b0d027e24f">ffREAD</a> | <a class="el" href="group__module__commandline.xhtml#gabcfe164407bc1fff8164f4779f0fe3ce">ffLIB</a>)</td></tr>
<tr class="memdesc:ga70443d67e488b39409b37d98b9d2f8b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience flag for a library input file. <br/></td></tr>
<tr class="separator:ga70443d67e488b39409b37d98b9d2f8b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa168a891bb48ca53f62f04697add97f4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaa168a891bb48ca53f62f04697add97f4"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gaa168a891bb48ca53f62f04697add97f4">ffLIBOPTRD</a>&#160;&#160;&#160;(<a class="el" href="group__module__commandline.xhtml#gaad72aa2d7b50f99b14435510ca044302">ffOPTRD</a> | <a class="el" href="group__module__commandline.xhtml#gabcfe164407bc1fff8164f4779f0fe3ce">ffLIB</a>)</td></tr>
<tr class="memdesc:gaa168a891bb48ca53f62f04697add97f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience flag for an optional library input file. <br/></td></tr>
<tr class="separator:gaa168a891bb48ca53f62f04697add97f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadfd834ab457afc0d758b6c1155cab145"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gadfd834ab457afc0d758b6c1155cab145"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gadfd834ab457afc0d758b6c1155cab145">ffRDMULT</a>&#160;&#160;&#160;(<a class="el" href="group__module__commandline.xhtml#ga329a4f1bb6cd80a0630547b0d027e24f">ffREAD</a>  | <a class="el" href="group__module__commandline.xhtml#ga50cb2de9aec8429fb44074a1bfdb19b2">ffMULT</a>)</td></tr>
<tr class="memdesc:gadfd834ab457afc0d758b6c1155cab145"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience flag for an input file that accepts multiple files. <br/></td></tr>
<tr class="separator:gadfd834ab457afc0d758b6c1155cab145"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3955ea9e61cd1440f763771021c94bd0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga3955ea9e61cd1440f763771021c94bd0"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga3955ea9e61cd1440f763771021c94bd0">ffOPTRDMULT</a>&#160;&#160;&#160;(<a class="el" href="group__module__commandline.xhtml#gadfd834ab457afc0d758b6c1155cab145">ffRDMULT</a> | <a class="el" href="group__module__commandline.xhtml#ga070f4190c2bc4a6af08333851ddf42ac">ffOPT</a>)</td></tr>
<tr class="memdesc:ga3955ea9e61cd1440f763771021c94bd0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience flag for an optional input file that accepts multiple files. <br/></td></tr>
<tr class="separator:ga3955ea9e61cd1440f763771021c94bd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0a9ba9e80fcdc4a36537189bf0b2e092"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga0a9ba9e80fcdc4a36537189bf0b2e092"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga0a9ba9e80fcdc4a36537189bf0b2e092">ffWRMULT</a>&#160;&#160;&#160;(<a class="el" href="group__module__commandline.xhtml#ga7631b25f5be9959c84dd7acc96bc04dd">ffWRITE</a>  | <a class="el" href="group__module__commandline.xhtml#ga50cb2de9aec8429fb44074a1bfdb19b2">ffMULT</a>)</td></tr>
<tr class="memdesc:ga0a9ba9e80fcdc4a36537189bf0b2e092"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience flag for an output file that accepts multiple files. <br/></td></tr>
<tr class="separator:ga0a9ba9e80fcdc4a36537189bf0b2e092"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab1f1d3a7ad2825aaa454ae80e077b712"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gab1f1d3a7ad2825aaa454ae80e077b712"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gab1f1d3a7ad2825aaa454ae80e077b712">ffOPTWRMULT</a>&#160;&#160;&#160;(<a class="el" href="group__module__commandline.xhtml#ga0a9ba9e80fcdc4a36537189bf0b2e092">ffWRMULT</a> | <a class="el" href="group__module__commandline.xhtml#ga070f4190c2bc4a6af08333851ddf42ac">ffOPT</a>)</td></tr>
<tr class="memdesc:gab1f1d3a7ad2825aaa454ae80e077b712"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience flag for an optional output file that accepts multiple files. <br/></td></tr>
<tr class="separator:gab1f1d3a7ad2825aaa454ae80e077b712"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab26cf759c91577b19db7e87b2922d1b9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gab26cf759c91577b19db7e87b2922d1b9"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gab26cf759c91577b19db7e87b2922d1b9">opt2FILE</a>(opt, nfile, fnm, mode)&#160;&#160;&#160;<a class="el" href="futil_8h.xhtml#ab32f45e948fd8696971da1be2fdc6d69">gmx_ffopen</a>(<a class="el" href="group__module__commandline.xhtml#gaceda5669e2fd4abf13b12d25327f80cf">opt2fn</a>(opt, nfile, fnm), mode)</td></tr>
<tr class="memdesc:gab26cf759c91577b19db7e87b2922d1b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a file pointer from the filename. <br/></td></tr>
<tr class="separator:gab26cf759c91577b19db7e87b2922d1b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5354f61d829706cdb5495a0f149542e2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga5354f61d829706cdb5495a0f149542e2"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga5354f61d829706cdb5495a0f149542e2">ftp2FILE</a>(ftp, nfile, fnm, mode)&#160;&#160;&#160;<a class="el" href="futil_8h.xhtml#ab32f45e948fd8696971da1be2fdc6d69">gmx_ffopen</a>(<a class="el" href="group__module__commandline.xhtml#gab30cf06ad824963bae14691400b3b1cb">ftp2fn</a>(ftp, nfile, fnm), mode)</td></tr>
<tr class="memdesc:ga5354f61d829706cdb5495a0f149542e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a file pointer from the file type. <br/></td></tr>
<tr class="separator:ga5354f61d829706cdb5495a0f149542e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae9060ba6f947e6b9c20514ce595d290e"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gae9060ba6f947e6b9c20514ce595d290e">PCA_CAN_VIEW</a>&#160;&#160;&#160;(1&lt;&lt;5)</td></tr>
<tr class="memdesc:gae9060ba6f947e6b9c20514ce595d290e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add option -w to view output files (must be implemented in program).  <a href="#gae9060ba6f947e6b9c20514ce595d290e">More...</a><br/></td></tr>
<tr class="separator:gae9060ba6f947e6b9c20514ce595d290e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga582411d89d717e593d90ea442a51cb29"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga582411d89d717e593d90ea442a51cb29">PCA_CAN_BEGIN</a>&#160;&#160;&#160;(1&lt;&lt;6)</td></tr>
<tr class="memdesc:ga582411d89d717e593d90ea442a51cb29"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add option to set begin time for trajectory reading.  <a href="#ga582411d89d717e593d90ea442a51cb29">More...</a><br/></td></tr>
<tr class="separator:ga582411d89d717e593d90ea442a51cb29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab0300262455633ec0bc43d10ce6927ea"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gab0300262455633ec0bc43d10ce6927ea">PCA_CAN_END</a>&#160;&#160;&#160;(1&lt;&lt;7)</td></tr>
<tr class="memdesc:gab0300262455633ec0bc43d10ce6927ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add option to set end time for trajectory reading.  <a href="#gab0300262455633ec0bc43d10ce6927ea">More...</a><br/></td></tr>
<tr class="separator:gab0300262455633ec0bc43d10ce6927ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf4da85e65d4283c03c78c752fc2fc858"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gaf4da85e65d4283c03c78c752fc2fc858">PCA_CAN_DT</a>&#160;&#160;&#160;(1&lt;&lt;14)</td></tr>
<tr class="memdesc:gaf4da85e65d4283c03c78c752fc2fc858"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add option to set time step for trajectory reading.  <a href="#gaf4da85e65d4283c03c78c752fc2fc858">More...</a><br/></td></tr>
<tr class="separator:gaf4da85e65d4283c03c78c752fc2fc858"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5db9b6ac7e7f18d9ae59cf81551a931d"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga5db9b6ac7e7f18d9ae59cf81551a931d">PCA_CAN_TIME</a>&#160;&#160;&#160;(<a class="el" href="group__module__commandline.xhtml#ga582411d89d717e593d90ea442a51cb29">PCA_CAN_BEGIN</a> | <a class="el" href="group__module__commandline.xhtml#gab0300262455633ec0bc43d10ce6927ea">PCA_CAN_END</a> | <a class="el" href="group__module__commandline.xhtml#gaf4da85e65d4283c03c78c752fc2fc858">PCA_CAN_DT</a>)</td></tr>
<tr class="memdesc:ga5db9b6ac7e7f18d9ae59cf81551a931d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add all options for trajectory time control.  <a href="#ga5db9b6ac7e7f18d9ae59cf81551a931d">More...</a><br/></td></tr>
<tr class="separator:ga5db9b6ac7e7f18d9ae59cf81551a931d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaee728fbd6eefa75a2ba5321436783f09"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gaee728fbd6eefa75a2ba5321436783f09">PCA_TIME_UNIT</a>&#160;&#160;&#160;(1&lt;&lt;15)</td></tr>
<tr class="memdesc:gaee728fbd6eefa75a2ba5321436783f09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add option -tu to set time unit for output.  <a href="#gaee728fbd6eefa75a2ba5321436783f09">More...</a><br/></td></tr>
<tr class="separator:gaee728fbd6eefa75a2ba5321436783f09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0f498235163fbd4359951b6272de525a"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga0f498235163fbd4359951b6272de525a">PCA_CAN_SET_DEFFNM</a>&#160;&#160;&#160;(1&lt;&lt;10)</td></tr>
<tr class="memdesc:ga0f498235163fbd4359951b6272de525a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add option -deffnm to set default for all file options.  <a href="#ga0f498235163fbd4359951b6272de525a">More...</a><br/></td></tr>
<tr class="separator:ga0f498235163fbd4359951b6272de525a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6acc5539552c4cab9089cb6bf8d6839a"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga6acc5539552c4cab9089cb6bf8d6839a">PCA_NOEXIT_ON_ARGS</a>&#160;&#160;&#160;(1&lt;&lt;11)</td></tr>
<tr class="memdesc:ga6acc5539552c4cab9089cb6bf8d6839a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do not raise a fatal error when invalid options are encountered.  <a href="#ga6acc5539552c4cab9089cb6bf8d6839a">More...</a><br/></td></tr>
<tr class="separator:ga6acc5539552c4cab9089cb6bf8d6839a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4338bef824777c6ff6b2a05a372f0c78"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga4338bef824777c6ff6b2a05a372f0c78"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga4338bef824777c6ff6b2a05a372f0c78">PCA_NOT_READ_NODE</a>&#160;&#160;&#160;(1&lt;&lt;16)</td></tr>
<tr class="memdesc:ga4338bef824777c6ff6b2a05a372f0c78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is this node not reading: for parallel all nodes but the master. <br/></td></tr>
<tr class="separator:ga4338bef824777c6ff6b2a05a372f0c78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga757b225217f8252fbe27551a11d92aee"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga757b225217f8252fbe27551a11d92aee"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga757b225217f8252fbe27551a11d92aee">PCA_DISABLE_INPUT_FILE_CHECKING</a>&#160;&#160;&#160;(1&lt;&lt;17)</td></tr>
<tr class="memdesc:ga757b225217f8252fbe27551a11d92aee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Don't do any special processing for ffREAD files. <br/></td></tr>
<tr class="separator:ga757b225217f8252fbe27551a11d92aee"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ga1f47492bbdb0412052613d0096a20c0b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga1f47492bbdb0412052613d0096a20c0b"></a>
typedef std::map&lt; std::string, <br class="typebreak"/>
CommandLineModulePointer &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga1f47492bbdb0412052613d0096a20c0b">gmx::CommandLineModuleMap</a></td></tr>
<tr class="memdesc:ga1f47492bbdb0412052613d0096a20c0b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container type for mapping module names to module objects. <br/></td></tr>
<tr class="separator:ga1f47492bbdb0412052613d0096a20c0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadc9ea6aca3a54c2691284aa39cdd294d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gadc9ea6aca3a54c2691284aa39cdd294d"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; CommandLineModuleGroupData &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gadc9ea6aca3a54c2691284aa39cdd294d">gmx::CommandLineModuleGroupDataPointer</a></td></tr>
<tr class="memdesc:gadc9ea6aca3a54c2691284aa39cdd294d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer type for managing a CommandLineModuleGroup. <br/></td></tr>
<tr class="separator:gadc9ea6aca3a54c2691284aa39cdd294d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7098a58b563a17889eef62c80fae42bf"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga7098a58b563a17889eef62c80fae42bf"></a>
typedef std::vector<br class="typebreak"/>
&lt; CommandLineModuleGroupDataPointer &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga7098a58b563a17889eef62c80fae42bf">gmx::CommandLineModuleGroupList</a></td></tr>
<tr class="memdesc:ga7098a58b563a17889eef62c80fae42bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container type for keeping a list of module groups. <br/></td></tr>
<tr class="separator:ga7098a58b563a17889eef62c80fae42bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga92d17acbe7afad4effeda8d9be200305"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga92d17acbe7afad4effeda8d9be200305"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; ICommandLineModule &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga92d17acbe7afad4effeda8d9be200305">gmx::CommandLineModulePointer</a></td></tr>
<tr class="memdesc:ga92d17acbe7afad4effeda8d9be200305"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer type for managing a <a class="el" href="classgmx_1_1ICommandLineModule.xhtml" title="Module that can be run from command line using CommandLineModuleManager. ">ICommandLineModule</a>. <br/></td></tr>
<tr class="separator:ga92d17acbe7afad4effeda8d9be200305"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac522eb6a6c382e39345834c796201098"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gac522eb6a6c382e39345834c796201098"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; IExecutableEnvironment &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gac522eb6a6c382e39345834c796201098">gmx::ExecutableEnvironmentPointer</a></td></tr>
<tr class="memdesc:gac522eb6a6c382e39345834c796201098"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for a smart pointer to IExecutableEnvironment. <br/></td></tr>
<tr class="separator:gac522eb6a6c382e39345834c796201098"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:ga06fc87d81c62e9abb8790b6e5713c55b"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <br/>
&#160;&#160;<b>etINT</b>, 
<b>etINT64</b>, 
<b>etREAL</b>, 
<b>etTIME</b>, 
<br/>
&#160;&#160;<b>etSTR</b>, 
<b>etBOOL</b>, 
<b>etRVEC</b>, 
<b>etENUM</b>, 
<br/>
&#160;&#160;<b>etNR</b>
<br/>
 }</td></tr>
<tr class="memdesc:ga06fc87d81c62e9abb8790b6e5713c55b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Command line argument type.  <a href="group__module__commandline.xhtml#ga06fc87d81c62e9abb8790b6e5713c55b">More...</a><br/></td></tr>
<tr class="separator:ga06fc87d81c62e9abb8790b6e5713c55b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga8c376f5f94bd1a63a3a97e288c4be50d"><td class="memItemLeft" align="right" valign="top">CommandLineProgramContext &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga8c376f5f94bd1a63a3a97e288c4be50d">gmx::initForCommandLine</a> (int *argc, char ***argv)</td></tr>
<tr class="memdesc:ga8c376f5f94bd1a63a3a97e288c4be50d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the GROMACS library for command-line use.  <a href="#ga8c376f5f94bd1a63a3a97e288c4be50d">More...</a><br/></td></tr>
<tr class="separator:ga8c376f5f94bd1a63a3a97e288c4be50d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga49311a4a4e3f3ec07a9ae925fb63151f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga49311a4a4e3f3ec07a9ae925fb63151f">gmx::finalizeForCommandLine</a> ()</td></tr>
<tr class="memdesc:ga49311a4a4e3f3ec07a9ae925fb63151f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deinitializes the GROMACS library after <a class="el" href="group__module__commandline.xhtml#ga8c376f5f94bd1a63a3a97e288c4be50d" title="Initializes the GROMACS library for command-line use. ">initForCommandLine()</a>.  <a href="#ga49311a4a4e3f3ec07a9ae925fb63151f">More...</a><br/></td></tr>
<tr class="separator:ga49311a4a4e3f3ec07a9ae925fb63151f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab9c547a4645239997097eadde2931008"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gab9c547a4645239997097eadde2931008"></a>
virtual std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gab9c547a4645239997097eadde2931008">gmx::IExecutableEnvironment::getWorkingDirectory</a> () const =0</td></tr>
<tr class="memdesc:gab9c547a4645239997097eadde2931008"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the working directory when the program was launched. <br/></td></tr>
<tr class="separator:gab9c547a4645239997097eadde2931008"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga260d919d3caa2962abe4481dd9b3a62a"><td class="memItemLeft" align="right" valign="top">virtual std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga260d919d3caa2962abe4481dd9b3a62a">gmx::IExecutableEnvironment::getExecutablePaths</a> () const =0</td></tr>
<tr class="memdesc:ga260d919d3caa2962abe4481dd9b3a62a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns list of paths where executables are searched for.  <a href="#ga260d919d3caa2962abe4481dd9b3a62a">More...</a><br/></td></tr>
<tr class="separator:ga260d919d3caa2962abe4481dd9b3a62a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa1e5312c47534788a14090c55b7dbc0e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gaa1e5312c47534788a14090c55b7dbc0e">gmx::CommandLineProgramContext::CommandLineProgramContext</a> ()</td></tr>
<tr class="memdesc:gaa1e5312c47534788a14090c55b7dbc0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs an empty context object.  <a href="#gaa1e5312c47534788a14090c55b7dbc0e">More...</a><br/></td></tr>
<tr class="separator:gaa1e5312c47534788a14090c55b7dbc0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga18e39255f8afcf4b4c2530fc4a0b1ad7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga18e39255f8afcf4b4c2530fc4a0b1ad7">gmx::CommandLineProgramContext::CommandLineProgramContext</a> (const char *binaryName)</td></tr>
<tr class="memdesc:ga18e39255f8afcf4b4c2530fc4a0b1ad7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes a program context object with binary name only.  <a href="#ga18e39255f8afcf4b4c2530fc4a0b1ad7">More...</a><br/></td></tr>
<tr class="separator:ga18e39255f8afcf4b4c2530fc4a0b1ad7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga513a07555560450ca0d98e090cfceada"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga513a07555560450ca0d98e090cfceada">gmx::CommandLineProgramContext::CommandLineProgramContext</a> (int argc, const char *const argv[])</td></tr>
<tr class="memdesc:ga513a07555560450ca0d98e090cfceada"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes a program context object based on command line.  <a href="#ga513a07555560450ca0d98e090cfceada">More...</a><br/></td></tr>
<tr class="separator:ga513a07555560450ca0d98e090cfceada"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8119d76767f82520df037d50330017cd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga8119d76767f82520df037d50330017cd">gmx::CommandLineProgramContext::CommandLineProgramContext</a> (int argc, const char *const argv[], ExecutableEnvironmentPointer env)</td></tr>
<tr class="memdesc:ga8119d76767f82520df037d50330017cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes a program context object based on command line.  <a href="#ga8119d76767f82520df037d50330017cd">More...</a><br/></td></tr>
<tr class="separator:ga8119d76767f82520df037d50330017cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6cb367921f318985d9c8b369e36060d2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga6cb367921f318985d9c8b369e36060d2">gmx::CommandLineProgramContext::setDisplayName</a> (const std::string &amp;name)</td></tr>
<tr class="memdesc:ga6cb367921f318985d9c8b369e36060d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets a display name for the binary.  <a href="#ga6cb367921f318985d9c8b369e36060d2">More...</a><br/></td></tr>
<tr class="separator:ga6cb367921f318985d9c8b369e36060d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeab3d8df1129225a277449eae8fe3340"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gaeab3d8df1129225a277449eae8fe3340">gmx::CommandLineProgramContext::programName</a> () const </td></tr>
<tr class="memdesc:gaeab3d8df1129225a277449eae8fe3340"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the name of the binary as it was invoked without any path.  <a href="#gaeab3d8df1129225a277449eae8fe3340">More...</a><br/></td></tr>
<tr class="separator:gaeab3d8df1129225a277449eae8fe3340"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad4a598a1052ae416d05ce25e516dfd2e"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gad4a598a1052ae416d05ce25e516dfd2e">gmx::CommandLineProgramContext::displayName</a> () const </td></tr>
<tr class="memdesc:gad4a598a1052ae416d05ce25e516dfd2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a display name of the current module.  <a href="#gad4a598a1052ae416d05ce25e516dfd2e">More...</a><br/></td></tr>
<tr class="separator:gad4a598a1052ae416d05ce25e516dfd2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5957348c4bc5a91748e16a84625d5c84"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga5957348c4bc5a91748e16a84625d5c84">gmx::CommandLineProgramContext::fullBinaryPath</a> () const </td></tr>
<tr class="memdesc:ga5957348c4bc5a91748e16a84625d5c84"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the full path of the running binary.  <a href="#ga5957348c4bc5a91748e16a84625d5c84">More...</a><br/></td></tr>
<tr class="separator:ga5957348c4bc5a91748e16a84625d5c84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga04d4684f9c807f5f191a53477a85646d"><td class="memItemLeft" align="right" valign="top">virtual InstallationPrefixInfo&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga04d4684f9c807f5f191a53477a85646d">gmx::CommandLineProgramContext::installationPrefix</a> () const </td></tr>
<tr class="memdesc:ga04d4684f9c807f5f191a53477a85646d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the installation prefix (for finding GROMACS data files).  <a href="#ga04d4684f9c807f5f191a53477a85646d">More...</a><br/></td></tr>
<tr class="separator:ga04d4684f9c807f5f191a53477a85646d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf923ae4442dffcada736934cb5c73dbb"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gaf923ae4442dffcada736934cb5c73dbb">gmx::CommandLineProgramContext::commandLine</a> () const </td></tr>
<tr class="memdesc:gaf923ae4442dffcada736934cb5c73dbb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the full command line used to invoke the binary.  <a href="#gaf923ae4442dffcada736934cb5c73dbb">More...</a><br/></td></tr>
<tr class="separator:gaf923ae4442dffcada736934cb5c73dbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaceda5669e2fd4abf13b12d25327f80cf"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaceda5669e2fd4abf13b12d25327f80cf"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gaceda5669e2fd4abf13b12d25327f80cf">opt2fn</a> (const char *opt, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[])</td></tr>
<tr class="memdesc:gaceda5669e2fd4abf13b12d25327f80cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the filename belonging to cmd-line option opt, or NULL when no such option. <br/></td></tr>
<tr class="separator:gaceda5669e2fd4abf13b12d25327f80cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4d7edc8da01e211a7963908036e805af"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga4d7edc8da01e211a7963908036e805af"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga4d7edc8da01e211a7963908036e805af">opt2fns</a> (char **fns[], const char *opt, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[])</td></tr>
<tr class="memdesc:ga4d7edc8da01e211a7963908036e805af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the filenames belonging to cmd-line option opt, or NULL when no such option. <br/></td></tr>
<tr class="separator:ga4d7edc8da01e211a7963908036e805af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf2ee3f91ad7b63f0a5ab47b2b19c919d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf2ee3f91ad7b63f0a5ab47b2b19c919d"></a>
const <a class="el" href="structt__filenm.xhtml">t_filenm</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gaf2ee3f91ad7b63f0a5ab47b2b19c919d">getFilenm</a> (const char *opt, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[])</td></tr>
<tr class="memdesc:gaf2ee3f91ad7b63f0a5ab47b2b19c919d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a pointer to the <a class="el" href="structt__filenm.xhtml" title="File name option definition for C code. ">t_filenm</a> data structure of filenames belonging to command-line option opt, or NULL when no such option was used. <br/></td></tr>
<tr class="separator:gaf2ee3f91ad7b63f0a5ab47b2b19c919d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab30cf06ad824963bae14691400b3b1cb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gab30cf06ad824963bae14691400b3b1cb"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gab30cf06ad824963bae14691400b3b1cb">ftp2fn</a> (int ftp, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[])</td></tr>
<tr class="memdesc:gab30cf06ad824963bae14691400b3b1cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the first file name with type ftp, or NULL when none found. <br/></td></tr>
<tr class="separator:gab30cf06ad824963bae14691400b3b1cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad92c14b4fbae5c01d441fe4011f94bdd"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad92c14b4fbae5c01d441fe4011f94bdd"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gad92c14b4fbae5c01d441fe4011f94bdd">ftp2fns</a> (char **fns[], int ftp, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[])</td></tr>
<tr class="memdesc:gad92c14b4fbae5c01d441fe4011f94bdd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of files for the first option with type ftp and the files in **fns[] (will be allocated), or NULL when none found. <br/></td></tr>
<tr class="separator:gad92c14b4fbae5c01d441fe4011f94bdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacd355c9cce678c9fa0089ee393ee17f3"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gacd355c9cce678c9fa0089ee393ee17f3"></a>
<a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gacd355c9cce678c9fa0089ee393ee17f3">ftp2bSet</a> (int ftp, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[])</td></tr>
<tr class="memdesc:gacd355c9cce678c9fa0089ee393ee17f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns TRUE when this file type has been found on the cmd-line. <br/></td></tr>
<tr class="separator:gacd355c9cce678c9fa0089ee393ee17f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga71a0200008ec51b9db8de5c9df6d7570"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga71a0200008ec51b9db8de5c9df6d7570"></a>
<a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga71a0200008ec51b9db8de5c9df6d7570">opt2bSet</a> (const char *opt, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[])</td></tr>
<tr class="memdesc:ga71a0200008ec51b9db8de5c9df6d7570"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns TRUE when this option has been found on the cmd-line. <br/></td></tr>
<tr class="separator:ga71a0200008ec51b9db8de5c9df6d7570"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga28f02ef4f34a2db676adb221eff7b100"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga28f02ef4f34a2db676adb221eff7b100">opt2fn_null</a> (const char *opt, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[])</td></tr>
<tr class="memdesc:ga28f02ef4f34a2db676adb221eff7b100"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the file name belonging top cmd-line option opt, or NULL when no such option.  <a href="#ga28f02ef4f34a2db676adb221eff7b100">More...</a><br/></td></tr>
<tr class="separator:ga28f02ef4f34a2db676adb221eff7b100"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga874faae93dcc497c9160b068a68c879c"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga874faae93dcc497c9160b068a68c879c">ftp2fn_null</a> (int ftp, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[])</td></tr>
<tr class="memdesc:ga874faae93dcc497c9160b068a68c879c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the first file name with type ftp, or NULL when none found.  <a href="#ga874faae93dcc497c9160b068a68c879c">More...</a><br/></td></tr>
<tr class="separator:ga874faae93dcc497c9160b068a68c879c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga71bb042a7e65c318aa23d4864f01a192"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga71bb042a7e65c318aa23d4864f01a192"></a>
<a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga71bb042a7e65c318aa23d4864f01a192">is_optional</a> (const <a class="el" href="structt__filenm.xhtml">t_filenm</a> *fnm)</td></tr>
<tr class="memdesc:ga71bb042a7e65c318aa23d4864f01a192"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether or not this filenm is optional. <br/></td></tr>
<tr class="separator:ga71bb042a7e65c318aa23d4864f01a192"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga735e0e7269de8a54bdad84e93b49f774"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga735e0e7269de8a54bdad84e93b49f774"></a>
<a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga735e0e7269de8a54bdad84e93b49f774">is_output</a> (const <a class="el" href="structt__filenm.xhtml">t_filenm</a> *fnm)</td></tr>
<tr class="memdesc:ga735e0e7269de8a54bdad84e93b49f774"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether or not this filenm is output. <br/></td></tr>
<tr class="separator:ga735e0e7269de8a54bdad84e93b49f774"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad19c3f0a0ae3e9352189882b993d3fa8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad19c3f0a0ae3e9352189882b993d3fa8"></a>
<a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gad19c3f0a0ae3e9352189882b993d3fa8">is_set</a> (const <a class="el" href="structt__filenm.xhtml">t_filenm</a> *fnm)</td></tr>
<tr class="memdesc:gad19c3f0a0ae3e9352189882b993d3fa8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether or not this filenm is set. <br/></td></tr>
<tr class="separator:gad19c3f0a0ae3e9352189882b993d3fa8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf48efa6fc3e0ba73fcca2634b991d481"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf48efa6fc3e0ba73fcca2634b991d481"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gaf48efa6fc3e0ba73fcca2634b991d481">add_suffix_to_output_names</a> (<a class="el" href="structt__filenm.xhtml">t_filenm</a> *fnm, int nfile, const char *suffix)</td></tr>
<tr class="memdesc:gaf48efa6fc3e0ba73fcca2634b991d481"><td class="mdescLeft">&#160;</td><td class="mdescRight">When we do checkpointing, this routine is called to check for previous output files and append a '.partNNNN' suffix before the (output) file extensions. <br/></td></tr>
<tr class="separator:gaf48efa6fc3e0ba73fcca2634b991d481"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga25e56055d288f5fe5959b8e9c92f66ca"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga25e56055d288f5fe5959b8e9c92f66ca"></a>
<a class="el" href="structt__filenm.xhtml">t_filenm</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga25e56055d288f5fe5959b8e9c92f66ca">dup_tfn</a> (int nf, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> tfn[])</td></tr>
<tr class="memdesc:ga25e56055d288f5fe5959b8e9c92f66ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Duplicates the filename list (to make a private copy for each thread, for example). <br/></td></tr>
<tr class="separator:ga25e56055d288f5fe5959b8e9c92f66ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaf278fa5c4743f67e729d22ecb540bd9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaaf278fa5c4743f67e729d22ecb540bd9"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gaaf278fa5c4743f67e729d22ecb540bd9">done_filenms</a> (int nf, <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[])</td></tr>
<tr class="memdesc:gaaf278fa5c4743f67e729d22ecb540bd9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees memory allocated for file names by <a class="el" href="group__module__commandline.xhtml#ga5140c89919960e8e1e218a5b0d881cd5" title="Parse command-line arguments. ">parse_common_args()</a>. <br/></td></tr>
<tr class="separator:gaaf278fa5c4743f67e729d22ecb540bd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0a74f7c7945af63c38f88e41b4313d58"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga0a74f7c7945af63c38f88e41b4313d58">nenum</a> (const char *const enumc[])</td></tr>
<tr class="memdesc:ga0a74f7c7945af63c38f88e41b4313d58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns ordinal number for an etENUM argument.  <a href="#ga0a74f7c7945af63c38f88e41b4313d58">More...</a><br/></td></tr>
<tr class="separator:ga0a74f7c7945af63c38f88e41b4313d58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2ab323b1fe839d8675911091bcf7cf26"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga2ab323b1fe839d8675911091bcf7cf26">opt2parg_int</a> (const char *option, int nparg, <a class="el" href="structt__pargs.xhtml">t_pargs</a> pa[])</td></tr>
<tr class="memdesc:ga2ab323b1fe839d8675911091bcf7cf26"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns value of an etINT option.  <a href="#ga2ab323b1fe839d8675911091bcf7cf26">More...</a><br/></td></tr>
<tr class="separator:ga2ab323b1fe839d8675911091bcf7cf26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5b473004c09d447e281c1c818b4bce9c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga5b473004c09d447e281c1c818b4bce9c">opt2parg_bool</a> (const char *option, int nparg, <a class="el" href="structt__pargs.xhtml">t_pargs</a> pa[])</td></tr>
<tr class="memdesc:ga5b473004c09d447e281c1c818b4bce9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns value of an etBOOL option.  <a href="#ga5b473004c09d447e281c1c818b4bce9c">More...</a><br/></td></tr>
<tr class="separator:ga5b473004c09d447e281c1c818b4bce9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae89406e3a37c9f5ef580a3362fce2cd7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gae89406e3a37c9f5ef580a3362fce2cd7">opt2parg_real</a> (const char *option, int nparg, <a class="el" href="structt__pargs.xhtml">t_pargs</a> pa[])</td></tr>
<tr class="memdesc:gae89406e3a37c9f5ef580a3362fce2cd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns value of an etREAL/etTIME option.  <a href="#gae89406e3a37c9f5ef580a3362fce2cd7">More...</a><br/></td></tr>
<tr class="separator:gae89406e3a37c9f5ef580a3362fce2cd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad273bdbe4bec307803f2e61894d5b539"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gad273bdbe4bec307803f2e61894d5b539">opt2parg_str</a> (const char *option, int nparg, <a class="el" href="structt__pargs.xhtml">t_pargs</a> pa[])</td></tr>
<tr class="memdesc:gad273bdbe4bec307803f2e61894d5b539"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns value of an etSTR option.  <a href="#gad273bdbe4bec307803f2e61894d5b539">More...</a><br/></td></tr>
<tr class="separator:gad273bdbe4bec307803f2e61894d5b539"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafd636cecffc7c0e215497b35ec32de92"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gafd636cecffc7c0e215497b35ec32de92">opt2parg_enum</a> (const char *option, int nparg, <a class="el" href="structt__pargs.xhtml">t_pargs</a> pa[])</td></tr>
<tr class="memdesc:gafd636cecffc7c0e215497b35ec32de92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns value of an etENUM option.  <a href="#gafd636cecffc7c0e215497b35ec32de92">More...</a><br/></td></tr>
<tr class="separator:gafd636cecffc7c0e215497b35ec32de92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga034da57ae2e4bc74eba89e0fe4f93723"><td class="memItemLeft" align="right" valign="top"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga034da57ae2e4bc74eba89e0fe4f93723">opt2parg_bSet</a> (const char *option, int nparg, const <a class="el" href="structt__pargs.xhtml">t_pargs</a> *pa)</td></tr>
<tr class="memdesc:ga034da57ae2e4bc74eba89e0fe4f93723"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether an argument has been set.  <a href="#ga034da57ae2e4bc74eba89e0fe4f93723">More...</a><br/></td></tr>
<tr class="separator:ga034da57ae2e4bc74eba89e0fe4f93723"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5140c89919960e8e1e218a5b0d881cd5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga5140c89919960e8e1e218a5b0d881cd5">parse_common_args</a> (int *argc, char *argv[], unsigned long Flags, int nfile, <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[], int npargs, <a class="el" href="structt__pargs.xhtml">t_pargs</a> *pa, int ndesc, const char **desc, int nbugs, const char **bugs, gmx_output_env_t **oenv)</td></tr>
<tr class="memdesc:ga5140c89919960e8e1e218a5b0d881cd5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse command-line arguments.  <a href="#ga5140c89919960e8e1e218a5b0d881cd5">More...</a><br/></td></tr>
<tr class="separator:ga5140c89919960e8e1e218a5b0d881cd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="dirs"></a>
Directories</h2></td></tr>
<tr class="memitem:dir_8421296c7609edc59eb72e40bf8e93a8"><td class="memItemLeft" align="right" valign="top">directory&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dir_8421296c7609edc59eb72e40bf8e93a8.xhtml">commandline</a></td></tr>
<tr class="memdesc:dir_8421296c7609edc59eb72e40bf8e93a8"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="group__module__commandline.xhtml">Command Line Program Management (commandline)</a> <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"></a>
Files</h2></td></tr>
<tr class="memitem:cmdlinehelpwriter_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cmdlinehelpwriter_8h.xhtml">cmdlinehelpwriter.h</a></td></tr>
<tr class="memdesc:cmdlinehelpwriter_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <a class="el" href="classgmx_1_1CommandLineHelpWriter.xhtml" title="Writes help information for Options. ">gmx::CommandLineHelpWriter</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:cmdlineinit_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cmdlineinit_8h.xhtml">cmdlineinit.h</a></td></tr>
<tr class="memdesc:cmdlineinit_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares functions for initializing the GROMACS library for command line use. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:cmdlinemodule_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cmdlinemodule_8h.xhtml">cmdlinemodule.h</a></td></tr>
<tr class="memdesc:cmdlinemodule_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <a class="el" href="classgmx_1_1ICommandLineModule.xhtml" title="Module that can be run from command line using CommandLineModuleManager. ">gmx::ICommandLineModule</a> and supporting classes. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:cmdlineoptionsmodule_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cmdlineoptionsmodule_8h.xhtml">cmdlineoptionsmodule.h</a></td></tr>
<tr class="memdesc:cmdlineoptionsmodule_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml" title="Module that can be run from a command line and uses gmx::Options for argument processing. ">gmx::ICommandLineOptionsModule</a> and supporting routines. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:cmdlineparser_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cmdlineparser_8h.xhtml">cmdlineparser.h</a></td></tr>
<tr class="memdesc:cmdlineparser_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <a class="el" href="classgmx_1_1CommandLineParser.xhtml" title="Implements command-line parsing for Options objects. ">gmx::CommandLineParser</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:cmdlineprogramcontext_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cmdlineprogramcontext_8h.xhtml">cmdlineprogramcontext.h</a></td></tr>
<tr class="memdesc:cmdlineprogramcontext_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares gmx::CommandLineProgramContext. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:filenm_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="filenm_8h.xhtml">filenm.h</a></td></tr>
<tr class="memdesc:filenm_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <a class="el" href="structt__filenm.xhtml" title="File name option definition for C code. ">t_filenm</a> for old-style command-line parsing of file name options. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:pargs_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pargs_8h.xhtml">pargs.h</a></td></tr>
<tr class="memdesc:pargs_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <code><a class="el" href="structt__pargs.xhtml" title="Command-line argument definition for C code. ">t_pargs</a></code>, <a class="el" href="group__module__commandline.xhtml#ga5140c89919960e8e1e218a5b0d881cd5" title="Parse command-line arguments. ">parse_common_args()</a> and related methods. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:viewit_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="viewit_8h.xhtml">viewit.h</a></td></tr>
<tr class="memdesc:viewit_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides function to open output files automatically (with some X11 programs). <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:commandline_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="commandline_8h.xhtml">commandline.h</a></td></tr>
<tr class="memdesc:commandline_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Public API convenience header for managing command line programs. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a class="anchor" id="ga582411d89d717e593d90ea442a51cb29"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PCA_CAN_BEGIN&#160;&#160;&#160;(1&lt;&lt;6)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add option to set begin time for trajectory reading. </p>

</div>
</div>
<a class="anchor" id="gaf4da85e65d4283c03c78c752fc2fc858"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PCA_CAN_DT&#160;&#160;&#160;(1&lt;&lt;14)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add option to set time step for trajectory reading. </p>

</div>
</div>
<a class="anchor" id="gab0300262455633ec0bc43d10ce6927ea"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PCA_CAN_END&#160;&#160;&#160;(1&lt;&lt;7)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add option to set end time for trajectory reading. </p>

</div>
</div>
<a class="anchor" id="ga0f498235163fbd4359951b6272de525a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PCA_CAN_SET_DEFFNM&#160;&#160;&#160;(1&lt;&lt;10)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add option -deffnm to set default for all file options. </p>

</div>
</div>
<a class="anchor" id="ga5db9b6ac7e7f18d9ae59cf81551a931d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PCA_CAN_TIME&#160;&#160;&#160;(<a class="el" href="group__module__commandline.xhtml#ga582411d89d717e593d90ea442a51cb29">PCA_CAN_BEGIN</a> | <a class="el" href="group__module__commandline.xhtml#gab0300262455633ec0bc43d10ce6927ea">PCA_CAN_END</a> | <a class="el" href="group__module__commandline.xhtml#gaf4da85e65d4283c03c78c752fc2fc858">PCA_CAN_DT</a>)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add all options for trajectory time control. </p>

</div>
</div>
<a class="anchor" id="gae9060ba6f947e6b9c20514ce595d290e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PCA_CAN_VIEW&#160;&#160;&#160;(1&lt;&lt;5)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add option -w to view output files (must be implemented in program). </p>

</div>
</div>
<a class="anchor" id="ga6acc5539552c4cab9089cb6bf8d6839a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PCA_NOEXIT_ON_ARGS&#160;&#160;&#160;(1&lt;&lt;11)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Do not raise a fatal error when invalid options are encountered. </p>

</div>
</div>
<a class="anchor" id="gaee728fbd6eefa75a2ba5321436783f09"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PCA_TIME_UNIT&#160;&#160;&#160;(1&lt;&lt;15)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add option -tu to set time unit for output. </p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a class="anchor" id="ga06fc87d81c62e9abb8790b6e5713c55b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Command line argument type. </p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="gaf923ae4442dffcada736934cb5c73dbb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * gmx::CommandLineProgramContext::commandLine </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the full command line used to invoke the binary. </p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="gaa1e5312c47534788a14090c55b7dbc0e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">gmx::CommandLineProgramContext::CommandLineProgramContext </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructs an empty context object. </p>
<p>All methods in the constructed object return dummy values. </p>

</div>
</div>
<a class="anchor" id="ga18e39255f8afcf4b4c2530fc4a0b1ad7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">gmx::CommandLineProgramContext::CommandLineProgramContext </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>binaryName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes a program context object with binary name only. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">binaryName</td><td>Name of the binary.</td></tr>
  </table>
  </dd>
</dl>
<p>This is needed for unit testing purposes. The constructed object works as if the command line consisted of only of the binary name. </p>

</div>
</div>
<a class="anchor" id="ga513a07555560450ca0d98e090cfceada"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">gmx::CommandLineProgramContext::CommandLineProgramContext </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes a program context object based on command line. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">argc</td><td>argc value passed to <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">argv</td><td>argv array passed to <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga8119d76767f82520df037d50330017cd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">gmx::CommandLineProgramContext::CommandLineProgramContext </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>argv</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__module__commandline.xhtml#gac522eb6a6c382e39345834c796201098">ExecutableEnvironmentPointer</a>&#160;</td>
          <td class="paramname"><em>env</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes a program context object based on command line. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">argc</td><td>argc value passed to <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">argv</td><td>argv array passed to <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">env</td><td>Customizes the way the binary name is handled.</td></tr>
  </table>
  </dd>
</dl>
<p>This overload allows one to customize the way the binary is located by providing a custom IExecutableEnvironment implementation. This is mainly useful for testing purposes to make it possible to test different paths without setting environment variables, changing the working directory or doing other process-wide operations. It may also be useful for making Gromacs behave better when linked into a non-Gromacs executable (with possible extensions in IExecutableEnvironment). </p>

</div>
</div>
<a class="anchor" id="gad4a598a1052ae416d05ce25e516dfd2e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * gmx::CommandLineProgramContext::displayName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a display name of the current module. </p>
<p>The returned value equals programName(), unless a separate display name has been set with setDisplayName().</p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="ga49311a4a4e3f3ec07a9ae925fb63151f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::finalizeForCommandLine </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Deinitializes the GROMACS library after <a class="el" href="group__module__commandline.xhtml#ga8c376f5f94bd1a63a3a97e288c4be50d" title="Initializes the GROMACS library for command-line use. ">initForCommandLine()</a>. </p>
<p>Calls <a class="el" href="group__module__utility.xhtml#gaa0a90b2770cb4b69e16229daa271a1af" title="Deinitializes the GROMACS library. ">gmx::finalize()</a> and additionally undoes the work done by <a class="el" href="group__module__commandline.xhtml#ga8c376f5f94bd1a63a3a97e288c4be50d" title="Initializes the GROMACS library for command-line use. ">initForCommandLine()</a>.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="group__module__utility.xhtml#gaa0a90b2770cb4b69e16229daa271a1af" title="Deinitializes the GROMACS library. ">gmx::finalize()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga874faae93dcc497c9160b068a68c879c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* ftp2fn_null </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ftp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nfile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structt__filenm.xhtml">t_filenm</a>&#160;</td>
          <td class="paramname"><em>fnm</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the first file name with type ftp, or NULL when none found. </p>
<p>Also return NULL when ftp is optional and option is not set. </p>

</div>
</div>
<a class="anchor" id="ga5957348c4bc5a91748e16a84625d5c84"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * gmx::CommandLineProgramContext::fullBinaryPath </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the full path of the running binary. </p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
    <tr><td class="paramname">tMPI::system_error</td><td>on thread synchronization errors.</td></tr>
  </table>
  </dd>
</dl>
<p>Returns argv[0] if there was an error in finding the absolute path. </p>

</div>
</div>
<a class="anchor" id="ga260d919d3caa2962abe4481dd9b3a62a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::vector&lt;std::string&gt; gmx::IExecutableEnvironment::getExecutablePaths </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns list of paths where executables are searched for. </p>
<p>The returned list should be in priority order. An empty string in the returned list corresponds to getWorkindDirectory(). </p>

</div>
</div>
<a class="anchor" id="ga8c376f5f94bd1a63a3a97e288c4be50d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">CommandLineProgramContext &amp; gmx::initForCommandLine </td>
          <td>(</td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char ***&#160;</td>
          <td class="paramname"><em>argv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes the GROMACS library for command-line use. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">argc</td><td>argc value passed to <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">argv</td><td>argv array passed to <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to initialized program context object.</dd></dl>
<p>This function is tailored for use in command line applications. For other usage, combination of <a class="el" href="group__module__utility.xhtml#gae00d174a8ddd5325460d74dc663711c0" title="Initializes the GROMACS library. ">gmx::init()</a> and <a class="el" href="group__module__utility.xhtml#ga2cf34635c815cc712b6291c2c8da2555" title="Sets the global IProgramContext instance. ">gmx::setProgramContext()</a> provides more flexible initialization alternatives. Unlike <a class="el" href="group__module__utility.xhtml#gae00d174a8ddd5325460d74dc663711c0" title="Initializes the GROMACS library. ">gmx::init()</a>, calls to this method cannot be nested.</p>
<p>The command line arguments are communicated so that they can be parsed on each processor. <code>argc</code> and <code>argv</code> are passed to <a class="el" href="group__module__utility.xhtml#gae00d174a8ddd5325460d74dc663711c0" title="Initializes the GROMACS library. ">gmx::init()</a>; see there for additional discussion. This method does not place any additional limitations, but generally there should be no need to pass NULL values.</p>
<p>Does not throw. Terminates the program on out-of-memory error.</p>
<p>This method is not thread-safe, since it is intended to be the first method called. See <a class="el" href="group__module__utility.xhtml#ga2cf34635c815cc712b6291c2c8da2555" title="Sets the global IProgramContext instance. ">setProgramContext()</a> for additional discussion.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="group__module__utility.xhtml#gae00d174a8ddd5325460d74dc663711c0" title="Initializes the GROMACS library. ">gmx::init()</a> </dd>
<dd>
<a class="el" href="group__module__utility.xhtml#ga2cf34635c815cc712b6291c2c8da2555" title="Sets the global IProgramContext instance. ">setProgramContext()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga04d4684f9c807f5f191a53477a85646d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">InstallationPrefixInfo gmx::CommandLineProgramContext::installationPrefix </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the installation prefix (for finding GROMACS data files). </p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
    <tr><td class="paramname">tMPI::system_error</td><td>on thread synchronization errors.</td></tr>
  </table>
  </dd>
</dl>
<p>Returns a hardcoded path set during configuration time if there is an error in finding the library data files. </p>

</div>
</div>
<a class="anchor" id="ga0a74f7c7945af63c38f88e41b4313d58"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int nenum </td>
          <td>(</td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>enumc</em>[]</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns ordinal number for an etENUM argument. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">enumc</td><td>Array passed to <code><a class="el" href="structt__pargs.xhtml" title="Command-line argument definition for C code. ">t_pargs</a></code> for an etENUM argument. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Index of selected enum value in the array.</dd></dl>
<p>See t_pargs::u::c for the expected format of the array, including how the first element should be initialized. Note that the return value starts at one instead of zero: if the first enum value is selected, this returns 1. </p>

</div>
</div>
<a class="anchor" id="ga28f02ef4f34a2db676adb221eff7b100"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* opt2fn_null </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nfile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structt__filenm.xhtml">t_filenm</a>&#160;</td>
          <td class="paramname"><em>fnm</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the file name belonging top cmd-line option opt, or NULL when no such option. </p>
<p>Also return NULL when opt is optional and option is not set. </p>

</div>
</div>
<a class="anchor" id="ga5b473004c09d447e281c1c818b4bce9c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> opt2parg_bool </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nparg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__pargs.xhtml">t_pargs</a>&#160;</td>
          <td class="paramname"><em>pa</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns value of an etBOOL option. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">option</td><td>Name of etBOOL argument to query. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nparg</td><td>Number of elements in <code>pa</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pa</td><td>Array of arguments. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Value of <code>option</code>.</dd></dl>
<p><code>option</code> must specify a valid argument in <code>pa</code> of the correct type. </p>

</div>
</div>
<a class="anchor" id="ga034da57ae2e4bc74eba89e0fe4f93723"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> opt2parg_bSet </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nparg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structt__pargs.xhtml">t_pargs</a> *&#160;</td>
          <td class="paramname"><em>pa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns whether an argument has been set. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">option</td><td>Name of argument to check. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nparg</td><td>Number of elements in <code>pa</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pa</td><td>Array of arguments. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><code>true</code> if <code>option</code> has been set.</dd></dl>
<p><code>option</code> must specify a valid argument in <code>pa</code>. </p>

</div>
</div>
<a class="anchor" id="gafd636cecffc7c0e215497b35ec32de92"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* opt2parg_enum </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nparg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__pargs.xhtml">t_pargs</a>&#160;</td>
          <td class="paramname"><em>pa</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns value of an etENUM option. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">option</td><td>Name of etENUM argument to query. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nparg</td><td>Number of elements in <code>pa</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pa</td><td>Array of arguments. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Value of <code>option</code>.</dd></dl>
<p><code>option</code> must specify a valid argument in <code>pa</code> of the correct type. </p>

</div>
</div>
<a class="anchor" id="ga2ab323b1fe839d8675911091bcf7cf26"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int opt2parg_int </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nparg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__pargs.xhtml">t_pargs</a>&#160;</td>
          <td class="paramname"><em>pa</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns value of an etINT option. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">option</td><td>Name of etINT argument to query. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nparg</td><td>Number of elements in <code>pa</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pa</td><td>Array of arguments. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Value of <code>option</code>.</dd></dl>
<p><code>option</code> must specify a valid argument in <code>pa</code> of the correct type. </p>

</div>
</div>
<a class="anchor" id="gae89406e3a37c9f5ef580a3362fce2cd7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> opt2parg_real </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nparg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__pargs.xhtml">t_pargs</a>&#160;</td>
          <td class="paramname"><em>pa</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns value of an etREAL/etTIME option. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">option</td><td>Name of etREAL/etTIME argument to query. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nparg</td><td>Number of elements in <code>pa</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pa</td><td>Array of arguments. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Value of <code>option</code>.</dd></dl>
<p><code>option</code> must specify a valid argument in <code>pa</code> of the correct type. </p>

</div>
</div>
<a class="anchor" id="gad273bdbe4bec307803f2e61894d5b539"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* opt2parg_str </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nparg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__pargs.xhtml">t_pargs</a>&#160;</td>
          <td class="paramname"><em>pa</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns value of an etSTR option. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">option</td><td>Name of etSTR argument to query. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nparg</td><td>Number of elements in <code>pa</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pa</td><td>Array of arguments. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Value of <code>option</code>.</dd></dl>
<p><code>option</code> must specify a valid argument in <code>pa</code> of the correct type. </p>

</div>
</div>
<a class="anchor" id="ga5140c89919960e8e1e218a5b0d881cd5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> parse_common_args </td>
          <td>(</td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>Flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nfile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__filenm.xhtml">t_filenm</a>&#160;</td>
          <td class="paramname"><em>fnm</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>npargs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__pargs.xhtml">t_pargs</a> *&#160;</td>
          <td class="paramname"><em>pa</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ndesc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nbugs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>bugs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_output_env_t **&#160;</td>
          <td class="paramname"><em>oenv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Parse command-line arguments. </p>
<p>Some common default arguments are also recognized in addition to those provided through <code>pa</code>. The set of recognized default arguments is affected by <code>Flags</code>.</p>
<p>Recognized arguments are removed from the list.</p>
<p>For full functionality, this function needs to be used within a function that is passed to <a class="el" href="cmdlineinit_8h.xhtml#aa51379f681880e0cb70a072f7ea5abe5" title="Implements a main() method that runs a given C main function. ">gmx_run_cmain()</a>. It should be called as the first thing in that function. Initialization code can be executed before it, but you need to be aware that if the program is executed with -h and MPI, the code before <a class="el" href="group__module__commandline.xhtml#ga5140c89919960e8e1e218a5b0d881cd5" title="Parse command-line arguments. ">parse_common_args()</a> only executes on the master node.</p>
<p>If the return value is <code>FALSE</code>, the program should return immediately (this is necessary for -h and a few other cases).</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="cmdlineinit_8h.xhtml#aa51379f681880e0cb70a072f7ea5abe5" title="Implements a main() method that runs a given C main function. ">gmx_run_cmain()</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="gaeab3d8df1129225a277449eae8fe3340"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * gmx::CommandLineProgramContext::programName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the name of the binary as it was invoked without any path. </p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="ga6cb367921f318985d9c8b369e36060d2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::CommandLineProgramContext::setDisplayName </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets a display name for the binary. </p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>This is used with the wrapper binary to add the name of the invoked module to the name of the binary shown.</p>
<p>It is not threadsafe if there are concurrent calls to displayName() before this method has returned. Thread safety is not required for the normal initialization sequence of command line programs; it is called in the wrapper binary before the control passes to the actual module which may create threads. </p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 23 2018 14:54:34 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
