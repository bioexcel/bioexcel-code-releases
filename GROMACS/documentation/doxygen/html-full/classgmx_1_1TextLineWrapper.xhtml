<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::TextLineWrapper Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="classgmx_1_1TextLineWrapper.xhtml">TextLineWrapper</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="classgmx_1_1TextLineWrapper-members.xhtml">List of all members</a> &#124;
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">gmx::TextLineWrapper Class Reference<div class="ingroups"><a class="el" href="group__module__utility.xhtml">Low-Level Utilities (utility)</a> &#124; <a class="el" href="group__group__publicapi.xhtml">Public API</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;gromacs/utility/stringutil.h&gt;</code></p>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Wraps lines to a predefined length. </p>
<p>This utility class wraps lines at word breaks to produce lines that are not longer than a predefined length. Explicit newlines ('\n') are preserved. Only space is considered a word separator. If a single word exceeds the maximum line length, it is still printed on a single line. Extra whitespace is stripped from the end of produced lines. Other options on the wrapping, such as the line length or indentation, can be changed using a <a class="el" href="classgmx_1_1TextLineWrapperSettings.xhtml" title="Stores settings for line wrapping. ">TextLineWrapperSettings</a> object.</p>
<p>Two interfaces to do the wrapping are provided:</p>
<ol type="1">
<li>High-level interface using either <a class="el" href="classgmx_1_1TextLineWrapper.xhtml#a17bdad2e591848e64321249e177d1a57" title="Formats a string, producing a single string with all the lines. ">wrapToString()</a> (produces a single string with embedded newlines) or <a class="el" href="classgmx_1_1TextLineWrapper.xhtml#ac598eb95c69dff1a8b8f38210189e6f9" title="Formats a string, producing a vector with all the lines. ">wrapToVector()</a> (produces a vector of strings with each line as one element). These methods operate on std::string and wrap the entire input string.</li>
<li>Low-level interface using <a class="el" href="classgmx_1_1TextLineWrapper.xhtml#a87d5190aa3de8d2c4841b52e3540cec9" title="Finds the next line to be wrapped. ">findNextLine()</a> and <a class="el" href="classgmx_1_1TextLineWrapper.xhtml#ad728d3d7de840f4ff53f20c7624377d3" title="Formats a single line for output according to wrapping settings. ">formatLine()</a>. <a class="el" href="classgmx_1_1TextLineWrapper.xhtml#a87d5190aa3de8d2c4841b52e3540cec9" title="Finds the next line to be wrapped. ">findNextLine()</a> operates either on a C string or an std::string, and does not do any memory allocation (so it does not throw). It finds the next line to be wrapped, considering the wrapping settings. <a class="el" href="classgmx_1_1TextLineWrapper.xhtml#ad728d3d7de840f4ff53f20c7624377d3" title="Formats a single line for output according to wrapping settings. ">formatLine()</a> does whitespace operations on the line found by <a class="el" href="classgmx_1_1TextLineWrapper.xhtml#a87d5190aa3de8d2c4841b52e3540cec9" title="Finds the next line to be wrapped. ">findNextLine()</a> and returns an std::string. These methods allow custom wrapping implementation to either avoid exceptions or to wrap only a part of the input string.</li>
</ol>
<p>Typical usage: </p>
<div class="fragment"><div class="line"><a class="code" href="classgmx_1_1TextLineWrapper.xhtml">gmx::TextLineWrapper</a> wrapper;</div>
<div class="line">wrapper.<a class="code" href="classgmx_1_1TextLineWrapper.xhtml#a8715c836e8a0117bf0ceeaf007a496ca">settings</a>().<a class="code" href="classgmx_1_1TextLineWrapperSettings.xhtml#addcd7997a82afbd9f8a8697dc422c644">setLineLength</a>(78);</div>
<div class="line">printf(<span class="stringliteral">&quot;%s\n&quot;</span>, wrapper.<a class="code" href="classgmx_1_1TextLineWrapper.xhtml#a17bdad2e591848e64321249e177d1a57">wrapToString</a>(textToWrap).c_str());</div>
</div><!-- fragment --> </div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a89ea2ec5cfe3a185027f27de1974f8d6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextLineWrapper.xhtml#a89ea2ec5cfe3a185027f27de1974f8d6">TextLineWrapper</a> ()</td></tr>
<tr class="memdesc:a89ea2ec5cfe3a185027f27de1974f8d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs a new line wrapper with default settings.  <a href="#a89ea2ec5cfe3a185027f27de1974f8d6">More...</a><br/></td></tr>
<tr class="separator:a89ea2ec5cfe3a185027f27de1974f8d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad100b263bcb7a78872eeadee8f9bf368"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextLineWrapper.xhtml#ad100b263bcb7a78872eeadee8f9bf368">TextLineWrapper</a> (const <a class="el" href="classgmx_1_1TextLineWrapperSettings.xhtml">TextLineWrapperSettings</a> &amp;<a class="el" href="classgmx_1_1TextLineWrapper.xhtml#a8715c836e8a0117bf0ceeaf007a496ca">settings</a>)</td></tr>
<tr class="memdesc:ad100b263bcb7a78872eeadee8f9bf368"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs a new line wrapper with given settings.  <a href="#ad100b263bcb7a78872eeadee8f9bf368">More...</a><br/></td></tr>
<tr class="separator:ad100b263bcb7a78872eeadee8f9bf368"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8715c836e8a0117bf0ceeaf007a496ca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1TextLineWrapperSettings.xhtml">TextLineWrapperSettings</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextLineWrapper.xhtml#a8715c836e8a0117bf0ceeaf007a496ca">settings</a> ()</td></tr>
<tr class="memdesc:a8715c836e8a0117bf0ceeaf007a496ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides access to settings of this wrapper.  <a href="#a8715c836e8a0117bf0ceeaf007a496ca">More...</a><br/></td></tr>
<tr class="separator:a8715c836e8a0117bf0ceeaf007a496ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7f2d2d131d490b1c2148d42ee4f5805"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae7f2d2d131d490b1c2148d42ee4f5805"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextLineWrapper.xhtml#ae7f2d2d131d490b1c2148d42ee4f5805">isTrivial</a> () const </td></tr>
<tr class="memdesc:ae7f2d2d131d490b1c2148d42ee4f5805"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the wrapper would not modify the input string. <br/></td></tr>
<tr class="separator:ae7f2d2d131d490b1c2148d42ee4f5805"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87d5190aa3de8d2c4841b52e3540cec9"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextLineWrapper.xhtml#a87d5190aa3de8d2c4841b52e3540cec9">findNextLine</a> (const char *input, size_t lineStart) const </td></tr>
<tr class="memdesc:a87d5190aa3de8d2c4841b52e3540cec9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds the next line to be wrapped.  <a href="#a87d5190aa3de8d2c4841b52e3540cec9">More...</a><br/></td></tr>
<tr class="separator:a87d5190aa3de8d2c4841b52e3540cec9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8cdfe3759f3d8da4af88c02ee57d4015"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextLineWrapper.xhtml#a8cdfe3759f3d8da4af88c02ee57d4015">findNextLine</a> (const std::string &amp;input, size_t lineStart) const </td></tr>
<tr class="memdesc:a8cdfe3759f3d8da4af88c02ee57d4015"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds the next line to be wrapped.  <a href="#a8cdfe3759f3d8da4af88c02ee57d4015">More...</a><br/></td></tr>
<tr class="separator:a8cdfe3759f3d8da4af88c02ee57d4015"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad728d3d7de840f4ff53f20c7624377d3"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextLineWrapper.xhtml#ad728d3d7de840f4ff53f20c7624377d3">formatLine</a> (const std::string &amp;input, size_t lineStart, size_t lineEnd) const </td></tr>
<tr class="memdesc:ad728d3d7de840f4ff53f20c7624377d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats a single line for output according to wrapping settings.  <a href="#ad728d3d7de840f4ff53f20c7624377d3">More...</a><br/></td></tr>
<tr class="separator:ad728d3d7de840f4ff53f20c7624377d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17bdad2e591848e64321249e177d1a57"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextLineWrapper.xhtml#a17bdad2e591848e64321249e177d1a57">wrapToString</a> (const std::string &amp;input) const </td></tr>
<tr class="memdesc:a17bdad2e591848e64321249e177d1a57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats a string, producing a single string with all the lines.  <a href="#a17bdad2e591848e64321249e177d1a57">More...</a><br/></td></tr>
<tr class="separator:a17bdad2e591848e64321249e177d1a57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac598eb95c69dff1a8b8f38210189e6f9"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextLineWrapper.xhtml#ac598eb95c69dff1a8b8f38210189e6f9">wrapToVector</a> (const std::string &amp;input) const </td></tr>
<tr class="memdesc:ac598eb95c69dff1a8b8f38210189e6f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats a string, producing a vector with all the lines.  <a href="#ac598eb95c69dff1a8b8f38210189e6f9">More...</a><br/></td></tr>
<tr class="separator:ac598eb95c69dff1a8b8f38210189e6f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a89ea2ec5cfe3a185027f27de1974f8d6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">gmx::TextLineWrapper::TextLineWrapper </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs a new line wrapper with default settings. </p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="ad100b263bcb7a78872eeadee8f9bf368"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">gmx::TextLineWrapper::TextLineWrapper </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1TextLineWrapperSettings.xhtml">TextLineWrapperSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs a new line wrapper with given settings. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">settings</td><td>Wrapping settings.</td></tr>
  </table>
  </dd>
</dl>
<p>Does not throw. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a87d5190aa3de8d2c4841b52e3540cec9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t gmx::TextLineWrapper::findNextLine </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>lineStart</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Finds the next line to be wrapped. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>String to wrap. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lineStart</td><td>Index of first character of the line to find. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Index of first character of the next line.</dd></dl>
<p>If this is the last line, returns the length of <code>input</code>. In determining the length of the returned line, this function considers the maximum line length, leaving space for indentation, and also whitespace stripping behavior. Thus, the line returned may be longer than the maximum line length if it has leading and/or trailing space. When wrapping a line on a space (not on an explicit line break), the returned index is always on a non-whitespace character after the space.</p>
<p>To iterate over lines in a string, use the following code: </p>
<div class="fragment"><div class="line"><a class="code" href="classgmx_1_1TextLineWrapper.xhtml">gmx::TextLineWrapper</a> wrapper;</div>
<div class="line"><span class="comment">// &lt;set desired wrapping settings&gt;</span></div>
<div class="line"><span class="keywordtype">size_t</span> lineStart = 0;</div>
<div class="line"><span class="keywordtype">size_t</span> length = <a class="code" href="namespaceanonymous__namespace_02xvgtest__tests_8cpp_03.xhtml#a9f3c8f8c62476aa47f73bc9ad0905393">input</a>.length();</div>
<div class="line"><span class="keywordflow">while</span> (lineStart &lt; length)</div>
<div class="line">{</div>
<div class="line">    <span class="keywordtype">size_t</span> nextLineStart = wrapper.<a class="code" href="classgmx_1_1TextLineWrapper.xhtml#a87d5190aa3de8d2c4841b52e3540cec9">findNextLine</a>(<a class="code" href="namespaceanonymous__namespace_02xvgtest__tests_8cpp_03.xhtml#a9f3c8f8c62476aa47f73bc9ad0905393">input</a>, lineStart);</div>
<div class="line">    std::string line = wrapper.<a class="code" href="classgmx_1_1TextLineWrapper.xhtml#ad728d3d7de840f4ff53f20c7624377d3">formatLine</a>(<a class="code" href="namespaceanonymous__namespace_02xvgtest__tests_8cpp_03.xhtml#a9f3c8f8c62476aa47f73bc9ad0905393">input</a>, lineStart, nextLineStart));</div>
<div class="line">    <span class="comment">// &lt;do something with the line&gt;</span></div>
<div class="line">    lineStart = nextLineStart;</div>
<div class="line">}</div>
<div class="line"><span class="keywordflow">return</span> result;</div>
</div><!-- fragment --><p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="a8cdfe3759f3d8da4af88c02ee57d4015"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t gmx::TextLineWrapper::findNextLine </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>lineStart</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Finds the next line to be wrapped. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>String to wrap. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lineStart</td><td>Index of first character of the line to find. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Index of first character of the next line.</dd></dl>
<p>If this is the last line, returns the length of <code>input</code>. In determining the length of the returned line, this function considers the maximum line length, leaving space for indentation, and also whitespace stripping behavior. Thus, the line returned may be longer than the maximum line length if it has leading and/or trailing space. When wrapping a line on a space (not on an explicit line break), the returned index is always on a non-whitespace character after the space.</p>
<p>To iterate over lines in a string, use the following code: </p>
<div class="fragment"><div class="line"><a class="code" href="classgmx_1_1TextLineWrapper.xhtml">gmx::TextLineWrapper</a> wrapper;</div>
<div class="line"><span class="comment">// &lt;set desired wrapping settings&gt;</span></div>
<div class="line"><span class="keywordtype">size_t</span> lineStart = 0;</div>
<div class="line"><span class="keywordtype">size_t</span> length = <a class="code" href="namespaceanonymous__namespace_02xvgtest__tests_8cpp_03.xhtml#a9f3c8f8c62476aa47f73bc9ad0905393">input</a>.length();</div>
<div class="line"><span class="keywordflow">while</span> (lineStart &lt; length)</div>
<div class="line">{</div>
<div class="line">    <span class="keywordtype">size_t</span> nextLineStart = wrapper.<a class="code" href="classgmx_1_1TextLineWrapper.xhtml#a87d5190aa3de8d2c4841b52e3540cec9">findNextLine</a>(<a class="code" href="namespaceanonymous__namespace_02xvgtest__tests_8cpp_03.xhtml#a9f3c8f8c62476aa47f73bc9ad0905393">input</a>, lineStart);</div>
<div class="line">    std::string line = wrapper.<a class="code" href="classgmx_1_1TextLineWrapper.xhtml#ad728d3d7de840f4ff53f20c7624377d3">formatLine</a>(<a class="code" href="namespaceanonymous__namespace_02xvgtest__tests_8cpp_03.xhtml#a9f3c8f8c62476aa47f73bc9ad0905393">input</a>, lineStart, nextLineStart));</div>
<div class="line">    <span class="comment">// &lt;do something with the line&gt;</span></div>
<div class="line">    lineStart = nextLineStart;</div>
<div class="line">}</div>
<div class="line"><span class="keywordflow">return</span> result;</div>
</div><!-- fragment --><p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="ad728d3d7de840f4ff53f20c7624377d3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::TextLineWrapper::formatLine </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>lineStart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>lineEnd</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formats a single line for output according to wrapping settings. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input string. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lineStart</td><td>Index of first character of the line to format. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lineEnd</td><td>Index of first character of the next line. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The line with leading and/or trailing whitespace removed and indentation applied. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>Intended to be used on the lines found by <a class="el" href="classgmx_1_1TextLineWrapper.xhtml#a87d5190aa3de8d2c4841b52e3540cec9" title="Finds the next line to be wrapped. ">findNextLine()</a>. When used with the lines returned from <a class="el" href="classgmx_1_1TextLineWrapper.xhtml#a87d5190aa3de8d2c4841b52e3540cec9" title="Finds the next line to be wrapped. ">findNextLine()</a>, the returned line conforms to the wrapper settings. Trailing whitespace is always stripped (including any newlines, i.e., the return value does not contain a newline). </p>

</div>
</div>
<a class="anchor" id="a8715c836e8a0117bf0ceeaf007a496ca"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1TextLineWrapperSettings.xhtml">TextLineWrapperSettings</a>&amp; gmx::TextLineWrapper::settings </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Provides access to settings of this wrapper. </p>
<dl class="section return"><dt>Returns</dt><dd>The settings object for this wrapper.</dd></dl>
<p>The returned object can be used to modify settings for the wrapper. All subsequent calls to <a class="el" href="classgmx_1_1TextLineWrapper.xhtml#a17bdad2e591848e64321249e177d1a57" title="Formats a string, producing a single string with all the lines. ">wrapToString()</a> and <a class="el" href="classgmx_1_1TextLineWrapper.xhtml#ac598eb95c69dff1a8b8f38210189e6f9" title="Formats a string, producing a vector with all the lines. ">wrapToVector()</a> use the modified settings.</p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="a17bdad2e591848e64321249e177d1a57"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::TextLineWrapper::wrapToString </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>input</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formats a string, producing a single string with all the lines. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>String to wrap. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><code>input</code> with added newlines such that maximum line length is not exceeded. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>Newlines in the input are preserved, including terminal newlines. Note that if the input does not contain a terminal newline, the output does not either. </p>

</div>
</div>
<a class="anchor" id="ac598eb95c69dff1a8b8f38210189e6f9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; gmx::TextLineWrapper::wrapToVector </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>input</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formats a string, producing a vector with all the lines. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>String to wrap. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><code>input</code> split into lines such that maximum line length is not exceeded. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>The strings in the returned vector do not contain newlines at the end. Note that a single terminal newline does not affect the output: "line\\n" and "line" both produce the same output (but "line\\n\\n" produces two lines, the second of which is empty). </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/gromacs/utility/<a class="el" href="stringutil_8h.xhtml">stringutil.h</a></li>
<li>src/gromacs/utility/<a class="el" href="stringutil_8cpp.xhtml">stringutil.cpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:20:47 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
