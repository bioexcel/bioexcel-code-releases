<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li class="current"><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.xhtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.xhtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">gmx Namespace Reference<div class="ingroups"><a class="el" href="group__group__publicapi.xhtml">Public API</a> &#124; <a class="el" href="group__module__simd.xhtml">SIMD intrinsics interface (simd)</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Generic GROMACS namespace. </p>
<p>Functionality for testing whether calls to mdrun produce the same energy and force quantities when they should do so.</p>
<p>Declares registerLegacyModules().</p>
<p>Declares the integrator for test particle insertion.</p>
<p>Declares the integrators for energy minimization and NMA.</p>
<p>Convenience macro to help us avoid ifdefs each time we use sysconf.</p>
<dl class="section author"><dt>Author</dt><dd>David van der Spoel <a href="#" onclick="location.href='mai'+'lto:'+'dav'+'id'+'.va'+'nd'+'ers'+'po'+'el@'+'ic'+'m.u'+'u.'+'se'; return false;">david<span style="display: none;">.nosp@m.</span>.van<span style="display: none;">.nosp@m.</span>dersp<span style="display: none;">.nosp@m.</span>oel@<span style="display: none;">.nosp@m.</span>icm.u<span style="display: none;">.nosp@m.</span>u.se</a></dd>
<dd>
Berk Hess <a href="#" onclick="location.href='mai'+'lto:'+'hes'+'s@'+'kth'+'.s'+'e'; return false;">hess@<span style="display: none;">.nosp@m.</span>kth.<span style="display: none;">.nosp@m.</span>se</a></dd></dl>
<dl class="section author"><dt>Author</dt><dd>Teemu Murtola <a href="#" onclick="location.href='mai'+'lto:'+'tee'+'mu'+'.mu'+'rt'+'ola'+'@g'+'mai'+'l.'+'com'; return false;">teemu<span style="display: none;">.nosp@m.</span>.mur<span style="display: none;">.nosp@m.</span>tola@<span style="display: none;">.nosp@m.</span>gmai<span style="display: none;">.nosp@m.</span>l.com</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02analysismodule_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02analysismodule_8cpp_03.xhtml">anonymous_namespace{analysismodule.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02arrayref_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02arrayref_8cpp_03.xhtml">anonymous_namespace{arrayref.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02autocorr_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02autocorr_8cpp_03.xhtml">anonymous_namespace{autocorr.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02cmdlinehelpcontext_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cmdlinehelpcontext_8cpp_03.xhtml">anonymous_namespace{cmdlinehelpcontext.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02cmdlinehelpmodule_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cmdlinehelpmodule_8cpp_03.xhtml">anonymous_namespace{cmdlinehelpmodule.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02cmdlinehelpwriter_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cmdlinehelpwriter_8cpp_03.xhtml">anonymous_namespace{cmdlinehelpwriter.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02cmdlineinit_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cmdlineinit_8cpp_03.xhtml">anonymous_namespace{cmdlineinit.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02cmdlinemodulemanager_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cmdlinemodulemanager_8cpp_03.xhtml">anonymous_namespace{cmdlinemodulemanager.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02cmdlineoptionsmodule_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cmdlineoptionsmodule_8cpp_03.xhtml">anonymous_namespace{cmdlineoptionsmodule.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02cmdlineprogramcontext_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cmdlineprogramcontext_8cpp_03.xhtml">anonymous_namespace{cmdlineprogramcontext.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02cmdlinerunner_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cmdlinerunner_8cpp_03.xhtml">anonymous_namespace{cmdlinerunner.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02coolstuff_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02coolstuff_8cpp_03.xhtml">anonymous_namespace{coolstuff.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02cpuinfo_8cpp_03.xhtml">anonymous_namespace{cpuinfo.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02errorcodes_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02errorcodes_8cpp_03.xhtml">anonymous_namespace{errorcodes.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02exceptions_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02exceptions_8cpp_03.xhtml">anonymous_namespace{exceptions.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02expfit_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02expfit_8cpp_03.xhtml">anonymous_namespace{expfit.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02exponentialdistribution_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02exponentialdistribution_8cpp_03.xhtml">anonymous_namespace{exponentialdistribution.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02filenameoption_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02filenameoption_8cpp_03.xhtml">anonymous_namespace{filenameoption.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02filenameoptionmanager_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02filenameoptionmanager_8cpp_03.xhtml">anonymous_namespace{filenameoptionmanager.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02fileredirector_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02fileredirector_8cpp_03.xhtml">anonymous_namespace{fileredirector.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02filestream_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02filestream_8cpp_03.xhtml">anonymous_namespace{filestream.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02futil_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02futil_8cpp_03.xhtml">anonymous_namespace{futil.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02gammadistribution_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02gammadistribution_8cpp_03.xhtml">anonymous_namespace{gammadistribution.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02hardwaretopology_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02hardwaretopology_8cpp_03.xhtml">anonymous_namespace{hardwaretopology.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02helpwritercontext_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02helpwritercontext_8cpp_03.xhtml">anonymous_namespace{helpwritercontext.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02histogram_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02histogram_8cpp_03.xhtml">anonymous_namespace{histogram.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02init_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02init_8cpp_03.xhtml">anonymous_namespace{init.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02insert-molecules_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02insert-molecules_8cpp_03.xhtml">anonymous_namespace{insert-molecules.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02modules_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02modules_8cpp_03.xhtml">anonymous_namespace{modules.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02nbsearch_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02nbsearch_8cpp_03.xhtml">anonymous_namespace{nbsearch.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02normaldistribution_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02normaldistribution_8cpp_03.xhtml">anonymous_namespace{normaldistribution.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02optionsvisitor_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02optionsvisitor_8cpp_03.xhtml">anonymous_namespace{optionsvisitor.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02pargs_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02pargs_8cpp_03.xhtml">anonymous_namespace{pargs.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02programcontext_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02programcontext_8cpp_03.xhtml">anonymous_namespace{programcontext.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02pull_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02pull_8cpp_03.xhtml">anonymous_namespace{pull.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02rstparser_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02rstparser_8cpp_03.xhtml">anonymous_namespace{rstparser.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02seed_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02seed_8cpp_03.xhtml">anonymous_namespace{seed.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02selectioncollection_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02selectioncollection_8cpp_03.xhtml">anonymous_namespace{selectioncollection.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02selhelp_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02selhelp_8cpp_03.xhtml">anonymous_namespace{selhelp.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02shellcompletions_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02shellcompletions_8cpp_03.xhtml">anonymous_namespace{shellcompletions.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02stringutil_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02stringutil_8cpp_03.xhtml">anonymous_namespace{stringutil.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02tabulatednormaldistribution_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02tabulatednormaldistribution_8cpp_03.xhtml">anonymous_namespace{tabulatednormaldistribution.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02tabulatednormaldistribution_8h_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02tabulatednormaldistribution_8h_03.xhtml">anonymous_namespace{tabulatednormaldistribution.h}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02threefry_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02threefry_8cpp_03.xhtml">anonymous_namespace{threefry.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02timeunitmanager_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02timeunitmanager_8cpp_03.xhtml">anonymous_namespace{timeunitmanager.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02uniformintdistribution_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02uniformintdistribution_8cpp_03.xhtml">anonymous_namespace{uniformintdistribution.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1anonymous__namespace_02uniformrealdistribution_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1anonymous__namespace_02uniformrealdistribution_8cpp_03.xhtml">anonymous_namespace{uniformrealdistribution.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1internal"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml">internal</a></td></tr>
<tr class="memdesc:namespacegmx_1_1internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal GROMACS namespace. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacegmx_1_1test"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml">test</a></td></tr>
<tr class="memdesc:namespacegmx_1_1test"><td class="mdescLeft">&#160;</td><td class="mdescRight">Testing utilities namespace. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract base class for all objects that provide data.  <a href="classgmx_1_1AbstractAnalysisData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisData.xhtml">AnalysisData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parallelizable data container for raw data.  <a href="classgmx_1_1AnalysisData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataHandle.xhtml">AnalysisDataHandle</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handle for inserting data into <a class="el" href="classgmx_1_1AnalysisData.xhtml" title="Parallelizable data container for raw data. ">AnalysisData</a>.  <a href="classgmx_1_1AnalysisDataHandle.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractAnalysisArrayData.xhtml">AbstractAnalysisArrayData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract base class for data objects that present in-memory data.  <a href="classgmx_1_1AbstractAnalysisArrayData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisArrayData.xhtml">AnalysisArrayData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple in-memory data array.  <a href="classgmx_1_1AnalysisArrayData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataValue.xhtml">AnalysisDataValue</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Value type for representing a single value in analysis data objects.  <a href="classgmx_1_1AnalysisDataValue.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataFrameHeader.xhtml">AnalysisDataFrameHeader</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Value type for storing frame-level information for analysis data.  <a href="classgmx_1_1AnalysisDataFrameHeader.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataPointSetRef.xhtml">AnalysisDataPointSetRef</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Value type wrapper for non-mutable access to a set of data column values.  <a href="classgmx_1_1AnalysisDataPointSetRef.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataFrameRef.xhtml">AnalysisDataFrameRef</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Value type wrapper for non-mutable access to a data frame.  <a href="classgmx_1_1AnalysisDataFrameRef.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1IAnalysisDataModule.xhtml">IAnalysisDataModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for a module that gets notified whenever data is added.  <a href="classgmx_1_1IAnalysisDataModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataModuleSerial.xhtml">AnalysisDataModuleSerial</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience base class for serial analysis data modules.  <a href="classgmx_1_1AnalysisDataModuleSerial.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataModuleParallel.xhtml">AnalysisDataModuleParallel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience base class for parallel analysis data modules.  <a href="classgmx_1_1AnalysisDataModuleParallel.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataModuleManager.xhtml">AnalysisDataModuleManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Encapsulates handling of data modules attached to <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml" title="Abstract base class for all objects that provide data. ">AbstractAnalysisData</a>.  <a href="classgmx_1_1AnalysisDataModuleManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataProxy.xhtml">AnalysisDataProxy</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal implementation class used to implement column modules.  <a href="classgmx_1_1AnalysisDataProxy.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataStorageFrame.xhtml">AnalysisDataStorageFrame</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows assigning values for a data frame in <a class="el" href="classgmx_1_1AnalysisDataStorage.xhtml" title="Helper class that implements storage of data. ">AnalysisDataStorage</a>.  <a href="classgmx_1_1AnalysisDataStorageFrame.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataStorage.xhtml">AnalysisDataStorage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class that implements storage of data.  <a href="classgmx_1_1AnalysisDataStorage.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataFrameLocalDataSetHandle.xhtml">AnalysisDataFrameLocalDataSetHandle</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handle to a single data set within frame-local data array.  <a href="classgmx_1_1AnalysisDataFrameLocalDataSetHandle.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataFrameLocalDataHandle.xhtml">AnalysisDataFrameLocalDataHandle</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handle to a single frame data within frame-local data array.  <a href="classgmx_1_1AnalysisDataFrameLocalDataHandle.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataFrameLocalData.xhtml">AnalysisDataFrameLocalData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container for an array of frame-local values that supports parallel data processing.  <a href="classgmx_1_1AnalysisDataFrameLocalData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataAverageModule.xhtml">AnalysisDataAverageModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data module for independently averaging each column in input data.  <a href="classgmx_1_1AnalysisDataAverageModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataFrameAverageModule.xhtml">AnalysisDataFrameAverageModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data module for averaging of columns for each frame.  <a href="classgmx_1_1AnalysisDataFrameAverageModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataDisplacementModule.xhtml">AnalysisDataDisplacementModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data module for calculating displacements.  <a href="classgmx_1_1AnalysisDataDisplacementModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataFrameAverager.xhtml">AnalysisDataFrameAverager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class for modules that average values over frames.  <a href="classgmx_1_1AnalysisDataFrameAverager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisHistogramSettingsInitializer.xhtml">AnalysisHistogramSettingsInitializer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides "named parameter" idiom for constructing histograms.  <a href="classgmx_1_1AnalysisHistogramSettingsInitializer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisHistogramSettings.xhtml">AnalysisHistogramSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Contains parameters that specify histogram bin locations.  <a href="classgmx_1_1AnalysisHistogramSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractAverageHistogram.xhtml">AbstractAverageHistogram</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for representing histograms averaged over frames.  <a href="classgmx_1_1AbstractAverageHistogram.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataSimpleHistogramModule.xhtml">AnalysisDataSimpleHistogramModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data module for per-frame histograms.  <a href="classgmx_1_1AnalysisDataSimpleHistogramModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataWeightedHistogramModule.xhtml">AnalysisDataWeightedHistogramModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data module for per-frame weighted histograms.  <a href="classgmx_1_1AnalysisDataWeightedHistogramModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataBinAverageModule.xhtml">AnalysisDataBinAverageModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data module for bin averages.  <a href="classgmx_1_1AnalysisDataBinAverageModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataLifetimeModule.xhtml">AnalysisDataLifetimeModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data module for computing lifetime histograms for columns in input data.  <a href="classgmx_1_1AnalysisDataLifetimeModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataPlotSettings.xhtml">AnalysisDataPlotSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Common settings for data plots.  <a href="classgmx_1_1AnalysisDataPlotSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractPlotModule.xhtml">AbstractPlotModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract data module for writing data into a file.  <a href="classgmx_1_1AbstractPlotModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataPlotModule.xhtml">AnalysisDataPlotModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Plotting module for straightforward plotting of data.  <a href="classgmx_1_1AnalysisDataPlotModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataVectorPlotModule.xhtml">AnalysisDataVectorPlotModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Plotting module specifically for data consisting of vectors.  <a href="classgmx_1_1AnalysisDataVectorPlotModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisDataParallelOptions.xhtml">AnalysisDataParallelOptions</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parallelization options for analysis data objects.  <a href="classgmx_1_1AnalysisDataParallelOptions.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineHelpContext.xhtml">CommandLineHelpContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Context information for writing out command-line help.  <a href="classgmx_1_1CommandLineHelpContext.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1GlobalCommandLineHelpContext.xhtml">GlobalCommandLineHelpContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper for passing <a class="el" href="classgmx_1_1CommandLineHelpContext.xhtml" title="Context information for writing out command-line help. ">CommandLineHelpContext</a> into <a class="el" href="group__module__commandline.xhtml#ga5140c89919960e8e1e218a5b0d881cd5" title="Parse command-line arguments. ">parse_common_args()</a>.  <a href="classgmx_1_1GlobalCommandLineHelpContext.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineHelpModule.xhtml">CommandLineHelpModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Command-line module for producing help.  <a href="classgmx_1_1CommandLineHelpModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">STL-like container for non-mutable interface to a C array (or part of a std::vector).  <a href="classgmx_1_1ConstArrayRef.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineHelpWriter.xhtml">CommandLineHelpWriter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes help information for <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a>.  <a href="classgmx_1_1CommandLineHelpWriter.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleSettings.xhtml">CommandLineModuleSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Settings to pass information between a module and the general runner.  <a href="classgmx_1_1CommandLineModuleSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ICommandLineModule.xhtml">ICommandLineModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Module that can be run from command line using <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml" title="Implements a wrapper command-line interface for multiple modules. ">CommandLineModuleManager</a>.  <a href="classgmx_1_1ICommandLineModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleGroupData.xhtml">CommandLineModuleGroupData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal data for a <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml" title="Implements a wrapper command-line interface for multiple modules. ">CommandLineModuleManager</a> module group.  <a href="classgmx_1_1CommandLineModuleGroupData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineCommonOptionsHolder.xhtml">CommandLineCommonOptionsHolder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Encapsulates some handling of common options to the wrapper binary.  <a href="classgmx_1_1CommandLineCommonOptionsHolder.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml">CommandLineModuleManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements a wrapper command-line interface for multiple modules.  <a href="classgmx_1_1CommandLineModuleManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineModuleGroup.xhtml">CommandLineModuleGroup</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handle to add content to a group added with <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a5759ea1e79f4b2267161794d507b109c" title="Adds a group for modules to use in help output. ">CommandLineModuleManager::addModuleGroup()</a>.  <a href="classgmx_1_1CommandLineModuleGroup.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ICommandLineOptionsModuleSettings.xhtml">ICommandLineOptionsModuleSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Settings to pass information between a CommandLineOptionsModule and generic code that runs it.  <a href="classgmx_1_1ICommandLineOptionsModuleSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml">ICommandLineOptionsModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Module that can be run from a command line and uses <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">gmx::Options</a> for argument processing.  <a href="classgmx_1_1ICommandLineOptionsModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineParser.xhtml">CommandLineParser</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements command-line parsing for <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a> objects.  <a href="classgmx_1_1CommandLineParser.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1IExecutableEnvironment.xhtml">IExecutableEnvironment</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows customization of the way various directories are found by <a class="el" href="classgmx_1_1CommandLineProgramContext.xhtml" title="Program context implementation for command line programs. ">CommandLineProgramContext</a>.  <a href="classgmx_1_1IExecutableEnvironment.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CommandLineProgramContext.xhtml">CommandLineProgramContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Program context implementation for command line programs.  <a href="classgmx_1_1CommandLineProgramContext.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CpuInfo.xhtml">CpuInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detect CPU capabilities and basic logical processor info.  <a href="classgmx_1_1CpuInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1HardwareTopology.xhtml">HardwareTopology</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Information about sockets, cores, threads, numa, caches.  <a href="classgmx_1_1HardwareTopology.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgmx_1_1StaticLog2.xhtml">StaticLog2</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluate log2(n) for integer n statically at compile time.  <a href="structgmx_1_1StaticLog2.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgmx_1_1StaticLog2_3_011_01_4.xhtml">StaticLog2&lt; 1 &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specialization of StaticLog2&lt;n&gt; for n==1.  <a href="structgmx_1_1StaticLog2_3_011_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgmx_1_1StaticLog2_3_010_01_4.xhtml">StaticLog2&lt; 0 &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specialization of StaticLog2&lt;n&gt; for n==0.  <a href="structgmx_1_1StaticLog2_3_010_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BasicVector.xhtml">BasicVector</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ class for 3D vectors.  <a href="classgmx_1_1BasicVector.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">STL-like container for an interface to a C array (or part of a std::vector).  <a href="classgmx_1_1ArrayRef.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimulationSignal.xhtml">SimulationSignal</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">POD-style object used by mdrun ranks to set and receive signals within and between simulations.  <a href="classgmx_1_1SimulationSignal.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimulationSignaller.xhtml">SimulationSignaller</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Object used by mdrun ranks to signal to each other at this step.  <a href="classgmx_1_1SimulationSignaller.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextTableFormatter.xhtml">TextTableFormatter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats rows of a table for text output.  <a href="classgmx_1_1TextTableFormatter.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1HelpManager.xhtml">HelpManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper for providing interactive online help.  <a href="classgmx_1_1HelpManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractSimpleHelpTopic.xhtml">AbstractSimpleHelpTopic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract base class for help topics that have simple text and no subtopics.  <a href="classgmx_1_1AbstractSimpleHelpTopic.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractCompositeHelpTopic.xhtml">AbstractCompositeHelpTopic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract base class for help topics that have simple text and subtopics.  <a href="classgmx_1_1AbstractCompositeHelpTopic.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimpleHelpTopic.xhtml">SimpleHelpTopic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Template for simple implementation of <a class="el" href="classgmx_1_1AbstractSimpleHelpTopic.xhtml" title="Abstract base class for help topics that have simple text and no subtopics. ">AbstractSimpleHelpTopic</a>.  <a href="classgmx_1_1SimpleHelpTopic.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1CompositeHelpTopic.xhtml">CompositeHelpTopic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Template for simple implementation of <a class="el" href="classgmx_1_1AbstractCompositeHelpTopic.xhtml" title="Abstract base class for help topics that have simple text and subtopics. ">AbstractCompositeHelpTopic</a>.  <a href="classgmx_1_1CompositeHelpTopic.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1HelpLinks.xhtml">HelpLinks</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Hyperlink data for writing out help.  <a href="classgmx_1_1HelpLinks.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1HelpWriterContext.xhtml">HelpWriterContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Context information for writing out help.  <a href="classgmx_1_1HelpWriterContext.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1IHelpTopic.xhtml">IHelpTopic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides a single online help topic.  <a href="classgmx_1_1IHelpTopic.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1RstParagraphIterator.xhtml">RstParagraphIterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator over reStructuredText paragraphs.  <a href="classgmx_1_1RstParagraphIterator.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">OptionStorageTemplate</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Templated base class for constructing option value storage classes.  <a href="classgmx_1_1OptionStorageTemplate.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOption.xhtml">AbstractOption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract base class for specifying option properties.  <a href="classgmx_1_1AbstractOption.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionTemplate.xhtml">OptionTemplate</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Templated base class for constructing concrete option settings classes.  <a href="classgmx_1_1OptionTemplate.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionInfo.xhtml">OptionInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gives information and allows modifications to an option after creation.  <a href="classgmx_1_1OptionInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml">AbstractOptionStorage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract base class for converting, validating, and storing option values.  <a href="classgmx_1_1AbstractOptionStorage.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BooleanOption.xhtml">BooleanOption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies an option that provides boolean values.  <a href="classgmx_1_1BooleanOption.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1IntegerOption.xhtml">IntegerOption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies an option that provides integer values.  <a href="classgmx_1_1IntegerOption.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Int64Option.xhtml">Int64Option</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies an option that provides 64-bit integer values.  <a href="classgmx_1_1Int64Option.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1DoubleOption.xhtml">DoubleOption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies an option that provides floating-point (double) values.  <a href="classgmx_1_1DoubleOption.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1FloatOption.xhtml">FloatOption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies an option that provides floating-point (float) values.  <a href="classgmx_1_1FloatOption.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1StringOption.xhtml">StringOption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies an option that provides string values.  <a href="classgmx_1_1StringOption.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1EnumOption.xhtml">EnumOption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies an option that accepts enumerated string values and writes the selected index into an <code>enum</code> variable.  <a href="classgmx_1_1EnumOption.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BooleanOptionInfo.xhtml">BooleanOptionInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrapper class for accessing boolean option information.  <a href="classgmx_1_1BooleanOptionInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1IntegerOptionInfo.xhtml">IntegerOptionInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrapper class for accessing integer option information.  <a href="classgmx_1_1IntegerOptionInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Int64OptionInfo.xhtml">Int64OptionInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrapper class for accessing 64-bit integer option information.  <a href="classgmx_1_1Int64OptionInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1DoubleOptionInfo.xhtml">DoubleOptionInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrapper class for accessing floating-point option information.  <a href="classgmx_1_1DoubleOptionInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1FloatOptionInfo.xhtml">FloatOptionInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrapper class for accessing floating-point option information.  <a href="classgmx_1_1FloatOptionInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1StringOptionInfo.xhtml">StringOptionInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrapper class for accessing string option information.  <a href="classgmx_1_1StringOptionInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1EnumOptionInfo.xhtml">EnumOptionInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrapper class for accessing enum option information.  <a href="classgmx_1_1EnumOptionInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BooleanOptionStorage.xhtml">BooleanOptionStorage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts, validates, and stores boolean values.  <a href="classgmx_1_1BooleanOptionStorage.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1IntegerOptionStorage.xhtml">IntegerOptionStorage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts, validates, and stores integer values.  <a href="classgmx_1_1IntegerOptionStorage.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Int64OptionStorage.xhtml">Int64OptionStorage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts, validates, and stores integer values.  <a href="classgmx_1_1Int64OptionStorage.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1DoubleOptionStorage.xhtml">DoubleOptionStorage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts, validates, and stores floating-point (double) values.  <a href="classgmx_1_1DoubleOptionStorage.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1FloatOptionStorage.xhtml">FloatOptionStorage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts, validates, and stores floating-point (float) values.  <a href="classgmx_1_1FloatOptionStorage.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1StringOptionStorage.xhtml">StringOptionStorage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts, validates, and stores string values.  <a href="classgmx_1_1StringOptionStorage.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1EnumOptionStorage.xhtml">EnumOptionStorage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts, validates, and stores enum values.  <a href="classgmx_1_1EnumOptionStorage.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionsBehaviorCollection.xhtml">OptionsBehaviorCollection</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container for <a class="el" href="classgmx_1_1IOptionsBehavior.xhtml" title="Interface to provide extension points for options parsing. ">IOptionsBehavior</a> objects.  <a href="classgmx_1_1OptionsBehaviorCollection.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1FileNameOption.xhtml">FileNameOption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies an option that provides file names.  <a href="classgmx_1_1FileNameOption.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1FileNameOptionInfo.xhtml">FileNameOptionInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrapper class for accessing file name option information.  <a href="classgmx_1_1FileNameOptionInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1FileNameOptionManager.xhtml">FileNameOptionManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handles interaction of file name options with global options.  <a href="classgmx_1_1FileNameOptionManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1FileNameOptionStorage.xhtml">FileNameOptionStorage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts, validates, and stores file names.  <a href="classgmx_1_1FileNameOptionStorage.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1IOptionsBehavior.xhtml">IOptionsBehavior</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface to provide extension points for options parsing.  <a href="classgmx_1_1IOptionsBehavior.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1IOptionsContainer.xhtml">IOptionsContainer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for adding input options.  <a href="classgmx_1_1IOptionsContainer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionManagerContainer.xhtml">OptionManagerContainer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container to keep managers added with <a class="el" href="classgmx_1_1Options.xhtml#aec34346be097c2d666ff4434c4bf562e" title="Adds an option manager. ">Options::addManager()</a> and pass them to options.  <a href="classgmx_1_1OptionManagerContainer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1IOptionManager.xhtml">IOptionManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for option managers.  <a href="classgmx_1_1IOptionManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Options.xhtml">Options</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collection of options.  <a href="classgmx_1_1Options.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionsAssigner.xhtml">OptionsAssigner</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decorator class for assigning values to <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a>.  <a href="classgmx_1_1OptionsAssigner.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionsVisitor.xhtml">OptionsVisitor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pure interface for visiting options in a <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a> object.  <a href="classgmx_1_1OptionsVisitor.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionsTypeVisitor.xhtml">OptionsTypeVisitor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract base class for visiting options of a particular type.  <a href="classgmx_1_1OptionsTypeVisitor.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionsIterator.xhtml">OptionsIterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decorator class for visiting options in a <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a> object.  <a href="classgmx_1_1OptionsIterator.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionsModifyingVisitor.xhtml">OptionsModifyingVisitor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pure interface for visiting options in a <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a> object, allowing modifications.  <a href="classgmx_1_1OptionsModifyingVisitor.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionsModifyingTypeVisitor.xhtml">OptionsModifyingTypeVisitor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract base class for visiting options of a particular type, allowing modifications.  <a href="classgmx_1_1OptionsModifyingTypeVisitor.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionsModifyingIterator.xhtml">OptionsModifyingIterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decorator class for visiting options in a <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a> object, allowing changes.  <a href="classgmx_1_1OptionsModifyingIterator.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TimeUnitManager.xhtml">TimeUnitManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides common functionality for time unit conversions.  <a href="classgmx_1_1TimeUnitManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TimeUnitBehavior.xhtml">TimeUnitBehavior</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a> behavior to add a time unit option.  <a href="classgmx_1_1TimeUnitBehavior.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ExponentialDistribution.xhtml">ExponentialDistribution</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exponential distribution.  <a href="classgmx_1_1ExponentialDistribution.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1GammaDistribution.xhtml">GammaDistribution</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gamma distribution.  <a href="classgmx_1_1GammaDistribution.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1NormalDistribution.xhtml">NormalDistribution</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normal distribution.  <a href="classgmx_1_1NormalDistribution.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TabulatedNormalDistribution.xhtml">TabulatedNormalDistribution</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tabulated normal random distribution.  <a href="classgmx_1_1TabulatedNormalDistribution.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ThreeFry2x64General.xhtml">ThreeFry2x64General</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">General implementation class for ThreeFry counter-based random engines.  <a href="classgmx_1_1ThreeFry2x64General.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ThreeFry2x64.xhtml">ThreeFry2x64</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classgmx_1_1ThreeFry2x64.xhtml" title="ThreeFry2x64 random engine with 20 iteractions. ">ThreeFry2x64</a> random engine with 20 iteractions.  <a href="classgmx_1_1ThreeFry2x64.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ThreeFry2x64Fast.xhtml">ThreeFry2x64Fast</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classgmx_1_1ThreeFry2x64.xhtml" title="ThreeFry2x64 random engine with 20 iteractions. ">ThreeFry2x64</a> random engine with 13 iteractions.  <a href="classgmx_1_1ThreeFry2x64Fast.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1UniformIntDistribution.xhtml">UniformIntDistribution</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Uniform integer distribution.  <a href="classgmx_1_1UniformIntDistribution.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1UniformRealDistribution.xhtml">UniformRealDistribution</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Uniform real distribution.  <a href="classgmx_1_1UniformRealDistribution.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionCompiler.xhtml">SelectionCompiler</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements selection compilation.  <a href="classgmx_1_1SelectionCompiler.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisNeighborhoodPositions.xhtml">AnalysisNeighborhoodPositions</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Input positions for neighborhood searching.  <a href="classgmx_1_1AnalysisNeighborhoodPositions.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisNeighborhood.xhtml">AnalysisNeighborhood</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Neighborhood searching for analysis tools.  <a href="classgmx_1_1AnalysisNeighborhood.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisNeighborhoodPair.xhtml">AnalysisNeighborhoodPair</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Value type to represent a pair of positions found in neighborhood searching.  <a href="classgmx_1_1AnalysisNeighborhoodPair.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisNeighborhoodSearch.xhtml">AnalysisNeighborhoodSearch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialized neighborhood search with a fixed set of reference positions.  <a href="classgmx_1_1AnalysisNeighborhoodSearch.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AnalysisNeighborhoodPairSearch.xhtml">AnalysisNeighborhoodPairSearch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialized neighborhood pair search with a fixed set of positions.  <a href="classgmx_1_1AnalysisNeighborhoodPairSearch.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionParserValue.xhtml">SelectionParserValue</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes a parsed value, possibly resulting from expression evaluation.  <a href="classgmx_1_1SelectionParserValue.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionParserParameter.xhtml">SelectionParserParameter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes a parsed method parameter.  <a href="classgmx_1_1SelectionParserParameter.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1PositionCalculationCollection.xhtml">PositionCalculationCollection</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collection of <code><a class="el" href="structgmx__ana__poscalc__t.xhtml" title="Data structure for position calculation. ">gmx_ana_poscalc_t</a></code> structures for the same topology.  <a href="classgmx_1_1PositionCalculationCollection.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Selection.xhtml">Selection</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides access to a single selection.  <a href="classgmx_1_1Selection.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionPosition.xhtml">SelectionPosition</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides access to information about a single selected position.  <a href="classgmx_1_1SelectionPosition.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionEvaluator.xhtml">SelectionEvaluator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements selection evaluation.  <a href="classgmx_1_1SelectionEvaluator.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionCollection.xhtml">SelectionCollection</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collection of selections.  <a href="classgmx_1_1SelectionCollection.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionFileOption.xhtml">SelectionFileOption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies a special option that provides selections from a file.  <a href="classgmx_1_1SelectionFileOption.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionFileOptionInfo.xhtml">SelectionFileOptionInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrapper class for accessing and modifying selection file option information.  <a href="classgmx_1_1SelectionFileOptionInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionFileOptionStorage.xhtml">SelectionFileOptionStorage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation for a special option for reading selections from files.  <a href="classgmx_1_1SelectionFileOptionStorage.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionOption.xhtml">SelectionOption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies an option that provides selection(s).  <a href="classgmx_1_1SelectionOption.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionOptionInfo.xhtml">SelectionOptionInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrapper class for accessing and modifying selection option information.  <a href="classgmx_1_1SelectionOptionInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ITopologyProvider.xhtml">ITopologyProvider</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides topology information to <a class="el" href="classgmx_1_1SelectionOptionBehavior.xhtml" title="Options behavior to allow using SelectionOptions. ">SelectionOptionBehavior</a>.  <a href="classgmx_1_1ITopologyProvider.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionOptionBehavior.xhtml">SelectionOptionBehavior</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a> behavior to allow using SelectionOptions.  <a href="classgmx_1_1SelectionOptionBehavior.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionOptionManager.xhtml">SelectionOptionManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handles interaction of selection options with other options and user input.  <a href="classgmx_1_1SelectionOptionManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionOptionStorage.xhtml">SelectionOptionStorage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts, validates, and stores selection values.  <a href="classgmx_1_1SelectionOptionStorage.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgmx_1_1SelectionLocation.xhtml">SelectionLocation</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores the location of a selection element in the selection text.  <a href="structgmx_1_1SelectionLocation.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionTreeElement.xhtml">SelectionTreeElement</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents an element of a selection expression.  <a href="classgmx_1_1SelectionTreeElement.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionParserSymbol.xhtml">SelectionParserSymbol</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Single symbol for the selection parser.  <a href="classgmx_1_1SelectionParserSymbol.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionParserSymbolIterator.xhtml">SelectionParserSymbolIterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Input iterator for iterating symbols of a given type.  <a href="classgmx_1_1SelectionParserSymbolIterator.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SelectionParserSymbolTable.xhtml">SelectionParserSymbolTable</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Symbol table for the selection parser.  <a href="classgmx_1_1SelectionParserSymbolTable.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 double type.  <a href="classgmx_1_1Simd4Double.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Simd4DBool.xhtml">Simd4DBool</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 variable type to use for logical comparisons on doubles.  <a href="classgmx_1_1Simd4DBool.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 float type.  <a href="classgmx_1_1Simd4Float.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 variable type to use for logical comparisons on floats.  <a href="classgmx_1_1Simd4FBool.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double SIMD variable. Available if GMX_SIMD_HAVE_DOUBLE is 1.  <a href="classgmx_1_1SimdDouble.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD variable type to use for conversions to/from double.  <a href="classgmx_1_1SimdDInt32.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Boolean type for double SIMD data.  <a href="classgmx_1_1SimdDBool.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Boolean type for integer datatypes corresponding to double SIMD.  <a href="classgmx_1_1SimdDIBool.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float SIMD variable. Available if GMX_SIMD_HAVE_FLOAT is 1.  <a href="classgmx_1_1SimdFloat.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD variable type to use for conversions to/from float.  <a href="classgmx_1_1SimdFInt32.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Boolean type for float SIMD data.  <a href="classgmx_1_1SimdFBool.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Boolean type for integer datatypes corresponding to float SIMD.  <a href="classgmx_1_1SimdFIBool.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdLoadFProxyInternal.xhtml">SimdLoadFProxyInternal</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Proxy object to enable <a class="el" href="classgmx_1_1SimdLoadFProxyInternal.xhtml#a9cd62797f232789dc03206898a663db8" title="Load function that returns proxy object for SimdFloat and float. ">load()</a> for SIMD and float types.  <a href="classgmx_1_1SimdLoadFProxyInternal.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdLoadUFProxyInternal.xhtml">SimdLoadUFProxyInternal</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Proxy object to enable <a class="el" href="classgmx_1_1SimdLoadUFProxyInternal.xhtml#a0957b2bc048a80484035e0b763e32dff" title="LoadU function that returns proxy object for SimdFloat and float. ">loadU()</a> for SIMD and float types.  <a href="classgmx_1_1SimdLoadUFProxyInternal.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdLoadDProxyInternal.xhtml">SimdLoadDProxyInternal</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Proxy object to enable <a class="el" href="classgmx_1_1SimdLoadDProxyInternal.xhtml#a2123f67dbb7dae230e409c3150dfd4b9" title="Load function that returns proxy object for SimdDouble and double. ">load()</a> for SIMD and double types.  <a href="classgmx_1_1SimdLoadDProxyInternal.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdLoadUDProxyInternal.xhtml">SimdLoadUDProxyInternal</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Proxy object to enable <a class="el" href="classgmx_1_1SimdLoadUDProxyInternal.xhtml#ae50dddc9635a55a477854c890de9d039" title="Load function that returns proxy object for SimdDouble and double. ">loadU()</a> for SIMD and double types.  <a href="classgmx_1_1SimdLoadUDProxyInternal.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdLoadIProxyInternal.xhtml">SimdLoadIProxyInternal</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Proxy object <a class="el" href="classgmx_1_1SimdLoadIProxyInternal.xhtml#ab10e51a54f00093643c3968e7a20c725" title="Integer load function (proxy object) for SimdFInt32, SImdDInt32, and int32. ">load()</a> for <a class="el" href="classgmx_1_1SimdFInt32.xhtml" title="Integer SIMD variable type to use for conversions to/from float. ">SimdFInt32</a>, SImdDInt32, and int32.  <a href="classgmx_1_1SimdLoadIProxyInternal.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdLoadUIProxyInternal.xhtml">SimdLoadUIProxyInternal</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Proxy object - <a class="el" href="classgmx_1_1SimdLoadUIProxyInternal.xhtml#aeba679e2111d60602e932452b12d299c" title="Integer loadU function (proxy object) for SimdFInt32, SImdDInt32, and int32. ">loadU()</a> for <a class="el" href="classgmx_1_1SimdFInt32.xhtml" title="Integer SIMD variable type to use for conversions to/from float. ">SimdFInt32</a>, SImdDInt32, and int32.  <a href="classgmx_1_1SimdLoadUIProxyInternal.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdSetZeroProxyInternal.xhtml">SimdSetZeroProxyInternal</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Proxy object to enable <a class="el" href="classgmx_1_1SimdSetZeroProxyInternal.xhtml#af71c09938a422089a14ddbbf50defeee" title="Proxy object to set any SIMD or scalar variable to zero. ">setZero()</a> for SIMD and real types.  <a href="classgmx_1_1SimdSetZeroProxyInternal.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml">TrajectoryAnalysisModuleData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for thread-local data storage during trajectory analysis.  <a href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml">TrajectoryAnalysisModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for trajectory analysis modules.  <a href="classgmx_1_1TrajectoryAnalysisModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">TrajectoryAnalysisSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Trajectory analysis module configuration object.  <a href="classgmx_1_1TrajectoryAnalysisSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TopologyInformation.xhtml">TopologyInformation</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Topology information passed to a trajectory analysis module.  <a href="classgmx_1_1TopologyInformation.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisCommandLineRunner.xhtml">TrajectoryAnalysisCommandLineRunner</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Runner for command-line trajectory analysis tools.  <a href="classgmx_1_1TrajectoryAnalysisCommandLineRunner.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SurfaceAreaCalculator.xhtml">SurfaceAreaCalculator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes surface areas for a group of atoms/spheres.  <a href="classgmx_1_1SurfaceAreaCalculator.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisRunnerCommon.xhtml">TrajectoryAnalysisRunnerCommon</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements common trajectory analysis runner functionality.  <a href="classgmx_1_1TrajectoryAnalysisRunnerCommon.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml">AlignedAllocator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Aligned memory allocator.  <a href="classgmx_1_1AlignedAllocator.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgmx_1_1EmptyArrayRef.xhtml">EmptyArrayRef</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tag type to initialize empty array references.  <a href="structgmx_1_1EmptyArrayRef.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1BinaryInformationSettings.xhtml">BinaryInformationSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Settings for <a class="el" href="classgmx_1_1BinaryInformationSettings.xhtml#aa64dabefd1763c239ce1e130cc5fa371" title="Needed to read the members without otherwise unnecessary accessors. ">printBinaryInformation()</a>.  <a href="classgmx_1_1BinaryInformationSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1PrivateImplPointer.xhtml">PrivateImplPointer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class to manage a pointer to a private implementation class.  <a href="classgmx_1_1PrivateImplPointer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1DataFileOptions.xhtml">DataFileOptions</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Search parameters for <a class="el" href="classgmx_1_1DataFileFinder.xhtml" title="Searches data files from a set of paths. ">DataFileFinder</a>.  <a href="classgmx_1_1DataFileOptions.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgmx_1_1DataFileInfo.xhtml">DataFileInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Information about a data file found by <a class="el" href="classgmx_1_1DataFileFinder.xhtml#a45d2ecd3b688a1432fb94d9632de232a" title="Enumerates files in the data directories. ">DataFileFinder::enumerateFiles()</a>.  <a href="structgmx_1_1DataFileInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1DataFileFinder.xhtml">DataFileFinder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches data files from a set of paths.  <a href="classgmx_1_1DataFileFinder.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1DirectoryEnumerator.xhtml">DirectoryEnumerator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Lists files in a directory.  <a href="classgmx_1_1DirectoryEnumerator.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ExceptionInfo.xhtml">ExceptionInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores additional context information for exceptions.  <a href="classgmx_1_1ExceptionInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgmx_1_1ThrowLocation.xhtml">ThrowLocation</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores the location from which an exception was thrown.  <a href="structgmx_1_1ThrowLocation.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ExceptionInitializer.xhtml">ExceptionInitializer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides information for Gromacs exception constructors.  <a href="classgmx_1_1ExceptionInitializer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1GromacsException.xhtml">GromacsException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for all exception objects in Gromacs.  <a href="classgmx_1_1GromacsException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1FileIOError.xhtml">FileIOError</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for file I/O errors.  <a href="classgmx_1_1FileIOError.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1UserInputError.xhtml">UserInputError</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for user input errors.  <a href="classgmx_1_1UserInputError.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1InvalidInputError.xhtml">InvalidInputError</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for situations where user input cannot be parsed/understood.  <a href="classgmx_1_1InvalidInputError.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1InconsistentInputError.xhtml">InconsistentInputError</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for situations where user input is inconsistent.  <a href="classgmx_1_1InconsistentInputError.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimulationInstabilityError.xhtml">SimulationInstabilityError</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for simulation instabilities.  <a href="classgmx_1_1SimulationInstabilityError.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1InternalError.xhtml">InternalError</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for internal errors.  <a href="classgmx_1_1InternalError.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1APIError.xhtml">APIError</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for incorrect use of an API.  <a href="classgmx_1_1APIError.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1NotImplementedError.xhtml">NotImplementedError</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for use of an unimplemented feature.  <a href="classgmx_1_1NotImplementedError.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1IFileInputRedirector.xhtml">IFileInputRedirector</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows overriding file existence checks from code that supports it.  <a href="classgmx_1_1IFileInputRedirector.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1IFileOutputRedirector.xhtml">IFileOutputRedirector</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows capturing <code>stdout</code> and file output from code that supports it.  <a href="classgmx_1_1IFileOutputRedirector.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1StandardInputStream.xhtml">StandardInputStream</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Text input stream implementation for reading from <code>stdin</code>.  <a href="classgmx_1_1StandardInputStream.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextInputFile.xhtml">TextInputFile</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Text input stream implementation for reading from a file.  <a href="classgmx_1_1TextInputFile.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextOutputFile.xhtml">TextOutputFile</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Text output stream implementation for writing to a file.  <a href="classgmx_1_1TextOutputFile.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1FlagsTemplate.xhtml">FlagsTemplate</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Template class for typesafe handling of combination of flags.  <a href="classgmx_1_1FlagsTemplate.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1Regex.xhtml">Regex</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a regular expression.  <a href="classgmx_1_1Regex.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1MessageStringCollector.xhtml">MessageStringCollector</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class for collecting message strings, optionally with context.  <a href="classgmx_1_1MessageStringCollector.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1MessageStringContext.xhtml">MessageStringContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience class for creating a message context.  <a href="classgmx_1_1MessageStringContext.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgmx_1_1no__delete.xhtml">no_delete</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deleter for std::shared_ptr that does nothing.  <a href="structgmx_1_1no__delete.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgmx_1_1InstallationPrefixInfo.xhtml">InstallationPrefixInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides information about installation prefix (see <a class="el" href="classgmx_1_1IProgramContext.xhtml#ada732144a05c8faa224b5ad0d904df6f" title="Returns the installation prefix for GROMACS. ">IProgramContext::installationPrefix()</a>).  <a href="structgmx_1_1InstallationPrefixInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1IProgramContext.xhtml">IProgramContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides context information about the program that is calling the library.  <a href="classgmx_1_1IProgramContext.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1scoped__cptr.xhtml">scoped_cptr</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stripped-down version of scoped_ptr that uses <a class="el" href="smalloc_8h.xhtml#acd9f9223d6d8cad01c8f42a416d3292d" title="Frees memory referenced by ptr. ">sfree()</a> or custom deleter.  <a href="classgmx_1_1scoped__cptr.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1StringOutputStream.xhtml">StringOutputStream</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Text output stream implementation for writing to an in-memory string.  <a href="classgmx_1_1StringOutputStream.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1StringInputStream.xhtml">StringInputStream</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class to convert static string data to a stream.  <a href="classgmx_1_1StringInputStream.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1StringFormatter.xhtml">StringFormatter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function object that wraps a call to <a class="el" href="group__module__utility.xhtml#gaed06df18ca6f9fc3f42bad9ea4d7e025" title="Formats a string (snprintf() wrapper). ">formatString()</a> that expects a single conversion argument, for use with algorithms.  <a href="classgmx_1_1StringFormatter.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1IdentityFormatter.xhtml">IdentityFormatter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function object to implement the same interface as <code><a class="el" href="classgmx_1_1StringFormatter.xhtml" title="Function object that wraps a call to formatString() that expects a single conversion argument...">StringFormatter</a></code> to use with strings that should not be formatted further.  <a href="classgmx_1_1IdentityFormatter.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextLineWrapperSettings.xhtml">TextLineWrapperSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores settings for line wrapping.  <a href="classgmx_1_1TextLineWrapperSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextLineWrapper.xhtml">TextLineWrapper</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wraps lines to a predefined length.  <a href="classgmx_1_1TextLineWrapper.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextReader.xhtml">TextReader</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads text from a <a class="el" href="classgmx_1_1TextInputStream.xhtml" title="Interface for reading text. ">TextInputStream</a>.  <a href="classgmx_1_1TextReader.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextInputStream.xhtml">TextInputStream</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for reading text.  <a href="classgmx_1_1TextInputStream.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextOutputStream.xhtml">TextOutputStream</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for writing text.  <a href="classgmx_1_1TextOutputStream.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextWriter.xhtml">TextWriter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes text into a <a class="el" href="classgmx_1_1TextOutputStream.xhtml" title="Interface for writing text. ">TextOutputStream</a>.  <a href="classgmx_1_1TextWriter.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:aea400e67c2f38e5bacdf8677f38a61cc"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aea400e67c2f38e5bacdf8677f38a61cc"></a>
typedef std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1IAnalysisDataModule.xhtml">IAnalysisDataModule</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aea400e67c2f38e5bacdf8677f38a61cc">AnalysisDataModulePointer</a></td></tr>
<tr class="memdesc:aea400e67c2f38e5bacdf8677f38a61cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer for managing a generic analysis data module. <br/></td></tr>
<tr class="separator:aea400e67c2f38e5bacdf8677f38a61cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5b2ea776c6775a0c958a3750b42a97e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab5b2ea776c6775a0c958a3750b42a97e"></a>
typedef <a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a><br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1AnalysisDataValue.xhtml">AnalysisDataValue</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ab5b2ea776c6775a0c958a3750b42a97e">AnalysisDataValuesRef</a></td></tr>
<tr class="memdesc:ab5b2ea776c6775a0c958a3750b42a97e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for reference to an array of data values. <br/></td></tr>
<tr class="separator:ab5b2ea776c6775a0c958a3750b42a97e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87e4f5152c736da50dd59275f423a7a3"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a87e4f5152c736da50dd59275f423a7a3"></a>
typedef std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1AnalysisDataAverageModule.xhtml">AnalysisDataAverageModule</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a87e4f5152c736da50dd59275f423a7a3">AnalysisDataAverageModulePointer</a></td></tr>
<tr class="memdesc:a87e4f5152c736da50dd59275f423a7a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer to manage an <a class="el" href="classgmx_1_1AnalysisDataAverageModule.xhtml" title="Data module for independently averaging each column in input data. ">AnalysisDataAverageModule</a> object. <br/></td></tr>
<tr class="separator:a87e4f5152c736da50dd59275f423a7a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad580f7f69fb3536c9cba722587e77e49"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad580f7f69fb3536c9cba722587e77e49"></a>
typedef std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1AnalysisDataFrameAverageModule.xhtml">AnalysisDataFrameAverageModule</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad580f7f69fb3536c9cba722587e77e49">AnalysisDataFrameAverageModulePointer</a></td></tr>
<tr class="memdesc:ad580f7f69fb3536c9cba722587e77e49"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer to manage an <a class="el" href="classgmx_1_1AnalysisDataFrameAverageModule.xhtml" title="Data module for averaging of columns for each frame. ">AnalysisDataFrameAverageModule</a> object. <br/></td></tr>
<tr class="separator:ad580f7f69fb3536c9cba722587e77e49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5dd79fb2cd906b55b386b64084543b9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa5dd79fb2cd906b55b386b64084543b9"></a>
typedef std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1AnalysisDataDisplacementModule.xhtml">AnalysisDataDisplacementModule</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa5dd79fb2cd906b55b386b64084543b9">AnalysisDataDisplacementModulePointer</a></td></tr>
<tr class="memdesc:aa5dd79fb2cd906b55b386b64084543b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer to manage an <a class="el" href="classgmx_1_1AnalysisDataDisplacementModule.xhtml" title="Data module for calculating displacements. ">AnalysisDataDisplacementModule</a> object. <br/></td></tr>
<tr class="separator:aa5dd79fb2cd906b55b386b64084543b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06c190fcdacd0ca64e4e9026213483cb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a06c190fcdacd0ca64e4e9026213483cb"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1AbstractAverageHistogram.xhtml">AbstractAverageHistogram</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a06c190fcdacd0ca64e4e9026213483cb">AverageHistogramPointer</a></td></tr>
<tr class="memdesc:a06c190fcdacd0ca64e4e9026213483cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer to manage an <a class="el" href="classgmx_1_1AbstractAverageHistogram.xhtml" title="Base class for representing histograms averaged over frames. ">AbstractAverageHistogram</a> object. <br/></td></tr>
<tr class="separator:a06c190fcdacd0ca64e4e9026213483cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c928eedc8925c3c437b5362acf30ccd"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2c928eedc8925c3c437b5362acf30ccd"></a>
typedef std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1AnalysisDataSimpleHistogramModule.xhtml">AnalysisDataSimpleHistogramModule</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2c928eedc8925c3c437b5362acf30ccd">AnalysisDataSimpleHistogramModulePointer</a></td></tr>
<tr class="memdesc:a2c928eedc8925c3c437b5362acf30ccd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer to manage an <a class="el" href="classgmx_1_1AnalysisDataSimpleHistogramModule.xhtml" title="Data module for per-frame histograms. ">AnalysisDataSimpleHistogramModule</a> object. <br/></td></tr>
<tr class="separator:a2c928eedc8925c3c437b5362acf30ccd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a619b397ea8b7a9a81406d36f653b4c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3a619b397ea8b7a9a81406d36f653b4c"></a>
typedef std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1AnalysisDataWeightedHistogramModule.xhtml">AnalysisDataWeightedHistogramModule</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3a619b397ea8b7a9a81406d36f653b4c">AnalysisDataWeightedHistogramModulePointer</a></td></tr>
<tr class="memdesc:a3a619b397ea8b7a9a81406d36f653b4c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer to manage an <a class="el" href="classgmx_1_1AnalysisDataWeightedHistogramModule.xhtml" title="Data module for per-frame weighted histograms. ">AnalysisDataWeightedHistogramModule</a> object. <br/></td></tr>
<tr class="separator:a3a619b397ea8b7a9a81406d36f653b4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2832966f8a1d1e01888448ce10faa595"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2832966f8a1d1e01888448ce10faa595"></a>
typedef std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1AnalysisDataBinAverageModule.xhtml">AnalysisDataBinAverageModule</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2832966f8a1d1e01888448ce10faa595">AnalysisDataBinAverageModulePointer</a></td></tr>
<tr class="memdesc:a2832966f8a1d1e01888448ce10faa595"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer to manage an <a class="el" href="classgmx_1_1AnalysisDataBinAverageModule.xhtml" title="Data module for bin averages. ">AnalysisDataBinAverageModule</a> object. <br/></td></tr>
<tr class="separator:a2832966f8a1d1e01888448ce10faa595"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af036d959995ac12973db1da85b720bf6"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af036d959995ac12973db1da85b720bf6"></a>
typedef std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1AnalysisDataLifetimeModule.xhtml">AnalysisDataLifetimeModule</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af036d959995ac12973db1da85b720bf6">AnalysisDataLifetimeModulePointer</a></td></tr>
<tr class="memdesc:af036d959995ac12973db1da85b720bf6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer to manage an <a class="el" href="classgmx_1_1AnalysisDataLifetimeModule.xhtml" title="Data module for computing lifetime histograms for columns in input data. ">AnalysisDataLifetimeModule</a> object. <br/></td></tr>
<tr class="separator:af036d959995ac12973db1da85b720bf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38eb9496e0b6e783869001733014b6d0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a38eb9496e0b6e783869001733014b6d0"></a>
typedef std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1AnalysisDataPlotModule.xhtml">AnalysisDataPlotModule</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a38eb9496e0b6e783869001733014b6d0">AnalysisDataPlotModulePointer</a></td></tr>
<tr class="memdesc:a38eb9496e0b6e783869001733014b6d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer to manage an <a class="el" href="classgmx_1_1AnalysisDataPlotModule.xhtml" title="Plotting module for straightforward plotting of data. ">AnalysisDataPlotModule</a> object. <br/></td></tr>
<tr class="separator:a38eb9496e0b6e783869001733014b6d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacd637dfda5b531daec3b8a89f389c10"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aacd637dfda5b531daec3b8a89f389c10"></a>
typedef std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1AnalysisDataVectorPlotModule.xhtml">AnalysisDataVectorPlotModule</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aacd637dfda5b531daec3b8a89f389c10">AnalysisDataVectorPlotModulePointer</a></td></tr>
<tr class="memdesc:aacd637dfda5b531daec3b8a89f389c10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer to manage an <a class="el" href="classgmx_1_1AnalysisDataVectorPlotModule.xhtml" title="Plotting module specifically for data consisting of vectors. ">AnalysisDataVectorPlotModule</a> object. <br/></td></tr>
<tr class="separator:aacd637dfda5b531daec3b8a89f389c10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1f47492bbdb0412052613d0096a20c0b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga1f47492bbdb0412052613d0096a20c0b"></a>
typedef std::map&lt; std::string, <br class="typebreak"/>
<a class="el" href="group__module__commandline.xhtml#ga92d17acbe7afad4effeda8d9be200305">CommandLineModulePointer</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga1f47492bbdb0412052613d0096a20c0b">CommandLineModuleMap</a></td></tr>
<tr class="memdesc:ga1f47492bbdb0412052613d0096a20c0b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container type for mapping module names to module objects. <br/></td></tr>
<tr class="separator:ga1f47492bbdb0412052613d0096a20c0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadc9ea6aca3a54c2691284aa39cdd294d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gadc9ea6aca3a54c2691284aa39cdd294d"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1CommandLineModuleGroupData.xhtml">CommandLineModuleGroupData</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gadc9ea6aca3a54c2691284aa39cdd294d">CommandLineModuleGroupDataPointer</a></td></tr>
<tr class="memdesc:gadc9ea6aca3a54c2691284aa39cdd294d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer type for managing a <a class="el" href="classgmx_1_1CommandLineModuleGroup.xhtml" title="Handle to add content to a group added with CommandLineModuleManager::addModuleGroup(). ">CommandLineModuleGroup</a>. <br/></td></tr>
<tr class="separator:gadc9ea6aca3a54c2691284aa39cdd294d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7098a58b563a17889eef62c80fae42bf"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga7098a58b563a17889eef62c80fae42bf"></a>
typedef std::vector<br class="typebreak"/>
&lt; <a class="el" href="group__module__commandline.xhtml#gadc9ea6aca3a54c2691284aa39cdd294d">CommandLineModuleGroupDataPointer</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga7098a58b563a17889eef62c80fae42bf">CommandLineModuleGroupList</a></td></tr>
<tr class="memdesc:ga7098a58b563a17889eef62c80fae42bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container type for keeping a list of module groups. <br/></td></tr>
<tr class="separator:ga7098a58b563a17889eef62c80fae42bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga92d17acbe7afad4effeda8d9be200305"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga92d17acbe7afad4effeda8d9be200305"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1ICommandLineModule.xhtml">ICommandLineModule</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga92d17acbe7afad4effeda8d9be200305">CommandLineModulePointer</a></td></tr>
<tr class="memdesc:ga92d17acbe7afad4effeda8d9be200305"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer type for managing a <a class="el" href="classgmx_1_1ICommandLineModule.xhtml" title="Module that can be run from command line using CommandLineModuleManager. ">ICommandLineModule</a>. <br/></td></tr>
<tr class="separator:ga92d17acbe7afad4effeda8d9be200305"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a682ce4a779fde44ee633b8648eeafe87"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a682ce4a779fde44ee633b8648eeafe87"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml">ICommandLineOptionsModule</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a682ce4a779fde44ee633b8648eeafe87">ICommandLineOptionsModulePointer</a></td></tr>
<tr class="memdesc:a682ce4a779fde44ee633b8648eeafe87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer to manage an <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml" title="Module that can be run from a command line and uses gmx::Options for argument processing. ">ICommandLineOptionsModule</a>. <br/></td></tr>
<tr class="separator:a682ce4a779fde44ee633b8648eeafe87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac522eb6a6c382e39345834c796201098"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gac522eb6a6c382e39345834c796201098"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1IExecutableEnvironment.xhtml">IExecutableEnvironment</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gac522eb6a6c382e39345834c796201098">ExecutableEnvironmentPointer</a></td></tr>
<tr class="memdesc:gac522eb6a6c382e39345834c796201098"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for a smart pointer to <a class="el" href="classgmx_1_1IExecutableEnvironment.xhtml" title="Allows customization of the way various directories are found by CommandLineProgramContext. ">IExecutableEnvironment</a>. <br/></td></tr>
<tr class="separator:gac522eb6a6c382e39345834c796201098"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a139c1919a9680de4ad1450f42e37d33b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a139c1919a9680de4ad1450f42e37d33b"></a>
typedef <a class="el" href="classgmx_1_1BasicVector.xhtml">BasicVector</a>&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">RVec</a></td></tr>
<tr class="memdesc:a139c1919a9680de4ad1450f42e37d33b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for C++ <code>rvec</code>-equivalent type. <br/></td></tr>
<tr class="separator:a139c1919a9680de4ad1450f42e37d33b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8593c4aa4e1f10f3571c8b8f2cd933a8"><td class="memItemLeft" align="right" valign="top">typedef double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a8593c4aa4e1f10f3571c8b8f2cd933a8">integrator_t</a> (FILE *fplog, t_commrec *cr, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[], const gmx_output_env_t *oenv, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bVerbose, int nstglobalcomm, gmx_vsite_t *vsite, gmx_constr_t constr, int stepout, t_inputrec *inputrec, gmx_mtop_t *top_global, t_fcdata *fcd, t_state *state_global, <a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *mdatoms, t_nrnb *nrnb, gmx_wallcycle_t wcycle, <a class="el" href="edsam_8h.xhtml#a0fa9ace476add5ee1fd6cd76c870f32e">gmx_edsam_t</a> ed, t_forcerec *fr, int repl_ex_nst, int repl_ex_nex, int repl_ex_seed, gmx_membed_t *membed, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> cpt_period, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> max_hours, int imdport, unsigned long Flags, <a class="el" href="structgmx__walltime__accounting.xhtml">gmx_walltime_accounting_t</a> walltime_accounting)</td></tr>
<tr class="memdesc:a8593c4aa4e1f10f3571c8b8f2cd933a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integrator algorithm implementation.  <a href="#a8593c4aa4e1f10f3571c8b8f2cd933a8">More...</a><br/></td></tr>
<tr class="separator:a8593c4aa4e1f10f3571c8b8f2cd933a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c0facebaa27d417dcf4d032f2a5725a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2c0facebaa27d417dcf4d032f2a5725a"></a>
typedef std::array<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1SimulationSignal.xhtml">SimulationSignal</a>, eglsNR &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2c0facebaa27d417dcf4d032f2a5725a">SimulationSignals</a></td></tr>
<tr class="memdesc:a2c0facebaa27d417dcf4d032f2a5725a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience typedef for the group of signals used. <br/></td></tr>
<tr class="separator:a2c0facebaa27d417dcf4d032f2a5725a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga426f73ac74d1891aae96b6f27e2173a6"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga426f73ac74d1891aae96b6f27e2173a6"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1AbstractCompositeHelpTopic.xhtml">AbstractCompositeHelpTopic</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__group__libraryapi.xhtml#ga426f73ac74d1891aae96b6f27e2173a6">CompositeHelpTopicPointer</a></td></tr>
<tr class="memdesc:ga426f73ac74d1891aae96b6f27e2173a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer type to manage a <a class="el" href="classgmx_1_1AbstractCompositeHelpTopic.xhtml" title="Abstract base class for help topics that have simple text and subtopics. ">AbstractCompositeHelpTopic</a> object. <br/></td></tr>
<tr class="separator:ga426f73ac74d1891aae96b6f27e2173a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb455c7711ece592606e70a093ff80b4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="abb455c7711ece592606e70a093ff80b4"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1IHelpTopic.xhtml">IHelpTopic</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#abb455c7711ece592606e70a093ff80b4">HelpTopicPointer</a></td></tr>
<tr class="memdesc:abb455c7711ece592606e70a093ff80b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer type to manage a <a class="el" href="classgmx_1_1IHelpTopic.xhtml" title="Provides a single online help topic. ">IHelpTopic</a> object. <br/></td></tr>
<tr class="separator:abb455c7711ece592606e70a093ff80b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafdd645721a8da7d18eec7f0bc84efe29"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gafdd645721a8da7d18eec7f0bc84efe29"></a>
typedef <a class="el" href="classgmx_1_1EnumOption.xhtml">EnumOption</a>&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__options.xhtml#gafdd645721a8da7d18eec7f0bc84efe29">EnumIntOption</a></td></tr>
<tr class="memdesc:gafdd645721a8da7d18eec7f0bc84efe29"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for an enumerated option that stores into an <code>int</code> variable. <br/></td></tr>
<tr class="separator:gafdd645721a8da7d18eec7f0bc84efe29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7552279e0ab63edd1e9324c5786e28e7"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classgmx_1_1FloatOption.xhtml">FloatOption</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__options.xhtml#ga7552279e0ab63edd1e9324c5786e28e7">RealOption</a></td></tr>
<tr class="memdesc:ga7552279e0ab63edd1e9324c5786e28e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typedef for either <a class="el" href="classgmx_1_1DoubleOption.xhtml" title="Specifies an option that provides floating-point (double) values. ">DoubleOption</a> or <a class="el" href="classgmx_1_1FloatOption.xhtml" title="Specifies an option that provides floating-point (float) values. ">FloatOption</a>, depending on precision.  <a href="group__module__options.xhtml#ga7552279e0ab63edd1e9324c5786e28e7">More...</a><br/></td></tr>
<tr class="separator:ga7552279e0ab63edd1e9324c5786e28e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab1c4e0b93e5d22b0c9a534f0235496f5"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classgmx_1_1FloatOptionInfo.xhtml">FloatOptionInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__options.xhtml#gab1c4e0b93e5d22b0c9a534f0235496f5">RealOptionInfo</a></td></tr>
<tr class="memdesc:gab1c4e0b93e5d22b0c9a534f0235496f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typedef for either <a class="el" href="classgmx_1_1DoubleOptionInfo.xhtml" title="Wrapper class for accessing floating-point option information. ">DoubleOptionInfo</a> or <a class="el" href="classgmx_1_1FloatOptionInfo.xhtml" title="Wrapper class for accessing floating-point option information. ">FloatOptionInfo</a>, depending on precision.  <a href="group__module__options.xhtml#gab1c4e0b93e5d22b0c9a534f0235496f5">More...</a><br/></td></tr>
<tr class="separator:gab1c4e0b93e5d22b0c9a534f0235496f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a059233e5e29d17f821d7f56ef3faa7e4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a059233e5e29d17f821d7f56ef3faa7e4"></a>
typedef std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1IOptionsBehavior.xhtml">IOptionsBehavior</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a059233e5e29d17f821d7f56ef3faa7e4">OptionsBehaviorPointer</a></td></tr>
<tr class="memdesc:a059233e5e29d17f821d7f56ef3faa7e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer for behaviors stored in <a class="el" href="classgmx_1_1OptionsBehaviorCollection.xhtml" title="Container for IOptionsBehavior objects. ">OptionsBehaviorCollection</a>. <br/></td></tr>
<tr class="separator:a059233e5e29d17f821d7f56ef3faa7e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b60cc84dcdf372e00a5084712630993"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0b60cc84dcdf372e00a5084712630993"></a>
typedef <a class="el" href="classgmx_1_1FlagsTemplate.xhtml">FlagsTemplate</a>&lt; <a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987">OptionFlag</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0b60cc84dcdf372e00a5084712630993">OptionFlags</a></td></tr>
<tr class="memdesc:a0b60cc84dcdf372e00a5084712630993"><td class="mdescLeft">&#160;</td><td class="mdescRight">Holds a combination of <a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987" title="Flags for options. ">OptionFlag</a> values. <br/></td></tr>
<tr class="separator:a0b60cc84dcdf372e00a5084712630993"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac44e2bbcc40f48812b6b756a503ea51"><td class="memItemLeft" align="right" valign="top">typedef std::random_device&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aac44e2bbcc40f48812b6b756a503ea51">RandomDevice</a></td></tr>
<tr class="memdesc:aac44e2bbcc40f48812b6b756a503ea51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Random device.  <a href="#aac44e2bbcc40f48812b6b756a503ea51">More...</a><br/></td></tr>
<tr class="separator:aac44e2bbcc40f48812b6b756a503ea51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ea21974bdd8acdfa1c344b0945cff1b"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classgmx_1_1ThreeFry2x64Fast.xhtml">ThreeFry2x64Fast</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a7ea21974bdd8acdfa1c344b0945cff1b">DefaultRandomEngine</a></td></tr>
<tr class="memdesc:a7ea21974bdd8acdfa1c344b0945cff1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default fast and accurate random engine in Gromacs.  <a href="#a7ea21974bdd8acdfa1c344b0945cff1b">More...</a><br/></td></tr>
<tr class="separator:a7ea21974bdd8acdfa1c344b0945cff1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec46c9561c55f7595677160ee727395d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aec46c9561c55f7595677160ee727395d"></a>
typedef std::list<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1SelectionParserValue.xhtml">SelectionParserValue</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aec46c9561c55f7595677160ee727395d">SelectionParserValueList</a></td></tr>
<tr class="memdesc:aec46c9561c55f7595677160ee727395d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container for a list of <a class="el" href="classgmx_1_1SelectionParserValue.xhtml" title="Describes a parsed value, possibly resulting from expression evaluation. ">SelectionParserValue</a> objects. <br/></td></tr>
<tr class="separator:aec46c9561c55f7595677160ee727395d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a043953ace26fa6e1f17f90245e3a29bd"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a043953ace26fa6e1f17f90245e3a29bd"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="namespacegmx.xhtml#aec46c9561c55f7595677160ee727395d">SelectionParserValueList</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a043953ace26fa6e1f17f90245e3a29bd">SelectionParserValueListPointer</a></td></tr>
<tr class="memdesc:a043953ace26fa6e1f17f90245e3a29bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer type for managing a SelectionParserValueList. <br/></td></tr>
<tr class="separator:a043953ace26fa6e1f17f90245e3a29bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2000e8454576fcfcd5a8fdc5d060da4e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2000e8454576fcfcd5a8fdc5d060da4e"></a>
typedef std::list<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1SelectionParserParameter.xhtml">SelectionParserParameter</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2000e8454576fcfcd5a8fdc5d060da4e">SelectionParserParameterList</a></td></tr>
<tr class="memdesc:a2000e8454576fcfcd5a8fdc5d060da4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container for a list of <a class="el" href="classgmx_1_1SelectionParserParameter.xhtml" title="Describes a parsed method parameter. ">SelectionParserParameter</a> objects. <br/></td></tr>
<tr class="separator:a2000e8454576fcfcd5a8fdc5d060da4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af69a9fb56d051d95e77a90d57a9fa42e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af69a9fb56d051d95e77a90d57a9fa42e"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="namespacegmx.xhtml#a2000e8454576fcfcd5a8fdc5d060da4e">SelectionParserParameterList</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af69a9fb56d051d95e77a90d57a9fa42e">SelectionParserParameterListPointer</a></td></tr>
<tr class="memdesc:af69a9fb56d051d95e77a90d57a9fa42e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer type for managing a SelectionParserParameterList. <br/></td></tr>
<tr class="separator:af69a9fb56d051d95e77a90d57a9fa42e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac852a0801cf49723903e23bc77a32163"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac852a0801cf49723903e23bc77a32163"></a>
typedef std::vector&lt; <a class="el" href="classgmx_1_1Selection.xhtml">Selection</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ac852a0801cf49723903e23bc77a32163">SelectionList</a></td></tr>
<tr class="memdesc:ac852a0801cf49723903e23bc77a32163"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container of selections used in public selection interfaces. <br/></td></tr>
<tr class="separator:ac852a0801cf49723903e23bc77a32163"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e73e50cc7002a24229fa6650b8ccfc8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0e73e50cc7002a24229fa6650b8ccfc8"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1internal_1_1SelectionData.xhtml">internal::SelectionData</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0e73e50cc7002a24229fa6650b8ccfc8">SelectionDataPointer</a></td></tr>
<tr class="memdesc:a0e73e50cc7002a24229fa6650b8ccfc8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer for managing an internal selection data object. <br/></td></tr>
<tr class="separator:a0e73e50cc7002a24229fa6650b8ccfc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5559201ddf8596d12d99a3c3e45e989"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab5559201ddf8596d12d99a3c3e45e989"></a>
typedef std::vector<br class="typebreak"/>
&lt; <a class="el" href="namespacegmx.xhtml#a0e73e50cc7002a24229fa6650b8ccfc8">SelectionDataPointer</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ab5559201ddf8596d12d99a3c3e45e989">SelectionDataList</a></td></tr>
<tr class="memdesc:ab5559201ddf8596d12d99a3c3e45e989"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container for storing a list of selections internally. <br/></td></tr>
<tr class="separator:ab5559201ddf8596d12d99a3c3e45e989"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d80aa80d970cd0d36eeac2f5d146dcf"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4d80aa80d970cd0d36eeac2f5d146dcf"></a>
typedef <a class="el" href="classgmx_1_1FlagsTemplate.xhtml">FlagsTemplate</a><br class="typebreak"/>
&lt; <a class="el" href="namespacegmx.xhtml#af16ecfd69d5704fc5de46b97ceff3b65">SelectionFlag</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a4d80aa80d970cd0d36eeac2f5d146dcf">SelectionFlags</a></td></tr>
<tr class="memdesc:a4d80aa80d970cd0d36eeac2f5d146dcf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Holds a collection of <a class="el" href="namespacegmx.xhtml#af16ecfd69d5704fc5de46b97ceff3b65" title="Flags for options. ">SelectionFlag</a> values. <br/></td></tr>
<tr class="separator:a4d80aa80d970cd0d36eeac2f5d146dcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2804c9c82f2a9bd0ec94d3c2f1003f42"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2804c9c82f2a9bd0ec94d3c2f1003f42"></a>
typedef std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1SelectionTreeElement.xhtml">SelectionTreeElement</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2804c9c82f2a9bd0ec94d3c2f1003f42">SelectionTreeElementPointer</a></td></tr>
<tr class="memdesc:a2804c9c82f2a9bd0ec94d3c2f1003f42"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer type for selection tree element pointers. <br/></td></tr>
<tr class="separator:a2804c9c82f2a9bd0ec94d3c2f1003f42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af63a35a5828a347c7d53a3365de983e9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af63a35a5828a347c7d53a3365de983e9"></a>
typedef void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af63a35a5828a347c7d53a3365de983e9">sel_evalfunc</a> )(struct <a class="el" href="structgmx__sel__evaluate__t.xhtml">gmx_sel_evaluate_t</a> *data, const <a class="el" href="namespacegmx.xhtml#a2804c9c82f2a9bd0ec94d3c2f1003f42">SelectionTreeElementPointer</a> &amp;sel, <a class="el" href="structgmx__ana__index__t.xhtml">gmx_ana_index_t</a> *g)</td></tr>
<tr class="memdesc:af63a35a5828a347c7d53a3365de983e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function pointer for evaluating a <a class="el" href="classgmx_1_1SelectionTreeElement.xhtml" title="Represents an element of a selection expression. ">gmx::SelectionTreeElement</a>. <br/></td></tr>
<tr class="separator:af63a35a5828a347c7d53a3365de983e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f05f1bbb0c205deb47822bce1f626e6"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6f05f1bbb0c205deb47822bce1f626e6"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml">TrajectoryAnalysisModuleData</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a6f05f1bbb0c205deb47822bce1f626e6">TrajectoryAnalysisModuleDataPointer</a></td></tr>
<tr class="memdesc:a6f05f1bbb0c205deb47822bce1f626e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer to manage a <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">TrajectoryAnalysisModuleData</a> object. <br/></td></tr>
<tr class="separator:a6f05f1bbb0c205deb47822bce1f626e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a832da3c093109c13cc2369de05e02f3b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a832da3c093109c13cc2369de05e02f3b"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml">TrajectoryAnalysisModule</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a832da3c093109c13cc2369de05e02f3b">TrajectoryAnalysisModulePointer</a></td></tr>
<tr class="memdesc:a832da3c093109c13cc2369de05e02f3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer to manage a <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml" title="Base class for trajectory analysis modules. ">TrajectoryAnalysisModule</a>. <br/></td></tr>
<tr class="separator:a832da3c093109c13cc2369de05e02f3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga590b36651977793730ea2413906302cf"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga590b36651977793730ea2413906302cf"></a>
typedef <a class="el" href="classgmx_1_1ExceptionInfo.xhtml">ExceptionInfo</a>&lt; struct <br class="typebreak"/>
ExceptionInfoErrno_, int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga590b36651977793730ea2413906302cf">ExceptionInfoErrno</a></td></tr>
<tr class="memdesc:ga590b36651977793730ea2413906302cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores <code>errno</code> value that triggered the exception. <br/></td></tr>
<tr class="separator:ga590b36651977793730ea2413906302cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3c8f9c19c0ed36c16770317afc7c69bb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga3c8f9c19c0ed36c16770317afc7c69bb"></a>
typedef <a class="el" href="classgmx_1_1ExceptionInfo.xhtml">ExceptionInfo</a>&lt; struct <br class="typebreak"/>
ExceptionInfoApiFunc_, const <br class="typebreak"/>
char * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga3c8f9c19c0ed36c16770317afc7c69bb">ExceptionInfoApiFunction</a></td></tr>
<tr class="memdesc:ga3c8f9c19c0ed36c16770317afc7c69bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores the function name that returned the <code>errno</code> in ExceptionInfoErrno. <br/></td></tr>
<tr class="separator:ga3c8f9c19c0ed36c16770317afc7c69bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab5d3ee620090581599c5762270314897"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gab5d3ee620090581599c5762270314897"></a>
typedef <a class="el" href="classgmx_1_1ExceptionInfo.xhtml">ExceptionInfo</a>&lt; struct <br class="typebreak"/>
ExceptionInfoLocation_, <br class="typebreak"/>
<a class="el" href="structgmx_1_1ThrowLocation.xhtml">ThrowLocation</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gab5d3ee620090581599c5762270314897">ExceptionInfoLocation</a></td></tr>
<tr class="memdesc:gab5d3ee620090581599c5762270314897"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores the location where the exception was thrown. <br/></td></tr>
<tr class="separator:gab5d3ee620090581599c5762270314897"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab59286953efe778908daa3e5607f0a0e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab59286953efe778908daa3e5607f0a0e"></a>
typedef tMPI::mutex&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ab59286953efe778908daa3e5607f0a0e">Mutex</a></td></tr>
<tr class="memdesc:ab59286953efe778908daa3e5607f0a0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++11-compatible basic mutex. <br/></td></tr>
<tr class="separator:ab59286953efe778908daa3e5607f0a0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af58ef5153befc109091dcbf8a5b2fb1c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af58ef5153befc109091dcbf8a5b2fb1c"></a>
typedef <a class="el" href="classgmx_1_1scoped__cptr.xhtml">scoped_cptr</a>&lt; void &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af58ef5153befc109091dcbf8a5b2fb1c">scoped_guard_sfree</a></td></tr>
<tr class="memdesc:af58ef5153befc109091dcbf8a5b2fb1c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple guard which calls sfree. See <a class="el" href="classgmx_1_1scoped__cptr.xhtml" title="Stripped-down version of scoped_ptr that uses sfree() or custom deleter. ">scoped_cptr</a> for details. <br/></td></tr>
<tr class="separator:af58ef5153befc109091dcbf8a5b2fb1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fbe80608de8e00e55049289ef0148c1"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2fbe80608de8e00e55049289ef0148c1"></a>
typedef std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1TextInputStream.xhtml">TextInputStream</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2fbe80608de8e00e55049289ef0148c1">TextInputStreamPointer</a></td></tr>
<tr class="memdesc:a2fbe80608de8e00e55049289ef0148c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for a smart pointer to a <a class="el" href="classgmx_1_1TextInputStream.xhtml" title="Interface for reading text. ">TextInputStream</a>. <br/></td></tr>
<tr class="separator:a2fbe80608de8e00e55049289ef0148c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fdec6c0997f8c033905f1f82f253d25"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1fdec6c0997f8c033905f1f82f253d25"></a>
typedef std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1TextOutputStream.xhtml">TextOutputStream</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a1fdec6c0997f8c033905f1f82f253d25">TextOutputStreamPointer</a></td></tr>
<tr class="memdesc:a1fdec6c0997f8c033905f1f82f253d25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for a smart pointer to a <a class="el" href="classgmx_1_1TextOutputStream.xhtml" title="Interface for writing text. ">TextOutputStream</a>. <br/></td></tr>
<tr class="separator:a1fdec6c0997f8c033905f1f82f253d25"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:ga996baa646a1074569194ee226c23efae"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga996baa646a1074569194ee226c23efae">ShellCompletionFormat</a> { <a class="el" href="group__module__commandline.xhtml#gga996baa646a1074569194ee226c23efaead37d9ad080b97ba93b14096c95d722be">eShellCompletionFormat_Bash</a>
 }</td></tr>
<tr class="memdesc:ga996baa646a1074569194ee226c23efae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Output format for ShellCompletionWriter.  <a href="group__module__commandline.xhtml#ga996baa646a1074569194ee226c23efae">More...</a><br/></td></tr>
<tr class="separator:ga996baa646a1074569194ee226c23efae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc6936f6090da8e4cf7801c8e71ee37f"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#adc6936f6090da8e4cf7801c8e71ee37f">HelpOutputFormat</a> { <a class="el" href="namespacegmx.xhtml#adc6936f6090da8e4cf7801c8e71ee37fa665b8486de1b34898ad6caeb20d3d179">eHelpOutputFormat_Console</a>, 
<a class="el" href="namespacegmx.xhtml#adc6936f6090da8e4cf7801c8e71ee37fa10bf3dadfe0fe221eb490caf89b4d791">eHelpOutputFormat_Rst</a>, 
<a class="el" href="namespacegmx.xhtml#adc6936f6090da8e4cf7801c8e71ee37fa40e0858263ee116ab541df1e9fe8be81">eHelpOutputFormat_Other</a>, 
<a class="el" href="namespacegmx.xhtml#adc6936f6090da8e4cf7801c8e71ee37fac94bcc656a16820a6b88de28eef7be68">eHelpOutputFormat_NR</a>
 }</td></tr>
<tr class="memdesc:adc6936f6090da8e4cf7801c8e71ee37f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Output format for help writing.  <a href="namespacegmx.xhtml#adc6936f6090da8e4cf7801c8e71ee37f">More...</a><br/></td></tr>
<tr class="separator:adc6936f6090da8e4cf7801c8e71ee37f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga89f55fd684646bb146f99a8c6c18569b"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__options.xhtml#ga89f55fd684646bb146f99a8c6c18569b">OptionFileType</a> { <br/>
&#160;&#160;<b>eftUnknown</b>, 
<b>eftTopology</b>, 
<b>eftTrajectory</b>, 
<b>eftEnergy</b>, 
<br/>
&#160;&#160;<b>eftPDB</b>, 
<b>eftIndex</b>, 
<b>eftPlot</b>, 
<b>eftGenericData</b>, 
<br/>
&#160;&#160;<b>eftOptionFileType_NR</b>
<br/>
 }</td></tr>
<tr class="memdesc:ga89f55fd684646bb146f99a8c6c18569b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Purpose of file(s) provided through an option. <br/></td></tr>
<tr class="separator:ga89f55fd684646bb146f99a8c6c18569b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f775199bddf83f286ee8172f7dda987"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987">OptionFlag</a> { <br/>
&#160;&#160;<a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987a4f1877245e691baa84f1a210c81f8f4e">efOption_Set</a> = 1&lt;&lt;0, 
<a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987a4da48601127e56bf49a2167792d693ce">efOption_HasDefaultValue</a> = 1&lt;&lt;1, 
<a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987ac61016418af8d8a2426f494de8c9278d">efOption_ExplicitDefaultValue</a> = 1&lt;&lt;2, 
<a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987a32e377a026ebd483633dd6a4fa442c3d">efOption_ClearOnNextSet</a> = 1&lt;&lt;3, 
<br/>
&#160;&#160;<a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987afeeedad770c218f98d60c36cdc9f0bc3">efOption_Required</a> = 1&lt;&lt;4, 
<a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987a31719daac8b8d93c1db41332e5fa9d1f">efOption_MultipleTimes</a> = 1&lt;&lt;5, 
<a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987ae52a5b8ffe8cd8a948fb65c787e25182">efOption_Hidden</a> = 1&lt;&lt;6, 
<a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987a021311861537a7daa949a7733cbaec87">efOption_Vector</a> = 1&lt;&lt;8, 
<br/>
&#160;&#160;<a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987a6e4c2d93bdc5aca1c9d836745d0ca39f">efOption_DefaultValueIfSetExists</a> = 1&lt;&lt;11, 
<a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987ad167facccde7228b8f6fe16ea97cbc4d">efOption_NoDefaultValue</a> = 1&lt;&lt;9, 
<a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987a975016de72bfedd5e03e0ae7a8a67d9e">efOption_DontCheckMinimumCount</a> = 1&lt;&lt;10
<br/>
 }</td></tr>
<tr class="memdesc:a3f775199bddf83f286ee8172f7dda987"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flags for options.  <a href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987">More...</a><br/></td></tr>
<tr class="separator:a3f775199bddf83f286ee8172f7dda987"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1c22d32956f25d2432d5a6870983d5cb"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__group__publicapi.xhtml#ga1c22d32956f25d2432d5a6870983d5cb">TimeUnit</a> { <br/>
&#160;&#160;<a class="el" href="group__group__publicapi.xhtml#gga1c22d32956f25d2432d5a6870983d5cbaf62491a2d381280231fdb1d87c3788be">TimeUnit_fs</a>, 
<a class="el" href="group__group__publicapi.xhtml#gga1c22d32956f25d2432d5a6870983d5cbaa937a11ed8176ada593733a46cd985dd">TimeUnit_ps</a>, 
<a class="el" href="group__group__publicapi.xhtml#gga1c22d32956f25d2432d5a6870983d5cbaee83c8ee85640f404d1da7f659c74e0b">TimeUnit_ns</a>, 
<a class="el" href="group__group__publicapi.xhtml#gga1c22d32956f25d2432d5a6870983d5cba788b558db3581dbb3c4929e73be61226">TimeUnit_us</a>, 
<br/>
&#160;&#160;<a class="el" href="group__group__publicapi.xhtml#gga1c22d32956f25d2432d5a6870983d5cbac129739439b285acd9608020af58baaf">TimeUnit_ms</a>, 
<a class="el" href="group__group__publicapi.xhtml#gga1c22d32956f25d2432d5a6870983d5cbae96310bb9de653e86c390aa0f081b0ce">TimeUnit_s</a>, 
<a class="el" href="group__group__publicapi.xhtml#gga1c22d32956f25d2432d5a6870983d5cba7c00d373b2fbd17b4236fc8636ed52ce">TimeUnit_Default</a> = TimeUnit_ps
<br/>
 }</td></tr>
<tr class="memdesc:ga1c22d32956f25d2432d5a6870983d5cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Time values for TimeUnitManager.  <a href="group__group__publicapi.xhtml#ga1c22d32956f25d2432d5a6870983d5cb">More...</a><br/></td></tr>
<tr class="separator:ga1c22d32956f25d2432d5a6870983d5cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73202d646d57bcc963d8afd5a16015f0"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a73202d646d57bcc963d8afd5a16015f0">RandomDomain</a> { <br/>
&#160;&#160;<a class="el" href="namespacegmx.xhtml#a73202d646d57bcc963d8afd5a16015f0a6311ae17c1ee52b36e68aaf4ad066387">RandomDomain::Other</a> = 0x00000000, 
<a class="el" href="namespacegmx.xhtml#a73202d646d57bcc963d8afd5a16015f0accb9e34a240647891f931e772cad80ef">RandomDomain::MaxwellVelocities</a> = 0x00001000, 
<a class="el" href="namespacegmx.xhtml#a73202d646d57bcc963d8afd5a16015f0aa42c5450c670a7ecbea5532bde9c0c65">RandomDomain::TestParticleInsertion</a> = 0x00002000, 
<a class="el" href="namespacegmx.xhtml#a73202d646d57bcc963d8afd5a16015f0a23714d9a49cc46ca81ad32670bde8b5e">RandomDomain::UpdateCoordinates</a> = 0x00003000, 
<br/>
&#160;&#160;<a class="el" href="namespacegmx.xhtml#a73202d646d57bcc963d8afd5a16015f0ab0634f71dbc527342668f2a63f1b3510">RandomDomain::UpdateConstraints</a> = 0x00004000, 
<a class="el" href="namespacegmx.xhtml#a73202d646d57bcc963d8afd5a16015f0a91e0b95db0c752d879aebd0ac65a7fb9">RandomDomain::Thermostat</a> = 0x00005000, 
<a class="el" href="namespacegmx.xhtml#a73202d646d57bcc963d8afd5a16015f0a79248e4db93ba16182fd3bf1c8e2fda7">RandomDomain::Barostat</a> = 0x00006000, 
<a class="el" href="namespacegmx.xhtml#a73202d646d57bcc963d8afd5a16015f0ada8008568302912872628be09e68fb84">RandomDomain::ReplicaExchange</a> = 0x00007000, 
<br/>
&#160;&#160;<a class="el" href="namespacegmx.xhtml#a73202d646d57bcc963d8afd5a16015f0a19bd460326d41817323764fa9e4287ff">RandomDomain::ExpandedEnsemble</a> = 0x00008000
<br/>
 }</td></tr>
<tr class="memdesc:a73202d646d57bcc963d8afd5a16015f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enumerated values for fixed part of random seed (domain)  <a href="namespacegmx.xhtml#a73202d646d57bcc963d8afd5a16015f0">More...</a><br/></td></tr>
<tr class="separator:a73202d646d57bcc963d8afd5a16015f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2ab58eea84794341a35ac67e9b2dd229"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__selection.xhtml#ga2ab58eea84794341a35ac67e9b2dd229">SelectionStringMatchType</a> { <a class="el" href="group__module__selection.xhtml#gga2ab58eea84794341a35ac67e9b2dd229a76e91d87b1fc9e35af5a744934e0be5d">eStringMatchType_Auto</a>, 
<a class="el" href="group__module__selection.xhtml#gga2ab58eea84794341a35ac67e9b2dd229ae3793d484d4d5b121f9beff792e7a542">eStringMatchType_Exact</a>, 
<a class="el" href="group__module__selection.xhtml#gga2ab58eea84794341a35ac67e9b2dd229a9c54f931f9075ae0a0bd35e55e07312b">eStringMatchType_Wildcard</a>, 
<a class="el" href="group__module__selection.xhtml#gga2ab58eea84794341a35ac67e9b2dd229ad061c2f42b00f07d32e9d3a18222e84c">eStringMatchType_RegularExpression</a>
 }</td></tr>
<tr class="memdesc:ga2ab58eea84794341a35ac67e9b2dd229"><td class="mdescLeft">&#160;</td><td class="mdescRight">String matching mode for string keyword expressions.  <a href="group__module__selection.xhtml#ga2ab58eea84794341a35ac67e9b2dd229">More...</a><br/></td></tr>
<tr class="separator:ga2ab58eea84794341a35ac67e9b2dd229"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af16ecfd69d5704fc5de46b97ceff3b65"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af16ecfd69d5704fc5de46b97ceff3b65">SelectionFlag</a> { <br/>
&#160;&#160;<b>efSelection_OnlyStatic</b> = 1&lt;&lt;0, 
<b>efSelection_OnlyAtoms</b> = 1&lt;&lt;1, 
<b>efSelection_OnlySorted</b> = 1&lt;&lt;2, 
<a class="el" href="namespacegmx.xhtml#af16ecfd69d5704fc5de46b97ceff3b65ada857974002e1be2413578d8ec3b5e08">efSelection_DynamicMask</a> = 1&lt;&lt;3, 
<br/>
&#160;&#160;<a class="el" href="namespacegmx.xhtml#af16ecfd69d5704fc5de46b97ceff3b65a3f2acaa6ea6db136e596e29e3c7151af">efSelection_DisallowEmpty</a> = 1&lt;&lt;4, 
<a class="el" href="namespacegmx.xhtml#af16ecfd69d5704fc5de46b97ceff3b65a692118363f0eefc01d795054271e51c6">efSelection_EvaluateVelocities</a> = 1&lt;&lt;5, 
<a class="el" href="namespacegmx.xhtml#af16ecfd69d5704fc5de46b97ceff3b65a521142e351d4b23459b1b0c08705cc34">efSelection_EvaluateForces</a> = 1&lt;&lt;6
<br/>
 }</td></tr>
<tr class="memdesc:af16ecfd69d5704fc5de46b97ceff3b65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flags for options.  <a href="namespacegmx.xhtml#af16ecfd69d5704fc5de46b97ceff3b65">More...</a><br/></td></tr>
<tr class="separator:af16ecfd69d5704fc5de46b97ceff3b65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9e7df55e017bd726d027d65551bbd0c"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0c">SimdType</a> { <br/>
&#160;&#160;<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0ca6adf97f83acf6453d4a6a4b1070f3754">SimdType::None</a>, 
<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0ca63d5049791d9d79d86e9a108b0a999ca">SimdType::Reference</a>, 
<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0ca8045a0a6c688b0635e3caccc408a1446">SimdType::Generic</a>, 
<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0ca5c496843e02651870c195534b19d9bbb">SimdType::X86_Sse2</a>, 
<br/>
&#160;&#160;<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0ca64005555216b2f63787c06918e0b4936">SimdType::X86_Sse4_1</a>, 
<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0ca02880dc80ec6734dff5c4453b8a22255">SimdType::X86_Avx128Fma</a>, 
<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0ca9201c4bc942aaeba69216cfc973795b6">SimdType::X86_Avx</a>, 
<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0cac8da3ebc9d442eba3f2cb90fbca92140">SimdType::X86_Avx2</a>, 
<br/>
&#160;&#160;<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0ca023ae73ff9edfb62c00415795ff5f570">SimdType::X86_Avx512</a>, 
<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0ca62d6b69682baf2b6d044e34d28f40674">SimdType::X86_Avx512Knl</a>, 
<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0ca8c108d62ab2603d3f6e5cd13399fa467">SimdType::X86_Mic</a>, 
<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0cadb2c254e64bf7eed5a729529fa188099">SimdType::Arm_Neon</a>, 
<br/>
&#160;&#160;<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0ca3a0da0d018906725c11b5ddbb0ce76d8">SimdType::Arm_NeonAsimd</a>, 
<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0ca55faf6b41cccf6249fa75a088a0dd988">SimdType::Ibm_Qpx</a>, 
<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0ca3f9726bfb19d56f774360782846dc77f">SimdType::Ibm_Vmx</a>, 
<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0cae2817429950760b6f888ba6a8446fbf5">SimdType::Ibm_Vsx</a>, 
<br/>
&#160;&#160;<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0ca069e00567050f3e5b804844ed7155bdd">SimdType::Fujitsu_HpcAce</a>
<br/>
 }</td></tr>
<tr class="memdesc:aa9e7df55e017bd726d027d65551bbd0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enumerated options for SIMD architectures.  <a href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0c">More...</a><br/></td></tr>
<tr class="separator:aa9e7df55e017bd726d027d65551bbd0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac92ff9c7f6f5ed5200b3d8d92a4d53e3"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gac92ff9c7f6f5ed5200b3d8d92a4d53e3">ErrorCode</a> { <br/>
&#160;&#160;<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3acacaa10fa7070b0494b30fdc97a7a356">eeOK</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a35a82c5a0f04b6255d3f28d6144dd24e">eeOutOfMemory</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a444e88ccfbfc246dc671919d0cf127c1">eeFileNotFound</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3ad0a05315bf704c8457baef6eac42dc4e">eeFileIO</a>, 
<br/>
&#160;&#160;<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a4c2569b29b84eda15a5cf90e28395b21">eeInvalidInput</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a7eb29dbd6ce224f815ba82ddcc3b6f62">eeInconsistentInput</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3ac0b348673979b42ebc8df4562b8ebfa4">eeInstability</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3ae958977bd58e97bcc4fd367324c8b21b">eeNotImplemented</a>, 
<br/>
&#160;&#160;<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a71840645faa70349b0e4bede4da4b6d1">eeInvalidValue</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a40bd4aef44a2ab731b61fb9c9184a3bd">eeInvalidCall</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a90b9f0f24cf026b56ebf63d359c5f422">eeInternalError</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a414167b1bc702c9e8bb7f91078360845">eeAPIError</a>, 
<br/>
&#160;&#160;<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a068d9a3d2c79173f39457344cd60380f">eeRange</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a395dad7e12b144dd6805157e6d92e40f">eeCommunication</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a46578ca340e1c440d5f519569e6884fb">eeUnknownError</a>
<br/>
 }</td></tr>
<tr class="memdesc:gac92ff9c7f6f5ed5200b3d8d92a4d53e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Possible error return codes from Gromacs functions.  <a href="group__module__utility.xhtml#gac92ff9c7f6f5ed5200b3d8d92a4d53e3">More...</a><br/></td></tr>
<tr class="separator:gac92ff9c7f6f5ed5200b3d8d92a4d53e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gaaf9a9e69ad91172d5f4fba7148280762"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1AnalysisHistogramSettingsInitializer.xhtml">AnalysisHistogramSettingsInitializer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__group__publicapi.xhtml#gaaf9a9e69ad91172d5f4fba7148280762">histogramFromRange</a> (<a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> <a class="el" href="group__module__simd.xhtml#gacf515651ecc6efcf3ec65a8ff488ea02">min</a>, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> <a class="el" href="group__module__simd.xhtml#ga68bbfb58d0ab7d2362d0efde15c14ca3">max</a>)</td></tr>
<tr class="memdesc:gaaf9a9e69ad91172d5f4fba7148280762"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes a histogram using a range and a bin width.  <a href="group__group__publicapi.xhtml#gaaf9a9e69ad91172d5f4fba7148280762">More...</a><br/></td></tr>
<tr class="separator:gaaf9a9e69ad91172d5f4fba7148280762"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga73a2213cd82e2f915b9f9d65a4b85212"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1AnalysisHistogramSettingsInitializer.xhtml">AnalysisHistogramSettingsInitializer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__group__publicapi.xhtml#ga73a2213cd82e2f915b9f9d65a4b85212">histogramFromBins</a> (<a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> start, int nbins, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> binwidth)</td></tr>
<tr class="memdesc:ga73a2213cd82e2f915b9f9d65a4b85212"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes a histogram using bin width and the number of bins.  <a href="group__group__publicapi.xhtml#ga73a2213cd82e2f915b9f9d65a4b85212">More...</a><br/></td></tr>
<tr class="separator:ga73a2213cd82e2f915b9f9d65a4b85212"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8c376f5f94bd1a63a3a97e288c4be50d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1CommandLineProgramContext.xhtml">CommandLineProgramContext</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga8c376f5f94bd1a63a3a97e288c4be50d">initForCommandLine</a> (int *argc, char ***argv)</td></tr>
<tr class="memdesc:ga8c376f5f94bd1a63a3a97e288c4be50d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the GROMACS library for command-line use.  <a href="group__module__commandline.xhtml#ga8c376f5f94bd1a63a3a97e288c4be50d">More...</a><br/></td></tr>
<tr class="separator:ga8c376f5f94bd1a63a3a97e288c4be50d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga49311a4a4e3f3ec07a9ae925fb63151f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#ga49311a4a4e3f3ec07a9ae925fb63151f">finalizeForCommandLine</a> ()</td></tr>
<tr class="memdesc:ga49311a4a4e3f3ec07a9ae925fb63151f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deinitializes the GROMACS library after <a class="el" href="group__module__commandline.xhtml#ga8c376f5f94bd1a63a3a97e288c4be50d" title="Initializes the GROMACS library for command-line use. ">initForCommandLine()</a>.  <a href="group__module__commandline.xhtml#ga49311a4a4e3f3ec07a9ae925fb63151f">More...</a><br/></td></tr>
<tr class="separator:ga49311a4a4e3f3ec07a9ae925fb63151f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8fe34835a6e197f2731e7d604f28992"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad8fe34835a6e197f2731e7d604f28992">processExceptionAtExitForCommandLine</a> (const std::exception &amp;ex)</td></tr>
<tr class="memdesc:ad8fe34835a6e197f2731e7d604f28992"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handles an exception and deinitializes after initForCommandLine.  <a href="#ad8fe34835a6e197f2731e7d604f28992">More...</a><br/></td></tr>
<tr class="separator:ad8fe34835a6e197f2731e7d604f28992"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a3bc0e66dda7e48091ad129bede7eff"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a5a3bc0e66dda7e48091ad129bede7eff">runCommandLineModule</a> (int argc, char *argv[], <a class="el" href="classgmx_1_1ICommandLineModule.xhtml">ICommandLineModule</a> *module)</td></tr>
<tr class="memdesc:a5a3bc0e66dda7e48091ad129bede7eff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements a <a class="el" href="test__selection_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the selection testing tool. ">main()</a> method that runs a single module.  <a href="#a5a3bc0e66dda7e48091ad129bede7eff">More...</a><br/></td></tr>
<tr class="separator:a5a3bc0e66dda7e48091ad129bede7eff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a7a039b6fae746686d472d1fcae6fee"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a8a7a039b6fae746686d472d1fcae6fee">runCommandLineModule</a> (int argc, char *argv[], const char *name, const char *description, std::function&lt; std::unique_ptr&lt; <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml">ICommandLineOptionsModule</a> &gt;()&gt; factory)</td></tr>
<tr class="memdesc:a8a7a039b6fae746686d472d1fcae6fee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements a <a class="el" href="test__selection_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the selection testing tool. ">main()</a> method that runs a single module.  <a href="#a8a7a039b6fae746686d472d1fcae6fee">More...</a><br/></td></tr>
<tr class="separator:a8a7a039b6fae746686d472d1fcae6fee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf25f64b0a1dde1a8e6774f93e0bae0e9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__commandline.xhtml#gaf25f64b0a1dde1a8e6774f93e0bae0e9">writeCommandLineHelpCMain</a> (const <a class="el" href="classgmx_1_1CommandLineHelpContext.xhtml">CommandLineHelpContext</a> &amp;context, const char *name, int(*mainFunction)(int argc, char *argv[]))</td></tr>
<tr class="memdesc:gaf25f64b0a1dde1a8e6774f93e0bae0e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper to implement <a class="el" href="classgmx_1_1ICommandLineModule.xhtml#a947eea9c2e648aa837d385fcbe01c1bd" title="Prints help for the module. ">ICommandLineModule::writeHelp()</a> with a C-like <a class="el" href="test__selection_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the selection testing tool. ">main()</a> function that calls <a class="el" href="group__module__commandline.xhtml#ga5140c89919960e8e1e218a5b0d881cd5" title="Parse command-line arguments. ">parse_common_args()</a>.  <a href="group__module__commandline.xhtml#gaf25f64b0a1dde1a8e6774f93e0bae0e9">More...</a><br/></td></tr>
<tr class="separator:gaf25f64b0a1dde1a8e6774f93e0bae0e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af536d7a23a442f3c0876b05ac20d7d40"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af536d7a23a442f3c0876b05ac20d7d40">cpuIsX86Nehalem</a> (const <a class="el" href="classgmx_1_1CpuInfo.xhtml">CpuInfo</a> &amp;cpuInfo)</td></tr>
<tr class="memdesc:af536d7a23a442f3c0876b05ac20d7d40"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if the CPU is an Intel x86 Nehalem.  <a href="#af536d7a23a442f3c0876b05ac20d7d40">More...</a><br/></td></tr>
<tr class="separator:af536d7a23a442f3c0876b05ac20d7d40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b47d79ef735987258c2f601cf2822be"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2b47d79ef735987258c2f601cf2822be">log2I</a> (std::uint32_t x)</td></tr>
<tr class="memdesc:a2b47d79ef735987258c2f601cf2822be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute floor of logarithm to base 2, 32 bit unsigned argument.  <a href="#a2b47d79ef735987258c2f601cf2822be">More...</a><br/></td></tr>
<tr class="separator:a2b47d79ef735987258c2f601cf2822be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa498ec06db6575ec672e5ba847f086ab"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa498ec06db6575ec672e5ba847f086ab">log2I</a> (std::uint64_t x)</td></tr>
<tr class="memdesc:aa498ec06db6575ec672e5ba847f086ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute floor of logarithm to base 2, 64 bit unsigned argument.  <a href="#aa498ec06db6575ec672e5ba847f086ab">More...</a><br/></td></tr>
<tr class="separator:aa498ec06db6575ec672e5ba847f086ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1cadcfe34ba004506db6e0e11f36c95"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ab1cadcfe34ba004506db6e0e11f36c95">log2I</a> (std::int32_t x)</td></tr>
<tr class="memdesc:ab1cadcfe34ba004506db6e0e11f36c95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute floor of logarithm to base 2, 32 bit signed argument.  <a href="#ab1cadcfe34ba004506db6e0e11f36c95">More...</a><br/></td></tr>
<tr class="separator:ab1cadcfe34ba004506db6e0e11f36c95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbfba3f9dd776dc29c1d0a8311ed793f"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#afbfba3f9dd776dc29c1d0a8311ed793f">log2I</a> (std::int64_t x)</td></tr>
<tr class="memdesc:afbfba3f9dd776dc29c1d0a8311ed793f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute floor of logarithm to base 2, 64 bit signed argument.  <a href="#afbfba3f9dd776dc29c1d0a8311ed793f">More...</a><br/></td></tr>
<tr class="separator:afbfba3f9dd776dc29c1d0a8311ed793f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87a820e81baebe1c30a4190eb2aa2a64"><td class="memItemLeft" align="right" valign="top">std::int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a87a820e81baebe1c30a4190eb2aa2a64">greatestCommonDivisor</a> (std::int64_t p, std::int64_t q)</td></tr>
<tr class="memdesc:a87a820e81baebe1c30a4190eb2aa2a64"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find greatest common divisor of two numbers.  <a href="#a87a820e81baebe1c30a4190eb2aa2a64">More...</a><br/></td></tr>
<tr class="separator:a87a820e81baebe1c30a4190eb2aa2a64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dad03094a0ea5970a5f0977ce5fee84"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2dad03094a0ea5970a5f0977ce5fee84">erfinv</a> (double x)</td></tr>
<tr class="memdesc:a2dad03094a0ea5970a5f0977ce5fee84"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inverse error function, double precision.  <a href="#a2dad03094a0ea5970a5f0977ce5fee84">More...</a><br/></td></tr>
<tr class="separator:a2dad03094a0ea5970a5f0977ce5fee84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85012c7d3609ac21e4052fc3114125a9"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a85012c7d3609ac21e4052fc3114125a9">erfinv</a> (float x)</td></tr>
<tr class="memdesc:a85012c7d3609ac21e4052fc3114125a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inverse error function, single precision.  <a href="#a85012c7d3609ac21e4052fc3114125a9">More...</a><br/></td></tr>
<tr class="separator:a85012c7d3609ac21e4052fc3114125a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a953226d61f6527af6485ea56a8384c85"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a953226d61f6527af6485ea56a8384c85">invsqrt</a> (float x)</td></tr>
<tr class="memdesc:a953226d61f6527af6485ea56a8384c85"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1.0/sqrt(x) in single precision.  <a href="#a953226d61f6527af6485ea56a8384c85">More...</a><br/></td></tr>
<tr class="separator:a953226d61f6527af6485ea56a8384c85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae26d0b65eb141c73979c5d2f1d0e13fa"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae26d0b65eb141c73979c5d2f1d0e13fa">invsqrt</a> (double x)</td></tr>
<tr class="memdesc:ae26d0b65eb141c73979c5d2f1d0e13fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1.0/sqrt(x) in double precision, but single range.  <a href="#ae26d0b65eb141c73979c5d2f1d0e13fa">More...</a><br/></td></tr>
<tr class="separator:ae26d0b65eb141c73979c5d2f1d0e13fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa91cb31b7abc3e020022ac8ce0b1b262"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa91cb31b7abc3e020022ac8ce0b1b262">invsqrt</a> (int x)</td></tr>
<tr class="memdesc:aa91cb31b7abc3e020022ac8ce0b1b262"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1.0/sqrt(x) for integer x in double precision.  <a href="#aa91cb31b7abc3e020022ac8ce0b1b262">More...</a><br/></td></tr>
<tr class="separator:aa91cb31b7abc3e020022ac8ce0b1b262"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acabf4874cb58de0554f95f69c1768882"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#acabf4874cb58de0554f95f69c1768882">invcbrt</a> (float x)</td></tr>
<tr class="memdesc:acabf4874cb58de0554f95f69c1768882"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate inverse cube root of x in single precision.  <a href="#acabf4874cb58de0554f95f69c1768882">More...</a><br/></td></tr>
<tr class="separator:acabf4874cb58de0554f95f69c1768882"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08d99226376a495b484eccd203d29c8d"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a08d99226376a495b484eccd203d29c8d">invcbrt</a> (double x)</td></tr>
<tr class="memdesc:a08d99226376a495b484eccd203d29c8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate inverse sixth root of x in double precision.  <a href="#a08d99226376a495b484eccd203d29c8d">More...</a><br/></td></tr>
<tr class="separator:a08d99226376a495b484eccd203d29c8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d304cf0e3cac1632695e394077fd2d7"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a1d304cf0e3cac1632695e394077fd2d7">invcbrt</a> (int x)</td></tr>
<tr class="memdesc:a1d304cf0e3cac1632695e394077fd2d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate inverse sixth root of integer x in double precision.  <a href="#a1d304cf0e3cac1632695e394077fd2d7">More...</a><br/></td></tr>
<tr class="separator:a1d304cf0e3cac1632695e394077fd2d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12dcc6af3bf2f769ea1e17ed12921e2c"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a12dcc6af3bf2f769ea1e17ed12921e2c">sixthroot</a> (float x)</td></tr>
<tr class="memdesc:a12dcc6af3bf2f769ea1e17ed12921e2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate sixth root of x in single precision.  <a href="#a12dcc6af3bf2f769ea1e17ed12921e2c">More...</a><br/></td></tr>
<tr class="separator:a12dcc6af3bf2f769ea1e17ed12921e2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cf2628e4b20455d3396e0c2c234b951"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a4cf2628e4b20455d3396e0c2c234b951">sixthroot</a> (double x)</td></tr>
<tr class="memdesc:a4cf2628e4b20455d3396e0c2c234b951"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate sixth root of x in double precision.  <a href="#a4cf2628e4b20455d3396e0c2c234b951">More...</a><br/></td></tr>
<tr class="separator:a4cf2628e4b20455d3396e0c2c234b951"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02308efcb527a69ce399111550575880"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a02308efcb527a69ce399111550575880">sixthroot</a> (int x)</td></tr>
<tr class="memdesc:a02308efcb527a69ce399111550575880"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate sixth root of integer x, return double.  <a href="#a02308efcb527a69ce399111550575880">More...</a><br/></td></tr>
<tr class="separator:a02308efcb527a69ce399111550575880"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3aeb9a178f07d4bc64b934555d12842"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad3aeb9a178f07d4bc64b934555d12842">invsixthroot</a> (float x)</td></tr>
<tr class="memdesc:ad3aeb9a178f07d4bc64b934555d12842"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate inverse sixth root of x in single precision.  <a href="#ad3aeb9a178f07d4bc64b934555d12842">More...</a><br/></td></tr>
<tr class="separator:ad3aeb9a178f07d4bc64b934555d12842"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f8b9b01e7c291a443840d4f7af97c5c"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2f8b9b01e7c291a443840d4f7af97c5c">invsixthroot</a> (double x)</td></tr>
<tr class="memdesc:a2f8b9b01e7c291a443840d4f7af97c5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate inverse sixth root of x in double precision.  <a href="#a2f8b9b01e7c291a443840d4f7af97c5c">More...</a><br/></td></tr>
<tr class="separator:a2f8b9b01e7c291a443840d4f7af97c5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1604baa1a44d1de7bafa433c9443c395"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a1604baa1a44d1de7bafa433c9443c395">invsixthroot</a> (int x)</td></tr>
<tr class="memdesc:a1604baa1a44d1de7bafa433c9443c395"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate inverse sixth root of integer x in double precision.  <a href="#a1604baa1a44d1de7bafa433c9443c395">More...</a><br/></td></tr>
<tr class="separator:a1604baa1a44d1de7bafa433c9443c395"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06cbcb5324f3eb428189024f020158ff"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a06cbcb5324f3eb428189024f020158ff"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a06cbcb5324f3eb428189024f020158ff">square</a> (T x)</td></tr>
<tr class="memdesc:a06cbcb5324f3eb428189024f020158ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">calculate x^2  <a href="#a06cbcb5324f3eb428189024f020158ff">More...</a><br/></td></tr>
<tr class="separator:a06cbcb5324f3eb428189024f020158ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abda6daf50f5129fb74816db29e411497"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:abda6daf50f5129fb74816db29e411497"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#abda6daf50f5129fb74816db29e411497">power3</a> (T x)</td></tr>
<tr class="memdesc:abda6daf50f5129fb74816db29e411497"><td class="mdescLeft">&#160;</td><td class="mdescRight">calculate x^3  <a href="#abda6daf50f5129fb74816db29e411497">More...</a><br/></td></tr>
<tr class="separator:abda6daf50f5129fb74816db29e411497"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a304b15bae3a2a8277f686d4dfc9fa946"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a304b15bae3a2a8277f686d4dfc9fa946"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a304b15bae3a2a8277f686d4dfc9fa946">power4</a> (T x)</td></tr>
<tr class="memdesc:a304b15bae3a2a8277f686d4dfc9fa946"><td class="mdescLeft">&#160;</td><td class="mdescRight">calculate x^4  <a href="#a304b15bae3a2a8277f686d4dfc9fa946">More...</a><br/></td></tr>
<tr class="separator:a304b15bae3a2a8277f686d4dfc9fa946"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bb914d3b8bf083485bb26c88d2b9dda"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a4bb914d3b8bf083485bb26c88d2b9dda"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a4bb914d3b8bf083485bb26c88d2b9dda">power5</a> (T x)</td></tr>
<tr class="memdesc:a4bb914d3b8bf083485bb26c88d2b9dda"><td class="mdescLeft">&#160;</td><td class="mdescRight">calculate x^5  <a href="#a4bb914d3b8bf083485bb26c88d2b9dda">More...</a><br/></td></tr>
<tr class="separator:a4bb914d3b8bf083485bb26c88d2b9dda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab162c4ba231de5ffbfc62dc3803e8ff"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aab162c4ba231de5ffbfc62dc3803e8ff"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aab162c4ba231de5ffbfc62dc3803e8ff">power6</a> (T x)</td></tr>
<tr class="memdesc:aab162c4ba231de5ffbfc62dc3803e8ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">calculate x^6  <a href="#aab162c4ba231de5ffbfc62dc3803e8ff">More...</a><br/></td></tr>
<tr class="separator:aab162c4ba231de5ffbfc62dc3803e8ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a800ac84e9ee71a2dc0eedda74bea1513"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a800ac84e9ee71a2dc0eedda74bea1513"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a800ac84e9ee71a2dc0eedda74bea1513">power12</a> (T x)</td></tr>
<tr class="memdesc:a800ac84e9ee71a2dc0eedda74bea1513"><td class="mdescLeft">&#160;</td><td class="mdescRight">calculate x^12  <a href="#a800ac84e9ee71a2dc0eedda74bea1513">More...</a><br/></td></tr>
<tr class="separator:a800ac84e9ee71a2dc0eedda74bea1513"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92d3eb4aaecff5c613995ed4bce22a0a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a92d3eb4aaecff5c613995ed4bce22a0a">series_sinhx</a> (<a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> x)</td></tr>
<tr class="memdesc:a92d3eb4aaecff5c613995ed4bce22a0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Maclaurin series for sinh(x)/x.  <a href="#a92d3eb4aaecff5c613995ed4bce22a0a">More...</a><br/></td></tr>
<tr class="separator:a92d3eb4aaecff5c613995ed4bce22a0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c4548b5005dd861681ff13e55e5b6f9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2c4548b5005dd861681ff13e55e5b6f9">invertBoxMatrix</a> (const matrix src, matrix dest)</td></tr>
<tr class="memdesc:a2c4548b5005dd861681ff13e55e5b6f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invert a simulation-box matrix in <code>src</code>, return in <code>dest</code>.  <a href="#a2c4548b5005dd861681ff13e55e5b6f9">More...</a><br/></td></tr>
<tr class="separator:a2c4548b5005dd861681ff13e55e5b6f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2824e7adcb69e96942fefcb67809ec5e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2824e7adcb69e96942fefcb67809ec5e">invertMatrix</a> (const matrix src, matrix dest)</td></tr>
<tr class="memdesc:a2824e7adcb69e96942fefcb67809ec5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invert a general 3x3 matrix in <code>src</code>, return in <code>dest</code>.  <a href="#a2824e7adcb69e96942fefcb67809ec5e">More...</a><br/></td></tr>
<tr class="separator:a2824e7adcb69e96942fefcb67809ec5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28594b0fbe8151cffa0eb0f3db2a2ce9"><td class="memTemplParams" colspan="2"><a class="anchor" id="a28594b0fbe8151cffa0eb0f3db2a2ce9"></a>
template&lt;typename ValueType &gt; </td></tr>
<tr class="memitem:a28594b0fbe8151cffa0eb0f3db2a2ce9"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1BasicVector.xhtml">BasicVector</a>&lt; ValueType &gt;<br class="typebreak"/>
::RawArray *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a28594b0fbe8151cffa0eb0f3db2a2ce9">as_vec_array</a> (<a class="el" href="classgmx_1_1BasicVector.xhtml">BasicVector</a>&lt; ValueType &gt; *x)</td></tr>
<tr class="memdesc:a28594b0fbe8151cffa0eb0f3db2a2ce9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Casts a <a class="el" href="classgmx_1_1BasicVector.xhtml" title="C++ class for 3D vectors. ">gmx::BasicVector</a> array into an equivalent raw C array. <br/></td></tr>
<tr class="separator:a28594b0fbe8151cffa0eb0f3db2a2ce9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a869efe6effe059ca2a9ebe609d2c30ee"><td class="memTemplParams" colspan="2"><a class="anchor" id="a869efe6effe059ca2a9ebe609d2c30ee"></a>
template&lt;typename ValueType &gt; </td></tr>
<tr class="memitem:a869efe6effe059ca2a9ebe609d2c30ee"><td class="memTemplItemLeft" align="right" valign="top">static const <a class="el" href="classgmx_1_1BasicVector.xhtml">BasicVector</a><br class="typebreak"/>
&lt; ValueType &gt;::RawArray *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a869efe6effe059ca2a9ebe609d2c30ee">as_vec_array</a> (const <a class="el" href="classgmx_1_1BasicVector.xhtml">BasicVector</a>&lt; ValueType &gt; *x)</td></tr>
<tr class="memdesc:a869efe6effe059ca2a9ebe609d2c30ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Casts a <a class="el" href="classgmx_1_1BasicVector.xhtml" title="C++ class for 3D vectors. ">gmx::BasicVector</a> array into an equivalent raw C array. <br/></td></tr>
<tr class="separator:a869efe6effe059ca2a9ebe609d2c30ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5e7b50af65a3361901a37364ad0fa8d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac5e7b50af65a3361901a37364ad0fa8d"></a>
static rvec *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ac5e7b50af65a3361901a37364ad0fa8d">as_rvec_array</a> (<a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">RVec</a> *x)</td></tr>
<tr class="memdesc:ac5e7b50af65a3361901a37364ad0fa8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Casts a <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b" title="Shorthand for C++ rvec-equivalent type. ">gmx::RVec</a> array into an <code>rvec</code> array. <br/></td></tr>
<tr class="separator:ac5e7b50af65a3361901a37364ad0fa8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa725d6666d8341042ae4fa3667bf83b1"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa725d6666d8341042ae4fa3667bf83b1"></a>
static const rvec *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa725d6666d8341042ae4fa3667bf83b1">as_rvec_array</a> (const <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b">RVec</a> *x)</td></tr>
<tr class="memdesc:aa725d6666d8341042ae4fa3667bf83b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Casts a <a class="el" href="namespacegmx.xhtml#a139c1919a9680de4ad1450f42e37d33b" title="Shorthand for C++ rvec-equivalent type. ">gmx::RVec</a> array into an <code>rvec</code> array. <br/></td></tr>
<tr class="separator:aa725d6666d8341042ae4fa3667bf83b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b53df1703a70801419ef4f9004454bd"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0b53df1703a70801419ef4f9004454bd">do_cg</a> (FILE *fplog, t_commrec *cr, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[], const gmx_output_env_t *oenv, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bVerbose, int nstglobalcomm, gmx_vsite_t *vsite, gmx_constr_t constr, int stepout, t_inputrec *inputrec, gmx_mtop_t *top_global, t_fcdata *fcd, t_state *state_global, <a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *mdatoms, t_nrnb *nrnb, gmx_wallcycle_t wcycle, <a class="el" href="edsam_8h.xhtml#a0fa9ace476add5ee1fd6cd76c870f32e">gmx_edsam_t</a> ed, t_forcerec *fr, int repl_ex_nst, int repl_ex_nex, int repl_ex_seed, gmx_membed_t *membed, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> cpt_period, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> max_hours, int imdport, unsigned long Flags, <a class="el" href="structgmx__walltime__accounting.xhtml">gmx_walltime_accounting_t</a> walltime_accounting)</td></tr>
<tr class="memdesc:a0b53df1703a70801419ef4f9004454bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do conjugate gradients minimization.  <a href="#a0b53df1703a70801419ef4f9004454bd">More...</a><br/></td></tr>
<tr class="separator:a0b53df1703a70801419ef4f9004454bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afaabfc51bc04f2b0de66f075051a610a"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#afaabfc51bc04f2b0de66f075051a610a">do_lbfgs</a> (FILE *fplog, t_commrec *cr, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[], const gmx_output_env_t *oenv, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bVerbose, int nstglobalcomm, gmx_vsite_t *vsite, gmx_constr_t constr, int stepout, t_inputrec *inputrec, gmx_mtop_t *top_global, t_fcdata *fcd, t_state *state_global, <a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *mdatoms, t_nrnb *nrnb, gmx_wallcycle_t wcycle, <a class="el" href="edsam_8h.xhtml#a0fa9ace476add5ee1fd6cd76c870f32e">gmx_edsam_t</a> ed, t_forcerec *fr, int repl_ex_nst, int repl_ex_nex, int repl_ex_seed, gmx_membed_t *membed, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> cpt_period, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> max_hours, int imdport, unsigned long Flags, <a class="el" href="structgmx__walltime__accounting.xhtml">gmx_walltime_accounting_t</a> walltime_accounting)</td></tr>
<tr class="memdesc:afaabfc51bc04f2b0de66f075051a610a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do L-BFGS conjugate gradients minimization.  <a href="#afaabfc51bc04f2b0de66f075051a610a">More...</a><br/></td></tr>
<tr class="separator:afaabfc51bc04f2b0de66f075051a610a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae556e926034aab8ae03d4aa73e2bab4b"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae556e926034aab8ae03d4aa73e2bab4b">do_steep</a> (FILE *fplog, t_commrec *cr, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[], const gmx_output_env_t *oenv, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bVerbose, int nstglobalcomm, gmx_vsite_t *vsite, gmx_constr_t constr, int stepout, t_inputrec *inputrec, gmx_mtop_t *top_global, t_fcdata *fcd, t_state *state_global, <a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *mdatoms, t_nrnb *nrnb, gmx_wallcycle_t wcycle, <a class="el" href="edsam_8h.xhtml#a0fa9ace476add5ee1fd6cd76c870f32e">gmx_edsam_t</a> ed, t_forcerec *fr, int repl_ex_nst, int repl_ex_nex, int repl_ex_seed, gmx_membed_t *membed, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> cpt_period, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> max_hours, int imdport, unsigned long Flags, <a class="el" href="structgmx__walltime__accounting.xhtml">gmx_walltime_accounting_t</a> walltime_accounting)</td></tr>
<tr class="memdesc:ae556e926034aab8ae03d4aa73e2bab4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do steepest descents minimization.  <a href="#ae556e926034aab8ae03d4aa73e2bab4b">More...</a><br/></td></tr>
<tr class="separator:ae556e926034aab8ae03d4aa73e2bab4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8d0485fabdfa4c15b00267ad27d9a0e"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ac8d0485fabdfa4c15b00267ad27d9a0e">do_nm</a> (FILE *fplog, t_commrec *cr, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[], const gmx_output_env_t *oenv, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bVerbose, int nstglobalcomm, gmx_vsite_t *vsite, gmx_constr_t constr, int stepout, t_inputrec *inputrec, gmx_mtop_t *top_global, t_fcdata *fcd, t_state *state_global, <a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *mdatoms, t_nrnb *nrnb, gmx_wallcycle_t wcycle, <a class="el" href="edsam_8h.xhtml#a0fa9ace476add5ee1fd6cd76c870f32e">gmx_edsam_t</a> ed, t_forcerec *fr, int repl_ex_nst, int repl_ex_nex, int repl_ex_seed, gmx_membed_t *membed, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> cpt_period, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> max_hours, int imdport, unsigned long Flags, <a class="el" href="structgmx__walltime__accounting.xhtml">gmx_walltime_accounting_t</a> walltime_accounting)</td></tr>
<tr class="memdesc:ac8d0485fabdfa4c15b00267ad27d9a0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do normal modes analysis.  <a href="#ac8d0485fabdfa4c15b00267ad27d9a0e">More...</a><br/></td></tr>
<tr class="separator:ac8d0485fabdfa4c15b00267ad27d9a0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a861907c530b5abf0554f48167ebdd2e8"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a861907c530b5abf0554f48167ebdd2e8">do_tpi</a> (FILE *fplog, t_commrec *cr, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[], const gmx_output_env_t *oenv, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bVerbose, int nstglobalcomm, gmx_vsite_t *vsite, gmx_constr_t constr, int stepout, t_inputrec *inputrec, gmx_mtop_t *top_global, t_fcdata *fcd, t_state *state_global, <a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *mdatoms, t_nrnb *nrnb, gmx_wallcycle_t wcycle, <a class="el" href="edsam_8h.xhtml#a0fa9ace476add5ee1fd6cd76c870f32e">gmx_edsam_t</a> ed, t_forcerec *fr, int repl_ex_nst, int repl_ex_nex, int repl_ex_seed, gmx_membed_t *membed, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> cpt_period, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> max_hours, int imdport, unsigned long Flags, <a class="el" href="structgmx__walltime__accounting.xhtml">gmx_walltime_accounting_t</a> walltime_accounting)</td></tr>
<tr class="memdesc:a861907c530b5abf0554f48167ebdd2e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do test particle insertion.  <a href="#a861907c530b5abf0554f48167ebdd2e8">More...</a><br/></td></tr>
<tr class="separator:a861907c530b5abf0554f48167ebdd2e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ddacc94505a46b63d40a995556cef32"><td class="memItemLeft" align="right" valign="top">gmx_uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a8ddacc94505a46b63d40a995556cef32">makeRandomSeed</a> ()</td></tr>
<tr class="memdesc:a8ddacc94505a46b63d40a995556cef32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return 64 random bits from the random device, suitable as seed.  <a href="#a8ddacc94505a46b63d40a995556cef32">More...</a><br/></td></tr>
<tr class="separator:a8ddacc94505a46b63d40a995556cef32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ba622deb792fdc881824ce7a36d8440"><td class="memTemplParams" colspan="2">template&lt;class RealType  = real, unsigned int Bits, class Rng &gt; </td></tr>
<tr class="memitem:a7ba622deb792fdc881824ce7a36d8440"><td class="memTemplItemLeft" align="right" valign="top">RealType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a7ba622deb792fdc881824ce7a36d8440">generateCanonical</a> (Rng &amp;g)</td></tr>
<tr class="memdesc:a7ba622deb792fdc881824ce7a36d8440"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generate a floating-point value with specified number of random bits.  <a href="#a7ba622deb792fdc881824ce7a36d8440">More...</a><br/></td></tr>
<tr class="separator:a7ba622deb792fdc881824ce7a36d8440"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga602d5f10c261b4110186f5c1c65c3703"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacegmx.xhtml#abb455c7711ece592606e70a093ff80b4">HelpTopicPointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__selection.xhtml#ga602d5f10c261b4110186f5c1c65c3703">createSelectionHelpTopic</a> ()</td></tr>
<tr class="memdesc:ga602d5f10c261b4110186f5c1c65c3703"><td class="mdescLeft">&#160;</td><td class="mdescRight">*/  <a href="group__module__selection.xhtml#ga602d5f10c261b4110186f5c1c65c3703">More...</a><br/></td></tr>
<tr class="separator:ga602d5f10c261b4110186f5c1c65c3703"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a073963d19e7e6337168de8dc0005b7e4"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a073963d19e7e6337168de8dc0005b7e4">simdPrefetch</a> (void *m)</td></tr>
<tr class="memdesc:a073963d19e7e6337168de8dc0005b7e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prefetch memory at address m.  <a href="#a073963d19e7e6337168de8dc0005b7e4">More...</a><br/></td></tr>
<tr class="separator:a073963d19e7e6337168de8dc0005b7e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga725596b415f4bca94e71321b6845bed4"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:ga725596b415f4bca94e71321b6845bed4"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga725596b415f4bca94e71321b6845bed4">gatherLoadTranspose</a> (const double *base, const std::int32_t offset[], <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v1, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v2, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v3)</td></tr>
<tr class="memdesc:ga725596b415f4bca94e71321b6845bed4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 4 consecutive double from each of GMX_SIMD_DOUBLE_WIDTH offsets, and transpose into 4 SIMD double variables.  <a href="group__module__simd.xhtml#ga725596b415f4bca94e71321b6845bed4">More...</a><br/></td></tr>
<tr class="separator:ga725596b415f4bca94e71321b6845bed4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad1b51d9220213996033e5dce938c926f"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:gad1b51d9220213996033e5dce938c926f"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gad1b51d9220213996033e5dce938c926f">gatherLoadTranspose</a> (const double *base, const std::int32_t offset[], <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v1)</td></tr>
<tr class="memdesc:gad1b51d9220213996033e5dce938c926f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 consecutive double from each of GMX_SIMD_DOUBLE_WIDTH offsets, and transpose into 2 SIMD double variables.  <a href="group__module__simd.xhtml#gad1b51d9220213996033e5dce938c926f">More...</a><br/></td></tr>
<tr class="separator:gad1b51d9220213996033e5dce938c926f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaafc4e2f213c40bba66c83e6524445523"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:gaafc4e2f213c40bba66c83e6524445523"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaafc4e2f213c40bba66c83e6524445523">gatherLoadUTranspose</a> (const double *base, const std::int32_t offset[], <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v1, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v2)</td></tr>
<tr class="memdesc:gaafc4e2f213c40bba66c83e6524445523"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 3 consecutive doubles from each of GMX_SIMD_DOUBLE_WIDTH offsets, and transpose into 3 SIMD double variables.  <a href="group__module__simd.xhtml#gaafc4e2f213c40bba66c83e6524445523">More...</a><br/></td></tr>
<tr class="separator:gaafc4e2f213c40bba66c83e6524445523"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa23e5431ddc22611d3304ac96c461cc5"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:gaa23e5431ddc22611d3304ac96c461cc5"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaa23e5431ddc22611d3304ac96c461cc5">transposeScatterStoreU</a> (double *base, const std::int32_t offset[], <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> v0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> v1, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> v2)</td></tr>
<tr class="memdesc:gaa23e5431ddc22611d3304ac96c461cc5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transpose and store 3 SIMD doubles to 3 consecutive addresses at GMX_SIMD_DOUBLE_WIDTH offsets.  <a href="group__module__simd.xhtml#gaa23e5431ddc22611d3304ac96c461cc5">More...</a><br/></td></tr>
<tr class="separator:gaa23e5431ddc22611d3304ac96c461cc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaecbb196e76a516c1e3672a8fa0df6f87"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:gaecbb196e76a516c1e3672a8fa0df6f87"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaecbb196e76a516c1e3672a8fa0df6f87">transposeScatterIncrU</a> (double *base, const std::int32_t offset[], <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> v0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> v1, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> v2)</td></tr>
<tr class="memdesc:gaecbb196e76a516c1e3672a8fa0df6f87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transpose and add 3 SIMD doubles to 3 consecutive addresses at GMX_SIMD_DOUBLE_WIDTH offsets.  <a href="group__module__simd.xhtml#gaecbb196e76a516c1e3672a8fa0df6f87">More...</a><br/></td></tr>
<tr class="separator:gaecbb196e76a516c1e3672a8fa0df6f87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga15283d6034452bcbee9c5f7538d7b560"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:ga15283d6034452bcbee9c5f7538d7b560"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga15283d6034452bcbee9c5f7538d7b560">transposeScatterDecrU</a> (double *base, const std::int32_t offset[], <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> v0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> v1, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> v2)</td></tr>
<tr class="memdesc:ga15283d6034452bcbee9c5f7538d7b560"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transpose and subtract 3 SIMD doubles to 3 consecutive addresses at GMX_SIMD_DOUBLE_WIDTH offsets.  <a href="group__module__simd.xhtml#ga15283d6034452bcbee9c5f7538d7b560">More...</a><br/></td></tr>
<tr class="separator:ga15283d6034452bcbee9c5f7538d7b560"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad8d730c26297155e1aa934c2bc91e750"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gad8d730c26297155e1aa934c2bc91e750">expandScalarsToTriplets</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> scalar, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *triplets0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *triplets1, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *triplets2)</td></tr>
<tr class="memdesc:gad8d730c26297155e1aa934c2bc91e750"><td class="mdescLeft">&#160;</td><td class="mdescRight">Expand each element of double SIMD variable into three identical consecutive elements in three SIMD outputs.  <a href="group__module__simd.xhtml#gad8d730c26297155e1aa934c2bc91e750">More...</a><br/></td></tr>
<tr class="separator:gad8d730c26297155e1aa934c2bc91e750"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1008329474744f6987edf28c4124ac24"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:ga1008329474744f6987edf28c4124ac24"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga1008329474744f6987edf28c4124ac24">gatherLoadBySimdIntTranspose</a> (const double *base, <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> offset, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v1, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v2, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v3)</td></tr>
<tr class="memdesc:ga1008329474744f6987edf28c4124ac24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 4 consecutive doubles from each of GMX_SIMD_DOUBLE_WIDTH offsets specified by a SIMD integer, transpose into 4 SIMD double variables.  <a href="group__module__simd.xhtml#ga1008329474744f6987edf28c4124ac24">More...</a><br/></td></tr>
<tr class="separator:ga1008329474744f6987edf28c4124ac24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad15c3a27898a9f9dbb2963dee1a7cacf"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:gad15c3a27898a9f9dbb2963dee1a7cacf"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gad15c3a27898a9f9dbb2963dee1a7cacf">gatherLoadUBySimdIntTranspose</a> (const double *base, <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> offset, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v1)</td></tr>
<tr class="memdesc:gad15c3a27898a9f9dbb2963dee1a7cacf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 consecutive doubles from each of GMX_SIMD_DOUBLE_WIDTH offsets (unaligned) specified by SIMD integer, transpose into 2 SIMD doubles.  <a href="group__module__simd.xhtml#gad15c3a27898a9f9dbb2963dee1a7cacf">More...</a><br/></td></tr>
<tr class="separator:gad15c3a27898a9f9dbb2963dee1a7cacf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga11385272a2b5123ca3aa3e5696e55dbc"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:ga11385272a2b5123ca3aa3e5696e55dbc"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga11385272a2b5123ca3aa3e5696e55dbc">gatherLoadBySimdIntTranspose</a> (const double *base, <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> offset, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v1)</td></tr>
<tr class="memdesc:ga11385272a2b5123ca3aa3e5696e55dbc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 consecutive doubles from each of GMX_SIMD_DOUBLE_WIDTH offsets specified by a SIMD integer, transpose into 2 SIMD double variables.  <a href="group__module__simd.xhtml#ga11385272a2b5123ca3aa3e5696e55dbc">More...</a><br/></td></tr>
<tr class="separator:ga11385272a2b5123ca3aa3e5696e55dbc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gace1c53e05ba045977e06eb98778c0123"><td class="memItemLeft" align="right" valign="top">static double gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gace1c53e05ba045977e06eb98778c0123">reduceIncr4ReturnSum</a> (double *m, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> v0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> v1, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> v2, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> v3)</td></tr>
<tr class="memdesc:gace1c53e05ba045977e06eb98778c0123"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reduce each of four SIMD doubles, add those values to four consecutive doubles in memory, return sum.  <a href="group__module__simd.xhtml#gace1c53e05ba045977e06eb98778c0123">More...</a><br/></td></tr>
<tr class="separator:gace1c53e05ba045977e06eb98778c0123"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0f9f9c71226ae1d2f0065dd66e1027f0"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:ga0f9f9c71226ae1d2f0065dd66e1027f0"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga0f9f9c71226ae1d2f0065dd66e1027f0">gatherLoadTranspose</a> (const float *base, const std::int32_t offset[], <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v0, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v1, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v2, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v3)</td></tr>
<tr class="memdesc:ga0f9f9c71226ae1d2f0065dd66e1027f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 4 consecutive floats from each of GMX_SIMD_FLOAT_WIDTH offsets, and transpose into 4 SIMD float variables.  <a href="group__module__simd.xhtml#ga0f9f9c71226ae1d2f0065dd66e1027f0">More...</a><br/></td></tr>
<tr class="separator:ga0f9f9c71226ae1d2f0065dd66e1027f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6823a0b3cbc43eee3918b137d2b18384"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:ga6823a0b3cbc43eee3918b137d2b18384"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga6823a0b3cbc43eee3918b137d2b18384">gatherLoadTranspose</a> (const float *base, const std::int32_t offset[], <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v0, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v1)</td></tr>
<tr class="memdesc:ga6823a0b3cbc43eee3918b137d2b18384"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 consecutive floats from each of GMX_SIMD_FLOAT_WIDTH offsets, and transpose into 2 SIMD float variables.  <a href="group__module__simd.xhtml#ga6823a0b3cbc43eee3918b137d2b18384">More...</a><br/></td></tr>
<tr class="separator:ga6823a0b3cbc43eee3918b137d2b18384"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa5581add75787fa1304acdac5af0ad7d"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:gaa5581add75787fa1304acdac5af0ad7d"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaa5581add75787fa1304acdac5af0ad7d">gatherLoadUTranspose</a> (const float *base, const std::int32_t offset[], <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v0, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v1, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v2)</td></tr>
<tr class="memdesc:gaa5581add75787fa1304acdac5af0ad7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 3 consecutive floats from each of GMX_SIMD_FLOAT_WIDTH offsets, and transpose into 3 SIMD float variables.  <a href="group__module__simd.xhtml#gaa5581add75787fa1304acdac5af0ad7d">More...</a><br/></td></tr>
<tr class="separator:gaa5581add75787fa1304acdac5af0ad7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaba67dbea2a790730dfa78999209959b2"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:gaba67dbea2a790730dfa78999209959b2"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaba67dbea2a790730dfa78999209959b2">transposeScatterStoreU</a> (float *base, const std::int32_t offset[], <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> v0, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> v1, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> v2)</td></tr>
<tr class="memdesc:gaba67dbea2a790730dfa78999209959b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transpose and store 3 SIMD floats to 3 consecutive addresses at GMX_SIMD_FLOAT_WIDTH offsets.  <a href="group__module__simd.xhtml#gaba67dbea2a790730dfa78999209959b2">More...</a><br/></td></tr>
<tr class="separator:gaba67dbea2a790730dfa78999209959b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac36c2fd8a466fb309ba9ae1dbf8dffbd"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:gac36c2fd8a466fb309ba9ae1dbf8dffbd"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gac36c2fd8a466fb309ba9ae1dbf8dffbd">transposeScatterIncrU</a> (float *base, const std::int32_t offset[], <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> v0, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> v1, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> v2)</td></tr>
<tr class="memdesc:gac36c2fd8a466fb309ba9ae1dbf8dffbd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transpose and add 3 SIMD floats to 3 consecutive addresses at GMX_SIMD_FLOAT_WIDTH offsets.  <a href="group__module__simd.xhtml#gac36c2fd8a466fb309ba9ae1dbf8dffbd">More...</a><br/></td></tr>
<tr class="separator:gac36c2fd8a466fb309ba9ae1dbf8dffbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6889b6665cbfc5fa0bce09fe5db5e49c"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:ga6889b6665cbfc5fa0bce09fe5db5e49c"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga6889b6665cbfc5fa0bce09fe5db5e49c">transposeScatterDecrU</a> (float *base, const std::int32_t offset[], <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> v0, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> v1, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> v2)</td></tr>
<tr class="memdesc:ga6889b6665cbfc5fa0bce09fe5db5e49c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transpose and subtract 3 SIMD floats to 3 consecutive addresses at GMX_SIMD_FLOAT_WIDTH offsets.  <a href="group__module__simd.xhtml#ga6889b6665cbfc5fa0bce09fe5db5e49c">More...</a><br/></td></tr>
<tr class="separator:ga6889b6665cbfc5fa0bce09fe5db5e49c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga82af54acc2b9eae6e58b646b5022aef5"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga82af54acc2b9eae6e58b646b5022aef5">expandScalarsToTriplets</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> scalar, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *triplets0, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *triplets1, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *triplets2)</td></tr>
<tr class="memdesc:ga82af54acc2b9eae6e58b646b5022aef5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Expand each element of float SIMD variable into three identical consecutive elements in three SIMD outputs.  <a href="group__module__simd.xhtml#ga82af54acc2b9eae6e58b646b5022aef5">More...</a><br/></td></tr>
<tr class="separator:ga82af54acc2b9eae6e58b646b5022aef5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac7ba60b7340036a984888bbca43616e4"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:gac7ba60b7340036a984888bbca43616e4"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gac7ba60b7340036a984888bbca43616e4">gatherLoadBySimdIntTranspose</a> (const float *base, <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> offset, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v0, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v1, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v2, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v3)</td></tr>
<tr class="memdesc:gac7ba60b7340036a984888bbca43616e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 4 consecutive floats from each of GMX_SIMD_FLOAT_WIDTH offsets specified by a SIMD integer, transpose into 4 SIMD float variables.  <a href="group__module__simd.xhtml#gac7ba60b7340036a984888bbca43616e4">More...</a><br/></td></tr>
<tr class="separator:gac7ba60b7340036a984888bbca43616e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4b26c79db832542ab73a692f7db941c2"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:ga4b26c79db832542ab73a692f7db941c2"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga4b26c79db832542ab73a692f7db941c2">gatherLoadUBySimdIntTranspose</a> (const float *base, <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> offset, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v0, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v1)</td></tr>
<tr class="memdesc:ga4b26c79db832542ab73a692f7db941c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 consecutive floats from each of GMX_SIMD_FLOAT_WIDTH offsets (unaligned) specified by SIMD integer, transpose into 2 SIMD floats.  <a href="group__module__simd.xhtml#ga4b26c79db832542ab73a692f7db941c2">More...</a><br/></td></tr>
<tr class="separator:ga4b26c79db832542ab73a692f7db941c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga98bde531b096434095b228308e7a3025"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:ga98bde531b096434095b228308e7a3025"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga98bde531b096434095b228308e7a3025">gatherLoadBySimdIntTranspose</a> (const float *base, <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> offset, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v0, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v1)</td></tr>
<tr class="memdesc:ga98bde531b096434095b228308e7a3025"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 consecutive floats from each of GMX_SIMD_FLOAT_WIDTH offsets specified by a SIMD integer, transpose into 2 SIMD float variables.  <a href="group__module__simd.xhtml#ga98bde531b096434095b228308e7a3025">More...</a><br/></td></tr>
<tr class="separator:ga98bde531b096434095b228308e7a3025"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e64aefa14afa2f473c4db52e82d4a99"><td class="memItemLeft" align="right" valign="top">static float gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga1e64aefa14afa2f473c4db52e82d4a99">reduceIncr4ReturnSum</a> (float *m, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> v0, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> v1, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> v2, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> v3)</td></tr>
<tr class="memdesc:ga1e64aefa14afa2f473c4db52e82d4a99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reduce each of four SIMD floats, add those values to four consecutive floats in memory, return sum.  <a href="group__module__simd.xhtml#ga1e64aefa14afa2f473c4db52e82d4a99">More...</a><br/></td></tr>
<tr class="separator:ga1e64aefa14afa2f473c4db52e82d4a99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ba56cff453ff9a1f21a11d72358592a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a5ba56cff453ff9a1f21a11d72358592a">store</a> (float *m, float a)</td></tr>
<tr class="memdesc:a5ba56cff453ff9a1f21a11d72358592a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store contents of float variable to aligned memory m.  <a href="#a5ba56cff453ff9a1f21a11d72358592a">More...</a><br/></td></tr>
<tr class="separator:a5ba56cff453ff9a1f21a11d72358592a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3a3dcd7322b5b2555938fe1c05be15f"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af3a3dcd7322b5b2555938fe1c05be15f">storeU</a> (float *m, float a)</td></tr>
<tr class="memdesc:af3a3dcd7322b5b2555938fe1c05be15f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store contents of float variable to unaligned memory m.  <a href="#af3a3dcd7322b5b2555938fe1c05be15f">More...</a><br/></td></tr>
<tr class="separator:af3a3dcd7322b5b2555938fe1c05be15f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a183d89182d418bb66a668104978af5bf"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a183d89182d418bb66a668104978af5bf">fma</a> (float a, float b, float c)</td></tr>
<tr class="memdesc:a183d89182d418bb66a668104978af5bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float Fused-multiply-add. Result is a*b + c.  <a href="#a183d89182d418bb66a668104978af5bf">More...</a><br/></td></tr>
<tr class="separator:a183d89182d418bb66a668104978af5bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afad947f51589a3a9eef2f8364ab62c19"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#afad947f51589a3a9eef2f8364ab62c19">fms</a> (float a, float b, float c)</td></tr>
<tr class="memdesc:afad947f51589a3a9eef2f8364ab62c19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float Fused-multiply-subtract. Result is a*b - c.  <a href="#afad947f51589a3a9eef2f8364ab62c19">More...</a><br/></td></tr>
<tr class="separator:afad947f51589a3a9eef2f8364ab62c19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55183d689ab9328c18c3b3f819bd7266"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a55183d689ab9328c18c3b3f819bd7266">fnma</a> (float a, float b, float c)</td></tr>
<tr class="memdesc:a55183d689ab9328c18c3b3f819bd7266"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float Fused-negated-multiply-add. Result is -a*b + c.  <a href="#a55183d689ab9328c18c3b3f819bd7266">More...</a><br/></td></tr>
<tr class="separator:a55183d689ab9328c18c3b3f819bd7266"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6e6950597f4833fa93b09a94e7b0e16"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa6e6950597f4833fa93b09a94e7b0e16">fnms</a> (float a, float b, float c)</td></tr>
<tr class="memdesc:aa6e6950597f4833fa93b09a94e7b0e16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float Fused-negated-multiply-subtract. Result is -a*b - c.  <a href="#aa6e6950597f4833fa93b09a94e7b0e16">More...</a><br/></td></tr>
<tr class="separator:aa6e6950597f4833fa93b09a94e7b0e16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0178a127dde331652ab015323ae622f2"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0178a127dde331652ab015323ae622f2">maskAdd</a> (float a, float b, float m)</td></tr>
<tr class="memdesc:a0178a127dde331652ab015323ae622f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add two float variables, masked version.  <a href="#a0178a127dde331652ab015323ae622f2">More...</a><br/></td></tr>
<tr class="separator:a0178a127dde331652ab015323ae622f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e3c4084e25d298f95003df8e9aeffa1"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a1e3c4084e25d298f95003df8e9aeffa1">maskzMul</a> (float a, float b, float m)</td></tr>
<tr class="memdesc:a1e3c4084e25d298f95003df8e9aeffa1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply two float variables, masked version.  <a href="#a1e3c4084e25d298f95003df8e9aeffa1">More...</a><br/></td></tr>
<tr class="separator:a1e3c4084e25d298f95003df8e9aeffa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8151e61ef06e30e360c03bba6fb5e2ab"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a8151e61ef06e30e360c03bba6fb5e2ab">maskzFma</a> (float a, float b, float c, float m)</td></tr>
<tr class="memdesc:a8151e61ef06e30e360c03bba6fb5e2ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float fused multiply-add, masked version.  <a href="#a8151e61ef06e30e360c03bba6fb5e2ab">More...</a><br/></td></tr>
<tr class="separator:a8151e61ef06e30e360c03bba6fb5e2ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5dc46e83d110b8c81339683bf748fc81"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a5dc46e83d110b8c81339683bf748fc81">abs</a> (float a)</td></tr>
<tr class="memdesc:a5dc46e83d110b8c81339683bf748fc81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float Floating-point <a class="el" href="group__module__simd.xhtml#ga9339c53d13a59e946834c14d565f1e18" title="SIMD4 Floating-point abs(). ">abs()</a>.  <a href="#a5dc46e83d110b8c81339683bf748fc81">More...</a><br/></td></tr>
<tr class="separator:a5dc46e83d110b8c81339683bf748fc81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35c7b010fbd32f5424afa0de0c70db6f"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a35c7b010fbd32f5424afa0de0c70db6f">max</a> (float a, float b)</td></tr>
<tr class="memdesc:a35c7b010fbd32f5424afa0de0c70db6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set each float element to the largest from two variables.  <a href="#a35c7b010fbd32f5424afa0de0c70db6f">More...</a><br/></td></tr>
<tr class="separator:a35c7b010fbd32f5424afa0de0c70db6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6d21dccd9a94698363bdb1943f139bb"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa6d21dccd9a94698363bdb1943f139bb">min</a> (float a, float b)</td></tr>
<tr class="memdesc:aa6d21dccd9a94698363bdb1943f139bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set each float element to the smallest from two variables.  <a href="#aa6d21dccd9a94698363bdb1943f139bb">More...</a><br/></td></tr>
<tr class="separator:aa6d21dccd9a94698363bdb1943f139bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c0a061335a242530d8d791459a8e2d0"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a1c0a061335a242530d8d791459a8e2d0">round</a> (float a)</td></tr>
<tr class="memdesc:a1c0a061335a242530d8d791459a8e2d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float round to nearest integer value (in floating-point format).  <a href="#a1c0a061335a242530d8d791459a8e2d0">More...</a><br/></td></tr>
<tr class="separator:a1c0a061335a242530d8d791459a8e2d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4323d38c16cd7ce6b1ae9df62e94ef2a"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a4323d38c16cd7ce6b1ae9df62e94ef2a">trunc</a> (float a)</td></tr>
<tr class="memdesc:a4323d38c16cd7ce6b1ae9df62e94ef2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate float, i.e. round towards zero - common hardware instruction.  <a href="#a4323d38c16cd7ce6b1ae9df62e94ef2a">More...</a><br/></td></tr>
<tr class="separator:a4323d38c16cd7ce6b1ae9df62e94ef2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4a37558328ab029203170ad4c6c4d01"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa4a37558328ab029203170ad4c6c4d01">reduce</a> (float a)</td></tr>
<tr class="memdesc:aa4a37558328ab029203170ad4c6c4d01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return sum of all elements in float variable (i.e., the variable itself).  <a href="#aa4a37558328ab029203170ad4c6c4d01">More...</a><br/></td></tr>
<tr class="separator:aa4a37558328ab029203170ad4c6c4d01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaec39ef87dbec92292cd5954c922be6d"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aaec39ef87dbec92292cd5954c922be6d">andNot</a> (float a, float b)</td></tr>
<tr class="memdesc:aaec39ef87dbec92292cd5954c922be6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise andnot for two scalar float variables.  <a href="#aaec39ef87dbec92292cd5954c922be6d">More...</a><br/></td></tr>
<tr class="separator:aaec39ef87dbec92292cd5954c922be6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6a3628d9b9ddc7900590f963be7bbf0"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af6a3628d9b9ddc7900590f963be7bbf0">testBits</a> (float a)</td></tr>
<tr class="memdesc:af6a3628d9b9ddc7900590f963be7bbf0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if any bits are set in the float variable.  <a href="#af6a3628d9b9ddc7900590f963be7bbf0">More...</a><br/></td></tr>
<tr class="separator:af6a3628d9b9ddc7900590f963be7bbf0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af90cd5d709899e47809553109383299e"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af90cd5d709899e47809553109383299e">anyTrue</a> (bool a)</td></tr>
<tr class="memdesc:af90cd5d709899e47809553109383299e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns if the boolean is true.  <a href="#af90cd5d709899e47809553109383299e">More...</a><br/></td></tr>
<tr class="separator:af90cd5d709899e47809553109383299e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af47eb155075f6f9aa99ecca11825b021"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af47eb155075f6f9aa99ecca11825b021">selectByMask</a> (float a, bool mask)</td></tr>
<tr class="memdesc:af47eb155075f6f9aa99ecca11825b021"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from single precision variable where boolean is true.  <a href="#af47eb155075f6f9aa99ecca11825b021">More...</a><br/></td></tr>
<tr class="separator:af47eb155075f6f9aa99ecca11825b021"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76f8ccf8f582242260b4e785ebf48e3a"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a76f8ccf8f582242260b4e785ebf48e3a">selectByNotMask</a> (float a, bool mask)</td></tr>
<tr class="memdesc:a76f8ccf8f582242260b4e785ebf48e3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from single precision variable where boolean is false.  <a href="#a76f8ccf8f582242260b4e785ebf48e3a">More...</a><br/></td></tr>
<tr class="separator:a76f8ccf8f582242260b4e785ebf48e3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31c5db5940f1fed568d8d6a0dbe7ec1a"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a31c5db5940f1fed568d8d6a0dbe7ec1a">blend</a> (float a, float b, float sel)</td></tr>
<tr class="memdesc:a31c5db5940f1fed568d8d6a0dbe7ec1a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Blend float selection.  <a href="#a31c5db5940f1fed568d8d6a0dbe7ec1a">More...</a><br/></td></tr>
<tr class="separator:a31c5db5940f1fed568d8d6a0dbe7ec1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2136f5684897fc7ea139039eba172629"><td class="memItemLeft" align="right" valign="top">static std::int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2136f5684897fc7ea139039eba172629">cvtR2I</a> (float a)</td></tr>
<tr class="memdesc:a2136f5684897fc7ea139039eba172629"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round single precision floating point to integer.  <a href="#a2136f5684897fc7ea139039eba172629">More...</a><br/></td></tr>
<tr class="separator:a2136f5684897fc7ea139039eba172629"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c74ba54abe2627167abfc0df7286f5d"><td class="memItemLeft" align="right" valign="top">static std::int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a7c74ba54abe2627167abfc0df7286f5d">cvttR2I</a> (float a)</td></tr>
<tr class="memdesc:a7c74ba54abe2627167abfc0df7286f5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate single precision floating point to integer.  <a href="#a7c74ba54abe2627167abfc0df7286f5d">More...</a><br/></td></tr>
<tr class="separator:a7c74ba54abe2627167abfc0df7286f5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69388fb35cb4b891c7517554e4500615"><td class="memItemLeft" align="right" valign="top">static std::int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a69388fb35cb4b891c7517554e4500615">cvtI2R</a> (std::int32_t a)</td></tr>
<tr class="memdesc:a69388fb35cb4b891c7517554e4500615"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return integer.  <a href="#a69388fb35cb4b891c7517554e4500615">More...</a><br/></td></tr>
<tr class="separator:a69388fb35cb4b891c7517554e4500615"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea1d0d7a9f81e8e5cac19a3b66f0170e"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aea1d0d7a9f81e8e5cac19a3b66f0170e">store</a> (double *m, double a)</td></tr>
<tr class="memdesc:aea1d0d7a9f81e8e5cac19a3b66f0170e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store contents of double variable to aligned memory m.  <a href="#aea1d0d7a9f81e8e5cac19a3b66f0170e">More...</a><br/></td></tr>
<tr class="separator:aea1d0d7a9f81e8e5cac19a3b66f0170e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea9644fa777bc5e47ff9d3e2bdde34e0"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aea9644fa777bc5e47ff9d3e2bdde34e0">storeU</a> (double *m, double a)</td></tr>
<tr class="memdesc:aea9644fa777bc5e47ff9d3e2bdde34e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store contents of double variable to unaligned memory m.  <a href="#aea9644fa777bc5e47ff9d3e2bdde34e0">More...</a><br/></td></tr>
<tr class="separator:aea9644fa777bc5e47ff9d3e2bdde34e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79e2ba07938cafa28c0988ba52874f46"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a79e2ba07938cafa28c0988ba52874f46">fma</a> (double a, double b, double c)</td></tr>
<tr class="memdesc:a79e2ba07938cafa28c0988ba52874f46"><td class="mdescLeft">&#160;</td><td class="mdescRight">double Fused-multiply-add. Result is a*b + c.  <a href="#a79e2ba07938cafa28c0988ba52874f46">More...</a><br/></td></tr>
<tr class="separator:a79e2ba07938cafa28c0988ba52874f46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcb2c8942d173c6a9964940f90c55b2a"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#abcb2c8942d173c6a9964940f90c55b2a">fms</a> (double a, double b, double c)</td></tr>
<tr class="memdesc:abcb2c8942d173c6a9964940f90c55b2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">double Fused-multiply-subtract. Result is a*b - c.  <a href="#abcb2c8942d173c6a9964940f90c55b2a">More...</a><br/></td></tr>
<tr class="separator:abcb2c8942d173c6a9964940f90c55b2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcf7849c8ce1bbbe3e2fecffedfc05e8"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#adcf7849c8ce1bbbe3e2fecffedfc05e8">fnma</a> (double a, double b, double c)</td></tr>
<tr class="memdesc:adcf7849c8ce1bbbe3e2fecffedfc05e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">double Fused-negated-multiply-add. Result is - a*b + c.  <a href="#adcf7849c8ce1bbbe3e2fecffedfc05e8">More...</a><br/></td></tr>
<tr class="separator:adcf7849c8ce1bbbe3e2fecffedfc05e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9bd8328d5cbdb7f6a054b877183f277"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad9bd8328d5cbdb7f6a054b877183f277">fnms</a> (double a, double b, double c)</td></tr>
<tr class="memdesc:ad9bd8328d5cbdb7f6a054b877183f277"><td class="mdescLeft">&#160;</td><td class="mdescRight">double Fused-negated-multiply-subtract. Result is -a*b - c.  <a href="#ad9bd8328d5cbdb7f6a054b877183f277">More...</a><br/></td></tr>
<tr class="separator:ad9bd8328d5cbdb7f6a054b877183f277"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68b090d0e3ab5695c508453406ee43c8"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a68b090d0e3ab5695c508453406ee43c8">maskAdd</a> (double a, double b, double m)</td></tr>
<tr class="memdesc:a68b090d0e3ab5695c508453406ee43c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add two double variables, masked version.  <a href="#a68b090d0e3ab5695c508453406ee43c8">More...</a><br/></td></tr>
<tr class="separator:a68b090d0e3ab5695c508453406ee43c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e4ab8b1ab046ff242d32ab93366bfde"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a7e4ab8b1ab046ff242d32ab93366bfde">maskzMul</a> (double a, double b, double m)</td></tr>
<tr class="memdesc:a7e4ab8b1ab046ff242d32ab93366bfde"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply two double variables, masked version.  <a href="#a7e4ab8b1ab046ff242d32ab93366bfde">More...</a><br/></td></tr>
<tr class="separator:a7e4ab8b1ab046ff242d32ab93366bfde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3cf4eaad108887d2462f5beecd4db62"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa3cf4eaad108887d2462f5beecd4db62">maskzFma</a> (double a, double b, double c, double m)</td></tr>
<tr class="memdesc:aa3cf4eaad108887d2462f5beecd4db62"><td class="mdescLeft">&#160;</td><td class="mdescRight">double fused multiply-add, masked version.  <a href="#aa3cf4eaad108887d2462f5beecd4db62">More...</a><br/></td></tr>
<tr class="separator:aa3cf4eaad108887d2462f5beecd4db62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac85ea3af684916aee86e2674a6bd81e5"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ac85ea3af684916aee86e2674a6bd81e5">abs</a> (double a)</td></tr>
<tr class="memdesc:ac85ea3af684916aee86e2674a6bd81e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">double doubleing-point <a class="el" href="group__module__simd.xhtml#ga9339c53d13a59e946834c14d565f1e18" title="SIMD4 Floating-point abs(). ">abs()</a>.  <a href="#ac85ea3af684916aee86e2674a6bd81e5">More...</a><br/></td></tr>
<tr class="separator:ac85ea3af684916aee86e2674a6bd81e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16f6bf4a20b14262f28168596d5bb8b9"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a16f6bf4a20b14262f28168596d5bb8b9">max</a> (double a, double b)</td></tr>
<tr class="memdesc:a16f6bf4a20b14262f28168596d5bb8b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set each double element to the largest from two variables.  <a href="#a16f6bf4a20b14262f28168596d5bb8b9">More...</a><br/></td></tr>
<tr class="separator:a16f6bf4a20b14262f28168596d5bb8b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65fb0c7aa84962905d3d78a913c787c3"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a65fb0c7aa84962905d3d78a913c787c3">min</a> (double a, double b)</td></tr>
<tr class="memdesc:a65fb0c7aa84962905d3d78a913c787c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set each double element to the smallest from two variables.  <a href="#a65fb0c7aa84962905d3d78a913c787c3">More...</a><br/></td></tr>
<tr class="separator:a65fb0c7aa84962905d3d78a913c787c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15179b513c1ec4ec0b9090e57b76bac4"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a15179b513c1ec4ec0b9090e57b76bac4">round</a> (double a)</td></tr>
<tr class="memdesc:a15179b513c1ec4ec0b9090e57b76bac4"><td class="mdescLeft">&#160;</td><td class="mdescRight">double round to nearest integer value (in doubleing-point format).  <a href="#a15179b513c1ec4ec0b9090e57b76bac4">More...</a><br/></td></tr>
<tr class="separator:a15179b513c1ec4ec0b9090e57b76bac4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00d84f65dae98aeb02816975f5045eed"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a00d84f65dae98aeb02816975f5045eed">trunc</a> (double a)</td></tr>
<tr class="memdesc:a00d84f65dae98aeb02816975f5045eed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate double, i.e. round towards zero - common hardware instruction.  <a href="#a00d84f65dae98aeb02816975f5045eed">More...</a><br/></td></tr>
<tr class="separator:a00d84f65dae98aeb02816975f5045eed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a157983d90620412d404e8a77d1ddbd0f"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a157983d90620412d404e8a77d1ddbd0f">reduce</a> (double a)</td></tr>
<tr class="memdesc:a157983d90620412d404e8a77d1ddbd0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return sum of all elements in double variable (i.e., the variable itself).  <a href="#a157983d90620412d404e8a77d1ddbd0f">More...</a><br/></td></tr>
<tr class="separator:a157983d90620412d404e8a77d1ddbd0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebb0315d31c3c818a738bdc153397365"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aebb0315d31c3c818a738bdc153397365">andNot</a> (double a, double b)</td></tr>
<tr class="memdesc:aebb0315d31c3c818a738bdc153397365"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise andnot for two scalar double variables.  <a href="#aebb0315d31c3c818a738bdc153397365">More...</a><br/></td></tr>
<tr class="separator:aebb0315d31c3c818a738bdc153397365"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae58ba299df96ee6c45043e646a1d01dc"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae58ba299df96ee6c45043e646a1d01dc">testBits</a> (double a)</td></tr>
<tr class="memdesc:ae58ba299df96ee6c45043e646a1d01dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if any bits are set in the double variable.  <a href="#ae58ba299df96ee6c45043e646a1d01dc">More...</a><br/></td></tr>
<tr class="separator:ae58ba299df96ee6c45043e646a1d01dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1449de9307a87e0c5946fd9cab43b35"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa1449de9307a87e0c5946fd9cab43b35">selectByMask</a> (double a, bool mask)</td></tr>
<tr class="memdesc:aa1449de9307a87e0c5946fd9cab43b35"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from double precision variable where boolean is true.  <a href="#aa1449de9307a87e0c5946fd9cab43b35">More...</a><br/></td></tr>
<tr class="separator:aa1449de9307a87e0c5946fd9cab43b35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f03ad3380ef6213c5459051c3268ba7"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2f03ad3380ef6213c5459051c3268ba7">selectByNotMask</a> (double a, bool mask)</td></tr>
<tr class="memdesc:a2f03ad3380ef6213c5459051c3268ba7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from double precision variable where boolean is false.  <a href="#a2f03ad3380ef6213c5459051c3268ba7">More...</a><br/></td></tr>
<tr class="separator:a2f03ad3380ef6213c5459051c3268ba7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90aa803db2a6a8c9dbb22395dcaf4532"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a90aa803db2a6a8c9dbb22395dcaf4532">blend</a> (double a, double b, double sel)</td></tr>
<tr class="memdesc:a90aa803db2a6a8c9dbb22395dcaf4532"><td class="mdescLeft">&#160;</td><td class="mdescRight">Blend double selection.  <a href="#a90aa803db2a6a8c9dbb22395dcaf4532">More...</a><br/></td></tr>
<tr class="separator:a90aa803db2a6a8c9dbb22395dcaf4532"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc9f420c1d0c099cc58ac3ae5fcb1ace"><td class="memItemLeft" align="right" valign="top">static std::int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#acc9f420c1d0c099cc58ac3ae5fcb1ace">cvtR2I</a> (double a)</td></tr>
<tr class="memdesc:acc9f420c1d0c099cc58ac3ae5fcb1ace"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round single precision doubleing point to integer.  <a href="#acc9f420c1d0c099cc58ac3ae5fcb1ace">More...</a><br/></td></tr>
<tr class="separator:acc9f420c1d0c099cc58ac3ae5fcb1ace"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0fb4318cc5c14075330d52382e6bdd4"><td class="memItemLeft" align="right" valign="top">static std::int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ac0fb4318cc5c14075330d52382e6bdd4">cvttR2I</a> (double a)</td></tr>
<tr class="memdesc:ac0fb4318cc5c14075330d52382e6bdd4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate single precision doubleing point to integer.  <a href="#ac0fb4318cc5c14075330d52382e6bdd4">More...</a><br/></td></tr>
<tr class="separator:ac0fb4318cc5c14075330d52382e6bdd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac575d3b81809b71e414755dc8acf3317"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ac575d3b81809b71e414755dc8acf3317">cvtF2D</a> (float a)</td></tr>
<tr class="memdesc:ac575d3b81809b71e414755dc8acf3317"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert float to double (mimicks SIMD conversion)  <a href="#ac575d3b81809b71e414755dc8acf3317">More...</a><br/></td></tr>
<tr class="separator:ac575d3b81809b71e414755dc8acf3317"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22401779c65549d3061b4fdd5290ef19"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a22401779c65549d3061b4fdd5290ef19">cvtD2F</a> (double a)</td></tr>
<tr class="memdesc:a22401779c65549d3061b4fdd5290ef19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert double to float (mimicks SIMD conversion)  <a href="#a22401779c65549d3061b4fdd5290ef19">More...</a><br/></td></tr>
<tr class="separator:a22401779c65549d3061b4fdd5290ef19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa169afcbfb3992ab9fde1ed5beee8b06"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa169afcbfb3992ab9fde1ed5beee8b06">store</a> (std::int32_t *m, std::int32_t a)</td></tr>
<tr class="memdesc:aa169afcbfb3992ab9fde1ed5beee8b06"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store contents of integer variable to aligned memory m.  <a href="#aa169afcbfb3992ab9fde1ed5beee8b06">More...</a><br/></td></tr>
<tr class="separator:aa169afcbfb3992ab9fde1ed5beee8b06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43354d3d210193bcf5316234dc7d93ae"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a43354d3d210193bcf5316234dc7d93ae">storeU</a> (std::int32_t *m, std::int32_t a)</td></tr>
<tr class="memdesc:a43354d3d210193bcf5316234dc7d93ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store contents of integer variable to unaligned memory m.  <a href="#a43354d3d210193bcf5316234dc7d93ae">More...</a><br/></td></tr>
<tr class="separator:a43354d3d210193bcf5316234dc7d93ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a880a42645963c52980a5790f09e3bd18"><td class="memItemLeft" align="right" valign="top">static std::int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a880a42645963c52980a5790f09e3bd18">andNot</a> (std::int32_t a, std::int32_t b)</td></tr>
<tr class="memdesc:a880a42645963c52980a5790f09e3bd18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise andnot for two scalar integer variables.  <a href="#a880a42645963c52980a5790f09e3bd18">More...</a><br/></td></tr>
<tr class="separator:a880a42645963c52980a5790f09e3bd18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2a03b61db6a3ed3e8c2d5e1b3acc9a8"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae2a03b61db6a3ed3e8c2d5e1b3acc9a8">testBits</a> (std::int32_t a)</td></tr>
<tr class="memdesc:ae2a03b61db6a3ed3e8c2d5e1b3acc9a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if any bits are set in the integer variable.  <a href="#ae2a03b61db6a3ed3e8c2d5e1b3acc9a8">More...</a><br/></td></tr>
<tr class="separator:ae2a03b61db6a3ed3e8c2d5e1b3acc9a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a543420229312467871aaa26ea79f5a5d"><td class="memItemLeft" align="right" valign="top">static std::int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a543420229312467871aaa26ea79f5a5d">selectByMask</a> (std::int32_t a, bool mask)</td></tr>
<tr class="memdesc:a543420229312467871aaa26ea79f5a5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from integer variable where boolean is true.  <a href="#a543420229312467871aaa26ea79f5a5d">More...</a><br/></td></tr>
<tr class="separator:a543420229312467871aaa26ea79f5a5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1c7d81b9ba8302dadcbdded4fcd4399"><td class="memItemLeft" align="right" valign="top">static std::int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa1c7d81b9ba8302dadcbdded4fcd4399">selectByNotMask</a> (std::int32_t a, bool mask)</td></tr>
<tr class="memdesc:aa1c7d81b9ba8302dadcbdded4fcd4399"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from integer variable where boolean is false.  <a href="#aa1c7d81b9ba8302dadcbdded4fcd4399">More...</a><br/></td></tr>
<tr class="separator:aa1c7d81b9ba8302dadcbdded4fcd4399"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf33872c1b22ffd9340e77410c693083"><td class="memItemLeft" align="right" valign="top">static std::int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#acf33872c1b22ffd9340e77410c693083">blend</a> (std::int32_t a, std::int32_t b, float sel)</td></tr>
<tr class="memdesc:acf33872c1b22ffd9340e77410c693083"><td class="mdescLeft">&#160;</td><td class="mdescRight">Blend integer selection.  <a href="#acf33872c1b22ffd9340e77410c693083">More...</a><br/></td></tr>
<tr class="separator:acf33872c1b22ffd9340e77410c693083"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27254f29caa9fd12a6e774bf7a13502c"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a27254f29caa9fd12a6e774bf7a13502c">cvtB2IB</a> (bool a)</td></tr>
<tr class="memdesc:a27254f29caa9fd12a6e774bf7a13502c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Just return a boolean (mimicks SIMD real-to-int bool conversions)  <a href="#a27254f29caa9fd12a6e774bf7a13502c">More...</a><br/></td></tr>
<tr class="separator:a27254f29caa9fd12a6e774bf7a13502c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a600fa6a48b5df753c2fcc99c47f3f3"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2a600fa6a48b5df753c2fcc99c47f3f3">cvtIB2B</a> (bool a)</td></tr>
<tr class="memdesc:a2a600fa6a48b5df753c2fcc99c47f3f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Just return a boolean (mimicks SIMD int-to-real bool conversions)  <a href="#a2a600fa6a48b5df753c2fcc99c47f3f3">More...</a><br/></td></tr>
<tr class="separator:a2a600fa6a48b5df753c2fcc99c47f3f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ef5f6af06e493a4ae2d47109ee0e723"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a8ef5f6af06e493a4ae2d47109ee0e723">copysign</a> (float x, float y)</td></tr>
<tr class="memdesc:a8ef5f6af06e493a4ae2d47109ee0e723"><td class="mdescLeft">&#160;</td><td class="mdescRight">Composes single value with the magnitude of x and the sign of y.  <a href="#a8ef5f6af06e493a4ae2d47109ee0e723">More...</a><br/></td></tr>
<tr class="separator:a8ef5f6af06e493a4ae2d47109ee0e723"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba2ac92d9abba8296506e281dc66c47a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aba2ac92d9abba8296506e281dc66c47a">invsqrtPair</a> (float x0, float x1, float *out0, float *out1)</td></tr>
<tr class="memdesc:aba2ac92d9abba8296506e281dc66c47a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for two floats.  <a href="#aba2ac92d9abba8296506e281dc66c47a">More...</a><br/></td></tr>
<tr class="separator:aba2ac92d9abba8296506e281dc66c47a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6cd74be08263227a2b2f4405dee6a359"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a6cd74be08263227a2b2f4405dee6a359">inv</a> (float x)</td></tr>
<tr class="memdesc:a6cd74be08263227a2b2f4405dee6a359"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/x for float.  <a href="#a6cd74be08263227a2b2f4405dee6a359">More...</a><br/></td></tr>
<tr class="separator:a6cd74be08263227a2b2f4405dee6a359"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa182f9ceead92b3055e6ae5903994651"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa182f9ceead92b3055e6ae5903994651">maskzInvsqrt</a> (float x, bool m)</td></tr>
<tr class="memdesc:aa182f9ceead92b3055e6ae5903994651"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for masked entry of float.  <a href="#aa182f9ceead92b3055e6ae5903994651">More...</a><br/></td></tr>
<tr class="separator:aa182f9ceead92b3055e6ae5903994651"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a582d71ff8e7d51cbd2386e29935e89ef"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a582d71ff8e7d51cbd2386e29935e89ef">maskzInv</a> (float x, bool m)</td></tr>
<tr class="memdesc:a582d71ff8e7d51cbd2386e29935e89ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/x for masked entry of float.  <a href="#a582d71ff8e7d51cbd2386e29935e89ef">More...</a><br/></td></tr>
<tr class="separator:a582d71ff8e7d51cbd2386e29935e89ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b0a25f25b649f59d96b67f2d73c8ad8"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a7b0a25f25b649f59d96b67f2d73c8ad8">log</a> (float x)</td></tr>
<tr class="memdesc:a7b0a25f25b649f59d96b67f2d73c8ad8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float log(x). This is the natural logarithm.  <a href="#a7b0a25f25b649f59d96b67f2d73c8ad8">More...</a><br/></td></tr>
<tr class="separator:a7b0a25f25b649f59d96b67f2d73c8ad8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed7303338070cf13c11a8b765017a182"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aed7303338070cf13c11a8b765017a182">exp2</a> (float x)</td></tr>
<tr class="memdesc:aed7303338070cf13c11a8b765017a182"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float 2^x.  <a href="#aed7303338070cf13c11a8b765017a182">More...</a><br/></td></tr>
<tr class="separator:aed7303338070cf13c11a8b765017a182"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b3a53c1076c47dbbef4e6ec2d3191ce"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a8b3a53c1076c47dbbef4e6ec2d3191ce">exp</a> (float x)</td></tr>
<tr class="memdesc:a8b3a53c1076c47dbbef4e6ec2d3191ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float exp(x).  <a href="#a8b3a53c1076c47dbbef4e6ec2d3191ce">More...</a><br/></td></tr>
<tr class="separator:a8b3a53c1076c47dbbef4e6ec2d3191ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a81ecdda73e384cd4e6896492144529"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a9a81ecdda73e384cd4e6896492144529">erf</a> (float x)</td></tr>
<tr class="memdesc:a9a81ecdda73e384cd4e6896492144529"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float erf(x).  <a href="#a9a81ecdda73e384cd4e6896492144529">More...</a><br/></td></tr>
<tr class="separator:a9a81ecdda73e384cd4e6896492144529"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad005ed4133f5a01702c63a9440feab7"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aad005ed4133f5a01702c63a9440feab7">erfc</a> (float x)</td></tr>
<tr class="memdesc:aad005ed4133f5a01702c63a9440feab7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float erfc(x).  <a href="#aad005ed4133f5a01702c63a9440feab7">More...</a><br/></td></tr>
<tr class="separator:aad005ed4133f5a01702c63a9440feab7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3191310c1a122aafe946f0caf2fdf364"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3191310c1a122aafe946f0caf2fdf364">sincos</a> (float x, float *sinval, float *cosval)</td></tr>
<tr class="memdesc:a3191310c1a122aafe946f0caf2fdf364"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float sin &amp; cos.  <a href="#a3191310c1a122aafe946f0caf2fdf364">More...</a><br/></td></tr>
<tr class="separator:a3191310c1a122aafe946f0caf2fdf364"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af85c54a566c85f916aaa2561d12fa851"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af85c54a566c85f916aaa2561d12fa851">sin</a> (float x)</td></tr>
<tr class="memdesc:af85c54a566c85f916aaa2561d12fa851"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float sin.  <a href="#af85c54a566c85f916aaa2561d12fa851">More...</a><br/></td></tr>
<tr class="separator:af85c54a566c85f916aaa2561d12fa851"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16c6356a58f3d2c2fe6d2f50afc0c686"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a16c6356a58f3d2c2fe6d2f50afc0c686">cos</a> (float x)</td></tr>
<tr class="memdesc:a16c6356a58f3d2c2fe6d2f50afc0c686"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float cos.  <a href="#a16c6356a58f3d2c2fe6d2f50afc0c686">More...</a><br/></td></tr>
<tr class="separator:a16c6356a58f3d2c2fe6d2f50afc0c686"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7063173231453ec737688c8d91aa0749"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a7063173231453ec737688c8d91aa0749">tan</a> (float x)</td></tr>
<tr class="memdesc:a7063173231453ec737688c8d91aa0749"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float tan.  <a href="#a7063173231453ec737688c8d91aa0749">More...</a><br/></td></tr>
<tr class="separator:a7063173231453ec737688c8d91aa0749"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d5120df9c0bf437e64c806a7cfdad02"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3d5120df9c0bf437e64c806a7cfdad02">asin</a> (float x)</td></tr>
<tr class="memdesc:a3d5120df9c0bf437e64c806a7cfdad02"><td class="mdescLeft">&#160;</td><td class="mdescRight">float asin.  <a href="#a3d5120df9c0bf437e64c806a7cfdad02">More...</a><br/></td></tr>
<tr class="separator:a3d5120df9c0bf437e64c806a7cfdad02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab102173c68c06e7a340e4eebbf6c3492"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ab102173c68c06e7a340e4eebbf6c3492">acos</a> (float x)</td></tr>
<tr class="memdesc:ab102173c68c06e7a340e4eebbf6c3492"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float acos.  <a href="#ab102173c68c06e7a340e4eebbf6c3492">More...</a><br/></td></tr>
<tr class="separator:ab102173c68c06e7a340e4eebbf6c3492"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1afbc2ada56f899a8d3dc5c61530e28b"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a1afbc2ada56f899a8d3dc5c61530e28b">atan</a> (float x)</td></tr>
<tr class="memdesc:a1afbc2ada56f899a8d3dc5c61530e28b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float atan.  <a href="#a1afbc2ada56f899a8d3dc5c61530e28b">More...</a><br/></td></tr>
<tr class="separator:a1afbc2ada56f899a8d3dc5c61530e28b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed8336a58abddcdb6afa7835138ecf46"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aed8336a58abddcdb6afa7835138ecf46">atan2</a> (float y, float x)</td></tr>
<tr class="memdesc:aed8336a58abddcdb6afa7835138ecf46"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float atan2(y,x).  <a href="#aed8336a58abddcdb6afa7835138ecf46">More...</a><br/></td></tr>
<tr class="separator:aed8336a58abddcdb6afa7835138ecf46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e5b1230d0301fa6760e34d7641ca7e4"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a1e5b1230d0301fa6760e34d7641ca7e4">pmeForceCorrection</a> (float z2)</td></tr>
<tr class="memdesc:a1e5b1230d0301fa6760e34d7641ca7e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the force correction due to PME analytically in float.  <a href="#a1e5b1230d0301fa6760e34d7641ca7e4">More...</a><br/></td></tr>
<tr class="separator:a1e5b1230d0301fa6760e34d7641ca7e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac54e81f11cb53c7d68ff7dab05bd6afd"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ac54e81f11cb53c7d68ff7dab05bd6afd">pmePotentialCorrection</a> (float z2)</td></tr>
<tr class="memdesc:ac54e81f11cb53c7d68ff7dab05bd6afd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the potential correction due to PME analytically in float.  <a href="#ac54e81f11cb53c7d68ff7dab05bd6afd">More...</a><br/></td></tr>
<tr class="separator:ac54e81f11cb53c7d68ff7dab05bd6afd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6cfb56189c360e005911247ebf5fd42"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af6cfb56189c360e005911247ebf5fd42">copysign</a> (double x, double y)</td></tr>
<tr class="memdesc:af6cfb56189c360e005911247ebf5fd42"><td class="mdescLeft">&#160;</td><td class="mdescRight">Composes double value with the magnitude of x and the sign of y.  <a href="#af6cfb56189c360e005911247ebf5fd42">More...</a><br/></td></tr>
<tr class="separator:af6cfb56189c360e005911247ebf5fd42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb50fcc000a2c2d4b8446fc17a5695e0"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#abb50fcc000a2c2d4b8446fc17a5695e0">invsqrtPair</a> (double x0, double x1, double *out0, double *out1)</td></tr>
<tr class="memdesc:abb50fcc000a2c2d4b8446fc17a5695e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for two doubles.  <a href="#abb50fcc000a2c2d4b8446fc17a5695e0">More...</a><br/></td></tr>
<tr class="separator:abb50fcc000a2c2d4b8446fc17a5695e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ed9172c60ed326ca31f64a490fabe17"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a8ed9172c60ed326ca31f64a490fabe17">inv</a> (double x)</td></tr>
<tr class="memdesc:a8ed9172c60ed326ca31f64a490fabe17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/x for double.  <a href="#a8ed9172c60ed326ca31f64a490fabe17">More...</a><br/></td></tr>
<tr class="separator:a8ed9172c60ed326ca31f64a490fabe17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5b5a9766964a2b854f493fd783bb63d"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa5b5a9766964a2b854f493fd783bb63d">maskzInvsqrt</a> (double x, bool m)</td></tr>
<tr class="memdesc:aa5b5a9766964a2b854f493fd783bb63d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for masked entry of double.  <a href="#aa5b5a9766964a2b854f493fd783bb63d">More...</a><br/></td></tr>
<tr class="separator:aa5b5a9766964a2b854f493fd783bb63d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5cc89f64ab845f88816a9cbb16d467c"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af5cc89f64ab845f88816a9cbb16d467c">maskzInv</a> (double x, bool m)</td></tr>
<tr class="memdesc:af5cc89f64ab845f88816a9cbb16d467c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/x for masked entry of double.  <a href="#af5cc89f64ab845f88816a9cbb16d467c">More...</a><br/></td></tr>
<tr class="separator:af5cc89f64ab845f88816a9cbb16d467c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a398a52e25652367446f9180a50343885"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a398a52e25652367446f9180a50343885">log</a> (double x)</td></tr>
<tr class="memdesc:a398a52e25652367446f9180a50343885"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double log(x). This is the natural logarithm.  <a href="#a398a52e25652367446f9180a50343885">More...</a><br/></td></tr>
<tr class="separator:a398a52e25652367446f9180a50343885"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8793845dd7a03f8e3d00bde1b04a2785"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a8793845dd7a03f8e3d00bde1b04a2785">exp2</a> (double x)</td></tr>
<tr class="memdesc:a8793845dd7a03f8e3d00bde1b04a2785"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double 2^x.  <a href="#a8793845dd7a03f8e3d00bde1b04a2785">More...</a><br/></td></tr>
<tr class="separator:a8793845dd7a03f8e3d00bde1b04a2785"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ed21bd309bf862089f430402b8fd8b9"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2ed21bd309bf862089f430402b8fd8b9">exp</a> (double x)</td></tr>
<tr class="memdesc:a2ed21bd309bf862089f430402b8fd8b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double exp(x).  <a href="#a2ed21bd309bf862089f430402b8fd8b9">More...</a><br/></td></tr>
<tr class="separator:a2ed21bd309bf862089f430402b8fd8b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a3fe934a0b6419312a82b6bb6b8b6ff"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a6a3fe934a0b6419312a82b6bb6b8b6ff">erf</a> (double x)</td></tr>
<tr class="memdesc:a6a3fe934a0b6419312a82b6bb6b8b6ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double erf(x).  <a href="#a6a3fe934a0b6419312a82b6bb6b8b6ff">More...</a><br/></td></tr>
<tr class="separator:a6a3fe934a0b6419312a82b6bb6b8b6ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56c071a6a14720e2b94e4b034e110614"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a56c071a6a14720e2b94e4b034e110614">erfc</a> (double x)</td></tr>
<tr class="memdesc:a56c071a6a14720e2b94e4b034e110614"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double erfc(x).  <a href="#a56c071a6a14720e2b94e4b034e110614">More...</a><br/></td></tr>
<tr class="separator:a56c071a6a14720e2b94e4b034e110614"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a5923534ff59a386ae0579eb4196b1e"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0a5923534ff59a386ae0579eb4196b1e">sincos</a> (double x, double *sinval, double *cosval)</td></tr>
<tr class="memdesc:a0a5923534ff59a386ae0579eb4196b1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double sin &amp; cos.  <a href="#a0a5923534ff59a386ae0579eb4196b1e">More...</a><br/></td></tr>
<tr class="separator:a0a5923534ff59a386ae0579eb4196b1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6579216abaac018cb0bc59e9183f99ba"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a6579216abaac018cb0bc59e9183f99ba">sin</a> (double x)</td></tr>
<tr class="memdesc:a6579216abaac018cb0bc59e9183f99ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double sin.  <a href="#a6579216abaac018cb0bc59e9183f99ba">More...</a><br/></td></tr>
<tr class="separator:a6579216abaac018cb0bc59e9183f99ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeda573e9aa3efa5d223c9fe39f682cfd"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aeda573e9aa3efa5d223c9fe39f682cfd">cos</a> (double x)</td></tr>
<tr class="memdesc:aeda573e9aa3efa5d223c9fe39f682cfd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double cos.  <a href="#aeda573e9aa3efa5d223c9fe39f682cfd">More...</a><br/></td></tr>
<tr class="separator:aeda573e9aa3efa5d223c9fe39f682cfd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45e727a4960ac7f8ba5149f9b251c520"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a45e727a4960ac7f8ba5149f9b251c520">tan</a> (double x)</td></tr>
<tr class="memdesc:a45e727a4960ac7f8ba5149f9b251c520"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double tan.  <a href="#a45e727a4960ac7f8ba5149f9b251c520">More...</a><br/></td></tr>
<tr class="separator:a45e727a4960ac7f8ba5149f9b251c520"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab02c7d47595f11074fbfedff40145544"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ab02c7d47595f11074fbfedff40145544">asin</a> (double x)</td></tr>
<tr class="memdesc:ab02c7d47595f11074fbfedff40145544"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double asin.  <a href="#ab02c7d47595f11074fbfedff40145544">More...</a><br/></td></tr>
<tr class="separator:ab02c7d47595f11074fbfedff40145544"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b534003a0dba716c08d6053e0514311"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a5b534003a0dba716c08d6053e0514311">acos</a> (double x)</td></tr>
<tr class="memdesc:a5b534003a0dba716c08d6053e0514311"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double acos.  <a href="#a5b534003a0dba716c08d6053e0514311">More...</a><br/></td></tr>
<tr class="separator:a5b534003a0dba716c08d6053e0514311"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af15e6f3962e035d69013bd91621fd9f8"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af15e6f3962e035d69013bd91621fd9f8">atan</a> (double x)</td></tr>
<tr class="memdesc:af15e6f3962e035d69013bd91621fd9f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double atan.  <a href="#af15e6f3962e035d69013bd91621fd9f8">More...</a><br/></td></tr>
<tr class="separator:af15e6f3962e035d69013bd91621fd9f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa70a1aa5e9c161a2770d0f9b7eca1805"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa70a1aa5e9c161a2770d0f9b7eca1805">atan2</a> (double y, double x)</td></tr>
<tr class="memdesc:aa70a1aa5e9c161a2770d0f9b7eca1805"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double atan2(y,x).  <a href="#aa70a1aa5e9c161a2770d0f9b7eca1805">More...</a><br/></td></tr>
<tr class="separator:aa70a1aa5e9c161a2770d0f9b7eca1805"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5275f264f1c6da2502ec03e8fbf855a4"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a5275f264f1c6da2502ec03e8fbf855a4">pmeForceCorrection</a> (double z2)</td></tr>
<tr class="memdesc:a5275f264f1c6da2502ec03e8fbf855a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the force correction due to PME analytically in double.  <a href="#a5275f264f1c6da2502ec03e8fbf855a4">More...</a><br/></td></tr>
<tr class="separator:a5275f264f1c6da2502ec03e8fbf855a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acba0166c05fec69dd4a2624ed8dcff95"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#acba0166c05fec69dd4a2624ed8dcff95">pmePotentialCorrection</a> (double z2)</td></tr>
<tr class="memdesc:acba0166c05fec69dd4a2624ed8dcff95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the potential correction due to PME analytically in double.  <a href="#acba0166c05fec69dd4a2624ed8dcff95">More...</a><br/></td></tr>
<tr class="separator:acba0166c05fec69dd4a2624ed8dcff95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44adc739c8fb319abe1b6769f39e9341"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a44adc739c8fb319abe1b6769f39e9341">invsqrtSingleAccuracy</a> (double x)</td></tr>
<tr class="memdesc:a44adc739c8fb319abe1b6769f39e9341"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for double, but with single accuracy.  <a href="#a44adc739c8fb319abe1b6769f39e9341">More...</a><br/></td></tr>
<tr class="separator:a44adc739c8fb319abe1b6769f39e9341"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18f2d71567d1b88689c8498f3592b386"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a18f2d71567d1b88689c8498f3592b386">invsqrtPairSingleAccuracy</a> (double x0, double x1, double *out0, double *out1)</td></tr>
<tr class="memdesc:a18f2d71567d1b88689c8498f3592b386"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for two doubles, but with single accuracy.  <a href="#a18f2d71567d1b88689c8498f3592b386">More...</a><br/></td></tr>
<tr class="separator:a18f2d71567d1b88689c8498f3592b386"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ac51c492a5589e075b7b8ebda5a8cbd"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a8ac51c492a5589e075b7b8ebda5a8cbd">invSingleAccuracy</a> (double x)</td></tr>
<tr class="memdesc:a8ac51c492a5589e075b7b8ebda5a8cbd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/x for double, but with single accuracy.  <a href="#a8ac51c492a5589e075b7b8ebda5a8cbd">More...</a><br/></td></tr>
<tr class="separator:a8ac51c492a5589e075b7b8ebda5a8cbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fdaf91102db0bfbc6fd440524b15199"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a1fdaf91102db0bfbc6fd440524b15199">maskzInvsqrtSingleAccuracy</a> (double x, bool m)</td></tr>
<tr class="memdesc:a1fdaf91102db0bfbc6fd440524b15199"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for masked entry of double, but with single accuracy.  <a href="#a1fdaf91102db0bfbc6fd440524b15199">More...</a><br/></td></tr>
<tr class="separator:a1fdaf91102db0bfbc6fd440524b15199"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2433c82892495a73bf41de15f5e8908f"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2433c82892495a73bf41de15f5e8908f">maskzInvSingleAccuracy</a> (double x, bool m)</td></tr>
<tr class="memdesc:a2433c82892495a73bf41de15f5e8908f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/x for masked entry of double, but with single accuracy.  <a href="#a2433c82892495a73bf41de15f5e8908f">More...</a><br/></td></tr>
<tr class="separator:a2433c82892495a73bf41de15f5e8908f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d6d95fd83052d09775c976a961eee29"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2d6d95fd83052d09775c976a961eee29">sqrtSingleAccuracy</a> (double x)</td></tr>
<tr class="memdesc:a2d6d95fd83052d09775c976a961eee29"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate sqrt(x) for double, but with single accuracy.  <a href="#a2d6d95fd83052d09775c976a961eee29">More...</a><br/></td></tr>
<tr class="separator:a2d6d95fd83052d09775c976a961eee29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54c2c975d7e597b08a67d85920d4f562"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a54c2c975d7e597b08a67d85920d4f562">logSingleAccuracy</a> (double x)</td></tr>
<tr class="memdesc:a54c2c975d7e597b08a67d85920d4f562"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double log(x), but with single accuracy. This is the natural logarithm.  <a href="#a54c2c975d7e597b08a67d85920d4f562">More...</a><br/></td></tr>
<tr class="separator:a54c2c975d7e597b08a67d85920d4f562"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a119f14f4a364f71eb9273b5dd8c927cd"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a119f14f4a364f71eb9273b5dd8c927cd">exp2SingleAccuracy</a> (double x)</td></tr>
<tr class="memdesc:a119f14f4a364f71eb9273b5dd8c927cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double 2^x, but with single accuracy.  <a href="#a119f14f4a364f71eb9273b5dd8c927cd">More...</a><br/></td></tr>
<tr class="separator:a119f14f4a364f71eb9273b5dd8c927cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa6d2866bd8be11dce227ad0e26511a4"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#afa6d2866bd8be11dce227ad0e26511a4">expSingleAccuracy</a> (double x)</td></tr>
<tr class="memdesc:afa6d2866bd8be11dce227ad0e26511a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double exp(x), but with single accuracy.  <a href="#afa6d2866bd8be11dce227ad0e26511a4">More...</a><br/></td></tr>
<tr class="separator:afa6d2866bd8be11dce227ad0e26511a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2491a7f4b92881d4887491a532e8e5f7"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2491a7f4b92881d4887491a532e8e5f7">erfSingleAccuracy</a> (double x)</td></tr>
<tr class="memdesc:a2491a7f4b92881d4887491a532e8e5f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double erf(x), but with single accuracy.  <a href="#a2491a7f4b92881d4887491a532e8e5f7">More...</a><br/></td></tr>
<tr class="separator:a2491a7f4b92881d4887491a532e8e5f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56d277c19df61f3b0176da88ba40b53a"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a56d277c19df61f3b0176da88ba40b53a">erfcSingleAccuracy</a> (double x)</td></tr>
<tr class="memdesc:a56d277c19df61f3b0176da88ba40b53a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double erfc(x), but with single accuracy.  <a href="#a56d277c19df61f3b0176da88ba40b53a">More...</a><br/></td></tr>
<tr class="separator:a56d277c19df61f3b0176da88ba40b53a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a200455e2d7401d66cac8e39b4c8142bf"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a200455e2d7401d66cac8e39b4c8142bf">sincosSingleAccuracy</a> (double x, double *sinval, double *cosval)</td></tr>
<tr class="memdesc:a200455e2d7401d66cac8e39b4c8142bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double sin &amp; cos, but with single accuracy.  <a href="#a200455e2d7401d66cac8e39b4c8142bf">More...</a><br/></td></tr>
<tr class="separator:a200455e2d7401d66cac8e39b4c8142bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a810c7b2f5d8f267f421f2c59a308c11d"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a810c7b2f5d8f267f421f2c59a308c11d">sinSingleAccuracy</a> (double x)</td></tr>
<tr class="memdesc:a810c7b2f5d8f267f421f2c59a308c11d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double sin, but with single accuracy.  <a href="#a810c7b2f5d8f267f421f2c59a308c11d">More...</a><br/></td></tr>
<tr class="separator:a810c7b2f5d8f267f421f2c59a308c11d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e717707cf40d6bbacf8752cf28de422"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2e717707cf40d6bbacf8752cf28de422">cosSingleAccuracy</a> (double x)</td></tr>
<tr class="memdesc:a2e717707cf40d6bbacf8752cf28de422"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double cos, but with single accuracy.  <a href="#a2e717707cf40d6bbacf8752cf28de422">More...</a><br/></td></tr>
<tr class="separator:a2e717707cf40d6bbacf8752cf28de422"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f979f3defa4f725cfce2d7e93fc0d9e"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0f979f3defa4f725cfce2d7e93fc0d9e">tanSingleAccuracy</a> (double x)</td></tr>
<tr class="memdesc:a0f979f3defa4f725cfce2d7e93fc0d9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double tan, but with single accuracy.  <a href="#a0f979f3defa4f725cfce2d7e93fc0d9e">More...</a><br/></td></tr>
<tr class="separator:a0f979f3defa4f725cfce2d7e93fc0d9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98465e562d7b1b24755bc693db04c8f5"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a98465e562d7b1b24755bc693db04c8f5">asinSingleAccuracy</a> (double x)</td></tr>
<tr class="memdesc:a98465e562d7b1b24755bc693db04c8f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double asin, but with single accuracy.  <a href="#a98465e562d7b1b24755bc693db04c8f5">More...</a><br/></td></tr>
<tr class="separator:a98465e562d7b1b24755bc693db04c8f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72f487fc13f5bd1b83417f108a74f5a0"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a72f487fc13f5bd1b83417f108a74f5a0">acosSingleAccuracy</a> (double x)</td></tr>
<tr class="memdesc:a72f487fc13f5bd1b83417f108a74f5a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double acos, but with single accuracy.  <a href="#a72f487fc13f5bd1b83417f108a74f5a0">More...</a><br/></td></tr>
<tr class="separator:a72f487fc13f5bd1b83417f108a74f5a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44ca54cb014d2f33b98f3d523d90a2f5"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a44ca54cb014d2f33b98f3d523d90a2f5">atanSingleAccuracy</a> (double x)</td></tr>
<tr class="memdesc:a44ca54cb014d2f33b98f3d523d90a2f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double atan, but with single accuracy.  <a href="#a44ca54cb014d2f33b98f3d523d90a2f5">More...</a><br/></td></tr>
<tr class="separator:a44ca54cb014d2f33b98f3d523d90a2f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2552094c1be29e087e1e85ae02fb0c7a"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2552094c1be29e087e1e85ae02fb0c7a">atan2SingleAccuracy</a> (double y, double x)</td></tr>
<tr class="memdesc:a2552094c1be29e087e1e85ae02fb0c7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double atan2(y,x), but with single accuracy.  <a href="#a2552094c1be29e087e1e85ae02fb0c7a">More...</a><br/></td></tr>
<tr class="separator:a2552094c1be29e087e1e85ae02fb0c7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd18f07b8fd19f03f12442211982db53"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#abd18f07b8fd19f03f12442211982db53">pmeForceCorrectionSingleAccuracy</a> (double z2)</td></tr>
<tr class="memdesc:abd18f07b8fd19f03f12442211982db53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Force correction due to PME in double, but with single accuracy.  <a href="#abd18f07b8fd19f03f12442211982db53">More...</a><br/></td></tr>
<tr class="separator:abd18f07b8fd19f03f12442211982db53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8004b2507f7192ead653fcdcb6735fe"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ab8004b2507f7192ead653fcdcb6735fe">pmePotentialCorrectionSingleAccuracy</a> (double z2)</td></tr>
<tr class="memdesc:ab8004b2507f7192ead653fcdcb6735fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Potential correction due to PME in double, but with single accuracy.  <a href="#ab8004b2507f7192ead653fcdcb6735fe">More...</a><br/></td></tr>
<tr class="separator:ab8004b2507f7192ead653fcdcb6735fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba7ff3639534a22d4b9c7a834d7584fd"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:aba7ff3639534a22d4b9c7a834d7584fd"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aba7ff3639534a22d4b9c7a834d7584fd">gatherLoadTranspose</a> (const float *base, const std::int32_t offset[], float *v0, float *v1, float *v2, float *v3)</td></tr>
<tr class="memdesc:aba7ff3639534a22d4b9c7a834d7584fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 4 consecutive floats from base/offset into four variables.  <a href="#aba7ff3639534a22d4b9c7a834d7584fd">More...</a><br/></td></tr>
<tr class="separator:aba7ff3639534a22d4b9c7a834d7584fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c0cda66eba19ad12a50e48f848f268f"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:a4c0cda66eba19ad12a50e48f848f268f"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a4c0cda66eba19ad12a50e48f848f268f">gatherLoadTranspose</a> (const float *base, const std::int32_t offset[], float *v0, float *v1)</td></tr>
<tr class="memdesc:a4c0cda66eba19ad12a50e48f848f268f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 consecutive floats from base/offset into four variables.  <a href="#a4c0cda66eba19ad12a50e48f848f268f">More...</a><br/></td></tr>
<tr class="separator:a4c0cda66eba19ad12a50e48f848f268f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfefc291c66a8404f2aad767af91cb21"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:acfefc291c66a8404f2aad767af91cb21"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#acfefc291c66a8404f2aad767af91cb21">gatherLoadUTranspose</a> (const float *base, const std::int32_t offset[], float *v0, float *v1, float *v2)</td></tr>
<tr class="memdesc:acfefc291c66a8404f2aad767af91cb21"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 3 consecutive floats from base/offsets, store into three vars.  <a href="#acfefc291c66a8404f2aad767af91cb21">More...</a><br/></td></tr>
<tr class="separator:acfefc291c66a8404f2aad767af91cb21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65d8dd5e7a4ade4e3750b48e2a95b308"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:a65d8dd5e7a4ade4e3750b48e2a95b308"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a65d8dd5e7a4ade4e3750b48e2a95b308">transposeScatterStoreU</a> (float *base, const std::int32_t offset[], float v0, float v1, float v2)</td></tr>
<tr class="memdesc:a65d8dd5e7a4ade4e3750b48e2a95b308"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store 3 floats to 3 to base/offset.  <a href="#a65d8dd5e7a4ade4e3750b48e2a95b308">More...</a><br/></td></tr>
<tr class="separator:a65d8dd5e7a4ade4e3750b48e2a95b308"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12069a0402115678c9c39b303585917d"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:a12069a0402115678c9c39b303585917d"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a12069a0402115678c9c39b303585917d">transposeScatterIncrU</a> (float *base, const std::int32_t offset[], float v0, float v1, float v2)</td></tr>
<tr class="memdesc:a12069a0402115678c9c39b303585917d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add 3 floats to base/offset.  <a href="#a12069a0402115678c9c39b303585917d">More...</a><br/></td></tr>
<tr class="separator:a12069a0402115678c9c39b303585917d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7e302c7dcfb8d4937c4388d77057435"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:af7e302c7dcfb8d4937c4388d77057435"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af7e302c7dcfb8d4937c4388d77057435">transposeScatterDecrU</a> (float *base, const std::int32_t offset[], float v0, float v1, float v2)</td></tr>
<tr class="memdesc:af7e302c7dcfb8d4937c4388d77057435"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtract 3 floats from base/offset.  <a href="#af7e302c7dcfb8d4937c4388d77057435">More...</a><br/></td></tr>
<tr class="separator:af7e302c7dcfb8d4937c4388d77057435"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b19d8b9f07e36c8152b30d4b3caaad6"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a6b19d8b9f07e36c8152b30d4b3caaad6">expandScalarsToTriplets</a> (float scalar, float *triplets0, float *triplets1, float *triplets2)</td></tr>
<tr class="memdesc:a6b19d8b9f07e36c8152b30d4b3caaad6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy single float to three variables.  <a href="#a6b19d8b9f07e36c8152b30d4b3caaad6">More...</a><br/></td></tr>
<tr class="separator:a6b19d8b9f07e36c8152b30d4b3caaad6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a179f05bc9899fe2b7e71d53a1a95b629"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:a179f05bc9899fe2b7e71d53a1a95b629"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a179f05bc9899fe2b7e71d53a1a95b629">gatherLoadBySimdIntTranspose</a> (const float *base, std::int32_t offset, float *v0, float *v1, float *v2, float *v3)</td></tr>
<tr class="memdesc:a179f05bc9899fe2b7e71d53a1a95b629"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 4 floats from base/offsets and store into variables.  <a href="#a179f05bc9899fe2b7e71d53a1a95b629">More...</a><br/></td></tr>
<tr class="separator:a179f05bc9899fe2b7e71d53a1a95b629"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29c67b43b26cfba5ec360bf020df4c8a"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:a29c67b43b26cfba5ec360bf020df4c8a"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a29c67b43b26cfba5ec360bf020df4c8a">gatherLoadUBySimdIntTranspose</a> (const float *base, std::int32_t offset, float *v0, float *v1)</td></tr>
<tr class="memdesc:a29c67b43b26cfba5ec360bf020df4c8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 floats from base/offsets and store into variables (unaligned).  <a href="#a29c67b43b26cfba5ec360bf020df4c8a">More...</a><br/></td></tr>
<tr class="separator:a29c67b43b26cfba5ec360bf020df4c8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0614e0463cccdf97cec36fffb2b24764"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:a0614e0463cccdf97cec36fffb2b24764"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0614e0463cccdf97cec36fffb2b24764">gatherLoadBySimdIntTranspose</a> (const float *base, std::int32_t offset, float *v0, float *v1)</td></tr>
<tr class="memdesc:a0614e0463cccdf97cec36fffb2b24764"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 floats from base/offsets and store into variables (aligned).  <a href="#a0614e0463cccdf97cec36fffb2b24764">More...</a><br/></td></tr>
<tr class="separator:a0614e0463cccdf97cec36fffb2b24764"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6eac2eb3581affdefb5b3e79e000cf84"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a6eac2eb3581affdefb5b3e79e000cf84">reduceIncr4ReturnSum</a> (float *m, float v0, float v1, float v2, float v3)</td></tr>
<tr class="memdesc:a6eac2eb3581affdefb5b3e79e000cf84"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add each float to four consecutive memory locations, return sum.  <a href="#a6eac2eb3581affdefb5b3e79e000cf84">More...</a><br/></td></tr>
<tr class="separator:a6eac2eb3581affdefb5b3e79e000cf84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94e990607fd4d48ca160fbc380597f5a"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:a94e990607fd4d48ca160fbc380597f5a"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a94e990607fd4d48ca160fbc380597f5a">gatherLoadTranspose</a> (const double *base, const std::int32_t offset[], double *v0, double *v1, double *v2, double *v3)</td></tr>
<tr class="memdesc:a94e990607fd4d48ca160fbc380597f5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 4 consecutive doubles from base/offset into four variables.  <a href="#a94e990607fd4d48ca160fbc380597f5a">More...</a><br/></td></tr>
<tr class="separator:a94e990607fd4d48ca160fbc380597f5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c464ebd492587005bb4baefb4293072"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:a0c464ebd492587005bb4baefb4293072"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0c464ebd492587005bb4baefb4293072">gatherLoadTranspose</a> (const double *base, const std::int32_t offset[], double *v0, double *v1)</td></tr>
<tr class="memdesc:a0c464ebd492587005bb4baefb4293072"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 consecutive doubles from base/offset into four variables.  <a href="#a0c464ebd492587005bb4baefb4293072">More...</a><br/></td></tr>
<tr class="separator:a0c464ebd492587005bb4baefb4293072"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0502844193d9fcf13648a4165a67a1a3"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:a0502844193d9fcf13648a4165a67a1a3"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0502844193d9fcf13648a4165a67a1a3">gatherLoadUTranspose</a> (const double *base, const std::int32_t offset[], double *v0, double *v1, double *v2)</td></tr>
<tr class="memdesc:a0502844193d9fcf13648a4165a67a1a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 3 consecutive doubles from base/offsets, store into three vars.  <a href="#a0502844193d9fcf13648a4165a67a1a3">More...</a><br/></td></tr>
<tr class="separator:a0502844193d9fcf13648a4165a67a1a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5d74c633ff138def6fa648441c5decf"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:ab5d74c633ff138def6fa648441c5decf"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ab5d74c633ff138def6fa648441c5decf">transposeScatterStoreU</a> (double *base, const std::int32_t offset[], double v0, double v1, double v2)</td></tr>
<tr class="memdesc:ab5d74c633ff138def6fa648441c5decf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store 3 doubles to 3 to base/offset.  <a href="#ab5d74c633ff138def6fa648441c5decf">More...</a><br/></td></tr>
<tr class="separator:ab5d74c633ff138def6fa648441c5decf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83e3f241eaafa47cfa9258ec9efec8d0"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:a83e3f241eaafa47cfa9258ec9efec8d0"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a83e3f241eaafa47cfa9258ec9efec8d0">transposeScatterIncrU</a> (double *base, const std::int32_t offset[], double v0, double v1, double v2)</td></tr>
<tr class="memdesc:a83e3f241eaafa47cfa9258ec9efec8d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add 3 doubles to base/offset.  <a href="#a83e3f241eaafa47cfa9258ec9efec8d0">More...</a><br/></td></tr>
<tr class="separator:a83e3f241eaafa47cfa9258ec9efec8d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a812731a42d1358e6a06f81848a67eeb7"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:a812731a42d1358e6a06f81848a67eeb7"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a812731a42d1358e6a06f81848a67eeb7">transposeScatterDecrU</a> (double *base, const std::int32_t offset[], double v0, double v1, double v2)</td></tr>
<tr class="memdesc:a812731a42d1358e6a06f81848a67eeb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtract 3 doubles from base/offset.  <a href="#a812731a42d1358e6a06f81848a67eeb7">More...</a><br/></td></tr>
<tr class="separator:a812731a42d1358e6a06f81848a67eeb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8a2ae7f742d7612f2808bfd39b0f975"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af8a2ae7f742d7612f2808bfd39b0f975">expandScalarsToTriplets</a> (double scalar, double *triplets0, double *triplets1, double *triplets2)</td></tr>
<tr class="memdesc:af8a2ae7f742d7612f2808bfd39b0f975"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy single double to three variables.  <a href="#af8a2ae7f742d7612f2808bfd39b0f975">More...</a><br/></td></tr>
<tr class="separator:af8a2ae7f742d7612f2808bfd39b0f975"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92c67d959864d2549a679f0f2245bacb"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:a92c67d959864d2549a679f0f2245bacb"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a92c67d959864d2549a679f0f2245bacb">gatherLoadBySimdIntTranspose</a> (const double *base, std::int32_t offset, double *v0, double *v1, double *v2, double *v3)</td></tr>
<tr class="memdesc:a92c67d959864d2549a679f0f2245bacb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 4 doubles from base/offsets and store into variables.  <a href="#a92c67d959864d2549a679f0f2245bacb">More...</a><br/></td></tr>
<tr class="separator:a92c67d959864d2549a679f0f2245bacb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af74c58ce1915c6a25061153cd3b4bde8"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:af74c58ce1915c6a25061153cd3b4bde8"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af74c58ce1915c6a25061153cd3b4bde8">gatherLoadUBySimdIntTranspose</a> (const double *base, std::int32_t offset, double *v0, double *v1)</td></tr>
<tr class="memdesc:af74c58ce1915c6a25061153cd3b4bde8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 doubles from base/offsets and store into variables (unaligned).  <a href="#af74c58ce1915c6a25061153cd3b4bde8">More...</a><br/></td></tr>
<tr class="separator:af74c58ce1915c6a25061153cd3b4bde8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bb92443ba8da5d878c1dd85b2bcde8d"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:a6bb92443ba8da5d878c1dd85b2bcde8d"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a6bb92443ba8da5d878c1dd85b2bcde8d">gatherLoadBySimdIntTranspose</a> (const double *base, std::int32_t offset, double *v0, double *v1)</td></tr>
<tr class="memdesc:a6bb92443ba8da5d878c1dd85b2bcde8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 doubles from base/offsets and store into variables (aligned).  <a href="#a6bb92443ba8da5d878c1dd85b2bcde8d">More...</a><br/></td></tr>
<tr class="separator:a6bb92443ba8da5d878c1dd85b2bcde8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7989807401d15a5d7b360b91a7dbe04"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad7989807401d15a5d7b360b91a7dbe04">reduceIncr4ReturnSum</a> (double *m, double v0, double v1, double v2, double v3)</td></tr>
<tr class="memdesc:ad7989807401d15a5d7b360b91a7dbe04"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add each double to four consecutive memory locations, return sum.  <a href="#ad7989807401d15a5d7b360b91a7dbe04">More...</a><br/></td></tr>
<tr class="separator:ad7989807401d15a5d7b360b91a7dbe04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8e9692244890665c6dc8f81fc3536f38"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga8e9692244890665c6dc8f81fc3536f38">invsqrtSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga8e9692244890665c6dc8f81fc3536f38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for SIMD float, only targeting single accuracy.  <a href="group__module__simd.xhtml#ga8e9692244890665c6dc8f81fc3536f38">More...</a><br/></td></tr>
<tr class="separator:ga8e9692244890665c6dc8f81fc3536f38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7e6086a4db51ceeeb8fe18e8884248f4"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga7e6086a4db51ceeeb8fe18e8884248f4">maskzInvsqrtSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x, <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> m)</td></tr>
<tr class="memdesc:ga7e6086a4db51ceeeb8fe18e8884248f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for masked SIMD floats, only targeting single accuracy.  <a href="group__module__simd.xhtml#ga7e6086a4db51ceeeb8fe18e8884248f4">More...</a><br/></td></tr>
<tr class="separator:ga7e6086a4db51ceeeb8fe18e8884248f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3685e3466dd242fee652e51ff27decc7"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga3685e3466dd242fee652e51ff27decc7">invsqrtPairSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x0, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x1, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *out0, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *out1)</td></tr>
<tr class="memdesc:ga3685e3466dd242fee652e51ff27decc7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for two SIMD floats, only targeting single accuracy.  <a href="group__module__simd.xhtml#ga3685e3466dd242fee652e51ff27decc7">More...</a><br/></td></tr>
<tr class="separator:ga3685e3466dd242fee652e51ff27decc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8db3b7c11cb80b5baca2cd42463e5c8e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga8db3b7c11cb80b5baca2cd42463e5c8e">invSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga8db3b7c11cb80b5baca2cd42463e5c8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/x for SIMD float, only targeting single accuracy.  <a href="group__module__simd.xhtml#ga8db3b7c11cb80b5baca2cd42463e5c8e">More...</a><br/></td></tr>
<tr class="separator:ga8db3b7c11cb80b5baca2cd42463e5c8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6704608858869fb062f53fcc40d7642"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gac6704608858869fb062f53fcc40d7642">maskzInvSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x, <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> m)</td></tr>
<tr class="memdesc:gac6704608858869fb062f53fcc40d7642"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/x for masked SIMD floats, only targeting single accuracy.  <a href="group__module__simd.xhtml#gac6704608858869fb062f53fcc40d7642">More...</a><br/></td></tr>
<tr class="separator:gac6704608858869fb062f53fcc40d7642"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga38459bf2cc4d1da4e8c391a4114af932"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga38459bf2cc4d1da4e8c391a4114af932">sqrtSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga38459bf2cc4d1da4e8c391a4114af932"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate sqrt(x) for SIMD float, only targeting single accuracy.  <a href="group__module__simd.xhtml#ga38459bf2cc4d1da4e8c391a4114af932">More...</a><br/></td></tr>
<tr class="separator:ga38459bf2cc4d1da4e8c391a4114af932"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6f81e3b80f7edc6e4f2722a6ee94a5de"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga6f81e3b80f7edc6e4f2722a6ee94a5de">logSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga6f81e3b80f7edc6e4f2722a6ee94a5de"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float log(x), only targeting single accuracy. This is the natural logarithm.  <a href="group__module__simd.xhtml#ga6f81e3b80f7edc6e4f2722a6ee94a5de">More...</a><br/></td></tr>
<tr class="separator:ga6f81e3b80f7edc6e4f2722a6ee94a5de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga09aa937158e1be4d1f62ccd9e231a1bf"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga09aa937158e1be4d1f62ccd9e231a1bf">exp2SingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga09aa937158e1be4d1f62ccd9e231a1bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float 2^x, only targeting single accuracy.  <a href="group__module__simd.xhtml#ga09aa937158e1be4d1f62ccd9e231a1bf">More...</a><br/></td></tr>
<tr class="separator:ga09aa937158e1be4d1f62ccd9e231a1bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6d1245393d4848801a19f03a6bbdb9d7"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga6d1245393d4848801a19f03a6bbdb9d7">expSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga6d1245393d4848801a19f03a6bbdb9d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float e^x, only targeting single accuracy.  <a href="group__module__simd.xhtml#ga6d1245393d4848801a19f03a6bbdb9d7">More...</a><br/></td></tr>
<tr class="separator:ga6d1245393d4848801a19f03a6bbdb9d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6b00659cd28d0255ee51fcfd9693209f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga6b00659cd28d0255ee51fcfd9693209f">erfSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga6b00659cd28d0255ee51fcfd9693209f"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float erf(x), only targeting single accuracy.  <a href="group__module__simd.xhtml#ga6b00659cd28d0255ee51fcfd9693209f">More...</a><br/></td></tr>
<tr class="separator:ga6b00659cd28d0255ee51fcfd9693209f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga606009ab68825981a67be586f77fb38e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga606009ab68825981a67be586f77fb38e">erfcSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga606009ab68825981a67be586f77fb38e"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float erfc(x), only targeting single accuracy.  <a href="group__module__simd.xhtml#ga606009ab68825981a67be586f77fb38e">More...</a><br/></td></tr>
<tr class="separator:ga606009ab68825981a67be586f77fb38e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6afcbeed45441fb9624fece5906b8a17"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga6afcbeed45441fb9624fece5906b8a17">sinCosSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *sinval, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *cosval)</td></tr>
<tr class="memdesc:ga6afcbeed45441fb9624fece5906b8a17"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float sin &amp; cos, only targeting single accuracy.  <a href="group__module__simd.xhtml#ga6afcbeed45441fb9624fece5906b8a17">More...</a><br/></td></tr>
<tr class="separator:ga6afcbeed45441fb9624fece5906b8a17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0ba00dcc0a9e1342d1af6952e0d2e1e7"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga0ba00dcc0a9e1342d1af6952e0d2e1e7">sinSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga0ba00dcc0a9e1342d1af6952e0d2e1e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float sin(x), only targeting single accuracy.  <a href="group__module__simd.xhtml#ga0ba00dcc0a9e1342d1af6952e0d2e1e7">More...</a><br/></td></tr>
<tr class="separator:ga0ba00dcc0a9e1342d1af6952e0d2e1e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa1ecd6647f33b8bd12c43a3f3de95fb3"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaa1ecd6647f33b8bd12c43a3f3de95fb3">cosSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:gaa1ecd6647f33b8bd12c43a3f3de95fb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float cos(x), only targeting single accuracy.  <a href="group__module__simd.xhtml#gaa1ecd6647f33b8bd12c43a3f3de95fb3">More...</a><br/></td></tr>
<tr class="separator:gaa1ecd6647f33b8bd12c43a3f3de95fb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6a534183c1fe54e0eccabbff0000990b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga6a534183c1fe54e0eccabbff0000990b">tanSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga6a534183c1fe54e0eccabbff0000990b"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float tan(x), only targeting single accuracy.  <a href="group__module__simd.xhtml#ga6a534183c1fe54e0eccabbff0000990b">More...</a><br/></td></tr>
<tr class="separator:ga6a534183c1fe54e0eccabbff0000990b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga50ad685f412725bacde7687e43bab092"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga50ad685f412725bacde7687e43bab092">asinSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga50ad685f412725bacde7687e43bab092"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float asin(x), only targeting single accuracy.  <a href="group__module__simd.xhtml#ga50ad685f412725bacde7687e43bab092">More...</a><br/></td></tr>
<tr class="separator:ga50ad685f412725bacde7687e43bab092"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga79f0bb956500fceaff7db7c496cb8dde"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga79f0bb956500fceaff7db7c496cb8dde">acosSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga79f0bb956500fceaff7db7c496cb8dde"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float acos(x), only targeting single accuracy.  <a href="group__module__simd.xhtml#ga79f0bb956500fceaff7db7c496cb8dde">More...</a><br/></td></tr>
<tr class="separator:ga79f0bb956500fceaff7db7c496cb8dde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga94615aced90295d0c008dbe576bfb535"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga94615aced90295d0c008dbe576bfb535">atanSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga94615aced90295d0c008dbe576bfb535"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float atan(x), only targeting single accuracy.  <a href="group__module__simd.xhtml#ga94615aced90295d0c008dbe576bfb535">More...</a><br/></td></tr>
<tr class="separator:ga94615aced90295d0c008dbe576bfb535"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga73a666e50ed9883d77a2664cd9f9768c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga73a666e50ed9883d77a2664cd9f9768c">atan2SingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> y, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga73a666e50ed9883d77a2664cd9f9768c"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float atan2(y,x), only targeting single accuracy.  <a href="group__module__simd.xhtml#ga73a666e50ed9883d77a2664cd9f9768c">More...</a><br/></td></tr>
<tr class="separator:ga73a666e50ed9883d77a2664cd9f9768c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga50c70d6df3435d9235cdf34589f9225c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga50c70d6df3435d9235cdf34589f9225c">pmeForceCorrectionSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> z2)</td></tr>
<tr class="memdesc:ga50c70d6df3435d9235cdf34589f9225c"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD Analytic PME force correction, only targeting single accuracy.  <a href="group__module__simd.xhtml#ga50c70d6df3435d9235cdf34589f9225c">More...</a><br/></td></tr>
<tr class="separator:ga50c70d6df3435d9235cdf34589f9225c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf555c7f9fb09586e8c809283b8210ed0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaf555c7f9fb09586e8c809283b8210ed0">pmePotentialCorrectionSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> z2)</td></tr>
<tr class="memdesc:gaf555c7f9fb09586e8c809283b8210ed0"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD Analytic PME potential correction, only targeting single accuracy.  <a href="group__module__simd.xhtml#gaf555c7f9fb09586e8c809283b8210ed0">More...</a><br/></td></tr>
<tr class="separator:gaf555c7f9fb09586e8c809283b8210ed0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga63a4c301efefb218bd1256e877610c1e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga63a4c301efefb218bd1256e877610c1e">invsqrtSingleAccuracy</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> x)</td></tr>
<tr class="memdesc:ga63a4c301efefb218bd1256e877610c1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for SIMD4 float, only targeting single accuracy.  <a href="group__module__simd.xhtml#ga63a4c301efefb218bd1256e877610c1e">More...</a><br/></td></tr>
<tr class="separator:ga63a4c301efefb218bd1256e877610c1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c9dbda372b70531a9c407fa8727930b"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a4c9dbda372b70531a9c407fa8727930b">simdString</a> (<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0c">SimdType</a> s)</td></tr>
<tr class="memdesc:a4c9dbda372b70531a9c407fa8727930b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a string with the name of a SIMD type.  <a href="#a4c9dbda372b70531a9c407fa8727930b">More...</a><br/></td></tr>
<tr class="separator:a4c9dbda372b70531a9c407fa8727930b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb849452876bebac9fbff66b765ad1f5"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="afb849452876bebac9fbff66b765ad1f5"></a>
<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0c">SimdType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#afb849452876bebac9fbff66b765ad1f5">simdSuggested</a> (const <a class="el" href="classgmx_1_1CpuInfo.xhtml">CpuInfo</a> &amp;c)</td></tr>
<tr class="memdesc:afb849452876bebac9fbff66b765ad1f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the SIMD type that would fit this hardware best. <br/></td></tr>
<tr class="separator:afb849452876bebac9fbff66b765ad1f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8b39eae7004973e8ecfc847934e6774"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af8b39eae7004973e8ecfc847934e6774"></a>
<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0c">SimdType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af8b39eae7004973e8ecfc847934e6774">simdCompiled</a> ()</td></tr>
<tr class="memdesc:af8b39eae7004973e8ecfc847934e6774"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the SIMD type the library was compiled with. <br/></td></tr>
<tr class="separator:af8b39eae7004973e8ecfc847934e6774"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a621eef8998b02f36f8a6352658aab7a5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a621eef8998b02f36f8a6352658aab7a5">simdCheck</a> (<a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0c">SimdType</a> s, FILE *<a class="el" href="namespacegmx.xhtml#a7b0a25f25b649f59d96b67f2d73c8ad8">log</a>, bool warnToStdErr)</td></tr>
<tr class="memdesc:a621eef8998b02f36f8a6352658aab7a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if binary was compiled with the provided SIMD type.  <a href="#a621eef8998b02f36f8a6352658aab7a5">More...</a><br/></td></tr>
<tr class="separator:a621eef8998b02f36f8a6352658aab7a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0087673fec98bdc89b553f7f349e22d2"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga0087673fec98bdc89b553f7f349e22d2">iprod</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> ax, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> ay, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> az, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> bx, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> by, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> bz)</td></tr>
<tr class="memdesc:ga0087673fec98bdc89b553f7f349e22d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float inner product of multiple float vectors.  <a href="group__module__simd.xhtml#ga0087673fec98bdc89b553f7f349e22d2">More...</a><br/></td></tr>
<tr class="separator:ga0087673fec98bdc89b553f7f349e22d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga86f01f74a7ab4156ec123146fd0b7de7"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga86f01f74a7ab4156ec123146fd0b7de7">norm2</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> ax, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> ay, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> az)</td></tr>
<tr class="memdesc:ga86f01f74a7ab4156ec123146fd0b7de7"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float norm squared of multiple vectors.  <a href="group__module__simd.xhtml#ga86f01f74a7ab4156ec123146fd0b7de7">More...</a><br/></td></tr>
<tr class="separator:ga86f01f74a7ab4156ec123146fd0b7de7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga54124af0ff118d3f171b0eef07105c76"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga54124af0ff118d3f171b0eef07105c76">cprod</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> ax, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> ay, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> az, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> bx, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> by, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> bz, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *cx, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *cy, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *cz)</td></tr>
<tr class="memdesc:ga54124af0ff118d3f171b0eef07105c76"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float cross-product of multiple vectors.  <a href="group__module__simd.xhtml#ga54124af0ff118d3f171b0eef07105c76">More...</a><br/></td></tr>
<tr class="separator:ga54124af0ff118d3f171b0eef07105c76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacc26031cf2fbf6cb1cee4e38d4cf6e3b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gacc26031cf2fbf6cb1cee4e38d4cf6e3b">iprod</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> ax, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> ay, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> az, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> bx, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> by, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> bz)</td></tr>
<tr class="memdesc:gacc26031cf2fbf6cb1cee4e38d4cf6e3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double inner product of multiple double vectors.  <a href="group__module__simd.xhtml#gacc26031cf2fbf6cb1cee4e38d4cf6e3b">More...</a><br/></td></tr>
<tr class="separator:gacc26031cf2fbf6cb1cee4e38d4cf6e3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga689e3ff037f04bcf9d3c3bfc896d50f6"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga689e3ff037f04bcf9d3c3bfc896d50f6">norm2</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> ax, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> ay, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> az)</td></tr>
<tr class="memdesc:ga689e3ff037f04bcf9d3c3bfc896d50f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double norm squared of multiple vectors.  <a href="group__module__simd.xhtml#ga689e3ff037f04bcf9d3c3bfc896d50f6">More...</a><br/></td></tr>
<tr class="separator:ga689e3ff037f04bcf9d3c3bfc896d50f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5bda1e7f61ac88be5176195e3676a6d4"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga5bda1e7f61ac88be5176195e3676a6d4">cprod</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> ax, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> ay, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> az, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> bx, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> by, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> bz, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *cx, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *cy, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *cz)</td></tr>
<tr class="memdesc:ga5bda1e7f61ac88be5176195e3676a6d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double cross-product of multiple vectors.  <a href="group__module__simd.xhtml#ga5bda1e7f61ac88be5176195e3676a6d4">More...</a><br/></td></tr>
<tr class="separator:ga5bda1e7f61ac88be5176195e3676a6d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5aaaf08ce309b237501775f56590ee53"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga5aaaf08ce309b237501775f56590ee53">norm2</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> ax, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> ay, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> az)</td></tr>
<tr class="memdesc:ga5aaaf08ce309b237501775f56590ee53"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 float norm squared of multiple vectors.  <a href="group__module__simd.xhtml#ga5aaaf08ce309b237501775f56590ee53">More...</a><br/></td></tr>
<tr class="separator:ga5aaaf08ce309b237501775f56590ee53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae78d49a68930c6290f4fadd7f02b77e4"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gae78d49a68930c6290f4fadd7f02b77e4">norm2</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> ax, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> ay, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> az)</td></tr>
<tr class="memdesc:gae78d49a68930c6290f4fadd7f02b77e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 double norm squared of multiple vectors.  <a href="group__module__simd.xhtml#gae78d49a68930c6290f4fadd7f02b77e4">More...</a><br/></td></tr>
<tr class="separator:gae78d49a68930c6290f4fadd7f02b77e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7a18c2c956e97306dcac66b006c34435"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga7a18c2c956e97306dcac66b006c34435">registerTrajectoryAnalysisModules</a> (<a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml">CommandLineModuleManager</a> *manager)</td></tr>
<tr class="memdesc:ga7a18c2c956e97306dcac66b006c34435"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registers all trajectory analysis command-line modules.  <a href="group__module__trajectoryanalysis.xhtml#ga7a18c2c956e97306dcac66b006c34435">More...</a><br/></td></tr>
<tr class="separator:ga7a18c2c956e97306dcac66b006c34435"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6f21654b9945d04d277523f6c8ab1d11"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga6f21654b9945d04d277523f6c8ab1d11"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga6f21654b9945d04d277523f6c8ab1d11">swap</a> (<a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; T &gt; &amp;a, <a class="el" href="classgmx_1_1ArrayRef.xhtml">ArrayRef</a>&lt; T &gt; &amp;b)</td></tr>
<tr class="memdesc:ga6f21654b9945d04d277523f6c8ab1d11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple swap method for <a class="el" href="classgmx_1_1ArrayRef.xhtml" title="STL-like container for an interface to a C array (or part of a std::vector). ">ArrayRef</a> objects.  <a href="group__module__utility.xhtml#ga6f21654b9945d04d277523f6c8ab1d11">More...</a><br/></td></tr>
<tr class="separator:ga6f21654b9945d04d277523f6c8ab1d11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3faec92610cb1ba29dfdf35a05e794cd"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga3faec92610cb1ba29dfdf35a05e794cd"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga3faec92610cb1ba29dfdf35a05e794cd">swap</a> (<a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt; T &gt; &amp;a, <a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt; T &gt; &amp;b)</td></tr>
<tr class="memdesc:ga3faec92610cb1ba29dfdf35a05e794cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple swap method for <a class="el" href="classgmx_1_1ConstArrayRef.xhtml" title="STL-like container for non-mutable interface to a C array (or part of a std::vector). ">ConstArrayRef</a> objects.  <a href="group__module__utility.xhtml#ga3faec92610cb1ba29dfdf35a05e794cd">More...</a><br/></td></tr>
<tr class="separator:ga3faec92610cb1ba29dfdf35a05e794cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff67fcd64bdaa64a3823cc1a322a6783"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aff67fcd64bdaa64a3823cc1a322a6783">printBinaryInformation</a> (FILE *fp, const <a class="el" href="classgmx_1_1IProgramContext.xhtml">IProgramContext</a> &amp;programContext)</td></tr>
<tr class="memdesc:aff67fcd64bdaa64a3823cc1a322a6783"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print basic information about the executable.  <a href="#aff67fcd64bdaa64a3823cc1a322a6783">More...</a><br/></td></tr>
<tr class="separator:aff67fcd64bdaa64a3823cc1a322a6783"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0c6bc3dc4ee812f31a6076c7d4f42a9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad0c6bc3dc4ee812f31a6076c7d4f42a9">printBinaryInformation</a> (FILE *fp, const <a class="el" href="classgmx_1_1IProgramContext.xhtml">IProgramContext</a> &amp;programContext, const <a class="el" href="classgmx_1_1BinaryInformationSettings.xhtml">BinaryInformationSettings</a> &amp;settings)</td></tr>
<tr class="memdesc:ad0c6bc3dc4ee812f31a6076c7d4f42a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print basic information about the executable with custom settings.  <a href="#ad0c6bc3dc4ee812f31a6076c7d4f42a9">More...</a><br/></td></tr>
<tr class="separator:ad0c6bc3dc4ee812f31a6076c7d4f42a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0211f291fe376a0bcf8f12e382620495"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0211f291fe376a0bcf8f12e382620495"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0211f291fe376a0bcf8f12e382620495">bromacs</a> ()</td></tr>
<tr class="memdesc:a0211f291fe376a0bcf8f12e382620495"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a cool definition for the acronym GROMACS. <br/></td></tr>
<tr class="separator:a0211f291fe376a0bcf8f12e382620495"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a579db3d112ccecde57a054f288216c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7a579db3d112ccecde57a054f288216c"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a7a579db3d112ccecde57a054f288216c">getCoolQuote</a> ()</td></tr>
<tr class="memdesc:a7a579db3d112ccecde57a054f288216c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a string with a cool quote. <br/></td></tr>
<tr class="separator:a7a579db3d112ccecde57a054f288216c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaac30db5a87fa0f55776bc8a3dcef0d67"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaac30db5a87fa0f55776bc8a3dcef0d67">getErrorCodeString</a> (int errorcode)</td></tr>
<tr class="memdesc:gaac30db5a87fa0f55776bc8a3dcef0d67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a short string description of an error code.  <a href="group__module__utility.xhtml#gaac30db5a87fa0f55776bc8a3dcef0d67">More...</a><br/></td></tr>
<tr class="separator:gaac30db5a87fa0f55776bc8a3dcef0d67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6287dc8a550a2d54429e44994e00e58"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gac6287dc8a550a2d54429e44994e00e58">printFatalErrorMessage</a> (FILE *fp, const std::exception &amp;ex)</td></tr>
<tr class="memdesc:gac6287dc8a550a2d54429e44994e00e58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats a standard fatal error message for reporting an exception.  <a href="group__module__utility.xhtml#gac6287dc8a550a2d54429e44994e00e58">More...</a><br/></td></tr>
<tr class="separator:gac6287dc8a550a2d54429e44994e00e58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac7703ad35b606758d2d12edc0a3d5217"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gac7703ad35b606758d2d12edc0a3d5217">formatExceptionMessageToString</a> (const std::exception &amp;ex)</td></tr>
<tr class="memdesc:gac7703ad35b606758d2d12edc0a3d5217"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats an error message for reporting an exception.  <a href="group__module__utility.xhtml#gac7703ad35b606758d2d12edc0a3d5217">More...</a><br/></td></tr>
<tr class="separator:gac7703ad35b606758d2d12edc0a3d5217"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac5e6f6ec944fb2484d6f273c9a0ff495"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gac5e6f6ec944fb2484d6f273c9a0ff495">formatExceptionMessageToFile</a> (FILE *fp, const std::exception &amp;ex)</td></tr>
<tr class="memdesc:gac5e6f6ec944fb2484d6f273c9a0ff495"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats an error message for reporting an exception.  <a href="group__module__utility.xhtml#gac5e6f6ec944fb2484d6f273c9a0ff495">More...</a><br/></td></tr>
<tr class="separator:gac5e6f6ec944fb2484d6f273c9a0ff495"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaacf6bfb81220e44ed1bf73f0a44d9926"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaacf6bfb81220e44ed1bf73f0a44d9926">formatExceptionMessageToWriter</a> (<a class="el" href="classgmx_1_1TextWriter.xhtml">TextWriter</a> *writer, const std::exception &amp;ex)</td></tr>
<tr class="memdesc:gaacf6bfb81220e44ed1bf73f0a44d9926"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats an error message for reporting an exception.  <a href="group__module__utility.xhtml#gaacf6bfb81220e44ed1bf73f0a44d9926">More...</a><br/></td></tr>
<tr class="separator:gaacf6bfb81220e44ed1bf73f0a44d9926"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5a45f49e157fa8e1059d24243283e248"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga5a45f49e157fa8e1059d24243283e248">processExceptionAtExit</a> (const std::exception &amp;ex)</td></tr>
<tr class="memdesc:ga5a45f49e157fa8e1059d24243283e248"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handles an exception that is causing the program to terminate.  <a href="group__module__utility.xhtml#ga5a45f49e157fa8e1059d24243283e248">More...</a><br/></td></tr>
<tr class="separator:ga5a45f49e157fa8e1059d24243283e248"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga13076c5bb17dd3bf90f683af835b8b62"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga13076c5bb17dd3bf90f683af835b8b62">processExceptionAsFatalError</a> (const std::exception &amp;ex)</td></tr>
<tr class="memdesc:ga13076c5bb17dd3bf90f683af835b8b62"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function for terminating the program on an exception.  <a href="group__module__utility.xhtml#ga13076c5bb17dd3bf90f683af835b8b62">More...</a><br/></td></tr>
<tr class="separator:ga13076c5bb17dd3bf90f683af835b8b62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1b9a1e3988a89d1b90944c6ff6c3e794"><td class="memTemplParams" colspan="2">template&lt;class Exception , class Tag , class T &gt; </td></tr>
<tr class="memitem:ga1b9a1e3988a89d1b90944c6ff6c3e794"><td class="memTemplItemLeft" align="right" valign="top">std::enable_if<br class="typebreak"/>
&lt; std::is_base_of<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1GromacsException.xhtml">GromacsException</a>, Exception &gt;<br class="typebreak"/>
::value, const Exception &amp; &gt;<br class="typebreak"/>
::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga1b9a1e3988a89d1b90944c6ff6c3e794">operator&lt;&lt;</a> (const Exception &amp;ex, const <a class="el" href="classgmx_1_1ExceptionInfo.xhtml">ExceptionInfo</a>&lt; Tag, T &gt; &amp;item)</td></tr>
<tr class="memdesc:ga1b9a1e3988a89d1b90944c6ff6c3e794"><td class="mdescLeft">&#160;</td><td class="mdescRight">Associates extra information with an exception.  <a href="group__module__utility.xhtml#ga1b9a1e3988a89d1b90944c6ff6c3e794">More...</a><br/></td></tr>
<tr class="separator:ga1b9a1e3988a89d1b90944c6ff6c3e794"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4feb866d293acd99eeedc50da2747350"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1IFileInputRedirector.xhtml">IFileInputRedirector</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga4feb866d293acd99eeedc50da2747350">defaultFileInputRedirector</a> ()</td></tr>
<tr class="memdesc:ga4feb866d293acd99eeedc50da2747350"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns default implementation for <a class="el" href="classgmx_1_1IFileInputRedirector.xhtml" title="Allows overriding file existence checks from code that supports it. ">IFileInputRedirector</a>.  <a href="group__module__utility.xhtml#ga4feb866d293acd99eeedc50da2747350">More...</a><br/></td></tr>
<tr class="separator:ga4feb866d293acd99eeedc50da2747350"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1cf24ed90164cc80604e8be18103fe02"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1IFileOutputRedirector.xhtml">IFileOutputRedirector</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga1cf24ed90164cc80604e8be18103fe02">defaultFileOutputRedirector</a> ()</td></tr>
<tr class="memdesc:ga1cf24ed90164cc80604e8be18103fe02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns default implementation for <a class="el" href="classgmx_1_1IFileOutputRedirector.xhtml" title="Allows capturing stdout and file output from code that supports it. ">IFileOutputRedirector</a>.  <a href="group__module__utility.xhtml#ga1cf24ed90164cc80604e8be18103fe02">More...</a><br/></td></tr>
<tr class="separator:ga1cf24ed90164cc80604e8be18103fe02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga312499e4abb409ad85844d83e52d795b"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classgmx_1_1DataFileFinder.xhtml">DataFileFinder</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga312499e4abb409ad85844d83e52d795b">getLibraryFileFinder</a> ()</td></tr>
<tr class="memdesc:ga312499e4abb409ad85844d83e52d795b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets a finder for locating data files from share/top/.  <a href="group__module__utility.xhtml#ga312499e4abb409ad85844d83e52d795b">More...</a><br/></td></tr>
<tr class="separator:ga312499e4abb409ad85844d83e52d795b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a106cb113fd73e054dbb8dfa2118d7153"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a106cb113fd73e054dbb8dfa2118d7153">setLibraryFileFinder</a> (const <a class="el" href="classgmx_1_1DataFileFinder.xhtml">DataFileFinder</a> *finder)</td></tr>
<tr class="memdesc:a106cb113fd73e054dbb8dfa2118d7153"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets a finder for location data files from share/top/.  <a href="#a106cb113fd73e054dbb8dfa2118d7153">More...</a><br/></td></tr>
<tr class="separator:a106cb113fd73e054dbb8dfa2118d7153"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafa2ad45af8fbb383a015e1ed18e08fdf"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gafa2ad45af8fbb383a015e1ed18e08fdf">regexMatch</a> (const char *str, const <a class="el" href="classgmx_1_1Regex.xhtml">Regex</a> &amp;regex)</td></tr>
<tr class="memdesc:gafa2ad45af8fbb383a015e1ed18e08fdf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Matches a string with a regular expression.  <a href="group__module__utility.xhtml#gafa2ad45af8fbb383a015e1ed18e08fdf">More...</a><br/></td></tr>
<tr class="separator:gafa2ad45af8fbb383a015e1ed18e08fdf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef8f91b0f9628e42c2809d541ca8b01e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aef8f91b0f9628e42c2809d541ca8b01e">regexMatch</a> (const std::string &amp;str, const <a class="el" href="classgmx_1_1Regex.xhtml">Regex</a> &amp;regex)</td></tr>
<tr class="memdesc:aef8f91b0f9628e42c2809d541ca8b01e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Matches a string with a regular expression.  <a href="#aef8f91b0f9628e42c2809d541ca8b01e">More...</a><br/></td></tr>
<tr class="separator:aef8f91b0f9628e42c2809d541ca8b01e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae00d174a8ddd5325460d74dc663711c0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gae00d174a8ddd5325460d74dc663711c0">init</a> (int *argc, char ***argv)</td></tr>
<tr class="memdesc:gae00d174a8ddd5325460d74dc663711c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the GROMACS library.  <a href="group__module__utility.xhtml#gae00d174a8ddd5325460d74dc663711c0">More...</a><br/></td></tr>
<tr class="separator:gae00d174a8ddd5325460d74dc663711c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa0a90b2770cb4b69e16229daa271a1af"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaa0a90b2770cb4b69e16229daa271a1af">finalize</a> ()</td></tr>
<tr class="memdesc:gaa0a90b2770cb4b69e16229daa271a1af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deinitializes the GROMACS library.  <a href="group__module__utility.xhtml#gaa0a90b2770cb4b69e16229daa271a1af">More...</a><br/></td></tr>
<tr class="separator:gaa0a90b2770cb4b69e16229daa271a1af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5ac09bdfd662fa49b0426432744f57be"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classgmx_1_1IProgramContext.xhtml">IProgramContext</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga5ac09bdfd662fa49b0426432744f57be">getProgramContext</a> ()</td></tr>
<tr class="memdesc:ga5ac09bdfd662fa49b0426432744f57be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the global <a class="el" href="classgmx_1_1IProgramContext.xhtml" title="Provides context information about the program that is calling the library. ">IProgramContext</a> instance.  <a href="group__module__utility.xhtml#ga5ac09bdfd662fa49b0426432744f57be">More...</a><br/></td></tr>
<tr class="separator:ga5ac09bdfd662fa49b0426432744f57be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2cf34635c815cc712b6291c2c8da2555"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga2cf34635c815cc712b6291c2c8da2555">setProgramContext</a> (const <a class="el" href="classgmx_1_1IProgramContext.xhtml">IProgramContext</a> *context)</td></tr>
<tr class="memdesc:ga2cf34635c815cc712b6291c2c8da2555"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the global <a class="el" href="classgmx_1_1IProgramContext.xhtml" title="Provides context information about the program that is calling the library. ">IProgramContext</a> instance.  <a href="group__module__utility.xhtml#ga2cf34635c815cc712b6291c2c8da2555">More...</a><br/></td></tr>
<tr class="separator:ga2cf34635c815cc712b6291c2c8da2555"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa097a11e79b9b187cadef998470f4e54"><td class="memTemplParams" colspan="2"><a class="anchor" id="aa097a11e79b9b187cadef998470f4e54"></a>
template&lt;class T &gt; </td></tr>
<tr class="memitem:aa097a11e79b9b187cadef998470f4e54"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa097a11e79b9b187cadef998470f4e54">sfree_wrapper</a> (T *p)</td></tr>
<tr class="memdesc:aa097a11e79b9b187cadef998470f4e54"><td class="mdescLeft">&#160;</td><td class="mdescRight">sfree wrapper to be used as <a class="el" href="classgmx_1_1scoped__cptr.xhtml" title="Stripped-down version of scoped_ptr that uses sfree() or custom deleter. ">scoped_cptr</a> deleter <br/></td></tr>
<tr class="separator:aa097a11e79b9b187cadef998470f4e54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaea61e0b5bfc1f24f51a9eb5272b51603"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaea61e0b5bfc1f24f51a9eb5272b51603">countWords</a> (const char *s)</td></tr>
<tr class="memdesc:gaea61e0b5bfc1f24f51a9eb5272b51603"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns number of space-separated words in zero-terminated char ptr.  <a href="group__module__utility.xhtml#gaea61e0b5bfc1f24f51a9eb5272b51603">More...</a><br/></td></tr>
<tr class="separator:gaea61e0b5bfc1f24f51a9eb5272b51603"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae837a92609acdf559a6b8587e9233008"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gae837a92609acdf559a6b8587e9233008">countWords</a> (const std::string &amp;str)</td></tr>
<tr class="memdesc:gae837a92609acdf559a6b8587e9233008"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of space-separated words in a string object.  <a href="group__module__utility.xhtml#gae837a92609acdf559a6b8587e9233008">More...</a><br/></td></tr>
<tr class="separator:gae837a92609acdf559a6b8587e9233008"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8b22d1fd014cc09c9cf7c4c1615c0a1b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga8b22d1fd014cc09c9cf7c4c1615c0a1b">endsWith</a> (const char *str, const char *suffix)</td></tr>
<tr class="memdesc:ga8b22d1fd014cc09c9cf7c4c1615c0a1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests whether a string ends with another string.  <a href="group__module__utility.xhtml#ga8b22d1fd014cc09c9cf7c4c1615c0a1b">More...</a><br/></td></tr>
<tr class="separator:ga8b22d1fd014cc09c9cf7c4c1615c0a1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaea84ff4850c382e09a3e158939b34b3e"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaea84ff4850c382e09a3e158939b34b3e">stripSuffixIfPresent</a> (const std::string &amp;str, const char *suffix)</td></tr>
<tr class="memdesc:gaea84ff4850c382e09a3e158939b34b3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes a suffix from a string.  <a href="group__module__utility.xhtml#gaea84ff4850c382e09a3e158939b34b3e">More...</a><br/></td></tr>
<tr class="separator:gaea84ff4850c382e09a3e158939b34b3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5f31464a19604fde038dba36307ac066"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga5f31464a19604fde038dba36307ac066">stripString</a> (const std::string &amp;str)</td></tr>
<tr class="memdesc:ga5f31464a19604fde038dba36307ac066"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes leading and trailing whitespace from a string.  <a href="group__module__utility.xhtml#ga5f31464a19604fde038dba36307ac066">More...</a><br/></td></tr>
<tr class="separator:ga5f31464a19604fde038dba36307ac066"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaed06df18ca6f9fc3f42bad9ea4d7e025"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaed06df18ca6f9fc3f42bad9ea4d7e025">formatString</a> (const char *fmt,...)</td></tr>
<tr class="memdesc:gaed06df18ca6f9fc3f42bad9ea4d7e025"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats a string (snprintf() wrapper).  <a href="group__module__utility.xhtml#gaed06df18ca6f9fc3f42bad9ea4d7e025">More...</a><br/></td></tr>
<tr class="separator:gaed06df18ca6f9fc3f42bad9ea4d7e025"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga720e46b4a7625c675507adbea1df3f96"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga720e46b4a7625c675507adbea1df3f96">splitString</a> (const std::string &amp;str)</td></tr>
<tr class="memdesc:ga720e46b4a7625c675507adbea1df3f96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Splits a string to whitespace separated tokens.  <a href="group__module__utility.xhtml#ga720e46b4a7625c675507adbea1df3f96">More...</a><br/></td></tr>
<tr class="separator:ga720e46b4a7625c675507adbea1df3f96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e4d61dba5d6fb924b8888e5597d2d0f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga1e4d61dba5d6fb924b8888e5597d2d0f">replaceAll</a> (const std::string &amp;input, const char *from, const char *to)</td></tr>
<tr class="memdesc:ga1e4d61dba5d6fb924b8888e5597d2d0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace all occurrences of a string with another string.  <a href="group__module__utility.xhtml#ga1e4d61dba5d6fb924b8888e5597d2d0f">More...</a><br/></td></tr>
<tr class="separator:ga1e4d61dba5d6fb924b8888e5597d2d0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaba6fb72c71891e47fc68c36167bee72e"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaba6fb72c71891e47fc68c36167bee72e">replaceAll</a> (const std::string &amp;input, const std::string &amp;from, const std::string &amp;to)</td></tr>
<tr class="memdesc:gaba6fb72c71891e47fc68c36167bee72e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace all occurrences of a string with another string.  <a href="group__module__utility.xhtml#gaba6fb72c71891e47fc68c36167bee72e">More...</a><br/></td></tr>
<tr class="separator:gaba6fb72c71891e47fc68c36167bee72e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaacdb65ab5673b946ea9764f708a4afcc"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaacdb65ab5673b946ea9764f708a4afcc">replaceAllWords</a> (const std::string &amp;input, const char *from, const char *to)</td></tr>
<tr class="memdesc:gaacdb65ab5673b946ea9764f708a4afcc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace whole words with others.  <a href="group__module__utility.xhtml#gaacdb65ab5673b946ea9764f708a4afcc">More...</a><br/></td></tr>
<tr class="separator:gaacdb65ab5673b946ea9764f708a4afcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2df338df2e0b32b8c1fd032452409d57"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga2df338df2e0b32b8c1fd032452409d57">replaceAllWords</a> (const std::string &amp;input, const std::string &amp;from, const std::string &amp;to)</td></tr>
<tr class="memdesc:ga2df338df2e0b32b8c1fd032452409d57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace whole words with others.  <a href="group__module__utility.xhtml#ga2df338df2e0b32b8c1fd032452409d57">More...</a><br/></td></tr>
<tr class="separator:ga2df338df2e0b32b8c1fd032452409d57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f35bd1d4a654edabc2a3aaf6f6bccea"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga2f35bd1d4a654edabc2a3aaf6f6bccea">isNullOrEmpty</a> (const char *str)</td></tr>
<tr class="memdesc:ga2f35bd1d4a654edabc2a3aaf6f6bccea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests whether a string is null or empty.  <a href="group__module__utility.xhtml#ga2f35bd1d4a654edabc2a3aaf6f6bccea">More...</a><br/></td></tr>
<tr class="separator:ga2f35bd1d4a654edabc2a3aaf6f6bccea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8adb72aeb7775a649d7378c8e51321e6"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga8adb72aeb7775a649d7378c8e51321e6">startsWith</a> (const std::string &amp;str, const std::string &amp;prefix)</td></tr>
<tr class="memdesc:ga8adb72aeb7775a649d7378c8e51321e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests whether a string starts with another string.  <a href="group__module__utility.xhtml#ga8adb72aeb7775a649d7378c8e51321e6">More...</a><br/></td></tr>
<tr class="separator:ga8adb72aeb7775a649d7378c8e51321e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga87824e9b26adc46671ccffa89f3985d0"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga87824e9b26adc46671ccffa89f3985d0">startsWith</a> (const char *str, const char *prefix)</td></tr>
<tr class="memdesc:ga87824e9b26adc46671ccffa89f3985d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests whether a string starts with another string.  <a href="group__module__utility.xhtml#ga87824e9b26adc46671ccffa89f3985d0">More...</a><br/></td></tr>
<tr class="separator:ga87824e9b26adc46671ccffa89f3985d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa1e33d963e2538664428c8db95ca564e"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaa1e33d963e2538664428c8db95ca564e">endsWith</a> (const std::string &amp;str, const char *suffix)</td></tr>
<tr class="memdesc:gaa1e33d963e2538664428c8db95ca564e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests whether a string ends with another string.  <a href="group__module__utility.xhtml#gaa1e33d963e2538664428c8db95ca564e">More...</a><br/></td></tr>
<tr class="separator:gaa1e33d963e2538664428c8db95ca564e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5d6c1daa93bf46a2c397d179e007e3e8"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga5d6c1daa93bf46a2c397d179e007e3e8">contains</a> (const std::string &amp;str, const char *substr)</td></tr>
<tr class="memdesc:ga5d6c1daa93bf46a2c397d179e007e3e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests whether a string contains another as a substring.  <a href="group__module__utility.xhtml#ga5d6c1daa93bf46a2c397d179e007e3e8">More...</a><br/></td></tr>
<tr class="separator:ga5d6c1daa93bf46a2c397d179e007e3e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac0bef974d105fbfcc7e5362111eafed5"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gac0bef974d105fbfcc7e5362111eafed5">contains</a> (const std::string &amp;str, const std::string &amp;substr)</td></tr>
<tr class="memdesc:gac0bef974d105fbfcc7e5362111eafed5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests whether a string contains another as a substring.  <a href="group__module__utility.xhtml#gac0bef974d105fbfcc7e5362111eafed5">More...</a><br/></td></tr>
<tr class="separator:gac0bef974d105fbfcc7e5362111eafed5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga555d78d19565dec63c740318187b4d0d"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga555d78d19565dec63c740318187b4d0d">endsWith</a> (const std::string &amp;str, const std::string &amp;suffix)</td></tr>
<tr class="memdesc:ga555d78d19565dec63c740318187b4d0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests whether a string ends with another string.  <a href="group__module__utility.xhtml#ga555d78d19565dec63c740318187b4d0d">More...</a><br/></td></tr>
<tr class="separator:ga555d78d19565dec63c740318187b4d0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa21c247b747e12412da58cb9f6d500ef"><td class="memTemplParams" colspan="2">template&lt;typename InputIterator , typename FormatterType &gt; </td></tr>
<tr class="memitem:gaa21c247b747e12412da58cb9f6d500ef"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaa21c247b747e12412da58cb9f6d500ef">formatAndJoin</a> (InputIterator begin, InputIterator end, const char *separator, const FormatterType &amp;formatter)</td></tr>
<tr class="memdesc:gaa21c247b747e12412da58cb9f6d500ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats all the range as strings, and then joins them with a separator in between.  <a href="group__module__utility.xhtml#gaa21c247b747e12412da58cb9f6d500ef">More...</a><br/></td></tr>
<tr class="separator:gaa21c247b747e12412da58cb9f6d500ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8e151e320e4072b2cc254b653077bb68"><td class="memTemplParams" colspan="2">template&lt;typename ContainerType , typename FormatterType &gt; </td></tr>
<tr class="memitem:ga8e151e320e4072b2cc254b653077bb68"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga8e151e320e4072b2cc254b653077bb68">formatAndJoin</a> (const ContainerType &amp;container, const char *separator, const FormatterType &amp;formatter)</td></tr>
<tr class="memdesc:ga8e151e320e4072b2cc254b653077bb68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats all elements of the container as strings, and then joins them with a separator in between.  <a href="group__module__utility.xhtml#ga8e151e320e4072b2cc254b653077bb68">More...</a><br/></td></tr>
<tr class="separator:ga8e151e320e4072b2cc254b653077bb68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae0ae45171d0f46a06095bf86855a8b28"><td class="memTemplParams" colspan="2">template&lt;typename InputIterator &gt; </td></tr>
<tr class="memitem:gae0ae45171d0f46a06095bf86855a8b28"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gae0ae45171d0f46a06095bf86855a8b28">joinStrings</a> (InputIterator begin, InputIterator end, const char *separator)</td></tr>
<tr class="memdesc:gae0ae45171d0f46a06095bf86855a8b28"><td class="mdescLeft">&#160;</td><td class="mdescRight">Joins strings from a range with a separator in between.  <a href="group__module__utility.xhtml#gae0ae45171d0f46a06095bf86855a8b28">More...</a><br/></td></tr>
<tr class="separator:gae0ae45171d0f46a06095bf86855a8b28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7dec76a57e8089a89f9298fb2fbaf2ed"><td class="memTemplParams" colspan="2">template&lt;typename ContainerType &gt; </td></tr>
<tr class="memitem:ga7dec76a57e8089a89f9298fb2fbaf2ed"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga7dec76a57e8089a89f9298fb2fbaf2ed">joinStrings</a> (const ContainerType &amp;container, const char *separator)</td></tr>
<tr class="memdesc:ga7dec76a57e8089a89f9298fb2fbaf2ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Joins strings from a container with a separator in between.  <a href="group__module__utility.xhtml#ga7dec76a57e8089a89f9298fb2fbaf2ed">More...</a><br/></td></tr>
<tr class="separator:ga7dec76a57e8089a89f9298fb2fbaf2ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga31335553bd6174a68ad8d30c48de3df5"><td class="memTemplParams" colspan="2">template&lt;size_t count&gt; </td></tr>
<tr class="memitem:ga31335553bd6174a68ad8d30c48de3df5"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga31335553bd6174a68ad8d30c48de3df5">joinStrings</a> (const char *const (&amp;array)[count], const char *separator)</td></tr>
<tr class="memdesc:ga31335553bd6174a68ad8d30c48de3df5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Joins strings from an array with a separator in between.  <a href="group__module__utility.xhtml#ga31335553bd6174a68ad8d30c48de3df5">More...</a><br/></td></tr>
<tr class="separator:ga31335553bd6174a68ad8d30c48de3df5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3862c8128924c3311429a4dadf075ecc"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga3862c8128924c3311429a4dadf075ecc">boolToString</a> (bool value)</td></tr>
<tr class="memdesc:ga3862c8128924c3311429a4dadf075ecc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a boolean to a "true"/"false" string.  <a href="group__module__utility.xhtml#ga3862c8128924c3311429a4dadf075ecc">More...</a><br/></td></tr>
<tr class="separator:ga3862c8128924c3311429a4dadf075ecc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79ab84fc76c89c13dcc7bd753a720d90"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a79ab84fc76c89c13dcc7bd753a720d90"></a>
static <a class="el" href="namespacegmx.xhtml#a8593c4aa4e1f10f3571c8b8f2cd933a8">integrator_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a79ab84fc76c89c13dcc7bd753a720d90">my_integrator</a> (unsigned int ei)</td></tr>
<tr class="memdesc:a79ab84fc76c89c13dcc7bd753a720d90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the correct integrator function. <br/></td></tr>
<tr class="separator:a79ab84fc76c89c13dcc7bd753a720d90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a112ad714d9aa4e824fdad2c3b4ed75db"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a112ad714d9aa4e824fdad2c3b4ed75db">mdrunner</a> (gmx_hw_opt_t *hw_opt, FILE *fplog, struct t_commrec *cr, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[], const gmx_output_env_t *oenv, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bVerbose, int nstglobalcomm, ivec ddxyz, int dd_rank_order, int npme, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> rdd, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> rconstr, const char *dddlb_opt, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> dlb_scale, const char *ddcsx, const char *ddcsy, const char *ddcsz, const char *nbpu_opt, int nstlist_cmdline, gmx_int64_t nsteps_cmdline, int nstepout, int resetstep, int nmultisim, int repl_ex_nst, int repl_ex_nex, int repl_ex_seed, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> pforce, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> cpt_period, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> max_hours, int imdport, unsigned long Flags)</td></tr>
<tr class="memdesc:a112ad714d9aa4e824fdad2c3b4ed75db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Driver routine, that calls the different methods.  <a href="#a112ad714d9aa4e824fdad2c3b4ed75db">More...</a><br/></td></tr>
<tr class="separator:a112ad714d9aa4e824fdad2c3b4ed75db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Constant width-4 double precision SIMD types and instructions</div></td></tr>
<tr class="memitem:ga66ff320228b17e4c9fbbb61c7acde2eb"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga66ff320228b17e4c9fbbb61c7acde2eb">load4</a> (const double *m)</td></tr>
<tr class="memdesc:ga66ff320228b17e4c9fbbb61c7acde2eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 4 double values from aligned memory into SIMD4 variable.  <a href="group__module__simd.xhtml#ga66ff320228b17e4c9fbbb61c7acde2eb">More...</a><br/></td></tr>
<tr class="separator:ga66ff320228b17e4c9fbbb61c7acde2eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf6c0b04d40ff74a4ad39c24f9fd3da20"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaf6c0b04d40ff74a4ad39c24f9fd3da20">store4</a> (double *m, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a)</td></tr>
<tr class="memdesc:gaf6c0b04d40ff74a4ad39c24f9fd3da20"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store the contents of SIMD4 double to aligned memory m.  <a href="group__module__simd.xhtml#gaf6c0b04d40ff74a4ad39c24f9fd3da20">More...</a><br/></td></tr>
<tr class="separator:gaf6c0b04d40ff74a4ad39c24f9fd3da20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8e92b72e3e3a4f159180cf15da1889c8"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga8e92b72e3e3a4f159180cf15da1889c8">load4U</a> (const double *m)</td></tr>
<tr class="memdesc:ga8e92b72e3e3a4f159180cf15da1889c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load SIMD4 double from unaligned memory.  <a href="group__module__simd.xhtml#ga8e92b72e3e3a4f159180cf15da1889c8">More...</a><br/></td></tr>
<tr class="separator:ga8e92b72e3e3a4f159180cf15da1889c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga61ae7be76c3865fcfe038dd2457a09cd"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga61ae7be76c3865fcfe038dd2457a09cd">store4U</a> (double *m, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a)</td></tr>
<tr class="memdesc:ga61ae7be76c3865fcfe038dd2457a09cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store SIMD4 double to unaligned memory.  <a href="group__module__simd.xhtml#ga61ae7be76c3865fcfe038dd2457a09cd">More...</a><br/></td></tr>
<tr class="separator:ga61ae7be76c3865fcfe038dd2457a09cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac88aa19e4c856c2333bf814c3521c488"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gac88aa19e4c856c2333bf814c3521c488">simd4SetZeroD</a> ()</td></tr>
<tr class="memdesc:gac88aa19e4c856c2333bf814c3521c488"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set all SIMD4 double elements to 0.  <a href="group__module__simd.xhtml#gac88aa19e4c856c2333bf814c3521c488">More...</a><br/></td></tr>
<tr class="separator:gac88aa19e4c856c2333bf814c3521c488"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0d555bbdc50b7b523ef3f0e6383808ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga0d555bbdc50b7b523ef3f0e6383808ef">operator&amp;</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b)</td></tr>
<tr class="memdesc:ga0d555bbdc50b7b523ef3f0e6383808ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise and for two SIMD4 double variables.  <a href="group__module__simd.xhtml#ga0d555bbdc50b7b523ef3f0e6383808ef">More...</a><br/></td></tr>
<tr class="separator:ga0d555bbdc50b7b523ef3f0e6383808ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga847080625fcb1aff7a1db138afd57222"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga847080625fcb1aff7a1db138afd57222">andNot</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b)</td></tr>
<tr class="memdesc:ga847080625fcb1aff7a1db138afd57222"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise andnot for two SIMD4 double variables. c=(~a) &amp; b.  <a href="group__module__simd.xhtml#ga847080625fcb1aff7a1db138afd57222">More...</a><br/></td></tr>
<tr class="separator:ga847080625fcb1aff7a1db138afd57222"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabcaa9a287c021ad7e3507311ffe23497"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gabcaa9a287c021ad7e3507311ffe23497">operator|</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b)</td></tr>
<tr class="memdesc:gabcaa9a287c021ad7e3507311ffe23497"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise or for two SIMD4 doubles.  <a href="group__module__simd.xhtml#gabcaa9a287c021ad7e3507311ffe23497">More...</a><br/></td></tr>
<tr class="separator:gabcaa9a287c021ad7e3507311ffe23497"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaad7bb7baf5edd91a8707584c9cdc086e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaad7bb7baf5edd91a8707584c9cdc086e">operator^</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b)</td></tr>
<tr class="memdesc:gaad7bb7baf5edd91a8707584c9cdc086e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise xor for two SIMD4 double variables.  <a href="group__module__simd.xhtml#gaad7bb7baf5edd91a8707584c9cdc086e">More...</a><br/></td></tr>
<tr class="separator:gaad7bb7baf5edd91a8707584c9cdc086e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga07f6ab30b594fa03c4975bed7bffab81"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga07f6ab30b594fa03c4975bed7bffab81">operator+</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b)</td></tr>
<tr class="memdesc:ga07f6ab30b594fa03c4975bed7bffab81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add two double SIMD4 variables.  <a href="group__module__simd.xhtml#ga07f6ab30b594fa03c4975bed7bffab81">More...</a><br/></td></tr>
<tr class="separator:ga07f6ab30b594fa03c4975bed7bffab81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab08e1e219e78b06a60cc995ae663dbab"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gab08e1e219e78b06a60cc995ae663dbab">operator-</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b)</td></tr>
<tr class="memdesc:gab08e1e219e78b06a60cc995ae663dbab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtract two SIMD4 variables.  <a href="group__module__simd.xhtml#gab08e1e219e78b06a60cc995ae663dbab">More...</a><br/></td></tr>
<tr class="separator:gab08e1e219e78b06a60cc995ae663dbab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4b75b800db84a744c11534a41f3c08c6"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga4b75b800db84a744c11534a41f3c08c6">operator-</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a)</td></tr>
<tr class="memdesc:ga4b75b800db84a744c11534a41f3c08c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 floating-point negate.  <a href="group__module__simd.xhtml#ga4b75b800db84a744c11534a41f3c08c6">More...</a><br/></td></tr>
<tr class="separator:ga4b75b800db84a744c11534a41f3c08c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga59d8295d88c9f60db412cb53eb47b768"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga59d8295d88c9f60db412cb53eb47b768">operator*</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b)</td></tr>
<tr class="memdesc:ga59d8295d88c9f60db412cb53eb47b768"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply two SIMD4 variables.  <a href="group__module__simd.xhtml#ga59d8295d88c9f60db412cb53eb47b768">More...</a><br/></td></tr>
<tr class="separator:ga59d8295d88c9f60db412cb53eb47b768"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga68d608d0650ac219cb4c0d3034ee855f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga68d608d0650ac219cb4c0d3034ee855f">fma</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> c)</td></tr>
<tr class="memdesc:ga68d608d0650ac219cb4c0d3034ee855f"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 Fused-multiply-add. Result is a*b+c.  <a href="group__module__simd.xhtml#ga68d608d0650ac219cb4c0d3034ee855f">More...</a><br/></td></tr>
<tr class="separator:ga68d608d0650ac219cb4c0d3034ee855f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga78a3204bd78e9122ba1998e985d1a5bd"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga78a3204bd78e9122ba1998e985d1a5bd">fms</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> c)</td></tr>
<tr class="memdesc:ga78a3204bd78e9122ba1998e985d1a5bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 Fused-multiply-subtract. Result is a*b-c.  <a href="group__module__simd.xhtml#ga78a3204bd78e9122ba1998e985d1a5bd">More...</a><br/></td></tr>
<tr class="separator:ga78a3204bd78e9122ba1998e985d1a5bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae9ec59669729860c9efd1b9c70f3911b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gae9ec59669729860c9efd1b9c70f3911b">fnma</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> c)</td></tr>
<tr class="memdesc:gae9ec59669729860c9efd1b9c70f3911b"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 Fused-negated-multiply-add. Result is -a*b+c.  <a href="group__module__simd.xhtml#gae9ec59669729860c9efd1b9c70f3911b">More...</a><br/></td></tr>
<tr class="separator:gae9ec59669729860c9efd1b9c70f3911b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac7afe2f2f840c1de18cb7c61917ba11c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gac7afe2f2f840c1de18cb7c61917ba11c">fnms</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> c)</td></tr>
<tr class="memdesc:gac7afe2f2f840c1de18cb7c61917ba11c"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 Fused-negated-multiply-subtract. Result is -a*b-c.  <a href="group__module__simd.xhtml#gac7afe2f2f840c1de18cb7c61917ba11c">More...</a><br/></td></tr>
<tr class="separator:gac7afe2f2f840c1de18cb7c61917ba11c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga535ead71c3aeb4caaae55d6aefc78799"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga535ead71c3aeb4caaae55d6aefc78799">rsqrt</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> x)</td></tr>
<tr class="memdesc:ga535ead71c3aeb4caaae55d6aefc78799"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 1.0/sqrt(x) lookup.  <a href="group__module__simd.xhtml#ga535ead71c3aeb4caaae55d6aefc78799">More...</a><br/></td></tr>
<tr class="separator:ga535ead71c3aeb4caaae55d6aefc78799"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9339c53d13a59e946834c14d565f1e18"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga9339c53d13a59e946834c14d565f1e18">abs</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a)</td></tr>
<tr class="memdesc:ga9339c53d13a59e946834c14d565f1e18"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 Floating-point <a class="el" href="group__module__simd.xhtml#ga9339c53d13a59e946834c14d565f1e18" title="SIMD4 Floating-point abs(). ">abs()</a>.  <a href="group__module__simd.xhtml#ga9339c53d13a59e946834c14d565f1e18">More...</a><br/></td></tr>
<tr class="separator:ga9339c53d13a59e946834c14d565f1e18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga68bbfb58d0ab7d2362d0efde15c14ca3"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga68bbfb58d0ab7d2362d0efde15c14ca3">max</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b)</td></tr>
<tr class="memdesc:ga68bbfb58d0ab7d2362d0efde15c14ca3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set each SIMD4 element to the largest from two variables.  <a href="group__module__simd.xhtml#ga68bbfb58d0ab7d2362d0efde15c14ca3">More...</a><br/></td></tr>
<tr class="separator:ga68bbfb58d0ab7d2362d0efde15c14ca3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacf515651ecc6efcf3ec65a8ff488ea02"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gacf515651ecc6efcf3ec65a8ff488ea02">min</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b)</td></tr>
<tr class="memdesc:gacf515651ecc6efcf3ec65a8ff488ea02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set each SIMD4 element to the largest from two variables.  <a href="group__module__simd.xhtml#gacf515651ecc6efcf3ec65a8ff488ea02">More...</a><br/></td></tr>
<tr class="separator:gacf515651ecc6efcf3ec65a8ff488ea02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3b425556720d8ff72c1998c86c777e75"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga3b425556720d8ff72c1998c86c777e75">round</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a)</td></tr>
<tr class="memdesc:ga3b425556720d8ff72c1998c86c777e75"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 Round to nearest integer value (in floating-point format).  <a href="group__module__simd.xhtml#ga3b425556720d8ff72c1998c86c777e75">More...</a><br/></td></tr>
<tr class="separator:ga3b425556720d8ff72c1998c86c777e75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4383bb9ab1055fc9888e65655db350ba"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga4383bb9ab1055fc9888e65655db350ba">trunc</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a)</td></tr>
<tr class="memdesc:ga4383bb9ab1055fc9888e65655db350ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate SIMD4, i.e. round towards zero - common hardware instruction.  <a href="group__module__simd.xhtml#ga4383bb9ab1055fc9888e65655db350ba">More...</a><br/></td></tr>
<tr class="separator:ga4383bb9ab1055fc9888e65655db350ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga48eb5014bfc9c6c43e9e21bf8c87ecc4"><td class="memItemLeft" align="right" valign="top">static double gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga48eb5014bfc9c6c43e9e21bf8c87ecc4">dotProduct</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b)</td></tr>
<tr class="memdesc:ga48eb5014bfc9c6c43e9e21bf8c87ecc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return dot product of two double precision SIMD4 variables.  <a href="group__module__simd.xhtml#ga48eb5014bfc9c6c43e9e21bf8c87ecc4">More...</a><br/></td></tr>
<tr class="separator:ga48eb5014bfc9c6c43e9e21bf8c87ecc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf7a690a2d884f1210349194e3c07a5a3"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaf7a690a2d884f1210349194e3c07a5a3">transpose</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> *v0, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> *v1, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> *v2, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> *v3)</td></tr>
<tr class="memdesc:gaf7a690a2d884f1210349194e3c07a5a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 double transpose.  <a href="group__module__simd.xhtml#gaf7a690a2d884f1210349194e3c07a5a3">More...</a><br/></td></tr>
<tr class="separator:gaf7a690a2d884f1210349194e3c07a5a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga905fa4e11c1b9d4628ea5bdeeed3ca77"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4DBool.xhtml">Simd4DBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga905fa4e11c1b9d4628ea5bdeeed3ca77">operator==</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b)</td></tr>
<tr class="memdesc:ga905fa4e11c1b9d4628ea5bdeeed3ca77"><td class="mdescLeft">&#160;</td><td class="mdescRight">a==b for SIMD4 double  <a href="group__module__simd.xhtml#ga905fa4e11c1b9d4628ea5bdeeed3ca77">More...</a><br/></td></tr>
<tr class="separator:ga905fa4e11c1b9d4628ea5bdeeed3ca77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga55e1d875f190a65651a57df761799027"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4DBool.xhtml">Simd4DBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga55e1d875f190a65651a57df761799027">operator!=</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b)</td></tr>
<tr class="memdesc:ga55e1d875f190a65651a57df761799027"><td class="mdescLeft">&#160;</td><td class="mdescRight">a!=b for SIMD4 double  <a href="group__module__simd.xhtml#ga55e1d875f190a65651a57df761799027">More...</a><br/></td></tr>
<tr class="separator:ga55e1d875f190a65651a57df761799027"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga161caa368bcf9f1d566b6bbb81b23a5f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4DBool.xhtml">Simd4DBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga161caa368bcf9f1d566b6bbb81b23a5f">operator&lt;</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b)</td></tr>
<tr class="memdesc:ga161caa368bcf9f1d566b6bbb81b23a5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">a&lt;b for SIMD4 double  <a href="group__module__simd.xhtml#ga161caa368bcf9f1d566b6bbb81b23a5f">More...</a><br/></td></tr>
<tr class="separator:ga161caa368bcf9f1d566b6bbb81b23a5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga65c76bc6290f217b5fce5d5538c5f342"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4DBool.xhtml">Simd4DBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga65c76bc6290f217b5fce5d5538c5f342">operator&lt;=</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b)</td></tr>
<tr class="memdesc:ga65c76bc6290f217b5fce5d5538c5f342"><td class="mdescLeft">&#160;</td><td class="mdescRight">a&lt;=b for SIMD4 double.  <a href="group__module__simd.xhtml#ga65c76bc6290f217b5fce5d5538c5f342">More...</a><br/></td></tr>
<tr class="separator:ga65c76bc6290f217b5fce5d5538c5f342"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaacd2b1a31c667bffa467f02e57b191e5"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4DBool.xhtml">Simd4DBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaacd2b1a31c667bffa467f02e57b191e5">operator&amp;&amp;</a> (<a class="el" href="classgmx_1_1Simd4DBool.xhtml">Simd4DBool</a> a, <a class="el" href="classgmx_1_1Simd4DBool.xhtml">Simd4DBool</a> b)</td></tr>
<tr class="memdesc:gaacd2b1a31c667bffa467f02e57b191e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical <em>and</em> on single precision SIMD4 booleans.  <a href="group__module__simd.xhtml#gaacd2b1a31c667bffa467f02e57b191e5">More...</a><br/></td></tr>
<tr class="separator:gaacd2b1a31c667bffa467f02e57b191e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5d5483d15fe15e3c3eaf1e4e90e53f90"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4DBool.xhtml">Simd4DBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga5d5483d15fe15e3c3eaf1e4e90e53f90">operator||</a> (<a class="el" href="classgmx_1_1Simd4DBool.xhtml">Simd4DBool</a> a, <a class="el" href="classgmx_1_1Simd4DBool.xhtml">Simd4DBool</a> b)</td></tr>
<tr class="memdesc:ga5d5483d15fe15e3c3eaf1e4e90e53f90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical <em>or</em> on single precision SIMD4 booleans.  <a href="group__module__simd.xhtml#ga5d5483d15fe15e3c3eaf1e4e90e53f90">More...</a><br/></td></tr>
<tr class="separator:ga5d5483d15fe15e3c3eaf1e4e90e53f90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga314f00cbdc12d0615a873dff3bdd38db"><td class="memItemLeft" align="right" valign="top">static bool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga314f00cbdc12d0615a873dff3bdd38db">anyTrue</a> (<a class="el" href="classgmx_1_1Simd4DBool.xhtml">Simd4DBool</a> a)</td></tr>
<tr class="memdesc:ga314f00cbdc12d0615a873dff3bdd38db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns non-zero if any of the boolean in SIMD4 a is True, otherwise 0.  <a href="group__module__simd.xhtml#ga314f00cbdc12d0615a873dff3bdd38db">More...</a><br/></td></tr>
<tr class="separator:ga314f00cbdc12d0615a873dff3bdd38db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga223de776671702527c62b4da8f6e570a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga223de776671702527c62b4da8f6e570a">selectByMask</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4DBool.xhtml">Simd4DBool</a> mask)</td></tr>
<tr class="memdesc:ga223de776671702527c62b4da8f6e570a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from single precision SIMD4 variable where boolean is true.  <a href="group__module__simd.xhtml#ga223de776671702527c62b4da8f6e570a">More...</a><br/></td></tr>
<tr class="separator:ga223de776671702527c62b4da8f6e570a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga388cbdee2056718a2d23b3080d4c9b84"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga388cbdee2056718a2d23b3080d4c9b84">selectByNotMask</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4DBool.xhtml">Simd4DBool</a> mask)</td></tr>
<tr class="memdesc:ga388cbdee2056718a2d23b3080d4c9b84"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from single precision SIMD4 variable where boolean is false.  <a href="group__module__simd.xhtml#ga388cbdee2056718a2d23b3080d4c9b84">More...</a><br/></td></tr>
<tr class="separator:ga388cbdee2056718a2d23b3080d4c9b84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafa1d01238ab3305ab17f301f73eaeaa1"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gafa1d01238ab3305ab17f301f73eaeaa1">blend</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> b, <a class="el" href="classgmx_1_1Simd4DBool.xhtml">Simd4DBool</a> sel)</td></tr>
<tr class="memdesc:gafa1d01238ab3305ab17f301f73eaeaa1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector-blend SIMD4 selection.  <a href="group__module__simd.xhtml#gafa1d01238ab3305ab17f301f73eaeaa1">More...</a><br/></td></tr>
<tr class="separator:gafa1d01238ab3305ab17f301f73eaeaa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5ee526de5755cc7bb8d7c46c532483e4"><td class="memItemLeft" align="right" valign="top">static double gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga5ee526de5755cc7bb8d7c46c532483e4">reduce</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> a)</td></tr>
<tr class="memdesc:ga5ee526de5755cc7bb8d7c46c532483e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return sum of all elements in SIMD4 double variable.  <a href="group__module__simd.xhtml#ga5ee526de5755cc7bb8d7c46c532483e4">More...</a><br/></td></tr>
<tr class="separator:ga5ee526de5755cc7bb8d7c46c532483e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Constant width-4 single precision SIMD types and instructions</div></td></tr>
<tr class="memitem:ga0c25c98d5fca0e4c2294d775f75949f4"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga0c25c98d5fca0e4c2294d775f75949f4">load4</a> (const float *m)</td></tr>
<tr class="memdesc:ga0c25c98d5fca0e4c2294d775f75949f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 4 float values from aligned memory into SIMD4 variable.  <a href="group__module__simd.xhtml#ga0c25c98d5fca0e4c2294d775f75949f4">More...</a><br/></td></tr>
<tr class="separator:ga0c25c98d5fca0e4c2294d775f75949f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafc95fcf592b08dfca9aabc44cf994ece"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gafc95fcf592b08dfca9aabc44cf994ece">store4</a> (float *m, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a)</td></tr>
<tr class="memdesc:gafc95fcf592b08dfca9aabc44cf994ece"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store the contents of SIMD4 float to aligned memory m.  <a href="group__module__simd.xhtml#gafc95fcf592b08dfca9aabc44cf994ece">More...</a><br/></td></tr>
<tr class="separator:gafc95fcf592b08dfca9aabc44cf994ece"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga30c2c73886641040a0f0d5c1f16da97d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga30c2c73886641040a0f0d5c1f16da97d">load4U</a> (const float *m)</td></tr>
<tr class="memdesc:ga30c2c73886641040a0f0d5c1f16da97d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load SIMD4 float from unaligned memory.  <a href="group__module__simd.xhtml#ga30c2c73886641040a0f0d5c1f16da97d">More...</a><br/></td></tr>
<tr class="separator:ga30c2c73886641040a0f0d5c1f16da97d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8a91843f00041c799a995535a7cdc12f"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga8a91843f00041c799a995535a7cdc12f">store4U</a> (float *m, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a)</td></tr>
<tr class="memdesc:ga8a91843f00041c799a995535a7cdc12f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store SIMD4 float to unaligned memory.  <a href="group__module__simd.xhtml#ga8a91843f00041c799a995535a7cdc12f">More...</a><br/></td></tr>
<tr class="separator:ga8a91843f00041c799a995535a7cdc12f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafa583e5ea332a308e773ad9422e0d080"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gafa583e5ea332a308e773ad9422e0d080">simd4SetZeroF</a> ()</td></tr>
<tr class="memdesc:gafa583e5ea332a308e773ad9422e0d080"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set all SIMD4 float elements to 0.  <a href="group__module__simd.xhtml#gafa583e5ea332a308e773ad9422e0d080">More...</a><br/></td></tr>
<tr class="separator:gafa583e5ea332a308e773ad9422e0d080"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab1b1d6f3300a808b8b3a3b516dd39b15"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gab1b1d6f3300a808b8b3a3b516dd39b15">operator&amp;</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b)</td></tr>
<tr class="memdesc:gab1b1d6f3300a808b8b3a3b516dd39b15"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise and for two SIMD4 float variables.  <a href="group__module__simd.xhtml#gab1b1d6f3300a808b8b3a3b516dd39b15">More...</a><br/></td></tr>
<tr class="separator:gab1b1d6f3300a808b8b3a3b516dd39b15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4dfe3fded0fc0c151f918e6892603121"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga4dfe3fded0fc0c151f918e6892603121">andNot</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b)</td></tr>
<tr class="memdesc:ga4dfe3fded0fc0c151f918e6892603121"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise andnot for two SIMD4 float variables. c=(~a) &amp; b.  <a href="group__module__simd.xhtml#ga4dfe3fded0fc0c151f918e6892603121">More...</a><br/></td></tr>
<tr class="separator:ga4dfe3fded0fc0c151f918e6892603121"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad759e852213903c61d6d4b9053e794fc"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gad759e852213903c61d6d4b9053e794fc">operator|</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b)</td></tr>
<tr class="memdesc:gad759e852213903c61d6d4b9053e794fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise or for two SIMD4 floats.  <a href="group__module__simd.xhtml#gad759e852213903c61d6d4b9053e794fc">More...</a><br/></td></tr>
<tr class="separator:gad759e852213903c61d6d4b9053e794fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8385ef4b8312eff3f715d2f817604e51"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga8385ef4b8312eff3f715d2f817604e51">operator^</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b)</td></tr>
<tr class="memdesc:ga8385ef4b8312eff3f715d2f817604e51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise xor for two SIMD4 float variables.  <a href="group__module__simd.xhtml#ga8385ef4b8312eff3f715d2f817604e51">More...</a><br/></td></tr>
<tr class="separator:ga8385ef4b8312eff3f715d2f817604e51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafd943dd0c83fa26c6eb5805ad5025e17"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gafd943dd0c83fa26c6eb5805ad5025e17">operator+</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b)</td></tr>
<tr class="memdesc:gafd943dd0c83fa26c6eb5805ad5025e17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add two float SIMD4 variables.  <a href="group__module__simd.xhtml#gafd943dd0c83fa26c6eb5805ad5025e17">More...</a><br/></td></tr>
<tr class="separator:gafd943dd0c83fa26c6eb5805ad5025e17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadb00887996b2ed9e672c7b556c53cb98"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gadb00887996b2ed9e672c7b556c53cb98">operator-</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b)</td></tr>
<tr class="memdesc:gadb00887996b2ed9e672c7b556c53cb98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtract two SIMD4 variables.  <a href="group__module__simd.xhtml#gadb00887996b2ed9e672c7b556c53cb98">More...</a><br/></td></tr>
<tr class="separator:gadb00887996b2ed9e672c7b556c53cb98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaad9353fb4bd3db4bb232f65d47a6abcf"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaad9353fb4bd3db4bb232f65d47a6abcf">operator-</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a)</td></tr>
<tr class="memdesc:gaad9353fb4bd3db4bb232f65d47a6abcf"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 floating-point negate.  <a href="group__module__simd.xhtml#gaad9353fb4bd3db4bb232f65d47a6abcf">More...</a><br/></td></tr>
<tr class="separator:gaad9353fb4bd3db4bb232f65d47a6abcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga42f5e1c65d65ad34afa31b6d0e5f7c7b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga42f5e1c65d65ad34afa31b6d0e5f7c7b">operator*</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b)</td></tr>
<tr class="memdesc:ga42f5e1c65d65ad34afa31b6d0e5f7c7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply two SIMD4 variables.  <a href="group__module__simd.xhtml#ga42f5e1c65d65ad34afa31b6d0e5f7c7b">More...</a><br/></td></tr>
<tr class="separator:ga42f5e1c65d65ad34afa31b6d0e5f7c7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa2db026253ce788e7f136326089e8a77"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaa2db026253ce788e7f136326089e8a77">fma</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> c)</td></tr>
<tr class="memdesc:gaa2db026253ce788e7f136326089e8a77"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 Fused-multiply-add. Result is a*b+c.  <a href="group__module__simd.xhtml#gaa2db026253ce788e7f136326089e8a77">More...</a><br/></td></tr>
<tr class="separator:gaa2db026253ce788e7f136326089e8a77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafb3861a4cc7cae530fcf5bf83955da1b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gafb3861a4cc7cae530fcf5bf83955da1b">fms</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> c)</td></tr>
<tr class="memdesc:gafb3861a4cc7cae530fcf5bf83955da1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 Fused-multiply-subtract. Result is a*b-c.  <a href="group__module__simd.xhtml#gafb3861a4cc7cae530fcf5bf83955da1b">More...</a><br/></td></tr>
<tr class="separator:gafb3861a4cc7cae530fcf5bf83955da1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaf4df87eca51bb2f57ffe0bcb1c9de02"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaaf4df87eca51bb2f57ffe0bcb1c9de02">fnma</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> c)</td></tr>
<tr class="memdesc:gaaf4df87eca51bb2f57ffe0bcb1c9de02"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 Fused-negated-multiply-add. Result is -a*b+c.  <a href="group__module__simd.xhtml#gaaf4df87eca51bb2f57ffe0bcb1c9de02">More...</a><br/></td></tr>
<tr class="separator:gaaf4df87eca51bb2f57ffe0bcb1c9de02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gace0a9be42a2c83de88e9de207cd82e80"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gace0a9be42a2c83de88e9de207cd82e80">fnms</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> c)</td></tr>
<tr class="memdesc:gace0a9be42a2c83de88e9de207cd82e80"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 Fused-negated-multiply-subtract. Result is -a*b-c.  <a href="group__module__simd.xhtml#gace0a9be42a2c83de88e9de207cd82e80">More...</a><br/></td></tr>
<tr class="separator:gace0a9be42a2c83de88e9de207cd82e80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaae4a6def215dcf244fcba8ba06eb1f26"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaae4a6def215dcf244fcba8ba06eb1f26">rsqrt</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> x)</td></tr>
<tr class="memdesc:gaae4a6def215dcf244fcba8ba06eb1f26"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 1.0/sqrt(x) lookup.  <a href="group__module__simd.xhtml#gaae4a6def215dcf244fcba8ba06eb1f26">More...</a><br/></td></tr>
<tr class="separator:gaae4a6def215dcf244fcba8ba06eb1f26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4555c730e6119f070664703072a7235c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga4555c730e6119f070664703072a7235c">abs</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a)</td></tr>
<tr class="memdesc:ga4555c730e6119f070664703072a7235c"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 Floating-point fabs().  <a href="group__module__simd.xhtml#ga4555c730e6119f070664703072a7235c">More...</a><br/></td></tr>
<tr class="separator:ga4555c730e6119f070664703072a7235c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3c66081dde9666200461f364725a4085"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga3c66081dde9666200461f364725a4085">max</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b)</td></tr>
<tr class="memdesc:ga3c66081dde9666200461f364725a4085"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set each SIMD4 element to the largest from two variables.  <a href="group__module__simd.xhtml#ga3c66081dde9666200461f364725a4085">More...</a><br/></td></tr>
<tr class="separator:ga3c66081dde9666200461f364725a4085"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2da2e85aea6a6eef4add06627566b8ab"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga2da2e85aea6a6eef4add06627566b8ab">min</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b)</td></tr>
<tr class="memdesc:ga2da2e85aea6a6eef4add06627566b8ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set each SIMD4 element to the largest from two variables.  <a href="group__module__simd.xhtml#ga2da2e85aea6a6eef4add06627566b8ab">More...</a><br/></td></tr>
<tr class="separator:ga2da2e85aea6a6eef4add06627566b8ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacf1bf91a0d1377886282a96f558798c8"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gacf1bf91a0d1377886282a96f558798c8">round</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a)</td></tr>
<tr class="memdesc:gacf1bf91a0d1377886282a96f558798c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 Round to nearest integer value (in floating-point format).  <a href="group__module__simd.xhtml#gacf1bf91a0d1377886282a96f558798c8">More...</a><br/></td></tr>
<tr class="separator:gacf1bf91a0d1377886282a96f558798c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga97c12b8d0415b8633da6b48f437d6078"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga97c12b8d0415b8633da6b48f437d6078">trunc</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a)</td></tr>
<tr class="memdesc:ga97c12b8d0415b8633da6b48f437d6078"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate SIMD4, i.e. round towards zero - common hardware instruction.  <a href="group__module__simd.xhtml#ga97c12b8d0415b8633da6b48f437d6078">More...</a><br/></td></tr>
<tr class="separator:ga97c12b8d0415b8633da6b48f437d6078"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac0420b0ba8ce5c0bbdf94d69c67ab563"><td class="memItemLeft" align="right" valign="top">static float gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gac0420b0ba8ce5c0bbdf94d69c67ab563">dotProduct</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b)</td></tr>
<tr class="memdesc:gac0420b0ba8ce5c0bbdf94d69c67ab563"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return dot product of two single precision SIMD4 variables.  <a href="group__module__simd.xhtml#gac0420b0ba8ce5c0bbdf94d69c67ab563">More...</a><br/></td></tr>
<tr class="separator:gac0420b0ba8ce5c0bbdf94d69c67ab563"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga059f7a354565ad8c1494853ec9a00d3f"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga059f7a354565ad8c1494853ec9a00d3f">transpose</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> *v0, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> *v1, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> *v2, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> *v3)</td></tr>
<tr class="memdesc:ga059f7a354565ad8c1494853ec9a00d3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD4 float transpose.  <a href="group__module__simd.xhtml#ga059f7a354565ad8c1494853ec9a00d3f">More...</a><br/></td></tr>
<tr class="separator:ga059f7a354565ad8c1494853ec9a00d3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae817b7cf5e876f1c6357e14a4666a3c6"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gae817b7cf5e876f1c6357e14a4666a3c6">operator==</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b)</td></tr>
<tr class="memdesc:gae817b7cf5e876f1c6357e14a4666a3c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">a==b for SIMD4 float  <a href="group__module__simd.xhtml#gae817b7cf5e876f1c6357e14a4666a3c6">More...</a><br/></td></tr>
<tr class="separator:gae817b7cf5e876f1c6357e14a4666a3c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaabe89c1073d64ee649e9cd7b37c85e2e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaabe89c1073d64ee649e9cd7b37c85e2e">operator!=</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b)</td></tr>
<tr class="memdesc:gaabe89c1073d64ee649e9cd7b37c85e2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">a!=b for SIMD4 float  <a href="group__module__simd.xhtml#gaabe89c1073d64ee649e9cd7b37c85e2e">More...</a><br/></td></tr>
<tr class="separator:gaabe89c1073d64ee649e9cd7b37c85e2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf02163d0cb41985160b79503ef1d53d0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaf02163d0cb41985160b79503ef1d53d0">operator&lt;</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b)</td></tr>
<tr class="memdesc:gaf02163d0cb41985160b79503ef1d53d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">a&lt;b for SIMD4 float  <a href="group__module__simd.xhtml#gaf02163d0cb41985160b79503ef1d53d0">More...</a><br/></td></tr>
<tr class="separator:gaf02163d0cb41985160b79503ef1d53d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga46491dc3239fcdcd48c55e00184c81ec"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga46491dc3239fcdcd48c55e00184c81ec">operator&lt;=</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b)</td></tr>
<tr class="memdesc:ga46491dc3239fcdcd48c55e00184c81ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">a&lt;=b for SIMD4 float.  <a href="group__module__simd.xhtml#ga46491dc3239fcdcd48c55e00184c81ec">More...</a><br/></td></tr>
<tr class="separator:ga46491dc3239fcdcd48c55e00184c81ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab72a2c3a96ed9681d4df89e38ec1583e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gab72a2c3a96ed9681d4df89e38ec1583e">operator&amp;&amp;</a> (<a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a> a, <a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a> b)</td></tr>
<tr class="memdesc:gab72a2c3a96ed9681d4df89e38ec1583e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical <em>and</em> on single precision SIMD4 booleans.  <a href="group__module__simd.xhtml#gab72a2c3a96ed9681d4df89e38ec1583e">More...</a><br/></td></tr>
<tr class="separator:gab72a2c3a96ed9681d4df89e38ec1583e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf2ab4b4f3d3e7f6e9a012df64c1d9f3c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaf2ab4b4f3d3e7f6e9a012df64c1d9f3c">operator||</a> (<a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a> a, <a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a> b)</td></tr>
<tr class="memdesc:gaf2ab4b4f3d3e7f6e9a012df64c1d9f3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical <em>or</em> on single precision SIMD4 booleans.  <a href="group__module__simd.xhtml#gaf2ab4b4f3d3e7f6e9a012df64c1d9f3c">More...</a><br/></td></tr>
<tr class="separator:gaf2ab4b4f3d3e7f6e9a012df64c1d9f3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5b8118b5d14f17aa83d64531e7793e4e"><td class="memItemLeft" align="right" valign="top">static bool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga5b8118b5d14f17aa83d64531e7793e4e">anyTrue</a> (<a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a> a)</td></tr>
<tr class="memdesc:ga5b8118b5d14f17aa83d64531e7793e4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns non-zero if any of the boolean in SIMD4 a is True, otherwise 0.  <a href="group__module__simd.xhtml#ga5b8118b5d14f17aa83d64531e7793e4e">More...</a><br/></td></tr>
<tr class="separator:ga5b8118b5d14f17aa83d64531e7793e4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga76ed0866ac21967e0a9641acca32ab50"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga76ed0866ac21967e0a9641acca32ab50">selectByMask</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a> mask)</td></tr>
<tr class="memdesc:ga76ed0866ac21967e0a9641acca32ab50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from single precision SIMD4 variable where boolean is true.  <a href="group__module__simd.xhtml#ga76ed0866ac21967e0a9641acca32ab50">More...</a><br/></td></tr>
<tr class="separator:ga76ed0866ac21967e0a9641acca32ab50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaff9aa6673f42b4d0d4f3b154deac384"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaaff9aa6673f42b4d0d4f3b154deac384">selectByNotMask</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a> mask)</td></tr>
<tr class="memdesc:gaaff9aa6673f42b4d0d4f3b154deac384"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from single precision SIMD4 variable where boolean is false.  <a href="group__module__simd.xhtml#gaaff9aa6673f42b4d0d4f3b154deac384">More...</a><br/></td></tr>
<tr class="separator:gaaff9aa6673f42b4d0d4f3b154deac384"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9a3c7493047defc21bf934ca9fc39476"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga9a3c7493047defc21bf934ca9fc39476">blend</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> b, <a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a> sel)</td></tr>
<tr class="memdesc:ga9a3c7493047defc21bf934ca9fc39476"><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector-blend SIMD4 selection.  <a href="group__module__simd.xhtml#ga9a3c7493047defc21bf934ca9fc39476">More...</a><br/></td></tr>
<tr class="separator:ga9a3c7493047defc21bf934ca9fc39476"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga072c4a40acda5dbbd28687df84331335"><td class="memItemLeft" align="right" valign="top">static float gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga072c4a40acda5dbbd28687df84331335">reduce</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> a)</td></tr>
<tr class="memdesc:ga072c4a40acda5dbbd28687df84331335"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return sum of all elements in SIMD4 float variable.  <a href="group__module__simd.xhtml#ga072c4a40acda5dbbd28687df84331335">More...</a><br/></td></tr>
<tr class="separator:ga072c4a40acda5dbbd28687df84331335"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation load/store operations for double precision floating point</div></td></tr>
<tr class="memitem:aca6f2a60f2104d5a19d51bf16fe4ecd2"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aca6f2a60f2104d5a19d51bf16fe4ecd2">simdLoad</a> (const double *m)</td></tr>
<tr class="memdesc:aca6f2a60f2104d5a19d51bf16fe4ecd2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load <a class="el" href="group__module__simd.xhtml#ga417e9d28b6310876bb2c69eb528c0a86">GMX_SIMD_DOUBLE_WIDTH</a> numbers from aligned memory.  <a href="#aca6f2a60f2104d5a19d51bf16fe4ecd2">More...</a><br/></td></tr>
<tr class="separator:aca6f2a60f2104d5a19d51bf16fe4ecd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c1227e97a6084a280a611c2934c8ee1"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a9c1227e97a6084a280a611c2934c8ee1">store</a> (double *m, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a)</td></tr>
<tr class="memdesc:a9c1227e97a6084a280a611c2934c8ee1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store the contents of SIMD double variable to aligned memory m.  <a href="#a9c1227e97a6084a280a611c2934c8ee1">More...</a><br/></td></tr>
<tr class="separator:a9c1227e97a6084a280a611c2934c8ee1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4f7f04699111821557406cf7bfe75b9"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae4f7f04699111821557406cf7bfe75b9">simdLoadU</a> (const double *m)</td></tr>
<tr class="memdesc:ae4f7f04699111821557406cf7bfe75b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load SIMD double from unaligned memory.  <a href="#ae4f7f04699111821557406cf7bfe75b9">More...</a><br/></td></tr>
<tr class="separator:ae4f7f04699111821557406cf7bfe75b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a8c867df8fe75511871290626c367ed"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a9a8c867df8fe75511871290626c367ed">storeU</a> (double *m, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a)</td></tr>
<tr class="memdesc:a9a8c867df8fe75511871290626c367ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store SIMD double to unaligned memory.  <a href="#a9a8c867df8fe75511871290626c367ed">More...</a><br/></td></tr>
<tr class="separator:a9a8c867df8fe75511871290626c367ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09dfcfeaf5bcd29a456e658026d65c01"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a09dfcfeaf5bcd29a456e658026d65c01">setZeroD</a> ()</td></tr>
<tr class="memdesc:a09dfcfeaf5bcd29a456e658026d65c01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set all SIMD double variable elements to 0.0.  <a href="#a09dfcfeaf5bcd29a456e658026d65c01">More...</a><br/></td></tr>
<tr class="separator:a09dfcfeaf5bcd29a456e658026d65c01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation load/store operations for integers (corresponding to double)</div></td></tr>
<tr class="memitem:a0943da18bf332314bf2d524586c728e5"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0943da18bf332314bf2d524586c728e5">simdLoadDI</a> (const std::int32_t *m)</td></tr>
<tr class="memdesc:a0943da18bf332314bf2d524586c728e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load aligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdDouble.xhtml">gmx::SimdDouble</a>.  <a href="#a0943da18bf332314bf2d524586c728e5">More...</a><br/></td></tr>
<tr class="separator:a0943da18bf332314bf2d524586c728e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4aef7840d04d5d9e2fabbc44445babad"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a4aef7840d04d5d9e2fabbc44445babad">store</a> (std::int32_t *m, <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a)</td></tr>
<tr class="memdesc:a4aef7840d04d5d9e2fabbc44445babad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store aligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdDouble.xhtml">gmx::SimdDouble</a>.  <a href="#a4aef7840d04d5d9e2fabbc44445babad">More...</a><br/></td></tr>
<tr class="separator:a4aef7840d04d5d9e2fabbc44445babad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a236d2b76779fdbdf5e6e9e9c5dd00a6d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a236d2b76779fdbdf5e6e9e9c5dd00a6d">simdLoadUDI</a> (const std::int32_t *m)</td></tr>
<tr class="memdesc:a236d2b76779fdbdf5e6e9e9c5dd00a6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load unaligned integer SIMD data, width corresponds to <a class="el" href="classgmx_1_1SimdDouble.xhtml">gmx::SimdDouble</a>.  <a href="#a236d2b76779fdbdf5e6e9e9c5dd00a6d">More...</a><br/></td></tr>
<tr class="separator:a236d2b76779fdbdf5e6e9e9c5dd00a6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe60b257e28900c4cf3cc8c45a0d1d64"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#abe60b257e28900c4cf3cc8c45a0d1d64">storeU</a> (std::int32_t *m, <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a)</td></tr>
<tr class="memdesc:abe60b257e28900c4cf3cc8c45a0d1d64"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store unaligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdDouble.xhtml">gmx::SimdDouble</a>.  <a href="#abe60b257e28900c4cf3cc8c45a0d1d64">More...</a><br/></td></tr>
<tr class="separator:abe60b257e28900c4cf3cc8c45a0d1d64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b6fe2f4cd666b23f1c0e7aa8b0a31d0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a9b6fe2f4cd666b23f1c0e7aa8b0a31d0">setZeroDI</a> ()</td></tr>
<tr class="memdesc:a9b6fe2f4cd666b23f1c0e7aa8b0a31d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set all SIMD (double) integer variable elements to 0.  <a href="#a9b6fe2f4cd666b23f1c0e7aa8b0a31d0">More...</a><br/></td></tr>
<tr class="separator:a9b6fe2f4cd666b23f1c0e7aa8b0a31d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3db712af1745296d49be276840062dee"><td class="memTemplParams" colspan="2">template&lt;int index&gt; </td></tr>
<tr class="memitem:a3db712af1745296d49be276840062dee"><td class="memTemplItemLeft" align="right" valign="top">static std::int32_t gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3db712af1745296d49be276840062dee">extract</a> (<a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a)</td></tr>
<tr class="memdesc:a3db712af1745296d49be276840062dee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract element with index i from <a class="el" href="classgmx_1_1SimdDInt32.xhtml">gmx::SimdDInt32</a>.  <a href="#a3db712af1745296d49be276840062dee">More...</a><br/></td></tr>
<tr class="separator:a3db712af1745296d49be276840062dee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation double precision floating-point bitwise logical operations</div></td></tr>
<tr class="memitem:a1f1cadff23a6ebe7ef211147359a3841"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a1f1cadff23a6ebe7ef211147359a3841">operator&amp;</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b)</td></tr>
<tr class="memdesc:a1f1cadff23a6ebe7ef211147359a3841"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise and for two SIMD double variables.  <a href="#a1f1cadff23a6ebe7ef211147359a3841">More...</a><br/></td></tr>
<tr class="separator:a1f1cadff23a6ebe7ef211147359a3841"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a374d7e1788f0ec4f2c5952d8d9ebdada"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a374d7e1788f0ec4f2c5952d8d9ebdada">andNot</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b)</td></tr>
<tr class="memdesc:a374d7e1788f0ec4f2c5952d8d9ebdada"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise andnot for SIMD double.  <a href="#a374d7e1788f0ec4f2c5952d8d9ebdada">More...</a><br/></td></tr>
<tr class="separator:a374d7e1788f0ec4f2c5952d8d9ebdada"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72cbfbcd5395b355e242f2ef4284f5c5"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a72cbfbcd5395b355e242f2ef4284f5c5">operator|</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b)</td></tr>
<tr class="memdesc:a72cbfbcd5395b355e242f2ef4284f5c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise or for SIMD double.  <a href="#a72cbfbcd5395b355e242f2ef4284f5c5">More...</a><br/></td></tr>
<tr class="separator:a72cbfbcd5395b355e242f2ef4284f5c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad65f7d7aa6d2a6c4b697ac0be0f3a616"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad65f7d7aa6d2a6c4b697ac0be0f3a616">operator^</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b)</td></tr>
<tr class="memdesc:ad65f7d7aa6d2a6c4b697ac0be0f3a616"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise xor for SIMD double.  <a href="#ad65f7d7aa6d2a6c4b697ac0be0f3a616">More...</a><br/></td></tr>
<tr class="separator:ad65f7d7aa6d2a6c4b697ac0be0f3a616"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation double precision floating-point arithmetics</div></td></tr>
<tr class="memitem:a436c58e62a6941821532df1b75b4c99f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a436c58e62a6941821532df1b75b4c99f">operator+</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b)</td></tr>
<tr class="memdesc:a436c58e62a6941821532df1b75b4c99f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add two double SIMD variables.  <a href="#a436c58e62a6941821532df1b75b4c99f">More...</a><br/></td></tr>
<tr class="separator:a436c58e62a6941821532df1b75b4c99f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97d6e522f43e9b9501d4c0c6b94ca6b9"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a97d6e522f43e9b9501d4c0c6b94ca6b9">operator-</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b)</td></tr>
<tr class="memdesc:a97d6e522f43e9b9501d4c0c6b94ca6b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtract two double SIMD variables.  <a href="#a97d6e522f43e9b9501d4c0c6b94ca6b9">More...</a><br/></td></tr>
<tr class="separator:a97d6e522f43e9b9501d4c0c6b94ca6b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0b76cf454d06f1d328d25b58135b570"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa0b76cf454d06f1d328d25b58135b570">operator-</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a)</td></tr>
<tr class="memdesc:aa0b76cf454d06f1d328d25b58135b570"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double precision negate.  <a href="#aa0b76cf454d06f1d328d25b58135b570">More...</a><br/></td></tr>
<tr class="separator:aa0b76cf454d06f1d328d25b58135b570"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a520d9799e6ece1f2446a51eee48ea4"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3a520d9799e6ece1f2446a51eee48ea4">operator*</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b)</td></tr>
<tr class="memdesc:a3a520d9799e6ece1f2446a51eee48ea4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply two double SIMD variables.  <a href="#a3a520d9799e6ece1f2446a51eee48ea4">More...</a><br/></td></tr>
<tr class="separator:a3a520d9799e6ece1f2446a51eee48ea4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b86949473ebaef8ccbd4d2852947839"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3b86949473ebaef8ccbd4d2852947839">fma</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> c)</td></tr>
<tr class="memdesc:a3b86949473ebaef8ccbd4d2852947839"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double Fused-multiply-add. Result is a*b+c.  <a href="#a3b86949473ebaef8ccbd4d2852947839">More...</a><br/></td></tr>
<tr class="separator:a3b86949473ebaef8ccbd4d2852947839"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86c14cb73d3484b0a5e01e74640a4ee3"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a86c14cb73d3484b0a5e01e74640a4ee3">fms</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> c)</td></tr>
<tr class="memdesc:a86c14cb73d3484b0a5e01e74640a4ee3"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double Fused-multiply-subtract. Result is a*b-c.  <a href="#a86c14cb73d3484b0a5e01e74640a4ee3">More...</a><br/></td></tr>
<tr class="separator:a86c14cb73d3484b0a5e01e74640a4ee3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaeca5c242a059145a90dc091db78ad57"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aaeca5c242a059145a90dc091db78ad57">fnma</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> c)</td></tr>
<tr class="memdesc:aaeca5c242a059145a90dc091db78ad57"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double Fused-negated-multiply-add. Result is -a*b+c.  <a href="#aaeca5c242a059145a90dc091db78ad57">More...</a><br/></td></tr>
<tr class="separator:aaeca5c242a059145a90dc091db78ad57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44d26f7a7b8d6088d41be0b646f71543"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a44d26f7a7b8d6088d41be0b646f71543">fnms</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> c)</td></tr>
<tr class="memdesc:a44d26f7a7b8d6088d41be0b646f71543"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double Fused-negated-multiply-subtract. Result is -a*b-c.  <a href="#a44d26f7a7b8d6088d41be0b646f71543">More...</a><br/></td></tr>
<tr class="separator:a44d26f7a7b8d6088d41be0b646f71543"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add1d990b3c0c841a88ea4e4d4df90425"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#add1d990b3c0c841a88ea4e4d4df90425">rsqrt</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:add1d990b3c0c841a88ea4e4d4df90425"><td class="mdescLeft">&#160;</td><td class="mdescRight">double SIMD 1.0/sqrt(x) lookup.  <a href="#add1d990b3c0c841a88ea4e4d4df90425">More...</a><br/></td></tr>
<tr class="separator:add1d990b3c0c841a88ea4e4d4df90425"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c2c3eae5c42d898373ec6e90dd99064"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a4c2c3eae5c42d898373ec6e90dd99064">rcp</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:a4c2c3eae5c42d898373ec6e90dd99064"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double 1.0/x lookup.  <a href="#a4c2c3eae5c42d898373ec6e90dd99064">More...</a><br/></td></tr>
<tr class="separator:a4c2c3eae5c42d898373ec6e90dd99064"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adab86e04bd62248ab68039d8983a9206"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#adab86e04bd62248ab68039d8983a9206">maskAdd</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b, <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> m)</td></tr>
<tr class="memdesc:adab86e04bd62248ab68039d8983a9206"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add two double SIMD variables, masked version.  <a href="#adab86e04bd62248ab68039d8983a9206">More...</a><br/></td></tr>
<tr class="separator:adab86e04bd62248ab68039d8983a9206"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb416d879be4463f38af9b670583fd65"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#afb416d879be4463f38af9b670583fd65">maskzMul</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b, <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> m)</td></tr>
<tr class="memdesc:afb416d879be4463f38af9b670583fd65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply two double SIMD variables, masked version.  <a href="#afb416d879be4463f38af9b670583fd65">More...</a><br/></td></tr>
<tr class="separator:afb416d879be4463f38af9b670583fd65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa689a6c17b1d60d62b6fcd51daa7639"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aaa689a6c17b1d60d62b6fcd51daa7639">maskzFma</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> c, <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> m)</td></tr>
<tr class="memdesc:aaa689a6c17b1d60d62b6fcd51daa7639"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double fused multiply-add, masked version.  <a href="#aaa689a6c17b1d60d62b6fcd51daa7639">More...</a><br/></td></tr>
<tr class="separator:aaa689a6c17b1d60d62b6fcd51daa7639"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bbc24d75706e7515afc2f2071f1a469"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3bbc24d75706e7515afc2f2071f1a469">maskzRsqrt</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x, <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> m)</td></tr>
<tr class="memdesc:a3bbc24d75706e7515afc2f2071f1a469"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double 1.0/sqrt(x) lookup, masked version.  <a href="#a3bbc24d75706e7515afc2f2071f1a469">More...</a><br/></td></tr>
<tr class="separator:a3bbc24d75706e7515afc2f2071f1a469"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f425368efd0895189b0e11d4b5d4ccc"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0f425368efd0895189b0e11d4b5d4ccc">maskzRcp</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x, <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> m)</td></tr>
<tr class="memdesc:a0f425368efd0895189b0e11d4b5d4ccc"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double 1.0/x lookup, masked version.  <a href="#a0f425368efd0895189b0e11d4b5d4ccc">More...</a><br/></td></tr>
<tr class="separator:a0f425368efd0895189b0e11d4b5d4ccc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ccaa7e4df0a45208a4c316d8b71d01c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a7ccaa7e4df0a45208a4c316d8b71d01c">abs</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a)</td></tr>
<tr class="memdesc:a7ccaa7e4df0a45208a4c316d8b71d01c"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double floating-point fabs().  <a href="#a7ccaa7e4df0a45208a4c316d8b71d01c">More...</a><br/></td></tr>
<tr class="separator:a7ccaa7e4df0a45208a4c316d8b71d01c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aceb279f0a831efc0d8e6be7d96c9e6d2"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aceb279f0a831efc0d8e6be7d96c9e6d2">max</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b)</td></tr>
<tr class="memdesc:aceb279f0a831efc0d8e6be7d96c9e6d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set each SIMD double element to the largest from two variables.  <a href="#aceb279f0a831efc0d8e6be7d96c9e6d2">More...</a><br/></td></tr>
<tr class="separator:aceb279f0a831efc0d8e6be7d96c9e6d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48c0e6ede1542c0a5eee7094c56d51b2"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a48c0e6ede1542c0a5eee7094c56d51b2">min</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b)</td></tr>
<tr class="memdesc:a48c0e6ede1542c0a5eee7094c56d51b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set each SIMD double element to the smallest from two variables.  <a href="#a48c0e6ede1542c0a5eee7094c56d51b2">More...</a><br/></td></tr>
<tr class="separator:a48c0e6ede1542c0a5eee7094c56d51b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae99869398e453b11f1305a657ce8d886"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae99869398e453b11f1305a657ce8d886">round</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a)</td></tr>
<tr class="memdesc:ae99869398e453b11f1305a657ce8d886"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double round to nearest integer value (in floating-point format).  <a href="#ae99869398e453b11f1305a657ce8d886">More...</a><br/></td></tr>
<tr class="separator:ae99869398e453b11f1305a657ce8d886"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc9e911dbe1d9be0b86d8870a91b399c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#acc9e911dbe1d9be0b86d8870a91b399c">trunc</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a)</td></tr>
<tr class="memdesc:acc9e911dbe1d9be0b86d8870a91b399c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate SIMD double, i.e. round towards zero - common hardware instruction.  <a href="#acc9e911dbe1d9be0b86d8870a91b399c">More...</a><br/></td></tr>
<tr class="separator:acc9e911dbe1d9be0b86d8870a91b399c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93cd53cbf5857c1350814602d5e6418d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a93cd53cbf5857c1350814602d5e6418d">frexp</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> value, <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> *exponent)</td></tr>
<tr class="memdesc:a93cd53cbf5857c1350814602d5e6418d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract (integer) exponent and fraction from double precision SIMD.  <a href="#a93cd53cbf5857c1350814602d5e6418d">More...</a><br/></td></tr>
<tr class="separator:a93cd53cbf5857c1350814602d5e6418d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86c665079d6936b82f5b7bc065dd13aa"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a86c665079d6936b82f5b7bc065dd13aa">ldexp</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> value, <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> exponent)</td></tr>
<tr class="memdesc:a86c665079d6936b82f5b7bc065dd13aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply a SIMD double value by the number 2 raised to an exp power.  <a href="#a86c665079d6936b82f5b7bc065dd13aa">More...</a><br/></td></tr>
<tr class="separator:a86c665079d6936b82f5b7bc065dd13aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62d67c8b5c817dab3ee4acdd5779c14b"><td class="memItemLeft" align="right" valign="top">static double gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a62d67c8b5c817dab3ee4acdd5779c14b">reduce</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a)</td></tr>
<tr class="memdesc:a62d67c8b5c817dab3ee4acdd5779c14b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return sum of all elements in SIMD double variable.  <a href="#a62d67c8b5c817dab3ee4acdd5779c14b">More...</a><br/></td></tr>
<tr class="separator:a62d67c8b5c817dab3ee4acdd5779c14b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation double precision floating-point comparison, boolean, selection.</div></td></tr>
<tr class="memitem:ad31f9caa693d0383acaf2b1b174ab0da"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad31f9caa693d0383acaf2b1b174ab0da">operator==</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b)</td></tr>
<tr class="memdesc:ad31f9caa693d0383acaf2b1b174ab0da"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD a==b for double SIMD.  <a href="#ad31f9caa693d0383acaf2b1b174ab0da">More...</a><br/></td></tr>
<tr class="separator:ad31f9caa693d0383acaf2b1b174ab0da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9711191866c2d823326c3bab599914b9"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a9711191866c2d823326c3bab599914b9">operator!=</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b)</td></tr>
<tr class="memdesc:a9711191866c2d823326c3bab599914b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD a!=b for double SIMD.  <a href="#a9711191866c2d823326c3bab599914b9">More...</a><br/></td></tr>
<tr class="separator:a9711191866c2d823326c3bab599914b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8d93f6a684ac7c60b588ed9f7241b97"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad8d93f6a684ac7c60b588ed9f7241b97">operator&lt;</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b)</td></tr>
<tr class="memdesc:ad8d93f6a684ac7c60b588ed9f7241b97"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD a&lt;b for double SIMD.  <a href="#ad8d93f6a684ac7c60b588ed9f7241b97">More...</a><br/></td></tr>
<tr class="separator:ad8d93f6a684ac7c60b588ed9f7241b97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c82364af392a21816e7eedf1a086812"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2c82364af392a21816e7eedf1a086812">operator&lt;=</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b)</td></tr>
<tr class="memdesc:a2c82364af392a21816e7eedf1a086812"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD a&lt;=b for double SIMD.  <a href="#a2c82364af392a21816e7eedf1a086812">More...</a><br/></td></tr>
<tr class="separator:a2c82364af392a21816e7eedf1a086812"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c87788b1cb09e4e6bfdf94f83f1ec76"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a5c87788b1cb09e4e6bfdf94f83f1ec76">testBits</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a)</td></tr>
<tr class="memdesc:a5c87788b1cb09e4e6bfdf94f83f1ec76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if any bits are set in the single precision SIMD.  <a href="#a5c87788b1cb09e4e6bfdf94f83f1ec76">More...</a><br/></td></tr>
<tr class="separator:a5c87788b1cb09e4e6bfdf94f83f1ec76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afccdf85d0ee6c0e8a8ca8070010cc268"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#afccdf85d0ee6c0e8a8ca8070010cc268">operator&amp;&amp;</a> (<a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> a, <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> b)</td></tr>
<tr class="memdesc:afccdf85d0ee6c0e8a8ca8070010cc268"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical <em>and</em> on double precision SIMD booleans.  <a href="#afccdf85d0ee6c0e8a8ca8070010cc268">More...</a><br/></td></tr>
<tr class="separator:afccdf85d0ee6c0e8a8ca8070010cc268"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1da27c5bc4fd40afe78810c7b6e0730"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad1da27c5bc4fd40afe78810c7b6e0730">operator||</a> (<a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> a, <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> b)</td></tr>
<tr class="memdesc:ad1da27c5bc4fd40afe78810c7b6e0730"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical <em>or</em> on double precision SIMD booleans.  <a href="#ad1da27c5bc4fd40afe78810c7b6e0730">More...</a><br/></td></tr>
<tr class="separator:ad1da27c5bc4fd40afe78810c7b6e0730"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6391860ba12e41a4a827077b6037f98"><td class="memItemLeft" align="right" valign="top">static bool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa6391860ba12e41a4a827077b6037f98">anyTrue</a> (<a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> a)</td></tr>
<tr class="memdesc:aa6391860ba12e41a4a827077b6037f98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns non-zero if any of the boolean in SIMD a is True, otherwise 0.  <a href="#aa6391860ba12e41a4a827077b6037f98">More...</a><br/></td></tr>
<tr class="separator:aa6391860ba12e41a4a827077b6037f98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb2e8393818311d9b97ab723b8150e77"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#adb2e8393818311d9b97ab723b8150e77">selectByMask</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> mask)</td></tr>
<tr class="memdesc:adb2e8393818311d9b97ab723b8150e77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from double precision SIMD variable where boolean is true.  <a href="#adb2e8393818311d9b97ab723b8150e77">More...</a><br/></td></tr>
<tr class="separator:adb2e8393818311d9b97ab723b8150e77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ad9dbb3900122823a8c86435335d3e6"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2ad9dbb3900122823a8c86435335d3e6">selectByNotMask</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> mask)</td></tr>
<tr class="memdesc:a2ad9dbb3900122823a8c86435335d3e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from double precision SIMD variable where boolean is false.  <a href="#a2ad9dbb3900122823a8c86435335d3e6">More...</a><br/></td></tr>
<tr class="separator:a2ad9dbb3900122823a8c86435335d3e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa089539a35e39d68f6c8b40421e0a68e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa089539a35e39d68f6c8b40421e0a68e">blend</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> b, <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> sel)</td></tr>
<tr class="memdesc:aa089539a35e39d68f6c8b40421e0a68e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector-blend SIMD double selection.  <a href="#aa089539a35e39d68f6c8b40421e0a68e">More...</a><br/></td></tr>
<tr class="separator:aa089539a35e39d68f6c8b40421e0a68e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation integer (corresponding to double) bitwise logical operations</div></td></tr>
<tr class="memitem:a34f3bd81d4cc0d29e1811642fcb320d6"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a34f3bd81d4cc0d29e1811642fcb320d6">operator&lt;&lt;</a> (<a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a, int n)</td></tr>
<tr class="memdesc:a34f3bd81d4cc0d29e1811642fcb320d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD integer shift left logical, based on immediate value.  <a href="#a34f3bd81d4cc0d29e1811642fcb320d6">More...</a><br/></td></tr>
<tr class="separator:a34f3bd81d4cc0d29e1811642fcb320d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a574a9e9fc8c684d24234850bee75ce8e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a574a9e9fc8c684d24234850bee75ce8e">operator&gt;&gt;</a> (<a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a, int n)</td></tr>
<tr class="memdesc:a574a9e9fc8c684d24234850bee75ce8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD integer shift right logical, based on immediate value.  <a href="#a574a9e9fc8c684d24234850bee75ce8e">More...</a><br/></td></tr>
<tr class="separator:a574a9e9fc8c684d24234850bee75ce8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8db7e6183dba97097e0f1379c6368dad"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a8db7e6183dba97097e0f1379c6368dad">operator&amp;</a> (<a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a, <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> b)</td></tr>
<tr class="memdesc:a8db7e6183dba97097e0f1379c6368dad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD bitwise and.  <a href="#a8db7e6183dba97097e0f1379c6368dad">More...</a><br/></td></tr>
<tr class="separator:a8db7e6183dba97097e0f1379c6368dad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3ee5a899ca3b9e9aafd6fd6323537e0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae3ee5a899ca3b9e9aafd6fd6323537e0">andNot</a> (<a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a, <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> b)</td></tr>
<tr class="memdesc:ae3ee5a899ca3b9e9aafd6fd6323537e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD bitwise not/complement.  <a href="#ae3ee5a899ca3b9e9aafd6fd6323537e0">More...</a><br/></td></tr>
<tr class="separator:ae3ee5a899ca3b9e9aafd6fd6323537e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65d3eb9cd43b33b4665dfe676c0e79d2"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a65d3eb9cd43b33b4665dfe676c0e79d2">operator|</a> (<a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a, <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> b)</td></tr>
<tr class="memdesc:a65d3eb9cd43b33b4665dfe676c0e79d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD bitwise or.  <a href="#a65d3eb9cd43b33b4665dfe676c0e79d2">More...</a><br/></td></tr>
<tr class="separator:a65d3eb9cd43b33b4665dfe676c0e79d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba7ccd2477ecf6b07f5b7696d9490038"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aba7ccd2477ecf6b07f5b7696d9490038">operator^</a> (<a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a, <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> b)</td></tr>
<tr class="memdesc:aba7ccd2477ecf6b07f5b7696d9490038"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD bitwise xor.  <a href="#aba7ccd2477ecf6b07f5b7696d9490038">More...</a><br/></td></tr>
<tr class="separator:aba7ccd2477ecf6b07f5b7696d9490038"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation integer (corresponding to double) arithmetics</div></td></tr>
<tr class="memitem:ae94ff177ebee1634f158cb0d7ff8b1a1"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae94ff177ebee1634f158cb0d7ff8b1a1">operator+</a> (<a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a, <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> b)</td></tr>
<tr class="memdesc:ae94ff177ebee1634f158cb0d7ff8b1a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add SIMD integers.  <a href="#ae94ff177ebee1634f158cb0d7ff8b1a1">More...</a><br/></td></tr>
<tr class="separator:ae94ff177ebee1634f158cb0d7ff8b1a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a669d0b90b5b52a929462ae00735125c0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a669d0b90b5b52a929462ae00735125c0">operator-</a> (<a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a, <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> b)</td></tr>
<tr class="memdesc:a669d0b90b5b52a929462ae00735125c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtract SIMD integers.  <a href="#a669d0b90b5b52a929462ae00735125c0">More...</a><br/></td></tr>
<tr class="separator:a669d0b90b5b52a929462ae00735125c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc27ad2d3586f1a673bd0c9c1f344f4f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#acc27ad2d3586f1a673bd0c9c1f344f4f">operator*</a> (<a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a, <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> b)</td></tr>
<tr class="memdesc:acc27ad2d3586f1a673bd0c9c1f344f4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply SIMD integers.  <a href="#acc27ad2d3586f1a673bd0c9c1f344f4f">More...</a><br/></td></tr>
<tr class="separator:acc27ad2d3586f1a673bd0c9c1f344f4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation integer (corresponding to double) comparisons, boolean selection</div></td></tr>
<tr class="memitem:a2f054cf4aa61343e3a940b6d64939c5c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2f054cf4aa61343e3a940b6d64939c5c">operator==</a> (<a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a, <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> b)</td></tr>
<tr class="memdesc:a2f054cf4aa61343e3a940b6d64939c5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equality comparison of two integers corresponding to double values.  <a href="#a2f054cf4aa61343e3a940b6d64939c5c">More...</a><br/></td></tr>
<tr class="separator:a2f054cf4aa61343e3a940b6d64939c5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a464359cf52613efaacad1cb0f39832bc"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a464359cf52613efaacad1cb0f39832bc">operator&lt;</a> (<a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a, <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> b)</td></tr>
<tr class="memdesc:a464359cf52613efaacad1cb0f39832bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Less-than comparison of two SIMD integers corresponding to double values.  <a href="#a464359cf52613efaacad1cb0f39832bc">More...</a><br/></td></tr>
<tr class="separator:a464359cf52613efaacad1cb0f39832bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2ea05053a363baccc4a01d7d0bc137d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af2ea05053a363baccc4a01d7d0bc137d">testBits</a> (<a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a)</td></tr>
<tr class="memdesc:af2ea05053a363baccc4a01d7d0bc137d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if any bit is set in each element.  <a href="#af2ea05053a363baccc4a01d7d0bc137d">More...</a><br/></td></tr>
<tr class="separator:af2ea05053a363baccc4a01d7d0bc137d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae41bec54342cb6c56e395fab2ac3dc2"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aae41bec54342cb6c56e395fab2ac3dc2">operator&amp;&amp;</a> (<a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> a, <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> b)</td></tr>
<tr class="memdesc:aae41bec54342cb6c56e395fab2ac3dc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical AND on <a class="el" href="classgmx_1_1SimdDIBool.xhtml" title="Boolean type for integer datatypes corresponding to double SIMD. ">SimdDIBool</a>.  <a href="#aae41bec54342cb6c56e395fab2ac3dc2">More...</a><br/></td></tr>
<tr class="separator:aae41bec54342cb6c56e395fab2ac3dc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2382ca9a262a0503bb5dcfcec09df671"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2382ca9a262a0503bb5dcfcec09df671">operator||</a> (<a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> a, <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> b)</td></tr>
<tr class="memdesc:a2382ca9a262a0503bb5dcfcec09df671"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical OR on <a class="el" href="classgmx_1_1SimdDIBool.xhtml" title="Boolean type for integer datatypes corresponding to double SIMD. ">SimdDIBool</a>.  <a href="#a2382ca9a262a0503bb5dcfcec09df671">More...</a><br/></td></tr>
<tr class="separator:a2382ca9a262a0503bb5dcfcec09df671"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01b540961fe7e3f5aede8df5bba89237"><td class="memItemLeft" align="right" valign="top">static bool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a01b540961fe7e3f5aede8df5bba89237">anyTrue</a> (<a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> a)</td></tr>
<tr class="memdesc:a01b540961fe7e3f5aede8df5bba89237"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if any of the boolean in x is True, otherwise 0.  <a href="#a01b540961fe7e3f5aede8df5bba89237">More...</a><br/></td></tr>
<tr class="separator:a01b540961fe7e3f5aede8df5bba89237"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41408567ca23cb56ace128e8fe0be4f4"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a41408567ca23cb56ace128e8fe0be4f4">selectByMask</a> (<a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a, <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> mask)</td></tr>
<tr class="memdesc:a41408567ca23cb56ace128e8fe0be4f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from <a class="el" href="classgmx_1_1SimdDInt32.xhtml">gmx::SimdDInt32</a> variable where boolean is true.  <a href="#a41408567ca23cb56ace128e8fe0be4f4">More...</a><br/></td></tr>
<tr class="separator:a41408567ca23cb56ace128e8fe0be4f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5465630a9899275f6ab90f2e0af66554"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a5465630a9899275f6ab90f2e0af66554">selectByNotMask</a> (<a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a, <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> mask)</td></tr>
<tr class="memdesc:a5465630a9899275f6ab90f2e0af66554"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from <a class="el" href="classgmx_1_1SimdDInt32.xhtml">gmx::SimdDInt32</a> variable where boolean is false.  <a href="#a5465630a9899275f6ab90f2e0af66554">More...</a><br/></td></tr>
<tr class="separator:a5465630a9899275f6ab90f2e0af66554"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a897cd563974628f57a983656bc4f0be5"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a897cd563974628f57a983656bc4f0be5">blend</a> (<a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a, <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> b, <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> sel)</td></tr>
<tr class="memdesc:a897cd563974628f57a983656bc4f0be5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector-blend SIMD integer selection.  <a href="#a897cd563974628f57a983656bc4f0be5">More...</a><br/></td></tr>
<tr class="separator:a897cd563974628f57a983656bc4f0be5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation conversion operations</div></td></tr>
<tr class="memitem:ab44adfad19a5d4f810428dea125c2618"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ab44adfad19a5d4f810428dea125c2618">cvtR2I</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a)</td></tr>
<tr class="memdesc:ab44adfad19a5d4f810428dea125c2618"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round double precision floating point to integer.  <a href="#ab44adfad19a5d4f810428dea125c2618">More...</a><br/></td></tr>
<tr class="separator:ab44adfad19a5d4f810428dea125c2618"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4adbb04ea5039d62805c3082368dd76"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ac4adbb04ea5039d62805c3082368dd76">cvttR2I</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a)</td></tr>
<tr class="memdesc:ac4adbb04ea5039d62805c3082368dd76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate double precision floating point to integer.  <a href="#ac4adbb04ea5039d62805c3082368dd76">More...</a><br/></td></tr>
<tr class="separator:ac4adbb04ea5039d62805c3082368dd76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97d21ad971c1efb6685f073f344590cc"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a97d21ad971c1efb6685f073f344590cc">cvtI2R</a> (<a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> a)</td></tr>
<tr class="memdesc:a97d21ad971c1efb6685f073f344590cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert integer to double precision floating point.  <a href="#a97d21ad971c1efb6685f073f344590cc">More...</a><br/></td></tr>
<tr class="separator:a97d21ad971c1efb6685f073f344590cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15023cda21995e0a86c76416fff7575e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a15023cda21995e0a86c76416fff7575e">cvtB2IB</a> (<a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> a)</td></tr>
<tr class="memdesc:a15023cda21995e0a86c76416fff7575e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert from double precision boolean to corresponding integer boolean.  <a href="#a15023cda21995e0a86c76416fff7575e">More...</a><br/></td></tr>
<tr class="separator:a15023cda21995e0a86c76416fff7575e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb2ccc1aebc69073299a26c404fcf5ba"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#abb2ccc1aebc69073299a26c404fcf5ba">cvtIB2B</a> (<a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> a)</td></tr>
<tr class="memdesc:abb2ccc1aebc69073299a26c404fcf5ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert from integer boolean to corresponding double precision boolean.  <a href="#abb2ccc1aebc69073299a26c404fcf5ba">More...</a><br/></td></tr>
<tr class="separator:abb2ccc1aebc69073299a26c404fcf5ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67d3b8f955282068904125585dfe4791"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a67d3b8f955282068904125585dfe4791">cvtF2D</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> f)</td></tr>
<tr class="memdesc:a67d3b8f955282068904125585dfe4791"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert SIMD float to double.  <a href="#a67d3b8f955282068904125585dfe4791">More...</a><br/></td></tr>
<tr class="separator:a67d3b8f955282068904125585dfe4791"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fb883892d82707c8c58f3ecb3d0f7a3"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a8fb883892d82707c8c58f3ecb3d0f7a3">cvtD2F</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> d)</td></tr>
<tr class="memdesc:a8fb883892d82707c8c58f3ecb3d0f7a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert SIMD double to float.  <a href="#a8fb883892d82707c8c58f3ecb3d0f7a3">More...</a><br/></td></tr>
<tr class="separator:a8fb883892d82707c8c58f3ecb3d0f7a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1567e05e71a05d804c30ef65e66e9e96"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a1567e05e71a05d804c30ef65e66e9e96">cvtF2DD</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> f, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *d0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *d1)</td></tr>
<tr class="memdesc:a1567e05e71a05d804c30ef65e66e9e96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert SIMD float to double.  <a href="#a1567e05e71a05d804c30ef65e66e9e96">More...</a><br/></td></tr>
<tr class="separator:a1567e05e71a05d804c30ef65e66e9e96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cc129ae379b11a89f6f100b82dcecfa"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a9cc129ae379b11a89f6f100b82dcecfa">cvtDD2F</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> d0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> d1)</td></tr>
<tr class="memdesc:a9cc129ae379b11a89f6f100b82dcecfa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert SIMD double to float.  <a href="#a9cc129ae379b11a89f6f100b82dcecfa">More...</a><br/></td></tr>
<tr class="separator:a9cc129ae379b11a89f6f100b82dcecfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac552eafd6724baac337732185e7aab5b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ac552eafd6724baac337732185e7aab5b">cvtR2I</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a)</td></tr>
<tr class="memdesc:ac552eafd6724baac337732185e7aab5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round single precision floating point to integer.  <a href="#ac552eafd6724baac337732185e7aab5b">More...</a><br/></td></tr>
<tr class="separator:ac552eafd6724baac337732185e7aab5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ea0550c9f9a416bc631e091c2fcbb4e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a9ea0550c9f9a416bc631e091c2fcbb4e">cvttR2I</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a)</td></tr>
<tr class="memdesc:a9ea0550c9f9a416bc631e091c2fcbb4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate single precision floating point to integer.  <a href="#a9ea0550c9f9a416bc631e091c2fcbb4e">More...</a><br/></td></tr>
<tr class="separator:a9ea0550c9f9a416bc631e091c2fcbb4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dcd41f15fc944cfda5f034cd3c4ecfb"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a4dcd41f15fc944cfda5f034cd3c4ecfb">cvtI2R</a> (<a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a)</td></tr>
<tr class="memdesc:a4dcd41f15fc944cfda5f034cd3c4ecfb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert integer to single precision floating point.  <a href="#a4dcd41f15fc944cfda5f034cd3c4ecfb">More...</a><br/></td></tr>
<tr class="separator:a4dcd41f15fc944cfda5f034cd3c4ecfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae297fc04e625ca46ca931b39c0c01603"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae297fc04e625ca46ca931b39c0c01603">cvtB2IB</a> (<a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> a)</td></tr>
<tr class="memdesc:ae297fc04e625ca46ca931b39c0c01603"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert from single precision boolean to corresponding integer boolean.  <a href="#ae297fc04e625ca46ca931b39c0c01603">More...</a><br/></td></tr>
<tr class="separator:ae297fc04e625ca46ca931b39c0c01603"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05ffa14c31a2ddbc8edc180e65e3b25d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a05ffa14c31a2ddbc8edc180e65e3b25d">cvtIB2B</a> (<a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> a)</td></tr>
<tr class="memdesc:a05ffa14c31a2ddbc8edc180e65e3b25d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert from integer boolean to corresponding single precision boolean.  <a href="#a05ffa14c31a2ddbc8edc180e65e3b25d">More...</a><br/></td></tr>
<tr class="separator:a05ffa14c31a2ddbc8edc180e65e3b25d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation load/store operations for single precision floating point</div></td></tr>
<tr class="memitem:af4e458ade067ee9a54638f2cfda3a156"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af4e458ade067ee9a54638f2cfda3a156">simdLoad</a> (const float *m)</td></tr>
<tr class="memdesc:af4e458ade067ee9a54638f2cfda3a156"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load <a class="el" href="group__module__simd.xhtml#gafdbf804a40bfa3dcb15bc50055e58e74">GMX_SIMD_FLOAT_WIDTH</a> float numbers from aligned memory.  <a href="#af4e458ade067ee9a54638f2cfda3a156">More...</a><br/></td></tr>
<tr class="separator:af4e458ade067ee9a54638f2cfda3a156"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52f7df2355065163447397f980294447"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a52f7df2355065163447397f980294447">store</a> (float *m, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a)</td></tr>
<tr class="memdesc:a52f7df2355065163447397f980294447"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store the contents of SIMD float variable to aligned memory m.  <a href="#a52f7df2355065163447397f980294447">More...</a><br/></td></tr>
<tr class="separator:a52f7df2355065163447397f980294447"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f6db4291f0fb805ed63c168b34b12e7"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3f6db4291f0fb805ed63c168b34b12e7">simdLoadU</a> (const float *m)</td></tr>
<tr class="memdesc:a3f6db4291f0fb805ed63c168b34b12e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load SIMD float from unaligned memory.  <a href="#a3f6db4291f0fb805ed63c168b34b12e7">More...</a><br/></td></tr>
<tr class="separator:a3f6db4291f0fb805ed63c168b34b12e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78a753ce93218a4e83f9733c66a48020"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a78a753ce93218a4e83f9733c66a48020">storeU</a> (float *m, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a)</td></tr>
<tr class="memdesc:a78a753ce93218a4e83f9733c66a48020"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store SIMD float to unaligned memory.  <a href="#a78a753ce93218a4e83f9733c66a48020">More...</a><br/></td></tr>
<tr class="separator:a78a753ce93218a4e83f9733c66a48020"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaeabcbecb3158411b57502164c854a31"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aaeabcbecb3158411b57502164c854a31">setZeroF</a> ()</td></tr>
<tr class="memdesc:aaeabcbecb3158411b57502164c854a31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set all SIMD float variable elements to 0.0.  <a href="#aaeabcbecb3158411b57502164c854a31">More...</a><br/></td></tr>
<tr class="separator:aaeabcbecb3158411b57502164c854a31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation load/store operations for integers (corresponding to float)</div></td></tr>
<tr class="memitem:a8b416215a20a73aff5fa5808c448811e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a8b416215a20a73aff5fa5808c448811e">simdLoadFI</a> (const std::int32_t *m)</td></tr>
<tr class="memdesc:a8b416215a20a73aff5fa5808c448811e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load aligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdFloat.xhtml">gmx::SimdFloat</a>.  <a href="#a8b416215a20a73aff5fa5808c448811e">More...</a><br/></td></tr>
<tr class="separator:a8b416215a20a73aff5fa5808c448811e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05b56e14f8499393813cb23869a97a98"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a05b56e14f8499393813cb23869a97a98">store</a> (std::int32_t *m, <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a)</td></tr>
<tr class="memdesc:a05b56e14f8499393813cb23869a97a98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store aligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdFloat.xhtml">gmx::SimdFloat</a>.  <a href="#a05b56e14f8499393813cb23869a97a98">More...</a><br/></td></tr>
<tr class="separator:a05b56e14f8499393813cb23869a97a98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37e5f3b6be0b2d544f0239939a775f91"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a37e5f3b6be0b2d544f0239939a775f91">simdLoadUFI</a> (const std::int32_t *m)</td></tr>
<tr class="memdesc:a37e5f3b6be0b2d544f0239939a775f91"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load unaligned integer SIMD data, width corresponds to <a class="el" href="classgmx_1_1SimdFloat.xhtml">gmx::SimdFloat</a>.  <a href="#a37e5f3b6be0b2d544f0239939a775f91">More...</a><br/></td></tr>
<tr class="separator:a37e5f3b6be0b2d544f0239939a775f91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a849eec56bc26a1d99f3f198fc9a9cba5"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a849eec56bc26a1d99f3f198fc9a9cba5">storeU</a> (std::int32_t *m, <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a)</td></tr>
<tr class="memdesc:a849eec56bc26a1d99f3f198fc9a9cba5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store unaligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdFloat.xhtml">gmx::SimdFloat</a>.  <a href="#a849eec56bc26a1d99f3f198fc9a9cba5">More...</a><br/></td></tr>
<tr class="separator:a849eec56bc26a1d99f3f198fc9a9cba5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52eac01d95edbe3b448fc447832a5d3c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a52eac01d95edbe3b448fc447832a5d3c">setZeroFI</a> ()</td></tr>
<tr class="memdesc:a52eac01d95edbe3b448fc447832a5d3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set all SIMD (float) integer variable elements to 0.  <a href="#a52eac01d95edbe3b448fc447832a5d3c">More...</a><br/></td></tr>
<tr class="separator:a52eac01d95edbe3b448fc447832a5d3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48a0504dfe392db42fd419cd80ea7d9a"><td class="memTemplParams" colspan="2">template&lt;int index&gt; </td></tr>
<tr class="memitem:a48a0504dfe392db42fd419cd80ea7d9a"><td class="memTemplItemLeft" align="right" valign="top">static std::int32_t gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a48a0504dfe392db42fd419cd80ea7d9a">extract</a> (<a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a)</td></tr>
<tr class="memdesc:a48a0504dfe392db42fd419cd80ea7d9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract element with index i from <a class="el" href="classgmx_1_1SimdFInt32.xhtml">gmx::SimdFInt32</a>.  <a href="#a48a0504dfe392db42fd419cd80ea7d9a">More...</a><br/></td></tr>
<tr class="separator:a48a0504dfe392db42fd419cd80ea7d9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation single precision floating-point bitwise logical operations</div></td></tr>
<tr class="memitem:a4093d368f060b40d9a9dee083b33411c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a4093d368f060b40d9a9dee083b33411c">operator&amp;</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b)</td></tr>
<tr class="memdesc:a4093d368f060b40d9a9dee083b33411c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise and for two SIMD float variables.  <a href="#a4093d368f060b40d9a9dee083b33411c">More...</a><br/></td></tr>
<tr class="separator:a4093d368f060b40d9a9dee083b33411c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a621b6d4eb9d2d992b07f7bc515dad46d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a621b6d4eb9d2d992b07f7bc515dad46d">andNot</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b)</td></tr>
<tr class="memdesc:a621b6d4eb9d2d992b07f7bc515dad46d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise andnot for SIMD float.  <a href="#a621b6d4eb9d2d992b07f7bc515dad46d">More...</a><br/></td></tr>
<tr class="separator:a621b6d4eb9d2d992b07f7bc515dad46d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69973d1808eb0e8e60715d3abf01cd22"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a69973d1808eb0e8e60715d3abf01cd22">operator|</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b)</td></tr>
<tr class="memdesc:a69973d1808eb0e8e60715d3abf01cd22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise or for SIMD float.  <a href="#a69973d1808eb0e8e60715d3abf01cd22">More...</a><br/></td></tr>
<tr class="separator:a69973d1808eb0e8e60715d3abf01cd22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37544015fbce9d2b11dce07e159e878b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a37544015fbce9d2b11dce07e159e878b">operator^</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b)</td></tr>
<tr class="memdesc:a37544015fbce9d2b11dce07e159e878b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise xor for SIMD float.  <a href="#a37544015fbce9d2b11dce07e159e878b">More...</a><br/></td></tr>
<tr class="separator:a37544015fbce9d2b11dce07e159e878b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation single precision floating-point arithmetics</div></td></tr>
<tr class="memitem:aebe772c4714b2ce0f9a70c7fbbc01f98"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aebe772c4714b2ce0f9a70c7fbbc01f98">operator+</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b)</td></tr>
<tr class="memdesc:aebe772c4714b2ce0f9a70c7fbbc01f98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add two float SIMD variables.  <a href="#aebe772c4714b2ce0f9a70c7fbbc01f98">More...</a><br/></td></tr>
<tr class="separator:aebe772c4714b2ce0f9a70c7fbbc01f98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae00e0dcf36832ed7c591e1204dd9dcc8"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae00e0dcf36832ed7c591e1204dd9dcc8">operator-</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b)</td></tr>
<tr class="memdesc:ae00e0dcf36832ed7c591e1204dd9dcc8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtract two float SIMD variables.  <a href="#ae00e0dcf36832ed7c591e1204dd9dcc8">More...</a><br/></td></tr>
<tr class="separator:ae00e0dcf36832ed7c591e1204dd9dcc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae409460fda30359c437522eca447e24e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae409460fda30359c437522eca447e24e">operator-</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a)</td></tr>
<tr class="memdesc:ae409460fda30359c437522eca447e24e"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD single precision negate.  <a href="#ae409460fda30359c437522eca447e24e">More...</a><br/></td></tr>
<tr class="separator:ae409460fda30359c437522eca447e24e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51972cf72cc64e7d4ec87e53d4b25376"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a51972cf72cc64e7d4ec87e53d4b25376">operator*</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b)</td></tr>
<tr class="memdesc:a51972cf72cc64e7d4ec87e53d4b25376"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply two float SIMD variables.  <a href="#a51972cf72cc64e7d4ec87e53d4b25376">More...</a><br/></td></tr>
<tr class="separator:a51972cf72cc64e7d4ec87e53d4b25376"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6969c0baf1592d7a5fec29636a85628f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a6969c0baf1592d7a5fec29636a85628f">fma</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> c)</td></tr>
<tr class="memdesc:a6969c0baf1592d7a5fec29636a85628f"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float Fused-multiply-add. Result is a*b+c.  <a href="#a6969c0baf1592d7a5fec29636a85628f">More...</a><br/></td></tr>
<tr class="separator:a6969c0baf1592d7a5fec29636a85628f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a075eeabb5171e4f74cdd74e2f97bab5c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a075eeabb5171e4f74cdd74e2f97bab5c">fms</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> c)</td></tr>
<tr class="memdesc:a075eeabb5171e4f74cdd74e2f97bab5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float Fused-multiply-subtract. Result is a*b-c.  <a href="#a075eeabb5171e4f74cdd74e2f97bab5c">More...</a><br/></td></tr>
<tr class="separator:a075eeabb5171e4f74cdd74e2f97bab5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6be2e3e5adbdf49e6468c8a2d638658d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a6be2e3e5adbdf49e6468c8a2d638658d">fnma</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> c)</td></tr>
<tr class="memdesc:a6be2e3e5adbdf49e6468c8a2d638658d"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float Fused-negated-multiply-add. Result is -a*b+c.  <a href="#a6be2e3e5adbdf49e6468c8a2d638658d">More...</a><br/></td></tr>
<tr class="separator:a6be2e3e5adbdf49e6468c8a2d638658d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8fe2e25414c377f8ed03d5c23f84963"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af8fe2e25414c377f8ed03d5c23f84963">fnms</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> c)</td></tr>
<tr class="memdesc:af8fe2e25414c377f8ed03d5c23f84963"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float Fused-negated-multiply-subtract. Result is -a*b-c.  <a href="#af8fe2e25414c377f8ed03d5c23f84963">More...</a><br/></td></tr>
<tr class="separator:af8fe2e25414c377f8ed03d5c23f84963"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a611e17e307050f3a78e3390a5e63c460"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a611e17e307050f3a78e3390a5e63c460">rsqrt</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:a611e17e307050f3a78e3390a5e63c460"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float 1.0/sqrt(x) lookup.  <a href="#a611e17e307050f3a78e3390a5e63c460">More...</a><br/></td></tr>
<tr class="separator:a611e17e307050f3a78e3390a5e63c460"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48cb29271cf7ac44a06cfe20e5c29dc2"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a48cb29271cf7ac44a06cfe20e5c29dc2">rcp</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:a48cb29271cf7ac44a06cfe20e5c29dc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float 1.0/x lookup.  <a href="#a48cb29271cf7ac44a06cfe20e5c29dc2">More...</a><br/></td></tr>
<tr class="separator:a48cb29271cf7ac44a06cfe20e5c29dc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a766a313a4a158cfcb0eed0373dd82dfc"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a766a313a4a158cfcb0eed0373dd82dfc">maskAdd</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b, <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> m)</td></tr>
<tr class="memdesc:a766a313a4a158cfcb0eed0373dd82dfc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add two float SIMD variables, masked version.  <a href="#a766a313a4a158cfcb0eed0373dd82dfc">More...</a><br/></td></tr>
<tr class="separator:a766a313a4a158cfcb0eed0373dd82dfc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa732ce9ab59cca63f834923a8cb4c775"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa732ce9ab59cca63f834923a8cb4c775">maskzMul</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b, <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> m)</td></tr>
<tr class="memdesc:aa732ce9ab59cca63f834923a8cb4c775"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply two float SIMD variables, masked version.  <a href="#aa732ce9ab59cca63f834923a8cb4c775">More...</a><br/></td></tr>
<tr class="separator:aa732ce9ab59cca63f834923a8cb4c775"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac21c886b9883657fd67d8b48e784af2d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ac21c886b9883657fd67d8b48e784af2d">maskzFma</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> c, <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> m)</td></tr>
<tr class="memdesc:ac21c886b9883657fd67d8b48e784af2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float fused multiply-add, masked version.  <a href="#ac21c886b9883657fd67d8b48e784af2d">More...</a><br/></td></tr>
<tr class="separator:ac21c886b9883657fd67d8b48e784af2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6eb1ba8851b08ceea1c160b6b255ee9b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a6eb1ba8851b08ceea1c160b6b255ee9b">maskzRsqrt</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x, <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> m)</td></tr>
<tr class="memdesc:a6eb1ba8851b08ceea1c160b6b255ee9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float 1.0/sqrt(x) lookup, masked version.  <a href="#a6eb1ba8851b08ceea1c160b6b255ee9b">More...</a><br/></td></tr>
<tr class="separator:a6eb1ba8851b08ceea1c160b6b255ee9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abda785f716b1445f709fc7aa028c0589"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#abda785f716b1445f709fc7aa028c0589">maskzRcp</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x, <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> m)</td></tr>
<tr class="memdesc:abda785f716b1445f709fc7aa028c0589"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float 1.0/x lookup, masked version.  <a href="#abda785f716b1445f709fc7aa028c0589">More...</a><br/></td></tr>
<tr class="separator:abda785f716b1445f709fc7aa028c0589"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad59e3c65fd7e52438579b9ea98edefba"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad59e3c65fd7e52438579b9ea98edefba">abs</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a)</td></tr>
<tr class="memdesc:ad59e3c65fd7e52438579b9ea98edefba"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float Floating-point <a class="el" href="group__module__simd.xhtml#ga9339c53d13a59e946834c14d565f1e18" title="SIMD4 Floating-point abs(). ">abs()</a>.  <a href="#ad59e3c65fd7e52438579b9ea98edefba">More...</a><br/></td></tr>
<tr class="separator:ad59e3c65fd7e52438579b9ea98edefba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4edeef3c458f5c77cf3ceb80532a57ff"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a4edeef3c458f5c77cf3ceb80532a57ff">max</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b)</td></tr>
<tr class="memdesc:a4edeef3c458f5c77cf3ceb80532a57ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set each SIMD float element to the largest from two variables.  <a href="#a4edeef3c458f5c77cf3ceb80532a57ff">More...</a><br/></td></tr>
<tr class="separator:a4edeef3c458f5c77cf3ceb80532a57ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66c497c1f66c2aaccafefdfdeaf6ce2f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a66c497c1f66c2aaccafefdfdeaf6ce2f">min</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b)</td></tr>
<tr class="memdesc:a66c497c1f66c2aaccafefdfdeaf6ce2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set each SIMD float element to the smallest from two variables.  <a href="#a66c497c1f66c2aaccafefdfdeaf6ce2f">More...</a><br/></td></tr>
<tr class="separator:a66c497c1f66c2aaccafefdfdeaf6ce2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ef18bc7373b1450c963374f72d472e4"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3ef18bc7373b1450c963374f72d472e4">round</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a)</td></tr>
<tr class="memdesc:a3ef18bc7373b1450c963374f72d472e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float round to nearest integer value (in floating-point format).  <a href="#a3ef18bc7373b1450c963374f72d472e4">More...</a><br/></td></tr>
<tr class="separator:a3ef18bc7373b1450c963374f72d472e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03c0d9c75faf734c06f162e92e56f5f7"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a03c0d9c75faf734c06f162e92e56f5f7">trunc</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a)</td></tr>
<tr class="memdesc:a03c0d9c75faf734c06f162e92e56f5f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate SIMD float, i.e. round towards zero - common hardware instruction.  <a href="#a03c0d9c75faf734c06f162e92e56f5f7">More...</a><br/></td></tr>
<tr class="separator:a03c0d9c75faf734c06f162e92e56f5f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25fcdea880b577ac51ac92b915fd89e7"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a25fcdea880b577ac51ac92b915fd89e7">frexp</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> value, <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> *exponent)</td></tr>
<tr class="memdesc:a25fcdea880b577ac51ac92b915fd89e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract (integer) exponent and fraction from single precision SIMD.  <a href="#a25fcdea880b577ac51ac92b915fd89e7">More...</a><br/></td></tr>
<tr class="separator:a25fcdea880b577ac51ac92b915fd89e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d8d4c79d514bc6dc56832b2a44fc312"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a7d8d4c79d514bc6dc56832b2a44fc312">ldexp</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> value, <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> exponent)</td></tr>
<tr class="memdesc:a7d8d4c79d514bc6dc56832b2a44fc312"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply a SIMD float value by the number 2 raised to an exp power.  <a href="#a7d8d4c79d514bc6dc56832b2a44fc312">More...</a><br/></td></tr>
<tr class="separator:a7d8d4c79d514bc6dc56832b2a44fc312"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55d2bf9090a7a9aed6e4b1f6391ef844"><td class="memItemLeft" align="right" valign="top">static float gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a55d2bf9090a7a9aed6e4b1f6391ef844">reduce</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a)</td></tr>
<tr class="memdesc:a55d2bf9090a7a9aed6e4b1f6391ef844"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return sum of all elements in SIMD float variable.  <a href="#a55d2bf9090a7a9aed6e4b1f6391ef844">More...</a><br/></td></tr>
<tr class="separator:a55d2bf9090a7a9aed6e4b1f6391ef844"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation single precision floating-point comparisons, boolean, selection.</div></td></tr>
<tr class="memitem:afc42a1e43f4158ce45339e3a8ea225b7"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#afc42a1e43f4158ce45339e3a8ea225b7">operator==</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b)</td></tr>
<tr class="memdesc:afc42a1e43f4158ce45339e3a8ea225b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD a==b for single SIMD.  <a href="#afc42a1e43f4158ce45339e3a8ea225b7">More...</a><br/></td></tr>
<tr class="separator:afc42a1e43f4158ce45339e3a8ea225b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a254a7b42f107dbc05f506a139ff24cb6"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a254a7b42f107dbc05f506a139ff24cb6">operator!=</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b)</td></tr>
<tr class="memdesc:a254a7b42f107dbc05f506a139ff24cb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD a!=b for single SIMD.  <a href="#a254a7b42f107dbc05f506a139ff24cb6">More...</a><br/></td></tr>
<tr class="separator:a254a7b42f107dbc05f506a139ff24cb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd963f002451c284f4dc52167c6c1dc1"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#acd963f002451c284f4dc52167c6c1dc1">operator&lt;</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b)</td></tr>
<tr class="memdesc:acd963f002451c284f4dc52167c6c1dc1"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD a&lt;b for single SIMD.  <a href="#acd963f002451c284f4dc52167c6c1dc1">More...</a><br/></td></tr>
<tr class="separator:acd963f002451c284f4dc52167c6c1dc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0e463866d58d57bbc388c17299c4829"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad0e463866d58d57bbc388c17299c4829">operator&lt;=</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b)</td></tr>
<tr class="memdesc:ad0e463866d58d57bbc388c17299c4829"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD a&lt;=b for single SIMD.  <a href="#ad0e463866d58d57bbc388c17299c4829">More...</a><br/></td></tr>
<tr class="separator:ad0e463866d58d57bbc388c17299c4829"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10dfe150e697592814f1d3edd5c3c87e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a10dfe150e697592814f1d3edd5c3c87e">testBits</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a)</td></tr>
<tr class="memdesc:a10dfe150e697592814f1d3edd5c3c87e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if any bits are set in the single precision SIMD.  <a href="#a10dfe150e697592814f1d3edd5c3c87e">More...</a><br/></td></tr>
<tr class="separator:a10dfe150e697592814f1d3edd5c3c87e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae161ba7a8d47adeac2e26eca03095d13"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae161ba7a8d47adeac2e26eca03095d13">operator&amp;&amp;</a> (<a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> a, <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> b)</td></tr>
<tr class="memdesc:ae161ba7a8d47adeac2e26eca03095d13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical <em>and</em> on single precision SIMD booleans.  <a href="#ae161ba7a8d47adeac2e26eca03095d13">More...</a><br/></td></tr>
<tr class="separator:ae161ba7a8d47adeac2e26eca03095d13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5595db8a2c813f0ae078285a1b6b8bd3"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a5595db8a2c813f0ae078285a1b6b8bd3">operator||</a> (<a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> a, <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> b)</td></tr>
<tr class="memdesc:a5595db8a2c813f0ae078285a1b6b8bd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical <em>or</em> on single precision SIMD booleans.  <a href="#a5595db8a2c813f0ae078285a1b6b8bd3">More...</a><br/></td></tr>
<tr class="separator:a5595db8a2c813f0ae078285a1b6b8bd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3771cceb27c74f62fe77ae2b3375f19"><td class="memItemLeft" align="right" valign="top">static bool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad3771cceb27c74f62fe77ae2b3375f19">anyTrue</a> (<a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> a)</td></tr>
<tr class="memdesc:ad3771cceb27c74f62fe77ae2b3375f19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns non-zero if any of the boolean in SIMD a is True, otherwise 0.  <a href="#ad3771cceb27c74f62fe77ae2b3375f19">More...</a><br/></td></tr>
<tr class="separator:ad3771cceb27c74f62fe77ae2b3375f19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8662b109c880042900ece585e9b4c68"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad8662b109c880042900ece585e9b4c68">selectByMask</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> mask)</td></tr>
<tr class="memdesc:ad8662b109c880042900ece585e9b4c68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from single precision SIMD variable where boolean is true.  <a href="#ad8662b109c880042900ece585e9b4c68">More...</a><br/></td></tr>
<tr class="separator:ad8662b109c880042900ece585e9b4c68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b181964f04f57a08d6241f639696d31"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3b181964f04f57a08d6241f639696d31">selectByNotMask</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> mask)</td></tr>
<tr class="memdesc:a3b181964f04f57a08d6241f639696d31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from single precision SIMD variable where boolean is false.  <a href="#a3b181964f04f57a08d6241f639696d31">More...</a><br/></td></tr>
<tr class="separator:a3b181964f04f57a08d6241f639696d31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a443be80edc7822ae0582bc5a4d4da34c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a443be80edc7822ae0582bc5a4d4da34c">blend</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> b, <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> sel)</td></tr>
<tr class="memdesc:a443be80edc7822ae0582bc5a4d4da34c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector-blend SIMD float selection.  <a href="#a443be80edc7822ae0582bc5a4d4da34c">More...</a><br/></td></tr>
<tr class="separator:a443be80edc7822ae0582bc5a4d4da34c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation integer (corresponding to float) bitwise logical operations</div></td></tr>
<tr class="memitem:a944742d0897cd5cd137f635350038916"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a944742d0897cd5cd137f635350038916">operator&lt;&lt;</a> (<a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a, int n)</td></tr>
<tr class="memdesc:a944742d0897cd5cd137f635350038916"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD integer shift left logical, based on immediate value.  <a href="#a944742d0897cd5cd137f635350038916">More...</a><br/></td></tr>
<tr class="separator:a944742d0897cd5cd137f635350038916"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af05b883b2ca284120a3f7458354ed27a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af05b883b2ca284120a3f7458354ed27a">operator&gt;&gt;</a> (<a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a, int n)</td></tr>
<tr class="memdesc:af05b883b2ca284120a3f7458354ed27a"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD integer shift right logical, based on immediate value.  <a href="#af05b883b2ca284120a3f7458354ed27a">More...</a><br/></td></tr>
<tr class="separator:af05b883b2ca284120a3f7458354ed27a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa2f30ddbbff1d91de4d1ef1f516fe9f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aaa2f30ddbbff1d91de4d1ef1f516fe9f">operator&amp;</a> (<a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a, <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> b)</td></tr>
<tr class="memdesc:aaa2f30ddbbff1d91de4d1ef1f516fe9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD bitwise and.  <a href="#aaa2f30ddbbff1d91de4d1ef1f516fe9f">More...</a><br/></td></tr>
<tr class="separator:aaa2f30ddbbff1d91de4d1ef1f516fe9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03632f7c71496ded26a0c3eda8ed33b7"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a03632f7c71496ded26a0c3eda8ed33b7">andNot</a> (<a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a, <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> b)</td></tr>
<tr class="memdesc:a03632f7c71496ded26a0c3eda8ed33b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD bitwise not/complement.  <a href="#a03632f7c71496ded26a0c3eda8ed33b7">More...</a><br/></td></tr>
<tr class="separator:a03632f7c71496ded26a0c3eda8ed33b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6f2042babc63e1b20b08ed61d859f74"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af6f2042babc63e1b20b08ed61d859f74">operator|</a> (<a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a, <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> b)</td></tr>
<tr class="memdesc:af6f2042babc63e1b20b08ed61d859f74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD bitwise or.  <a href="#af6f2042babc63e1b20b08ed61d859f74">More...</a><br/></td></tr>
<tr class="separator:af6f2042babc63e1b20b08ed61d859f74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb7e81f2ef83cfb9aaae088c8762c2b0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#abb7e81f2ef83cfb9aaae088c8762c2b0">operator^</a> (<a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a, <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> b)</td></tr>
<tr class="memdesc:abb7e81f2ef83cfb9aaae088c8762c2b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD bitwise xor.  <a href="#abb7e81f2ef83cfb9aaae088c8762c2b0">More...</a><br/></td></tr>
<tr class="separator:abb7e81f2ef83cfb9aaae088c8762c2b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation integer (corresponding to float) arithmetics</div></td></tr>
<tr class="memitem:af3c5a94b0e74b2e5b7fbb4c9c0bd1938"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af3c5a94b0e74b2e5b7fbb4c9c0bd1938">operator+</a> (<a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a, <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> b)</td></tr>
<tr class="memdesc:af3c5a94b0e74b2e5b7fbb4c9c0bd1938"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add SIMD integers.  <a href="#af3c5a94b0e74b2e5b7fbb4c9c0bd1938">More...</a><br/></td></tr>
<tr class="separator:af3c5a94b0e74b2e5b7fbb4c9c0bd1938"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accbca9c905a278763e5ff7c584f75f21"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#accbca9c905a278763e5ff7c584f75f21">operator-</a> (<a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a, <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> b)</td></tr>
<tr class="memdesc:accbca9c905a278763e5ff7c584f75f21"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtract SIMD integers.  <a href="#accbca9c905a278763e5ff7c584f75f21">More...</a><br/></td></tr>
<tr class="separator:accbca9c905a278763e5ff7c584f75f21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9acf86fe51d043353aa609f65263386e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a9acf86fe51d043353aa609f65263386e">operator*</a> (<a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a, <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> b)</td></tr>
<tr class="memdesc:a9acf86fe51d043353aa609f65263386e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply SIMD integers.  <a href="#a9acf86fe51d043353aa609f65263386e">More...</a><br/></td></tr>
<tr class="separator:a9acf86fe51d043353aa609f65263386e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation integer (corresponding to float) comparisons, boolean, selection</div></td></tr>
<tr class="memitem:aec52e80a85ca0737723f5d9b358b1660"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aec52e80a85ca0737723f5d9b358b1660">operator==</a> (<a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a, <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> b)</td></tr>
<tr class="memdesc:aec52e80a85ca0737723f5d9b358b1660"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equality comparison of two integers corresponding to float values.  <a href="#aec52e80a85ca0737723f5d9b358b1660">More...</a><br/></td></tr>
<tr class="separator:aec52e80a85ca0737723f5d9b358b1660"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb9d95ea1f60f4422ff48866615741d3"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#afb9d95ea1f60f4422ff48866615741d3">operator&lt;</a> (<a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a, <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> b)</td></tr>
<tr class="memdesc:afb9d95ea1f60f4422ff48866615741d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Less-than comparison of two SIMD integers corresponding to float values.  <a href="#afb9d95ea1f60f4422ff48866615741d3">More...</a><br/></td></tr>
<tr class="separator:afb9d95ea1f60f4422ff48866615741d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47337ed69b038e337974eb220e9455bd"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a47337ed69b038e337974eb220e9455bd">testBits</a> (<a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a)</td></tr>
<tr class="memdesc:a47337ed69b038e337974eb220e9455bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if any bit is set in each element.  <a href="#a47337ed69b038e337974eb220e9455bd">More...</a><br/></td></tr>
<tr class="separator:a47337ed69b038e337974eb220e9455bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0187183d12327ef78c5c5307dd6e1fbf"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0187183d12327ef78c5c5307dd6e1fbf">operator&amp;&amp;</a> (<a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> a, <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> b)</td></tr>
<tr class="memdesc:a0187183d12327ef78c5c5307dd6e1fbf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical AND on <a class="el" href="classgmx_1_1SimdFIBool.xhtml" title="Boolean type for integer datatypes corresponding to float SIMD. ">SimdFIBool</a>.  <a href="#a0187183d12327ef78c5c5307dd6e1fbf">More...</a><br/></td></tr>
<tr class="separator:a0187183d12327ef78c5c5307dd6e1fbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7b197309edc60323a129fa9620a7400"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ab7b197309edc60323a129fa9620a7400">operator||</a> (<a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> a, <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> b)</td></tr>
<tr class="memdesc:ab7b197309edc60323a129fa9620a7400"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical OR on <a class="el" href="classgmx_1_1SimdFIBool.xhtml" title="Boolean type for integer datatypes corresponding to float SIMD. ">SimdFIBool</a>.  <a href="#ab7b197309edc60323a129fa9620a7400">More...</a><br/></td></tr>
<tr class="separator:ab7b197309edc60323a129fa9620a7400"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac07fb03248b03957ceee7a258cb01ec9"><td class="memItemLeft" align="right" valign="top">static bool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ac07fb03248b03957ceee7a258cb01ec9">anyTrue</a> (<a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> a)</td></tr>
<tr class="memdesc:ac07fb03248b03957ceee7a258cb01ec9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if any of the boolean in x is True, otherwise 0.  <a href="#ac07fb03248b03957ceee7a258cb01ec9">More...</a><br/></td></tr>
<tr class="separator:ac07fb03248b03957ceee7a258cb01ec9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a514569727a2e78d7308e19718aa52073"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a514569727a2e78d7308e19718aa52073">selectByMask</a> (<a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a, <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> mask)</td></tr>
<tr class="memdesc:a514569727a2e78d7308e19718aa52073"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from <a class="el" href="classgmx_1_1SimdFInt32.xhtml">gmx::SimdFInt32</a> variable where boolean is true.  <a href="#a514569727a2e78d7308e19718aa52073">More...</a><br/></td></tr>
<tr class="separator:a514569727a2e78d7308e19718aa52073"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab614faa655138f6dd9647301290d993d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ab614faa655138f6dd9647301290d993d">selectByNotMask</a> (<a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a, <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> mask)</td></tr>
<tr class="memdesc:ab614faa655138f6dd9647301290d993d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from <a class="el" href="classgmx_1_1SimdFInt32.xhtml">gmx::SimdFInt32</a> variable where boolean is false.  <a href="#ab614faa655138f6dd9647301290d993d">More...</a><br/></td></tr>
<tr class="separator:ab614faa655138f6dd9647301290d993d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f3f322cbf3a7d646003849046028f65"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3f3f322cbf3a7d646003849046028f65">blend</a> (<a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> a, <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> b, <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> sel)</td></tr>
<tr class="memdesc:a3f3f322cbf3a7d646003849046028f65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector-blend SIMD integer selection.  <a href="#a3f3f322cbf3a7d646003849046028f65">More...</a><br/></td></tr>
<tr class="separator:a3f3f322cbf3a7d646003849046028f65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Higher-level SIMD utilities accessing partial (half-width) SIMD doubles.</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>See the single-precision versions for documentation. Since double precision is typically half the width of single, this double version is likely only useful with 512-bit and larger implementations. </p>
</div></td></tr>
<tr class="memitem:a5ddc2fd6582a66337e35df94128c183c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a5ddc2fd6582a66337e35df94128c183c">loadDualHsimd</a> (const double *m0, const double *m1)</td></tr>
<tr class="memdesc:a5ddc2fd6582a66337e35df94128c183c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load low &amp; high parts of SIMD double from different locations.  <a href="#a5ddc2fd6582a66337e35df94128c183c">More...</a><br/></td></tr>
<tr class="separator:a5ddc2fd6582a66337e35df94128c183c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fc17c3e9b2d0f83db3b7f1274f945b5"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0fc17c3e9b2d0f83db3b7f1274f945b5">loadDuplicateHsimd</a> (const double *m)</td></tr>
<tr class="memdesc:a0fc17c3e9b2d0f83db3b7f1274f945b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load half-SIMD-width double data, spread to both halves.  <a href="#a0fc17c3e9b2d0f83db3b7f1274f945b5">More...</a><br/></td></tr>
<tr class="separator:a0fc17c3e9b2d0f83db3b7f1274f945b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a110e4ed8c03c3842609f70bcf1d86dab"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a110e4ed8c03c3842609f70bcf1d86dab">load1DualHsimd</a> (const double *m)</td></tr>
<tr class="memdesc:a110e4ed8c03c3842609f70bcf1d86dab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load two doubles, spread 1st in low half, 2nd in high half.  <a href="#a110e4ed8c03c3842609f70bcf1d86dab">More...</a><br/></td></tr>
<tr class="separator:a110e4ed8c03c3842609f70bcf1d86dab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a875057cc36d19c7e9be3f840612428d4"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a875057cc36d19c7e9be3f840612428d4">storeDualHsimd</a> (double *m0, double *m1, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a)</td></tr>
<tr class="memdesc:a875057cc36d19c7e9be3f840612428d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store low &amp; high parts of SIMD double to different locations.  <a href="#a875057cc36d19c7e9be3f840612428d4">More...</a><br/></td></tr>
<tr class="separator:a875057cc36d19c7e9be3f840612428d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e7f54c2fe31c60ecc1dd2b4c95667d8"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2e7f54c2fe31c60ecc1dd2b4c95667d8">incrDualHsimd</a> (double *m0, double *m1, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a)</td></tr>
<tr class="memdesc:a2e7f54c2fe31c60ecc1dd2b4c95667d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add each half of SIMD variable to separate memory adresses.  <a href="#a2e7f54c2fe31c60ecc1dd2b4c95667d8">More...</a><br/></td></tr>
<tr class="separator:a2e7f54c2fe31c60ecc1dd2b4c95667d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0233e7b9cab30a7cd2ad5e59d8910a35"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0233e7b9cab30a7cd2ad5e59d8910a35">decrHsimd</a> (double *m, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> a)</td></tr>
<tr class="memdesc:a0233e7b9cab30a7cd2ad5e59d8910a35"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the two halves of a SIMD double, subtract the sum from half-SIMD-width consecutive doubles in memory.  <a href="#a0233e7b9cab30a7cd2ad5e59d8910a35">More...</a><br/></td></tr>
<tr class="separator:a0233e7b9cab30a7cd2ad5e59d8910a35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66c1f8fc580e64de5835134f18f75f61"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:a66c1f8fc580e64de5835134f18f75f61"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a66c1f8fc580e64de5835134f18f75f61">gatherLoadTransposeHsimd</a> (const double *base0, const double *base1, std::int32_t offset[], <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *v1)</td></tr>
<tr class="memdesc:a66c1f8fc580e64de5835134f18f75f61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 consecutive doubles from each of GMX_SIMD_DOUBLE_WIDTH/2 offsets, transpose into SIMD double (low half from base0, high from base1).  <a href="#a66c1f8fc580e64de5835134f18f75f61">More...</a><br/></td></tr>
<tr class="separator:a66c1f8fc580e64de5835134f18f75f61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a774b79fe30e71192635a3081e369023e"><td class="memItemLeft" align="right" valign="top">static double gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a774b79fe30e71192635a3081e369023e">reduceIncr4ReturnSumHsimd</a> (double *m, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> v0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> v1)</td></tr>
<tr class="memdesc:a774b79fe30e71192635a3081e369023e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reduce the 4 half-SIMD-with doubles in 2 SIMD variables (sum halves), increment four consecutive doubles in memory, return sum.  <a href="#a774b79fe30e71192635a3081e369023e">More...</a><br/></td></tr>
<tr class="separator:a774b79fe30e71192635a3081e369023e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Higher-level SIMD utilities accessing partial (half-width) SIMD floats.</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>These functions are optional. The are only useful for SIMD implementation where the width is 8 or larger, and where it would be inefficient to process 4*8, 8*8, or more, interactions in parallel.</p>
<p>Currently, only Intel provides very wide SIMD implementations, but these also come with excellent support for loading, storing, accessing and shuffling parts of the register in so-called 'lanes' of 4 bytes each. We can use this to load separate parts into the low/high halves of the register in the inner loop of the nonbonded kernel, which e.g. makes it possible to process 4*4 nonbonded interactions as a pattern of 2*8. We can also use implementations with width 16 or greater.</p>
<p>To make this more generic, when <a class="el" href="group__module__simd.xhtml#ga0d9f8d6284ecbbd135b89f2ad8999839">GMX_SIMD_HAVE_HSIMD_UTIL_REAL</a> is 1, the SIMD implementation provides seven special routines that:</p>
<ul>
<li>Load the low/high parts of a SIMD variable from different pointers</li>
<li>Load half the SIMD width from one pointer, and duplicate in low/high parts</li>
<li>Load two reals, put 1st one in all low elements, and 2nd in all high ones.</li>
<li>Store the low/high parts of a SIMD variable to different pointers</li>
<li>Subtract both SIMD halves from a single half-SIMD-width memory location.</li>
<li>Load aligned pairs (LJ parameters) from two base pointers, with a common offset list, and put these in the low/high SIMD halves.</li>
<li>Reduce each half of two SIMD registers (i.e., 4 parts in total), increment four adjacent memory positions, and return the total sum.</li>
</ul>
<p>Remember: this is ONLY used when the native SIMD width is large. You will just waste time if you implement it for normal 16-byte SIMD architectures.</p>
<p>This is part of the new C++ SIMD interface, so these functions are only available when using C++. Since some Gromacs code reliying on the SIMD module is still C (not C++), we have kept the C-style naming for now - this will change once we are entirely C++. </p>
</div></td></tr>
<tr class="memitem:a22b5bada57cd592ed73c5af81953f4b1"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a22b5bada57cd592ed73c5af81953f4b1">loadDualHsimd</a> (const float *m0, const float *m1)</td></tr>
<tr class="memdesc:a22b5bada57cd592ed73c5af81953f4b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load low &amp; high parts of SIMD float from different locations.  <a href="#a22b5bada57cd592ed73c5af81953f4b1">More...</a><br/></td></tr>
<tr class="separator:a22b5bada57cd592ed73c5af81953f4b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62c7b5f1de8725256644546b05e3e63b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a62c7b5f1de8725256644546b05e3e63b">loadDuplicateHsimd</a> (const float *m)</td></tr>
<tr class="memdesc:a62c7b5f1de8725256644546b05e3e63b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load half-SIMD-width float data, spread to both halves.  <a href="#a62c7b5f1de8725256644546b05e3e63b">More...</a><br/></td></tr>
<tr class="separator:a62c7b5f1de8725256644546b05e3e63b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa822fac47b4eafdd526a831d32438840"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa822fac47b4eafdd526a831d32438840">load1DualHsimd</a> (const float *m)</td></tr>
<tr class="memdesc:aa822fac47b4eafdd526a831d32438840"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load two floats, spread 1st in low half, 2nd in high half.  <a href="#aa822fac47b4eafdd526a831d32438840">More...</a><br/></td></tr>
<tr class="separator:aa822fac47b4eafdd526a831d32438840"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e9a1e1e45a47398ab3d7eb1732d9abc"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a5e9a1e1e45a47398ab3d7eb1732d9abc">storeDualHsimd</a> (float *m0, float *m1, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a)</td></tr>
<tr class="memdesc:a5e9a1e1e45a47398ab3d7eb1732d9abc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store low &amp; high parts of SIMD float to different locations.  <a href="#a5e9a1e1e45a47398ab3d7eb1732d9abc">More...</a><br/></td></tr>
<tr class="separator:a5e9a1e1e45a47398ab3d7eb1732d9abc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02c414f8f25b517e035764998720dd1c"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a02c414f8f25b517e035764998720dd1c">incrDualHsimd</a> (float *m0, float *m1, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a)</td></tr>
<tr class="memdesc:a02c414f8f25b517e035764998720dd1c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add each half of SIMD variable to separate memory adresses.  <a href="#a02c414f8f25b517e035764998720dd1c">More...</a><br/></td></tr>
<tr class="separator:a02c414f8f25b517e035764998720dd1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab498b7b673584374b736bb2299575f3b"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ab498b7b673584374b736bb2299575f3b">decrHsimd</a> (float *m, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> a)</td></tr>
<tr class="memdesc:ab498b7b673584374b736bb2299575f3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the two halves of a SIMD float, subtract the sum from half-SIMD-width consecutive floats in memory.  <a href="#ab498b7b673584374b736bb2299575f3b">More...</a><br/></td></tr>
<tr class="separator:ab498b7b673584374b736bb2299575f3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11666cd65bdfee331799b2c1dc732c60"><td class="memTemplParams" colspan="2">template&lt;int align&gt; </td></tr>
<tr class="memitem:a11666cd65bdfee331799b2c1dc732c60"><td class="memTemplItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a11666cd65bdfee331799b2c1dc732c60">gatherLoadTransposeHsimd</a> (const float *base0, const float *base1, const std::int32_t offset[], <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v0, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *v1)</td></tr>
<tr class="memdesc:a11666cd65bdfee331799b2c1dc732c60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load 2 consecutive floats from each of GMX_SIMD_FLOAT_WIDTH/2 offsets, transpose into SIMD float (low half from base0, high from base1).  <a href="#a11666cd65bdfee331799b2c1dc732c60">More...</a><br/></td></tr>
<tr class="separator:a11666cd65bdfee331799b2c1dc732c60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab658dd5cd12d3a06f13bc4b36de8ef97"><td class="memItemLeft" align="right" valign="top">static float gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ab658dd5cd12d3a06f13bc4b36de8ef97">reduceIncr4ReturnSumHsimd</a> (float *m, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> v0, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> v1)</td></tr>
<tr class="memdesc:ab658dd5cd12d3a06f13bc4b36de8ef97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reduce the 4 half-SIMD-with floats in 2 SIMD variables (sum halves), increment four consecutive floats in memory, return sum.  <a href="#ab658dd5cd12d3a06f13bc4b36de8ef97">More...</a><br/></td></tr>
<tr class="separator:ab658dd5cd12d3a06f13bc4b36de8ef97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">High-level SIMD proxy objects to disambiguate load/set operations</div></td></tr>
<tr class="memitem:af6ad160249e7bc4726d93e89407c987e"><td class="memItemLeft" align="right" valign="top">static const <br class="typebreak"/>
<a class="el" href="classgmx_1_1SimdLoadFProxyInternal.xhtml">SimdLoadFProxyInternal</a> <br class="typebreak"/>
gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af6ad160249e7bc4726d93e89407c987e">load</a> (const float *m)</td></tr>
<tr class="memdesc:af6ad160249e7bc4726d93e89407c987e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load function that returns proxy object for <a class="el" href="classgmx_1_1SimdFloat.xhtml" title="Float SIMD variable. Available if GMX_SIMD_HAVE_FLOAT is 1. ">SimdFloat</a> and float.  <a href="#af6ad160249e7bc4726d93e89407c987e">More...</a><br/></td></tr>
<tr class="separator:af6ad160249e7bc4726d93e89407c987e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac60a1e9bf9b5e7ae62895fb23311d99"><td class="memItemLeft" align="right" valign="top">static const <br class="typebreak"/>
<a class="el" href="classgmx_1_1SimdLoadUFProxyInternal.xhtml">SimdLoadUFProxyInternal</a> <br class="typebreak"/>
gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aac60a1e9bf9b5e7ae62895fb23311d99">loadU</a> (const float *m)</td></tr>
<tr class="memdesc:aac60a1e9bf9b5e7ae62895fb23311d99"><td class="mdescLeft">&#160;</td><td class="mdescRight">LoadU function that returns proxy object for <a class="el" href="classgmx_1_1SimdFloat.xhtml" title="Float SIMD variable. Available if GMX_SIMD_HAVE_FLOAT is 1. ">SimdFloat</a> and float.  <a href="#aac60a1e9bf9b5e7ae62895fb23311d99">More...</a><br/></td></tr>
<tr class="separator:aac60a1e9bf9b5e7ae62895fb23311d99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9445e827c666024d7b59d6c40052f1ea"><td class="memItemLeft" align="right" valign="top">static const <br class="typebreak"/>
<a class="el" href="classgmx_1_1SimdLoadDProxyInternal.xhtml">SimdLoadDProxyInternal</a> <br class="typebreak"/>
gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a9445e827c666024d7b59d6c40052f1ea">load</a> (const double *m)</td></tr>
<tr class="memdesc:a9445e827c666024d7b59d6c40052f1ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load function that returns proxy object for <a class="el" href="classgmx_1_1SimdDouble.xhtml" title="Double SIMD variable. Available if GMX_SIMD_HAVE_DOUBLE is 1. ">SimdDouble</a> and double.  <a href="#a9445e827c666024d7b59d6c40052f1ea">More...</a><br/></td></tr>
<tr class="separator:a9445e827c666024d7b59d6c40052f1ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb032148e6416b68e560f6683c889519"><td class="memItemLeft" align="right" valign="top">static const <br class="typebreak"/>
<a class="el" href="classgmx_1_1SimdLoadUDProxyInternal.xhtml">SimdLoadUDProxyInternal</a> <br class="typebreak"/>
gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#adb032148e6416b68e560f6683c889519">loadU</a> (const double *m)</td></tr>
<tr class="memdesc:adb032148e6416b68e560f6683c889519"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load function that returns proxy object for <a class="el" href="classgmx_1_1SimdDouble.xhtml" title="Double SIMD variable. Available if GMX_SIMD_HAVE_DOUBLE is 1. ">SimdDouble</a> and double.  <a href="#adb032148e6416b68e560f6683c889519">More...</a><br/></td></tr>
<tr class="separator:adb032148e6416b68e560f6683c889519"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad94d8159b73ca606c72cb0210cd69ad7"><td class="memItemLeft" align="right" valign="top">static const <br class="typebreak"/>
<a class="el" href="classgmx_1_1SimdLoadIProxyInternal.xhtml">SimdLoadIProxyInternal</a> <br class="typebreak"/>
gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad94d8159b73ca606c72cb0210cd69ad7">load</a> (const std::int32_t *m)</td></tr>
<tr class="memdesc:ad94d8159b73ca606c72cb0210cd69ad7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer load function (proxy object) for <a class="el" href="classgmx_1_1SimdFInt32.xhtml" title="Integer SIMD variable type to use for conversions to/from float. ">SimdFInt32</a>, SImdDInt32, and int32.  <a href="#ad94d8159b73ca606c72cb0210cd69ad7">More...</a><br/></td></tr>
<tr class="separator:ad94d8159b73ca606c72cb0210cd69ad7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a121aa049cf305d012ca3c4462eb5e5f7"><td class="memItemLeft" align="right" valign="top">static const <br class="typebreak"/>
<a class="el" href="classgmx_1_1SimdLoadUIProxyInternal.xhtml">SimdLoadUIProxyInternal</a> <br class="typebreak"/>
gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a121aa049cf305d012ca3c4462eb5e5f7">loadU</a> (const std::int32_t *m)</td></tr>
<tr class="memdesc:a121aa049cf305d012ca3c4462eb5e5f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer loadU function (proxy object) for <a class="el" href="classgmx_1_1SimdFInt32.xhtml" title="Integer SIMD variable type to use for conversions to/from float. ">SimdFInt32</a>, SImdDInt32, and int32.  <a href="#a121aa049cf305d012ca3c4462eb5e5f7">More...</a><br/></td></tr>
<tr class="separator:a121aa049cf305d012ca3c4462eb5e5f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b9689c4629a14843a0464a0053c8e9e"><td class="memItemLeft" align="right" valign="top">static const <br class="typebreak"/>
<a class="el" href="classgmx_1_1SimdSetZeroProxyInternal.xhtml">SimdSetZeroProxyInternal</a> <br class="typebreak"/>
gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a1b9689c4629a14843a0464a0053c8e9e">setZero</a> ()</td></tr>
<tr class="memdesc:a1b9689c4629a14843a0464a0053c8e9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Proxy object to set any SIMD or scalar variable to zero.  <a href="#a1b9689c4629a14843a0464a0053c8e9e">More...</a><br/></td></tr>
<tr class="separator:a1b9689c4629a14843a0464a0053c8e9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Single precision SIMD math functions</div></td></tr>
<tr><td colspan="2"><div class="groupText"><dl class="section note"><dt>Note</dt><dd>In most cases you should use the real-precision functions instead. </dd></dl>
</div></td></tr>
<tr class="memitem:gacb8a1939549a71a3c2861de9ce865301"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gacb8a1939549a71a3c2861de9ce865301">copysign</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> y)</td></tr>
<tr class="memdesc:gacb8a1939549a71a3c2861de9ce865301"><td class="mdescLeft">&#160;</td><td class="mdescRight">Composes floating point value with the magnitude of x and the sign of y.  <a href="group__module__simd.xhtml#gacb8a1939549a71a3c2861de9ce865301">More...</a><br/></td></tr>
<tr class="separator:gacb8a1939549a71a3c2861de9ce865301"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gade7401625051e95c057a8f5fe6dc5fbc"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gade7401625051e95c057a8f5fe6dc5fbc">rsqrtIter</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> lu, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:gade7401625051e95c057a8f5fe6dc5fbc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform one Newton-Raphson iteration to improve 1/sqrt(x) for SIMD float.  <a href="group__module__simd.xhtml#gade7401625051e95c057a8f5fe6dc5fbc">More...</a><br/></td></tr>
<tr class="separator:gade7401625051e95c057a8f5fe6dc5fbc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1bf9fd932f39d4ad83b360395f1c3986"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga1bf9fd932f39d4ad83b360395f1c3986">invsqrt</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga1bf9fd932f39d4ad83b360395f1c3986"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for SIMD float.  <a href="group__module__simd.xhtml#ga1bf9fd932f39d4ad83b360395f1c3986">More...</a><br/></td></tr>
<tr class="separator:ga1bf9fd932f39d4ad83b360395f1c3986"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2a4b0a1815e2a09330e4e61444b3f630"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga2a4b0a1815e2a09330e4e61444b3f630">invsqrtPair</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x0, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x1, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *out0, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *out1)</td></tr>
<tr class="memdesc:ga2a4b0a1815e2a09330e4e61444b3f630"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for two SIMD floats.  <a href="group__module__simd.xhtml#ga2a4b0a1815e2a09330e4e61444b3f630">More...</a><br/></td></tr>
<tr class="separator:ga2a4b0a1815e2a09330e4e61444b3f630"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga85e439a79e5b92d8544451b8c1ba41f5"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga85e439a79e5b92d8544451b8c1ba41f5">rcpIter</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> lu, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga85e439a79e5b92d8544451b8c1ba41f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform one Newton-Raphson iteration to improve 1/x for SIMD float.  <a href="group__module__simd.xhtml#ga85e439a79e5b92d8544451b8c1ba41f5">More...</a><br/></td></tr>
<tr class="separator:ga85e439a79e5b92d8544451b8c1ba41f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6a3c6ca88a6073aba3eb600da20cc92b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga6a3c6ca88a6073aba3eb600da20cc92b">inv</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga6a3c6ca88a6073aba3eb600da20cc92b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/x for SIMD float.  <a href="group__module__simd.xhtml#ga6a3c6ca88a6073aba3eb600da20cc92b">More...</a><br/></td></tr>
<tr class="separator:ga6a3c6ca88a6073aba3eb600da20cc92b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0f60c988e122306d212679a83bd12910"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga0f60c988e122306d212679a83bd12910">operator/</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> nom, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> denom)</td></tr>
<tr class="memdesc:ga0f60c988e122306d212679a83bd12910"><td class="mdescLeft">&#160;</td><td class="mdescRight">Division for SIMD floats.  <a href="group__module__simd.xhtml#ga0f60c988e122306d212679a83bd12910">More...</a><br/></td></tr>
<tr class="separator:ga0f60c988e122306d212679a83bd12910"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab41aa57f986f3983040e5f589e3eb07c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gab41aa57f986f3983040e5f589e3eb07c">maskzInvsqrt</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x, <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> m)</td></tr>
<tr class="memdesc:gab41aa57f986f3983040e5f589e3eb07c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for masked entries of SIMD float.  <a href="group__module__simd.xhtml#gab41aa57f986f3983040e5f589e3eb07c">More...</a><br/></td></tr>
<tr class="separator:gab41aa57f986f3983040e5f589e3eb07c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae1968e5334b953108c682435b6e59694"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gae1968e5334b953108c682435b6e59694">maskzInv</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x, <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> m)</td></tr>
<tr class="memdesc:gae1968e5334b953108c682435b6e59694"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/x for SIMD float, masked version.  <a href="group__module__simd.xhtml#gae1968e5334b953108c682435b6e59694">More...</a><br/></td></tr>
<tr class="separator:gae1968e5334b953108c682435b6e59694"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1d2c28e41df6d892f3d043868337d1f7"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga1d2c28e41df6d892f3d043868337d1f7">sqrt</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga1d2c28e41df6d892f3d043868337d1f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate sqrt(x) correctly for SIMD floats, including argument 0.0.  <a href="group__module__simd.xhtml#ga1d2c28e41df6d892f3d043868337d1f7">More...</a><br/></td></tr>
<tr class="separator:ga1d2c28e41df6d892f3d043868337d1f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga332f838e799c55c26e23126ea2aeace5"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga332f838e799c55c26e23126ea2aeace5">log</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga332f838e799c55c26e23126ea2aeace5"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float log(x). This is the natural logarithm.  <a href="group__module__simd.xhtml#ga332f838e799c55c26e23126ea2aeace5">More...</a><br/></td></tr>
<tr class="separator:ga332f838e799c55c26e23126ea2aeace5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1b3445fee9da86cf6b12f6b378f402ce"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga1b3445fee9da86cf6b12f6b378f402ce">exp2</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga1b3445fee9da86cf6b12f6b378f402ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float 2^x.  <a href="group__module__simd.xhtml#ga1b3445fee9da86cf6b12f6b378f402ce">More...</a><br/></td></tr>
<tr class="separator:ga1b3445fee9da86cf6b12f6b378f402ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf3ae8db3847b4c3ba765f6b9b51e6c80"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaf3ae8db3847b4c3ba765f6b9b51e6c80">exp</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:gaf3ae8db3847b4c3ba765f6b9b51e6c80"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float exp(x).  <a href="group__module__simd.xhtml#gaf3ae8db3847b4c3ba765f6b9b51e6c80">More...</a><br/></td></tr>
<tr class="separator:gaf3ae8db3847b4c3ba765f6b9b51e6c80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga60e354f86286dc5b7620f6bc663bb089"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga60e354f86286dc5b7620f6bc663bb089">erf</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga60e354f86286dc5b7620f6bc663bb089"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float erf(x).  <a href="group__module__simd.xhtml#ga60e354f86286dc5b7620f6bc663bb089">More...</a><br/></td></tr>
<tr class="separator:ga60e354f86286dc5b7620f6bc663bb089"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e169e3f45d0532ab2350daad387ca57"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga1e169e3f45d0532ab2350daad387ca57">erfc</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga1e169e3f45d0532ab2350daad387ca57"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float erfc(x).  <a href="group__module__simd.xhtml#ga1e169e3f45d0532ab2350daad387ca57">More...</a><br/></td></tr>
<tr class="separator:ga1e169e3f45d0532ab2350daad387ca57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2640bfdb9db1762df1b5da82d80e73b8"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga2640bfdb9db1762df1b5da82d80e73b8">sincos</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *sinval, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> *cosval)</td></tr>
<tr class="memdesc:ga2640bfdb9db1762df1b5da82d80e73b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float sin &amp; cos.  <a href="group__module__simd.xhtml#ga2640bfdb9db1762df1b5da82d80e73b8">More...</a><br/></td></tr>
<tr class="separator:ga2640bfdb9db1762df1b5da82d80e73b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9ef875418e7985b298af5f6d58f32e23"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga9ef875418e7985b298af5f6d58f32e23">sin</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga9ef875418e7985b298af5f6d58f32e23"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float sin(x).  <a href="group__module__simd.xhtml#ga9ef875418e7985b298af5f6d58f32e23">More...</a><br/></td></tr>
<tr class="separator:ga9ef875418e7985b298af5f6d58f32e23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9c58146cc6b29eaa9756faea26eba851"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga9c58146cc6b29eaa9756faea26eba851">cos</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga9c58146cc6b29eaa9756faea26eba851"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float cos(x).  <a href="group__module__simd.xhtml#ga9c58146cc6b29eaa9756faea26eba851">More...</a><br/></td></tr>
<tr class="separator:ga9c58146cc6b29eaa9756faea26eba851"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa9b029f69c4afa8bbe7941990507d0f5"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaa9b029f69c4afa8bbe7941990507d0f5">tan</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:gaa9b029f69c4afa8bbe7941990507d0f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float tan(x).  <a href="group__module__simd.xhtml#gaa9b029f69c4afa8bbe7941990507d0f5">More...</a><br/></td></tr>
<tr class="separator:gaa9b029f69c4afa8bbe7941990507d0f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabad1890270f5f95bf48d2decd31c7a1a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gabad1890270f5f95bf48d2decd31c7a1a">asin</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:gabad1890270f5f95bf48d2decd31c7a1a"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float asin(x).  <a href="group__module__simd.xhtml#gabad1890270f5f95bf48d2decd31c7a1a">More...</a><br/></td></tr>
<tr class="separator:gabad1890270f5f95bf48d2decd31c7a1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga95f617b5ff9a30dde812f59c8c50bab4"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga95f617b5ff9a30dde812f59c8c50bab4">acos</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga95f617b5ff9a30dde812f59c8c50bab4"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float acos(x).  <a href="group__module__simd.xhtml#ga95f617b5ff9a30dde812f59c8c50bab4">More...</a><br/></td></tr>
<tr class="separator:ga95f617b5ff9a30dde812f59c8c50bab4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac4afec2509b0edcdae7fe2ddfc2f3ecc"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gac4afec2509b0edcdae7fe2ddfc2f3ecc">atan</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:gac4afec2509b0edcdae7fe2ddfc2f3ecc"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float asin(x).  <a href="group__module__simd.xhtml#gac4afec2509b0edcdae7fe2ddfc2f3ecc">More...</a><br/></td></tr>
<tr class="separator:gac4afec2509b0edcdae7fe2ddfc2f3ecc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7f1a591557aea01675643b86653ca136"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga7f1a591557aea01675643b86653ca136">atan2</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> y, <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> x)</td></tr>
<tr class="memdesc:ga7f1a591557aea01675643b86653ca136"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float atan2(y,x).  <a href="group__module__simd.xhtml#ga7f1a591557aea01675643b86653ca136">More...</a><br/></td></tr>
<tr class="separator:ga7f1a591557aea01675643b86653ca136"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae7ea15fc154a3be2831f786b660b8a6c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gae7ea15fc154a3be2831f786b660b8a6c">pmeForceCorrection</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> z2)</td></tr>
<tr class="memdesc:gae7ea15fc154a3be2831f786b660b8a6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the force correction due to PME analytically in SIMD float.  <a href="group__module__simd.xhtml#gae7ea15fc154a3be2831f786b660b8a6c">More...</a><br/></td></tr>
<tr class="separator:gae7ea15fc154a3be2831f786b660b8a6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5324a396c60387bdb3cf42e734f6b465"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga5324a396c60387bdb3cf42e734f6b465">pmePotentialCorrection</a> (<a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> z2)</td></tr>
<tr class="memdesc:ga5324a396c60387bdb3cf42e734f6b465"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the potential correction due to PME analytically in SIMD float.  <a href="group__module__simd.xhtml#ga5324a396c60387bdb3cf42e734f6b465">More...</a><br/></td></tr>
<tr class="separator:ga5324a396c60387bdb3cf42e734f6b465"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Double precision SIMD math functions</div></td></tr>
<tr><td colspan="2"><div class="groupText"><dl class="section note"><dt>Note</dt><dd>In most cases you should use the real-precision functions instead. </dd></dl>
</div></td></tr>
<tr class="memitem:ga3013bbebe9a43572658b37ad9b6b13be"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga3013bbebe9a43572658b37ad9b6b13be">copysign</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> y)</td></tr>
<tr class="memdesc:ga3013bbebe9a43572658b37ad9b6b13be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Composes floating point value with the magnitude of x and the sign of y.  <a href="group__module__simd.xhtml#ga3013bbebe9a43572658b37ad9b6b13be">More...</a><br/></td></tr>
<tr class="separator:ga3013bbebe9a43572658b37ad9b6b13be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9dfcf89d49e6e2f75f1249972f2e270f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga9dfcf89d49e6e2f75f1249972f2e270f">rsqrtIter</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> lu, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga9dfcf89d49e6e2f75f1249972f2e270f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform one Newton-Raphson iteration to improve 1/sqrt(x) for SIMD double.  <a href="group__module__simd.xhtml#ga9dfcf89d49e6e2f75f1249972f2e270f">More...</a><br/></td></tr>
<tr class="separator:ga9dfcf89d49e6e2f75f1249972f2e270f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae7e05436d95febdcc32866b5e8eca46a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gae7e05436d95febdcc32866b5e8eca46a">invsqrt</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:gae7e05436d95febdcc32866b5e8eca46a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for SIMD double.  <a href="group__module__simd.xhtml#gae7e05436d95febdcc32866b5e8eca46a">More...</a><br/></td></tr>
<tr class="separator:gae7e05436d95febdcc32866b5e8eca46a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4a20afb3111cd1748f262a693338362b"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga4a20afb3111cd1748f262a693338362b">invsqrtPair</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x1, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *out0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *out1)</td></tr>
<tr class="memdesc:ga4a20afb3111cd1748f262a693338362b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for two SIMD doubles.  <a href="group__module__simd.xhtml#ga4a20afb3111cd1748f262a693338362b">More...</a><br/></td></tr>
<tr class="separator:ga4a20afb3111cd1748f262a693338362b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa0f0ffc8730b377743e0b5433d4e2f1a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaa0f0ffc8730b377743e0b5433d4e2f1a">rcpIter</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> lu, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:gaa0f0ffc8730b377743e0b5433d4e2f1a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform one Newton-Raphson iteration to improve 1/x for SIMD double.  <a href="group__module__simd.xhtml#gaa0f0ffc8730b377743e0b5433d4e2f1a">More...</a><br/></td></tr>
<tr class="separator:gaa0f0ffc8730b377743e0b5433d4e2f1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga698c7785928f003a6f8f0218550ef3af"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga698c7785928f003a6f8f0218550ef3af">inv</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga698c7785928f003a6f8f0218550ef3af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/x for SIMD double.  <a href="group__module__simd.xhtml#ga698c7785928f003a6f8f0218550ef3af">More...</a><br/></td></tr>
<tr class="separator:ga698c7785928f003a6f8f0218550ef3af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0d5275903c74226798172bd46bac3e87"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga0d5275903c74226798172bd46bac3e87">operator/</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> nom, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> denom)</td></tr>
<tr class="memdesc:ga0d5275903c74226798172bd46bac3e87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Division for SIMD doubles.  <a href="group__module__simd.xhtml#ga0d5275903c74226798172bd46bac3e87">More...</a><br/></td></tr>
<tr class="separator:ga0d5275903c74226798172bd46bac3e87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3342ee008526f40deb602eb1024ba895"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga3342ee008526f40deb602eb1024ba895">maskzInvsqrt</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x, <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> m)</td></tr>
<tr class="memdesc:ga3342ee008526f40deb602eb1024ba895"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for masked entries of SIMD double.  <a href="group__module__simd.xhtml#ga3342ee008526f40deb602eb1024ba895">More...</a><br/></td></tr>
<tr class="separator:ga3342ee008526f40deb602eb1024ba895"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga91e427c6575308730c135fb8de51a7c9"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga91e427c6575308730c135fb8de51a7c9">maskzInv</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x, <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> m)</td></tr>
<tr class="memdesc:ga91e427c6575308730c135fb8de51a7c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/x for SIMD double, masked version.  <a href="group__module__simd.xhtml#ga91e427c6575308730c135fb8de51a7c9">More...</a><br/></td></tr>
<tr class="separator:ga91e427c6575308730c135fb8de51a7c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga79fb2a08a687e05eb88794a3fe2bd4f0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga79fb2a08a687e05eb88794a3fe2bd4f0">sqrt</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga79fb2a08a687e05eb88794a3fe2bd4f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate sqrt(x) correctly for SIMD doubles, including argument 0.0.  <a href="group__module__simd.xhtml#ga79fb2a08a687e05eb88794a3fe2bd4f0">More...</a><br/></td></tr>
<tr class="separator:ga79fb2a08a687e05eb88794a3fe2bd4f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2b6148113de97d3d9e2c9340c72debae"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga2b6148113de97d3d9e2c9340c72debae">log</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga2b6148113de97d3d9e2c9340c72debae"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double log(x). This is the natural logarithm.  <a href="group__module__simd.xhtml#ga2b6148113de97d3d9e2c9340c72debae">More...</a><br/></td></tr>
<tr class="separator:ga2b6148113de97d3d9e2c9340c72debae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga47973fa75d633ed078827a63b037ec5e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga47973fa75d633ed078827a63b037ec5e">exp2</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga47973fa75d633ed078827a63b037ec5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double 2^x.  <a href="group__module__simd.xhtml#ga47973fa75d633ed078827a63b037ec5e">More...</a><br/></td></tr>
<tr class="separator:ga47973fa75d633ed078827a63b037ec5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga025472567a0e3e8aea57fed6bc01398c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga025472567a0e3e8aea57fed6bc01398c">exp</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga025472567a0e3e8aea57fed6bc01398c"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double exp(x).  <a href="group__module__simd.xhtml#ga025472567a0e3e8aea57fed6bc01398c">More...</a><br/></td></tr>
<tr class="separator:ga025472567a0e3e8aea57fed6bc01398c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga900477ac8042bfd9d6c85a06e3f003c8"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga900477ac8042bfd9d6c85a06e3f003c8">erf</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga900477ac8042bfd9d6c85a06e3f003c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double erf(x).  <a href="group__module__simd.xhtml#ga900477ac8042bfd9d6c85a06e3f003c8">More...</a><br/></td></tr>
<tr class="separator:ga900477ac8042bfd9d6c85a06e3f003c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabd11e43f0479bca8e5b9d58b73307ae6"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gabd11e43f0479bca8e5b9d58b73307ae6">erfc</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:gabd11e43f0479bca8e5b9d58b73307ae6"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double erfc(x).  <a href="group__module__simd.xhtml#gabd11e43f0479bca8e5b9d58b73307ae6">More...</a><br/></td></tr>
<tr class="separator:gabd11e43f0479bca8e5b9d58b73307ae6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga532aa17b3c80780baf5c123eb64cf645"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga532aa17b3c80780baf5c123eb64cf645">sincos</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *sinval, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *cosval)</td></tr>
<tr class="memdesc:ga532aa17b3c80780baf5c123eb64cf645"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double sin &amp; cos.  <a href="group__module__simd.xhtml#ga532aa17b3c80780baf5c123eb64cf645">More...</a><br/></td></tr>
<tr class="separator:ga532aa17b3c80780baf5c123eb64cf645"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab860ef109b42bb7e0ce25bdc304e8492"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gab860ef109b42bb7e0ce25bdc304e8492">sin</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:gab860ef109b42bb7e0ce25bdc304e8492"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double sin(x).  <a href="group__module__simd.xhtml#gab860ef109b42bb7e0ce25bdc304e8492">More...</a><br/></td></tr>
<tr class="separator:gab860ef109b42bb7e0ce25bdc304e8492"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4fb04efe2288b65a54c4e8fd5585f125"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga4fb04efe2288b65a54c4e8fd5585f125">cos</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga4fb04efe2288b65a54c4e8fd5585f125"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double cos(x).  <a href="group__module__simd.xhtml#ga4fb04efe2288b65a54c4e8fd5585f125">More...</a><br/></td></tr>
<tr class="separator:ga4fb04efe2288b65a54c4e8fd5585f125"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9f1b0a83035fb507f2827fb510fcf084"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga9f1b0a83035fb507f2827fb510fcf084">tan</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga9f1b0a83035fb507f2827fb510fcf084"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double tan(x).  <a href="group__module__simd.xhtml#ga9f1b0a83035fb507f2827fb510fcf084">More...</a><br/></td></tr>
<tr class="separator:ga9f1b0a83035fb507f2827fb510fcf084"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafc20a60ae6b0e838d65d127e944effbb"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gafc20a60ae6b0e838d65d127e944effbb">asin</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:gafc20a60ae6b0e838d65d127e944effbb"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double asin(x).  <a href="group__module__simd.xhtml#gafc20a60ae6b0e838d65d127e944effbb">More...</a><br/></td></tr>
<tr class="separator:gafc20a60ae6b0e838d65d127e944effbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5459281155e8be7fd6356c5e366acb0e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga5459281155e8be7fd6356c5e366acb0e">acos</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga5459281155e8be7fd6356c5e366acb0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double acos(x).  <a href="group__module__simd.xhtml#ga5459281155e8be7fd6356c5e366acb0e">More...</a><br/></td></tr>
<tr class="separator:ga5459281155e8be7fd6356c5e366acb0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0e327fdca86999b2716b5109621b1936"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga0e327fdca86999b2716b5109621b1936">atan</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga0e327fdca86999b2716b5109621b1936"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double asin(x).  <a href="group__module__simd.xhtml#ga0e327fdca86999b2716b5109621b1936">More...</a><br/></td></tr>
<tr class="separator:ga0e327fdca86999b2716b5109621b1936"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae3d1e53759871924024fc4bfa8cd7e41"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gae3d1e53759871924024fc4bfa8cd7e41">atan2</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> y, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:gae3d1e53759871924024fc4bfa8cd7e41"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double atan2(y,x).  <a href="group__module__simd.xhtml#gae3d1e53759871924024fc4bfa8cd7e41">More...</a><br/></td></tr>
<tr class="separator:gae3d1e53759871924024fc4bfa8cd7e41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad35bd0d2751d6097b63b26b7077ad53c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gad35bd0d2751d6097b63b26b7077ad53c">pmeForceCorrection</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> z2)</td></tr>
<tr class="memdesc:gad35bd0d2751d6097b63b26b7077ad53c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the force correction due to PME analytically in SIMD double.  <a href="group__module__simd.xhtml#gad35bd0d2751d6097b63b26b7077ad53c">More...</a><br/></td></tr>
<tr class="separator:gad35bd0d2751d6097b63b26b7077ad53c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6e52f9306e036285c0a9ac5f55565cc0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga6e52f9306e036285c0a9ac5f55565cc0">pmePotentialCorrection</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> z2)</td></tr>
<tr class="memdesc:ga6e52f9306e036285c0a9ac5f55565cc0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the potential correction due to PME analytically in SIMD double.  <a href="group__module__simd.xhtml#ga6e52f9306e036285c0a9ac5f55565cc0">More...</a><br/></td></tr>
<tr class="separator:ga6e52f9306e036285c0a9ac5f55565cc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD math functions for double prec. data, single prec. accuracy</div></td></tr>
<tr><td colspan="2"><div class="groupText"><dl class="section note"><dt>Note</dt><dd>In some cases we do not need full double accuracy of individual SIMD math functions, although the data is stored in double precision SIMD registers. This might be the case for special algorithms, or if the architecture does not support single precision. Since the full double precision evaluation of math functions typically require much more expensive polynomial approximations these functions implement the algorithms used in the single precision SIMD math functions, but they operate on double precision SIMD variables. </dd></dl>
</div></td></tr>
<tr class="memitem:ga539e3c6e2f58dbd5e59d444707237691"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga539e3c6e2f58dbd5e59d444707237691">invsqrtSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga539e3c6e2f58dbd5e59d444707237691"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for SIMD double, but in single accuracy.  <a href="group__module__simd.xhtml#ga539e3c6e2f58dbd5e59d444707237691">More...</a><br/></td></tr>
<tr class="separator:ga539e3c6e2f58dbd5e59d444707237691"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga19373a6a16b4e74441b86bdcabe1bbcb"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga19373a6a16b4e74441b86bdcabe1bbcb">maskzInvsqrtSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x, <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> m)</td></tr>
<tr class="memdesc:ga19373a6a16b4e74441b86bdcabe1bbcb"><td class="mdescLeft">&#160;</td><td class="mdescRight">1/sqrt(x) for masked-in entries of SIMD double, but in single accuracy.  <a href="group__module__simd.xhtml#ga19373a6a16b4e74441b86bdcabe1bbcb">More...</a><br/></td></tr>
<tr class="separator:ga19373a6a16b4e74441b86bdcabe1bbcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0cde0a4bdb349db5235f05fc93c0441d"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga0cde0a4bdb349db5235f05fc93c0441d">invsqrtPairSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x1, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *out0, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *out1)</td></tr>
<tr class="memdesc:ga0cde0a4bdb349db5235f05fc93c0441d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for two SIMD doubles, but single accuracy.  <a href="group__module__simd.xhtml#ga0cde0a4bdb349db5235f05fc93c0441d">More...</a><br/></td></tr>
<tr class="separator:ga0cde0a4bdb349db5235f05fc93c0441d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad500e0cd00f7c9a8b65448d3a428c57d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gad500e0cd00f7c9a8b65448d3a428c57d">invSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:gad500e0cd00f7c9a8b65448d3a428c57d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/x for SIMD double, but in single accuracy.  <a href="group__module__simd.xhtml#gad500e0cd00f7c9a8b65448d3a428c57d">More...</a><br/></td></tr>
<tr class="separator:gad500e0cd00f7c9a8b65448d3a428c57d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaed815c342f2554cecb7045da5ba52e57"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaed815c342f2554cecb7045da5ba52e57">maskzInvSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x, <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> m)</td></tr>
<tr class="memdesc:gaed815c342f2554cecb7045da5ba52e57"><td class="mdescLeft">&#160;</td><td class="mdescRight">1/x for masked entries of SIMD double, single accuracy.  <a href="group__module__simd.xhtml#gaed815c342f2554cecb7045da5ba52e57">More...</a><br/></td></tr>
<tr class="separator:gaed815c342f2554cecb7045da5ba52e57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf0240b2f28c94cad4a6ece5706eada40"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaf0240b2f28c94cad4a6ece5706eada40">sqrtSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:gaf0240b2f28c94cad4a6ece5706eada40"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate sqrt(x) (correct for 0.0) for SIMD double, single accuracy.  <a href="group__module__simd.xhtml#gaf0240b2f28c94cad4a6ece5706eada40">More...</a><br/></td></tr>
<tr class="separator:gaf0240b2f28c94cad4a6ece5706eada40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga29dcfc4f360ed173f66b26ad9ac3b28b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga29dcfc4f360ed173f66b26ad9ac3b28b">logSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga29dcfc4f360ed173f66b26ad9ac3b28b"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD log(x). Double precision SIMD data, single accuracy.  <a href="group__module__simd.xhtml#ga29dcfc4f360ed173f66b26ad9ac3b28b">More...</a><br/></td></tr>
<tr class="separator:ga29dcfc4f360ed173f66b26ad9ac3b28b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac779f45cfb482be57cfc674d1828971f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gac779f45cfb482be57cfc674d1828971f">exp2SingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:gac779f45cfb482be57cfc674d1828971f"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD 2^x. Double precision SIMD data, single accuracy.  <a href="group__module__simd.xhtml#gac779f45cfb482be57cfc674d1828971f">More...</a><br/></td></tr>
<tr class="separator:gac779f45cfb482be57cfc674d1828971f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaba7463d0b0ed07d1eb1e3e08d4558e83"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gaba7463d0b0ed07d1eb1e3e08d4558e83">expSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:gaba7463d0b0ed07d1eb1e3e08d4558e83"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD exp(x). Double precision SIMD data, single accuracy.  <a href="group__module__simd.xhtml#gaba7463d0b0ed07d1eb1e3e08d4558e83">More...</a><br/></td></tr>
<tr class="separator:gaba7463d0b0ed07d1eb1e3e08d4558e83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6ce232cb0593b32dc9789e04679bc6c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gac6ce232cb0593b32dc9789e04679bc6c">erfSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:gac6ce232cb0593b32dc9789e04679bc6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD erf(x). Double precision SIMD data, single accuracy.  <a href="group__module__simd.xhtml#gac6ce232cb0593b32dc9789e04679bc6c">More...</a><br/></td></tr>
<tr class="separator:gac6ce232cb0593b32dc9789e04679bc6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae8d996acb25e6bdb2d08ca2b26bb19c3"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gae8d996acb25e6bdb2d08ca2b26bb19c3">erfcSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:gae8d996acb25e6bdb2d08ca2b26bb19c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD erfc(x). Double precision SIMD data, single accuracy.  <a href="group__module__simd.xhtml#gae8d996acb25e6bdb2d08ca2b26bb19c3">More...</a><br/></td></tr>
<tr class="separator:gae8d996acb25e6bdb2d08ca2b26bb19c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga80d8d17a5843dfa4126ce3d6672d2c5d"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga80d8d17a5843dfa4126ce3d6672d2c5d">sinCosSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *sinval, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> *cosval)</td></tr>
<tr class="memdesc:ga80d8d17a5843dfa4126ce3d6672d2c5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD sin &amp; cos. Double precision SIMD data, single accuracy.  <a href="group__module__simd.xhtml#ga80d8d17a5843dfa4126ce3d6672d2c5d">More...</a><br/></td></tr>
<tr class="separator:ga80d8d17a5843dfa4126ce3d6672d2c5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga322afd1e05781ae2cd10ec6fdb1fb2be"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga322afd1e05781ae2cd10ec6fdb1fb2be">sinSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga322afd1e05781ae2cd10ec6fdb1fb2be"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD sin(x). Double precision SIMD data, single accuracy.  <a href="group__module__simd.xhtml#ga322afd1e05781ae2cd10ec6fdb1fb2be">More...</a><br/></td></tr>
<tr class="separator:ga322afd1e05781ae2cd10ec6fdb1fb2be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1b867b3b628740d6f710a480626cffa8"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga1b867b3b628740d6f710a480626cffa8">cosSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga1b867b3b628740d6f710a480626cffa8"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD cos(x). Double precision SIMD data, single accuracy.  <a href="group__module__simd.xhtml#ga1b867b3b628740d6f710a480626cffa8">More...</a><br/></td></tr>
<tr class="separator:ga1b867b3b628740d6f710a480626cffa8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga97094c3429db78b1a101aa994a69f162"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga97094c3429db78b1a101aa994a69f162">tanSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga97094c3429db78b1a101aa994a69f162"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD tan(x). Double precision SIMD data, single accuracy.  <a href="group__module__simd.xhtml#ga97094c3429db78b1a101aa994a69f162">More...</a><br/></td></tr>
<tr class="separator:ga97094c3429db78b1a101aa994a69f162"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7e098546fed7424b9c449588ebb84252"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga7e098546fed7424b9c449588ebb84252">asinSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga7e098546fed7424b9c449588ebb84252"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD asin(x). Double precision SIMD data, single accuracy.  <a href="group__module__simd.xhtml#ga7e098546fed7424b9c449588ebb84252">More...</a><br/></td></tr>
<tr class="separator:ga7e098546fed7424b9c449588ebb84252"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga73027d18d5366998dbf0af8c52f68b60"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga73027d18d5366998dbf0af8c52f68b60">acosSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga73027d18d5366998dbf0af8c52f68b60"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD acos(x). Double precision SIMD data, single accuracy.  <a href="group__module__simd.xhtml#ga73027d18d5366998dbf0af8c52f68b60">More...</a><br/></td></tr>
<tr class="separator:ga73027d18d5366998dbf0af8c52f68b60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga39be2b2651b8a68340c2132becf1c372"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga39be2b2651b8a68340c2132becf1c372">atanSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga39be2b2651b8a68340c2132becf1c372"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD asin(x). Double precision SIMD data, single accuracy.  <a href="group__module__simd.xhtml#ga39be2b2651b8a68340c2132becf1c372">More...</a><br/></td></tr>
<tr class="separator:ga39be2b2651b8a68340c2132becf1c372"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga193d8e790944928be53940809d6f2385"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga193d8e790944928be53940809d6f2385">atan2SingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> y, <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> x)</td></tr>
<tr class="memdesc:ga193d8e790944928be53940809d6f2385"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD atan2(y,x). Double precision SIMD data, single accuracy.  <a href="group__module__simd.xhtml#ga193d8e790944928be53940809d6f2385">More...</a><br/></td></tr>
<tr class="separator:ga193d8e790944928be53940809d6f2385"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7c64f03842963e248fba796bead3c5ce"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga7c64f03842963e248fba796bead3c5ce">pmeForceCorrectionSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> z2)</td></tr>
<tr class="memdesc:ga7c64f03842963e248fba796bead3c5ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Analytical PME force correction, double SIMD data, single accuracy.  <a href="group__module__simd.xhtml#ga7c64f03842963e248fba796bead3c5ce">More...</a><br/></td></tr>
<tr class="separator:ga7c64f03842963e248fba796bead3c5ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad079618800dfdfb943ca73f89f63d45e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gad079618800dfdfb943ca73f89f63d45e">pmePotentialCorrectionSingleAccuracy</a> (<a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> z2)</td></tr>
<tr class="memdesc:gad079618800dfdfb943ca73f89f63d45e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Analytical PME potential correction, double SIMD data, single accuracy.  <a href="group__module__simd.xhtml#gad079618800dfdfb943ca73f89f63d45e">More...</a><br/></td></tr>
<tr class="separator:gad079618800dfdfb943ca73f89f63d45e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD4 math functions</div></td></tr>
<tr><td colspan="2"><div class="groupText"><dl class="section note"><dt>Note</dt><dd>Only a subset of the math functions are implemented for SIMD4. </dd></dl>
</div></td></tr>
<tr class="memitem:ga4be9c1041c5ce806e1262c9469a4a625"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga4be9c1041c5ce806e1262c9469a4a625">rsqrtIter</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> lu, <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> x)</td></tr>
<tr class="memdesc:ga4be9c1041c5ce806e1262c9469a4a625"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform one Newton-Raphson iteration to improve 1/sqrt(x) for SIMD4 float.  <a href="group__module__simd.xhtml#ga4be9c1041c5ce806e1262c9469a4a625">More...</a><br/></td></tr>
<tr class="separator:ga4be9c1041c5ce806e1262c9469a4a625"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab8ed1f98091a17221318dfd97e52c916"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gab8ed1f98091a17221318dfd97e52c916">invsqrt</a> (<a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> x)</td></tr>
<tr class="memdesc:gab8ed1f98091a17221318dfd97e52c916"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for SIMD4 float.  <a href="group__module__simd.xhtml#gab8ed1f98091a17221318dfd97e52c916">More...</a><br/></td></tr>
<tr class="separator:gab8ed1f98091a17221318dfd97e52c916"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4b6db4a7ce63f7c3c6e7a0d3008dea6b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga4b6db4a7ce63f7c3c6e7a0d3008dea6b">rsqrtIter</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> lu, <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> x)</td></tr>
<tr class="memdesc:ga4b6db4a7ce63f7c3c6e7a0d3008dea6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform one Newton-Raphson iteration to improve 1/sqrt(x) for SIMD4 double.  <a href="group__module__simd.xhtml#ga4b6db4a7ce63f7c3c6e7a0d3008dea6b">More...</a><br/></td></tr>
<tr class="separator:ga4b6db4a7ce63f7c3c6e7a0d3008dea6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9d84208bf91d57b70761d4c161f2f9de"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga9d84208bf91d57b70761d4c161f2f9de">invsqrt</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> x)</td></tr>
<tr class="memdesc:ga9d84208bf91d57b70761d4c161f2f9de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for SIMD4 double.  <a href="group__module__simd.xhtml#ga9d84208bf91d57b70761d4c161f2f9de">More...</a><br/></td></tr>
<tr class="separator:ga9d84208bf91d57b70761d4c161f2f9de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0b4da22bcb5cebd8721f180626d11fbf"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga0b4da22bcb5cebd8721f180626d11fbf">invsqrtSingleAccuracy</a> (<a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> x)</td></tr>
<tr class="memdesc:ga0b4da22bcb5cebd8721f180626d11fbf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate 1/sqrt(x) for SIMD4 double, but in single accuracy.  <a href="group__module__simd.xhtml#ga0b4da22bcb5cebd8721f180626d11fbf">More...</a><br/></td></tr>
<tr class="separator:ga0b4da22bcb5cebd8721f180626d11fbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a69d101abde50194b033bd47aca343efb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a69d101abde50194b033bd47aca343efb"></a>
<a class="el" href="namespacegmx.xhtml#a8593c4aa4e1f10f3571c8b8f2cd933a8">integrator_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a69d101abde50194b033bd47aca343efb">do_steep</a></td></tr>
<tr class="memdesc:a69d101abde50194b033bd47aca343efb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Steepest descents energy minimization. <br/></td></tr>
<tr class="separator:a69d101abde50194b033bd47aca343efb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b7e06ca1a66d04665db497fe64b8c2c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6b7e06ca1a66d04665db497fe64b8c2c"></a>
<a class="el" href="namespacegmx.xhtml#a8593c4aa4e1f10f3571c8b8f2cd933a8">integrator_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a6b7e06ca1a66d04665db497fe64b8c2c">do_cg</a></td></tr>
<tr class="memdesc:a6b7e06ca1a66d04665db497fe64b8c2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Conjugate gradient energy minimization. <br/></td></tr>
<tr class="separator:a6b7e06ca1a66d04665db497fe64b8c2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6a1b057a39053d0c4a28c49285f900e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac6a1b057a39053d0c4a28c49285f900e"></a>
<a class="el" href="namespacegmx.xhtml#a8593c4aa4e1f10f3571c8b8f2cd933a8">integrator_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ac6a1b057a39053d0c4a28c49285f900e">do_lbfgs</a></td></tr>
<tr class="memdesc:ac6a1b057a39053d0c4a28c49285f900e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Conjugate gradient energy minimization using the L-BFGS algorithm. <br/></td></tr>
<tr class="separator:ac6a1b057a39053d0c4a28c49285f900e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6872c2f4b813d88a0beccdacfe730c9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa6872c2f4b813d88a0beccdacfe730c9"></a>
<a class="el" href="namespacegmx.xhtml#a8593c4aa4e1f10f3571c8b8f2cd933a8">integrator_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa6872c2f4b813d88a0beccdacfe730c9">do_nm</a></td></tr>
<tr class="memdesc:aa6872c2f4b813d88a0beccdacfe730c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normal mode analysis. <br/></td></tr>
<tr class="separator:aa6872c2f4b813d88a0beccdacfe730c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1efd8b13fa02f4aebf73a8d8555e81f9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1efd8b13fa02f4aebf73a8d8555e81f9"></a>
<a class="el" href="namespacegmx.xhtml#a8593c4aa4e1f10f3571c8b8f2cd933a8">integrator_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a1efd8b13fa02f4aebf73a8d8555e81f9">do_tpi</a></td></tr>
<tr class="memdesc:a1efd8b13fa02f4aebf73a8d8555e81f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test particle insertion. <br/></td></tr>
<tr class="separator:a1efd8b13fa02f4aebf73a8d8555e81f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9237b6439778ed0fdfd9008a78c25f3c"><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#ga9237b6439778ed0fdfd9008a78c25f3c">c_simdBestPairAlignmentDouble</a> = 2</td></tr>
<tr class="memdesc:ga9237b6439778ed0fdfd9008a78c25f3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Best alignment to use for aligned pairs of double data.  <a href="group__module__simd.xhtml#ga9237b6439778ed0fdfd9008a78c25f3c">More...</a><br/></td></tr>
<tr class="separator:ga9237b6439778ed0fdfd9008a78c25f3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacc4ad17022538e3d670e55694e55ccc2"><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__simd.xhtml#gacc4ad17022538e3d670e55694e55ccc2">c_simdBestPairAlignmentFloat</a> = 2</td></tr>
<tr class="memdesc:gacc4ad17022538e3d670e55694e55ccc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Best alignment to use for aligned pairs of float data.  <a href="group__module__simd.xhtml#gacc4ad17022538e3d670e55694e55ccc2">More...</a><br/></td></tr>
<tr class="separator:gacc4ad17022538e3d670e55694e55ccc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19f6a93a5bf9ce1e585bebf205d6f6ea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacegmx.xhtml#a8593c4aa4e1f10f3571c8b8f2cd933a8">integrator_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a19f6a93a5bf9ce1e585bebf205d6f6ea">do_md</a></td></tr>
<tr class="memdesc:a19f6a93a5bf9ce1e585bebf205d6f6ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">MD simulations.  <a href="#a19f6a93a5bf9ce1e585bebf205d6f6ea">More...</a><br/></td></tr>
<tr class="separator:a19f6a93a5bf9ce1e585bebf205d6f6ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
SIMD data types</h2></td></tr>
<tr><td class="ititle" colspan="2"><p><a class="anchor" id="amgrp5429a761b097c74da542c11971a50054"></a> The actual storage of these types is implementation dependent. The documentation is generated from the reference implementation, but for normal usage this will likely not be what you are using. </p>
</td></tr>
<tr class="memitem:a8591d5e5ac6d1bec936a013fdc41b904"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a8591d5e5ac6d1bec936a013fdc41b904">SimdReal</a></td></tr>
<tr class="memdesc:a8591d5e5ac6d1bec936a013fdc41b904"><td class="mdescLeft">&#160;</td><td class="mdescRight">Real precision floating-point SIMD datatype.  <a href="#a8591d5e5ac6d1bec936a013fdc41b904">More...</a><br/></td></tr>
<tr class="separator:a8591d5e5ac6d1bec936a013fdc41b904"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a307172d59a1a7c9ed87bc2cb4df83efa"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a307172d59a1a7c9ed87bc2cb4df83efa">SimdBool</a></td></tr>
<tr class="memdesc:a307172d59a1a7c9ed87bc2cb4df83efa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Boolean SIMD type for usage with <a class="el" href="namespacegmx.xhtml#a8591d5e5ac6d1bec936a013fdc41b904">SimdReal</a>.  <a href="#a307172d59a1a7c9ed87bc2cb4df83efa">More...</a><br/></td></tr>
<tr class="separator:a307172d59a1a7c9ed87bc2cb4df83efa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6598cea23dd103ce19bff4743279e3bc"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a6598cea23dd103ce19bff4743279e3bc">SimdInt32</a></td></tr>
<tr class="memdesc:a6598cea23dd103ce19bff4743279e3bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">32-bit integer SIMD type.  <a href="#a6598cea23dd103ce19bff4743279e3bc">More...</a><br/></td></tr>
<tr class="separator:a6598cea23dd103ce19bff4743279e3bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e12584989a27abf28198dc8a709d604"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a5e12584989a27abf28198dc8a709d604">SimdIBool</a></td></tr>
<tr class="memdesc:a5e12584989a27abf28198dc8a709d604"><td class="mdescLeft">&#160;</td><td class="mdescRight">Boolean SIMD type for usage with <a class="el" href="namespacegmx.xhtml#a6598cea23dd103ce19bff4743279e3bc">SimdInt32</a>.  <a href="#a5e12584989a27abf28198dc8a709d604">More...</a><br/></td></tr>
<tr class="separator:a5e12584989a27abf28198dc8a709d604"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37686b0c2ec48a361d6c4473c1fdb70c"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a37686b0c2ec48a361d6c4473c1fdb70c">Simd4Real</a></td></tr>
<tr class="memdesc:a37686b0c2ec48a361d6c4473c1fdb70c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Real precision floating-point SIMD4 datatype.  <a href="#a37686b0c2ec48a361d6c4473c1fdb70c">More...</a><br/></td></tr>
<tr class="separator:a37686b0c2ec48a361d6c4473c1fdb70c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb6a84be080be397c2c09cda9f315037"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#acb6a84be080be397c2c09cda9f315037">Simd4Bool</a></td></tr>
<tr class="memdesc:acb6a84be080be397c2c09cda9f315037"><td class="mdescLeft">&#160;</td><td class="mdescRight">Boolean SIMD4 type for usage with <a class="el" href="namespacegmx.xhtml#a8591d5e5ac6d1bec936a013fdc41b904">SimdReal</a>.  <a href="#acb6a84be080be397c2c09cda9f315037">More...</a><br/></td></tr>
<tr class="separator:acb6a84be080be397c2c09cda9f315037"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8eebcb368cafe13131f39ffd69130e0b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8eebcb368cafe13131f39ffd69130e0b"></a>
const int&#160;</td><td class="memItemRight" valign="bottom"><b>c_simdBestPairAlignment</b> = <a class="el" href="group__module__simd.xhtml#gacc4ad17022538e3d670e55694e55ccc2">c_simdBestPairAlignmentFloat</a></td></tr>
<tr class="separator:a8eebcb368cafe13131f39ffd69130e0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a class="anchor" id="a7ea21974bdd8acdfa1c344b0945cff1b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classgmx_1_1ThreeFry2x64Fast.xhtml">ThreeFry2x64Fast</a> <a class="el" href="namespacegmx.xhtml#a7ea21974bdd8acdfa1c344b0945cff1b">gmx::DefaultRandomEngine</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default fast and accurate random engine in Gromacs. </p>
<p>This engine will return 2*2^64 random results using the default <a class="el" href="namespacegmx.xhtml#a73202d646d57bcc963d8afd5a16015f0a6311ae17c1ee52b36e68aaf4ad066387" title="Generic - stream uniqueness is not important. ">gmx::RandomDomain::Other</a> stream, and can be initialized with a single seed argument without having to remember empty template angle brackets. </p>

</div>
</div>
<a class="anchor" id="a8593c4aa4e1f10f3571c8b8f2cd933a8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef double gmx::integrator_t(FILE *fplog, t_commrec *cr, int nfile, const <a class="el" href="structt__filenm.xhtml">t_filenm</a> fnm[], const gmx_output_env_t *oenv, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bVerbose, int nstglobalcomm, gmx_vsite_t *vsite, gmx_constr_t constr, int stepout, t_inputrec *inputrec, gmx_mtop_t *top_global, t_fcdata *fcd, t_state *state_global, <a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *mdatoms, t_nrnb *nrnb, gmx_wallcycle_t wcycle, <a class="el" href="edsam_8h.xhtml#a0fa9ace476add5ee1fd6cd76c870f32e">gmx_edsam_t</a> ed, t_forcerec *fr, int repl_ex_nst, int repl_ex_nex, int repl_ex_seed, gmx_membed_t *membed, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> cpt_period, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> max_hours, int imdport, unsigned long Flags, <a class="el" href="structgmx__walltime__accounting.xhtml">gmx_walltime_accounting_t</a> walltime_accounting)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Integrator algorithm implementation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fplog</td><td>Log file for output </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cr</td><td>Communication record </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nfile</td><td>Number of files </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fnm</td><td>Filename structure array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">oenv</td><td>Output information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bVerbose</td><td>Verbose output or not </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nstglobalcomm</td><td>How often global communication is done </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vsite</td><td>Virtual site information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">constr</td><td>Constraint information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stepout</td><td>How often we writen to the console </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">inputrec</td><td>Input record with mdp options </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">top_global</td><td>Molecular topology for the whole system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fcd</td><td>Force and constraint data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">state_global</td><td>The state (x, v, f, box etc.) of the whole system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mdatoms</td><td>Structure containing atom information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nrnb</td><td>Accounting for floating point operations </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>Wall cycle timing information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ed</td><td>Essential dynamics sampling information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fr</td><td>Force record with cut-off information and more </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_nst</td><td>How often we do replica exchange (in steps) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_nex</td><td>How many replicas we have </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_seed</td><td>The seed for Monte Carlo swaps </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">membed</td><td>Membrane embedding data structure </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cpt_period</td><td>How often to checkpoint the simulation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_hours</td><td>Maximume length of the simulation (wall time) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">imdport</td><td>Interactive MD port (socket) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Flags</td><td>Flags to control mdrun </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">walltime_accounting</td><td>More timing information </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aac44e2bbcc40f48812b6b756a503ea51"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::random_device <a class="el" href="namespacegmx.xhtml#aac44e2bbcc40f48812b6b756a503ea51">gmx::RandomDevice</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Random device. </p>
<p>For now this is identical to the standard library, but since we use the GROMACS random module for all other random engines and distributions it is convenient to have this too in the same module. </p>

</div>
</div>
<a class="anchor" id="acb6a84be080be397c2c09cda9f315037"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a> <a class="el" href="namespacegmx.xhtml#acb6a84be080be397c2c09cda9f315037">gmx::Simd4Bool</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Boolean SIMD4 type for usage with <a class="el" href="namespacegmx.xhtml#a8591d5e5ac6d1bec936a013fdc41b904">SimdReal</a>. </p>
<p>This type is only available if <a class="el" href="group__module__simd.xhtml#ga6c015b9c619e63324df85f91e25191c5">GMX_SIMD4_HAVE_REAL</a> is 1.</p>
<p>If GMX_DOUBLE is 1, this will be set to <a class="el" href="classgmx_1_1Simd4DBool.xhtml">Simd4DBool</a> internally, otherwise <a class="el" href="classgmx_1_1Simd4FBool.xhtml">Simd4FBool</a>. This is necessary since some SIMD implementations use bitpatterns for marking truth, so single- vs. double precision booleans are not necessarily exchangable. As long as you just use this type you will not have to worry about precision.</p>
<dl class="section note"><dt>Note</dt><dd>This variable cannot be placed inside other structures or classes, since some compilers (including at least clang-3.7) appear to lose the alignment. This is likely particularly severe when allocating such memory on the heap, but it occurs for stack structures too. </dd></dl>

</div>
</div>
<a class="anchor" id="a37686b0c2ec48a361d6c4473c1fdb70c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a> <a class="el" href="namespacegmx.xhtml#a37686b0c2ec48a361d6c4473c1fdb70c">gmx::Simd4Real</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Real precision floating-point SIMD4 datatype. </p>
<p>This type is only available if <a class="el" href="group__module__simd.xhtml#ga6c015b9c619e63324df85f91e25191c5">GMX_SIMD4_HAVE_REAL</a> is 1.</p>
<p><a class="el" href="classgmx_1_1Simd4Double.xhtml">Simd4Double</a> if GMX_DOUBLE is 1, otherwise <a class="el" href="classgmx_1_1Simd4Float.xhtml">Simd4Float</a>.</p>
<dl class="section note"><dt>Note</dt><dd>This variable cannot be placed inside other structures or classes, since some compilers (including at least clang-3.7) appear to lose the alignment. This is likely particularly severe when allocating such memory on the heap, but it occurs for stack structures too. </dd></dl>

</div>
</div>
<a class="anchor" id="a307172d59a1a7c9ed87bc2cb4df83efa"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> <a class="el" href="namespacegmx.xhtml#a307172d59a1a7c9ed87bc2cb4df83efa">gmx::SimdBool</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Boolean SIMD type for usage with <a class="el" href="namespacegmx.xhtml#a8591d5e5ac6d1bec936a013fdc41b904">SimdReal</a>. </p>
<p>This type is only available if <a class="el" href="group__module__simd.xhtml#ga1578fccdb327f36a2bea338457cbf883">GMX_SIMD_HAVE_REAL</a> is 1.</p>
<p>If GMX_DOUBLE is 1, this will be set to <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> internally, otherwise <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a>. This is necessary since some SIMD implementations use bitpatterns for marking truth, so single- vs. double precision booleans are not necessarily exchangable. As long as you just use this type you will not have to worry about precision.</p>
<p>See <a class="el" href="namespacegmx.xhtml#a5e12584989a27abf28198dc8a709d604">SimdIBool</a> for an explanation of real vs. integer booleans.</p>
<dl class="section note"><dt>Note</dt><dd>This variable cannot be placed inside other structures or classes, since some compilers (including at least clang-3.7) appear to lose the alignment. This is likely particularly severe when allocating such memory on the heap, but it occurs for stack structures too. </dd></dl>

</div>
</div>
<a class="anchor" id="a5e12584989a27abf28198dc8a709d604"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> <a class="el" href="namespacegmx.xhtml#a5e12584989a27abf28198dc8a709d604">gmx::SimdIBool</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Boolean SIMD type for usage with <a class="el" href="namespacegmx.xhtml#a6598cea23dd103ce19bff4743279e3bc">SimdInt32</a>. </p>
<p>This type is only available if <a class="el" href="group__module__simd.xhtml#ga8a9534860edf5a3f2b9cd1bc60529b39">GMX_SIMD_HAVE_INT32_ARITHMETICS</a> is 1.</p>
<p>If GMX_DOUBLE is 1, this will be set to <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> internally, otherwise <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a>. This is necessary since some SIMD implementations use bitpatterns for marking truth, so single- vs. double precision booleans are not necessarily exchangable, and while a double-precision boolean might be represented with a 64-bit mask, the corresponding integer might only use a 32-bit mask.</p>
<p>We provide conversion routines for these cases, so the only thing you need to keep in mind is to use <a class="el" href="namespacegmx.xhtml#a307172d59a1a7c9ed87bc2cb4df83efa">SimdBool</a> when working with <a class="el" href="namespacegmx.xhtml#a8591d5e5ac6d1bec936a013fdc41b904">SimdReal</a> while you pick <a class="el" href="namespacegmx.xhtml#a5e12584989a27abf28198dc8a709d604">SimdIBool</a> when working with <a class="el" href="namespacegmx.xhtml#a6598cea23dd103ce19bff4743279e3bc">SimdInt32</a> .</p>
<p>To convert between them, use <a class="el" href="namespacegmx.xhtml#a15023cda21995e0a86c76416fff7575e">cvtB2IB</a> and <a class="el" href="namespacegmx.xhtml#abb2ccc1aebc69073299a26c404fcf5ba">cvtIB2B</a>.</p>
<dl class="section note"><dt>Note</dt><dd>This variable cannot be placed inside other structures or classes, since some compilers (including at least clang-3.7) appear to lose the alignment. This is likely particularly severe when allocating such memory on the heap, but it occurs for stack structures too. </dd></dl>

</div>
</div>
<a class="anchor" id="a6598cea23dd103ce19bff4743279e3bc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> <a class="el" href="namespacegmx.xhtml#a6598cea23dd103ce19bff4743279e3bc">gmx::SimdInt32</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>32-bit integer SIMD type. </p>
<p>If GMX_DOUBLE is 1, this will be set to <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> internally, otherwise <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a>. This might seem a strange implementation detail, but it is because some SIMD implementations use different types/widths of integers registers when converting from double vs. single precision floating point. As long as you just use this type you will not have to worry about precision.</p>
<dl class="section note"><dt>Note</dt><dd>This variable cannot be placed inside other structures or classes, since some compilers (including at least clang-3.7) appear to lose the alignment. This is likely particularly severe when allocating such memory on the heap, but it occurs for stack structures too. </dd></dl>

</div>
</div>
<a class="anchor" id="a8591d5e5ac6d1bec936a013fdc41b904"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> <a class="el" href="namespacegmx.xhtml#a8591d5e5ac6d1bec936a013fdc41b904">gmx::SimdReal</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Real precision floating-point SIMD datatype. </p>
<p>This type is only available if <a class="el" href="group__module__simd.xhtml#ga1578fccdb327f36a2bea338457cbf883">GMX_SIMD_HAVE_REAL</a> is 1.</p>
<p><a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> if GMX_DOUBLE is 1, otherwise <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a>.</p>
<dl class="section note"><dt>Note</dt><dd>This variable cannot be placed inside other structures or classes, since some compilers (including at least clang-3.7) appear to lose the alignment. This is likely particularly severe when allocating such memory on the heap, but it occurs for stack structures too. </dd></dl>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a class="anchor" id="adc6936f6090da8e4cf7801c8e71ee37f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacegmx.xhtml#adc6936f6090da8e4cf7801c8e71ee37f">gmx::HelpOutputFormat</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Output format for help writing. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="adc6936f6090da8e4cf7801c8e71ee37fa665b8486de1b34898ad6caeb20d3d179"></a>eHelpOutputFormat_Console</em>&nbsp;</td><td class="fielddoc">
<p>Plain text directly on the console. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="adc6936f6090da8e4cf7801c8e71ee37fa10bf3dadfe0fe221eb490caf89b4d791"></a>eHelpOutputFormat_Rst</em>&nbsp;</td><td class="fielddoc">
<p>reStructuredText for online manual and man pages. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="adc6936f6090da8e4cf7801c8e71ee37fa40e0858263ee116ab541df1e9fe8be81"></a>eHelpOutputFormat_Other</em>&nbsp;</td><td class="fielddoc">
<p>Used for extensions in other modules. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="adc6936f6090da8e4cf7801c8e71ee37fac94bcc656a16820a6b88de28eef7be68"></a>eHelpOutputFormat_NR</em>&nbsp;</td><td class="fielddoc">
<p>Used for the number of output formats. </p>
</td></tr>
</table>

</div>
</div>
<a class="anchor" id="a3f775199bddf83f286ee8172f7dda987"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987">gmx::OptionFlag</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Flags for options. </p>
<p>These flags are not part of the public interface, even though they are in an installed header. They are needed in a few template class implementations.</p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000040">Todo:</a></b></dt><dd>The flags related to default values are confusing, consider reorganizing them. </dd></dl>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="a3f775199bddf83f286ee8172f7dda987a4f1877245e691baa84f1a210c81f8f4e"></a>efOption_Set</em>&nbsp;</td><td class="fielddoc">
<p>Option has been set. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a3f775199bddf83f286ee8172f7dda987a4da48601127e56bf49a2167792d693ce"></a>efOption_HasDefaultValue</em>&nbsp;</td><td class="fielddoc">
<p>The current value of the option is a programmatic default value. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a3f775199bddf83f286ee8172f7dda987ac61016418af8d8a2426f494de8c9278d"></a>efOption_ExplicitDefaultValue</em>&nbsp;</td><td class="fielddoc">
<p>An explicit default value has been provided for the option. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a3f775199bddf83f286ee8172f7dda987a32e377a026ebd483633dd6a4fa442c3d"></a>efOption_ClearOnNextSet</em>&nbsp;</td><td class="fielddoc">
<p>Next assignment to the option clears old values. </p>
<p>This flag is set when a new option source starts, such that values from the new source will overwrite old ones. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a3f775199bddf83f286ee8172f7dda987afeeedad770c218f98d60c36cdc9f0bc3"></a>efOption_Required</em>&nbsp;</td><td class="fielddoc">
<p>Option is required to be set. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a3f775199bddf83f286ee8172f7dda987a31719daac8b8d93c1db41332e5fa9d1f"></a>efOption_MultipleTimes</em>&nbsp;</td><td class="fielddoc">
<p>Option can be specified multiple times. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a3f775199bddf83f286ee8172f7dda987ae52a5b8ffe8cd8a948fb65c787e25182"></a>efOption_Hidden</em>&nbsp;</td><td class="fielddoc">
<p>Option is hidden from standard help. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a3f775199bddf83f286ee8172f7dda987a021311861537a7daa949a7733cbaec87"></a>efOption_Vector</em>&nbsp;</td><td class="fielddoc">
<p>Option value is a vector, but a single value is also accepted. </p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1AbstractOption.xhtml#ab7833e4048807e6a41ef144bdd2ec6b1" title="Sets the option to be vector-valued. ">AbstractOption::setVector()</a> </dd></dl>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a3f775199bddf83f286ee8172f7dda987a6e4c2d93bdc5aca1c9d836745d0ca39f"></a>efOption_DefaultValueIfSetExists</em>&nbsp;</td><td class="fielddoc">
<p>Option has a defaultValueIfSet() specified. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a3f775199bddf83f286ee8172f7dda987ad167facccde7228b8f6fe16ea97cbc4d"></a>efOption_NoDefaultValue</em>&nbsp;</td><td class="fielddoc">
<p>Option does not support default values. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a3f775199bddf83f286ee8172f7dda987a975016de72bfedd5e03e0ae7a8a67d9e"></a>efOption_DontCheckMinimumCount</em>&nbsp;</td><td class="fielddoc">
<p>Storage object does its custom checking for minimum value count. </p>
<p>If this flag is set, the class derived from <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml" title="Templated base class for constructing option value storage classes. ">OptionStorageTemplate</a> should implement processSetValues(), processAll(), and possible other functions it provides such that it always fails if not enough values are provided. This is useful to override the default check, which is done in <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a72cf6c7884e6e23e6f71b8dc2dbede40" title="Performs validation and/or actions once a set of values has been added. ">OptionStorageTemplate::processSet()</a>. </p>
</td></tr>
</table>

</div>
</div>
<a class="anchor" id="a73202d646d57bcc963d8afd5a16015f0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacegmx.xhtml#a73202d646d57bcc963d8afd5a16015f0">gmx::RandomDomain</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enumerated values for fixed part of random seed (domain) </p>
<p>Random numbers are used in many places in GROMACS, and to avoid identical streams the random seeds should be different. Instead of keeping track of several different user-provided seeds, it is better to use the fact that generators like ThreeFry take two 64-bit keys, and combine a general user-provided 64-bit random seed with a second constant value from this list to make each stream guaranteed unique.</p>
<dl class="section note"><dt>Note</dt><dd>There is no reason to go overboard with adding options; we only need to guarantee different streams for cases that might be present simultaneously in a single simulation. As an example, two different integrators (or thermostats) can reuse the same domain. </dd>
<dd>
When you do add options, leave some space between the values so you can group new options with old ones without changing old values. </dd></dl>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="a73202d646d57bcc963d8afd5a16015f0a6311ae17c1ee52b36e68aaf4ad066387"></a>Other</em>&nbsp;</td><td class="fielddoc">
<p>Generic - stream uniqueness is not important. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a73202d646d57bcc963d8afd5a16015f0accb9e34a240647891f931e772cad80ef"></a>MaxwellVelocities</em>&nbsp;</td><td class="fielddoc">
<p>Veolcity assignment from Maxwell distribution. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a73202d646d57bcc963d8afd5a16015f0aa42c5450c670a7ecbea5532bde9c0c65"></a>TestParticleInsertion</em>&nbsp;</td><td class="fielddoc">
<p>Test particle insertion. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a73202d646d57bcc963d8afd5a16015f0a23714d9a49cc46ca81ad32670bde8b5e"></a>UpdateCoordinates</em>&nbsp;</td><td class="fielddoc">
<p>Particle integrators. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a73202d646d57bcc963d8afd5a16015f0ab0634f71dbc527342668f2a63f1b3510"></a>UpdateConstraints</em>&nbsp;</td><td class="fielddoc">
<p>Second integrator step for constraints. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a73202d646d57bcc963d8afd5a16015f0a91e0b95db0c752d879aebd0ac65a7fb9"></a>Thermostat</em>&nbsp;</td><td class="fielddoc">
<p>Stochastic temperature coupling. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a73202d646d57bcc963d8afd5a16015f0a79248e4db93ba16182fd3bf1c8e2fda7"></a>Barostat</em>&nbsp;</td><td class="fielddoc">
<p>Stochastic pressure coupling. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a73202d646d57bcc963d8afd5a16015f0ada8008568302912872628be09e68fb84"></a>ReplicaExchange</em>&nbsp;</td><td class="fielddoc">
<p>Replica exchange metropolis moves. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a73202d646d57bcc963d8afd5a16015f0a19bd460326d41817323764fa9e4287ff"></a>ExpandedEnsemble</em>&nbsp;</td><td class="fielddoc">
<p>Expanded ensemble lambda moves. </p>
</td></tr>
</table>

</div>
</div>
<a class="anchor" id="af16ecfd69d5704fc5de46b97ceff3b65"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacegmx.xhtml#af16ecfd69d5704fc5de46b97ceff3b65">gmx::SelectionFlag</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Flags for options. </p>
<p>These flags are not part of the public interface, even though they are in an installed header. They are needed in the implementation of <a class="el" href="classgmx_1_1SelectionOption.xhtml" title="Specifies an option that provides selection(s). ">SelectionOption</a>. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="af16ecfd69d5704fc5de46b97ceff3b65ada857974002e1be2413578d8ec3b5e08"></a>efSelection_DynamicMask</em>&nbsp;</td><td class="fielddoc">
<p>Whether <a class="el" href="poscalc_8h.xhtml#a3586daeaab8b4ff970ae759b3677e7fd" title="Update gmx_ana_pos_t::m dynamically for an otherwise static calculation. ">POS_MASKONLY</a> should be used for output position evaluation. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="af16ecfd69d5704fc5de46b97ceff3b65a3f2acaa6ea6db136e596e29e3c7151af"></a>efSelection_DisallowEmpty</em>&nbsp;</td><td class="fielddoc">
<p>If set, unconditionally empty selections result in compilation errors. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="af16ecfd69d5704fc5de46b97ceff3b65a692118363f0eefc01d795054271e51c6"></a>efSelection_EvaluateVelocities</em>&nbsp;</td><td class="fielddoc">
<p>Whether velocities of output positions should be evaluated. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="af16ecfd69d5704fc5de46b97ceff3b65a521142e351d4b23459b1b0c08705cc34"></a>efSelection_EvaluateForces</em>&nbsp;</td><td class="fielddoc">
<p>Whether forces on output positions should be evaluated. </p>
</td></tr>
</table>

</div>
</div>
<a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacegmx.xhtml#aa9e7df55e017bd726d027d65551bbd0c">gmx::SimdType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enumerated options for SIMD architectures. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0ca6adf97f83acf6453d4a6a4b1070f3754"></a>None</em>&nbsp;</td><td class="fielddoc">
<p>Disable all SIMD support. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0ca63d5049791d9d79d86e9a108b0a999ca"></a>Reference</em>&nbsp;</td><td class="fielddoc">
<p>Gromacs reference software SIMD. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0ca8045a0a6c688b0635e3caccc408a1446"></a>Generic</em>&nbsp;</td><td class="fielddoc">
<p>Placeholder for future support for gcc generic SIMD. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0ca5c496843e02651870c195534b19d9bbb"></a>X86_Sse2</em>&nbsp;</td><td class="fielddoc">
<p>SSE2. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0ca64005555216b2f63787c06918e0b4936"></a>X86_Sse4_1</em>&nbsp;</td><td class="fielddoc">
<p>SSE4.1. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0ca02880dc80ec6734dff5c4453b8a22255"></a>X86_Avx128Fma</em>&nbsp;</td><td class="fielddoc">
<p>128-bit Avx with FMA (Amd) </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0ca9201c4bc942aaeba69216cfc973795b6"></a>X86_Avx</em>&nbsp;</td><td class="fielddoc">
<p>256-bit Avx </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0cac8da3ebc9d442eba3f2cb90fbca92140"></a>X86_Avx2</em>&nbsp;</td><td class="fielddoc">
<p>AVX2. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0ca023ae73ff9edfb62c00415795ff5f570"></a>X86_Avx512</em>&nbsp;</td><td class="fielddoc">
<p>AVX_512. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0ca62d6b69682baf2b6d044e34d28f40674"></a>X86_Avx512Knl</em>&nbsp;</td><td class="fielddoc">
<p>AVX_512_KNL. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0ca8c108d62ab2603d3f6e5cd13399fa467"></a>X86_Mic</em>&nbsp;</td><td class="fielddoc">
<p>Knight's corner. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0cadb2c254e64bf7eed5a729529fa188099"></a>Arm_Neon</em>&nbsp;</td><td class="fielddoc">
<p>32-bit ARM NEON </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0ca3a0da0d018906725c11b5ddbb0ce76d8"></a>Arm_NeonAsimd</em>&nbsp;</td><td class="fielddoc">
<p>64-bit ARM AArch64 Advanced SIMD </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0ca55faf6b41cccf6249fa75a088a0dd988"></a>Ibm_Qpx</em>&nbsp;</td><td class="fielddoc">
<p>IBM QPX SIMD (BlueGene/Q and later) </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0ca3f9726bfb19d56f774360782846dc77f"></a>Ibm_Vmx</em>&nbsp;</td><td class="fielddoc">
<p>IBM VMX SIMD (Altivec on Power6 and later) </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0cae2817429950760b6f888ba6a8446fbf5"></a>Ibm_Vsx</em>&nbsp;</td><td class="fielddoc">
<p>IBM VSX SIMD (Power7 and later) </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aa9e7df55e017bd726d027d65551bbd0ca069e00567050f3e5b804844ed7155bdd"></a>Fujitsu_HpcAce</em>&nbsp;</td><td class="fielddoc">
<p>Fujitsu K-computer. </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a5dc46e83d110b8c81339683bf748fc81"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::abs </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float Floating-point <a class="el" href="group__module__simd.xhtml#ga9339c53d13a59e946834c14d565f1e18" title="SIMD4 Floating-point abs(). ">abs()</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>any floating point values </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>abs(a) for each element.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="ac85ea3af684916aee86e2674a6bd81e5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::abs </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>double doubleing-point <a class="el" href="group__module__simd.xhtml#ga9339c53d13a59e946834c14d565f1e18" title="SIMD4 Floating-point abs(). ">abs()</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>any doubleing point values </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>abs(a) for each element.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="ad59e3c65fd7e52438579b9ea98edefba"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::abs </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD float Floating-point <a class="el" href="group__module__simd.xhtml#ga9339c53d13a59e946834c14d565f1e18" title="SIMD4 Floating-point abs(). ">abs()</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>any floating point values </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>abs(a) for each element. </dd></dl>

</div>
</div>
<a class="anchor" id="a7ccaa7e4df0a45208a4c316d8b71d01c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::abs </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD double floating-point fabs(). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>any floating point values </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>fabs(a) for each element. </dd></dl>

</div>
</div>
<a class="anchor" id="ab102173c68c06e7a340e4eebbf6c3492"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::acos </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float acos. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate acos for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Acos(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a5b534003a0dba716c08d6053e0514311"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::acos </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double acos. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate acos for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Acos(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a72f487fc13f5bd1b83417f108a74f5a0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::acosSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double acos, but with single accuracy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate acos for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Acos(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="aaec39ef87dbec92292cd5954c922be6d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::andNot </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Bitwise andnot for two scalar float variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>data1 </td></tr>
    <tr><td class="paramname">b</td><td>data2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>(~data1) &amp; data2</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a621b6d4eb9d2d992b07f7bc515dad46d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::andNot </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Bitwise andnot for SIMD float. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gaf002483e94d5f42de1d5105cf924f8b8">GMX_SIMD_HAVE_LOGICAL</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>data1 </td></tr>
    <tr><td class="paramname">b</td><td>data2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>(~data1) &amp; data2 </dd></dl>

</div>
</div>
<a class="anchor" id="a374d7e1788f0ec4f2c5952d8d9ebdada"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::andNot </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Bitwise andnot for SIMD double. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gaf002483e94d5f42de1d5105cf924f8b8">GMX_SIMD_HAVE_LOGICAL</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>data1 </td></tr>
    <tr><td class="paramname">b</td><td>data2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>(~data1) &amp; data2 </dd></dl>

</div>
</div>
<a class="anchor" id="aebb0315d31c3c818a738bdc153397365"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::andNot </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Bitwise andnot for two scalar double variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>data1 </td></tr>
    <tr><td class="paramname">b</td><td>data2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>(~data1) &amp; data2</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a880a42645963c52980a5790f09e3bd18"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::int32_t gmx::andNot </td>
          <td>(</td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Bitwise andnot for two scalar integer variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>data1 </td></tr>
    <tr><td class="paramname">b</td><td>data2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>(~data1) &amp; data2</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a03632f7c71496ded26a0c3eda8ed33b7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall gmx::andNot </td>
          <td>(</td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Integer SIMD bitwise not/complement. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga354867d2570fecb6b341047947bee0d1">GMX_SIMD_HAVE_FINT32_LOGICAL</a> is 1.</p>
<dl class="section note"><dt>Note</dt><dd>You can <em>not</em> use this operation directly to select based on a boolean SIMD variable, since booleans are separate from integer SIMD. If that is what you need, have a look at <a class="el" href="group__module__simd.xhtml#ga223de776671702527c62b4da8f6e570a">gmx::selectByMask</a> instead.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>integer SIMD </td></tr>
    <tr><td class="paramname">b</td><td>integer SIMD </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>(~a) &amp; b </dd></dl>

</div>
</div>
<a class="anchor" id="ae3ee5a899ca3b9e9aafd6fd6323537e0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall gmx::andNot </td>
          <td>(</td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Integer SIMD bitwise not/complement. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga0ccbae145ecb27cee3c98ec7bded1d45">GMX_SIMD_HAVE_DINT32_LOGICAL</a> is 1.</p>
<dl class="section note"><dt>Note</dt><dd>You can <em>not</em> use this operation directly to select based on a boolean SIMD variable, since booleans are separate from integer SIMD. If that is what you need, have a look at <a class="el" href="group__module__simd.xhtml#ga223de776671702527c62b4da8f6e570a">gmx::selectByMask</a> instead.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>integer SIMD </td></tr>
    <tr><td class="paramname">b</td><td>integer SIMD </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>(~a) &amp; b </dd></dl>

</div>
</div>
<a class="anchor" id="af90cd5d709899e47809553109383299e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool gmx::anyTrue </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns if the boolean is true. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Logical variable. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if a is true, otherwise false.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="ad3771cceb27c74f62fe77ae2b3375f19"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool gmx_simdcall gmx::anyTrue </td>
          <td>(</td>
          <td class="paramtype">SimdFBool&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns non-zero if any of the boolean in SIMD a is True, otherwise 0. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Logical variable. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if any element in a is true, otherwise false.</dd></dl>
<p>The actual return value for truth will depend on the architecture, so any non-zero value is considered truth. </p>

</div>
</div>
<a class="anchor" id="aa6391860ba12e41a4a827077b6037f98"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool gmx_simdcall gmx::anyTrue </td>
          <td>(</td>
          <td class="paramtype">SimdDBool&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns non-zero if any of the boolean in SIMD a is True, otherwise 0. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Logical variable. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if any element in a is true, otherwise false.</dd></dl>
<p>The actual return value for truth will depend on the architecture, so any non-zero value is considered truth. </p>

</div>
</div>
<a class="anchor" id="ac07fb03248b03957ceee7a258cb01ec9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool gmx_simdcall gmx::anyTrue </td>
          <td>(</td>
          <td class="paramtype">SimdFIBool&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns true if any of the boolean in x is True, otherwise 0. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga9febc62e1abd58eb8a035b8b81f93292">GMX_SIMD_HAVE_FINT32_ARITHMETICS</a> is 1.</p>
<p>The actual return value for "any true" will depend on the architecture. Any non-zero value should be considered truth.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD boolean </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if any of the elements in a is true, otherwise 0. </dd></dl>

</div>
</div>
<a class="anchor" id="a01b540961fe7e3f5aede8df5bba89237"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool gmx_simdcall gmx::anyTrue </td>
          <td>(</td>
          <td class="paramtype">SimdDIBool&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns true if any of the boolean in x is True, otherwise 0. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gab8469202af6999f95405779355d89c30">GMX_SIMD_HAVE_DINT32_ARITHMETICS</a> is 1.</p>
<p>The actual return value for "any true" will depend on the architecture. Any non-zero value should be considered truth.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD boolean </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if any of the elements in a is true, otherwise 0. </dd></dl>

</div>
</div>
<a class="anchor" id="a3d5120df9c0bf437e64c806a7cfdad02"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::asin </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>float asin. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate asin for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Asin(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="ab02c7d47595f11074fbfedff40145544"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::asin </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double asin. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate asin for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Asin(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a98465e562d7b1b24755bc693db04c8f5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::asinSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double asin, but with single accuracy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate asin for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Asin(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a1afbc2ada56f899a8d3dc5c61530e28b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::atan </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float atan. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate atan for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Atan(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="af15e6f3962e035d69013bd91621fd9f8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::atan </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double atan. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate atan for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Atan(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="aed8336a58abddcdb6afa7835138ecf46"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::atan2 </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float atan2(y,x). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">y</td><td>Y component of vector, any quartile </td></tr>
    <tr><td class="paramname">x</td><td>X component of vector, any quartile </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Atan(y,x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="aa70a1aa5e9c161a2770d0f9b7eca1805"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::atan2 </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double atan2(y,x). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">y</td><td>Y component of vector, any quartile </td></tr>
    <tr><td class="paramname">x</td><td>X component of vector, any quartile </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Atan(y,x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a2552094c1be29e087e1e85ae02fb0c7a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::atan2SingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double atan2(y,x), but with single accuracy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">y</td><td>Y component of vector, any quartile </td></tr>
    <tr><td class="paramname">x</td><td>X component of vector, any quartile </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Atan(y,x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a44ca54cb014d2f33b98f3d523d90a2f5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::atanSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double atan, but with single accuracy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate atan for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Atan(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a31c5db5940f1fed568d8d6a0dbe7ec1a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::blend </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Blend float selection. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>First source </td></tr>
    <tr><td class="paramname">b</td><td>Second source </td></tr>
    <tr><td class="paramname">sel</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Select b if sel is true, a otherwise.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a90aa803db2a6a8c9dbb22395dcaf4532"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::blend </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>sel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Blend double selection. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>First source </td></tr>
    <tr><td class="paramname">b</td><td>Second source </td></tr>
    <tr><td class="paramname">sel</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Select b if sel is true, a otherwise.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="acf33872c1b22ffd9340e77410c693083"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::int32_t gmx::blend </td>
          <td>(</td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Blend integer selection. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>First source </td></tr>
    <tr><td class="paramname">b</td><td>Second source </td></tr>
    <tr><td class="paramname">sel</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Select b if sel is true, a otherwise.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a443be80edc7822ae0582bc5a4d4da34c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::blend </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFBool&#160;</td>
          <td class="paramname"><em>sel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Vector-blend SIMD float selection. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>First source </td></tr>
    <tr><td class="paramname">b</td><td>Second source </td></tr>
    <tr><td class="paramname">sel</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>For each element, select b if sel is true, a otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="aa089539a35e39d68f6c8b40421e0a68e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::blend </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDBool&#160;</td>
          <td class="paramname"><em>sel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Vector-blend SIMD double selection. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>First source </td></tr>
    <tr><td class="paramname">b</td><td>Second source </td></tr>
    <tr><td class="paramname">sel</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>For each element, select b if sel is true, a otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a3f3f322cbf3a7d646003849046028f65"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall gmx::blend </td>
          <td>(</td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFIBool&#160;</td>
          <td class="paramname"><em>sel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Vector-blend SIMD integer selection. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga9febc62e1abd58eb8a035b8b81f93292">GMX_SIMD_HAVE_FINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>First source </td></tr>
    <tr><td class="paramname">b</td><td>Second source </td></tr>
    <tr><td class="paramname">sel</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>For each element, select b if sel is true, a otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a897cd563974628f57a983656bc4f0be5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall gmx::blend </td>
          <td>(</td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDIBool&#160;</td>
          <td class="paramname"><em>sel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Vector-blend SIMD integer selection. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gab8469202af6999f95405779355d89c30">GMX_SIMD_HAVE_DINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>First source </td></tr>
    <tr><td class="paramname">b</td><td>Second source </td></tr>
    <tr><td class="paramname">sel</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>For each element, select b if sel is true, a otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a8ef5f6af06e493a4ae2d47109ee0e723"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::copysign </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Composes single value with the magnitude of x and the sign of y. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Value to set sign for </td></tr>
    <tr><td class="paramname">y</td><td>Value used to set sign </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Magnitude of x, sign of y</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="af6cfb56189c360e005911247ebf5fd42"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::copysign </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Composes double value with the magnitude of x and the sign of y. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Value to set sign for </td></tr>
    <tr><td class="paramname">y</td><td>Value used to set sign </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Magnitude of x, sign of y</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a16c6356a58f3d2c2fe6d2f50afc0c686"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::cos </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float cos. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate cos for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Cos(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="aeda573e9aa3efa5d223c9fe39f682cfd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::cos </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double cos. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate cos for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Cos(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a2e717707cf40d6bbacf8752cf28de422"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::cosSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double cos, but with single accuracy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate cos for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Cos(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="af536d7a23a442f3c0876b05ac20d7d40"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool gmx::cpuIsX86Nehalem </td>
          <td>(</td>
          <td class="paramtype">const CpuInfo &amp;&#160;</td>
          <td class="paramname"><em>cpuInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return true if the CPU is an Intel x86 Nehalem. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cpuInfo</td><td>Object with cpu information</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if running on Nehalem CPU </dd></dl>

</div>
</div>
<a class="anchor" id="a27254f29caa9fd12a6e774bf7a13502c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool gmx::cvtB2IB </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Just return a boolean (mimicks SIMD real-to-int bool conversions) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>boolean </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>same boolean</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="ae297fc04e625ca46ca931b39c0c01603"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> gmx_simdcall gmx::cvtB2IB </td>
          <td>(</td>
          <td class="paramtype">SimdFBool&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert from single precision boolean to corresponding integer boolean. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD floating-point boolean </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD integer boolean </dd></dl>

</div>
</div>
<a class="anchor" id="a15023cda21995e0a86c76416fff7575e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> gmx_simdcall gmx::cvtB2IB </td>
          <td>(</td>
          <td class="paramtype">SimdDBool&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert from double precision boolean to corresponding integer boolean. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD floating-point boolean </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD integer boolean </dd></dl>

</div>
</div>
<a class="anchor" id="a22401779c65549d3061b4fdd5290ef19"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::cvtD2F </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert double to float (mimicks SIMD conversion) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>double </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a, as float</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a8fb883892d82707c8c58f3ecb3d0f7a3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::cvtD2F </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>d</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert SIMD double to float. </p>
<p>This version is available if <a class="el" href="group__module__simd.xhtml#gafdbf804a40bfa3dcb15bc50055e58e74">GMX_SIMD_FLOAT_WIDTH</a> is identical to <a class="el" href="group__module__simd.xhtml#ga417e9d28b6310876bb2c69eb528c0a86">GMX_SIMD_DOUBLE_WIDTH</a>.</p>
<p>Float/double conversions are complex since the SIMD width could either be different (e.g. on x86) or identical (e.g. IBM QPX). This means you will need to check for the width in the code, and have different code paths.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">d</td><td>Double-precision SIMD variable </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Single-precision SIMD variable of the same width </dd></dl>

</div>
</div>
<a class="anchor" id="a9cc129ae379b11a89f6f100b82dcecfa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::cvtDD2F </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>d0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>d1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert SIMD double to float. </p>
<p>This version is available if <a class="el" href="group__module__simd.xhtml#gafdbf804a40bfa3dcb15bc50055e58e74">GMX_SIMD_FLOAT_WIDTH</a> is twice as large as <a class="el" href="group__module__simd.xhtml#ga417e9d28b6310876bb2c69eb528c0a86">GMX_SIMD_DOUBLE_WIDTH</a>.</p>
<p>Float/double conversions are complex since the SIMD width could either be different (e.g. on x86) or identical (e.g. IBM QPX). This means you will need to check for the width in the code, and have different code paths.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">d0</td><td>Double-precision SIMD variable, first half of values to put in f. </td></tr>
    <tr><td class="paramname">d1</td><td>Double-precision SIMD variable, second half of values to put in f. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Single-precision SIMD variable with all values. </dd></dl>

</div>
</div>
<a class="anchor" id="ac575d3b81809b71e414755dc8acf3317"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::cvtF2D </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert float to double (mimicks SIMD conversion) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>float </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a, as double double</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a67d3b8f955282068904125585dfe4791"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::cvtF2D </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert SIMD float to double. </p>
<p>This version is available if <a class="el" href="group__module__simd.xhtml#gafdbf804a40bfa3dcb15bc50055e58e74">GMX_SIMD_FLOAT_WIDTH</a> is identical to <a class="el" href="group__module__simd.xhtml#ga417e9d28b6310876bb2c69eb528c0a86">GMX_SIMD_DOUBLE_WIDTH</a>.</p>
<p>Float/double conversions are complex since the SIMD width could either be different (e.g. on x86) or identical (e.g. IBM QPX). This means you will need to check for the width in the code, and have different code paths.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">f</td><td>Single-precision SIMD variable </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Double-precision SIMD variable of the same width </dd></dl>

</div>
</div>
<a class="anchor" id="a1567e05e71a05d804c30ef65e66e9e96"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx_simdcall gmx::cvtF2DD </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble *&#160;</td>
          <td class="paramname"><em>d0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble *&#160;</td>
          <td class="paramname"><em>d1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert SIMD float to double. </p>
<p>This version is available if <a class="el" href="group__module__simd.xhtml#gafdbf804a40bfa3dcb15bc50055e58e74">GMX_SIMD_FLOAT_WIDTH</a> is twice as large as <a class="el" href="group__module__simd.xhtml#ga417e9d28b6310876bb2c69eb528c0a86">GMX_SIMD_DOUBLE_WIDTH</a>.</p>
<p>Float/double conversions are complex since the SIMD width could either be different (e.g. on x86) or identical (e.g. IBM QPX). This means you will need to check for the width in the code, and have different code paths.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">f</td><td>Single-precision SIMD variable </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">d0</td><td>Double-precision SIMD variable, first half of values from f. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">d1</td><td>Double-precision SIMD variable, second half of values from f. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a69388fb35cb4b891c7517554e4500615"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::int32_t gmx::cvtI2R </td>
          <td>(</td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return integer. </p>
<p>This function mimicks the SIMD integer-to-real conversion routines. By simply returning an integer, we let the compiler sort out whether the conversion should be to float or double rather than using proxy objects.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>integer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>same value (a)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a4dcd41f15fc944cfda5f034cd3c4ecfb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::cvtI2R </td>
          <td>(</td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert integer to single precision floating point. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD integer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD floating-point </dd></dl>

</div>
</div>
<a class="anchor" id="a97d21ad971c1efb6685f073f344590cc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::cvtI2R </td>
          <td>(</td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert integer to double precision floating point. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD integer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD floating-point </dd></dl>

</div>
</div>
<a class="anchor" id="a2a600fa6a48b5df753c2fcc99c47f3f3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool gmx::cvtIB2B </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Just return a boolean (mimicks SIMD int-to-real bool conversions) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>boolean </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>same boolean</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a05ffa14c31a2ddbc8edc180e65e3b25d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> gmx_simdcall gmx::cvtIB2B </td>
          <td>(</td>
          <td class="paramtype">SimdFIBool&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert from integer boolean to corresponding single precision boolean. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD integer boolean </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD floating-point boolean </dd></dl>

</div>
</div>
<a class="anchor" id="abb2ccc1aebc69073299a26c404fcf5ba"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> gmx_simdcall gmx::cvtIB2B </td>
          <td>(</td>
          <td class="paramtype">SimdDIBool&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert from integer boolean to corresponding double precision boolean. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD integer boolean </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD floating-point boolean </dd></dl>

</div>
</div>
<a class="anchor" id="a2136f5684897fc7ea139039eba172629"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::int32_t gmx::cvtR2I </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round single precision floating point to integer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>float </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Integer format, a rounded to nearest integer.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="acc9f420c1d0c099cc58ac3ae5fcb1ace"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::int32_t gmx::cvtR2I </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round single precision doubleing point to integer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>double </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Integer format, a rounded to nearest integer.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="ac552eafd6724baac337732185e7aab5b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall gmx::cvtR2I </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round single precision floating point to integer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD floating-point </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD integer, rounded to nearest integer. </dd></dl>

</div>
</div>
<a class="anchor" id="ab44adfad19a5d4f810428dea125c2618"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall gmx::cvtR2I </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round double precision floating point to integer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD floating-point </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD integer, rounded to nearest integer. </dd></dl>

</div>
</div>
<a class="anchor" id="a7c74ba54abe2627167abfc0df7286f5d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::int32_t gmx::cvttR2I </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Truncate single precision floating point to integer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>float </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Integer format, a truncated to integer.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="ac0fb4318cc5c14075330d52382e6bdd4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::int32_t gmx::cvttR2I </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Truncate single precision doubleing point to integer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>double </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Integer format, a truncated to integer.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a9ea0550c9f9a416bc631e091c2fcbb4e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall gmx::cvttR2I </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Truncate single precision floating point to integer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD floating-point </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD integer, truncated to nearest integer. </dd></dl>

</div>
</div>
<a class="anchor" id="ac4adbb04ea5039d62805c3082368dd76"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall gmx::cvttR2I </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Truncate double precision floating point to integer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD floating-point </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD integer, truncated to nearest integer. </dd></dl>

</div>
</div>
<a class="anchor" id="a0233e7b9cab30a7cd2ad5e59d8910a35"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx_simdcall gmx::decrHsimd </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add the two halves of a SIMD double, subtract the sum from half-SIMD-width consecutive doubles in memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>half-width aligned memory, from which sum of the halves will be subtracted. </td></tr>
    <tr><td class="paramname">a</td><td>SIMD variable. Upper &amp; lower halves will first be added.</td></tr>
  </table>
  </dd>
</dl>
<p>If the SIMD width is 8 and contains [a b c d e f g h], the memory will be modified to [m[0]-(a+e) m[1]-(b+f) m[2]-(c+g) m[3]-(d+h)].</p>
<p>The memory must be aligned to half SIMD width.</p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gadef533340f8e648dfb550cbd8cfd9fc7">GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE</a> is 1. </p>

</div>
</div>
<a class="anchor" id="ab498b7b673584374b736bb2299575f3b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx_simdcall gmx::decrHsimd </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add the two halves of a SIMD float, subtract the sum from half-SIMD-width consecutive floats in memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>half-width aligned memory, from which sum of the halves will be subtracted. </td></tr>
    <tr><td class="paramname">a</td><td>SIMD variable. Upper &amp; lower halves will first be added.</td></tr>
  </table>
  </dd>
</dl>
<p>If the SIMD width is 8 and contains [a b c d e f g h], the memory will be modified to [m[0]-(a+e) m[1]-(b+f) m[2]-(c+g) m[3]-(d+h)].</p>
<p>The memory must be aligned to half SIMD width.</p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gac40bf3261e36fb7ff022e8ab37b04fcf">GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT</a> is 1. </p>

</div>
</div>
<a class="anchor" id="a0b53df1703a70801419ef4f9004454bd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double gmx::do_cg </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fplog</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nfile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structt__filenm.xhtml">t_filenm</a>&#160;</td>
          <td class="paramname"><em>fnm</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_output_env_t *&#160;</td>
          <td class="paramname"><em>oenv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bVerbose</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nstglobalcomm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_vsite_t *&#160;</td>
          <td class="paramname"><em>vsite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_constr_t&#160;</td>
          <td class="paramname"><em>constr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>stepout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_inputrec *&#160;</td>
          <td class="paramname"><em>inputrec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_mtop_t *&#160;</td>
          <td class="paramname"><em>top_global</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_fcdata *&#160;</td>
          <td class="paramname"><em>fcd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_state *&#160;</td>
          <td class="paramname"><em>state_global</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *&#160;</td>
          <td class="paramname"><em>mdatoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_nrnb *&#160;</td>
          <td class="paramname"><em>nrnb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="edsam_8h.xhtml#a0fa9ace476add5ee1fd6cd76c870f32e">gmx_edsam_t</a>&#160;</td>
          <td class="paramname"><em>ed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_forcerec *&#160;</td>
          <td class="paramname"><em>fr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_nst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_nex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_seed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_membed_t *&#160;</td>
          <td class="paramname"><em>membed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>cpt_period</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>max_hours</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>imdport</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>Flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__walltime__accounting.xhtml">gmx_walltime_accounting_t</a>&#160;</td>
          <td class="paramname"><em>walltime_accounting</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Do conjugate gradients minimization. </p>
<p>Integrator algorithm implementation. (FILE *fplog, t_commrec *cr, </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fplog</td><td>Log file for output </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cr</td><td>Communication record </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nfile</td><td>Number of files </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fnm</td><td>Filename structure array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">oenv</td><td>Output information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bVerbose</td><td>Verbose output or not </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nstglobalcomm</td><td>How often global communication is done </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vsite</td><td>Virtual site information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">constr</td><td>Constraint information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stepout</td><td>How often we writen to the console </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">inputrec</td><td>Input record with mdp options </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">top_global</td><td>Molecular topology for the whole system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fcd</td><td>Force and constraint data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">state_global</td><td>The state (x, v, f, box etc.) of the whole system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mdatoms</td><td>Structure containing atom information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nrnb</td><td>Accounting for floating point operations </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>Wall cycle timing information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ed</td><td>Essential dynamics sampling information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fr</td><td>Force record with cut-off information and more </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_nst</td><td>How often we do replica exchange (in steps) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_nex</td><td>How many replicas we have </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_seed</td><td>The seed for Monte Carlo swaps </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">membed</td><td>Membrane embedding data structure </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cpt_period</td><td>How often to checkpoint the simulation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_hours</td><td>Maximume length of the simulation (wall time) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">imdport</td><td>Interactive MD port (socket) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Flags</td><td>Flags to control mdrun </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">walltime_accounting</td><td>More timing information (FILE *fplog, t_commrec *cr, int nfile, const <a class="el" href="structt__filenm.xhtml" title="File name option definition for C code. ">t_filenm</a> fnm[], const gmx_output_env_t *oenv, gmx_bool bVerbose, int nstglobalcomm, gmx_vsite_t *vsite, gmx_constr_t constr, int stepout, t_inputrec *inputrec, gmx_mtop_t *top_global, t_fcdata *fcd, t_state *state_global, <a class="el" href="structt__mdatoms.xhtml" title="Declares mdatom data structure. ">t_mdatoms</a> *mdatoms, t_nrnb *nrnb, gmx_wallcycle_t wcycle, gmx_edsam_t ed, t_forcerec *fr, int repl_ex_nst, int repl_ex_nex, int repl_ex_seed, gmx_membed_t gmx_unused *membed, real cpt_period, real max_hours, int imdport, unsigned long Flags, gmx_walltime_accounting_t walltime_accounting) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afaabfc51bc04f2b0de66f075051a610a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double gmx::do_lbfgs </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fplog</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nfile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structt__filenm.xhtml">t_filenm</a>&#160;</td>
          <td class="paramname"><em>fnm</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_output_env_t *&#160;</td>
          <td class="paramname"><em>oenv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bVerbose</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nstglobalcomm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_vsite_t *&#160;</td>
          <td class="paramname"><em>vsite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_constr_t&#160;</td>
          <td class="paramname"><em>constr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>stepout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_inputrec *&#160;</td>
          <td class="paramname"><em>inputrec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_mtop_t *&#160;</td>
          <td class="paramname"><em>top_global</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_fcdata *&#160;</td>
          <td class="paramname"><em>fcd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_state *&#160;</td>
          <td class="paramname"><em>state_global</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *&#160;</td>
          <td class="paramname"><em>mdatoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_nrnb *&#160;</td>
          <td class="paramname"><em>nrnb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="edsam_8h.xhtml#a0fa9ace476add5ee1fd6cd76c870f32e">gmx_edsam_t</a>&#160;</td>
          <td class="paramname"><em>ed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_forcerec *&#160;</td>
          <td class="paramname"><em>fr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_nst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_nex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_seed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_membed_t *&#160;</td>
          <td class="paramname"><em>membed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>cpt_period</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>max_hours</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>imdport</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>Flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__walltime__accounting.xhtml">gmx_walltime_accounting_t</a>&#160;</td>
          <td class="paramname"><em>walltime_accounting</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Do L-BFGS conjugate gradients minimization. </p>
<p>Integrator algorithm implementation. (FILE *fplog, t_commrec *cr, </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fplog</td><td>Log file for output </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cr</td><td>Communication record </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nfile</td><td>Number of files </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fnm</td><td>Filename structure array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">oenv</td><td>Output information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bVerbose</td><td>Verbose output or not </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nstglobalcomm</td><td>How often global communication is done </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vsite</td><td>Virtual site information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">constr</td><td>Constraint information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stepout</td><td>How often we writen to the console </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">inputrec</td><td>Input record with mdp options </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">top_global</td><td>Molecular topology for the whole system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fcd</td><td>Force and constraint data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">state_global</td><td>The state (x, v, f, box etc.) of the whole system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mdatoms</td><td>Structure containing atom information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nrnb</td><td>Accounting for floating point operations </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>Wall cycle timing information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ed</td><td>Essential dynamics sampling information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fr</td><td>Force record with cut-off information and more </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_nst</td><td>How often we do replica exchange (in steps) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_nex</td><td>How many replicas we have </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_seed</td><td>The seed for Monte Carlo swaps </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">membed</td><td>Membrane embedding data structure </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cpt_period</td><td>How often to checkpoint the simulation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_hours</td><td>Maximume length of the simulation (wall time) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">imdport</td><td>Interactive MD port (socket) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Flags</td><td>Flags to control mdrun </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">walltime_accounting</td><td>More timing information (FILE *fplog, t_commrec *cr, int nfile, const <a class="el" href="structt__filenm.xhtml" title="File name option definition for C code. ">t_filenm</a> fnm[], const gmx_output_env_t *oenv, gmx_bool bVerbose, int nstglobalcomm, gmx_vsite_t *vsite, gmx_constr_t constr, int stepout, t_inputrec *inputrec, gmx_mtop_t *top_global, t_fcdata *fcd, t_state *state_global, <a class="el" href="structt__mdatoms.xhtml" title="Declares mdatom data structure. ">t_mdatoms</a> *mdatoms, t_nrnb *nrnb, gmx_wallcycle_t wcycle, gmx_edsam_t ed, t_forcerec *fr, int repl_ex_nst, int repl_ex_nex, int repl_ex_seed, real cpt_period, real max_hours, int imdport, unsigned long Flags, gmx_walltime_accounting_t walltime_accounting) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac8d0485fabdfa4c15b00267ad27d9a0e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double gmx::do_nm </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fplog</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nfile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structt__filenm.xhtml">t_filenm</a>&#160;</td>
          <td class="paramname"><em>fnm</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_output_env_t *&#160;</td>
          <td class="paramname"><em>oenv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bVerbose</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nstglobalcomm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_vsite_t *&#160;</td>
          <td class="paramname"><em>vsite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_constr_t&#160;</td>
          <td class="paramname"><em>constr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>stepout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_inputrec *&#160;</td>
          <td class="paramname"><em>inputrec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_mtop_t *&#160;</td>
          <td class="paramname"><em>top_global</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_fcdata *&#160;</td>
          <td class="paramname"><em>fcd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_state *&#160;</td>
          <td class="paramname"><em>state_global</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *&#160;</td>
          <td class="paramname"><em>mdatoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_nrnb *&#160;</td>
          <td class="paramname"><em>nrnb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="edsam_8h.xhtml#a0fa9ace476add5ee1fd6cd76c870f32e">gmx_edsam_t</a>&#160;</td>
          <td class="paramname"><em>ed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_forcerec *&#160;</td>
          <td class="paramname"><em>fr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_nst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_nex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_seed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_membed_t *&#160;</td>
          <td class="paramname"><em>membed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>cpt_period</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>max_hours</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>imdport</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>Flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__walltime__accounting.xhtml">gmx_walltime_accounting_t</a>&#160;</td>
          <td class="paramname"><em>walltime_accounting</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Do normal modes analysis. </p>
<p>Integrator algorithm implementation. (FILE *fplog, t_commrec *cr, </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fplog</td><td>Log file for output </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cr</td><td>Communication record </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nfile</td><td>Number of files </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fnm</td><td>Filename structure array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">oenv</td><td>Output information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bVerbose</td><td>Verbose output or not </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nstglobalcomm</td><td>How often global communication is done </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vsite</td><td>Virtual site information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">constr</td><td>Constraint information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stepout</td><td>How often we writen to the console </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">inputrec</td><td>Input record with mdp options </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">top_global</td><td>Molecular topology for the whole system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fcd</td><td>Force and constraint data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">state_global</td><td>The state (x, v, f, box etc.) of the whole system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mdatoms</td><td>Structure containing atom information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nrnb</td><td>Accounting for floating point operations </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>Wall cycle timing information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ed</td><td>Essential dynamics sampling information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fr</td><td>Force record with cut-off information and more </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_nst</td><td>How often we do replica exchange (in steps) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_nex</td><td>How many replicas we have </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_seed</td><td>The seed for Monte Carlo swaps </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">membed</td><td>Membrane embedding data structure </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cpt_period</td><td>How often to checkpoint the simulation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_hours</td><td>Maximume length of the simulation (wall time) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">imdport</td><td>Interactive MD port (socket) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Flags</td><td>Flags to control mdrun </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">walltime_accounting</td><td>More timing information (FILE *fplog, t_commrec *cr, int nfile, const <a class="el" href="structt__filenm.xhtml" title="File name option definition for C code. ">t_filenm</a> fnm[], const gmx_output_env_t *oenv, gmx_bool bVerbose, int nstglobalcomm, gmx_vsite_t *vsite, gmx_constr_t constr, int stepout, t_inputrec *inputrec, gmx_mtop_t *top_global, t_fcdata *fcd, t_state *state_global, <a class="el" href="structt__mdatoms.xhtml" title="Declares mdatom data structure. ">t_mdatoms</a> *mdatoms, t_nrnb *nrnb, gmx_wallcycle_t wcycle, gmx_edsam_t ed, t_forcerec *fr, int repl_ex_nst, int repl_ex_nex, int repl_ex_seed, real cpt_period, real max_hours, int imdport, unsigned long Flags, gmx_walltime_accounting_t walltime_accounting) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae556e926034aab8ae03d4aa73e2bab4b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double gmx::do_steep </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fplog</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nfile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structt__filenm.xhtml">t_filenm</a>&#160;</td>
          <td class="paramname"><em>fnm</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_output_env_t *&#160;</td>
          <td class="paramname"><em>oenv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bVerbose</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nstglobalcomm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_vsite_t *&#160;</td>
          <td class="paramname"><em>vsite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_constr_t&#160;</td>
          <td class="paramname"><em>constr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>stepout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_inputrec *&#160;</td>
          <td class="paramname"><em>inputrec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_mtop_t *&#160;</td>
          <td class="paramname"><em>top_global</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_fcdata *&#160;</td>
          <td class="paramname"><em>fcd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_state *&#160;</td>
          <td class="paramname"><em>state_global</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *&#160;</td>
          <td class="paramname"><em>mdatoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_nrnb *&#160;</td>
          <td class="paramname"><em>nrnb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="edsam_8h.xhtml#a0fa9ace476add5ee1fd6cd76c870f32e">gmx_edsam_t</a>&#160;</td>
          <td class="paramname"><em>ed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_forcerec *&#160;</td>
          <td class="paramname"><em>fr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_nst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_nex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_seed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_membed_t *&#160;</td>
          <td class="paramname"><em>membed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>cpt_period</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>max_hours</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>imdport</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>Flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__walltime__accounting.xhtml">gmx_walltime_accounting_t</a>&#160;</td>
          <td class="paramname"><em>walltime_accounting</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Do steepest descents minimization. </p>
<p>Integrator algorithm implementation. (FILE *fplog, t_commrec *cr, </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fplog</td><td>Log file for output </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cr</td><td>Communication record </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nfile</td><td>Number of files </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fnm</td><td>Filename structure array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">oenv</td><td>Output information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bVerbose</td><td>Verbose output or not </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nstglobalcomm</td><td>How often global communication is done </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vsite</td><td>Virtual site information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">constr</td><td>Constraint information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stepout</td><td>How often we writen to the console </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">inputrec</td><td>Input record with mdp options </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">top_global</td><td>Molecular topology for the whole system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fcd</td><td>Force and constraint data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">state_global</td><td>The state (x, v, f, box etc.) of the whole system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mdatoms</td><td>Structure containing atom information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nrnb</td><td>Accounting for floating point operations </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>Wall cycle timing information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ed</td><td>Essential dynamics sampling information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fr</td><td>Force record with cut-off information and more </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_nst</td><td>How often we do replica exchange (in steps) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_nex</td><td>How many replicas we have </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_seed</td><td>The seed for Monte Carlo swaps </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">membed</td><td>Membrane embedding data structure </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cpt_period</td><td>How often to checkpoint the simulation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_hours</td><td>Maximume length of the simulation (wall time) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">imdport</td><td>Interactive MD port (socket) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Flags</td><td>Flags to control mdrun </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">walltime_accounting</td><td>More timing information (FILE *fplog, t_commrec *cr, int nfile, const <a class="el" href="structt__filenm.xhtml" title="File name option definition for C code. ">t_filenm</a> fnm[], const gmx_output_env_t *oenv, gmx_bool bVerbose, int nstglobalcomm, gmx_vsite_t *vsite, gmx_constr_t constr, int stepout, t_inputrec *inputrec, gmx_mtop_t *top_global, t_fcdata *fcd, t_state *state_global, <a class="el" href="structt__mdatoms.xhtml" title="Declares mdatom data structure. ">t_mdatoms</a> *mdatoms, t_nrnb *nrnb, gmx_wallcycle_t wcycle, gmx_edsam_t ed, t_forcerec *fr, int repl_ex_nst, int repl_ex_nex, int repl_ex_seed, real cpt_period, real max_hours, int imdport, unsigned long Flags, gmx_walltime_accounting_t walltime_accounting) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a861907c530b5abf0554f48167ebdd2e8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double gmx::do_tpi </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fplog</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nfile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structt__filenm.xhtml">t_filenm</a>&#160;</td>
          <td class="paramname"><em>fnm</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_output_env_t *&#160;</td>
          <td class="paramname"><em>oenv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bVerbose</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nstglobalcomm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_vsite_t *&#160;</td>
          <td class="paramname"><em>vsite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_constr_t&#160;</td>
          <td class="paramname"><em>constr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>stepout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_inputrec *&#160;</td>
          <td class="paramname"><em>inputrec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_mtop_t *&#160;</td>
          <td class="paramname"><em>top_global</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_fcdata *&#160;</td>
          <td class="paramname"><em>fcd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_state *&#160;</td>
          <td class="paramname"><em>state_global</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__mdatoms.xhtml">t_mdatoms</a> *&#160;</td>
          <td class="paramname"><em>mdatoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_nrnb *&#160;</td>
          <td class="paramname"><em>nrnb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="edsam_8h.xhtml#a0fa9ace476add5ee1fd6cd76c870f32e">gmx_edsam_t</a>&#160;</td>
          <td class="paramname"><em>ed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_forcerec *&#160;</td>
          <td class="paramname"><em>fr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_nst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_nex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_seed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_membed_t *&#160;</td>
          <td class="paramname"><em>membed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>cpt_period</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>max_hours</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>imdport</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>Flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structgmx__walltime__accounting.xhtml">gmx_walltime_accounting_t</a>&#160;</td>
          <td class="paramname"><em>walltime_accounting</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Do test particle insertion. </p>
<p>Integrator algorithm implementation. (FILE *fplog, t_commrec *cr, </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fplog</td><td>Log file for output </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cr</td><td>Communication record </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nfile</td><td>Number of files </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fnm</td><td>Filename structure array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">oenv</td><td>Output information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bVerbose</td><td>Verbose output or not </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nstglobalcomm</td><td>How often global communication is done </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vsite</td><td>Virtual site information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">constr</td><td>Constraint information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stepout</td><td>How often we writen to the console </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">inputrec</td><td>Input record with mdp options </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">top_global</td><td>Molecular topology for the whole system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fcd</td><td>Force and constraint data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">state_global</td><td>The state (x, v, f, box etc.) of the whole system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mdatoms</td><td>Structure containing atom information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nrnb</td><td>Accounting for floating point operations </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>Wall cycle timing information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ed</td><td>Essential dynamics sampling information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fr</td><td>Force record with cut-off information and more </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_nst</td><td>How often we do replica exchange (in steps) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_nex</td><td>How many replicas we have </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_seed</td><td>The seed for Monte Carlo swaps </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">membed</td><td>Membrane embedding data structure </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cpt_period</td><td>How often to checkpoint the simulation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_hours</td><td>Maximume length of the simulation (wall time) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">imdport</td><td>Interactive MD port (socket) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Flags</td><td>Flags to control mdrun </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">walltime_accounting</td><td>More timing information (FILE *fplog, t_commrec *cr, int nfile, const <a class="el" href="structt__filenm.xhtml" title="File name option definition for C code. ">t_filenm</a> fnm[], const gmx_output_env_t *oenv, gmx_bool bVerbose, int nstglobalcomm, gmx_vsite_t *vsite, gmx_constr_t constr, int stepout, t_inputrec *inputrec, gmx_mtop_t *top_global, t_fcdata *fcd, t_state *state_global, <a class="el" href="structt__mdatoms.xhtml" title="Declares mdatom data structure. ">t_mdatoms</a> *mdatoms, t_nrnb *nrnb, gmx_wallcycle_t wcycle, gmx_edsam_t ed, t_forcerec *fr, int repl_ex_nst, int repl_ex_nex, int repl_ex_seed, real cpt_period, real max_hours, int imdport, unsigned long Flags, gmx_walltime_accounting_t walltime_accounting) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9a81ecdda73e384cd4e6896492144529"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::erf </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float erf(x). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>erf(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a6a3fe934a0b6419312a82b6bb6b8b6ff"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::erf </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double erf(x). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>erf(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="aad005ed4133f5a01702c63a9440feab7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::erfc </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float erfc(x). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>erfc(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a56c071a6a14720e2b94e4b034e110614"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::erfc </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double erfc(x). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>erfc(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a56d277c19df61f3b0176da88ba40b53a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::erfcSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double erfc(x), but with single accuracy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>erfc(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a2dad03094a0ea5970a5f0977ce5fee84"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double gmx::erfinv </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Inverse error function, double precision. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, should be in the range -1.0 &lt; x &lt; 1.0</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The inverse of the error function if the argument is inside the range, +/- infinity if it is exactly 1.0 or -1.0, and NaN otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a85012c7d3609ac21e4052fc3114125a9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float gmx::erfinv </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Inverse error function, single precision. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, should be in the range -1.0 &lt; x &lt; 1.0</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The inverse of the error function if the argument is inside the range, +/- infinity if it is exactly 1.0 or -1.0, and NaN otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a2491a7f4b92881d4887491a532e8e5f7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::erfSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double erf(x), but with single accuracy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>erf(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a8b3a53c1076c47dbbef4e6ec2d3191ce"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::exp </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float exp(x). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>exp(x). Undefined if input argument caused overflow.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a2ed21bd309bf862089f430402b8fd8b9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::exp </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double exp(x). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>exp(x). Undefined if input argument caused overflow.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="aed7303338070cf13c11a8b765017a182"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::exp2 </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float 2^x. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>2^x. Undefined if input argument caused overflow.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a8793845dd7a03f8e3d00bde1b04a2785"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::exp2 </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double 2^x. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>2^x. Undefined if input argument caused overflow.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a119f14f4a364f71eb9273b5dd8c927cd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::exp2SingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double 2^x, but with single accuracy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>2^x. Undefined if input argument caused overflow.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a6b19d8b9f07e36c8152b30d4b3caaad6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::expandScalarsToTriplets </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scalar</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>triplets0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>triplets1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>triplets2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy single float to three variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">scalar</td><td>Floating-point input. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">triplets0</td><td>Copy 1. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">triplets1</td><td>Copy 2. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">triplets2</td><td>Copy 3.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="af8a2ae7f742d7612f2808bfd39b0f975"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::expandScalarsToTriplets </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>scalar</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>triplets0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>triplets1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>triplets2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy single double to three variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">scalar</td><td>Floating-point input. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">triplets0</td><td>Copy 1. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">triplets1</td><td>Copy 2. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">triplets2</td><td>Copy 3.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="afa6d2866bd8be11dce227ad0e26511a4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::expSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double exp(x), but with single accuracy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>exp(x). Undefined if input argument caused overflow.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a48a0504dfe392db42fd419cd80ea7d9a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int index&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::int32_t gmx_simdcall gmx::extract </td>
          <td>(</td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Extract element with index i from <a class="el" href="classgmx_1_1SimdFInt32.xhtml">gmx::SimdFInt32</a>. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga23ac53a0050467ac215f146f6afc6380">GMX_SIMD_HAVE_FINT32_EXTRACT</a> is 1.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">index</td><td>Compile-time constant, position to extract (first position is 0) </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD variable from which to extract value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Single integer from position index in SIMD variable. </dd></dl>

</div>
</div>
<a class="anchor" id="a3db712af1745296d49be276840062dee"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int index&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::int32_t gmx_simdcall gmx::extract </td>
          <td>(</td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Extract element with index i from <a class="el" href="classgmx_1_1SimdDInt32.xhtml">gmx::SimdDInt32</a>. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gabae2f56a4d87b8e52b5df066888a4c07">GMX_SIMD_HAVE_DINT32_EXTRACT</a> is 1.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">index</td><td>Compile-time constant, position to extract (first position is 0) </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD variable from which to extract value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Single integer from position index in SIMD variable. </dd></dl>

</div>
</div>
<a class="anchor" id="a183d89182d418bb66a668104978af5bf"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::fma </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float Fused-multiply-add. Result is a*b + c. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b + c</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a79e2ba07938cafa28c0988ba52874f46"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::fma </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>double Fused-multiply-add. Result is a*b + c. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b + c</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a6969c0baf1592d7a5fec29636a85628f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::fma </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD float Fused-multiply-add. Result is a*b+c. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b+c </dd></dl>

</div>
</div>
<a class="anchor" id="a3b86949473ebaef8ccbd4d2852947839"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::fma </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD double Fused-multiply-add. Result is a*b+c. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b+c </dd></dl>

</div>
</div>
<a class="anchor" id="afad947f51589a3a9eef2f8364ab62c19"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::fms </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float Fused-multiply-subtract. Result is a*b - c. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b - c</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="abcb2c8942d173c6a9964940f90c55b2a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::fms </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>double Fused-multiply-subtract. Result is a*b - c. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b - c</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a075eeabb5171e4f74cdd74e2f97bab5c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::fms </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD float Fused-multiply-subtract. Result is a*b-c. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b-c </dd></dl>

</div>
</div>
<a class="anchor" id="a86c14cb73d3484b0a5e01e74640a4ee3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::fms </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD double Fused-multiply-subtract. Result is a*b-c. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b-c </dd></dl>

</div>
</div>
<a class="anchor" id="a55183d689ab9328c18c3b3f819bd7266"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::fnma </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float Fused-negated-multiply-add. Result is -a*b + c. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>-a*b + c</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="adcf7849c8ce1bbbe3e2fecffedfc05e8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::fnma </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>double Fused-negated-multiply-add. Result is - a*b + c. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>-a*b + c</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a6be2e3e5adbdf49e6468c8a2d638658d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::fnma </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD float Fused-negated-multiply-add. Result is -a*b+c. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>-a*b+c </dd></dl>

</div>
</div>
<a class="anchor" id="aaeca5c242a059145a90dc091db78ad57"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::fnma </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD double Fused-negated-multiply-add. Result is -a*b+c. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>-a*b+c </dd></dl>

</div>
</div>
<a class="anchor" id="aa6e6950597f4833fa93b09a94e7b0e16"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::fnms </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float Fused-negated-multiply-subtract. Result is -a*b - c. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>-a*b - c</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="ad9bd8328d5cbdb7f6a054b877183f277"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::fnms </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>double Fused-negated-multiply-subtract. Result is -a*b - c. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>-a*b - c</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="af8fe2e25414c377f8ed03d5c23f84963"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::fnms </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD float Fused-negated-multiply-subtract. Result is -a*b-c. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>-a*b-c </dd></dl>

</div>
</div>
<a class="anchor" id="a44d26f7a7b8d6088d41be0b646f71543"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::fnms </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD double Fused-negated-multiply-subtract. Result is -a*b-c. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>-a*b-c </dd></dl>

</div>
</div>
<a class="anchor" id="a25fcdea880b577ac51ac92b915fd89e7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::frexp </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFInt32 *&#160;</td>
          <td class="paramname"><em>exponent</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Extract (integer) exponent and fraction from single precision SIMD. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">value</td><td>Floating-point value to extract from </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">exponent</td><td>Returned exponent of value, integer SIMD format. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Fraction of value, floating-point SIMD format. </dd></dl>

</div>
</div>
<a class="anchor" id="a93cd53cbf5857c1350814602d5e6418d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::frexp </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDInt32 *&#160;</td>
          <td class="paramname"><em>exponent</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Extract (integer) exponent and fraction from double precision SIMD. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">value</td><td>Floating-point value to extract from </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">exponent</td><td>Returned exponent of value, integer SIMD format. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Fraction of value, floating-point SIMD format. </dd></dl>

</div>
</div>
<a class="anchor" id="a179f05bc9899fe2b7e71d53a1a95b629"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::gatherLoadBySimdIntTranspose </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>v2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>v3</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load 4 floats from base/offsets and store into variables. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">base</td><td>Aligned pointer to the start of the memory. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Integer type with offset to the start of each triplet. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v0</td><td>First float, base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v1</td><td>Second float, base[align*offset[0] + 1]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v2</td><td>Third float, base[align*offset[0] + 2]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v3</td><td>Fourth float, base[align*offset[0] + 3].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a0614e0463cccdf97cec36fffb2b24764"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::gatherLoadBySimdIntTranspose </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>v1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load 2 floats from base/offsets and store into variables (aligned). </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">base</td><td>Aligned pointer to the start of the memory. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Integer type with offset to the start of each triplet. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v0</td><td>First float, base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v1</td><td>Second float, base[align*offset[0] + 1].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a92c67d959864d2549a679f0f2245bacb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::gatherLoadBySimdIntTranspose </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>v2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>v3</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load 4 doubles from base/offsets and store into variables. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">base</td><td>Aligned pointer to the start of the memory. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Integer type with offset to the start of each triplet. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v0</td><td>First double, base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v1</td><td>Second double, base[align*offset[0] + 1]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v2</td><td>Third double, base[align*offset[0] + 2]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v3</td><td>Fourth double, base[align*offset[0] + 3].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a6bb92443ba8da5d878c1dd85b2bcde8d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::gatherLoadBySimdIntTranspose </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>v1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load 2 doubles from base/offsets and store into variables (aligned). </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">base</td><td>Aligned pointer to the start of the memory. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Integer type with offset to the start of each triplet. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v0</td><td>First double, base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v1</td><td>Second double, base[align*offset[0] + 1].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="aba7ff3639534a22d4b9c7a834d7584fd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::gatherLoadTranspose </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>v2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>v3</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load 4 consecutive floats from base/offset into four variables. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory from which we read. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">base</td><td>Pointer to the start of the memory area </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Index to data. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v0</td><td>1st float, base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v1</td><td>2nd float, base[align*offset[0] + 1]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v2</td><td>3rd float, base[align*offset[0] + 2]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v3</td><td>4th float, base[align*offset[0] + 3].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a4c0cda66eba19ad12a50e48f848f268f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::gatherLoadTranspose </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>v1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load 2 consecutive floats from base/offset into four variables. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory from which we read. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">base</td><td>Pointer to the start of the memory area </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Index to data. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v0</td><td>1st float, base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v1</td><td>2nd float, base[align*offset[0] + 1].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a94e990607fd4d48ca160fbc380597f5a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::gatherLoadTranspose </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>v2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>v3</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load 4 consecutive doubles from base/offset into four variables. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory from which we read. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">base</td><td>Pointer to the start of the memory area </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Index to data. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v0</td><td>1st double, base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v1</td><td>2nd double, base[align*offset[0] + 1]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v2</td><td>3rd double, base[align*offset[0] + 2]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v3</td><td>4th double, base[align*offset[0] + 3].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a0c464ebd492587005bb4baefb4293072"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::gatherLoadTranspose </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>v1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load 2 consecutive doubles from base/offset into four variables. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory from which we read. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">base</td><td>Pointer to the start of the memory area </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Index to data. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v0</td><td>1st double, base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v1</td><td>2nd double, base[align*offset[0] + 1].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a66c1f8fc580e64de5835134f18f75f61"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx_simdcall gmx::gatherLoadTransposeHsimd </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>base0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>base1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble *&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble *&#160;</td>
          <td class="paramname"><em>v1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load 2 consecutive doubles from each of GMX_SIMD_DOUBLE_WIDTH/2 offsets, transpose into SIMD double (low half from base0, high from base1). </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the storage, i.e. the distance (measured in elements, not bytes) between index points. When this is identical to the number of output components the data is packed without padding. This must be a multiple of the alignment to keep all data aligned. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">base0</td><td>Pointer to base of first aligned memory </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">base1</td><td>Pointer to base of second aligned memory </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Offset to the start of each pair </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v0</td><td>1st element in each pair, base0 in low and base1 in high half. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v1</td><td>2nd element in each pair, base0 in low and base1 in high half.</td></tr>
  </table>
  </dd>
</dl>
<p>The offset array should be of half the SIMD width length, so it corresponds to the half-SIMD-register operations. This also means it must be aligned to half the integer SIMD width (i.e., GMX_SIMD_DINT32_WIDTH/2).</p>
<p>The floating-point memory locations must be aligned, but only to the smaller of two elements and the floating-point SIMD width.</p>
<p>This routine is primarily designed to load nonbonded parameters in the kernels. It is the equivalent of the full-width routine <a class="el" href="group__module__simd.xhtml#ga725596b415f4bca94e71321b6845bed4" title="Load 4 consecutive double from each of GMX_SIMD_DOUBLE_WIDTH offsets, and transpose into 4 SIMD doubl...">gatherLoadTranspose()</a>, but just as the other hsimd routines it will pick half-SIMD-width data from base0 and put in the lower half, while the upper half comes from base1.</p>
<p>For an example, assume the SIMD width is 8, align is 2, that base0 is [A0 A1 B0 B1 C0 C1 D0 D1 ...], and base1 [E0 E1 F0 F1 G0 G1 H0 H1...].</p>
<p>Then we will get v0 as [A0 B0 C0 D0 E0 F0 G0 H0] and v1 as [A1 B1 C1 D1 E1 F1 G1 H1].</p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gadef533340f8e648dfb550cbd8cfd9fc7">GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE</a> is 1. </p>

</div>
</div>
<a class="anchor" id="a11666cd65bdfee331799b2c1dc732c60"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx_simdcall gmx::gatherLoadTransposeHsimd </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>base0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>base1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat *&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat *&#160;</td>
          <td class="paramname"><em>v1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load 2 consecutive floats from each of GMX_SIMD_FLOAT_WIDTH/2 offsets, transpose into SIMD float (low half from base0, high from base1). </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the storage, i.e. the distance (measured in elements, not bytes) between index points. When this is identical to the number of output components the data is packed without padding. This must be a multiple of the alignment to keep all data aligned. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">base0</td><td>Pointer to base of first aligned memory </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">base1</td><td>Pointer to base of second aligned memory </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Offset to the start of each pair </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v0</td><td>1st element in each pair, base0 in low and base1 in high half. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v1</td><td>2nd element in each pair, base0 in low and base1 in high half.</td></tr>
  </table>
  </dd>
</dl>
<p>The offset array should be of half the SIMD width length, so it corresponds to the half-SIMD-register operations. This also means it must be aligned to half the integer SIMD width (i.e., GMX_SIMD_FINT32_WIDTH/2).</p>
<p>The floating-point memory locations must be aligned, but only to the smaller of two elements and the floating-point SIMD width.</p>
<p>This routine is primarily designed to load nonbonded parameters in the kernels. It is the equivalent of the full-width routine <a class="el" href="group__module__simd.xhtml#ga725596b415f4bca94e71321b6845bed4" title="Load 4 consecutive double from each of GMX_SIMD_DOUBLE_WIDTH offsets, and transpose into 4 SIMD doubl...">gatherLoadTranspose()</a>, but just as the other hsimd routines it will pick half-SIMD-width data from base0 and put in the lower half, while the upper half comes from base1.</p>
<p>For an example, assume the SIMD width is 8, align is 2, that base0 is [A0 A1 B0 B1 C0 C1 D0 D1 ...], and base1 [E0 E1 F0 F1 G0 G1 H0 H1...].</p>
<p>Then we will get v0 as [A0 B0 C0 D0 E0 F0 G0 H0] and v1 as [A1 B1 C1 D1 E1 F1 G1 H1].</p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gac40bf3261e36fb7ff022e8ab37b04fcf">GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT</a> is 1. </p>

</div>
</div>
<a class="anchor" id="a29c67b43b26cfba5ec360bf020df4c8a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::gatherLoadUBySimdIntTranspose </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>v1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load 2 floats from base/offsets and store into variables (unaligned). </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">base</td><td>Aligned pointer to the start of the memory. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Integer type with offset to the start of each triplet. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v0</td><td>First float, base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v1</td><td>Second float, base[align*offset[0] + 1].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="af74c58ce1915c6a25061153cd3b4bde8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::gatherLoadUBySimdIntTranspose </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>v1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load 2 doubles from base/offsets and store into variables (unaligned). </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">base</td><td>Aligned pointer to the start of the memory. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Integer type with offset to the start of each triplet. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v0</td><td>First double, base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v1</td><td>Second double, base[align*offset[0] + 1].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="acfefc291c66a8404f2aad767af91cb21"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::gatherLoadUTranspose </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load 3 consecutive floats from base/offsets, store into three vars. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">base</td><td>Pointer to the start of the memory area </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Offset to the start of data. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v0</td><td>1st value, base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v1</td><td>2nd value, base[align*offset[0] + 1]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v2</td><td>3rd value, base[align*offset[0] + 2].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a0502844193d9fcf13648a4165a67a1a3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::gatherLoadUTranspose </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load 3 consecutive doubles from base/offsets, store into three vars. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory from which we read, i.e. distance (measured in elements, not bytes) between index points. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">base</td><td>Pointer to the start of the memory area </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Offset to the start of data. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v0</td><td>1st double, base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v1</td><td>2nd double, base[align*offset[0] + 1]. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v2</td><td>3rd double, base[align*offset[0] + 2].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a7ba622deb792fdc881824ce7a36d8440"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class RealType  = real, unsigned int Bits, class Rng &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">RealType gmx::generateCanonical </td>
          <td>(</td>
          <td class="paramtype">Rng &amp;&#160;</td>
          <td class="paramname"><em>g</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Generate a floating-point value with specified number of random bits. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">RealType</td><td>Floating-point type to generate </td></tr>
    <tr><td class="paramname">Bits</td><td>Number of random bits to generate </td></tr>
    <tr><td class="paramname">Rng</td><td>Random number generator class</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">g</td><td>Random number generator to use</td></tr>
  </table>
  </dd>
</dl>
<p>This implementation avoids the bug in libc++ and stdlibc++ (which is due to the C++ standard being unclear) where 1.0 can be returned occasionally. </p>

</div>
</div>
<a class="anchor" id="a87a820e81baebe1c30a4190eb2aa2a64"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::int64_t gmx::greatestCommonDivisor </td>
          <td>(</td>
          <td class="paramtype">std::int64_t&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::int64_t&#160;</td>
          <td class="paramname"><em>q</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find greatest common divisor of two numbers. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>First number, positive </td></tr>
    <tr><td class="paramname">q</td><td>Second number, positive</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Greatest common divisor of p and q </dd></dl>

</div>
</div>
<a class="anchor" id="a2e7f54c2fe31c60ecc1dd2b4c95667d8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx_simdcall gmx::incrDualHsimd </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add each half of SIMD variable to separate memory adresses. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m0</td><td>Pointer to memory aligned to half SIMD width. </td></tr>
    <tr><td class="paramname">m1</td><td>Pointer to memory aligned to half SIMD width. </td></tr>
    <tr><td class="paramname">a</td><td>SIMD variable. Lower half will be added to m0, upper half to m1.</td></tr>
  </table>
  </dd>
</dl>
<p>The memory must be aligned to half SIMD width.</p>
<dl class="section note"><dt>Note</dt><dd>The updated m0 value is written before m1 is read from memory, so the result will be correct even if the memory regions overlap.</dd></dl>
<p>Available if <a class="el" href="group__module__simd.xhtml#gadef533340f8e648dfb550cbd8cfd9fc7">GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE</a> is 1. </p>

</div>
</div>
<a class="anchor" id="a02c414f8f25b517e035764998720dd1c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx_simdcall gmx::incrDualHsimd </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add each half of SIMD variable to separate memory adresses. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m0</td><td>Pointer to memory aligned to half SIMD width. </td></tr>
    <tr><td class="paramname">m1</td><td>Pointer to memory aligned to half SIMD width. </td></tr>
    <tr><td class="paramname">a</td><td>SIMD variable. Lower half will be added to m0, upper half to m1.</td></tr>
  </table>
  </dd>
</dl>
<p>The memory must be aligned to half SIMD width.</p>
<dl class="section note"><dt>Note</dt><dd>The updated m0 value is written before m1 is read from memory, so the result will be correct even if the memory regions overlap.</dd></dl>
<p>Available if <a class="el" href="group__module__simd.xhtml#gac40bf3261e36fb7ff022e8ab37b04fcf">GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT</a> is 1. </p>

</div>
</div>
<a class="anchor" id="a6cd74be08263227a2b2f4405dee6a359"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::inv </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate 1/x for float. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument that must be nonzero. This routine does not check arguments. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1/x. Result is undefined if your argument was invalid.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a8ed9172c60ed326ca31f64a490fabe17"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::inv </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate 1/x for double. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument that must be nonzero. This routine does not check arguments. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1/x. Result is undefined if your argument was invalid.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="acabf4874cb58de0554f95f69c1768882"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::invcbrt </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate inverse cube root of x in single precision. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>x^(-1/3)</dd></dl>
<p>This routine is typically faster than using std::pow(). </p>

</div>
</div>
<a class="anchor" id="a08d99226376a495b484eccd203d29c8d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::invcbrt </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate inverse sixth root of x in double precision. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>x^(-1/3)</dd></dl>
<p>This routine is typically faster than using std::pow(). </p>

</div>
</div>
<a class="anchor" id="a1d304cf0e3cac1632695e394077fd2d7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::invcbrt </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate inverse sixth root of integer x in double precision. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>x^(-1/3)</dd></dl>
<p>This routine is typically faster than using std::pow(). </p>

</div>
</div>
<a class="anchor" id="a2c4548b5005dd861681ff13e55e5b6f9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::invertBoxMatrix </td>
          <td>(</td>
          <td class="paramtype">const matrix&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">matrix&#160;</td>
          <td class="paramname"><em>dest</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Invert a simulation-box matrix in <code>src</code>, return in <code>dest</code>. </p>
<p>This routine assumes that src is a simulation-box matrix, i.e. has zeroes in the upper-right triangle. A fatal error occurs if the product of the leading diagonal is too small. The inversion can be done "in place", i.e <code>src</code> and <code>dest</code> can be the same matrix. </p>

</div>
</div>
<a class="anchor" id="a2824e7adcb69e96942fefcb67809ec5e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::invertMatrix </td>
          <td>(</td>
          <td class="paramtype">const matrix&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">matrix&#160;</td>
          <td class="paramname"><em>dest</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Invert a general 3x3 matrix in <code>src</code>, return in <code>dest</code>. </p>
<p>A fatal error occurs if the determinant is too small. <code>src</code> and <code>dest</code> cannot be the same matrix. </p>

</div>
</div>
<a class="anchor" id="a8ac51c492a5589e075b7b8ebda5a8cbd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::invSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate 1/x for double, but with single accuracy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument that must be nonzero. This routine does not check arguments. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1/x. Result is undefined if your argument was invalid.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="ad3aeb9a178f07d4bc64b934555d12842"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::invsixthroot </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate inverse sixth root of x in single precision. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, must be greater than zero.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>x^(-1/6)</dd></dl>
<p>This routine is typically faster than using std::pow(). </p>

</div>
</div>
<a class="anchor" id="a2f8b9b01e7c291a443840d4f7af97c5c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::invsixthroot </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate inverse sixth root of x in double precision. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, must be greater than zero.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>x^(-1/6)</dd></dl>
<p>This routine is typically faster than using std::pow(). </p>

</div>
</div>
<a class="anchor" id="a1604baa1a44d1de7bafa433c9443c395"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::invsixthroot </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate inverse sixth root of integer x in double precision. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, must be greater than zero.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>x^(-1/6)</dd></dl>
<p>This routine is typically faster than using std::pow(). </p>

</div>
</div>
<a class="anchor" id="a953226d61f6527af6485ea56a8384c85"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::invsqrt </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate 1.0/sqrt(x) in single precision. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Positive value to calculate inverse square root for</td></tr>
  </table>
  </dd>
</dl>
<p>For now this is implemented with std::sqrt(x) since gcc seems to do a decent job optimizing it. However, we might decide to use instrinsics or compiler-specific functions in the future.</p>
<dl class="section return"><dt>Returns</dt><dd>1.0/sqrt(x) </dd></dl>

</div>
</div>
<a class="anchor" id="ae26d0b65eb141c73979c5d2f1d0e13fa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::invsqrt </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate 1.0/sqrt(x) in double precision, but single range. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Positive value to calculate inverse square root for, must be in the input domain valid for single precision.</td></tr>
  </table>
  </dd>
</dl>
<p>For now this is implemented with std::sqrt(x). However, we might decide to use instrinsics or compiler-specific functions in the future, and then we want to have the freedom to do the first step in single precision.</p>
<dl class="section return"><dt>Returns</dt><dd>1.0/sqrt(x) </dd></dl>

</div>
</div>
<a class="anchor" id="aa91cb31b7abc3e020022ac8ce0b1b262"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::invsqrt </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate 1.0/sqrt(x) for integer x in double precision. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Positive value to calculate inverse square root for.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1.0/sqrt(x) </dd></dl>

</div>
</div>
<a class="anchor" id="aba2ac92d9abba8296506e281dc66c47a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::invsqrtPair </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>out0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>out1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate 1/sqrt(x) for two floats. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">x0</td><td>First argument, x0 must be positive - no argument checking. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">x1</td><td>Second argument, x1 must be positive - no argument checking. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">out0</td><td>Result 1/sqrt(x0) </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">out1</td><td>Result 1/sqrt(x1)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="abb50fcc000a2c2d4b8446fc17a5695e0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::invsqrtPair </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>out0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>out1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate 1/sqrt(x) for two doubles. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">x0</td><td>First argument, x0 must be positive - no argument checking. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">x1</td><td>Second argument, x1 must be positive - no argument checking. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">out0</td><td>Result 1/sqrt(x0) </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">out1</td><td>Result 1/sqrt(x1)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a18f2d71567d1b88689c8498f3592b386"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::invsqrtPairSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>out0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>out1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate 1/sqrt(x) for two doubles, but with single accuracy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">x0</td><td>First argument, x0 must be positive - no argument checking. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">x1</td><td>Second argument, x1 must be positive - no argument checking. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">out0</td><td>Result 1/sqrt(x0) </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">out1</td><td>Result 1/sqrt(x1)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a44adc739c8fb319abe1b6769f39e9341"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::invsqrtSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate 1/sqrt(x) for double, but with single accuracy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument that must be &gt;0. This routine does not check arguments. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1/sqrt(x). Result is undefined if your argument was invalid.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a7d8d4c79d514bc6dc56832b2a44fc312"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::ldexp </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>exponent</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Multiply a SIMD float value by the number 2 raised to an exp power. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>Floating-point number to multiply with new exponent </td></tr>
    <tr><td class="paramname">exponent</td><td>Integer that will not overflow as 2^exponent. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>value*2^exponent </dd></dl>

</div>
</div>
<a class="anchor" id="a86c665079d6936b82f5b7bc065dd13aa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::ldexp </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>exponent</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Multiply a SIMD double value by the number 2 raised to an exp power. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>Floating-point number to multiply with new exponent </td></tr>
    <tr><td class="paramname">exponent</td><td>Integer that will not overflow as 2^exponent. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>value*2^exponent </dd></dl>

</div>
</div>
<a class="anchor" id="af6ad160249e7bc4726d93e89407c987e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static const <a class="el" href="classgmx_1_1SimdLoadFProxyInternal.xhtml">SimdLoadFProxyInternal</a> gmx_simdcall gmx::load </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load function that returns proxy object for <a class="el" href="classgmx_1_1SimdFloat.xhtml" title="Float SIMD variable. Available if GMX_SIMD_HAVE_FLOAT is 1. ">SimdFloat</a> and float. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to load memory </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Proxy object that will call the actual load for either <a class="el" href="classgmx_1_1SimdFloat.xhtml" title="Float SIMD variable. Available if GMX_SIMD_HAVE_FLOAT is 1. ">SimdFloat</a> or float when you assign it and the conversion method is called. </dd></dl>

</div>
</div>
<a class="anchor" id="a9445e827c666024d7b59d6c40052f1ea"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static const <a class="el" href="classgmx_1_1SimdLoadDProxyInternal.xhtml">SimdLoadDProxyInternal</a> gmx_simdcall gmx::load </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load function that returns proxy object for <a class="el" href="classgmx_1_1SimdDouble.xhtml" title="Double SIMD variable. Available if GMX_SIMD_HAVE_DOUBLE is 1. ">SimdDouble</a> and double. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to load memory </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Proxy object that will call the actual load for either <a class="el" href="classgmx_1_1SimdDouble.xhtml" title="Double SIMD variable. Available if GMX_SIMD_HAVE_DOUBLE is 1. ">SimdDouble</a> or double when you assign it and the conversion method is called. </dd></dl>

</div>
</div>
<a class="anchor" id="ad94d8159b73ca606c72cb0210cd69ad7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static const <a class="el" href="classgmx_1_1SimdLoadIProxyInternal.xhtml">SimdLoadIProxyInternal</a> gmx_simdcall gmx::load </td>
          <td>(</td>
          <td class="paramtype">const std::int32_t *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Integer load function (proxy object) for <a class="el" href="classgmx_1_1SimdFInt32.xhtml" title="Integer SIMD variable type to use for conversions to/from float. ">SimdFInt32</a>, SImdDInt32, and int32. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to load memory </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Proxy object that will call the actual load for either <a class="el" href="classgmx_1_1SimdFInt32.xhtml" title="Integer SIMD variable type to use for conversions to/from float. ">SimdFInt32</a> or <a class="el" href="classgmx_1_1SimdDInt32.xhtml" title="Integer SIMD variable type to use for conversions to/from double. ">SimdDInt32</a> when you assign it and the conversion method is called. </dd></dl>

</div>
</div>
<a class="anchor" id="a110e4ed8c03c3842609f70bcf1d86dab"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::load1DualHsimd </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load two doubles, spread 1st in low half, 2nd in high half. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to two adjacent double values.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD variable where all elements in the low half have been set to m[0], and all elements in high half to m[1].</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This routine always loads two values and sets the halves separately. If you want to set all elements to the same value, simply use the standard (non-half-SIMD) operations.</dd></dl>
<p>Available if <a class="el" href="group__module__simd.xhtml#gadef533340f8e648dfb550cbd8cfd9fc7">GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE</a> is 1. </p>

</div>
</div>
<a class="anchor" id="aa822fac47b4eafdd526a831d32438840"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::load1DualHsimd </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load two floats, spread 1st in low half, 2nd in high half. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to two adjacent float values.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD variable where all elements in the low half have been set to m[0], and all elements in high half to m[1].</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This routine always loads two values and sets the halves separately. If you want to set all elements to the same value, simply use the standard (non-half-SIMD) operations.</dd></dl>
<p>Available if <a class="el" href="group__module__simd.xhtml#gac40bf3261e36fb7ff022e8ab37b04fcf">GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT</a> is 1. </p>

</div>
</div>
<a class="anchor" id="a5ddc2fd6582a66337e35df94128c183c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::loadDualHsimd </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>m1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load low &amp; high parts of SIMD double from different locations. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m0</td><td>Pointer to memory aligned to half SIMD width. </td></tr>
    <tr><td class="paramname">m1</td><td>Pointer to memory aligned to half SIMD width.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD variable with low part loaded from m0, high from m1.</dd></dl>
<p>Available if <a class="el" href="group__module__simd.xhtml#gadef533340f8e648dfb550cbd8cfd9fc7">GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE</a> is 1. </p>

</div>
</div>
<a class="anchor" id="a22b5bada57cd592ed73c5af81953f4b1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::loadDualHsimd </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>m1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load low &amp; high parts of SIMD float from different locations. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m0</td><td>Pointer to memory aligned to half SIMD width. </td></tr>
    <tr><td class="paramname">m1</td><td>Pointer to memory aligned to half SIMD width.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD variable with low part loaded from m0, high from m1.</dd></dl>
<p>Available if <a class="el" href="group__module__simd.xhtml#gac40bf3261e36fb7ff022e8ab37b04fcf">GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT</a> is 1. </p>

</div>
</div>
<a class="anchor" id="a0fc17c3e9b2d0f83db3b7f1274f945b5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::loadDuplicateHsimd </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load half-SIMD-width double data, spread to both halves. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to memory aligned to half SIMD width.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD variable with both halves loaded from m..</dd></dl>
<p>Available if <a class="el" href="group__module__simd.xhtml#gadef533340f8e648dfb550cbd8cfd9fc7">GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE</a> is 1. </p>

</div>
</div>
<a class="anchor" id="a62c7b5f1de8725256644546b05e3e63b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::loadDuplicateHsimd </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load half-SIMD-width float data, spread to both halves. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to memory aligned to half SIMD width.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD variable with both halves loaded from m..</dd></dl>
<p>Available if <a class="el" href="group__module__simd.xhtml#gac40bf3261e36fb7ff022e8ab37b04fcf">GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT</a> is 1. </p>

</div>
</div>
<a class="anchor" id="aac60a1e9bf9b5e7ae62895fb23311d99"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static const <a class="el" href="classgmx_1_1SimdLoadUFProxyInternal.xhtml">SimdLoadUFProxyInternal</a> gmx_simdcall gmx::loadU </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>LoadU function that returns proxy object for <a class="el" href="classgmx_1_1SimdFloat.xhtml" title="Float SIMD variable. Available if GMX_SIMD_HAVE_FLOAT is 1. ">SimdFloat</a> and float. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to loadU memory </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Proxy object that will call the actual loadU for either <a class="el" href="classgmx_1_1SimdFloat.xhtml" title="Float SIMD variable. Available if GMX_SIMD_HAVE_FLOAT is 1. ">SimdFloat</a> or float when you assign it and the conversion method is called. </dd></dl>

</div>
</div>
<a class="anchor" id="adb032148e6416b68e560f6683c889519"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static const <a class="el" href="classgmx_1_1SimdLoadUDProxyInternal.xhtml">SimdLoadUDProxyInternal</a> gmx_simdcall gmx::loadU </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load function that returns proxy object for <a class="el" href="classgmx_1_1SimdDouble.xhtml" title="Double SIMD variable. Available if GMX_SIMD_HAVE_DOUBLE is 1. ">SimdDouble</a> and double. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to load memory </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Proxy object that will call the actual load for either <a class="el" href="classgmx_1_1SimdDouble.xhtml" title="Double SIMD variable. Available if GMX_SIMD_HAVE_DOUBLE is 1. ">SimdDouble</a> or double when you assign it and the conversion method is called. </dd></dl>

</div>
</div>
<a class="anchor" id="a121aa049cf305d012ca3c4462eb5e5f7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static const <a class="el" href="classgmx_1_1SimdLoadUIProxyInternal.xhtml">SimdLoadUIProxyInternal</a> gmx_simdcall gmx::loadU </td>
          <td>(</td>
          <td class="paramtype">const std::int32_t *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Integer loadU function (proxy object) for <a class="el" href="classgmx_1_1SimdFInt32.xhtml" title="Integer SIMD variable type to use for conversions to/from float. ">SimdFInt32</a>, SImdDInt32, and int32. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to load memory </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Proxy object that will call the actual load for either <a class="el" href="classgmx_1_1SimdFInt32.xhtml" title="Integer SIMD variable type to use for conversions to/from float. ">SimdFInt32</a> or <a class="el" href="classgmx_1_1SimdDInt32.xhtml" title="Integer SIMD variable type to use for conversions to/from double. ">SimdDInt32</a> when you assign it and the conversion method is called. </dd></dl>

</div>
</div>
<a class="anchor" id="a7b0a25f25b649f59d96b67f2d73c8ad8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::log </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float log(x). This is the natural logarithm. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, should be &gt;0. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The natural logarithm of x. Undefined if argument is invalid.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a398a52e25652367446f9180a50343885"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::log </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double log(x). This is the natural logarithm. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, should be &gt;0. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The natural logarithm of x. Undefined if argument is invalid.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a2b47d79ef735987258c2f601cf2822be"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int gmx::log2I </td>
          <td>(</td>
          <td class="paramtype">std::uint32_t&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute floor of logarithm to base 2, 32 bit unsigned argument. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>32-bit unsigned argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>log2(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This version of the overloaded function uses unsigned arguments to be able to handle arguments using all 32 bits. </dd></dl>

</div>
</div>
<a class="anchor" id="aa498ec06db6575ec672e5ba847f086ab"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int gmx::log2I </td>
          <td>(</td>
          <td class="paramtype">std::uint64_t&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute floor of logarithm to base 2, 64 bit unsigned argument. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>64-bit unsigned argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>log2(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This version of the overloaded function uses unsigned arguments to be able to handle arguments using all 64 bits. </dd></dl>

</div>
</div>
<a class="anchor" id="ab1cadcfe34ba004506db6e0e11f36c95"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int gmx::log2I </td>
          <td>(</td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute floor of logarithm to base 2, 32 bit signed argument. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>32-bit signed argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>log2(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This version of the overloaded function will assert that x is not negative. </dd></dl>

</div>
</div>
<a class="anchor" id="afbfba3f9dd776dc29c1d0a8311ed793f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int gmx::log2I </td>
          <td>(</td>
          <td class="paramtype">std::int64_t&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute floor of logarithm to base 2, 64 bit signed argument. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>64-bit signed argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>log2(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This version of the overloaded function will assert that x is not negative. </dd></dl>

</div>
</div>
<a class="anchor" id="a54c2c975d7e597b08a67d85920d4f562"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::logSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double log(x), but with single accuracy. This is the natural logarithm. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, should be &gt;0. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The natural logarithm of x. Undefined if argument is invalid.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a8ddacc94505a46b63d40a995556cef32"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">gmx_uint64_t gmx::makeRandomSeed </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return 64 random bits from the random device, suitable as seed. </p>
<p>If the internal random device output is smaller than 64 bits, this routine will use multiple calls internally until we have 64 bits of random data.</p>
<dl class="section return"><dt>Returns</dt><dd>64-bit unsigned integer with random bits. </dd></dl>

</div>
</div>
<a class="anchor" id="a0178a127dde331652ab015323ae622f2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::maskAdd </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add two float variables, masked version. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>term1 </td></tr>
    <tr><td class="paramname">b</td><td>term2 </td></tr>
    <tr><td class="paramname">m</td><td>mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a+b where mask is true, a otherwise.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a68b090d0e3ab5695c508453406ee43c8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::maskAdd </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add two double variables, masked version. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>term1 </td></tr>
    <tr><td class="paramname">b</td><td>term2 </td></tr>
    <tr><td class="paramname">m</td><td>mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a+b where mask is true, a otherwise.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a766a313a4a158cfcb0eed0373dd82dfc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::maskAdd </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFBool&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add two float SIMD variables, masked version. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>term1 </td></tr>
    <tr><td class="paramname">b</td><td>term2 </td></tr>
    <tr><td class="paramname">m</td><td>mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a+b where mask is true, a otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="adab86e04bd62248ab68039d8983a9206"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::maskAdd </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDBool&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add two double SIMD variables, masked version. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>term1 </td></tr>
    <tr><td class="paramname">b</td><td>term2 </td></tr>
    <tr><td class="paramname">m</td><td>mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a+b where mask is true, 0.0 otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a8151e61ef06e30e360c03bba6fb5e2ab"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::maskzFma </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float fused multiply-add, masked version. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
    <tr><td class="paramname">m</td><td>mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b+c where mask is true, 0.0 otherwise.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="aa3cf4eaad108887d2462f5beecd4db62"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::maskzFma </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>double fused multiply-add, masked version. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
    <tr><td class="paramname">m</td><td>mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b+c where mask is true, 0.0 otherwise.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="ac21c886b9883657fd67d8b48e784af2d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::maskzFma </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFBool&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD float fused multiply-add, masked version. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
    <tr><td class="paramname">m</td><td>mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b+c where mask is true, 0.0 otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="aaa689a6c17b1d60d62b6fcd51daa7639"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::maskzFma </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDBool&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD double fused multiply-add, masked version. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">c</td><td>term </td></tr>
    <tr><td class="paramname">m</td><td>mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b+c where mask is true, 0.0 otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a582d71ff8e7d51cbd2386e29935e89ef"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::maskzInv </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate 1/x for masked entry of float. </p>
<p>This routine only evaluates 1/x if mask is true. Illegal values for a masked-out float will not lead to floating-point exceptions.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument that must be nonzero if masked-in. </td></tr>
    <tr><td class="paramname">m</td><td>Mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1/x. Result is undefined if your argument was invalid or entry was not masked, and 0.0 for masked-out entries.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="af5cc89f64ab845f88816a9cbb16d467c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::maskzInv </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate 1/x for masked entry of double. </p>
<p>This routine only evaluates 1/x if mask is true. Illegal values for a masked-out double will not lead to floating-point exceptions.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument that must be nonzero if masked-in. </td></tr>
    <tr><td class="paramname">m</td><td>Mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1/x. Result is undefined if your argument was invalid or entry was not masked, and 0.0 for masked-out entries.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a2433c82892495a73bf41de15f5e8908f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::maskzInvSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate 1/x for masked entry of double, but with single accuracy. </p>
<p>This routine only evaluates 1/x if mask is true. Illegal values for a masked-out double will not lead to floating-point exceptions.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument that must be nonzero if masked-in. </td></tr>
    <tr><td class="paramname">m</td><td>Mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1/x. Result is undefined if your argument was invalid or entry was not masked, and 0.0 for masked-out entries.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="aa182f9ceead92b3055e6ae5903994651"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::maskzInvsqrt </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate 1/sqrt(x) for masked entry of float. </p>
<p>This routine only evaluates 1/sqrt(x) if mask is true. Illegal values for a masked-out float will not lead to floating-point exceptions.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument that must be &gt;0 if masked-in. </td></tr>
    <tr><td class="paramname">m</td><td>Mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1/sqrt(x). Result is undefined if your argument was invalid or entry was not masked, and 0.0 for masked-out entries.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="aa5b5a9766964a2b854f493fd783bb63d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::maskzInvsqrt </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate 1/sqrt(x) for masked entry of double. </p>
<p>This routine only evaluates 1/sqrt(x) if mask is true. Illegal values for a masked-out double will not lead to floating-point exceptions.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument that must be &gt;0 if masked-in. </td></tr>
    <tr><td class="paramname">m</td><td>Mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1/sqrt(x). Result is undefined if your argument was invalid or entry was not masked, and 0.0 for masked-out entries.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a1fdaf91102db0bfbc6fd440524b15199"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::maskzInvsqrtSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate 1/sqrt(x) for masked entry of double, but with single accuracy. </p>
<p>This routine only evaluates 1/sqrt(x) if mask is true. Illegal values for a masked-out double will not lead to floating-point exceptions.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument that must be &gt;0 if masked-in. </td></tr>
    <tr><td class="paramname">m</td><td>Mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1/sqrt(x). Result is undefined if your argument was invalid or entry was not masked, and 0.0 for masked-out entries.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a1e3c4084e25d298f95003df8e9aeffa1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::maskzMul </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Multiply two float variables, masked version. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">m</td><td>mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b where mask is true, 0.0 otherwise.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a7e4ab8b1ab046ff242d32ab93366bfde"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::maskzMul </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Multiply two double variables, masked version. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">m</td><td>mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b where mask is true, 0.0 otherwise.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="aa732ce9ab59cca63f834923a8cb4c775"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::maskzMul </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFBool&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Multiply two float SIMD variables, masked version. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">m</td><td>mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b where mask is true, 0.0 otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="afb416d879be4463f38af9b670583fd65"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::maskzMul </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDBool&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Multiply two double SIMD variables, masked version. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
    <tr><td class="paramname">m</td><td>mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b where mask is true, 0.0 otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="abda785f716b1445f709fc7aa028c0589"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::maskzRcp </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFBool&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD float 1.0/x lookup, masked version. </p>
<p>This is a low-level instruction that should only be called from routines implementing the reciprocal in <a class="el" href="simd__math_8h.xhtml" title="Math functions for SIMD datatypes. ">simd_math.h</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, x&gt;0 for entries where mask is true. </td></tr>
    <tr><td class="paramname">m</td><td>Mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Approximation of 1/x, accuracy is <a class="el" href="group__module__simd.xhtml#ga8b7a7c4421c0ce401b74c469a109e82c">GMX_SIMD_RCP_BITS</a>. The result for masked-out entries will be 0.0. </dd></dl>

</div>
</div>
<a class="anchor" id="a0f425368efd0895189b0e11d4b5d4ccc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::maskzRcp </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDBool&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD double 1.0/x lookup, masked version. </p>
<p>This is a low-level instruction that should only be called from routines implementing the reciprocal in <a class="el" href="simd__math_8h.xhtml" title="Math functions for SIMD datatypes. ">simd_math.h</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, x&gt;0 for entries where mask is true. </td></tr>
    <tr><td class="paramname">m</td><td>Mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Approximation of 1/x, accuracy is <a class="el" href="group__module__simd.xhtml#ga8b7a7c4421c0ce401b74c469a109e82c">GMX_SIMD_RCP_BITS</a>. The result for masked-out entries will be 0.0. </dd></dl>

</div>
</div>
<a class="anchor" id="a6eb1ba8851b08ceea1c160b6b255ee9b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::maskzRsqrt </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFBool&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD float 1.0/sqrt(x) lookup, masked version. </p>
<p>This is a low-level instruction that should only be called from routines implementing the inverse square root in <a class="el" href="simd__math_8h.xhtml" title="Math functions for SIMD datatypes. ">simd_math.h</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, x&gt;0 for entries where mask is true. </td></tr>
    <tr><td class="paramname">m</td><td>Mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Approximation of 1/sqrt(x), accuracy is <a class="el" href="group__module__simd.xhtml#ga7e207d56564fc020b246563d09214aac">GMX_SIMD_RSQRT_BITS</a>. The result for masked-out entries will be 0.0. </dd></dl>

</div>
</div>
<a class="anchor" id="a3bbc24d75706e7515afc2f2071f1a469"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::maskzRsqrt </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDBool&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD double 1.0/sqrt(x) lookup, masked version. </p>
<p>This is a low-level instruction that should only be called from routines implementing the inverse square root in <a class="el" href="simd__math_8h.xhtml" title="Math functions for SIMD datatypes. ">simd_math.h</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, x&gt;0 for entries where mask is true. </td></tr>
    <tr><td class="paramname">m</td><td>Mask </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Approximation of 1/sqrt(x), accuracy is <a class="el" href="group__module__simd.xhtml#ga7e207d56564fc020b246563d09214aac">GMX_SIMD_RSQRT_BITS</a>. The result for masked-out entries will be 0.0. </dd></dl>

</div>
</div>
<a class="anchor" id="a35c7b010fbd32f5424afa0de0c70db6f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::max </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set each float element to the largest from two variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Any floating-point value </td></tr>
    <tr><td class="paramname">b</td><td>Any floating-point value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>max(a,b) for each element.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a16f6bf4a20b14262f28168596d5bb8b9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::max </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set each double element to the largest from two variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Any doubleing-point value </td></tr>
    <tr><td class="paramname">b</td><td>Any doubleing-point value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>max(a,b) for each element.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a4edeef3c458f5c77cf3ceb80532a57ff"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::max </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set each SIMD float element to the largest from two variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Any floating-point value </td></tr>
    <tr><td class="paramname">b</td><td>Any floating-point value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>max(a,b) for each element. </dd></dl>

</div>
</div>
<a class="anchor" id="aceb279f0a831efc0d8e6be7d96c9e6d2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::max </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set each SIMD double element to the largest from two variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Any floating-point value </td></tr>
    <tr><td class="paramname">b</td><td>Any floating-point value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>max(a,b) for each element. </dd></dl>

</div>
</div>
<a class="anchor" id="a112ad714d9aa4e824fdad2c3b4ed75db"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx::mdrunner </td>
          <td>(</td>
          <td class="paramtype">gmx_hw_opt_t *&#160;</td>
          <td class="paramname"><em>hw_opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fplog</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nfile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structt__filenm.xhtml">t_filenm</a>&#160;</td>
          <td class="paramname"><em>fnm</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_output_env_t *&#160;</td>
          <td class="paramname"><em>oenv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bVerbose</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nstglobalcomm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ivec&#160;</td>
          <td class="paramname"><em>ddxyz</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dd_rank_order</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>npme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>rdd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>rconstr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>dddlb_opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>dlb_scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ddcsx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ddcsy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ddcsz</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>nbpu_opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nstlist_cmdline</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_int64_t&#160;</td>
          <td class="paramname"><em>nsteps_cmdline</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nstepout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>resetstep</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nmultisim</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_nst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_nex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>repl_ex_seed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>pforce</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>cpt_period</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>max_hours</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>imdport</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>Flags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Driver routine, that calls the different methods. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">hw_opt</td><td>Hardware detection structure </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fplog</td><td>File pointer for log file </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cr</td><td>Communication data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nfile</td><td>Number of files </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fnm</td><td>Array of filenames and file properties </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">oenv</td><td>Output variables for storing xvg files etc. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bVerbose</td><td>Verbose output or not </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nstglobalcomm</td><td>Number of steps between global communication </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ddxyz</td><td>Division of sub-boxes over processors for use in domain decomposition parallellization </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dd_rank_order</td><td>Ordering of the PP and PME ranks </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">npme</td><td>The number of separate PME ranks requested, -1 = auto </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rdd</td><td>The maximum distance for bonded interactions with DD (nm) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rconstr</td><td>Maximum distance for P-LINCS (nm) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dddlb_opt</td><td>File name for debugging </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dlb_scale</td><td>File name for debugging </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ddcsx</td><td>File name for debugging </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ddcsy</td><td>File name for debugging </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ddcsz</td><td>File name for debugging </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nbpu_opt</td><td>Type of nonbonded processing unit </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nstlist_cmdline</td><td>Override neighbor search frequency </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nsteps_cmdline</td><td>Override number of simulation steps </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nstepout</td><td>How often to write to the console </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">resetstep</td><td>Reset the step counter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nmultisim</td><td>Number of parallel simulations to run </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_nst</td><td>Number steps between replica exchange attempts </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_nex</td><td>Number of replicas in REMD </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_seed</td><td>The seed for Monte Carlo swaps </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pforce</td><td>Minimum force for printing (for debugging) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cpt_period</td><td>How often to checkpoint the simulation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_hours</td><td>Maximume length of the simulation (wall time) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">imdport</td><td>Interactive MD port (socket) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Flags</td><td>More command line options </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa6d21dccd9a94698363bdb1943f139bb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::min </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set each float element to the smallest from two variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Any floating-point value </td></tr>
    <tr><td class="paramname">b</td><td>Any floating-point value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>min(a,b) for each element.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a65fb0c7aa84962905d3d78a913c787c3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::min </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set each double element to the smallest from two variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Any doubleing-point value </td></tr>
    <tr><td class="paramname">b</td><td>Any doubleing-point value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>min(a,b) for each element.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a66c497c1f66c2aaccafefdfdeaf6ce2f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::min </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set each SIMD float element to the smallest from two variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Any floating-point value </td></tr>
    <tr><td class="paramname">b</td><td>Any floating-point value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>min(a,b) for each element. </dd></dl>

</div>
</div>
<a class="anchor" id="a48c0e6ede1542c0a5eee7094c56d51b2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::min </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set each SIMD double element to the smallest from two variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Any floating-point value </td></tr>
    <tr><td class="paramname">b</td><td>Any floating-point value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>min(a,b) for each element. </dd></dl>

</div>
</div>
<a class="anchor" id="a254a7b42f107dbc05f506a139ff24cb6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> gmx_simdcall gmx::operator!= </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD a!=b for single SIMD. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>value1 </td></tr>
    <tr><td class="paramname">b</td><td>value2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Each element of the boolean will be set to true if a!=b.</dd></dl>
<p>Beware that exact floating-point comparisons are difficult. </p>

</div>
</div>
<a class="anchor" id="a9711191866c2d823326c3bab599914b9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> gmx_simdcall gmx::operator!= </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD a!=b for double SIMD. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>value1 </td></tr>
    <tr><td class="paramname">b</td><td>value2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Each element of the boolean will be set to true if a!=b.</dd></dl>
<p>Beware that exact floating-point comparisons are difficult. </p>

</div>
</div>
<a class="anchor" id="a4093d368f060b40d9a9dee083b33411c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Bitwise and for two SIMD float variables. </p>
<p>Supported if <a class="el" href="group__module__simd.xhtml#gaf002483e94d5f42de1d5105cf924f8b8">GMX_SIMD_HAVE_LOGICAL</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>data1 </td></tr>
    <tr><td class="paramname">b</td><td>data2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>data1 &amp; data2 </dd></dl>

</div>
</div>
<a class="anchor" id="a1f1cadff23a6ebe7ef211147359a3841"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Bitwise and for two SIMD double variables. </p>
<p>Supported if <a class="el" href="group__module__simd.xhtml#gaf002483e94d5f42de1d5105cf924f8b8">GMX_SIMD_HAVE_LOGICAL</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>data1 </td></tr>
    <tr><td class="paramname">b</td><td>data2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>data1 &amp; data2 </dd></dl>

</div>
</div>
<a class="anchor" id="aaa2f30ddbbff1d91de4d1ef1f516fe9f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall gmx::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Integer SIMD bitwise and. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga354867d2570fecb6b341047947bee0d1">GMX_SIMD_HAVE_FINT32_LOGICAL</a> is 1.</p>
<dl class="section note"><dt>Note</dt><dd>You can <em>not</em> use this operation directly to select based on a boolean SIMD variable, since booleans are separate from integer SIMD. If that is what you need, have a look at <a class="el" href="group__module__simd.xhtml#ga223de776671702527c62b4da8f6e570a">gmx::selectByMask</a> instead.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>first integer SIMD </td></tr>
    <tr><td class="paramname">b</td><td>second integer SIMD </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a &amp; b (bitwise and) </dd></dl>

</div>
</div>
<a class="anchor" id="a8db7e6183dba97097e0f1379c6368dad"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall gmx::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Integer SIMD bitwise and. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga0ccbae145ecb27cee3c98ec7bded1d45">GMX_SIMD_HAVE_DINT32_LOGICAL</a> is 1.</p>
<dl class="section note"><dt>Note</dt><dd>You can <em>not</em> use this operation directly to select based on a boolean SIMD variable, since booleans are separate from integer SIMD. If that is what you need, have a look at <a class="el" href="group__module__simd.xhtml#ga223de776671702527c62b4da8f6e570a">gmx::selectByMask</a> instead.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>first integer SIMD </td></tr>
    <tr><td class="paramname">b</td><td>second integer SIMD </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a &amp; b (bitwise and) </dd></dl>

</div>
</div>
<a class="anchor" id="ae161ba7a8d47adeac2e26eca03095d13"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> gmx_simdcall gmx::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">SimdFBool&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFBool&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Logical <em>and</em> on single precision SIMD booleans. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>logical vars 1 </td></tr>
    <tr><td class="paramname">b</td><td>logical vars 2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>For each element, the result boolean is true if a &amp; b are true.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is not necessarily a bitwise operation - the storage format of booleans is implementation-dependent. </dd></dl>

</div>
</div>
<a class="anchor" id="afccdf85d0ee6c0e8a8ca8070010cc268"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> gmx_simdcall gmx::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">SimdDBool&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDBool&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Logical <em>and</em> on double precision SIMD booleans. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>logical vars 1 </td></tr>
    <tr><td class="paramname">b</td><td>logical vars 2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>For each element, the result boolean is true if a &amp; b are true.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is not necessarily a bitwise operation - the storage format of booleans is implementation-dependent. </dd></dl>

</div>
</div>
<a class="anchor" id="a0187183d12327ef78c5c5307dd6e1fbf"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> gmx_simdcall gmx::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">SimdFIBool&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFIBool&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Logical AND on <a class="el" href="classgmx_1_1SimdFIBool.xhtml" title="Boolean type for integer datatypes corresponding to float SIMD. ">SimdFIBool</a>. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga9febc62e1abd58eb8a035b8b81f93292">GMX_SIMD_HAVE_FINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD boolean 1 </td></tr>
    <tr><td class="paramname">b</td><td>SIMD boolean 2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True for elements where both a and b are true. </dd></dl>

</div>
</div>
<a class="anchor" id="aae41bec54342cb6c56e395fab2ac3dc2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> gmx_simdcall gmx::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">SimdDIBool&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDIBool&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Logical AND on <a class="el" href="classgmx_1_1SimdDIBool.xhtml" title="Boolean type for integer datatypes corresponding to double SIMD. ">SimdDIBool</a>. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gab8469202af6999f95405779355d89c30">GMX_SIMD_HAVE_DINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD boolean 1 </td></tr>
    <tr><td class="paramname">b</td><td>SIMD boolean 2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True for elements where both a and b are true. </dd></dl>

</div>
</div>
<a class="anchor" id="a51972cf72cc64e7d4ec87e53d4b25376"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::operator* </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Multiply two float SIMD variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b. </dd></dl>

</div>
</div>
<a class="anchor" id="a3a520d9799e6ece1f2446a51eee48ea4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::operator* </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Multiply two double SIMD variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b. </dd></dl>

</div>
</div>
<a class="anchor" id="a9acf86fe51d043353aa609f65263386e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall gmx::operator* </td>
          <td>(</td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Multiply SIMD integers. </p>
<p>This routine is only available if <a class="el" href="group__module__simd.xhtml#ga9febc62e1abd58eb8a035b8b81f93292">GMX_SIMD_HAVE_FINT32_ARITHMETICS</a> (single) or <a class="el" href="group__module__simd.xhtml#gab8469202af6999f95405779355d89c30">GMX_SIMD_HAVE_DINT32_ARITHMETICS</a> (double) is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Only the low 32 bits are retained, so this can overflow. </dd></dl>

</div>
</div>
<a class="anchor" id="acc27ad2d3586f1a673bd0c9c1f344f4f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall gmx::operator* </td>
          <td>(</td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Multiply SIMD integers. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gab8469202af6999f95405779355d89c30">GMX_SIMD_HAVE_DINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>factor1 </td></tr>
    <tr><td class="paramname">b</td><td>factor2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a*b.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Only the low 32 bits are retained, so this can overflow. </dd></dl>

</div>
</div>
<a class="anchor" id="aebe772c4714b2ce0f9a70c7fbbc01f98"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::operator+ </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add two float SIMD variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>term1 </td></tr>
    <tr><td class="paramname">b</td><td>term2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a+b </dd></dl>

</div>
</div>
<a class="anchor" id="a436c58e62a6941821532df1b75b4c99f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::operator+ </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add two double SIMD variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>term1 </td></tr>
    <tr><td class="paramname">b</td><td>term2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a+b </dd></dl>

</div>
</div>
<a class="anchor" id="af3c5a94b0e74b2e5b7fbb4c9c0bd1938"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall gmx::operator+ </td>
          <td>(</td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add SIMD integers. </p>
<p>This routine is only available if <a class="el" href="group__module__simd.xhtml#ga9febc62e1abd58eb8a035b8b81f93292">GMX_SIMD_HAVE_FINT32_ARITHMETICS</a> (single) or <a class="el" href="group__module__simd.xhtml#gab8469202af6999f95405779355d89c30">GMX_SIMD_HAVE_DINT32_ARITHMETICS</a> (double) is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>term1 </td></tr>
    <tr><td class="paramname">b</td><td>term2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a+b </dd></dl>

</div>
</div>
<a class="anchor" id="ae94ff177ebee1634f158cb0d7ff8b1a1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall gmx::operator+ </td>
          <td>(</td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add SIMD integers. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gab8469202af6999f95405779355d89c30">GMX_SIMD_HAVE_DINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>term1 </td></tr>
    <tr><td class="paramname">b</td><td>term2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a+b </dd></dl>

</div>
</div>
<a class="anchor" id="ae00e0dcf36832ed7c591e1204dd9dcc8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::operator- </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Subtract two float SIMD variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>term1 </td></tr>
    <tr><td class="paramname">b</td><td>term2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a-b </dd></dl>

</div>
</div>
<a class="anchor" id="a97d6e522f43e9b9501d4c0c6b94ca6b9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::operator- </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Subtract two double SIMD variables. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>term1 </td></tr>
    <tr><td class="paramname">b</td><td>term2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a-b </dd></dl>

</div>
</div>
<a class="anchor" id="ae409460fda30359c437522eca447e24e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::operator- </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD single precision negate. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD double precision value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>-a </dd></dl>

</div>
</div>
<a class="anchor" id="aa0b76cf454d06f1d328d25b58135b570"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::operator- </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD double precision negate. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD double precision value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>-a </dd></dl>

</div>
</div>
<a class="anchor" id="accbca9c905a278763e5ff7c584f75f21"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall gmx::operator- </td>
          <td>(</td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Subtract SIMD integers. </p>
<p>This routine is only available if <a class="el" href="group__module__simd.xhtml#ga9febc62e1abd58eb8a035b8b81f93292">GMX_SIMD_HAVE_FINT32_ARITHMETICS</a> (single) or <a class="el" href="group__module__simd.xhtml#gab8469202af6999f95405779355d89c30">GMX_SIMD_HAVE_DINT32_ARITHMETICS</a> (double) is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>term1 </td></tr>
    <tr><td class="paramname">b</td><td>term2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a-b </dd></dl>

</div>
</div>
<a class="anchor" id="a669d0b90b5b52a929462ae00735125c0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall gmx::operator- </td>
          <td>(</td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Subtract SIMD integers. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gab8469202af6999f95405779355d89c30">GMX_SIMD_HAVE_DINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>term1 </td></tr>
    <tr><td class="paramname">b</td><td>term2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a-b </dd></dl>

</div>
</div>
<a class="anchor" id="acd963f002451c284f4dc52167c6c1dc1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> gmx_simdcall gmx::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD a&lt;b for single SIMD. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>value1 </td></tr>
    <tr><td class="paramname">b</td><td>value2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Each element of the boolean will be set to true if a&lt;b. </dd></dl>

</div>
</div>
<a class="anchor" id="ad8d93f6a684ac7c60b588ed9f7241b97"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> gmx_simdcall gmx::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD a&lt;b for double SIMD. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>value1 </td></tr>
    <tr><td class="paramname">b</td><td>value2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Each element of the boolean will be set to true if a&lt;b. </dd></dl>

</div>
</div>
<a class="anchor" id="afb9d95ea1f60f4422ff48866615741d3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> gmx_simdcall gmx::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Less-than comparison of two SIMD integers corresponding to float values. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga9febc62e1abd58eb8a035b8b81f93292">GMX_SIMD_HAVE_FINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD integer1 </td></tr>
    <tr><td class="paramname">b</td><td>SIMD integer2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD integer boolean with true for elements where a&lt;b </dd></dl>

</div>
</div>
<a class="anchor" id="a464359cf52613efaacad1cb0f39832bc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> gmx_simdcall gmx::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Less-than comparison of two SIMD integers corresponding to double values. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gab8469202af6999f95405779355d89c30">GMX_SIMD_HAVE_DINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD integer1 </td></tr>
    <tr><td class="paramname">b</td><td>SIMD integer2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD integer boolean with true for elements where a&lt;b </dd></dl>

</div>
</div>
<a class="anchor" id="a944742d0897cd5cd137f635350038916"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall gmx::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD integer shift left logical, based on immediate value. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga354867d2570fecb6b341047947bee0d1">GMX_SIMD_HAVE_FINT32_LOGICAL</a> is 1.</p>
<p>Logical shift. Each element is shifted (independently) up to 32 positions left, while zeros are shifted in from the right.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>integer data to shift </td></tr>
    <tr><td class="paramname">n</td><td>number of positions to shift left. n&lt;=32. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>shifted values </dd></dl>

</div>
</div>
<a class="anchor" id="a34f3bd81d4cc0d29e1811642fcb320d6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall gmx::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD integer shift left logical, based on immediate value. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga0ccbae145ecb27cee3c98ec7bded1d45">GMX_SIMD_HAVE_DINT32_LOGICAL</a> is 1.</p>
<p>Logical shift. Each element is shifted (independently) up to 32 positions left, while zeros are shifted in from the right.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>integer data to shift </td></tr>
    <tr><td class="paramname">n</td><td>number of positions to shift left. n&lt;=32. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>shifted values </dd></dl>

</div>
</div>
<a class="anchor" id="ad0e463866d58d57bbc388c17299c4829"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> gmx_simdcall gmx::operator&lt;= </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD a&lt;=b for single SIMD. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>value1 </td></tr>
    <tr><td class="paramname">b</td><td>value2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Each element of the boolean will be set to true if a&lt;=b. </dd></dl>

</div>
</div>
<a class="anchor" id="a2c82364af392a21816e7eedf1a086812"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> gmx_simdcall gmx::operator&lt;= </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD a&lt;=b for double SIMD. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>value1 </td></tr>
    <tr><td class="paramname">b</td><td>value2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Each element of the boolean will be set to true if a&lt;=b. </dd></dl>

</div>
</div>
<a class="anchor" id="afc42a1e43f4158ce45339e3a8ea225b7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> gmx_simdcall gmx::operator== </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD a==b for single SIMD. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>value1 </td></tr>
    <tr><td class="paramname">b</td><td>value2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Each element of the boolean will be set to true if a==b.</dd></dl>
<p>Beware that exact floating-point comparisons are difficult. </p>

</div>
</div>
<a class="anchor" id="ad31f9caa693d0383acaf2b1b174ab0da"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> gmx_simdcall gmx::operator== </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD a==b for double SIMD. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>value1 </td></tr>
    <tr><td class="paramname">b</td><td>value2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Each element of the boolean will be set to true if a==b.</dd></dl>
<p>Beware that exact floating-point comparisons are difficult. </p>

</div>
</div>
<a class="anchor" id="aec52e80a85ca0737723f5d9b358b1660"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> gmx_simdcall gmx::operator== </td>
          <td>(</td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Equality comparison of two integers corresponding to float values. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga9febc62e1abd58eb8a035b8b81f93292">GMX_SIMD_HAVE_FINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD integer1 </td></tr>
    <tr><td class="paramname">b</td><td>SIMD integer2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD integer boolean with true for elements where a==b </dd></dl>

</div>
</div>
<a class="anchor" id="a2f054cf4aa61343e3a940b6d64939c5c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> gmx_simdcall gmx::operator== </td>
          <td>(</td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Equality comparison of two integers corresponding to double values. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gab8469202af6999f95405779355d89c30">GMX_SIMD_HAVE_DINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD integer1 </td></tr>
    <tr><td class="paramname">b</td><td>SIMD integer2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD integer boolean with true for elements where a==b </dd></dl>

</div>
</div>
<a class="anchor" id="af05b883b2ca284120a3f7458354ed27a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall gmx::operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD integer shift right logical, based on immediate value. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga354867d2570fecb6b341047947bee0d1">GMX_SIMD_HAVE_FINT32_LOGICAL</a> is 1.</p>
<p>Logical shift. Each element is shifted (independently) up to 32 positions right, while zeros are shifted in from the left.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>integer data to shift </td></tr>
    <tr><td class="paramname">n</td><td>number of positions to shift right. n&lt;=32. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>shifted values </dd></dl>

</div>
</div>
<a class="anchor" id="a574a9e9fc8c684d24234850bee75ce8e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall gmx::operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD integer shift right logical, based on immediate value. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga0ccbae145ecb27cee3c98ec7bded1d45">GMX_SIMD_HAVE_DINT32_LOGICAL</a> is 1.</p>
<p>Logical shift. Each element is shifted (independently) up to 32 positions right, while zeros are shifted in from the left.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>integer data to shift </td></tr>
    <tr><td class="paramname">n</td><td>number of positions to shift right. n&lt;=32. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>shifted values </dd></dl>

</div>
</div>
<a class="anchor" id="a37544015fbce9d2b11dce07e159e878b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::operator^ </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Bitwise xor for SIMD float. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gaf002483e94d5f42de1d5105cf924f8b8">GMX_SIMD_HAVE_LOGICAL</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>data1 </td></tr>
    <tr><td class="paramname">b</td><td>data2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>data1 ^ data2 </dd></dl>

</div>
</div>
<a class="anchor" id="ad65f7d7aa6d2a6c4b697ac0be0f3a616"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::operator^ </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Bitwise xor for SIMD double. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gaf002483e94d5f42de1d5105cf924f8b8">GMX_SIMD_HAVE_LOGICAL</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>data1 </td></tr>
    <tr><td class="paramname">b</td><td>data2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>data1 ^ data2 </dd></dl>

</div>
</div>
<a class="anchor" id="abb7e81f2ef83cfb9aaae088c8762c2b0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall gmx::operator^ </td>
          <td>(</td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Integer SIMD bitwise xor. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga354867d2570fecb6b341047947bee0d1">GMX_SIMD_HAVE_FINT32_LOGICAL</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>first integer SIMD </td></tr>
    <tr><td class="paramname">b</td><td>second integer SIMD </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a ^ b (bitwise xor) </dd></dl>

</div>
</div>
<a class="anchor" id="aba7ccd2477ecf6b07f5b7696d9490038"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall gmx::operator^ </td>
          <td>(</td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Integer SIMD bitwise xor. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga0ccbae145ecb27cee3c98ec7bded1d45">GMX_SIMD_HAVE_DINT32_LOGICAL</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>first integer SIMD </td></tr>
    <tr><td class="paramname">b</td><td>second integer SIMD </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a ^ b (bitwise xor) </dd></dl>

</div>
</div>
<a class="anchor" id="a69973d1808eb0e8e60715d3abf01cd22"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::operator| </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Bitwise or for SIMD float. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gaf002483e94d5f42de1d5105cf924f8b8">GMX_SIMD_HAVE_LOGICAL</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>data1 </td></tr>
    <tr><td class="paramname">b</td><td>data2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>data1 | data2 </dd></dl>

</div>
</div>
<a class="anchor" id="a72cbfbcd5395b355e242f2ef4284f5c5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::operator| </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Bitwise or for SIMD double. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gaf002483e94d5f42de1d5105cf924f8b8">GMX_SIMD_HAVE_LOGICAL</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>data1 </td></tr>
    <tr><td class="paramname">b</td><td>data2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>data1 | data2 </dd></dl>

</div>
</div>
<a class="anchor" id="af6f2042babc63e1b20b08ed61d859f74"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall gmx::operator| </td>
          <td>(</td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Integer SIMD bitwise or. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga354867d2570fecb6b341047947bee0d1">GMX_SIMD_HAVE_FINT32_LOGICAL</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>first integer SIMD </td></tr>
    <tr><td class="paramname">b</td><td>second integer SIMD </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a | b (bitwise or) </dd></dl>

</div>
</div>
<a class="anchor" id="a65d3eb9cd43b33b4665dfe676c0e79d2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall gmx::operator| </td>
          <td>(</td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Integer SIMD bitwise or. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga0ccbae145ecb27cee3c98ec7bded1d45">GMX_SIMD_HAVE_DINT32_LOGICAL</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>first integer SIMD </td></tr>
    <tr><td class="paramname">b</td><td>second integer SIMD </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a | b (bitwise or) </dd></dl>

</div>
</div>
<a class="anchor" id="a5595db8a2c813f0ae078285a1b6b8bd3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> gmx_simdcall gmx::operator|| </td>
          <td>(</td>
          <td class="paramtype">SimdFBool&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFBool&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Logical <em>or</em> on single precision SIMD booleans. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>logical vars 1 </td></tr>
    <tr><td class="paramname">b</td><td>logical vars 2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>For each element, the result boolean is true if a or b is true.</dd></dl>
<p>Note that this is not necessarily a bitwise operation - the storage format of booleans is implementation-dependent.</p>
<p>\ </p>

</div>
</div>
<a class="anchor" id="ad1da27c5bc4fd40afe78810c7b6e0730"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> gmx_simdcall gmx::operator|| </td>
          <td>(</td>
          <td class="paramtype">SimdDBool&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDBool&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Logical <em>or</em> on double precision SIMD booleans. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>logical vars 1 </td></tr>
    <tr><td class="paramname">b</td><td>logical vars 2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>For each element, the result boolean is true if a or b is true.</dd></dl>
<p>Note that this is not necessarily a bitwise operation - the storage format of booleans is implementation-dependent.</p>
<p>\ </p>

</div>
</div>
<a class="anchor" id="ab7b197309edc60323a129fa9620a7400"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> gmx_simdcall gmx::operator|| </td>
          <td>(</td>
          <td class="paramtype">SimdFIBool&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFIBool&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Logical OR on <a class="el" href="classgmx_1_1SimdFIBool.xhtml" title="Boolean type for integer datatypes corresponding to float SIMD. ">SimdFIBool</a>. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga9febc62e1abd58eb8a035b8b81f93292">GMX_SIMD_HAVE_FINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD boolean 1 </td></tr>
    <tr><td class="paramname">b</td><td>SIMD boolean 2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True for elements where both a and b are true. </dd></dl>

</div>
</div>
<a class="anchor" id="a2382ca9a262a0503bb5dcfcec09df671"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> gmx_simdcall gmx::operator|| </td>
          <td>(</td>
          <td class="paramtype">SimdDIBool&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDIBool&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Logical OR on <a class="el" href="classgmx_1_1SimdDIBool.xhtml" title="Boolean type for integer datatypes corresponding to double SIMD. ">SimdDIBool</a>. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gab8469202af6999f95405779355d89c30">GMX_SIMD_HAVE_DINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD boolean 1 </td></tr>
    <tr><td class="paramname">b</td><td>SIMD boolean 2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True for elements where both a and b are true. </dd></dl>

</div>
</div>
<a class="anchor" id="a1e5b1230d0301fa6760e34d7641ca7e4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::pmeForceCorrection </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>z2</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the force correction due to PME analytically in float. </p>
<p>See the SIMD version of this function for details.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">z2</td><td>input parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Correction to use on force</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a5275f264f1c6da2502ec03e8fbf855a4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::pmeForceCorrection </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>z2</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the force correction due to PME analytically in double. </p>
<p>See the SIMD version of this function for details.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">z2</td><td>input parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Correction to use on force</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="abd18f07b8fd19f03f12442211982db53"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::pmeForceCorrectionSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>z2</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Force correction due to PME in double, but with single accuracy. </p>
<p>See the SIMD version of this function for details.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">z2</td><td>input parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Correction to use on force</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="ac54e81f11cb53c7d68ff7dab05bd6afd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::pmePotentialCorrection </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>z2</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the potential correction due to PME analytically in float. </p>
<p>See the SIMD version of this function for details.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">z2</td><td>input parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Correction to use on potential.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="acba0166c05fec69dd4a2624ed8dcff95"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::pmePotentialCorrection </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>z2</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the potential correction due to PME analytically in double. </p>
<p>See the SIMD version of this function for details.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">z2</td><td>input parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Correction to use on potential.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="ab8004b2507f7192ead653fcdcb6735fe"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::pmePotentialCorrectionSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>z2</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Potential correction due to PME in double, but with single accuracy. </p>
<p>See the SIMD version of this function for details.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">z2</td><td>input parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Correction to use on potential.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a800ac84e9ee71a2dc0eedda74bea1513"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T gmx::power12 </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>calculate x^12 </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Type of argument and return value </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>x^12 </dd></dl>

</div>
</div>
<a class="anchor" id="abda6daf50f5129fb74816db29e411497"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T gmx::power3 </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>calculate x^3 </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Type of argument and return value </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>x^3 </dd></dl>

</div>
</div>
<a class="anchor" id="a304b15bae3a2a8277f686d4dfc9fa946"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T gmx::power4 </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>calculate x^4 </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Type of argument and return value </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>x^4 </dd></dl>

</div>
</div>
<a class="anchor" id="a4bb914d3b8bf083485bb26c88d2b9dda"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T gmx::power5 </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>calculate x^5 </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Type of argument and return value </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>x^5 </dd></dl>

</div>
</div>
<a class="anchor" id="aab162c4ba231de5ffbfc62dc3803e8ff"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T gmx::power6 </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>calculate x^6 </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Type of argument and return value </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>x^6 </dd></dl>

</div>
</div>
<a class="anchor" id="aff67fcd64bdaa64a3823cc1a322a6783"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::printBinaryInformation </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const IProgramContext &amp;&#160;</td>
          <td class="paramname"><em>programContext</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Print basic information about the executable. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">fp</td><td>Where to print the information to. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">programContext</td><td>Program information object to use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad0c6bc3dc4ee812f31a6076c7d4f42a9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::printBinaryInformation </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const IProgramContext &amp;&#160;</td>
          <td class="paramname"><em>programContext</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const BinaryInformationSettings &amp;&#160;</td>
          <td class="paramname"><em>settings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Print basic information about the executable with custom settings. </p>
<p>Needed to read the members without otherwise unnecessary accessors.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">fp</td><td>Where to print the information to. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">programContext</td><td>Program information object to use. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">settings</td><td>Specifies what to print.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1BinaryInformationSettings.xhtml" title="Settings for printBinaryInformation(). ">BinaryInformationSettings</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad8fe34835a6e197f2731e7d604f28992"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx::processExceptionAtExitForCommandLine </td>
          <td>(</td>
          <td class="paramtype">const std::exception &amp;&#160;</td>
          <td class="paramname"><em>ex</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Handles an exception and deinitializes after initForCommandLine. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ex</td><td>Exception that is the cause for terminating the program. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return code to return from <a class="el" href="test__selection_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the selection testing tool. ">main()</a>.</dd></dl>
<p>This method should be called as the last thing before terminating the program because of an exception. See <a class="el" href="group__module__utility.xhtml#ga5a45f49e157fa8e1059d24243283e248" title="Handles an exception that is causing the program to terminate. ">processExceptionAtExit()</a> for details. Additionally this method undoes the work done by initForCommandLine.</p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="a48cb29271cf7ac44a06cfe20e5c29dc2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::rcp </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD float 1.0/x lookup. </p>
<p>This is a low-level instruction that should only be called from routines implementing the reciprocal in <a class="el" href="simd__math_8h.xhtml" title="Math functions for SIMD datatypes. ">simd_math.h</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, x!=0 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Approximation of 1/x, accuracy is <a class="el" href="group__module__simd.xhtml#ga8b7a7c4421c0ce401b74c469a109e82c">GMX_SIMD_RCP_BITS</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="a4c2c3eae5c42d898373ec6e90dd99064"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::rcp </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD double 1.0/x lookup. </p>
<p>This is a low-level instruction that should only be called from routines implementing the reciprocal in <a class="el" href="simd__math_8h.xhtml" title="Math functions for SIMD datatypes. ">simd_math.h</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, x!=0 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Approximation of 1/x, accuracy is <a class="el" href="group__module__simd.xhtml#ga8b7a7c4421c0ce401b74c469a109e82c">GMX_SIMD_RCP_BITS</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="aa4a37558328ab029203170ad4c6c4d01"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::reduce </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return sum of all elements in float variable (i.e., the variable itself). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>variable to reduce/sum. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The argument variable itself.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a157983d90620412d404e8a77d1ddbd0f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::reduce </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return sum of all elements in double variable (i.e., the variable itself). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>variable to reduce/sum. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The argument variable itself.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a55d2bf9090a7a9aed6e4b1f6391ef844"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx_simdcall gmx::reduce </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return sum of all elements in SIMD float variable. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD variable to reduce/sum. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The sum of all elements in the argument variable. </dd></dl>

</div>
</div>
<a class="anchor" id="a62d67c8b5c817dab3ee4acdd5779c14b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx_simdcall gmx::reduce </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return sum of all elements in SIMD double variable. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD variable to reduce/sum. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The sum of all elements in the argument variable. </dd></dl>

</div>
</div>
<a class="anchor" id="a6eac2eb3581affdefb5b3e79e000cf84"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::reduceIncr4ReturnSum </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>v2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>v3</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add each float to four consecutive memory locations, return sum. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to memory where four floats should be incremented </td></tr>
    <tr><td class="paramname">v0</td><td>float to be added to m[0] </td></tr>
    <tr><td class="paramname">v1</td><td>float to be added to m[1] </td></tr>
    <tr><td class="paramname">v2</td><td>float to be added to m[2] </td></tr>
    <tr><td class="paramname">v3</td><td>float to be added to m[3]</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>v0+v1+v2+v3.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="ad7989807401d15a5d7b360b91a7dbe04"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::reduceIncr4ReturnSum </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>v2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>v3</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add each double to four consecutive memory locations, return sum. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to memory where four floats should be incremented </td></tr>
    <tr><td class="paramname">v0</td><td>double to be added to m[0] </td></tr>
    <tr><td class="paramname">v1</td><td>double to be added to m[1] </td></tr>
    <tr><td class="paramname">v2</td><td>double to be added to m[2] </td></tr>
    <tr><td class="paramname">v3</td><td>double to be added to m[3]</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>v0+v1+v2+v3.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a774b79fe30e71192635a3081e369023e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx_simdcall gmx::reduceIncr4ReturnSumHsimd </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>v1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reduce the 4 half-SIMD-with doubles in 2 SIMD variables (sum halves), increment four consecutive doubles in memory, return sum. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to memory where the four values should be incremented </td></tr>
    <tr><td class="paramname">v0</td><td>Variable whose half-SIMD sums should be added to m[0]/m[1], respectively. </td></tr>
    <tr><td class="paramname">v1</td><td>Variable whose half-SIMD sums should be added to m[2]/m[3], respectively.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Sum of all elements in the four SIMD variables.</dd></dl>
<p>The pointer m must be aligned, but only to the smaller of four elements and the floating-point SIMD width.</p>
<dl class="section note"><dt>Note</dt><dd>This is the half-SIMD-width version of <a class="el" href="group__module__simd.xhtml#gace1c53e05ba045977e06eb98778c0123" title="Reduce each of four SIMD doubles, add those values to four consecutive doubles in memory...">reduceIncr4ReturnSum()</a>. The only difference is that the four half-SIMD inputs needed are present in the low/high halves of the two SIMD arguments.</dd></dl>
<p>Available if <a class="el" href="group__module__simd.xhtml#gadef533340f8e648dfb550cbd8cfd9fc7">GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE</a> is 1. </p>

</div>
</div>
<a class="anchor" id="ab658dd5cd12d3a06f13bc4b36de8ef97"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx_simdcall gmx::reduceIncr4ReturnSumHsimd </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>v1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reduce the 4 half-SIMD-with floats in 2 SIMD variables (sum halves), increment four consecutive floats in memory, return sum. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to memory where the four values should be incremented </td></tr>
    <tr><td class="paramname">v0</td><td>Variable whose half-SIMD sums should be added to m[0]/m[1], respectively. </td></tr>
    <tr><td class="paramname">v1</td><td>Variable whose half-SIMD sums should be added to m[2]/m[3], respectively.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Sum of all elements in the four SIMD variables.</dd></dl>
<p>The pointer m must be aligned, but only to the smaller of four elements and the floating-point SIMD width.</p>
<dl class="section note"><dt>Note</dt><dd>This is the half-SIMD-width version of <a class="el" href="group__module__simd.xhtml#gace1c53e05ba045977e06eb98778c0123" title="Reduce each of four SIMD doubles, add those values to four consecutive doubles in memory...">reduceIncr4ReturnSum()</a>. The only difference is that the four half-SIMD inputs needed are present in the low/high halves of the two SIMD arguments.</dd></dl>
<p>Available if <a class="el" href="group__module__simd.xhtml#gac40bf3261e36fb7ff022e8ab37b04fcf">GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT</a> is 1. </p>

</div>
</div>
<a class="anchor" id="aef8f91b0f9628e42c2809d541ca8b01e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool gmx::regexMatch </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Regex &amp;&#160;</td>
          <td class="paramname"><em>regex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Matches a string with a regular expression. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to match. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">regex</td><td>Regular expression to match. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if <code>regex</code> matches the whole <code>str</code>.</dd></dl>
<p>Does not throw currently, but this is subject to change if/when better error handling is implemented (currently, it returns false if the matching fails, e.g., because of out-of-memory). </p>

</div>
</div>
<a class="anchor" id="a1c0a061335a242530d8d791459a8e2d0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::round </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float round to nearest integer value (in floating-point format). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Any floating-point value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The nearest integer, represented in floating-point format.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a15179b513c1ec4ec0b9090e57b76bac4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::round </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>double round to nearest integer value (in doubleing-point format). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Any doubleing-point value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The nearest integer, represented in doubleing-point format.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a3ef18bc7373b1450c963374f72d472e4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::round </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD float round to nearest integer value (in floating-point format). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Any floating-point value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The nearest integer, represented in floating-point format. </dd></dl>

</div>
</div>
<a class="anchor" id="ae99869398e453b11f1305a657ce8d886"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::round </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD double round to nearest integer value (in floating-point format). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Any floating-point value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The nearest integer, represented in floating-point format. </dd></dl>

</div>
</div>
<a class="anchor" id="a611e17e307050f3a78e3390a5e63c460"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::rsqrt </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>SIMD float 1.0/sqrt(x) lookup. </p>
<p>This is a low-level instruction that should only be called from routines implementing the inverse square root in <a class="el" href="simd__math_8h.xhtml" title="Math functions for SIMD datatypes. ">simd_math.h</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, x&gt;0 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Approximation of 1/sqrt(x), accuracy is <a class="el" href="group__module__simd.xhtml#ga7e207d56564fc020b246563d09214aac">GMX_SIMD_RSQRT_BITS</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="add1d990b3c0c841a88ea4e4d4df90425"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::rsqrt </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>double SIMD 1.0/sqrt(x) lookup. </p>
<p>This is a low-level instruction that should only be called from routines implementing the inverse square root in <a class="el" href="simd__math_8h.xhtml" title="Math functions for SIMD datatypes. ">simd_math.h</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, x&gt;0 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Approximation of 1/sqrt(x), accuracy is <a class="el" href="group__module__simd.xhtml#ga7e207d56564fc020b246563d09214aac">GMX_SIMD_RSQRT_BITS</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="a5a3bc0e66dda7e48091ad129bede7eff"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx::runCommandLineModule </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ICommandLineModule *&#160;</td>
          <td class="paramname"><em>module</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Implements a <a class="el" href="test__selection_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the selection testing tool. ">main()</a> method that runs a single module. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">argc</td><td><code>argc</code> passed to <a class="el" href="test__selection_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the selection testing tool. ">main()</a>. </td></tr>
    <tr><td class="paramname">argv</td><td><code>argv</code> passed to <a class="el" href="test__selection_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the selection testing tool. ">main()</a>. </td></tr>
    <tr><td class="paramname">module</td><td>Module to run.</td></tr>
  </table>
  </dd>
</dl>
<p>This method allows for uniform behavior for binaries that only contain a single module without duplicating any of the implementation from <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml" title="Implements a wrapper command-line interface for multiple modules. ">CommandLineModuleManager</a> (startup headers, common options etc.).</p>
<p>The signature assumes that <code>module</code> construction does not throw (because otherwise the caller would need to duplicate all the exception handling code). It is possible to move the construction inside the try/catch in this method using an indirection similar to <a class="el" href="classgmx_1_1TrajectoryAnalysisCommandLineRunner.xhtml#a12cd1b40ed04cda667f315e2adee3337" title="Implements a main() method that runs a given module. ">TrajectoryAnalysisCommandLineRunner::runAsMain()</a>, but until that is necessary, the current approach leads to simpler code.</p>
<p>Usage: </p>
<div class="fragment"><div class="line"><span class="keywordtype">int</span> <a class="code" href="test__selection_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])</div>
<div class="line">{</div>
<div class="line">    CustomCommandLineModule module;</div>
<div class="line">    <span class="keywordflow">return</span> <a class="code" href="namespacegmx.xhtml#a5a3bc0e66dda7e48091ad129bede7eff">gmx::runCommandLineModule</a>(argc, argv, &amp;module);</div>
<div class="line">}</div>
</div><!-- fragment --><p>Does not throw. All exceptions are caught and handled internally. </p>

</div>
</div>
<a class="anchor" id="a8a7a039b6fae746686d472d1fcae6fee"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx::runCommandLineModule </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>description</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; std::unique_ptr&lt; ICommandLineOptionsModule &gt;()&gt;&#160;</td>
          <td class="paramname"><em>factory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Implements a <a class="el" href="test__selection_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the selection testing tool. ">main()</a> method that runs a single module. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">argc</td><td><code>argc</code> passed to <a class="el" href="test__selection_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the selection testing tool. ">main()</a>. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">argv</td><td><code>argv</code> passed to <a class="el" href="test__selection_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the selection testing tool. ">main()</a>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Name for the module. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">description</td><td>Short description for the module. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">factory</td><td>Factory method that creates the module to run.</td></tr>
  </table>
  </dd>
</dl>
<p>This method allows for uniform behavior for binaries that only contain a single module without duplicating any of the implementation from <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml" title="Implements a wrapper command-line interface for multiple modules. ">CommandLineModuleManager</a> (startup headers, common options etc.).</p>
<p>Usage: </p>
<div class="fragment"><div class="line"><span class="keyword">class </span>CustomCommandLineOptionsModule : <span class="keyword">public</span> ICommandLineOptionsModule</div>
<div class="line">{</div>
<div class="line">    <span class="comment">// &lt;...&gt;</span></div>
<div class="line">};</div>
<div class="line"></div>
<div class="line"><span class="keyword">static</span> ICommandLineOptionsModule *create()</div>
<div class="line">{</div>
<div class="line">    <span class="keywordflow">return</span> <span class="keyword">new</span> CustomCommandLineOptionsModule();</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">int</span> <a class="code" href="test__selection_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])</div>
<div class="line">{</div>
<div class="line">    <span class="keywordflow">return</span> <a class="code" href="namespacegmx.xhtml#a5a3bc0e66dda7e48091ad129bede7eff">gmx::runCommandLineModule</a>(</div>
<div class="line">            argc, argv, <span class="stringliteral">&quot;mymodule&quot;</span>, <span class="stringliteral">&quot;short description&quot;</span>, &amp;create);</div>
<div class="line">}</div>
</div><!-- fragment --><p>Does not throw. All exceptions are caught and handled internally. </p>

</div>
</div>
<a class="anchor" id="af47eb155075f6f9aa99ecca11825b021"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::selectByMask </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select from single precision variable where boolean is true. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Floating-point variable to select from </td></tr>
    <tr><td class="paramname">mask</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a is selected for true, 0 for false.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="aa1449de9307a87e0c5946fd9cab43b35"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::selectByMask </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select from double precision variable where boolean is true. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>double variable to select from </td></tr>
    <tr><td class="paramname">mask</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a is selected for true, 0 for false.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a543420229312467871aaa26ea79f5a5d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::int32_t gmx::selectByMask </td>
          <td>(</td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select from integer variable where boolean is true. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Integer variable to select from </td></tr>
    <tr><td class="paramname">mask</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a is selected for true, 0 for false.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="ad8662b109c880042900ece585e9b4c68"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::selectByMask </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFBool&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select from single precision SIMD variable where boolean is true. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Floating-point variable to select from </td></tr>
    <tr><td class="paramname">mask</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>For each element, a is selected for true, 0 for false. </dd></dl>

</div>
</div>
<a class="anchor" id="adb2e8393818311d9b97ab723b8150e77"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::selectByMask </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDBool&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select from double precision SIMD variable where boolean is true. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Floating-point variable to select from </td></tr>
    <tr><td class="paramname">mask</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>For each element, a is selected for true, 0 for false. </dd></dl>

</div>
</div>
<a class="anchor" id="a514569727a2e78d7308e19718aa52073"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall gmx::selectByMask </td>
          <td>(</td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFIBool&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select from <a class="el" href="classgmx_1_1SimdFInt32.xhtml">gmx::SimdFInt32</a> variable where boolean is true. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga9febc62e1abd58eb8a035b8b81f93292">GMX_SIMD_HAVE_FINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD integer to select from </td></tr>
    <tr><td class="paramname">mask</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Elements from a where sel is true, 0 otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a41408567ca23cb56ace128e8fe0be4f4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall gmx::selectByMask </td>
          <td>(</td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDIBool&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select from <a class="el" href="classgmx_1_1SimdDInt32.xhtml">gmx::SimdDInt32</a> variable where boolean is true. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gab8469202af6999f95405779355d89c30">GMX_SIMD_HAVE_DINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD integer to select from </td></tr>
    <tr><td class="paramname">mask</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Elements from a where sel is true, 0 otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a76f8ccf8f582242260b4e785ebf48e3a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::selectByNotMask </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select from single precision variable where boolean is false. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Floating-point variable to select from </td></tr>
    <tr><td class="paramname">mask</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a is selected for false, 0 for true.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a2f03ad3380ef6213c5459051c3268ba7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::selectByNotMask </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select from double precision variable where boolean is false. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>double variable to select from </td></tr>
    <tr><td class="paramname">mask</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a is selected for false, 0 for true.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="aa1c7d81b9ba8302dadcbdded4fcd4399"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::int32_t gmx::selectByNotMask </td>
          <td>(</td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select from integer variable where boolean is false. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Integer variable to select from </td></tr>
    <tr><td class="paramname">mask</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a is selected for false, 0 for true.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a3b181964f04f57a08d6241f639696d31"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::selectByNotMask </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFBool&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select from single precision SIMD variable where boolean is false. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Floating-point variable to select from </td></tr>
    <tr><td class="paramname">mask</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>For each element, a is selected for false, 0 for true (sic). </dd></dl>

</div>
</div>
<a class="anchor" id="a2ad9dbb3900122823a8c86435335d3e6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::selectByNotMask </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDBool&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select from double precision SIMD variable where boolean is false. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Floating-point variable to select from </td></tr>
    <tr><td class="paramname">mask</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>For each element, a is selected for false, 0 for true (sic). </dd></dl>

</div>
</div>
<a class="anchor" id="ab614faa655138f6dd9647301290d993d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall gmx::selectByNotMask </td>
          <td>(</td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFIBool&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select from <a class="el" href="classgmx_1_1SimdFInt32.xhtml">gmx::SimdFInt32</a> variable where boolean is false. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga9febc62e1abd58eb8a035b8b81f93292">GMX_SIMD_HAVE_FINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD integer to select from </td></tr>
    <tr><td class="paramname">mask</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Elements from a where sel is false, 0 otherwise (sic). </dd></dl>

</div>
</div>
<a class="anchor" id="a5465630a9899275f6ab90f2e0af66554"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall gmx::selectByNotMask </td>
          <td>(</td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDIBool&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select from <a class="el" href="classgmx_1_1SimdDInt32.xhtml">gmx::SimdDInt32</a> variable where boolean is false. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gab8469202af6999f95405779355d89c30">GMX_SIMD_HAVE_DINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD integer to select from </td></tr>
    <tr><td class="paramname">mask</td><td>Boolean selector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Elements from a where sel is false, 0 otherwise (sic). </dd></dl>

</div>
</div>
<a class="anchor" id="a92d3eb4aaecff5c613995ed4bce22a0a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> gmx::series_sinhx </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Maclaurin series for sinh(x)/x. </p>
<p>Used for NH chains and MTTK pressure control. Here, we compute it to 10th order, which might be an overkill. 8th is probably enough, but it's not very much more expensive. </p>

</div>
</div>
<a class="anchor" id="a106cb113fd73e054dbb8dfa2118d7153"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::setLibraryFileFinder </td>
          <td>(</td>
          <td class="paramtype">const DataFileFinder *&#160;</td>
          <td class="paramname"><em>finder</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets a finder for location data files from share/top/. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">finder</td><td>finder to set (can be NULL to restore the default finder).</td></tr>
  </table>
  </dd>
</dl>
<p>The library does not take ownership of <code>finder</code>. The provided object must remain valid until the global instance is changed by another call to <a class="el" href="namespacegmx.xhtml#a106cb113fd73e054dbb8dfa2118d7153" title="Sets a finder for location data files from share/top/. ">setLibraryFileFinder()</a>.</p>
<p>The global instance is used by <a class="el" href="futil_8h.xhtml#a07349956250b160526d32b00d15a544c" title="Finds full path for a library file. ">gmxlibfn()</a> and <a class="el" href="futil_8h.xhtml#a5be6c498c4e4820ead110d48b4587210" title="Opens a library file for reading. ">libopen()</a>.</p>
<p>This method is not thread-safe. See <a class="el" href="group__module__utility.xhtml#ga2cf34635c815cc712b6291c2c8da2555" title="Sets the global IProgramContext instance. ">setProgramContext()</a>; the same constraints apply here as well.</p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="a1b9689c4629a14843a0464a0053c8e9e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static const <a class="el" href="classgmx_1_1SimdSetZeroProxyInternal.xhtml">SimdSetZeroProxyInternal</a> gmx_simdcall gmx::setZero </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Proxy object to set any SIMD or scalar variable to zero. </p>
<dl class="section return"><dt>Returns</dt><dd>Proxy object that will call the actual function to set a SIMD/scalar variable to zero based on the conversion function called when you assign the result. </dd></dl>

</div>
</div>
<a class="anchor" id="a09dfcfeaf5bcd29a456e658026d65c01"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::setZeroD </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set all SIMD double variable elements to 0.0. </p>
<p>You should typically just call <a class="el" href="namespacegmx.xhtml#a1b9689c4629a14843a0464a0053c8e9e">gmx::setZero()</a>, which uses proxy objects internally to handle all types rather than adding the suffix used here.</p>
<dl class="section return"><dt>Returns</dt><dd>SIMD 0.0 </dd></dl>

</div>
</div>
<a class="anchor" id="a9b6fe2f4cd666b23f1c0e7aa8b0a31d0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall gmx::setZeroDI </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set all SIMD (double) integer variable elements to 0. </p>
<p>You should typically just call <a class="el" href="namespacegmx.xhtml#a1b9689c4629a14843a0464a0053c8e9e">gmx::setZero()</a>, which uses proxy objects internally to handle all types rather than adding the suffix used here.</p>
<dl class="section return"><dt>Returns</dt><dd>SIMD 0 </dd></dl>

</div>
</div>
<a class="anchor" id="aaeabcbecb3158411b57502164c854a31"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::setZeroF </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set all SIMD float variable elements to 0.0. </p>
<p>You should typically just call <a class="el" href="namespacegmx.xhtml#a1b9689c4629a14843a0464a0053c8e9e">gmx::setZero()</a>, which uses proxy objects internally to handle all types rather than adding the suffix used here.</p>
<dl class="section return"><dt>Returns</dt><dd>SIMD 0.0f </dd></dl>

</div>
</div>
<a class="anchor" id="a52eac01d95edbe3b448fc447832a5d3c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall gmx::setZeroFI </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set all SIMD (float) integer variable elements to 0. </p>
<p>You should typically just call <a class="el" href="namespacegmx.xhtml#a1b9689c4629a14843a0464a0053c8e9e">gmx::setZero()</a>, which uses proxy objects internally to handle all types rather than adding the suffix used here.</p>
<dl class="section return"><dt>Returns</dt><dd>SIMD 0 </dd></dl>

</div>
</div>
<a class="anchor" id="a621eef8998b02f36f8a6352658aab7a5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool gmx::simdCheck </td>
          <td>(</td>
          <td class="paramtype">SimdType&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>log</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>warnToStdErr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if binary was compiled with the provided SIMD type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>SIMD type to query. If this matches the suggested type for this cpu, the routine returns quietly. </td></tr>
    <tr><td class="paramname">log</td><td>If not nullptr, statistics will be printed to the file. If we do not have a match there will also be a warning. </td></tr>
    <tr><td class="paramname">warnToStdErr</td><td>If true, warnings will also be printed to stderr. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af4e458ade067ee9a54638f2cfda3a156"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::simdLoad </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load <a class="el" href="group__module__simd.xhtml#gafdbf804a40bfa3dcb15bc50055e58e74">GMX_SIMD_FLOAT_WIDTH</a> float numbers from aligned memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to memory aligned to the SIMD width. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD variable with data loaded. </dd></dl>

</div>
</div>
<a class="anchor" id="aca6f2a60f2104d5a19d51bf16fe4ecd2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::simdLoad </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load <a class="el" href="group__module__simd.xhtml#ga417e9d28b6310876bb2c69eb528c0a86">GMX_SIMD_DOUBLE_WIDTH</a> numbers from aligned memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to memory aligned to the SIMD width. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD variable with data loaded. </dd></dl>

</div>
</div>
<a class="anchor" id="a0943da18bf332314bf2d524586c728e5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall gmx::simdLoadDI </td>
          <td>(</td>
          <td class="paramtype">const std::int32_t *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load aligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdDouble.xhtml">gmx::SimdDouble</a>. </p>
<p>You should typically just call <a class="el" href="namespacegmx.xhtml#af6ad160249e7bc4726d93e89407c987e">gmx::load()</a>, which uses proxy objects internally to handle all types rather than adding the suffix used here.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to memory, aligned to (double) integer SIMD width. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD integer variable. </dd></dl>

</div>
</div>
<a class="anchor" id="a8b416215a20a73aff5fa5808c448811e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall gmx::simdLoadFI </td>
          <td>(</td>
          <td class="paramtype">const std::int32_t *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load aligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdFloat.xhtml">gmx::SimdFloat</a>. </p>
<p>You should typically just call <a class="el" href="namespacegmx.xhtml#af6ad160249e7bc4726d93e89407c987e">gmx::load()</a>, which uses proxy objects internally to handle all types rather than adding the suffix used here.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to memory, aligned to (float) integer SIMD width. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD integer variable. </dd></dl>

</div>
</div>
<a class="anchor" id="a3f6db4291f0fb805ed63c168b34b12e7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::simdLoadU </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load SIMD float from unaligned memory. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gacf774b2a886d1ed4149f825c50c8fec2">GMX_SIMD_HAVE_LOADU</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to memory, no alignment requirement. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD variable with data loaded. </dd></dl>

</div>
</div>
<a class="anchor" id="ae4f7f04699111821557406cf7bfe75b9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::simdLoadU </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load SIMD double from unaligned memory. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gacf774b2a886d1ed4149f825c50c8fec2">GMX_SIMD_HAVE_LOADU</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to memory, no alignment requirement. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD variable with data loaded. </dd></dl>

</div>
</div>
<a class="anchor" id="a236d2b76779fdbdf5e6e9e9c5dd00a6d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDInt32.xhtml">SimdDInt32</a> gmx_simdcall gmx::simdLoadUDI </td>
          <td>(</td>
          <td class="paramtype">const std::int32_t *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load unaligned integer SIMD data, width corresponds to <a class="el" href="classgmx_1_1SimdDouble.xhtml">gmx::SimdDouble</a>. </p>
<p>You should typically just call <a class="el" href="namespacegmx.xhtml#aac60a1e9bf9b5e7ae62895fb23311d99">gmx::loadU()</a>, which uses proxy objects internally to handle all types rather than adding the suffix used here.</p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gacf774b2a886d1ed4149f825c50c8fec2">GMX_SIMD_HAVE_LOADU</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to memory, no alignment requirements. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD integer variable. </dd></dl>

</div>
</div>
<a class="anchor" id="a37e5f3b6be0b2d544f0239939a775f91"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFInt32.xhtml">SimdFInt32</a> gmx_simdcall gmx::simdLoadUFI </td>
          <td>(</td>
          <td class="paramtype">const std::int32_t *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load unaligned integer SIMD data, width corresponds to <a class="el" href="classgmx_1_1SimdFloat.xhtml">gmx::SimdFloat</a>. </p>
<p>You should typically just call <a class="el" href="namespacegmx.xhtml#aac60a1e9bf9b5e7ae62895fb23311d99">gmx::loadU()</a>, which uses proxy objects internally to handle all types rather than adding the suffix used here.</p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gacf774b2a886d1ed4149f825c50c8fec2">GMX_SIMD_HAVE_LOADU</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to memory, no alignment requirements. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD integer variable. </dd></dl>

</div>
</div>
<a class="anchor" id="a073963d19e7e6337168de8dc0005b7e4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::simdPrefetch </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prefetch memory at address m. </p>
<p>This typically prefetches one cache line of memory from address m, usually 64bytes or more, but the exact amount will depend on the implementation. On many platforms this is simply a no-op. Technically it might not be part of the SIMD instruction set, but since it is a hardware-specific function that is normally only used in tight loops where we also apply SIMD, it fits well here.</p>
<p>There are no guarantees about the level of cache or temporality, but usually we expect stuff to end up in level 2, and be used in a few hundred clock cycles, after which it stays in cache until evicted (normal caching).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Pointer to location prefetch. There are no alignment requirements, but if the pointer is not aligned the prefetch might start at the lower cache line boundary (meaning fewer bytes are prefetched). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4c9dbda372b70531a9c407fa8727930b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string &amp; gmx::simdString </td>
          <td>(</td>
          <td class="paramtype">SimdType&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a string with the name of a SIMD type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>SIMD type to turn into string </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af85c54a566c85f916aaa2561d12fa851"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::sin </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float sin. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate sin for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Sin(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a6579216abaac018cb0bc59e9183f99ba"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::sin </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double sin. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate sin for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Sin(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a3191310c1a122aafe946f0caf2fdf364"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::sincos </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>sinval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>cosval</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float sin &amp; cos. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">x</td><td>The argument to evaluate sin/cos for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">sinval</td><td>Sin(x) </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">cosval</td><td>Cos(x)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a0a5923534ff59a386ae0579eb4196b1e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::sincos </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>sinval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>cosval</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double sin &amp; cos. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">x</td><td>The argument to evaluate sin/cos for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">sinval</td><td>Sin(x) </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">cosval</td><td>Cos(x)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a200455e2d7401d66cac8e39b4c8142bf"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::sincosSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>sinval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>cosval</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double sin &amp; cos, but with single accuracy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">x</td><td>The argument to evaluate sin/cos for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">sinval</td><td>Sin(x) </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">cosval</td><td>Cos(x)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a810c7b2f5d8f267f421f2c59a308c11d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::sinSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double sin, but with single accuracy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate sin for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Sin(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a12dcc6af3bf2f769ea1e17ed12921e2c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::sixthroot </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate sixth root of x in single precision. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, must be greater than or equal to zero.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>x^(1/6)</dd></dl>
<p>This routine is typically faster than using std::pow(). </p>

</div>
</div>
<a class="anchor" id="a4cf2628e4b20455d3396e0c2c234b951"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::sixthroot </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate sixth root of x in double precision. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, must be greater than or equal to zero.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>x^(1/6)</dd></dl>
<p>This routine is typically faster than using std::pow(). </p>

</div>
</div>
<a class="anchor" id="a02308efcb527a69ce399111550575880"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::sixthroot </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate sixth root of integer x, return double. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument, must be greater than or equal to zero.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>x^(1/6)</dd></dl>
<p>This routine is typically faster than using std::pow(). </p>

</div>
</div>
<a class="anchor" id="a2d6d95fd83052d09775c976a961eee29"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::sqrtSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate sqrt(x) for double, but with single accuracy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Argument that must be &gt;=0. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>sqrt(x).</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a06cbcb5324f3eb428189024f020158ff"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T gmx::square </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>calculate x^2 </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Type of argument and return value </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>x^2 </dd></dl>

</div>
</div>
<a class="anchor" id="a5ba56cff453ff9a1f21a11d72358592a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::store </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store contents of float variable to aligned memory m. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">m</td><td>Pointer to memory. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">a</td><td>float variable to store</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a52f7df2355065163447397f980294447"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx_simdcall gmx::store </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store the contents of SIMD float variable to aligned memory m. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">m</td><td>Pointer to memory, aligned to SIMD width. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">a</td><td>SIMD variable to store </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9c1227e97a6084a280a611c2934c8ee1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx_simdcall gmx::store </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store the contents of SIMD double variable to aligned memory m. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">m</td><td>Pointer to memory, aligned to SIMD width. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">a</td><td>SIMD variable to store </td></tr>
  </table>
  </dd>
</dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="template_8cpp-example.xhtml#a15">template.cpp</a>.</dd>
</dl>
</div>
</div>
<a class="anchor" id="a05b56e14f8499393813cb23869a97a98"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx_simdcall gmx::store </td>
          <td>(</td>
          <td class="paramtype">std::int32_t *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store aligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdFloat.xhtml">gmx::SimdFloat</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Memory aligned to (float) integer SIMD width. </td></tr>
    <tr><td class="paramname">a</td><td>SIMD variable to store. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4aef7840d04d5d9e2fabbc44445babad"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx_simdcall gmx::store </td>
          <td>(</td>
          <td class="paramtype">std::int32_t *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store aligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdDouble.xhtml">gmx::SimdDouble</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Memory aligned to (double) integer SIMD width. </td></tr>
    <tr><td class="paramname">a</td><td>SIMD (double) integer variable to store. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aea1d0d7a9f81e8e5cac19a3b66f0170e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::store </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store contents of double variable to aligned memory m. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">m</td><td>Pointer to memory. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">a</td><td>double variable to store</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="aa169afcbfb3992ab9fde1ed5beee8b06"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::store </td>
          <td>(</td>
          <td class="paramtype">std::int32_t *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store contents of integer variable to aligned memory m. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">m</td><td>Pointer to memory. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">a</td><td>integer variable to store</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a875057cc36d19c7e9be3f840612428d4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx_simdcall gmx::storeDualHsimd </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store low &amp; high parts of SIMD double to different locations. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m0</td><td>Pointer to memory aligned to half SIMD width. </td></tr>
    <tr><td class="paramname">m1</td><td>Pointer to memory aligned to half SIMD width. </td></tr>
    <tr><td class="paramname">a</td><td>SIMD variable. Low half should be stored to m0, high to m1.</td></tr>
  </table>
  </dd>
</dl>
<p>Available if <a class="el" href="group__module__simd.xhtml#gadef533340f8e648dfb550cbd8cfd9fc7">GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE</a> is 1. </p>

</div>
</div>
<a class="anchor" id="a5e9a1e1e45a47398ab3d7eb1732d9abc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx_simdcall gmx::storeDualHsimd </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store low &amp; high parts of SIMD float to different locations. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m0</td><td>Pointer to memory aligned to half SIMD width. </td></tr>
    <tr><td class="paramname">m1</td><td>Pointer to memory aligned to half SIMD width. </td></tr>
    <tr><td class="paramname">a</td><td>SIMD variable. Low half should be stored to m0, high to m1.</td></tr>
  </table>
  </dd>
</dl>
<p>Available if <a class="el" href="group__module__simd.xhtml#gac40bf3261e36fb7ff022e8ab37b04fcf">GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT</a> is 1. </p>

</div>
</div>
<a class="anchor" id="af3a3dcd7322b5b2555938fe1c05be15f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::storeU </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store contents of float variable to unaligned memory m. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">m</td><td>Pointer to memory, no alignment requirement. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">a</td><td>float variable to store.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a78a753ce93218a4e83f9733c66a48020"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx_simdcall gmx::storeU </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store SIMD float to unaligned memory. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga38ee3ad2fadedbafff3129df1e7c15b4">GMX_SIMD_HAVE_STOREU</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">m</td><td>Pointer to memory, no alignment requirement. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">a</td><td>SIMD variable to store. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9a8c867df8fe75511871290626c367ed"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx_simdcall gmx::storeU </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store SIMD double to unaligned memory. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga38ee3ad2fadedbafff3129df1e7c15b4">GMX_SIMD_HAVE_STOREU</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">m</td><td>Pointer to memory, no alignment requirement. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">a</td><td>SIMD variable to store. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a849eec56bc26a1d99f3f198fc9a9cba5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx_simdcall gmx::storeU </td>
          <td>(</td>
          <td class="paramtype">std::int32_t *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store unaligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdFloat.xhtml">gmx::SimdFloat</a>. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga38ee3ad2fadedbafff3129df1e7c15b4">GMX_SIMD_HAVE_STOREU</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Memory pointer, no alignment requirements. </td></tr>
    <tr><td class="paramname">a</td><td>SIMD variable to store. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="abe60b257e28900c4cf3cc8c45a0d1d64"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx_simdcall gmx::storeU </td>
          <td>(</td>
          <td class="paramtype">std::int32_t *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store unaligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdDouble.xhtml">gmx::SimdDouble</a>. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga38ee3ad2fadedbafff3129df1e7c15b4">GMX_SIMD_HAVE_STOREU</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">m</td><td>Memory pointer, no alignment requirements. </td></tr>
    <tr><td class="paramname">a</td><td>SIMD (double) integer variable to store. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aea9644fa777bc5e47ff9d3e2bdde34e0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::storeU </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store contents of double variable to unaligned memory m. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">m</td><td>Pointer to memory, no alignment requirement. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">a</td><td>double variable to store.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a43354d3d210193bcf5316234dc7d93ae"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::storeU </td>
          <td>(</td>
          <td class="paramtype">std::int32_t *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store contents of integer variable to unaligned memory m. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">m</td><td>Pointer to memory, no alignment requirement. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">a</td><td>integer variable to store.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a7063173231453ec737688c8d91aa0749"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::tan </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Float tan. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate tan for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Tan(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a45e727a4960ac7f8ba5149f9b251c520"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::tan </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double tan. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate tan for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Tan(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a0f979f3defa4f725cfce2d7e93fc0d9e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::tanSingleAccuracy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Double tan, but with single accuracy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The argument to evaluate tan for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Tan(x)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="af6a3628d9b9ddc7900590f963be7bbf0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool gmx::testBits </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return true if any bits are set in the float variable. </p>
<p>This function is used to handle bitmasks, mainly for exclusions in the inner kernels. Note that it will return true even for -0.0f (sign bit set), so it is not identical to not-equal.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if any bit in a is nonzero.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="ae58ba299df96ee6c45043e646a1d01dc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool gmx::testBits </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return true if any bits are set in the double variable. </p>
<p>This function is used to handle bitmasks, mainly for exclusions in the inner kernels. Note that it will return true even for -0.0 (sign bit set), so it is not identical to not-equal.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if any bit in a is nonzero.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="ae2a03b61db6a3ed3e8c2d5e1b3acc9a8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool gmx::testBits </td>
          <td>(</td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return true if any bits are set in the integer variable. </p>
<p>This function is used to handle bitmasks, mainly for exclusions in the inner kernels.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if any bit in a is nonzero.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a10dfe150e697592814f1d3edd5c3c87e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFBool.xhtml">SimdFBool</a> gmx_simdcall gmx::testBits </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return true if any bits are set in the single precision SIMD. </p>
<p>This function is used to handle bitmasks, mainly for exclusions in the inner kernels. Note that it will return true even for -0.0f (sign bit set), so it is not identical to not-equal.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Each element of the boolean will be true if any bit in a is nonzero. </dd></dl>

</div>
</div>
<a class="anchor" id="a5c87788b1cb09e4e6bfdf94f83f1ec76"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDBool.xhtml">SimdDBool</a> gmx_simdcall gmx::testBits </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return true if any bits are set in the single precision SIMD. </p>
<p>This function is used to handle bitmasks, mainly for exclusions in the inner kernels. Note that it will return true even for -0.0 (sign bit set), so it is not identical to not-equal.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Each element of the boolean will be true if any bit in a is nonzero. </dd></dl>

</div>
</div>
<a class="anchor" id="a47337ed69b038e337974eb220e9455bd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFIBool.xhtml">SimdFIBool</a> gmx_simdcall gmx::testBits </td>
          <td>(</td>
          <td class="paramtype">SimdFInt32&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if any bit is set in each element. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#ga9febc62e1abd58eb8a035b8b81f93292">GMX_SIMD_HAVE_FINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD integer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD integer boolean with true for elements where any bit is set </dd></dl>

</div>
</div>
<a class="anchor" id="af2ea05053a363baccc4a01d7d0bc137d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDIBool.xhtml">SimdDIBool</a> gmx_simdcall gmx::testBits </td>
          <td>(</td>
          <td class="paramtype">SimdDInt32&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if any bit is set in each element. </p>
<p>Available if <a class="el" href="group__module__simd.xhtml#gab8469202af6999f95405779355d89c30">GMX_SIMD_HAVE_DINT32_ARITHMETICS</a> is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>SIMD integer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>SIMD integer boolean with true for elements where any bit is set </dd></dl>

</div>
</div>
<a class="anchor" id="af7e302c7dcfb8d4937c4388d77057435"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::transposeScatterDecrU </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Subtract 3 floats from base/offset. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory to which we write, i.e. distance (measured in elements, not bytes) between index points. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">base</td><td>Pointer to the start of the memory area </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Offset to the start of triplet. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v0</td><td>1st value, subtracted from base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v1</td><td>2nd value, subtracted from base[align*offset[0] + 1]. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v2</td><td>3rd value, subtracted from base[align*offset[0] + 2].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a812731a42d1358e6a06f81848a67eeb7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::transposeScatterDecrU </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Subtract 3 doubles from base/offset. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory to which we write, i.e. distance (measured in elements, not bytes) between index points. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">base</td><td>Pointer to the start of the memory area </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Offset to the start of triplet. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v0</td><td>1st value, subtracted from base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v1</td><td>2nd value, subtracted from base[align*offset[0] + 1]. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v2</td><td>3rd value, subtracted from base[align*offset[0] + 2].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a12069a0402115678c9c39b303585917d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::transposeScatterIncrU </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add 3 floats to base/offset. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory to which we write, i.e. distance (measured in elements, not bytes) between index points. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">base</td><td>Pointer to the start of the memory area </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Offset to the start of triplet. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v0</td><td>1st value, added to base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v1</td><td>2nd value, added to base[align*offset[0] + 1]. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v2</td><td>3rd value, added to base[align*offset[0] + 2].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a83e3f241eaafa47cfa9258ec9efec8d0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::transposeScatterIncrU </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add 3 doubles to base/offset. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory to which we write, i.e. distance (measured in elements, not bytes) between index points. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">base</td><td>Pointer to the start of the memory area </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Offset to the start of triplet. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v0</td><td>1st value, added to base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v1</td><td>2nd value, added to base[align*offset[0] + 1]. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v2</td><td>3rd value, added to base[align*offset[0] + 2].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a65d8dd5e7a4ade4e3750b48e2a95b308"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::transposeScatterStoreU </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store 3 floats to 3 to base/offset. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory to which we write, i.e. distance (measured in elements, not bytes) between index points. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">base</td><td>Pointer to the start of the memory area </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Offset to the start of triplet. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v0</td><td>1st value, written to base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v1</td><td>2nd value, written to base[align*offset[0] + 1]. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v2</td><td>3rd value, written to base[align*offset[0] + 2].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="ab5d74c633ff138def6fa648441c5decf"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int align&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::transposeScatterStoreU </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::int32_t&#160;</td>
          <td class="paramname"><em>offset</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>v0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Store 3 doubles to 3 to base/offset. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">align</td><td>Alignment of the memory to which we write, i.e. distance (measured in elements, not bytes) between index points. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">base</td><td>Pointer to the start of the memory area </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">offset</td><td>Offset to the start of triplet. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v0</td><td>1st value, written to base[align*offset[0]]. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v1</td><td>2nd value, written to base[align*offset[0] + 1]. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">v2</td><td>3rd value, written to base[align*offset[0] + 2].</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a4323d38c16cd7ce6b1ae9df62e94ef2a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float gmx::trunc </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Truncate float, i.e. round towards zero - common hardware instruction. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Any floating-point value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Integer rounded towards zero, represented in floating-point format.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a00d84f65dae98aeb02816975f5045eed"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double gmx::trunc </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Truncate double, i.e. round towards zero - common hardware instruction. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Any doubleing-point value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Integer rounded towards zero, represented in doubleing-point format.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function might be superficially meaningless, but it helps us to write templated SIMD/non-SIMD code. For clarity it should not be used outside such code. </dd></dl>

</div>
</div>
<a class="anchor" id="a03c0d9c75faf734c06f162e92e56f5f7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdFloat.xhtml">SimdFloat</a> gmx_simdcall gmx::trunc </td>
          <td>(</td>
          <td class="paramtype">SimdFloat&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Truncate SIMD float, i.e. round towards zero - common hardware instruction. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Any floating-point value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Integer rounded towards zero, represented in floating-point format.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is truncation towards zero, not floor(). The reason for this is that truncation is virtually always present as a dedicated hardware instruction, but floor() frequently isn't. </dd></dl>

</div>
</div>
<a class="anchor" id="acc9e911dbe1d9be0b86d8870a91b399c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1SimdDouble.xhtml">SimdDouble</a> gmx_simdcall gmx::trunc </td>
          <td>(</td>
          <td class="paramtype">SimdDouble&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Truncate SIMD double, i.e. round towards zero - common hardware instruction. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Any floating-point value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Integer rounded towards zero, represented in floating-point format.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is truncation towards zero, not floor(). The reason for this is that truncation is virtually always present as a dedicated hardware instruction, but floor() frequently isn't. </dd></dl>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a class="anchor" id="a19f6a93a5bf9ce1e585bebf205d6f6ea"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double gmx::do_md</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>MD simulations. </p>
<p>Integrator algorithm implementation. (FILE *fplog, t_commrec *cr,</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fplog</td><td>Log file for output </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cr</td><td>Communication record </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nfile</td><td>Number of files </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fnm</td><td>Filename structure array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">oenv</td><td>Output information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bVerbose</td><td>Verbose output or not </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nstglobalcomm</td><td>How often global communication is done </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vsite</td><td>Virtual site information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">constr</td><td>Constraint information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stepout</td><td>How often we writen to the console </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">inputrec</td><td>Input record with mdp options </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">top_global</td><td>Molecular topology for the whole system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fcd</td><td>Force and constraint data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">state_global</td><td>The state (x, v, f, box etc.) of the whole system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mdatoms</td><td>Structure containing atom information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nrnb</td><td>Accounting for floating point operations </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wcycle</td><td>Wall cycle timing information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ed</td><td>Essential dynamics sampling information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fr</td><td>Force record with cut-off information and more </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_nst</td><td>How often we do replica exchange (in steps) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_nex</td><td>How many replicas we have </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">repl_ex_seed</td><td>The seed for Monte Carlo swaps </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">membed</td><td>Membrane embedding data structure </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cpt_period</td><td>How often to checkpoint the simulation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_hours</td><td>Maximume length of the simulation (wall time) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">imdport</td><td>Interactive MD port (socket) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Flags</td><td>Flags to control mdrun </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">walltime_accounting</td><td>More timing information (FILE *fplog, t_commrec *cr, int nfile, const <a class="el" href="structt__filenm.xhtml" title="File name option definition for C code. ">t_filenm</a> fnm[], const gmx_output_env_t *oenv, gmx_bool bVerbose, int nstglobalcomm, gmx_vsite_t *vsite, gmx_constr_t constr, int stepout, t_inputrec *inputrec, gmx_mtop_t *top_global, t_fcdata *fcd, t_state *state_global, <a class="el" href="structt__mdatoms.xhtml" title="Declares mdatom data structure. ">t_mdatoms</a> *mdatoms, t_nrnb *nrnb, gmx_wallcycle_t wcycle, gmx_edsam_t ed, t_forcerec *fr, int repl_ex_nst, int repl_ex_nex, int repl_ex_seed, real cpt_period, real max_hours, int imdport, unsigned long Flags, gmx_walltime_accounting_t walltime_accounting) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:20:43 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
