<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::test::TestReferenceChecker Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="namespacegmx_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="classgmx_1_1test_1_1TestReferenceChecker-members.xhtml">List of all members</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">gmx::test::TestReferenceChecker Class Reference<div class="ingroups"><a class="el" href="group__group__libraryapi.xhtml">Library API</a> &#124; <a class="el" href="group__module__testutils.xhtml">Testing Utilities (testutils)</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;testutils/refdata.h&gt;</code></p>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Handles comparison to test reference data. </p>
<p>Every check*() method takes an id string as the last parameter. This id is used to uniquely identify the value in the reference data, and it makes the output XML more human-friendly and more robust to errors. The id can be NULL; in this case, multiple elements with no id are created, and they will be matched in the same order as in which they are created. The <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a3fd1541f9033b7fcf199ffb7fd6a7910" title="Initializes comparison of a group of related data items. ">checkCompound()</a> method can be used to create a set of reference values grouped together. In this case, all check*() calls using the returned child <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml" title="Handles comparison to test reference data. ">TestReferenceChecker</a> object will create the reference data within this group, and the ids only need to be unique within the compound. Compounds can be nested.</p>
<p>For usage example, see <a class="el" href="classgmx_1_1test_1_1TestReferenceData.xhtml" title="Handles creation of and comparison to test reference data. ">TestReferenceData</a>.</p>
<p>Copies of this class behave have independent internal state. </p>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml">Impl</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Private implementation class for <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml" title="Handles comparison to test reference data. ">TestReferenceChecker</a>.  <a href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a254b525b8a7a55d8b7016fb6955b4729"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a254b525b8a7a55d8b7016fb6955b4729">TestReferenceChecker</a> ()</td></tr>
<tr class="memdesc:a254b525b8a7a55d8b7016fb6955b4729"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a checker that cannot be used for checking.  <a href="#a254b525b8a7a55d8b7016fb6955b4729">More...</a><br/></td></tr>
<tr class="separator:a254b525b8a7a55d8b7016fb6955b4729"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a44d53b17c9043e1a2a20353d9ab270"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7a44d53b17c9043e1a2a20353d9ab270"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a7a44d53b17c9043e1a2a20353d9ab270">TestReferenceChecker</a> (const <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a> &amp;other)</td></tr>
<tr class="memdesc:a7a44d53b17c9043e1a2a20353d9ab270"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a deep copy of the other checker. <br/></td></tr>
<tr class="separator:a7a44d53b17c9043e1a2a20353d9ab270"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a335030d9b52a78b6cab57a5ffbc3723b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a335030d9b52a78b6cab57a5ffbc3723b"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a335030d9b52a78b6cab57a5ffbc3723b">TestReferenceChecker</a> (<a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a> &amp;&amp;other)</td></tr>
<tr class="memdesc:a335030d9b52a78b6cab57a5ffbc3723b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the checker. <br/></td></tr>
<tr class="separator:a335030d9b52a78b6cab57a5ffbc3723b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69102d64f209f3f99eb8d30aa9b35474"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a69102d64f209f3f99eb8d30aa9b35474"></a>
<a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a69102d64f209f3f99eb8d30aa9b35474">operator=</a> (const <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a> &amp;)=delete</td></tr>
<tr class="memdesc:a69102d64f209f3f99eb8d30aa9b35474"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevents implicit copying during assignment. <br/></td></tr>
<tr class="separator:a69102d64f209f3f99eb8d30aa9b35474"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac193427ca61a10938227a4aa1e0e72fb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac193427ca61a10938227a4aa1e0e72fb"></a>
<a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#ac193427ca61a10938227a4aa1e0e72fb">operator=</a> (<a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a> &amp;&amp;other)</td></tr>
<tr class="memdesc:ac193427ca61a10938227a4aa1e0e72fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assigns a test reference checker. <br/></td></tr>
<tr class="separator:ac193427ca61a10938227a4aa1e0e72fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c1d069312d836f290ebf2aa422c5953"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4c1d069312d836f290ebf2aa422c5953"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a4c1d069312d836f290ebf2aa422c5953">isValid</a> () const </td></tr>
<tr class="memdesc:a4c1d069312d836f290ebf2aa422c5953"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the checker is initialized. <br/></td></tr>
<tr class="separator:a4c1d069312d836f290ebf2aa422c5953"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8263ed14ae942e9f61d8f0718ddaa293"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8263ed14ae942e9f61d8f0718ddaa293"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a8263ed14ae942e9f61d8f0718ddaa293">operator bool</a> () const </td></tr>
<tr class="memdesc:a8263ed14ae942e9f61d8f0718ddaa293"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows testing whether the checker is initialized directly with if. <br/></td></tr>
<tr class="separator:a8263ed14ae942e9f61d8f0718ddaa293"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad50b745444194c3625a58f2e81937220"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#ad50b745444194c3625a58f2e81937220">setDefaultTolerance</a> (const <a class="el" href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml">FloatingPointTolerance</a> &amp;tolerance)</td></tr>
<tr class="memdesc:ad50b745444194c3625a58f2e81937220"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the tolerance for floating-point comparisons.  <a href="#ad50b745444194c3625a58f2e81937220">More...</a><br/></td></tr>
<tr class="separator:ad50b745444194c3625a58f2e81937220"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10b736179e2a66114f60ba906e7c0bb6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a10b736179e2a66114f60ba906e7c0bb6">checkPresent</a> (bool bPresent, const char *id)</td></tr>
<tr class="memdesc:a10b736179e2a66114f60ba906e7c0bb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether a data item is present.  <a href="#a10b736179e2a66114f60ba906e7c0bb6">More...</a><br/></td></tr>
<tr class="separator:a10b736179e2a66114f60ba906e7c0bb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fd1541f9033b7fcf199ffb7fd6a7910"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a3fd1541f9033b7fcf199ffb7fd6a7910">checkCompound</a> (const char *type, const char *id)</td></tr>
<tr class="memdesc:a3fd1541f9033b7fcf199ffb7fd6a7910"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes comparison of a group of related data items.  <a href="#a3fd1541f9033b7fcf199ffb7fd6a7910">More...</a><br/></td></tr>
<tr class="separator:a3fd1541f9033b7fcf199ffb7fd6a7910"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebf0890f8e9d033dbeb36c80462413aa"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aebf0890f8e9d033dbeb36c80462413aa"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#aebf0890f8e9d033dbeb36c80462413aa">checkBoolean</a> (bool value, const char *id)</td></tr>
<tr class="memdesc:aebf0890f8e9d033dbeb36c80462413aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single boolean value. <br/></td></tr>
<tr class="separator:aebf0890f8e9d033dbeb36c80462413aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38f9e5cd7ec4b2a78ff4b1fbaa8b5f44"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a38f9e5cd7ec4b2a78ff4b1fbaa8b5f44"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a38f9e5cd7ec4b2a78ff4b1fbaa8b5f44">checkString</a> (const char *value, const char *id)</td></tr>
<tr class="memdesc:a38f9e5cd7ec4b2a78ff4b1fbaa8b5f44"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single string value. <br/></td></tr>
<tr class="separator:a38f9e5cd7ec4b2a78ff4b1fbaa8b5f44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4ad8f4f22946e28dbdc2dfe8ab47326"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad4ad8f4f22946e28dbdc2dfe8ab47326"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#ad4ad8f4f22946e28dbdc2dfe8ab47326">checkString</a> (const std::string &amp;value, const char *id)</td></tr>
<tr class="memdesc:ad4ad8f4f22946e28dbdc2dfe8ab47326"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single string value. <br/></td></tr>
<tr class="separator:ad4ad8f4f22946e28dbdc2dfe8ab47326"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5774583c37127643e62a4b4bb5a69c8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#ac5774583c37127643e62a4b4bb5a69c8">checkTextBlock</a> (const std::string &amp;value, const char *id)</td></tr>
<tr class="memdesc:ac5774583c37127643e62a4b4bb5a69c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a multi-line string value.  <a href="#ac5774583c37127643e62a4b4bb5a69c8">More...</a><br/></td></tr>
<tr class="separator:ac5774583c37127643e62a4b4bb5a69c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb8d0f46f835599778fa12d12a28acf9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="abb8d0f46f835599778fa12d12a28acf9"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#abb8d0f46f835599778fa12d12a28acf9">checkInteger</a> (int value, const char *id)</td></tr>
<tr class="memdesc:abb8d0f46f835599778fa12d12a28acf9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single integer value. <br/></td></tr>
<tr class="separator:abb8d0f46f835599778fa12d12a28acf9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a913030cb5aa091a9a92de34813ffcf96"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a913030cb5aa091a9a92de34813ffcf96"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a913030cb5aa091a9a92de34813ffcf96">checkInt64</a> (gmx_int64_t value, const char *id)</td></tr>
<tr class="memdesc:a913030cb5aa091a9a92de34813ffcf96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single int64 value. <br/></td></tr>
<tr class="separator:a913030cb5aa091a9a92de34813ffcf96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0884d060961f723e6d93b3047021865"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac0884d060961f723e6d93b3047021865"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#ac0884d060961f723e6d93b3047021865">checkUInt64</a> (gmx_uint64_t value, const char *id)</td></tr>
<tr class="memdesc:ac0884d060961f723e6d93b3047021865"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single uint64 value. <br/></td></tr>
<tr class="separator:ac0884d060961f723e6d93b3047021865"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31ba9bdb3e27ca53dff300346ada68aa"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a31ba9bdb3e27ca53dff300346ada68aa"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a31ba9bdb3e27ca53dff300346ada68aa">checkFloat</a> (float value, const char *id)</td></tr>
<tr class="memdesc:a31ba9bdb3e27ca53dff300346ada68aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single single-precision floating point value. <br/></td></tr>
<tr class="separator:a31ba9bdb3e27ca53dff300346ada68aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a013b30438e09bf0d448d7ca13a9a86e2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a013b30438e09bf0d448d7ca13a9a86e2"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a013b30438e09bf0d448d7ca13a9a86e2">checkDouble</a> (double value, const char *id)</td></tr>
<tr class="memdesc:a013b30438e09bf0d448d7ca13a9a86e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single double-precision floating point value. <br/></td></tr>
<tr class="separator:a013b30438e09bf0d448d7ca13a9a86e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0c7eca872857d85e68a6dd7368fa799"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab0c7eca872857d85e68a6dd7368fa799"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#ab0c7eca872857d85e68a6dd7368fa799">checkReal</a> (float value, const char *id)</td></tr>
<tr class="memdesc:ab0c7eca872857d85e68a6dd7368fa799"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single floating point value. <br/></td></tr>
<tr class="separator:ab0c7eca872857d85e68a6dd7368fa799"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a830071b4f4077c55531cf1a645c16511"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a830071b4f4077c55531cf1a645c16511"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a830071b4f4077c55531cf1a645c16511">checkReal</a> (double value, const char *id)</td></tr>
<tr class="memdesc:a830071b4f4077c55531cf1a645c16511"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single floating point value. <br/></td></tr>
<tr class="separator:a830071b4f4077c55531cf1a645c16511"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32b9421866c3c17bcffc1d347291f702"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a32b9421866c3c17bcffc1d347291f702"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a32b9421866c3c17bcffc1d347291f702">checkVector</a> (const int value[3], const char *id)</td></tr>
<tr class="memdesc:a32b9421866c3c17bcffc1d347291f702"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a vector of three integer values. <br/></td></tr>
<tr class="separator:a32b9421866c3c17bcffc1d347291f702"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a323abaff8b36e0c94af88c1d02d4bb3c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a323abaff8b36e0c94af88c1d02d4bb3c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a323abaff8b36e0c94af88c1d02d4bb3c">checkVector</a> (const float value[3], const char *id)</td></tr>
<tr class="memdesc:a323abaff8b36e0c94af88c1d02d4bb3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a vector of three single-precision floating point values. <br/></td></tr>
<tr class="separator:a323abaff8b36e0c94af88c1d02d4bb3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49b8040bc4c7ef34e2f34b49b2afd2ab"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a49b8040bc4c7ef34e2f34b49b2afd2ab"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a49b8040bc4c7ef34e2f34b49b2afd2ab">checkVector</a> (const double value[3], const char *id)</td></tr>
<tr class="memdesc:a49b8040bc4c7ef34e2f34b49b2afd2ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a vector of three double-precision floating point values. <br/></td></tr>
<tr class="separator:a49b8040bc4c7ef34e2f34b49b2afd2ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3f10879fe252648c4bdaa104dae869f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af3f10879fe252648c4bdaa104dae869f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#af3f10879fe252648c4bdaa104dae869f">checkRealFromString</a> (const std::string &amp;value, const char *id)</td></tr>
<tr class="memdesc:af3f10879fe252648c4bdaa104dae869f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single floating-point value from a string. <br/></td></tr>
<tr class="separator:af3f10879fe252648c4bdaa104dae869f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2cd9cbf54682bec0b599675a3563724"><td class="memTemplParams" colspan="2">template&lt;class Iterator &gt; </td></tr>
<tr class="memitem:af2cd9cbf54682bec0b599675a3563724"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#af2cd9cbf54682bec0b599675a3563724">checkSequence</a> (Iterator begin, Iterator end, const char *id)</td></tr>
<tr class="memdesc:af2cd9cbf54682bec0b599675a3563724"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic method to check a sequence of simple values.  <a href="#af2cd9cbf54682bec0b599675a3563724">More...</a><br/></td></tr>
<tr class="separator:af2cd9cbf54682bec0b599675a3563724"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1a8225fa98b3b6322d088d010055d07"><td class="memTemplParams" colspan="2">template&lt;class Iterator , class ItemChecker &gt; </td></tr>
<tr class="memitem:ae1a8225fa98b3b6322d088d010055d07"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#ae1a8225fa98b3b6322d088d010055d07">checkSequence</a> (Iterator begin, Iterator end, const char *id, ItemChecker checkItem)</td></tr>
<tr class="memdesc:ae1a8225fa98b3b6322d088d010055d07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic method to check a sequence of custom values.  <a href="#ae1a8225fa98b3b6322d088d010055d07">More...</a><br/></td></tr>
<tr class="separator:ae1a8225fa98b3b6322d088d010055d07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae473056edffa48fa75863c65e517ff18"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ae473056edffa48fa75863c65e517ff18"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#ae473056edffa48fa75863c65e517ff18">checkSequenceArray</a> (size_t length, const T *values, const char *id)</td></tr>
<tr class="memdesc:ae473056edffa48fa75863c65e517ff18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check an array of values.  <a href="#ae473056edffa48fa75863c65e517ff18">More...</a><br/></td></tr>
<tr class="separator:ae473056edffa48fa75863c65e517ff18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1cdbbfcc92ee5207704250631542eeb7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a1cdbbfcc92ee5207704250631542eeb7">checkEmptySequence</a> (const char *id)</td></tr>
<tr class="memdesc:a1cdbbfcc92ee5207704250631542eeb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience method for checking that a sequence is empty.  <a href="#a1cdbbfcc92ee5207704250631542eeb7">More...</a><br/></td></tr>
<tr class="separator:a1cdbbfcc92ee5207704250631542eeb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f2502a02055396d6d9cb6a4fafdc08e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a4f2502a02055396d6d9cb6a4fafdc08e">checkSequenceCompound</a> (const char *id, size_t length)</td></tr>
<tr class="memdesc:a4f2502a02055396d6d9cb6a4fafdc08e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes a compound for a sequence of items.  <a href="#a4f2502a02055396d6d9cb6a4fafdc08e">More...</a><br/></td></tr>
<tr class="separator:a4f2502a02055396d6d9cb6a4fafdc08e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Overloaded versions of simple checker methods</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>These methods provide overloads under a single name for all the methods <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#aebf0890f8e9d033dbeb36c80462413aa" title="Check a single boolean value. ">checkBoolean()</a>, <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a38f9e5cd7ec4b2a78ff4b1fbaa8b5f44" title="Check a single string value. ">checkString()</a>, <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#ab0c7eca872857d85e68a6dd7368fa799" title="Check a single floating point value. ">checkReal()</a> and <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a32b9421866c3c17bcffc1d347291f702" title="Check a vector of three integer values. ">checkVector()</a>. They are provided mainly to allow template implementations (such as <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#af2cd9cbf54682bec0b599675a3563724" title="Generic method to check a sequence of simple values. ">checkSequence()</a>). Typically callers should use the individually named versions for greater clarity. </p>
</div></td></tr>
<tr class="memitem:afb3022852336fdd06d5a94a648c6b811"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="afb3022852336fdd06d5a94a648c6b811"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#afb3022852336fdd06d5a94a648c6b811">checkValue</a> (bool value, const char *id)</td></tr>
<tr class="memdesc:afb3022852336fdd06d5a94a648c6b811"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single boolean value. <br/></td></tr>
<tr class="separator:afb3022852336fdd06d5a94a648c6b811"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a337cd319b513994c3e86d98766302fb5"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a337cd319b513994c3e86d98766302fb5"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a337cd319b513994c3e86d98766302fb5">checkValue</a> (const char *value, const char *id)</td></tr>
<tr class="memdesc:a337cd319b513994c3e86d98766302fb5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single string value. <br/></td></tr>
<tr class="separator:a337cd319b513994c3e86d98766302fb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a324b4c98f8fd45e4d6b9870e3dfb2711"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a324b4c98f8fd45e4d6b9870e3dfb2711"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a324b4c98f8fd45e4d6b9870e3dfb2711">checkValue</a> (const std::string &amp;value, const char *id)</td></tr>
<tr class="memdesc:a324b4c98f8fd45e4d6b9870e3dfb2711"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single string value. <br/></td></tr>
<tr class="separator:a324b4c98f8fd45e4d6b9870e3dfb2711"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a694c5bdee169333bd5b7350d5cf3c417"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a694c5bdee169333bd5b7350d5cf3c417"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a694c5bdee169333bd5b7350d5cf3c417">checkValue</a> (int value, const char *id)</td></tr>
<tr class="memdesc:a694c5bdee169333bd5b7350d5cf3c417"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single integer value. <br/></td></tr>
<tr class="separator:a694c5bdee169333bd5b7350d5cf3c417"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a977e9852e9eba99f075d7a7dc7a1d39d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a977e9852e9eba99f075d7a7dc7a1d39d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a977e9852e9eba99f075d7a7dc7a1d39d">checkValue</a> (gmx_int64_t value, const char *id)</td></tr>
<tr class="memdesc:a977e9852e9eba99f075d7a7dc7a1d39d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single integer value. <br/></td></tr>
<tr class="separator:a977e9852e9eba99f075d7a7dc7a1d39d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbc4559a2fd8ff15f65295fddaba2413"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="abbc4559a2fd8ff15f65295fddaba2413"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#abbc4559a2fd8ff15f65295fddaba2413">checkValue</a> (gmx_uint64_t value, const char *id)</td></tr>
<tr class="memdesc:abbc4559a2fd8ff15f65295fddaba2413"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single integer value. <br/></td></tr>
<tr class="separator:abbc4559a2fd8ff15f65295fddaba2413"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ccfa06551be602c38abca28da483020"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5ccfa06551be602c38abca28da483020"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a5ccfa06551be602c38abca28da483020">checkValue</a> (float value, const char *id)</td></tr>
<tr class="memdesc:a5ccfa06551be602c38abca28da483020"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single single-precision floating point value. <br/></td></tr>
<tr class="separator:a5ccfa06551be602c38abca28da483020"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5375ce0953d585c6dd2d87b48547cbea"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5375ce0953d585c6dd2d87b48547cbea"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a5375ce0953d585c6dd2d87b48547cbea">checkValue</a> (double value, const char *id)</td></tr>
<tr class="memdesc:a5375ce0953d585c6dd2d87b48547cbea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a single double-precision floating point value. <br/></td></tr>
<tr class="separator:a5375ce0953d585c6dd2d87b48547cbea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68417145afcaa96402d00483522916cb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a68417145afcaa96402d00483522916cb"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a68417145afcaa96402d00483522916cb">checkValue</a> (const int value[3], const char *id)</td></tr>
<tr class="memdesc:a68417145afcaa96402d00483522916cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a vector of three integer values. <br/></td></tr>
<tr class="separator:a68417145afcaa96402d00483522916cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c254f2a7eea738576ca7bab1a999b38"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0c254f2a7eea738576ca7bab1a999b38"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a0c254f2a7eea738576ca7bab1a999b38">checkValue</a> (const float value[3], const char *id)</td></tr>
<tr class="memdesc:a0c254f2a7eea738576ca7bab1a999b38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a vector of three single-precision floating point values. <br/></td></tr>
<tr class="separator:a0c254f2a7eea738576ca7bab1a999b38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac87a991f91e5fb7ceeaeeaf387062c85"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac87a991f91e5fb7ceeaeeaf387062c85"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#ac87a991f91e5fb7ceeaeeaf387062c85">checkValue</a> (const double value[3], const char *id)</td></tr>
<tr class="memdesc:ac87a991f91e5fb7ceeaeeaf387062c85"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check a vector of three double-precision floating point values. <br/></td></tr>
<tr class="separator:ac87a991f91e5fb7ceeaeeaf387062c85"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:aaa15eff193010f3a4b44dbc8109af6ad"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aaa15eff193010f3a4b44dbc8109af6ad"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#aaa15eff193010f3a4b44dbc8109af6ad">TestReferenceData</a></td></tr>
<tr class="memdesc:aaa15eff193010f3a4b44dbc8109af6ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Needed to expose the constructor only to <a class="el" href="classgmx_1_1test_1_1TestReferenceData.xhtml" title="Handles creation of and comparison to test reference data. ">TestReferenceData</a>. <br/></td></tr>
<tr class="separator:aaa15eff193010f3a4b44dbc8109af6ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a254b525b8a7a55d8b7016fb6955b4729"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">gmx::test::TestReferenceChecker::TestReferenceChecker </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a checker that cannot be used for checking. </p>
<p>Attempting to call the check methods generates an assert. It is possible to check whether the checker is initialized by calling <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a4c1d069312d836f290ebf2aa422c5953" title="Returns whether the checker is initialized. ">isValid()</a>. This constructor exists to allow declaring checker variables that will receive their value later without resorting to dynamic allocation. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a3fd1541f9033b7fcf199ffb7fd6a7910"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a> gmx::test::TestReferenceChecker::checkCompound </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes comparison of a group of related data items. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>Informational type for the compound. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Unique identifier for the compound among its siblings. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Checker to use for comparison within the compound.</dd></dl>
<p>All checks performed with the returned checker only need to have unique ids within the compound, not globally.</p>
<p>Compound structures can be nested. </p>

</div>
</div>
<a class="anchor" id="a1cdbbfcc92ee5207704250631542eeb7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::TestReferenceChecker::checkEmptySequence </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convenience method for checking that a sequence is empty. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Unique identifier for the sequence among its siblings.</td></tr>
  </table>
  </dd>
</dl>
<p>This method provides a convenient solution for a case where there is implicitly a sequence to be checked, but there is no pointer available to the values since the sequence is empty. Since this method does not require the type of the values, it can be used in such cases easily. </p>

</div>
</div>
<a class="anchor" id="a10b736179e2a66114f60ba906e7c0bb6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool gmx::test::TestReferenceChecker::checkPresent </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bPresent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks whether a data item is present. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bPresent</td><td>Whether to check for presence or absence. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Unique identifier of the item to check. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if bPresent was true and the data item was found.</dd></dl>
<p>If <code>bPresent</code> is true, checks that a data item with <code>id</code> is present, otherwise checks that the data item is absent. If the check fails, a non-fatal Google Test assertion is generated.</p>
<p>If reference data is being written, the check always succeeds and the return value is <code>bPresent</code>.</p>
<p>The main use of this method is to assign meaning for missing reference data. Example use: </p>
<div class="fragment"><div class="line">  <span class="keywordflow">if</span> (checker.checkPresent(bHaveVelocities, <span class="stringliteral">&quot;Velocities&quot;</span>))</div>
<div class="line">  {</div>
<div class="line">      <span class="comment">// &lt;check the velocities&gt;</span></div>
<div class="line">  }</div>
<div class="line">* </div>
</div><!-- fragment --> 
</div>
</div>
<a class="anchor" id="af2cd9cbf54682bec0b599675a3563724"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Iterator &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::TestReferenceChecker::checkSequence </td>
          <td>(</td>
          <td class="paramtype">Iterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Iterator&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generic method to check a sequence of simple values. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Iterator</td><td>Input iterator that allows multiple (two) passes. Value type must be one of those accepted by <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#afb3022852336fdd06d5a94a648c6b811" title="Check a single boolean value. ">checkValue()</a>, or implicitly convertible to one. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">begin</td><td>Iterator to the start of the range to check. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end</td><td>Iterator to the end of the range to check. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Unique identifier for the sequence among its siblings. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae1a8225fa98b3b6322d088d010055d07"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Iterator , class ItemChecker &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::TestReferenceChecker::checkSequence </td>
          <td>(</td>
          <td class="paramtype">Iterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Iterator&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ItemChecker&#160;</td>
          <td class="paramname"><em>checkItem</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generic method to check a sequence of custom values. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Iterator</td><td>Input iterator that allows multiple (two) passes. </td></tr>
    <tr><td class="paramname">ItemChecker</td><td>Functor to check an individual value. Signature void(TestReferenceChecker *, const T &amp;), where T is the value type of <code>Iterator</code>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">begin</td><td>Iterator to the start of the range to check. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end</td><td>Iterator to the end of the range to check. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Unique identifier for the sequence among its siblings. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">checkItem</td><td>Functor to check an individual item.</td></tr>
  </table>
  </dd>
</dl>
<p>This method creates a compound checker <code>compound</code> within which all values of the sequence are checked. Calls <code>checkItem(&amp;compound, *i)</code> with that compound for each iterator <code>i</code> in the range [begin, end). <code>checkItem</code> should use the various check methods in the passed checker to check each value.</p>
<p>This method can be used to check a sequence made of compound types. Typically <code>checkItem</code> will create a compound within the passed checker to check different aspects of the value that was passed to it. Either NULL or a unique identifier string must be used for the id value of that compound. </p>

</div>
</div>
<a class="anchor" id="ae473056edffa48fa75863c65e517ff18"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::TestReferenceChecker::checkSequenceArray </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check an array of values. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Type of values to check. Should be one of those accepted by <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#afb3022852336fdd06d5a94a648c6b811" title="Check a single boolean value. ">checkValue()</a>, or implicitly convertible to one.</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">length</td><td>Number of values to check. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>Pointer to the first value to check. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Unique identifier for the sequence among its siblings.</td></tr>
  </table>
  </dd>
</dl>
<p>This is a convenience method that delegates all work to <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#af2cd9cbf54682bec0b599675a3563724" title="Generic method to check a sequence of simple values. ">checkSequence()</a>. </p>

</div>
</div>
<a class="anchor" id="a4f2502a02055396d6d9cb6a4fafdc08e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a> gmx::test::TestReferenceChecker::checkSequenceCompound </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes a compound for a sequence of items. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Unique identifier for the sequence among its siblings. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">length</td><td>Number of items that will be in the sequence. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Checker to use for comparison within the sequence.</dd></dl>
<p>This method can be used to check custom sequences where <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#af2cd9cbf54682bec0b599675a3563724" title="Generic method to check a sequence of simple values. ">checkSequence()</a> is not appropriate. </p>

</div>
</div>
<a class="anchor" id="ac5774583c37127643e62a4b4bb5a69c8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::TestReferenceChecker::checkTextBlock </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check a multi-line string value. </p>
<p>This method works as <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a38f9e5cd7ec4b2a78ff4b1fbaa8b5f44" title="Check a single string value. ">checkString()</a>, but should be used for long strings that may contain, e.g., newlines. Typically used to check formatted output, and attempts to make the output XML such that it is easier to edit by hand to set the desired output formatting. </p>

</div>
</div>
<a class="anchor" id="ad50b745444194c3625a58f2e81937220"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::TestReferenceChecker::setDefaultTolerance </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml">FloatingPointTolerance</a> &amp;&#160;</td>
          <td class="paramname"><em>tolerance</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the tolerance for floating-point comparisons. </p>
<p>All following floating-point comparisons using this checker will use the new tolerance. Child checkers created with <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a3fd1541f9033b7fcf199ffb7fd6a7910" title="Initializes comparison of a group of related data items. ">checkCompound()</a> will inherit the tolerance from their parent checker at the time <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#a3fd1541f9033b7fcf199ffb7fd6a7910" title="Initializes comparison of a group of related data items. ">checkCompound()</a> is called.</p>
<p>Does not throw. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/testutils/<a class="el" href="refdata_8h.xhtml">refdata.h</a></li>
<li>src/testutils/<a class="el" href="refdata_8cpp.xhtml">refdata.cpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:20:48 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
