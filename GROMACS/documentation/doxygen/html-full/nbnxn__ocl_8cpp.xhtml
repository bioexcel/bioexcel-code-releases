<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_71392c6f4b1ed3a32ba5c064e868a1ba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a798d384400d41a9e6864d9b1b8753fe.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_b988dc028879cf86b2e2d3976beb6cdb.xhtml">mdlib</a></li><li class="navelem"><a class="el" href="dir_6b5b7efdd20568ac96099d3d02ad84c4.xhtml">nbnxn_ocl</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">nbnxn_ocl.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="gmxpre_8h.xhtml">gmxpre.h</a>&quot;</code><br/>
<code>#include &quot;config.h&quot;</code><br/>
<code>#include &lt;assert.h&gt;</code><br/>
<code>#include &lt;stdlib.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="oclutils_8h.xhtml">gromacs/gpu_utils/oclutils.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/hardware/hw_info.h&quot;</code><br/>
<code>#include &quot;gromacs/mdlib/force_flags.h&quot;</code><br/>
<code>#include &quot;gromacs/mdlib/nb_verlet.h&quot;</code><br/>
<code>#include &quot;gromacs/mdlib/nbnxn_consts.h&quot;</code><br/>
<code>#include &quot;gromacs/mdlib/nbnxn_pairlist.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="gpu__timing_8h.xhtml">gromacs/timing/gpu_timing.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="nbnxn__gpu_8h.xhtml">gromacs/mdlib/nbnxn_gpu.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="nbnxn__gpu__data__mgmt_8h.xhtml">gromacs/mdlib/nbnxn_gpu_data_mgmt.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/pbcutil/ishift.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="cstringutil_8h.xhtml">gromacs/utility/cstringutil.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="fatalerror_8h.xhtml">gromacs/utility/fatalerror.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="gmxassert_8h.xhtml">gromacs/utility/gmxassert.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="nbnxn__ocl__internal_8h.xhtml">nbnxn_ocl_internal.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="nbnxn__ocl__types_8h.xhtml">nbnxn_ocl_types.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for nbnxn_ocl.cpp:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="nbnxn__ocl_8cpp__incl.svg" width="1846" height="306"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Define OpenCL implementation of <a class="el" href="nbnxn__gpu_8h.xhtml" title="Declare interface for GPU execution for NBNXN module. ">nbnxn_gpu.h</a>. </p>
<dl class="section author"><dt>Author</dt><dd>Anca Hamuraru <a href="#" onclick="location.href='mai'+'lto:'+'anc'+'a@'+'str'+'ea'+'mco'+'mp'+'uti'+'ng'+'.eu'; return false;">anca@<span style="display: none;">.nosp@m.</span>stre<span style="display: none;">.nosp@m.</span>amcom<span style="display: none;">.nosp@m.</span>puti<span style="display: none;">.nosp@m.</span>ng.eu</a> </dd>
<dd>
Teemu Virolainen <a href="#" onclick="location.href='mai'+'lto:'+'tee'+'mu'+'@st'+'re'+'amc'+'om'+'put'+'in'+'g.e'+'u'; return false;">teemu<span style="display: none;">.nosp@m.</span>@str<span style="display: none;">.nosp@m.</span>eamco<span style="display: none;">.nosp@m.</span>mput<span style="display: none;">.nosp@m.</span>ing.e<span style="display: none;">.nosp@m.</span>u</a> </dd>
<dd>
Dimitrios Karkoulis <a href="#" onclick="location.href='mai'+'lto:'+'dim'+'it'+'ris'+'.k'+'ark'+'ou'+'lis'+'@g'+'mai'+'l.'+'com'; return false;">dimit<span style="display: none;">.nosp@m.</span>ris.<span style="display: none;">.nosp@m.</span>karko<span style="display: none;">.nosp@m.</span>ulis<span style="display: none;">.nosp@m.</span>@gmai<span style="display: none;">.nosp@m.</span>l.co<span style="display: none;">.nosp@m.</span>m</a> </dd>
<dd>
Szilárd Páll <a href="#" onclick="location.href='mai'+'lto:'+'pal'+'l.'+'szi'+'la'+'rd@'+'gm'+'ail'+'.c'+'om'; return false;">pall.<span style="display: none;">.nosp@m.</span>szil<span style="display: none;">.nosp@m.</span>ard@g<span style="display: none;">.nosp@m.</span>mail<span style="display: none;">.nosp@m.</span>.com</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:a6b64265b38d21f9fee1fb21b198c5f23"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6b64265b38d21f9fee1fb21b198c5f23"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#a6b64265b38d21f9fee1fb21b198c5f23">DEBUG_RUN_STEP</a>&#160;&#160;&#160;2</td></tr>
<tr class="memdesc:a6b64265b38d21f9fee1fb21b198c5f23"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies which kernel run to debug. <br/></td></tr>
<tr class="separator:a6b64265b38d21f9fee1fb21b198c5f23"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a953dbc2f8803a41ec8d2a0cdaa8fcbdb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a953dbc2f8803a41ec8d2a0cdaa8fcbdb"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#a953dbc2f8803a41ec8d2a0cdaa8fcbdb">validate_global_work_size</a> (size_t *global_work_size, int work_dim, <a class="el" href="structgmx__device__info__t.xhtml">gmx_device_info_t</a> *dinfo)</td></tr>
<tr class="memdesc:a953dbc2f8803a41ec8d2a0cdaa8fcbdb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates the input global work size parameter. <br/></td></tr>
<tr class="separator:a953dbc2f8803a41ec8d2a0cdaa8fcbdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00f7839f831302e0d7a807d183f2c7d5"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a00f7839f831302e0d7a807d183f2c7d5"></a>
static cl_kernel&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#a00f7839f831302e0d7a807d183f2c7d5">select_nbnxn_kernel</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *nb, int eeltype, int evdwtype, bool bDoEne, bool bDoPrune)</td></tr>
<tr class="memdesc:a00f7839f831302e0d7a807d183f2c7d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a pointer to the kernel version to be executed at the current step. OpenCL kernel objects are cached in nb. If the requested kernel is not found in the cache, it will be created and the cache will be updated. <br/></td></tr>
<tr class="separator:a00f7839f831302e0d7a807d183f2c7d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65059da2b1374c91a33f8b0ff74e4e4e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a65059da2b1374c91a33f8b0ff74e4e4e"></a>
static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#a65059da2b1374c91a33f8b0ff74e4e4e">calc_shmem_required</a> (int vdwType, bool bPrefetchLjParam)</td></tr>
<tr class="memdesc:a65059da2b1374c91a33f8b0ff74e4e4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the amount of shared memory required by the OpenCL kernel in use. <br/></td></tr>
<tr class="separator:a65059da2b1374c91a33f8b0ff74e4e4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1071851184ba7c0b5d9f653c2ba1ab9a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#a1071851184ba7c0b5d9f653c2ba1ab9a">fillin_ocl_structures</a> (<a class="el" href="nbnxn__ocl__types_8h.xhtml#a843768e0200ba88ef306abedc4a2dc19">cl_nbparam_t</a> *nbp, <a class="el" href="nbnxn__ocl__types_8h.xhtml#af03d752568b4866a7daf8a769e8d02ad">cl_nbparam_params_t</a> *nbparams_params)</td></tr>
<tr class="memdesc:a1071851184ba7c0b5d9f653c2ba1ab9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes data structures that are going to be sent to the OpenCL device.  <a href="#a1071851184ba7c0b5d9f653c2ba1ab9a">More...</a><br/></td></tr>
<tr class="separator:a1071851184ba7c0b5d9f653c2ba1ab9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b8ad939f39ee05ed0d881e4286ae8d1"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3b8ad939f39ee05ed0d881e4286ae8d1"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#a3b8ad939f39ee05ed0d881e4286ae8d1">wait_ocl_event</a> (cl_event *ocl_event)</td></tr>
<tr class="memdesc:a3b8ad939f39ee05ed0d881e4286ae8d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Waits for the commands associated with the input event to finish. Then it releases the event and sets it to 0. Don't use this function when more than one wait will be issued for the event. <br/></td></tr>
<tr class="separator:a3b8ad939f39ee05ed0d881e4286ae8d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47fb96256cf6780e422163b8ae374f11"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#a47fb96256cf6780e422163b8ae374f11">sync_ocl_event</a> (cl_command_queue stream, cl_event *ocl_event)</td></tr>
<tr class="memdesc:a47fb96256cf6780e422163b8ae374f11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enqueues a wait for event completion.  <a href="#a47fb96256cf6780e422163b8ae374f11">More...</a><br/></td></tr>
<tr class="separator:a47fb96256cf6780e422163b8ae374f11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb424ad7d3bc1b2c8fe6d145702a4771"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#afb424ad7d3bc1b2c8fe6d145702a4771">ocl_event_elapsed_ms</a> (cl_event *ocl_event)</td></tr>
<tr class="memdesc:afb424ad7d3bc1b2c8fe6d145702a4771"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the duration in milliseconds for the command associated with the event.  <a href="#afb424ad7d3bc1b2c8fe6d145702a4771">More...</a><br/></td></tr>
<tr class="separator:afb424ad7d3bc1b2c8fe6d145702a4771"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa37e92795bc867df33b27d5243c3f8cc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#aa37e92795bc867df33b27d5243c3f8cc">nbnxn_gpu_launch_kernel</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *nb, const struct nbnxn_atomdata_t *nbatom, int flags, int iloc)</td></tr>
<tr class="memdesc:aa37e92795bc867df33b27d5243c3f8cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Launch GPU kernel.  <a href="#aa37e92795bc867df33b27d5243c3f8cc">More...</a><br/></td></tr>
<tr class="separator:aa37e92795bc867df33b27d5243c3f8cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94e5e56bd2d0b16dccd9ee6397a6ad09"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a94e5e56bd2d0b16dccd9ee6397a6ad09"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#a94e5e56bd2d0b16dccd9ee6397a6ad09">nbnxn_gpu_launch_cpyback</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *nb, const struct nbnxn_atomdata_t *nbatom, int flags, int aloc)</td></tr>
<tr class="memdesc:a94e5e56bd2d0b16dccd9ee6397a6ad09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Launch asynchronously the download of nonbonded forces from the GPU (and energies/shift forces if required). <br/></td></tr>
<tr class="separator:a94e5e56bd2d0b16dccd9ee6397a6ad09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9e98bf97c2b2212d9ad6e1441ec3b05"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac9e98bf97c2b2212d9ad6e1441ec3b05"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#ac9e98bf97c2b2212d9ad6e1441ec3b05">nbnxn_gpu_wait_for_gpu</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *nb, int flags, int aloc, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *e_lj, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *e_el, rvec *fshift)</td></tr>
<tr class="memdesc:ac9e98bf97c2b2212d9ad6e1441ec3b05"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait for the asynchronously launched nonbonded calculations and data transfers to finish. <br/></td></tr>
<tr class="separator:ac9e98bf97c2b2212d9ad6e1441ec3b05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9a6120b6a1b95d61a49599c35952562"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae9a6120b6a1b95d61a49599c35952562"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#ae9a6120b6a1b95d61a49599c35952562">nbnxn_gpu_pick_ewald_kernel_type</a> (bool bTwinCut)</td></tr>
<tr class="memdesc:ae9a6120b6a1b95d61a49599c35952562"><td class="mdescLeft">&#160;</td><td class="mdescRight">Selects the Ewald kernel type, analytical or tabulated, single or twin cut-off. <br/></td></tr>
<tr class="separator:ae9a6120b6a1b95d61a49599c35952562"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a77a7f405415ff49b13a5777be1804beb"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#a77a7f405415ff49b13a5777be1804beb">nb_kfunc_noener_noprune_ptr</a> [eelOclNR][evdwOclNR]</td></tr>
<tr class="memdesc:a77a7f405415ff49b13a5777be1804beb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Force-only kernel function names.  <a href="#a77a7f405415ff49b13a5777be1804beb">More...</a><br/></td></tr>
<tr class="separator:a77a7f405415ff49b13a5777be1804beb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a616841c4168c4d1e22f77a512e309618"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#a616841c4168c4d1e22f77a512e309618">nb_kfunc_ener_noprune_ptr</a> [eelOclNR][evdwOclNR]</td></tr>
<tr class="memdesc:a616841c4168c4d1e22f77a512e309618"><td class="mdescLeft">&#160;</td><td class="mdescRight">Force + energy kernel function pointers.  <a href="#a616841c4168c4d1e22f77a512e309618">More...</a><br/></td></tr>
<tr class="separator:a616841c4168c4d1e22f77a512e309618"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aceea675d9fe3d1d73a5267a8ab0f29c0"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#aceea675d9fe3d1d73a5267a8ab0f29c0">nb_kfunc_noener_prune_ptr</a> [eelOclNR][evdwOclNR]</td></tr>
<tr class="memdesc:aceea675d9fe3d1d73a5267a8ab0f29c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Force + pruning kernel function pointers.  <a href="#aceea675d9fe3d1d73a5267a8ab0f29c0">More...</a><br/></td></tr>
<tr class="separator:aceea675d9fe3d1d73a5267a8ab0f29c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a071fa2f0e9faba95226a316f0b84a988"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#a071fa2f0e9faba95226a316f0b84a988">nb_kfunc_ener_prune_ptr</a> [eelOclNR][evdwOclNR]</td></tr>
<tr class="memdesc:a071fa2f0e9faba95226a316f0b84a988"><td class="mdescLeft">&#160;</td><td class="mdescRight">Force + energy + pruning kernel function pointers.  <a href="#a071fa2f0e9faba95226a316f0b84a988">More...</a><br/></td></tr>
<tr class="separator:a071fa2f0e9faba95226a316f0b84a988"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:af82c1fe9145625d0e61a3eb21b4ba30d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af82c1fe9145625d0e61a3eb21b4ba30d"></a>
static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#af82c1fe9145625d0e61a3eb21b4ba30d">c_numClPerSupercl</a> = c_nbnxnGpuNumClusterPerSupercluster</td></tr>
<tr class="memdesc:af82c1fe9145625d0e61a3eb21b4ba30d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience constants. <br/></td></tr>
<tr class="separator:af82c1fe9145625d0e61a3eb21b4ba30d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab62974946d29c968946d8d3782d6d445"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab62974946d29c968946d8d3782d6d445"></a>
static const int&#160;</td><td class="memItemRight" valign="bottom"><b>c_clSize</b> = c_nbnxnGpuClusterSize</td></tr>
<tr class="separator:ab62974946d29c968946d8d3782d6d445"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a4c5d44c9f4c4d4290e0b5ac1bf640069"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4c5d44c9f4c4d4290e0b5ac1bf640069"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl_8cpp.xhtml#a4c5d44c9f4c4d4290e0b5ac1bf640069">always_ener</a> = (getenv(&quot;GMX_GPU_ALWAYS_ENER&quot;) != NULL)</td></tr>
<tr class="memdesc:a4c5d44c9f4c4d4290e0b5ac1bf640069"><td class="mdescLeft">&#160;</td><td class="mdescRight">Always/never run the energy/pruning kernels &ndash; only for benchmarking purposes. <br/></td></tr>
<tr class="separator:a4c5d44c9f4c4d4290e0b5ac1bf640069"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6cca6e0a9803222b02a53248796e19d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa6cca6e0a9803222b02a53248796e19d"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><b>never_ener</b> = (getenv(&quot;GMX_GPU_NEVER_ENER&quot;) != NULL)</td></tr>
<tr class="separator:aa6cca6e0a9803222b02a53248796e19d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc978118a8f186528d521db75364ff25"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="acc978118a8f186528d521db75364ff25"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><b>always_prune</b> = (getenv(&quot;GMX_GPU_ALWAYS_PRUNE&quot;) != NULL)</td></tr>
<tr class="separator:acc978118a8f186528d521db75364ff25"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a1071851184ba7c0b5d9f653c2ba1ab9a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void fillin_ocl_structures </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="nbnxn__ocl__types_8h.xhtml#a843768e0200ba88ef306abedc4a2dc19">cl_nbparam_t</a> *&#160;</td>
          <td class="paramname"><em>nbp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="nbnxn__ocl__types_8h.xhtml#af03d752568b4866a7daf8a769e8d02ad">cl_nbparam_params_t</a> *&#160;</td>
          <td class="paramname"><em>nbparams_params</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes data structures that are going to be sent to the OpenCL device. </p>
<p>The device can't use the same data structures as the host for two main reasons:</p>
<ul>
<li>OpenCL restrictions (pointers are not accepted inside data structures)</li>
<li>some host side fields are not needed for the OpenCL kernels. </li>
</ul>

</div>
</div>
<a class="anchor" id="aa37e92795bc867df33b27d5243c3f8cc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void nbnxn_gpu_launch_kernel </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *&#160;</td>
          <td class="paramname"><em>nb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const struct nbnxn_atomdata_t *&#160;</td>
          <td class="paramname"><em>nbatom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iloc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Launch GPU kernel. </p>
<p>Launch asynchronously the nonbonded force calculations.</p>
<p>As we execute nonbonded workload in separate queues, before launching the kernel we need to make sure that he following operations have completed:</p>
<ul>
<li>atomdata allocation and related H2D transfers (every nstlist step);</li>
<li>pair list H2D transfer (every nstlist step);</li>
<li>shift vector H2D transfer (every nstlist step);</li>
<li>force (+shift force and energy) output clearing (every step).</li>
</ul>
<p>These operations are issued in the local queue at the beginning of the step and therefore always complete before the local kernel launch. The non-local kernel is launched after the local on the same device/context, so this is inherently scheduled after the operations in the local stream (including the above "misc_ops"). However, for the sake of having a future-proof implementation, we use the misc_ops_done event to record the point in time when the above operations are finished and synchronize with this event in the non-local stream. </p>

</div>
</div>
<a class="anchor" id="afb424ad7d3bc1b2c8fe6d145702a4771"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double ocl_event_elapsed_ms </td>
          <td>(</td>
          <td class="paramtype">cl_event *&#160;</td>
          <td class="paramname"><em>ocl_event</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the duration in milliseconds for the command associated with the event. </p>
<p>It then releases the event and sets it to 0. Before calling this function, make sure the command has finished either by calling clFinish or clWaitForEvents. The function returns 0.0 if the input event, *ocl_event, is 0. Don't use this function when more than one wait will be issued for the event. </p>

</div>
</div>
<a class="anchor" id="a47fb96256cf6780e422163b8ae374f11"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sync_ocl_event </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_event *&#160;</td>
          <td class="paramname"><em>ocl_event</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enqueues a wait for event completion. </p>
<p>Then it releases the event and sets it to 0. Don't use this function when more than one wait will be issued for the event. Equivalent to Cuda Stream Sync. </p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a class="anchor" id="a616841c4168c4d1e22f77a512e309618"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* nb_kfunc_ener_noprune_ptr[eelOclNR][evdwOclNR]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">=</div>
<div class="line">{</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJ_VF_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJCombGeom_VF_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJCombLB_VF_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJFsw_VF_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJPsw_VF_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJEwCombGeom_VF_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJEwCombLB_VF_opencl&quot;</span>            },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJ_VF_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJCombGeom_VF_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJCombLB_VF_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJFsw_VF_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJPsw_VF_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJEwCombGeom_VF_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJEwCombLB_VF_opencl&quot;</span>             },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJ_VF_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJCombGeom_VF_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJCombLB_VF_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJFsw_VF_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJPsw_VF_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJEwCombGeom_VF_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJEwCombLB_VF_opencl&quot;</span>        },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJ_VF_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJCombGeom_VF_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJCombLB_VF_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJFsw_VF_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJPsw_VF_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJEwCombGeom_VF_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJEwCombLB_VF_opencl&quot;</span> },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJ_VF_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJCombGeom_VF_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJCombLB_VF_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJFsw_VF_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJPsw_VF_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJEwCombGeom_VF_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJEwCombLB_VF_opencl&quot;</span>             },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJ_VF_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJCombGeom_VF_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJCombLB_VF_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJFsw_VF_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJPsw_VF_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJEwCombGeom_VF_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJEwCombLB_VF_opencl&quot;</span>      }</div>
<div class="line">}</div>
</div><!-- fragment -->
<p>Force + energy kernel function pointers. </p>

</div>
</div>
<a class="anchor" id="a071fa2f0e9faba95226a316f0b84a988"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* nb_kfunc_ener_prune_ptr[eelOclNR][evdwOclNR]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">=</div>
<div class="line">{</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJ_VF_prune_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJCombGeom_VF_prune_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJCombLB_VF_prune_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJFsw_VF_prune_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJPsw_VF_prune_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJEwCombGeom_VF_prune_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJEwCombLB_VF_prune_opencl&quot;</span>            },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJ_VF_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJCombGeom_VF_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJCombLB_VF_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJFsw_VF_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJPsw_VF_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJEwCombGeom_VF_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJEwCombLB_VF_prune_opencl&quot;</span>             },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJ_VF_prune_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJCombGeom_VF_prune_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJCombLB_VF_prune_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJFsw_VF_prune_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJPsw_VF_prune_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJEwCombGeom_VF_prune_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJEwCombLB_VF_prune_opencl&quot;</span>        },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJ_VF_prune_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJCombGeom_VF_prune_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJCombLB_VF_prune_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJFsw_VF_prune_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJPsw_VF_prune_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJEwCombGeom_VF_prune_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJEwCombLB_VF_prune_opencl&quot;</span> },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJ_VF_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJCombGeom_VF_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJCombLB_VF_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJFsw_VF_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJPsw_VF_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJEwCombGeom_VF_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJEwCombLB_VF_prune_opencl&quot;</span>             },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJ_VF_prune_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJCombGeom_VF_prune_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJCombLB_VF_prune_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJFsw_VF_prune_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJPsw_VF_prune_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJEwCombGeom_VF_prune_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJEwCombLB_VF_prune_opencl&quot;</span>      }</div>
<div class="line">}</div>
</div><!-- fragment -->
<p>Force + energy + pruning kernel function pointers. </p>

</div>
</div>
<a class="anchor" id="a77a7f405415ff49b13a5777be1804beb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* nb_kfunc_noener_noprune_ptr[eelOclNR][evdwOclNR]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">=</div>
<div class="line">{</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJ_F_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJCombGeom_F_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJCombLB_F_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJFsw_F_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJPsw_F_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJEwCombGeom_F_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJEwCombLB_F_opencl&quot;</span>            },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJ_F_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJCombGeom_F_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJCombLB_F_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJFsw_F_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJPsw_F_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJEwCombGeom_F_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJEwCombLB_F_opencl&quot;</span>             },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJ_F_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJCombGeom_F_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJCombLB_F_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJFsw_F_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJPsw_F_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJEwCombGeom_F_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJEwCombLB_F_opencl&quot;</span>        },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJ_F_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJCombGeom_F_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJCombLB_F_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJFsw_F_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJPsw_F_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJEwCombGeom_F_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJEwCombLB_F_opencl&quot;</span> },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJ_F_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJCombGeom_F_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJCombLB_F_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJFsw_F_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJPsw_F_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJEwCombGeom_F_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJEwCombLB_F_opencl&quot;</span>             },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJ_F_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJCombGeom_F_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJCombLB_F_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJFsw_F_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJPsw_F_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJEwCombGeom_F_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJEwCombLB_F_opencl&quot;</span>      }</div>
<div class="line">}</div>
</div><!-- fragment -->
<p>Force-only kernel function names. </p>

</div>
</div>
<a class="anchor" id="aceea675d9fe3d1d73a5267a8ab0f29c0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* nb_kfunc_noener_prune_ptr[eelOclNR][evdwOclNR]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">=</div>
<div class="line">{</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJ_F_prune_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJCombGeom_F_prune_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJCombLB_F_prune_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJFsw_F_prune_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJPsw_F_prune_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJEwCombGeom_F_prune_opencl&quot;</span>,            <span class="stringliteral">&quot;nbnxn_kernel_ElecCut_VdwLJEwCombLB_F_prune_opencl&quot;</span>             },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJ_F_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJCombGeom_F_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJCombLB_F_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJFsw_F_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJPsw_F_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJEwCombGeom_F_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecRF_VdwLJEwCombLB_F_prune_opencl&quot;</span>              },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJ_F_prune_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJCombGeom_F_prune_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJCombLB_F_prune_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJFsw_F_prune_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJPsw_F_prune_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJEwCombGeom_F_prune_opencl&quot;</span>,        <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTab_VdwLJEwCombLB_F_prune_opencl&quot;</span>         },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJ_F_prune_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJCombGeom_F_prune_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJCombLB_F_prune_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJFsw_F_prune_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJPsw_F_prune_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJEwCombGeom_F_prune_opencl&quot;</span>, <span class="stringliteral">&quot;nbnxn_kernel_ElecEwQSTabTwinCut_VdwLJEwCombLB_F_prune_opencl&quot;</span>  },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJ_F_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJCombGeom_F_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJCombLB_F_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJFsw_F_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJPsw_F_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJEwCombGeom_F_prune_opencl&quot;</span>,             <span class="stringliteral">&quot;nbnxn_kernel_ElecEw_VdwLJEwCombLB_F_prune_opencl&quot;</span>              },</div>
<div class="line">    { <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJ_F_prune_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJCombGeom_F_prune_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJCombLB_F_prune_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJFsw_F_prune_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJPsw_F_prune_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJEwCombGeom_F_prune_opencl&quot;</span>,      <span class="stringliteral">&quot;nbnxn_kernel_ElecEwTwinCut_VdwLJEwCombLB_F_prune_opencl&quot;</span>       }</div>
<div class="line">}</div>
</div><!-- fragment -->
<p>Force + pruning kernel function pointers. </p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:20:35 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
