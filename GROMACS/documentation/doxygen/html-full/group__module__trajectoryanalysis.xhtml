<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: Framework for Trajectory Analysis (trajectoryanalysis)</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a> &#124;
<a href="#dirs">Directories</a> &#124;
<a href="#files">Files</a>  </div>
  <div class="headertitle">
<div class="title">Framework for Trajectory Analysis (trajectoryanalysis)<div class="ingroups"><a class="el" href="group__group__analysismodules.xhtml">Analysis Modules</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for Framework for Trajectory Analysis (trajectoryanalysis):</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<center><table><tr><td><div class="center"><iframe scrolling="no" frameborder="0" src="group__module__trajectoryanalysis.svg" width="723" height="227"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</td></tr></table></center>
</div>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<p>Provides functionality for implementing trajectory analysis modules. </p>
<p>This module implements a framework for implementing flexible trajectory analysis routines. It provides a base class for implementing analysis as reusable modules that can be used from different contexts and can also support per-frame parallelization. It integrally uses functionality from the following modules:</p>
<ul>
<li><a class="el" href="group__module__options.xhtml">Extensible Handling of Options (options)</a></li>
<li><a class="el" href="group__module__analysisdata.xhtml">Parallelizable Handling of Output Data (analysisdata)</a></li>
<li><a class="el" href="group__module__selection.xhtml">Parsing and Evaluation of Analysis Selections (selection)</a></li>
</ul>
<p>The main interface of this module is the <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml" title="Base class for trajectory analysis modules. ">gmx::TrajectoryAnalysisModule</a> class. Analysis modules should derive from this class, and override the necessary virtual methods to provide the actual initialization and analysis routines. Classes <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml" title="Trajectory analysis module configuration object. ">gmx::TrajectoryAnalysisSettings</a> and <a class="el" href="classgmx_1_1TopologyInformation.xhtml" title="Topology information passed to a trajectory analysis module. ">gmx::TopologyInformation</a> (in addition to classes declared in the above-mentioned modules) are used to pass information to and from these methods. <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">gmx::TrajectoryAnalysisModuleData</a> can be used in advanced scenarios where the tool requires custom thread-local data for parallel analysis.</p>
<p>The sequence charts below provides an overview of how the trajectory analysis modules typically interact with other components. The first chart provides an overview of the call sequence of the most important methods in <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml" title="Base class for trajectory analysis modules. ">gmx::TrajectoryAnalysisModule</a>. There is a runner, which is responsible for doing the work that is shared between all trajectory analysis (such as reading the trajectory and processing selections). The runner then calls different methods in the analysis module at appropriate points to perform the module-specific tasks. The analysis module is responsible for creating and managing <a class="el" href="classgmx_1_1AnalysisData.xhtml" title="Parallelizable data container for raw data. ">gmx::AnalysisData</a> objects, and the chart shows the most important interactions with this module as well. However, the runner takes responsibility of calling <a class="el" href="classgmx_1_1AnalysisData.xhtml#a54e98fd211473c7cfe750e2b49517d96" title="Performs in-order sequential processing for the next frame. ">gmx::AnalysisData::finishFrameSerial()</a>. Interactions with options (for command-line option processing) and selections is not shown for brevity: see <a class="el" href="group__module__options.xhtml">Extensible Handling of Options (options)</a> for an overview of how options work, and the second chart for a more detailed view of how selections are accessed from an analysis module. </p>
<div align="center">
<img src="msc_inline_mscgraph_4.png" alt="msc_inline_mscgraph_4" border="0" usemap="#msc_inline_mscgraph_4.map"/>
<map name="msc_inline_mscgraph_4.map" id="msc_inline_mscgraph_4.map"><area href="classgmx_1_1TrajectoryAnalysisModule.xhtml" shape="rect" coords="277,7,323,20" alt=""/>
<area href="group__module__analysisdata.xhtml" shape="rect" coords="458,7,542,20" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#aba5990675e980bf746ecd224f814d549" shape="rect" coords="161,90,239,103" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#afa3457cc922f1d16c4c19cec740e0442" shape="rect" coords="145,154,256,167" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#ae5ae73770caad4ff1808c2ca655dad0e" shape="rect" coords="159,218,242,231" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a419a3d7f950f0731a20d6a7fafaa6d05" shape="rect" coords="135,314,265,327" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" shape="rect" coords="146,397,255,410" alt=""/>
<area href="classgmx_1_1AnalysisDataHandle.xhtml" shape="rect" coords="372,429,428,442" alt=""/>
<area href="classgmx_1_1AnalysisDataHandle.xhtml#a8120b1806873a1d0c8a175c5fd46cc97" shape="rect" coords="358,461,443,474" alt=""/>
<area href="classgmx_1_1AnalysisData.xhtml#a54e98fd211473c7cfe750e2b49517d96" shape="rect" coords="239,493,362,506" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" shape="rect" coords="146,557,255,570" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a3b9d902a262ba124be565eca5b714e4b" shape="rect" coords="151,627,249,640" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a80869a7764274db8e314bf0a1c5858f6" shape="rect" coords="158,691,242,704" alt=""/>
</map>
</div>
<p>The second chart below shows the interaction with selections and options with focus on selection options. The <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml" title="Base class for trajectory analysis modules. ">gmx::TrajectoryAnalysisModule</a> object creates one or more <a class="el" href="classgmx_1_1Selection.xhtml" title="Provides access to a single selection. ">gmx::Selection</a> variables, and uses <a class="el" href="classgmx_1_1SelectionOption.xhtml" title="Specifies an option that provides selection(s). ">gmx::SelectionOption</a> to indicate them as the destination for selections. This happens in <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#aba5990675e980bf746ecd224f814d549" title="Initializes options understood by the module. ">gmx::TrajectoryAnalysisModule::initOptions()</a>. After the options have been parsed (includes parsing any options present on the command-line or read from files, but not those provided interactively), <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#afa3457cc922f1d16c4c19cec740e0442" title="Called after all option values have been set. ">gmx::TrajectoryAnalysisModule::optionsFinished()</a> can adjust the selections using <a class="el" href="classgmx_1_1SelectionOptionInfo.xhtml" title="Wrapper class for accessing and modifying selection option information. ">gmx::SelectionOptionInfo</a>. This is done like this to allow the analysis module to influence the interactive prompt of selections based on what command-line options were given. After optionsFinished() returns, the interactive selection prompt is presented if necessary. After this point, all access to selections from the analysis module is through the <a class="el" href="classgmx_1_1Selection.xhtml" title="Provides access to a single selection. ">gmx::Selection</a> variables: the runner is responsible for calling methods in the selection library, and these methods update the content referenced by the <a class="el" href="classgmx_1_1Selection.xhtml" title="Provides access to a single selection. ">gmx::Selection</a> variables. See documentation of <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml" title="Base class for trajectory analysis modules. ">gmx::TrajectoryAnalysisModule</a> for details of what the selections contain at each point. </p>
<div align="center">
<img src="msc_inline_mscgraph_5.png" alt="msc_inline_mscgraph_5" border="0" usemap="#msc_inline_mscgraph_5.map"/>
<map name="msc_inline_mscgraph_5.map" id="msc_inline_mscgraph_5.map"><area href="group__module__options.xhtml" shape="rect" coords="200,7,250,20" alt=""/>
<area href="group__module__selection.xhtml" shape="rect" coords="343,7,407,20" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml" shape="rect" coords="502,7,548,20" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#aba5990675e980bf746ecd224f814d549" shape="rect" coords="261,58,339,71" alt=""/>
<area href="classgmx_1_1SelectionOption.xhtml" shape="rect" coords="286,90,465,103" alt=""/>
<area href="classgmx_1_1Options.xhtml#a7add46682b6c65d3de585e7942df7807" shape="rect" coords="288,122,462,135" alt=""/>
<area href="classgmx_1_1Selection.xhtml" shape="rect" coords="361,269,539,282" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#afa3457cc922f1d16c4c19cec740e0442" shape="rect" coords="245,333,356,346" alt=""/>
<area href="classgmx_1_1SelectionOptionInfo.xhtml" shape="rect" coords="374,365,527,378" alt=""/>
<area href="classgmx_1_1Selection.xhtml" shape="rect" coords="361,461,539,474" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#ae5ae73770caad4ff1808c2ca655dad0e" shape="rect" coords="259,557,342,570" alt=""/>
</map>
</div>
<p>The final chart shows the flow within the frame loop in the case of parallel (threaded) execution and the interaction with the <a class="el" href="group__module__analysisdata.xhtml">Parallelizable Handling of Output Data (analysisdata)</a> module in this case. Although parallelization has not yet been implemented, it has influenced the design and needs to be understood if one wants to write modules that can take advantage of the parallelization once it gets implemented. The parallelization takes part over frames: analyzing a single frame is one unit of work. When the frame loop is started, <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a6082fcf69bdc3b0a1945ece31437f195" title="Starts the analysis of frames. ">gmx::TrajectoryAnalysisModule::startFrames()</a> is called for each thread, and initializes an object that contains thread-local data needed during the analysis. This includes selection information, <a class="el" href="classgmx_1_1AnalysisDataHandle.xhtml" title="Handle for inserting data into AnalysisData. ">gmx::AnalysisDataHandle</a> objects, and possibly other module-specific variables. Then, the runner reads the frames in sequence and passes the work into the different threads, together with the appropriate thread-local data object. The <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" title="Analyzes a single frame. ">gmx::TrajectoryAnalysisModule::analyzeFrame()</a> calls are only allowed to modify the thread-local data object; everything else is read-only. For any output, they pass the information to <a class="el" href="classgmx_1_1AnalysisData.xhtml" title="Parallelizable data container for raw data. ">gmx::AnalysisData</a>, which together with the runner takes care of ordering the data from different frames such that it gets processed in the right order. When all frames are analyzed, <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a9d14bf1683086d3fafdb11e23e003de4" title="Finishes the analysis of frames. ">gmx::TrajectoryAnalysisModule::finishFrames()</a> is called for each thread-local data object to destroy them and to accumulate possible results from them into the main <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml" title="Base class for trajectory analysis modules. ">gmx::TrajectoryAnalysisModule</a> object. Note that in the diagram, some part of the work attributed for the runner (e.g., evaluating selections) will actually be carried out in the analysis threads before <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" title="Analyzes a single frame. ">gmx::TrajectoryAnalysisModule::analyzeFrame()</a> gets called. </p>
<div align="center">
<img src="msc_inline_mscgraph_6.png" alt="msc_inline_mscgraph_6" border="0" usemap="#msc_inline_mscgraph_6.map"/>
<map name="msc_inline_mscgraph_6.map" id="msc_inline_mscgraph_6.map"><area href="group__module__analysisdata.xhtml" shape="rect" coords="498,20,582,33" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml" shape="rect" coords="175,46,426,59" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a6082fcf69bdc3b0a1945ece31437f195" shape="rect" coords="137,109,224,122" alt=""/>
<area href="classgmx_1_1AnalysisData.xhtml#a1db0cb22f56abd7d612dc59992ce3486" shape="rect" coords="386,141,455,154" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a6082fcf69bdc3b0a1945ece31437f195" shape="rect" coords="197,205,284,218" alt=""/>
<area href="classgmx_1_1AnalysisData.xhtml#a1db0cb22f56abd7d612dc59992ce3486" shape="rect" coords="446,237,515,250" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" shape="rect" coords="99,352,261,365" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" shape="rect" coords="159,416,321,429" alt=""/>
<area href="classgmx_1_1AnalysisDataHandle.xhtml" shape="rect" coords="392,448,448,461" alt=""/>
<area href="classgmx_1_1AnalysisDataHandle.xhtml" shape="rect" coords="452,480,508,493" alt=""/>
<area href="classgmx_1_1AnalysisDataHandle.xhtml#a8120b1806873a1d0c8a175c5fd46cc97" shape="rect" coords="434,512,527,525" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212" shape="rect" coords="186,608,295,621" alt=""/>
<area href="classgmx_1_1AnalysisDataHandle.xhtml#a8120b1806873a1d0c8a175c5fd46cc97" shape="rect" coords="374,640,467,653" alt=""/>
<area href="classgmx_1_1AnalysisData.xhtml#a54e98fd211473c7cfe750e2b49517d96" shape="rect" coords="207,704,393,717" alt=""/>
<area href="classgmx_1_1AnalysisData.xhtml#a54e98fd211473c7cfe750e2b49517d96" shape="rect" coords="207,736,393,749" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a9d14bf1683086d3fafdb11e23e003de4" shape="rect" coords="112,787,249,800" alt=""/>
<area href="classgmx_1_1AnalysisData.xhtml#a0187a7640e5af29dd67a7f7064b16bf4" shape="rect" coords="383,819,457,832" alt=""/>
<area href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a9d14bf1683086d3fafdb11e23e003de4" shape="rect" coords="172,915,309,928" alt=""/>
<area href="classgmx_1_1AnalysisData.xhtml#a0187a7640e5af29dd67a7f7064b16bf4" shape="rect" coords="443,947,517,960" alt=""/>
</map>
</div>
<p>In addition to the framework for defining analysis modules, this module also provides <a class="el" href="classgmx_1_1TrajectoryAnalysisCommandLineRunner.xhtml" title="Runner for command-line trajectory analysis tools. ">gmx::TrajectoryAnalysisCommandLineRunner</a>, which implements a command-line program that runs a certain analysis module.</p>
<p>Internally, the module also defines a set of trajectory analysis modules that can currently be accessed only through <a class="el" href="group__module__trajectoryanalysis.xhtml#ga7a18c2c956e97306dcac66b006c34435" title="Registers all trajectory analysis command-line modules. ">gmx::registerTrajectoryAnalysisModules</a>.</p>
<p>For an example of how to implement an analysis tool using the framework, see <a class="el" href="template_8cpp-example.xhtml">template.cpp</a>.</p>
<dl class="section author"><dt>Author</dt><dd>Teemu Murtola <a href="#" onclick="location.href='mai'+'lto:'+'tee'+'mu'+'.mu'+'rt'+'ola'+'@g'+'mai'+'l.'+'com'; return false;">teemu<span style="display: none;">.nosp@m.</span>.mur<span style="display: none;">.nosp@m.</span>tola@<span style="display: none;">.nosp@m.</span>gmai<span style="display: none;">.nosp@m.</span>l.com</a> </dd></dl>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule_1_1Impl.xhtml">gmx::TrajectoryAnalysisModule::Impl</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Private implementation class for <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml" title="Base class for trajectory analysis modules. ">TrajectoryAnalysisModule</a>.  <a href="classgmx_1_1TrajectoryAnalysisModule_1_1Impl.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1anonymous__namespace_02analysismodule_8cpp_03_1_1TrajectoryAnalysisModuleDataBasic.xhtml">gmx::anonymous_namespace{analysismodule.cpp}::TrajectoryAnalysisModuleDataBasic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic thread-local trajectory analysis data storage class.  <a href="classgmx_1_1anonymous__namespace_02analysismodule_8cpp_03_1_1TrajectoryAnalysisModuleDataBasic.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml">gmx::TrajectoryAnalysisModuleData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for thread-local data storage during trajectory analysis.  <a href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml">gmx::TrajectoryAnalysisModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for trajectory analysis modules.  <a href="classgmx_1_1TrajectoryAnalysisModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">gmx::TrajectoryAnalysisSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Trajectory analysis module configuration object.  <a href="classgmx_1_1TrajectoryAnalysisSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TopologyInformation.xhtml">gmx::TopologyInformation</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Topology information passed to a trajectory analysis module.  <a href="classgmx_1_1TopologyInformation.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisCommandLineRunner.xhtml">gmx::TrajectoryAnalysisCommandLineRunner</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Runner for command-line trajectory analysis tools.  <a href="classgmx_1_1TrajectoryAnalysisCommandLineRunner.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1analysismodules_1_1anonymous__namespace_02angle_8cpp_03_1_1AnglePositionIterator.xhtml">gmx::analysismodules::anonymous_namespace{angle.cpp}::AnglePositionIterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper to encapsulate logic for looping over input selections.  <a href="classgmx_1_1analysismodules_1_1anonymous__namespace_02angle_8cpp_03_1_1AnglePositionIterator.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1analysismodules_1_1anonymous__namespace_02freevolume_8cpp_03_1_1FreeVolume.xhtml">gmx::analysismodules::anonymous_namespace{freevolume.cpp}::FreeVolume</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class used to compute free volume in a simulations box.  <a href="classgmx_1_1analysismodules_1_1anonymous__namespace_02freevolume_8cpp_03_1_1FreeVolume.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1analysismodules_1_1anonymous__namespace_02pairdist_8cpp_03_1_1PairDistance.xhtml">gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements <code>gmx pairdist</code> trajectory analysis module.  <a href="classgmx_1_1analysismodules_1_1anonymous__namespace_02pairdist_8cpp_03_1_1PairDistance.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1analysismodules_1_1anonymous__namespace_02pairdist_8cpp_03_1_1PairDistanceModuleData.xhtml">gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistanceModuleData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Temporary memory for use within a single-frame calculation.  <a href="classgmx_1_1analysismodules_1_1anonymous__namespace_02pairdist_8cpp_03_1_1PairDistanceModuleData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1analysismodules_1_1anonymous__namespace_02rdf_8cpp_03_1_1Rdf.xhtml">gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements <code>gmx rdf</code> trajectory analysis module.  <a href="classgmx_1_1analysismodules_1_1anonymous__namespace_02rdf_8cpp_03_1_1Rdf.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1analysismodules_1_1anonymous__namespace_02rdf_8cpp_03_1_1RdfModuleData.xhtml">gmx::analysismodules::anonymous_namespace{rdf.cpp}::RdfModuleData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Temporary memory for use within a single-frame calculation.  <a href="classgmx_1_1analysismodules_1_1anonymous__namespace_02rdf_8cpp_03_1_1RdfModuleData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgmx_1_1analysismodules_1_1anonymous__namespace_02sasa_8cpp_03_1_1t__conect.xhtml">gmx::analysismodules::anonymous_namespace{sasa.cpp}::t_conect</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tracks information on two nearest neighbors of a single surface dot.  <a href="structgmx_1_1analysismodules_1_1anonymous__namespace_02sasa_8cpp_03_1_1t__conect.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1analysismodules_1_1anonymous__namespace_02sasa_8cpp_03_1_1Sasa.xhtml">gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements <code>gmx sas</code> trajectory analysis module.  <a href="classgmx_1_1analysismodules_1_1anonymous__namespace_02sasa_8cpp_03_1_1Sasa.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1analysismodules_1_1anonymous__namespace_02sasa_8cpp_03_1_1SasaModuleData.xhtml">gmx::analysismodules::anonymous_namespace{sasa.cpp}::SasaModuleData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Temporary memory for use within a single-frame calculation.  <a href="classgmx_1_1analysismodules_1_1anonymous__namespace_02sasa_8cpp_03_1_1SasaModuleData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SurfaceAreaCalculator.xhtml">gmx::SurfaceAreaCalculator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes surface areas for a group of atoms/spheres.  <a href="classgmx_1_1SurfaceAreaCalculator.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TrajectoryAnalysisRunnerCommon.xhtml">gmx::TrajectoryAnalysisRunnerCommon</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements common trajectory analysis runner functionality.  <a href="classgmx_1_1TrajectoryAnalysisRunnerCommon.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AbstractTrajectoryAnalysisModuleTestFixture.xhtml">gmx::test::AbstractTrajectoryAnalysisModuleTestFixture</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test fixture for trajectory analysis modules.  <a href="classgmx_1_1test_1_1AbstractTrajectoryAnalysisModuleTestFixture.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TrajectoryAnalysisModuleTestFixture.xhtml">gmx::test::TrajectoryAnalysisModuleTestFixture&lt; ModuleInfo &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test fixture for a trajectory analysis module.  <a href="classgmx_1_1test_1_1TrajectoryAnalysisModuleTestFixture.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:ga11fef88cc73cbb7d6a1fe22fe45b03f1"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga11fef88cc73cbb7d6a1fe22fe45b03f1">gmx::analysismodules::anonymous_namespace{pairdist.cpp}::DistanceType</a> { <b>eDistanceType_Min</b>, 
<b>eDistanceType_Max</b>
 }</td></tr>
<tr class="memdesc:ga11fef88cc73cbb7d6a1fe22fe45b03f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enum value to store the selected value for <code>-type</code>. <br/></td></tr>
<tr class="separator:ga11fef88cc73cbb7d6a1fe22fe45b03f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa41045bded424843f2a238b46773b431"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#gaa41045bded424843f2a238b46773b431">gmx::analysismodules::anonymous_namespace{pairdist.cpp}::GroupType</a> { <b>eGroupType_All</b>, 
<b>eGroupType_Residue</b>, 
<b>eGroupType_Molecule</b>, 
<b>eGroupType_None</b>
 }</td></tr>
<tr class="memdesc:gaa41045bded424843f2a238b46773b431"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enum value to store the selected value for <code>-refgrouping</code>/<code>-selgrouping</code>. <br/></td></tr>
<tr class="separator:gaa41045bded424843f2a238b46773b431"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga63420a120ba42af158e9af58e26baa13"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga63420a120ba42af158e9af58e26baa13">gmx::analysismodules::anonymous_namespace{rdf.cpp}::Normalization</a> { <b>Normalization_Rdf</b>, 
<b>Normalization_NumberDensity</b>, 
<b>Normalization_None</b>
 }</td></tr>
<tr class="memdesc:ga63420a120ba42af158e9af58e26baa13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normalization for the computed distribution. <br/></td></tr>
<tr class="separator:ga63420a120ba42af158e9af58e26baa13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga795e07fe0102fcc7c7a822f6699c697f"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga795e07fe0102fcc7c7a822f6699c697f">gmx::analysismodules::anonymous_namespace{rdf.cpp}::SurfaceType</a> { <b>SurfaceType_None</b>, 
<b>SurfaceType_Molecule</b>, 
<b>SurfaceType_Residue</b>
 }</td></tr>
<tr class="memdesc:ga795e07fe0102fcc7c7a822f6699c697f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether to compute RDF wrt. surface of the reference group. <br/></td></tr>
<tr class="separator:ga795e07fe0102fcc7c7a822f6699c697f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga1f6b2a660c27da40d560f641dc0a7727"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga1f6b2a660c27da40d560f641dc0a7727"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga1f6b2a660c27da40d560f641dc0a7727">gmx::analysismodules::anonymous_namespace{pairdist.cpp}::initSelectionGroups</a> (Selection *sel, t_topology *top, int type)</td></tr>
<tr class="memdesc:ga1f6b2a660c27da40d560f641dc0a7727"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to initialize the grouping for a selection. <br/></td></tr>
<tr class="separator:ga1f6b2a660c27da40d560f641dc0a7727"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaeebaa150a0076e82c2a8c53d52539d6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#gaaeebaa150a0076e82c2a8c53d52539d6">gmx::analysismodules::anonymous_namespace{sasa.cpp}::add_rec</a> (t_conect c[], int i, int j, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> d2)</td></tr>
<tr class="memdesc:gaaeebaa150a0076e82c2a8c53d52539d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates nearest neighbor information for a surface dot.  <a href="#gaaeebaa150a0076e82c2a8c53d52539d6">More...</a><br/></td></tr>
<tr class="separator:gaaeebaa150a0076e82c2a8c53d52539d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8aa66160ab0c7c1eba818d954edbdd0a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga8aa66160ab0c7c1eba818d954edbdd0a">gmx::analysismodules::anonymous_namespace{sasa.cpp}::do_conect</a> (const char *fn, int n, rvec x[])</td></tr>
<tr class="memdesc:ga8aa66160ab0c7c1eba818d954edbdd0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds CONECT records for surface dots.  <a href="#ga8aa66160ab0c7c1eba818d954edbdd0a">More...</a><br/></td></tr>
<tr class="separator:ga8aa66160ab0c7c1eba818d954edbdd0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac151233f8208bd55025d87e8d902ca3d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gac151233f8208bd55025d87e8d902ca3d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#gac151233f8208bd55025d87e8d902ca3d">gmx::analysismodules::anonymous_namespace{sasa.cpp}::connolly_plot</a> (const char *fn, int ndots, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> dots[], rvec x[], t_atoms *atoms, t_symtab *symtab, int ePBC, const matrix box, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bIncludeSolute)</td></tr>
<tr class="memdesc:gac151233f8208bd55025d87e8d902ca3d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Plots the surface into a PDB file, optionally including the original atoms. <br/></td></tr>
<tr class="separator:gac151233f8208bd55025d87e8d902ca3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4530988451bc112680ff52960d0b7e63"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga4530988451bc112680ff52960d0b7e63">gmx::analysismodules::anonymous_namespace{sasa.cpp}::computeAreas</a> (const Selection &amp;surfaceSel, const Selection &amp;sel, const std::vector&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; &amp;atomAreas, const std::vector&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; &amp;dgsFactor, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *totalAreaOut, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *dgsolvOut, AnalysisDataHandle atomAreaHandle, AnalysisDataHandle resAreaHandle, std::vector&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; *resAreaWork)</td></tr>
<tr class="memdesc:ga4530988451bc112680ff52960d0b7e63"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper method to compute the areas for a single selection.  <a href="#ga4530988451bc112680ff52960d0b7e63">More...</a><br/></td></tr>
<tr class="separator:ga4530988451bc112680ff52960d0b7e63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga05cb6818f484e7853b6ec70cdc967c06"><td class="memTemplParams" colspan="2">template&lt;class ModuleInfo &gt; </td></tr>
<tr class="memitem:ga05cb6818f484e7853b6ec70cdc967c06"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga05cb6818f484e7853b6ec70cdc967c06">gmx::anonymous_namespace{modules.cpp}::registerModule</a> (CommandLineModuleManager *manager, CommandLineModuleGroup group)</td></tr>
<tr class="memdesc:ga05cb6818f484e7853b6ec70cdc967c06"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience method for registering a command-line module for trajectory analysis.  <a href="#ga05cb6818f484e7853b6ec70cdc967c06">More...</a><br/></td></tr>
<tr class="separator:ga05cb6818f484e7853b6ec70cdc967c06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7a18c2c956e97306dcac66b006c34435"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga7a18c2c956e97306dcac66b006c34435">gmx::registerTrajectoryAnalysisModules</a> (CommandLineModuleManager *manager)</td></tr>
<tr class="memdesc:ga7a18c2c956e97306dcac66b006c34435"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registers all trajectory analysis command-line modules.  <a href="#ga7a18c2c956e97306dcac66b006c34435">More...</a><br/></td></tr>
<tr class="separator:ga7a18c2c956e97306dcac66b006c34435"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad8c0ee00a3d160339a967bdc6b3391bc"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#gad8c0ee00a3d160339a967bdc6b3391bc">gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::initOptions</a> (IOptionsContainer *options, TrajectoryAnalysisSettings *settings)</td></tr>
<tr class="memdesc:gad8c0ee00a3d160339a967bdc6b3391bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes options understood by the module.  <a href="#gad8c0ee00a3d160339a967bdc6b3391bc">More...</a><br/></td></tr>
<tr class="separator:gad8c0ee00a3d160339a967bdc6b3391bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7ddd9d3c140a117c13024917328f511f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga7ddd9d3c140a117c13024917328f511f">gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::initAnalysis</a> (const TrajectoryAnalysisSettings &amp;settings, const TopologyInformation &amp;top)</td></tr>
<tr class="memdesc:ga7ddd9d3c140a117c13024917328f511f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the analysis.  <a href="#ga7ddd9d3c140a117c13024917328f511f">More...</a><br/></td></tr>
<tr class="separator:ga7ddd9d3c140a117c13024917328f511f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga19f58b765ef288bd67d36a86daeb492a"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
TrajectoryAnalysisModuleDataPointer&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga19f58b765ef288bd67d36a86daeb492a">gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::startFrames</a> (const AnalysisDataParallelOptions &amp;opt, const SelectionCollection &amp;selections)</td></tr>
<tr class="memdesc:ga19f58b765ef288bd67d36a86daeb492a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Starts the analysis of frames.  <a href="#ga19f58b765ef288bd67d36a86daeb492a">More...</a><br/></td></tr>
<tr class="separator:ga19f58b765ef288bd67d36a86daeb492a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9097c3a860a20805ea623d34bc21aeb6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga9097c3a860a20805ea623d34bc21aeb6">gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::analyzeFrame</a> (int frnr, const t_trxframe &amp;fr, <a class="el" href="structt__pbc.xhtml">t_pbc</a> *pbc, TrajectoryAnalysisModuleData *pdata)</td></tr>
<tr class="memdesc:ga9097c3a860a20805ea623d34bc21aeb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Analyzes a single frame.  <a href="#ga9097c3a860a20805ea623d34bc21aeb6">More...</a><br/></td></tr>
<tr class="separator:ga9097c3a860a20805ea623d34bc21aeb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga90bf8eb2b9451a9ccd5246ebbd826996"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga90bf8eb2b9451a9ccd5246ebbd826996">gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::finishAnalysis</a> (int nframes)</td></tr>
<tr class="memdesc:ga90bf8eb2b9451a9ccd5246ebbd826996"><td class="mdescLeft">&#160;</td><td class="mdescRight">Postprocesses data after frames have been read.  <a href="#ga90bf8eb2b9451a9ccd5246ebbd826996">More...</a><br/></td></tr>
<tr class="separator:ga90bf8eb2b9451a9ccd5246ebbd826996"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga74eddf616882ee7fcfe9e5698dfa95c0"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga74eddf616882ee7fcfe9e5698dfa95c0">gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::writeOutput</a> ()</td></tr>
<tr class="memdesc:ga74eddf616882ee7fcfe9e5698dfa95c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes output into files and/or standard output/error.  <a href="#ga74eddf616882ee7fcfe9e5698dfa95c0">More...</a><br/></td></tr>
<tr class="separator:ga74eddf616882ee7fcfe9e5698dfa95c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga58fe513cbf09acfb3a07e613cebacc35"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga58fe513cbf09acfb3a07e613cebacc35">gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::initOptions</a> (IOptionsContainer *options, TrajectoryAnalysisSettings *settings)</td></tr>
<tr class="memdesc:ga58fe513cbf09acfb3a07e613cebacc35"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes options understood by the module.  <a href="#ga58fe513cbf09acfb3a07e613cebacc35">More...</a><br/></td></tr>
<tr class="separator:ga58fe513cbf09acfb3a07e613cebacc35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac634f53069bc0de47c0656b16f0e8304"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#gac634f53069bc0de47c0656b16f0e8304">gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::optionsFinished</a> (TrajectoryAnalysisSettings *settings)</td></tr>
<tr class="memdesc:gac634f53069bc0de47c0656b16f0e8304"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called after all option values have been set.  <a href="#gac634f53069bc0de47c0656b16f0e8304">More...</a><br/></td></tr>
<tr class="separator:gac634f53069bc0de47c0656b16f0e8304"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga68715aa4000c519a0c1f878352be3639"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga68715aa4000c519a0c1f878352be3639">gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::initAnalysis</a> (const TrajectoryAnalysisSettings &amp;settings, const TopologyInformation &amp;top)</td></tr>
<tr class="memdesc:ga68715aa4000c519a0c1f878352be3639"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the analysis.  <a href="#ga68715aa4000c519a0c1f878352be3639">More...</a><br/></td></tr>
<tr class="separator:ga68715aa4000c519a0c1f878352be3639"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga530786214d4998c33eb464e2b19a64bb"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga530786214d4998c33eb464e2b19a64bb">gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::initAfterFirstFrame</a> (const TrajectoryAnalysisSettings &amp;settings, const t_trxframe &amp;fr)</td></tr>
<tr class="memdesc:ga530786214d4998c33eb464e2b19a64bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs additional initialization after reading the first frame.  <a href="#ga530786214d4998c33eb464e2b19a64bb">More...</a><br/></td></tr>
<tr class="separator:ga530786214d4998c33eb464e2b19a64bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6f642652868d498ad78d81054c8aa4c5"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
TrajectoryAnalysisModuleDataPointer&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga6f642652868d498ad78d81054c8aa4c5">gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::startFrames</a> (const AnalysisDataParallelOptions &amp;opt, const SelectionCollection &amp;selections)</td></tr>
<tr class="memdesc:ga6f642652868d498ad78d81054c8aa4c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Starts the analysis of frames.  <a href="#ga6f642652868d498ad78d81054c8aa4c5">More...</a><br/></td></tr>
<tr class="separator:ga6f642652868d498ad78d81054c8aa4c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5334f9e6a192b41fcb597925de850920"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga5334f9e6a192b41fcb597925de850920">gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::analyzeFrame</a> (int frnr, const t_trxframe &amp;fr, <a class="el" href="structt__pbc.xhtml">t_pbc</a> *pbc, TrajectoryAnalysisModuleData *pdata)</td></tr>
<tr class="memdesc:ga5334f9e6a192b41fcb597925de850920"><td class="mdescLeft">&#160;</td><td class="mdescRight">Analyzes a single frame.  <a href="#ga5334f9e6a192b41fcb597925de850920">More...</a><br/></td></tr>
<tr class="separator:ga5334f9e6a192b41fcb597925de850920"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga98f58d0b39eb76e41afcf6d718288179"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga98f58d0b39eb76e41afcf6d718288179">gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::finishAnalysis</a> (int nframes)</td></tr>
<tr class="memdesc:ga98f58d0b39eb76e41afcf6d718288179"><td class="mdescLeft">&#160;</td><td class="mdescRight">Postprocesses data after frames have been read.  <a href="#ga98f58d0b39eb76e41afcf6d718288179">More...</a><br/></td></tr>
<tr class="separator:ga98f58d0b39eb76e41afcf6d718288179"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab2f89d7a6d2caea0c449ed36fa6bb533"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#gab2f89d7a6d2caea0c449ed36fa6bb533">gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::writeOutput</a> ()</td></tr>
<tr class="memdesc:gab2f89d7a6d2caea0c449ed36fa6bb533"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes output into files and/or standard output/error.  <a href="#gab2f89d7a6d2caea0c449ed36fa6bb533">More...</a><br/></td></tr>
<tr class="separator:gab2f89d7a6d2caea0c449ed36fa6bb533"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga34c4a69e301a4a6e720cdb4c2eb6178e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga34c4a69e301a4a6e720cdb4c2eb6178e">gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::initOptions</a> (IOptionsContainer *options, TrajectoryAnalysisSettings *settings)</td></tr>
<tr class="memdesc:ga34c4a69e301a4a6e720cdb4c2eb6178e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes options understood by the module.  <a href="#ga34c4a69e301a4a6e720cdb4c2eb6178e">More...</a><br/></td></tr>
<tr class="separator:ga34c4a69e301a4a6e720cdb4c2eb6178e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7917b635ab1e7389ab733f03162df3ae"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga7917b635ab1e7389ab733f03162df3ae">gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::initAnalysis</a> (const TrajectoryAnalysisSettings &amp;settings, const TopologyInformation &amp;top)</td></tr>
<tr class="memdesc:ga7917b635ab1e7389ab733f03162df3ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the analysis.  <a href="#ga7917b635ab1e7389ab733f03162df3ae">More...</a><br/></td></tr>
<tr class="separator:ga7917b635ab1e7389ab733f03162df3ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaef2b22753bc218ea44b7f92b89e9f8af"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
TrajectoryAnalysisModuleDataPointer&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#gaef2b22753bc218ea44b7f92b89e9f8af">gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::startFrames</a> (const AnalysisDataParallelOptions &amp;opt, const SelectionCollection &amp;selections)</td></tr>
<tr class="memdesc:gaef2b22753bc218ea44b7f92b89e9f8af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Starts the analysis of frames.  <a href="#gaef2b22753bc218ea44b7f92b89e9f8af">More...</a><br/></td></tr>
<tr class="separator:gaef2b22753bc218ea44b7f92b89e9f8af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf1c894303aee5cf5fb37b599e4e03dd0"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#gaf1c894303aee5cf5fb37b599e4e03dd0">gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::analyzeFrame</a> (int frnr, const t_trxframe &amp;fr, <a class="el" href="structt__pbc.xhtml">t_pbc</a> *pbc, TrajectoryAnalysisModuleData *pdata)</td></tr>
<tr class="memdesc:gaf1c894303aee5cf5fb37b599e4e03dd0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Analyzes a single frame.  <a href="#gaf1c894303aee5cf5fb37b599e4e03dd0">More...</a><br/></td></tr>
<tr class="separator:gaf1c894303aee5cf5fb37b599e4e03dd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae58a22fc3e323131e5a606a0aa7792cb"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#gae58a22fc3e323131e5a606a0aa7792cb">gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::finishAnalysis</a> (int nframes)</td></tr>
<tr class="memdesc:gae58a22fc3e323131e5a606a0aa7792cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Postprocesses data after frames have been read.  <a href="#gae58a22fc3e323131e5a606a0aa7792cb">More...</a><br/></td></tr>
<tr class="separator:gae58a22fc3e323131e5a606a0aa7792cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga57b0ca1ca5a2372184f451654e2354c8"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#ga57b0ca1ca5a2372184f451654e2354c8">gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::writeOutput</a> ()</td></tr>
<tr class="memdesc:ga57b0ca1ca5a2372184f451654e2354c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes output into files and/or standard output/error.  <a href="#ga57b0ca1ca5a2372184f451654e2354c8">More...</a><br/></td></tr>
<tr class="separator:ga57b0ca1ca5a2372184f451654e2354c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:gaa38ce86708e6c1c159ea584468448abb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaa38ce86708e6c1c159ea584468448abb"></a>
const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#gaa38ce86708e6c1c159ea584468448abb">gmx::analysismodules::anonymous_namespace{pairdist.cpp}::c_distanceTypes</a> [] = { &quot;min&quot;, &quot;max&quot; }</td></tr>
<tr class="memdesc:gaa38ce86708e6c1c159ea584468448abb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Strings corresponding to DistanceType. <br/></td></tr>
<tr class="separator:gaa38ce86708e6c1c159ea584468448abb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf651b36f9b76eee861733194dccc09bf"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf651b36f9b76eee861733194dccc09bf"></a>
const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#gaf651b36f9b76eee861733194dccc09bf">gmx::analysismodules::anonymous_namespace{pairdist.cpp}::c_groupTypes</a> [] = { &quot;all&quot;, &quot;res&quot;, &quot;mol&quot;, &quot;none&quot; }</td></tr>
<tr class="memdesc:gaf651b36f9b76eee861733194dccc09bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Strings corresponding to GroupType. <br/></td></tr>
<tr class="separator:gaf651b36f9b76eee861733194dccc09bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacb9567c2ccbee4fdd22cc27514ed63e4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gacb9567c2ccbee4fdd22cc27514ed63e4"></a>
const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#gacb9567c2ccbee4fdd22cc27514ed63e4">gmx::analysismodules::anonymous_namespace{rdf.cpp}::c_NormalizationEnum</a> [] = { &quot;rdf&quot;, &quot;number_density&quot;, &quot;none&quot; }</td></tr>
<tr class="memdesc:gacb9567c2ccbee4fdd22cc27514ed63e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">String values corresponding to Normalization. <br/></td></tr>
<tr class="separator:gacb9567c2ccbee4fdd22cc27514ed63e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae3952742c2a1a83a562817cd3ec9deec"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae3952742c2a1a83a562817cd3ec9deec"></a>
const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__trajectoryanalysis.xhtml#gae3952742c2a1a83a562817cd3ec9deec">gmx::analysismodules::anonymous_namespace{rdf.cpp}::c_SurfaceEnum</a> [] = { &quot;no&quot;, &quot;mol&quot;, &quot;res&quot; }</td></tr>
<tr class="memdesc:gae3952742c2a1a83a562817cd3ec9deec"><td class="mdescLeft">&#160;</td><td class="mdescRight">String values corresponding to SurfaceType. <br/></td></tr>
<tr class="separator:gae3952742c2a1a83a562817cd3ec9deec"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="dirs"></a>
Directories</h2></td></tr>
<tr class="memitem:dir_671fa77a033d3a87d35c777a90505a4f"><td class="memItemLeft" align="right" valign="top">directory&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dir_671fa77a033d3a87d35c777a90505a4f.xhtml">trajectoryanalysis</a></td></tr>
<tr class="memdesc:dir_671fa77a033d3a87d35c777a90505a4f"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="group__module__trajectoryanalysis.xhtml">Framework for Trajectory Analysis (trajectoryanalysis)</a> <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:dir_5a8693df28d4694e3651897628e5bddf"><td class="memItemLeft" align="right" valign="top">directory&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dir_5a8693df28d4694e3651897628e5bddf.xhtml">tests</a></td></tr>
<tr class="memdesc:dir_5a8693df28d4694e3651897628e5bddf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unit tests for <a class="el" href="group__module__trajectoryanalysis.xhtml">Framework for Trajectory Analysis (trajectoryanalysis)</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"></a>
Files</h2></td></tr>
<tr class="memitem:analysismodule_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="analysismodule_8cpp.xhtml">analysismodule.cpp</a></td></tr>
<tr class="memdesc:analysismodule_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements classes in <a class="el" href="analysismodule_8h.xhtml" title="Declares gmx::TrajectoryAnalysisModule and gmx::TrajectoryAnalysisModuleData. ">analysismodule.h</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:analysismodule_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="analysismodule_8h.xhtml">analysismodule.h</a></td></tr>
<tr class="memdesc:analysismodule_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml" title="Base class for trajectory analysis modules. ">gmx::TrajectoryAnalysisModule</a> and <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">gmx::TrajectoryAnalysisModuleData</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:analysissettings-impl_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="analysissettings-impl_8h.xhtml">analysissettings-impl.h</a></td></tr>
<tr class="memdesc:analysissettings-impl_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares private implementation class for <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml" title="Trajectory analysis module configuration object. ">gmx::TrajectoryAnalysisSettings</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:analysissettings_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="analysissettings_8cpp.xhtml">analysissettings.cpp</a></td></tr>
<tr class="memdesc:analysissettings_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements classes in <a class="el" href="analysissettings_8h.xhtml" title="Declares gmx::TrajectoryAnalysisSettings and gmx::TopologyInformation. ">analysissettings.h</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:analysissettings_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="analysissettings_8h.xhtml">analysissettings.h</a></td></tr>
<tr class="memdesc:analysissettings_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml" title="Trajectory analysis module configuration object. ">gmx::TrajectoryAnalysisSettings</a> and <a class="el" href="classgmx_1_1TopologyInformation.xhtml" title="Topology information passed to a trajectory analysis module. ">gmx::TopologyInformation</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:cmdlinerunner_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cmdlinerunner_8cpp.xhtml">cmdlinerunner.cpp</a></td></tr>
<tr class="memdesc:cmdlinerunner_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements <a class="el" href="classgmx_1_1TrajectoryAnalysisCommandLineRunner.xhtml" title="Runner for command-line trajectory analysis tools. ">gmx::TrajectoryAnalysisCommandLineRunner</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:cmdlinerunner_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cmdlinerunner_8h.xhtml">cmdlinerunner.h</a></td></tr>
<tr class="memdesc:cmdlinerunner_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <a class="el" href="classgmx_1_1TrajectoryAnalysisCommandLineRunner.xhtml" title="Runner for command-line trajectory analysis tools. ">gmx::TrajectoryAnalysisCommandLineRunner</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:modules_2angle_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="modules_2angle_8cpp.xhtml">angle.cpp</a></td></tr>
<tr class="memdesc:modules_2angle_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements gmx::analysismodules::Angle. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:angle_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="angle_8h.xhtml">angle.h</a></td></tr>
<tr class="memdesc:angle_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares trajectory analysis module for angle calculations. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:modules_2distance_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="modules_2distance_8cpp.xhtml">distance.cpp</a></td></tr>
<tr class="memdesc:modules_2distance_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements gmx::analysismodules::Distance. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:distance_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="distance_8h.xhtml">distance.h</a></td></tr>
<tr class="memdesc:distance_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares trajectory analysis module for distance calculations. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:modules_2freevolume_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="modules_2freevolume_8cpp.xhtml">freevolume.cpp</a></td></tr>
<tr class="memdesc:modules_2freevolume_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements gmx::analysismodules::Freevolume. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:freevolume_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="freevolume_8h.xhtml">freevolume.h</a></td></tr>
<tr class="memdesc:freevolume_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares trajectory analysis module for free volume calculations. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:modules_2pairdist_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="modules_2pairdist_8cpp.xhtml">pairdist.cpp</a></td></tr>
<tr class="memdesc:modules_2pairdist_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements gmx::analysismodules::PairDistance. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:pairdist_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pairdist_8h.xhtml">pairdist.h</a></td></tr>
<tr class="memdesc:pairdist_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares trajectory analysis module for pairwise distance calculations. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:modules_2rdf_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="modules_2rdf_8cpp.xhtml">rdf.cpp</a></td></tr>
<tr class="memdesc:modules_2rdf_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements gmx::analysismodules::Rdf. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:rdf_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rdf_8h.xhtml">rdf.h</a></td></tr>
<tr class="memdesc:rdf_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares trajectory analysis module for RDF calculations. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:modules_2sasa_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="modules_2sasa_8cpp.xhtml">sasa.cpp</a></td></tr>
<tr class="memdesc:modules_2sasa_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements gmx::analysismodules::Sasa. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:sasa_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="sasa_8h.xhtml">sasa.h</a></td></tr>
<tr class="memdesc:sasa_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares trajectory analysis module for surface area calculations. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:modules_2select_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="modules_2select_8cpp.xhtml">select.cpp</a></td></tr>
<tr class="memdesc:modules_2select_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements gmx::analysismodules::Select. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:select_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="select_8h.xhtml">select.h</a></td></tr>
<tr class="memdesc:select_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares trajectory analysis module for basic selection information. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:modules_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="modules_8cpp.xhtml">modules.cpp</a></td></tr>
<tr class="memdesc:modules_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements <a class="el" href="group__module__trajectoryanalysis.xhtml#ga7a18c2c956e97306dcac66b006c34435" title="Registers all trajectory analysis command-line modules. ">registerTrajectoryAnalysisModules()</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:modules_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="modules_8h.xhtml">modules.h</a></td></tr>
<tr class="memdesc:modules_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic interface for accessing trajectory analysis modules. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:runnercommon_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="runnercommon_8cpp.xhtml">runnercommon.cpp</a></td></tr>
<tr class="memdesc:runnercommon_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements <a class="el" href="classgmx_1_1TrajectoryAnalysisRunnerCommon.xhtml" title="Implements common trajectory analysis runner functionality. ">gmx::TrajectoryAnalysisRunnerCommon</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:runnercommon_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="runnercommon_8h.xhtml">runnercommon.h</a></td></tr>
<tr class="memdesc:runnercommon_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <a class="el" href="classgmx_1_1TrajectoryAnalysisRunnerCommon.xhtml" title="Implements common trajectory analysis runner functionality. ">gmx::TrajectoryAnalysisRunnerCommon</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:tests_2angle_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tests_2angle_8cpp.xhtml">angle.cpp</a></td></tr>
<tr class="memdesc:tests_2angle_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests for functionality of the "angle" trajectory analysis module. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:tests_2cmdlinerunner_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tests_2cmdlinerunner_8cpp.xhtml">cmdlinerunner.cpp</a></td></tr>
<tr class="memdesc:tests_2cmdlinerunner_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests for general functionality in <a class="el" href="classgmx_1_1TrajectoryAnalysisCommandLineRunner.xhtml" title="Runner for command-line trajectory analysis tools. ">gmx::TrajectoryAnalysisCommandLineRunner</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:tests_2distance_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tests_2distance_8cpp.xhtml">distance.cpp</a></td></tr>
<tr class="memdesc:tests_2distance_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests for functionality of the "distance" trajectory analysis module. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:tests_2freevolume_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tests_2freevolume_8cpp.xhtml">freevolume.cpp</a></td></tr>
<tr class="memdesc:tests_2freevolume_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests for functionality of the "angle" trajectory analysis module. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gromacs_2trajectoryanalysis_2tests_2moduletest_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gromacs_2trajectoryanalysis_2tests_2moduletest_8cpp.xhtml">moduletest.cpp</a></td></tr>
<tr class="memdesc:gromacs_2trajectoryanalysis_2tests_2moduletest_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements classes in moduletest.h. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gromacs_2trajectoryanalysis_2tests_2moduletest_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gromacs_2trajectoryanalysis_2tests_2moduletest_8h.xhtml">moduletest.h</a></td></tr>
<tr class="memdesc:gromacs_2trajectoryanalysis_2tests_2moduletest_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares test fixture for TrajectoryAnalysisModule subclasses. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:tests_2pairdist_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tests_2pairdist_8cpp.xhtml">pairdist.cpp</a></td></tr>
<tr class="memdesc:tests_2pairdist_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests for functionality of the "pairdist" trajectory analysis module. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:tests_2rdf_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tests_2rdf_8cpp.xhtml">rdf.cpp</a></td></tr>
<tr class="memdesc:tests_2rdf_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests for functionality of the "rdf" trajectory analysis module. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:tests_2sasa_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tests_2sasa_8cpp.xhtml">sasa.cpp</a></td></tr>
<tr class="memdesc:tests_2sasa_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests for functionality of the "sasa" trajectory analysis module. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:tests_2select_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tests_2select_8cpp.xhtml">select.cpp</a></td></tr>
<tr class="memdesc:tests_2select_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests for functionality of the "select" trajectory analysis module. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:tests_2surfacearea_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tests_2surfacearea_8cpp.xhtml">surfacearea.cpp</a></td></tr>
<tr class="memdesc:tests_2surfacearea_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests for the surface area calculation used by the <code>sasa</code> analysis module. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:test__selection_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="test__selection_8cpp.xhtml">test_selection.cpp</a></td></tr>
<tr class="memdesc:test__selection_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Testing/debugging tool for the selection engine. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:trajectoryanalysis_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="trajectoryanalysis_8h.xhtml">trajectoryanalysis.h</a></td></tr>
<tr class="memdesc:trajectoryanalysis_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Public API convenience header for trajectory analysis framework. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="gaaeebaa150a0076e82c2a8c53d52539d6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{sasa.cpp}::add_rec </td>
          <td>(</td>
          <td class="paramtype">t_conect&#160;</td>
          <td class="paramname"><em>c</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>j</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td>
          <td class="paramname"><em>d2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Updates nearest neighbor information for a surface dot. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">c</td><td>Nearest neighbor information array to update. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Index in <code>c</code> to update. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">j</td><td>Index of the other surface dot to add to the array. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">d2</td><td>Squared distance between <code>i</code> and <code>j</code>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga9097c3a860a20805ea623d34bc21aeb6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::analyzeFrame </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>frnr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_trxframe &amp;&#160;</td>
          <td class="paramname"><em>fr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__pbc.xhtml">t_pbc</a> *&#160;</td>
          <td class="paramname"><em>pbc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml">TrajectoryAnalysisModuleData</a> *&#160;</td>
          <td class="paramname"><em>pdata</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Analyzes a single frame. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">frnr</td><td>Frame number, a zero-based index that uniquely identifies the frame. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fr</td><td>Current frame. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pbc</td><td>Periodic boundary conditions for <code>fr</code>. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pdata</td><td>Data structure for frame-local data.</td></tr>
  </table>
  </dd>
</dl>
<p>This method is called once for each frame to be analyzed, and should analyze the positions provided in the selections. Data handles and selections should be obtained from the <code>pdata</code> structure.</p>
<p>For threaded analysis, this method is called asynchronously in different threads to analyze different frames. The <code>pdata</code> structure is one of the structures created with <a class="el" href="group__module__trajectoryanalysis.xhtml#ga19f58b765ef288bd67d36a86daeb492a" title="Starts the analysis of frames. ">startFrames()</a>, but no assumptions should be made about which of these data structures is used. It is guaranteed that two instances of <a class="el" href="group__module__trajectoryanalysis.xhtml#ga9097c3a860a20805ea623d34bc21aeb6" title="Analyzes a single frame. ">analyzeFrame()</a> are not running concurrently with the same <code>pdata</code> data structure. Any access to data structures not stored in <code>pdata</code> should be designed to be thread-safe. </p>

<p>Implements <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="ga5334f9e6a192b41fcb597925de850920"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::analyzeFrame </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>frnr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_trxframe &amp;&#160;</td>
          <td class="paramname"><em>fr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__pbc.xhtml">t_pbc</a> *&#160;</td>
          <td class="paramname"><em>pbc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml">TrajectoryAnalysisModuleData</a> *&#160;</td>
          <td class="paramname"><em>pdata</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Analyzes a single frame. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">frnr</td><td>Frame number, a zero-based index that uniquely identifies the frame. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fr</td><td>Current frame. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pbc</td><td>Periodic boundary conditions for <code>fr</code>. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pdata</td><td>Data structure for frame-local data.</td></tr>
  </table>
  </dd>
</dl>
<p>This method is called once for each frame to be analyzed, and should analyze the positions provided in the selections. Data handles and selections should be obtained from the <code>pdata</code> structure.</p>
<p>For threaded analysis, this method is called asynchronously in different threads to analyze different frames. The <code>pdata</code> structure is one of the structures created with <a class="el" href="group__module__trajectoryanalysis.xhtml#ga6f642652868d498ad78d81054c8aa4c5" title="Starts the analysis of frames. ">startFrames()</a>, but no assumptions should be made about which of these data structures is used. It is guaranteed that two instances of <a class="el" href="group__module__trajectoryanalysis.xhtml#ga5334f9e6a192b41fcb597925de850920" title="Analyzes a single frame. ">analyzeFrame()</a> are not running concurrently with the same <code>pdata</code> data structure. Any access to data structures not stored in <code>pdata</code> should be designed to be thread-safe. </p>

<p>Implements <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="gaf1c894303aee5cf5fb37b599e4e03dd0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::analyzeFrame </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>frnr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_trxframe &amp;&#160;</td>
          <td class="paramname"><em>fr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__pbc.xhtml">t_pbc</a> *&#160;</td>
          <td class="paramname"><em>pbc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml">TrajectoryAnalysisModuleData</a> *&#160;</td>
          <td class="paramname"><em>pdata</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Analyzes a single frame. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">frnr</td><td>Frame number, a zero-based index that uniquely identifies the frame. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fr</td><td>Current frame. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pbc</td><td>Periodic boundary conditions for <code>fr</code>. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pdata</td><td>Data structure for frame-local data.</td></tr>
  </table>
  </dd>
</dl>
<p>This method is called once for each frame to be analyzed, and should analyze the positions provided in the selections. Data handles and selections should be obtained from the <code>pdata</code> structure.</p>
<p>For threaded analysis, this method is called asynchronously in different threads to analyze different frames. The <code>pdata</code> structure is one of the structures created with <a class="el" href="group__module__trajectoryanalysis.xhtml#gaef2b22753bc218ea44b7f92b89e9f8af" title="Starts the analysis of frames. ">startFrames()</a>, but no assumptions should be made about which of these data structures is used. It is guaranteed that two instances of <a class="el" href="group__module__trajectoryanalysis.xhtml#gaf1c894303aee5cf5fb37b599e4e03dd0" title="Analyzes a single frame. ">analyzeFrame()</a> are not running concurrently with the same <code>pdata</code> data structure. Any access to data structures not stored in <code>pdata</code> should be designed to be thread-safe. </p>

<p>Implements <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#adc7344d1b635c15320af636657383212">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="ga4530988451bc112680ff52960d0b7e63"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{sasa.cpp}::computeAreas </td>
          <td>(</td>
          <td class="paramtype">const Selection &amp;&#160;</td>
          <td class="paramname"><em>surfaceSel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Selection &amp;&#160;</td>
          <td class="paramname"><em>sel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>atomAreas</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>dgsFactor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>totalAreaOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> *&#160;</td>
          <td class="paramname"><em>dgsolvOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AnalysisDataHandle&#160;</td>
          <td class="paramname"><em>atomAreaHandle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AnalysisDataHandle&#160;</td>
          <td class="paramname"><em>resAreaHandle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a> &gt; *&#160;</td>
          <td class="paramname"><em>resAreaWork</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper method to compute the areas for a single selection. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">surfaceSel</td><td>The calculation selection. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sel</td><td>The selection to compute the areas for (can be <code>surfaceSel</code> or one of the output selections). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">atomAreas</td><td>Atom areas for each position in <code>surfaceSel</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dgsFactor</td><td>Free energy coefficients for each position in <code>surfaceSel</code>. If empty, free energies are not calculated. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">totalAreaOut</td><td>Total area of <code>sel</code> (sum of atom areas it selects). </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dgsolvOut</td><td>Solvation free energy. Will be zero of <code>dgsFactor</code> is empty. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">atomAreaHandle</td><td>Data handle to use for storing atom areas for <code>sel</code>. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">resAreaHandle</td><td>Data handle to use for storing residue areas for <code>sel</code>. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">resAreaWork</td><td>Work array for accumulating the residue areas. If empty, atom and residue areas are not calculated.</td></tr>
  </table>
  </dd>
</dl>
<p><code>atomAreaHandle</code> and <code>resAreaHandle</code> are not used if <code>resAreaWork</code> is empty. </p>

</div>
</div>
<a class="anchor" id="ga8aa66160ab0c7c1eba818d954edbdd0a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{sasa.cpp}::do_conect </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>x</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds CONECT records for surface dots. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fn</td><td>PDB file to append the CONECT records to. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>Number of dots in <code>x</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Array of surface dot positions.</td></tr>
  </table>
  </dd>
</dl>
<p>Adds a CONECT record that connects each surface dot to its two nearest neighbors. The function is copied verbatim from the old gmx_sas.c implementation. </p>

</div>
</div>
<a class="anchor" id="ga90bf8eb2b9451a9ccd5246ebbd826996"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::finishAnalysis </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nframes</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Postprocesses data after frames have been read. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nframes</td><td>Total number of frames processed.</td></tr>
  </table>
  </dd>
</dl>
<p>This function is called after all <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a9d14bf1683086d3fafdb11e23e003de4" title="Finishes the analysis of frames. ">finishFrames()</a> calls have been called. <code>nframes</code> will equal the number of calls to <a class="el" href="group__module__trajectoryanalysis.xhtml#ga9097c3a860a20805ea623d34bc21aeb6" title="Analyzes a single frame. ">analyzeFrame()</a> that have occurred. </p>

<p>Implements <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a3b9d902a262ba124be565eca5b714e4b">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="ga98f58d0b39eb76e41afcf6d718288179"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::finishAnalysis </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nframes</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Postprocesses data after frames have been read. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nframes</td><td>Total number of frames processed.</td></tr>
  </table>
  </dd>
</dl>
<p>This function is called after all <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a9d14bf1683086d3fafdb11e23e003de4" title="Finishes the analysis of frames. ">finishFrames()</a> calls have been called. <code>nframes</code> will equal the number of calls to <a class="el" href="group__module__trajectoryanalysis.xhtml#ga5334f9e6a192b41fcb597925de850920" title="Analyzes a single frame. ">analyzeFrame()</a> that have occurred. </p>

<p>Implements <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a3b9d902a262ba124be565eca5b714e4b">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="gae58a22fc3e323131e5a606a0aa7792cb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::finishAnalysis </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nframes</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Postprocesses data after frames have been read. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nframes</td><td>Total number of frames processed.</td></tr>
  </table>
  </dd>
</dl>
<p>This function is called after all <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a9d14bf1683086d3fafdb11e23e003de4" title="Finishes the analysis of frames. ">finishFrames()</a> calls have been called. <code>nframes</code> will equal the number of calls to <a class="el" href="group__module__trajectoryanalysis.xhtml#gaf1c894303aee5cf5fb37b599e4e03dd0" title="Analyzes a single frame. ">analyzeFrame()</a> that have occurred. </p>

<p>Implements <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a3b9d902a262ba124be565eca5b714e4b">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="ga530786214d4998c33eb464e2b19a64bb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::initAfterFirstFrame </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">TrajectoryAnalysisSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_trxframe &amp;&#160;</td>
          <td class="paramname"><em>fr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Performs additional initialization after reading the first frame. </p>
<p>When this function is called, selections are the same as in <a class="el" href="group__module__trajectoryanalysis.xhtml#ga68715aa4000c519a0c1f878352be3639" title="Initializes the analysis. ">initAnalysis()</a>, i.e., they have not been evaluated for the first frame.</p>
<p>It is necessary to override this method only if the module needs to do initialization for which it requires data from the first frame.</p>
<p>The default implementation does nothing. </p>

<p>Reimplemented from <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a419a3d7f950f0731a20d6a7fafaa6d05">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="ga7ddd9d3c140a117c13024917328f511f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::initAnalysis </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">TrajectoryAnalysisSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1TopologyInformation.xhtml">TopologyInformation</a> &amp;&#160;</td>
          <td class="paramname"><em>top</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes the analysis. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">settings</td><td>Settings to pass to and from the module. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology information.</td></tr>
  </table>
  </dd>
</dl>
<p>When this function is called, selections have been initialized based on user input, and a topology has been loaded if provided by the user. For dynamic selections, the selections have been evaluated to the largest possible selection, i.e., the selections passed to <a class="el" href="group__module__trajectoryanalysis.xhtml#ga9097c3a860a20805ea623d34bc21aeb6" title="Analyzes a single frame. ">analyzeFrame()</a> are always a subset of the selections provided here. </p>

<p>Implements <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#ae5ae73770caad4ff1808c2ca655dad0e">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="ga68715aa4000c519a0c1f878352be3639"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::initAnalysis </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">TrajectoryAnalysisSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1TopologyInformation.xhtml">TopologyInformation</a> &amp;&#160;</td>
          <td class="paramname"><em>top</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes the analysis. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">settings</td><td>Settings to pass to and from the module. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology information.</td></tr>
  </table>
  </dd>
</dl>
<p>When this function is called, selections have been initialized based on user input, and a topology has been loaded if provided by the user. For dynamic selections, the selections have been evaluated to the largest possible selection, i.e., the selections passed to <a class="el" href="group__module__trajectoryanalysis.xhtml#ga5334f9e6a192b41fcb597925de850920" title="Analyzes a single frame. ">analyzeFrame()</a> are always a subset of the selections provided here. </p>

<p>Implements <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#ae5ae73770caad4ff1808c2ca655dad0e">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="ga7917b635ab1e7389ab733f03162df3ae"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::initAnalysis </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">TrajectoryAnalysisSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1TopologyInformation.xhtml">TopologyInformation</a> &amp;&#160;</td>
          <td class="paramname"><em>top</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes the analysis. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">settings</td><td>Settings to pass to and from the module. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology information.</td></tr>
  </table>
  </dd>
</dl>
<p>When this function is called, selections have been initialized based on user input, and a topology has been loaded if provided by the user. For dynamic selections, the selections have been evaluated to the largest possible selection, i.e., the selections passed to <a class="el" href="group__module__trajectoryanalysis.xhtml#gaf1c894303aee5cf5fb37b599e4e03dd0" title="Analyzes a single frame. ">analyzeFrame()</a> are always a subset of the selections provided here. </p>

<p>Implements <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#ae5ae73770caad4ff1808c2ca655dad0e">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="gad8c0ee00a3d160339a967bdc6b3391bc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::initOptions </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1IOptionsContainer.xhtml">IOptionsContainer</a> *&#160;</td>
          <td class="paramname"><em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">TrajectoryAnalysisSettings</a> *&#160;</td>
          <td class="paramname"><em>settings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes options understood by the module. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">options</td><td><a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a> object to add the options to. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">settings</td><td>Settings to pass to and from the module.</td></tr>
  </table>
  </dd>
</dl>
<p>This method is called first after the constructor, and it should add options understood by the module to <code>options</code>. Output values from options (including selections) should be stored in member variables.</p>
<p>In addition to initializing the options, this method can also provide information about the module's requirements using the <code>settings</code> object; see <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml" title="Trajectory analysis module configuration object. ">TrajectoryAnalysisSettings</a> for more details.</p>
<p>If settings depend on the option values provided by the user, see <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#afa3457cc922f1d16c4c19cec740e0442" title="Called after all option values have been set. ">optionsFinished()</a>. </p>

<p>Implements <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#aba5990675e980bf746ecd224f814d549">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="ga58fe513cbf09acfb3a07e613cebacc35"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::initOptions </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1IOptionsContainer.xhtml">IOptionsContainer</a> *&#160;</td>
          <td class="paramname"><em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">TrajectoryAnalysisSettings</a> *&#160;</td>
          <td class="paramname"><em>settings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes options understood by the module. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">options</td><td><a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a> object to add the options to. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">settings</td><td>Settings to pass to and from the module.</td></tr>
  </table>
  </dd>
</dl>
<p>This method is called first after the constructor, and it should add options understood by the module to <code>options</code>. Output values from options (including selections) should be stored in member variables.</p>
<p>In addition to initializing the options, this method can also provide information about the module's requirements using the <code>settings</code> object; see <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml" title="Trajectory analysis module configuration object. ">TrajectoryAnalysisSettings</a> for more details.</p>
<p>If settings depend on the option values provided by the user, see <a class="el" href="group__module__trajectoryanalysis.xhtml#gac634f53069bc0de47c0656b16f0e8304" title="Called after all option values have been set. ">optionsFinished()</a>. </p>

<p>Implements <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#aba5990675e980bf746ecd224f814d549">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="ga34c4a69e301a4a6e720cdb4c2eb6178e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::initOptions </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1IOptionsContainer.xhtml">IOptionsContainer</a> *&#160;</td>
          <td class="paramname"><em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">TrajectoryAnalysisSettings</a> *&#160;</td>
          <td class="paramname"><em>settings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes options understood by the module. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">options</td><td><a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a> object to add the options to. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">settings</td><td>Settings to pass to and from the module.</td></tr>
  </table>
  </dd>
</dl>
<p>This method is called first after the constructor, and it should add options understood by the module to <code>options</code>. Output values from options (including selections) should be stored in member variables.</p>
<p>In addition to initializing the options, this method can also provide information about the module's requirements using the <code>settings</code> object; see <a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml" title="Trajectory analysis module configuration object. ">TrajectoryAnalysisSettings</a> for more details.</p>
<p>If settings depend on the option values provided by the user, see <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#afa3457cc922f1d16c4c19cec740e0442" title="Called after all option values have been set. ">optionsFinished()</a>. </p>

<p>Implements <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#aba5990675e980bf746ecd224f814d549">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="gac634f53069bc0de47c0656b16f0e8304"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::optionsFinished </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1TrajectoryAnalysisSettings.xhtml">TrajectoryAnalysisSettings</a> *&#160;</td>
          <td class="paramname"><em>settings</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called after all option values have been set. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">settings</td><td>Settings to pass to and from the module.</td></tr>
  </table>
  </dd>
</dl>
<p>This method is called after option values have been assigned (but interactive selection input has not yet been performed).</p>
<p>If the module needs to change settings that affect topology loading (can be done using the <code>settings</code> object) or selection initialization (can be done using <a class="el" href="classgmx_1_1SelectionOptionInfo.xhtml" title="Wrapper class for accessing and modifying selection option information. ">SelectionOptionInfo</a>) based on option values, this method has to be overridden.</p>
<p>The default implementation does nothing. </p>

<p>Reimplemented from <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#afa3457cc922f1d16c4c19cec740e0442">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="ga05cb6818f484e7853b6ec70cdc967c06"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class ModuleInfo &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void gmx::anonymous_namespace{modules.cpp}::registerModule </td>
          <td>(</td>
          <td class="paramtype">CommandLineModuleManager *&#160;</td>
          <td class="paramname"><em>manager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">CommandLineModuleGroup&#160;</td>
          <td class="paramname"><em>group</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convenience method for registering a command-line module for trajectory analysis. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ModuleInfo</td><td>Info about trajectory analysis module to wrap.</td></tr>
  </table>
  </dd>
</dl>
<p><code>ModuleInfo</code> should have static public members <code>const char name[]</code>, <code>const char shortDescription[]</code>, and <code><a class="el" href="namespacegmx.xhtml#a832da3c093109c13cc2369de05e02f3b" title="Smart pointer to manage a TrajectoryAnalysisModule. ">gmx::TrajectoryAnalysisModulePointer</a> create()</code>. </p>

</div>
</div>
<a class="anchor" id="ga7a18c2c956e97306dcac66b006c34435"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::registerTrajectoryAnalysisModules </td>
          <td>(</td>
          <td class="paramtype">CommandLineModuleManager *&#160;</td>
          <td class="paramname"><em>manager</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Registers all trajectory analysis command-line modules. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">manager</td><td>Command-line module manager to receive the modules. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>Registers all trajectory analysis modules declared in the library such that they can be run through <code>manager</code>. </p>

</div>
</div>
<a class="anchor" id="ga19f58b765ef288bd67d36a86daeb492a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">TrajectoryAnalysisModuleDataPointer gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::startFrames </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1AnalysisDataParallelOptions.xhtml">AnalysisDataParallelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1SelectionCollection.xhtml">SelectionCollection</a> &amp;&#160;</td>
          <td class="paramname"><em>selections</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Starts the analysis of frames. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">opt</td><td></td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">selections</td><td>Frame-local selection collection object. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Data structure for thread-local data.</dd></dl>
<p>This function is necessary only for threaded parallelization. It is called once for each thread and should initialize a class that contains any required frame-local data in the returned value. The default implementation creates a basic data structure that holds thread-local data handles for all data objects registered with <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a86b3b5cd87518e988e8b5452b39a3ad1" title="Registers a parallelized dataset that exports data. ">registerAnalysisDataset()</a>, as well as the thread-local selection collection. These can be accessed in <a class="el" href="group__module__trajectoryanalysis.xhtml#ga9097c3a860a20805ea623d34bc21aeb6" title="Analyzes a single frame. ">analyzeFrame()</a> using the methods in <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">TrajectoryAnalysisModuleData</a>. If other thread-local data is needed, this function should be overridden and it should create an instance of a class derived from <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">TrajectoryAnalysisModuleData</a>.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">TrajectoryAnalysisModuleData</a> </dd></dl>

<p>Reimplemented from <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a6082fcf69bdc3b0a1945ece31437f195">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="ga6f642652868d498ad78d81054c8aa4c5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">TrajectoryAnalysisModuleDataPointer gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::startFrames </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1AnalysisDataParallelOptions.xhtml">AnalysisDataParallelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1SelectionCollection.xhtml">SelectionCollection</a> &amp;&#160;</td>
          <td class="paramname"><em>selections</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Starts the analysis of frames. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">opt</td><td></td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">selections</td><td>Frame-local selection collection object. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Data structure for thread-local data.</dd></dl>
<p>This function is necessary only for threaded parallelization. It is called once for each thread and should initialize a class that contains any required frame-local data in the returned value. The default implementation creates a basic data structure that holds thread-local data handles for all data objects registered with <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a86b3b5cd87518e988e8b5452b39a3ad1" title="Registers a parallelized dataset that exports data. ">registerAnalysisDataset()</a>, as well as the thread-local selection collection. These can be accessed in <a class="el" href="group__module__trajectoryanalysis.xhtml#ga5334f9e6a192b41fcb597925de850920" title="Analyzes a single frame. ">analyzeFrame()</a> using the methods in <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">TrajectoryAnalysisModuleData</a>. If other thread-local data is needed, this function should be overridden and it should create an instance of a class derived from <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">TrajectoryAnalysisModuleData</a>.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">TrajectoryAnalysisModuleData</a> </dd></dl>

<p>Reimplemented from <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a6082fcf69bdc3b0a1945ece31437f195">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="gaef2b22753bc218ea44b7f92b89e9f8af"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">TrajectoryAnalysisModuleDataPointer gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::startFrames </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1AnalysisDataParallelOptions.xhtml">AnalysisDataParallelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1SelectionCollection.xhtml">SelectionCollection</a> &amp;&#160;</td>
          <td class="paramname"><em>selections</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Starts the analysis of frames. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">opt</td><td></td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">selections</td><td>Frame-local selection collection object. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Data structure for thread-local data.</dd></dl>
<p>This function is necessary only for threaded parallelization. It is called once for each thread and should initialize a class that contains any required frame-local data in the returned value. The default implementation creates a basic data structure that holds thread-local data handles for all data objects registered with <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a86b3b5cd87518e988e8b5452b39a3ad1" title="Registers a parallelized dataset that exports data. ">registerAnalysisDataset()</a>, as well as the thread-local selection collection. These can be accessed in <a class="el" href="group__module__trajectoryanalysis.xhtml#gaf1c894303aee5cf5fb37b599e4e03dd0" title="Analyzes a single frame. ">analyzeFrame()</a> using the methods in <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">TrajectoryAnalysisModuleData</a>. If other thread-local data is needed, this function should be overridden and it should create an instance of a class derived from <a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">TrajectoryAnalysisModuleData</a>.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1TrajectoryAnalysisModuleData.xhtml" title="Base class for thread-local data storage during trajectory analysis. ">TrajectoryAnalysisModuleData</a> </dd></dl>

<p>Reimplemented from <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a6082fcf69bdc3b0a1945ece31437f195">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="ga74eddf616882ee7fcfe9e5698dfa95c0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::writeOutput </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes output into files and/or standard output/error. </p>
<p>All output from the module, excluding data written out for each frame during <a class="el" href="group__module__trajectoryanalysis.xhtml#ga9097c3a860a20805ea623d34bc21aeb6" title="Analyzes a single frame. ">analyzeFrame()</a>, should be confined into this function. This function is guaranteed to be called only after <a class="el" href="group__module__trajectoryanalysis.xhtml#ga90bf8eb2b9451a9ccd5246ebbd826996" title="Postprocesses data after frames have been read. ">finishAnalysis()</a>. </p>

<p>Implements <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a80869a7764274db8e314bf0a1c5858f6">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="gab2f89d7a6d2caea0c449ed36fa6bb533"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::writeOutput </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes output into files and/or standard output/error. </p>
<p>All output from the module, excluding data written out for each frame during <a class="el" href="group__module__trajectoryanalysis.xhtml#ga5334f9e6a192b41fcb597925de850920" title="Analyzes a single frame. ">analyzeFrame()</a>, should be confined into this function. This function is guaranteed to be called only after <a class="el" href="group__module__trajectoryanalysis.xhtml#ga98f58d0b39eb76e41afcf6d718288179" title="Postprocesses data after frames have been read. ">finishAnalysis()</a>. </p>

<p>Implements <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a80869a7764274db8e314bf0a1c5858f6">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
<a class="anchor" id="ga57b0ca1ca5a2372184f451654e2354c8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::writeOutput </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes output into files and/or standard output/error. </p>
<p>All output from the module, excluding data written out for each frame during <a class="el" href="group__module__trajectoryanalysis.xhtml#gaf1c894303aee5cf5fb37b599e4e03dd0" title="Analyzes a single frame. ">analyzeFrame()</a>, should be confined into this function. This function is guaranteed to be called only after <a class="el" href="group__module__trajectoryanalysis.xhtml#gae58a22fc3e323131e5a606a0aa7792cb" title="Postprocesses data after frames have been read. ">finishAnalysis()</a>. </p>

<p>Implements <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml#a80869a7764274db8e314bf0a1c5858f6">gmx::TrajectoryAnalysisModule</a>.</p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:20:42 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
