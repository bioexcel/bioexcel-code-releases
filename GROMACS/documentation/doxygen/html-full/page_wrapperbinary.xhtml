<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: Wrapper binary implementation</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li class="current"><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="index.xhtml">GROMACS</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Wrapper binary implementation </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>This page mainly describes the implementation of the <code>gmx</code> wrapper binary. Many of the details are not visible to most of the code, but this documentation is included as part of the library API documentation to make it easier to understand the overall implementation without reading extensive documentation.</p>
<h1>main() implementation </h1>
<p>The main() method for the wrapper binary is implemented in <code>src/programs/gmx.cpp</code>. This is a very simple code that does these basic tasks:</p>
<ol type="1">
<li>Initializes GROMACS using <a class="el" href="group__module__commandline.xhtml#ga8c376f5f94bd1a63a3a97e288c4be50d" title="Initializes the GROMACS library for command-line use. ">gmx::initForCommandLine()</a> (see <a class="el" href="page_usinglibrary.xhtml">Using GROMACS as a library</a>).</li>
<li>Creates a <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml" title="Implements a wrapper command-line interface for multiple modules. ">gmx::CommandLineModuleManager</a> instance for the wrapper binary.</li>
<li>Calls various methods to add modules to the manager and initialize it otherwise. Many of the pre-5.0 binaries are added from <code>src/programs/legacymodules.cpp</code>. New C++ tools are added from <code><a class="el" href="modules_8cpp.xhtml" title="Implements registerTrajectoryAnalysisModules(). ">src/gromacs/trajectoryanalysis/modules.cpp</a></code>.</li>
<li>Passes control to the manager (see below).</li>
<li>On successful return, deinitializes GROMACS and returns the exit code from the manager. The main() method also catches all exceptions, and if one is caught, prints an error message and terminates the program cleanly.</li>
</ol>
<h1>Command line modules </h1>
<p>All modules within the wrapper binary are implemented as classes that implement the <a class="el" href="classgmx_1_1ICommandLineModule.xhtml" title="Module that can be run from command line using CommandLineModuleManager. ">gmx::ICommandLineModule</a> interface. There is generally some helper class in between:</p>
<ul>
<li>General C++ modules typically use <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">gmx::Options</a> for their command-line handling. Instead of each module implementing parsing and help separately with identical code, they implement <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml" title="Module that can be run from a command line and uses gmx::Options for argument processing. ">gmx::ICommandLineOptionsModule</a> instead. The framework then provides a bridge class that contains the common code and wraps <a class="el" href="classgmx_1_1ICommandLineOptionsModule.xhtml" title="Module that can be run from a command line and uses gmx::Options for argument processing. ">gmx::ICommandLineOptionsModule</a> into a <a class="el" href="classgmx_1_1ICommandLineModule.xhtml" title="Module that can be run from command line using CommandLineModuleManager. ">gmx::ICommandLineModule</a>.</li>
<li>For C++ trajectory analysis modules, there is a general implementation for running the <a class="el" href="classgmx_1_1TrajectoryAnalysisModule.xhtml" title="Base class for trajectory analysis modules. ">gmx::TrajectoryAnalysisModule</a> subclasses in cmdlinerunner.cpp.</li>
<li>For old C-style main() functions, see <a class="el" href="page_wrapperbinary.xhtml#section_wrapperbinary_cmain">Handling C main() functions </a>.</li>
</ul>
<h1><a class="anchor" id="section_wrapperbinary_manager"></a>
Command line manager </h1>
<p>The core of the wrapper binary is the <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#a6b3468b2c6cbafe1b528267208f6db46" title="Runs a module based on given command line. ">gmx::CommandLineModuleManager::run()</a> method. This method:</p>
<ol type="1">
<li>Parses the command line arguments before the module name as arguments to the wrapper binary. Some arguments such as <code>-h</code> and <code>-version</code> cause rest of the command (the module name and all that follows) to be ignored.</li>
<li>If a module is specified, also checks the command line arguments after the module name for the options understood by the wrapper binary, such as <code>-h</code> and <code>-version</code> (see below for details of how <code>-h</code> works). Any such options are handled by the manager and removed from the command line for further processing.</li>
<li>Print the startup header (contents of which can be controlled by the command line options).</li>
<li>If a command line option requests termination after the startup header (such as <code>-version</code>), return.</li>
<li>Passes control to the selected module. If there is no module specified, the help module is invoked (see below).</li>
<li>Print a quote at the end, and return the exit code from the module.</li>
</ol>
<h2>Command line help </h2>
<p>To handle the <code>gmx help ...</code> command, as well as for <code>gmx -h</code> and for <code>gmx</code> <em>module</em> <code>-h</code>, the command line manager internally creates a module that handles the <code>help</code> command. All command lines containing the <code>-h</code>, as well as invocation of <code>gmx</code> without any arguments, are translated to corresponding <code>gmx help</code> commands. For example, <code>gmx</code> <em>module</em> <code>-h</code> is handled exactly like <code>gmx help</code> <em>module</em>. Note that if <code>-h</code> is specified for a module, the command line manager throws away all the other arguments before passing control to the module.</p>
<p>After the above translations, the internal help module handles all the help output. All the help is organized into a hierarchy of <a class="el" href="classgmx_1_1IHelpTopic.xhtml" title="Provides a single online help topic. ">gmx::IHelpTopic</a> instances. The help module internally creates a root help topic that is printed with <code>gmx help</code>. If there are additional words after the <code>gmx help</code> command, then those are taken to specify the topic to show in the hierarchy.</p>
<p><a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml" title="Implements a wrapper command-line interface for multiple modules. ">gmx::CommandLineModuleManager</a> internally creates a help topic for each added module. These topics are shown when <code>gmx help</code> <em>module</em> is invoked. They forward the request to the actual module (to <a class="el" href="classgmx_1_1ICommandLineModule.xhtml#a947eea9c2e648aa837d385fcbe01c1bd" title="Prints help for the module. ">gmx::ICommandLineModule::writeHelp()</a>).</p>
<p>In addition to the topics created internally, <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml" title="Implements a wrapper command-line interface for multiple modules. ">gmx::CommandLineModuleManager</a> provides methods to add additional help topics. Currently, this is used to expose some reference material for the selections (the same content that is accessible using <code>help</code> in the selection prompt).</p>
<h2>Help in other formats </h2>
<p>The build system provides a target, <code>make sphinx-programs</code>, that generates reStructuredText help for the commands, which in turn is used to generate man and HTML help. Internally, this executes <code>gmx help -export rst</code>, which triggers special handling in the internal help module. See documentation for <a href="../../dev-manual/build-system.html">special targets in the build system</a> for details of which targets to use for generating the documentation..</p>
<p>If this option is set, the help module loops through all the modules in the binary, writing help for each into a separate file. The help module writes common headers and footers, and asks the actual module to write the module-specific content (with <a class="el" href="classgmx_1_1ICommandLineModule.xhtml#a947eea9c2e648aa837d385fcbe01c1bd" title="Prints help for the module. ">gmx::ICommandLineModule::writeHelp()</a>, using a different help context than for console output).</p>
<p>Additionally, a list of all the modules is generated (<code>gromacs.7</code> for man pages, and alphabetical and by-topic lists for the HTML pages).</p>
<h2><a class="anchor" id="section_wrapperbinary_cmain"></a>
Handling C %main() functions </h2>
<p>Many pre-5.0 modules are still implemented as a function with a C main() signature. All these binaries call <a class="el" href="group__module__commandline.xhtml#ga5140c89919960e8e1e218a5b0d881cd5" title="Parse command-line arguments. ">parse_common_args()</a> as more or less the first thing in their processing. In order to implement the above approach, the module manager internally creates a command line module for these (in <a class="el" href="classgmx_1_1CommandLineModuleManager.xhtml#af70e6bccbcd30cb41d7ce54cafbd8583" title="Adds a module that runs a given main()-like function. ">gmx::CommandLineModuleManager::addModuleCMain()</a>). The created module collaborates with <a class="el" href="group__module__commandline.xhtml#ga5140c89919960e8e1e218a5b0d881cd5" title="Parse command-line arguments. ">parse_common_args()</a> to achieve the same functionality as for the new C++ modules.</p>
<p>Running the module simply executes the provided main() method. Help writing is more complex, as it requires the help context to be passed from the module to <a class="el" href="group__module__commandline.xhtml#ga5140c89919960e8e1e218a5b0d881cd5" title="Parse command-line arguments. ">parse_common_args()</a>. This is handled using a global instance of the context (see <a class="el" href="classgmx_1_1GlobalCommandLineHelpContext.xhtml" title="Helper for passing CommandLineHelpContext into parse_common_args(). ">gmx::GlobalCommandLineHelpContext</a>). This context is set in the module, and if <a class="el" href="group__module__commandline.xhtml#ga5140c89919960e8e1e218a5b0d881cd5" title="Parse command-line arguments. ">parse_common_args()</a> detects it, it prints out the help and returns <code>false</code> to indicate to the caller that it should immediately return. </p>
</div></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:20:39 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
