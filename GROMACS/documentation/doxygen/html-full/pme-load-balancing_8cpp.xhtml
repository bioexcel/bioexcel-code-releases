<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/ewald/pme-load-balancing.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_71392c6f4b1ed3a32ba5c064e868a1ba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a798d384400d41a9e6864d9b1b8753fe.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_b9688f1b8619877f94c1daecbaec7adb.xhtml">ewald</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">pme-load-balancing.cpp File Reference<div class="ingroups"><a class="el" href="group__module__ewald.xhtml">Ewald-family treatments of long-ranged forces</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="gmxpre_8h.xhtml">gmxpre.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="pme-load-balancing_8h.xhtml">pme-load-balancing.h</a>&quot;</code><br/>
<code>#include &quot;config.h&quot;</code><br/>
<code>#include &lt;assert.h&gt;</code><br/>
<code>#include &lt;cmath&gt;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
<code>#include &quot;<a class="el" href="domdec_8h.xhtml">gromacs/domdec/domdec.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="domdec__network_8h.xhtml">gromacs/domdec/domdec_network.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="domdec__struct_8h.xhtml">gromacs/domdec/domdec_struct.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/fft/calcgrid.h&quot;</code><br/>
<code>#include &quot;gromacs/gmxlib/md_logging.h&quot;</code><br/>
<code>#include &quot;gromacs/gmxlib/network.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="functions_8h.xhtml">gromacs/math/functions.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/math/vec.h&quot;</code><br/>
<code>#include &quot;gromacs/mdlib/forcerec.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="nbnxn__gpu__data__mgmt_8h.xhtml">gromacs/mdlib/nbnxn_gpu_data_mgmt.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/mdlib/sim_util.h&quot;</code><br/>
<code>#include &quot;gromacs/mdtypes/commrec.h&quot;</code><br/>
<code>#include &quot;gromacs/mdtypes/inputrec.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="md__enums_8h.xhtml">gromacs/mdtypes/md_enums.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/pbcutil/pbc.h&quot;</code><br/>
<code>#include &quot;gromacs/timing/wallcycle.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="cstringutil_8h.xhtml">gromacs/utility/cstringutil.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="fatalerror_8h.xhtml">gromacs/utility/fatalerror.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="gmxassert_8h.xhtml">gromacs/utility/gmxassert.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="smalloc_8h.xhtml">gromacs/utility/smalloc.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="pme-internal_8h.xhtml">pme-internal.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for pme-load-balancing.cpp:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="pme-load-balancing_8cpp__incl.svg" width="2618" height="306"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>This file contains function definitions necessary for managing automatic load balance of PME calculations (Coulomb and LJ). </p>
<dl class="section author"><dt>Author</dt><dd>Berk Hess <a href="#" onclick="location.href='mai'+'lto:'+'hes'+'s@'+'kth'+'.s'+'e'; return false;">hess@<span style="display: none;">.nosp@m.</span>kth.<span style="display: none;">.nosp@m.</span>se</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpme__setup__t.xhtml">pme_setup_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parameters and settings for one PP-PME setup.  <a href="structpme__setup__t.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:acc4abd343a4deaafd24e86604641e42f"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#acc4abd343a4deaafd24e86604641e42f">epmelb</a> { <br/>
&#160;&#160;<b>epmelblimNO</b>, 
<b>epmelblimBOX</b>, 
<b>epmelblimDD</b>, 
<b>epmelblimPMEGRID</b>, 
<br/>
&#160;&#160;<b>epmelblimNR</b>
<br/>
 }</td></tr>
<tr class="memdesc:acc4abd343a4deaafd24e86604641e42f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enumeration whose values describe the effect limiting the load balancing. <br/></td></tr>
<tr class="separator:acc4abd343a4deaafd24e86604641e42f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:afd02504f87f1d1089c1da16b5bbc5bbf"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="afd02504f87f1d1089c1da16b5bbc5bbf"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#afd02504f87f1d1089c1da16b5bbc5bbf">pme_loadbal_is_active</a> (const pme_load_balancing_t *pme_lb)</td></tr>
<tr class="memdesc:afd02504f87f1d1089c1da16b5bbc5bbf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return whether PME load balancing is active. <br/></td></tr>
<tr class="separator:afd02504f87f1d1089c1da16b5bbc5bbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ccd7a103c94125cce0756fa5e145029"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#a5ccd7a103c94125cce0756fa5e145029">pme_loadbal_init</a> (pme_load_balancing_t **pme_lb_p, t_commrec *cr, FILE *fp_log, const t_inputrec *ir, matrix box, const interaction_const_t *ic, struct gmx_pme_t *pmedata, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bUseGPU, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> *bPrinting)</td></tr>
<tr class="memdesc:a5ccd7a103c94125cce0756fa5e145029"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the PP-PME load balacing data and infrastructure.  <a href="#a5ccd7a103c94125cce0756fa5e145029">More...</a><br/></td></tr>
<tr class="separator:a5ccd7a103c94125cce0756fa5e145029"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8eed547e08152be03e8ea355219fd699"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8eed547e08152be03e8ea355219fd699"></a>
static <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#a8eed547e08152be03e8ea355219fd699">pme_loadbal_increase_cutoff</a> (pme_load_balancing_t *pme_lb, int pme_order, const gmx_domdec_t *dd)</td></tr>
<tr class="memdesc:a8eed547e08152be03e8ea355219fd699"><td class="mdescLeft">&#160;</td><td class="mdescRight">Try to increase the cutoff during load balancing. <br/></td></tr>
<tr class="separator:a8eed547e08152be03e8ea355219fd699"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82a6f5dcabb035359a53afc2be204731"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a82a6f5dcabb035359a53afc2be204731"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#a82a6f5dcabb035359a53afc2be204731">print_grid</a> (FILE *fp_err, FILE *fp_log, const char *pre, const char *desc, const <a class="el" href="structpme__setup__t.xhtml">pme_setup_t</a> *<a class="el" href="parser__internal_8h.xhtml#a8553aeb4ef79ad62e90241cf54e221d5">set</a>, double cycles)</td></tr>
<tr class="memdesc:a82a6f5dcabb035359a53afc2be204731"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the PME grid. <br/></td></tr>
<tr class="separator:a82a6f5dcabb035359a53afc2be204731"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08ba9fd9752caab7ff2c6518736c8684"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a08ba9fd9752caab7ff2c6518736c8684"></a>
static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#a08ba9fd9752caab7ff2c6518736c8684">pme_loadbal_end</a> (pme_load_balancing_t *pme_lb)</td></tr>
<tr class="memdesc:a08ba9fd9752caab7ff2c6518736c8684"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the index of the last setup used in PME load balancing. <br/></td></tr>
<tr class="separator:a08ba9fd9752caab7ff2c6518736c8684"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acba8547c50925d523a65f7f83d702071"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="acba8547c50925d523a65f7f83d702071"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#acba8547c50925d523a65f7f83d702071">print_loadbal_limited</a> (FILE *fp_err, FILE *fp_log, gmx_int64_t step, pme_load_balancing_t *pme_lb)</td></tr>
<tr class="memdesc:acba8547c50925d523a65f7f83d702071"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print descriptive string about what limits PME load balancing. <br/></td></tr>
<tr class="separator:acba8547c50925d523a65f7f83d702071"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb6553fb7c4e16c7512e4786057fd1e1"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#acb6553fb7c4e16c7512e4786057fd1e1">switch_to_stage1</a> (pme_load_balancing_t *pme_lb)</td></tr>
<tr class="memdesc:acb6553fb7c4e16c7512e4786057fd1e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Switch load balancing to stage 1.  <a href="#acb6553fb7c4e16c7512e4786057fd1e1">More...</a><br/></td></tr>
<tr class="separator:acb6553fb7c4e16c7512e4786057fd1e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2abd83a8749d8d5dade22d19aef85f5f"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#a2abd83a8749d8d5dade22d19aef85f5f">pme_load_balance</a> (pme_load_balancing_t *pme_lb, t_commrec *cr, FILE *fp_err, FILE *fp_log, const t_inputrec *ir, t_state *state, double cycles, interaction_const_t *ic, struct nonbonded_verlet_t *nbv, struct gmx_pme_t **pmedata, gmx_int64_t step)</td></tr>
<tr class="memdesc:a2abd83a8749d8d5dade22d19aef85f5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Process the timings and try to adjust the PME grid and Coulomb cut-off.  <a href="#a2abd83a8749d8d5dade22d19aef85f5f">More...</a><br/></td></tr>
<tr class="separator:a2abd83a8749d8d5dade22d19aef85f5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a198ba46aed56a558409b009aea2c3a89"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#a198ba46aed56a558409b009aea2c3a89">continue_pme_loadbal</a> (pme_load_balancing_t *pme_lb, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bDlbUnlocked)</td></tr>
<tr class="memdesc:a198ba46aed56a558409b009aea2c3a89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepare for another round of PME load balancing.  <a href="#a198ba46aed56a558409b009aea2c3a89">More...</a><br/></td></tr>
<tr class="separator:a198ba46aed56a558409b009aea2c3a89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f9929061ff8631f9a93e419aff3fc04"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#a1f9929061ff8631f9a93e419aff3fc04">pme_loadbal_do</a> (pme_load_balancing_t *pme_lb, t_commrec *cr, FILE *fp_err, FILE *fp_log, const t_inputrec *ir, t_forcerec *fr, t_state *state, gmx_wallcycle_t wcycle, gmx_int64_t step, gmx_int64_t step_rel, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> *bPrinting)</td></tr>
<tr class="memdesc:a1f9929061ff8631f9a93e419aff3fc04"><td class="mdescLeft">&#160;</td><td class="mdescRight">Process cycles and PME load balance when necessary.  <a href="#a1f9929061ff8631f9a93e419aff3fc04">More...</a><br/></td></tr>
<tr class="separator:a1f9929061ff8631f9a93e419aff3fc04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa096c117d68e13e5d18eeff3e39cf156"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa096c117d68e13e5d18eeff3e39cf156"></a>
static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#aa096c117d68e13e5d18eeff3e39cf156">pme_grid_points</a> (const <a class="el" href="structpme__setup__t.xhtml">pme_setup_t</a> *setup)</td></tr>
<tr class="memdesc:aa096c117d68e13e5d18eeff3e39cf156"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return product of the number of PME grid points in each dimension. <br/></td></tr>
<tr class="separator:aa096c117d68e13e5d18eeff3e39cf156"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34ad2116d0baa736e0d155ba956bf062"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a34ad2116d0baa736e0d155ba956bf062"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#a34ad2116d0baa736e0d155ba956bf062">print_pme_loadbal_setting</a> (FILE *fplog, const char *name, const <a class="el" href="structpme__setup__t.xhtml">pme_setup_t</a> *setup)</td></tr>
<tr class="memdesc:a34ad2116d0baa736e0d155ba956bf062"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print one load-balancing setting. <br/></td></tr>
<tr class="separator:a34ad2116d0baa736e0d155ba956bf062"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16a63d25c150fe168ee3f07bb7f3951b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a16a63d25c150fe168ee3f07bb7f3951b"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#a16a63d25c150fe168ee3f07bb7f3951b">print_pme_loadbal_settings</a> (pme_load_balancing_t *pme_lb, t_commrec *cr, FILE *fplog, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bNonBondedOnGPU)</td></tr>
<tr class="memdesc:a16a63d25c150fe168ee3f07bb7f3951b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print all load-balancing settings. <br/></td></tr>
<tr class="separator:a16a63d25c150fe168ee3f07bb7f3951b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac60c12ff607e1c19c92884551abc0ccb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac60c12ff607e1c19c92884551abc0ccb"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#ac60c12ff607e1c19c92884551abc0ccb">pme_loadbal_done</a> (pme_load_balancing_t *pme_lb, t_commrec *cr, FILE *fplog, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bNonBondedOnGPU)</td></tr>
<tr class="memdesc:ac60c12ff607e1c19c92884551abc0ccb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finish the PME load balancing and print the settings when fplog!=NULL. <br/></td></tr>
<tr class="separator:ac60c12ff607e1c19c92884551abc0ccb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a82c3f867a9183aef504a831a9af42d5b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a82c3f867a9183aef504a831a9af42d5b"></a>
const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#a82c3f867a9183aef504a831a9af42d5b">PMETunePeriod</a> = 50</td></tr>
<tr class="memdesc:a82c3f867a9183aef504a831a9af42d5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">After 50 nstlist periods of not observing imbalance: never tune PME. <br/></td></tr>
<tr class="separator:a82c3f867a9183aef504a831a9af42d5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd951b7c02ef20cdbb1cb7560a7887c1"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="afd951b7c02ef20cdbb1cb7560a7887c1"></a>
const <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#afd951b7c02ef20cdbb1cb7560a7887c1">loadBalanceTriggerFactor</a> = 1.05</td></tr>
<tr class="memdesc:afd951b7c02ef20cdbb1cb7560a7887c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Trigger PME load balancing at more than 5% PME overload. <br/></td></tr>
<tr class="separator:afd951b7c02ef20cdbb1cb7560a7887c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3416ad0f65857f637b9b471b2f8455f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac3416ad0f65857f637b9b471b2f8455f"></a>
const <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#ac3416ad0f65857f637b9b471b2f8455f">gridScaleFactor</a> = 0.8</td></tr>
<tr class="memdesc:ac3416ad0f65857f637b9b471b2f8455f"><td class="mdescLeft">&#160;</td><td class="mdescRight">In the initial scan, step by grids that are at least a factor 0.8 coarser. <br/></td></tr>
<tr class="separator:ac3416ad0f65857f637b9b471b2f8455f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5197782ccbc778f156ea7e640afab75"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af5197782ccbc778f156ea7e640afab75"></a>
const <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#af5197782ccbc778f156ea7e640afab75">relativeEfficiencyFactor</a> = 1.05</td></tr>
<tr class="memdesc:af5197782ccbc778f156ea7e640afab75"><td class="mdescLeft">&#160;</td><td class="mdescRight">In the initial scan, try to skip grids with uneven x/y/z spacing, checking if the "efficiency" is more than 5% worse than the previous grid. <br/></td></tr>
<tr class="separator:af5197782ccbc778f156ea7e640afab75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae30a0e9e035c9d02c0bc94b0514c82ea"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae30a0e9e035c9d02c0bc94b0514c82ea"></a>
const <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#ae30a0e9e035c9d02c0bc94b0514c82ea">maxRelativeSlowdownAccepted</a> = 1.12</td></tr>
<tr class="memdesc:ae30a0e9e035c9d02c0bc94b0514c82ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rerun until a run is 12% slower setups than the fastest run so far. <br/></td></tr>
<tr class="separator:ae30a0e9e035c9d02c0bc94b0514c82ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7edeafb90f06f118e2f0b876de924ddf"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7edeafb90f06f118e2f0b876de924ddf"></a>
const <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#a7edeafb90f06f118e2f0b876de924ddf">maxFluctuationAccepted</a> = 1.02</td></tr>
<tr class="memdesc:a7edeafb90f06f118e2f0b876de924ddf"><td class="mdescLeft">&#160;</td><td class="mdescRight">If setups get more than 2% faster, do another round to avoid choosing a slower setup due to acceleration or fluctuations. <br/></td></tr>
<tr class="separator:a7edeafb90f06f118e2f0b876de924ddf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1aa04e0fdacf683ca2156a8630f52c21"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pme-load-balancing_8cpp.xhtml#a1aa04e0fdacf683ca2156a8630f52c21">pmelblim_str</a> [epmelblimNR]</td></tr>
<tr class="memdesc:a1aa04e0fdacf683ca2156a8630f52c21"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptive strings matching <a class="el" href="pme-load-balancing_8cpp.xhtml#acc4abd343a4deaafd24e86604641e42f" title="Enumeration whose values describe the effect limiting the load balancing. ">epmelb</a>.  <a href="#a1aa04e0fdacf683ca2156a8630f52c21">More...</a><br/></td></tr>
<tr class="separator:a1aa04e0fdacf683ca2156a8630f52c21"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a198ba46aed56a558409b009aea2c3a89"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void continue_pme_loadbal </td>
          <td>(</td>
          <td class="paramtype">pme_load_balancing_t *&#160;</td>
          <td class="paramname"><em>pme_lb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bDlbUnlocked</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepare for another round of PME load balancing. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pme_lb</td><td>Pointer to PME load balancing struct </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bDlbUnlocked</td><td>TRUE is DLB was locked and is now unlocked</td></tr>
  </table>
  </dd>
</dl>
<p>If the conditions (e.g. DLB off/on, CPU/GPU throttling etc.) changed, the PP/PME balance might change and re-balancing can improve performance. This function adds 2 stages and adjusts the considered setup range. </p>

</div>
</div>
<a class="anchor" id="a2abd83a8749d8d5dade22d19aef85f5f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void pme_load_balance </td>
          <td>(</td>
          <td class="paramtype">pme_load_balancing_t *&#160;</td>
          <td class="paramname"><em>pme_lb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fp_err</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fp_log</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_inputrec *&#160;</td>
          <td class="paramname"><em>ir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_state *&#160;</td>
          <td class="paramname"><em>state</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>cycles</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">interaction_const_t *&#160;</td>
          <td class="paramname"><em>ic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct nonbonded_verlet_t *&#160;</td>
          <td class="paramname"><em>nbv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct gmx_pme_t **&#160;</td>
          <td class="paramname"><em>pmedata</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_int64_t&#160;</td>
          <td class="paramname"><em>step</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Process the timings and try to adjust the PME grid and Coulomb cut-off. </p>
<p>The adjustment is done to generate a different non-bonded PP and PME load. With separate PME ranks (PP and PME on different processes) or with a GPU (PP on GPU, PME on CPU), PP and PME run on different resources and changing the load will affect the load balance and performance. The total time for a set of integration steps is monitored and a range of grid/cut-off setups is scanned. After calling pme_load_balance many times and acquiring enough statistics, the best performing setup is chosen. Here we try to take into account fluctuations and changes due to external factors as well as DD load balancing. </p>

</div>
</div>
<a class="anchor" id="a1f9929061ff8631f9a93e419aff3fc04"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_loadbal_do </td>
          <td>(</td>
          <td class="paramtype">pme_load_balancing_t *&#160;</td>
          <td class="paramname"><em>pme_lb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fp_err</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fp_log</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_inputrec *&#160;</td>
          <td class="paramname"><em>ir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_forcerec *&#160;</td>
          <td class="paramname"><em>fr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">t_state *&#160;</td>
          <td class="paramname"><em>state</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_wallcycle_t&#160;</td>
          <td class="paramname"><em>wcycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_int64_t&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_int64_t&#160;</td>
          <td class="paramname"><em>step_rel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> *&#160;</td>
          <td class="paramname"><em>bPrinting</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Process cycles and PME load balance when necessary. </p>
<p>Process the cycles measured over the last nstlist steps and then either continue balancing or check if we need to trigger balancing. Should be called after the ewcSTEP cycle counter has been stopped. Returns if the load balancing is printing to fp_err. </p>

</div>
</div>
<a class="anchor" id="a5ccd7a103c94125cce0756fa5e145029"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pme_loadbal_init </td>
          <td>(</td>
          <td class="paramtype">pme_load_balancing_t **&#160;</td>
          <td class="paramname"><em>pme_lb_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct t_commrec *&#160;</td>
          <td class="paramname"><em>cr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fp_log</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_inputrec *&#160;</td>
          <td class="paramname"><em>ir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">matrix&#160;</td>
          <td class="paramname"><em>box</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interaction_const_t *&#160;</td>
          <td class="paramname"><em>ic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct gmx_pme_t *&#160;</td>
          <td class="paramname"><em>pmedata</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bUseGPU</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> *&#160;</td>
          <td class="paramname"><em>bPrinting</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the PP-PME load balacing data and infrastructure. </p>
<p>Initialize the PP-PME load balacing data and infrastructure. The actual load balancing might start right away, later or never. Returns in bPrinting whether the load balancing is printing to fp_err. The PME grid in pmedata is reused for smaller grids to lower the memory usage. </p>

</div>
</div>
<a class="anchor" id="acb6553fb7c4e16c7512e4786057fd1e1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void switch_to_stage1 </td>
          <td>(</td>
          <td class="paramtype">pme_load_balancing_t *&#160;</td>
          <td class="paramname"><em>pme_lb</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Switch load balancing to stage 1. </p>
<p>In this stage, only reasonably fast setups are run again. </p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a class="anchor" id="a1aa04e0fdacf683ca2156a8630f52c21"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* pmelblim_str[epmelblimNR]</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">=</div>
<div class="line">{ <span class="stringliteral">&quot;no&quot;</span>, <span class="stringliteral">&quot;box size&quot;</span>, <span class="stringliteral">&quot;domain decompostion&quot;</span>, <span class="stringliteral">&quot;PME grid restriction&quot;</span> }</div>
</div><!-- fragment -->
<p>Descriptive strings matching <a class="el" href="pme-load-balancing_8cpp.xhtml#acc4abd343a4deaafd24e86604641e42f" title="Enumeration whose values describe the effect limiting the load balancing. ">epmelb</a>. </p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:20:34 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
