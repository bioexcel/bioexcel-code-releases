<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::internal Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li class="current"><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.xhtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.xhtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="namespacegmx_1_1internal.xhtml">internal</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">gmx::internal Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Internal GROMACS namespace. </p>
<p>This namespace is used to contain some implementation-specific functions and classes. These are not meant for direct user access, but typically reside in public headers because of implementation reasons. </p>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacegmx_1_1internal_1_1anonymous__namespace_02selection_8cpp_03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal_1_1anonymous__namespace_02selection_8cpp_03.xhtml">anonymous_namespace{selection.cpp}</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1AnalysisDataHandleImpl.xhtml">AnalysisDataHandleImpl</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Private implementation class for <a class="el" href="classgmx_1_1AnalysisDataHandle.xhtml" title="Handle for inserting data into AnalysisData. ">AnalysisDataHandle</a>.  <a href="classgmx_1_1internal_1_1AnalysisDataHandleImpl.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1AnalysisDataStorageImpl.xhtml">AnalysisDataStorageImpl</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Private implementation class for <a class="el" href="classgmx_1_1AnalysisDataStorage.xhtml" title="Helper class that implements storage of data. ">AnalysisDataStorage</a>.  <a href="classgmx_1_1internal_1_1AnalysisDataStorageImpl.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1AnalysisDataStorageFrameData.xhtml">AnalysisDataStorageFrameData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal representation for a single stored frame.  <a href="classgmx_1_1internal_1_1AnalysisDataStorageFrameData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1BasicAverageHistogramModule.xhtml">BasicAverageHistogramModule</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements average histogram module that averages per-frame histograms.  <a href="classgmx_1_1internal_1_1BasicAverageHistogramModule.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1BasicHistogramImpl.xhtml">BasicHistogramImpl</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for private implementation classes for histogram modules.  <a href="classgmx_1_1internal_1_1BasicHistogramImpl.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1EnumIndexStoreInterface.xhtml">EnumIndexStoreInterface</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for handling storage of the enum indexes.  <a href="classgmx_1_1internal_1_1EnumIndexStoreInterface.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1EnumIndexStore.xhtml">EnumIndexStore</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type-specific implementation for <a class="el" href="classgmx_1_1internal_1_1EnumIndexStoreInterface.xhtml" title="Interface for handling storage of the enum indexes. ">EnumIndexStoreInterface</a>.  <a href="classgmx_1_1internal_1_1EnumIndexStore.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1OptionsImpl.xhtml">OptionsImpl</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Private implementation class for <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">Options</a>.  <a href="classgmx_1_1internal_1_1OptionsImpl.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1SelectionData.xhtml">SelectionData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal data for a single selection.  <a href="classgmx_1_1internal_1_1SelectionData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1internal_1_1IExceptionInfo.xhtml">IExceptionInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for <a class="el" href="classgmx_1_1ExceptionInfo.xhtml" title="Stores additional context information for exceptions. ">ExceptionInfo</a>.  <a href="classgmx_1_1internal_1_1IExceptionInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a10329904859eb4035ac1a2464a9745b2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a10329904859eb4035ac1a2464a9745b2"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1AnalysisDataStorageFrame.xhtml">AnalysisDataStorageFrame</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#a10329904859eb4035ac1a2464a9745b2">AnalysisDataFrameBuilderPointer</a></td></tr>
<tr class="memdesc:a10329904859eb4035ac1a2464a9745b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer type for managing a storage frame builder. <br/></td></tr>
<tr class="separator:a10329904859eb4035ac1a2464a9745b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac21a2a7809b800b7a38d52106cb23576"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac21a2a7809b800b7a38d52106cb23576"></a>
typedef std::vector<br class="typebreak"/>
&lt; std::exception_ptr &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#ac21a2a7809b800b7a38d52106cb23576">NestedExceptionList</a></td></tr>
<tr class="memdesc:ac21a2a7809b800b7a38d52106cb23576"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal container type for storing a list of nested exceptions. <br/></td></tr>
<tr class="separator:ac21a2a7809b800b7a38d52106cb23576"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8255fddd22431a907c2932b034f75023"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8255fddd22431a907c2932b034f75023"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1internal_1_1IExceptionInfo.xhtml">IExceptionInfo</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#a8255fddd22431a907c2932b034f75023">ExceptionInfoPointer</a></td></tr>
<tr class="memdesc:a8255fddd22431a907c2932b034f75023"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer to manage <a class="el" href="classgmx_1_1internal_1_1IExceptionInfo.xhtml" title="Base class for ExceptionInfo. ">IExceptionInfo</a> ownership. <br/></td></tr>
<tr class="separator:a8255fddd22431a907c2932b034f75023"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga236f81451afd5086f506bfb27fe1d827"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml">AbstractOptionStorage</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__options.xhtml#ga236f81451afd5086f506bfb27fe1d827">createEnumOptionStorage</a> (const <a class="el" href="classgmx_1_1AbstractOption.xhtml">AbstractOption</a> &amp;option, const char *const *enumValues, int count, int defaultValue, int defaultValueIfSet, <a class="el" href="classgmx_1_1internal_1_1EnumIndexStoreInterface.xhtml">EnumIndexStoreInterface</a> *<a class="el" href="namespacegmx.xhtml#a9c1227e97a6084a280a611c2934c8ee1">store</a>)</td></tr>
<tr class="memdesc:ga236f81451afd5086f506bfb27fe1d827"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper to create <a class="el" href="classgmx_1_1EnumOptionStorage.xhtml" title="Converts, validates, and stores enum values. ">EnumOptionStorage</a> instances.  <a href="group__module__options.xhtml#ga236f81451afd5086f506bfb27fe1d827">More...</a><br/></td></tr>
<tr class="separator:ga236f81451afd5086f506bfb27fe1d827"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ad671bf11130f20a61b343200ed952d"><td class="memItemLeft" align="right" valign="top">static void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#a2ad671bf11130f20a61b343200ed952d">alignedMallocGeneric</a> (std::size_t bytes, std::size_t alignment)</td></tr>
<tr class="memdesc:a2ad671bf11130f20a61b343200ed952d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate aligned memory in a fully portable way.  <a href="#a2ad671bf11130f20a61b343200ed952d">More...</a><br/></td></tr>
<tr class="separator:a2ad671bf11130f20a61b343200ed952d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9e58bfac927013d9b274c8162bb8f0b"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#ab9e58bfac927013d9b274c8162bb8f0b">alignedFreeGeneric</a> (void *p)</td></tr>
<tr class="memdesc:ab9e58bfac927013d9b274c8162bb8f0b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free aligned memory.  <a href="#ab9e58bfac927013d9b274c8162bb8f0b">More...</a><br/></td></tr>
<tr class="separator:ab9e58bfac927013d9b274c8162bb8f0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac594ce6eb0ebb9ad123269472e43eb8e"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#ac594ce6eb0ebb9ad123269472e43eb8e">alignedMalloc</a> (std::size_t bytes)</td></tr>
<tr class="memdesc:ac594ce6eb0ebb9ad123269472e43eb8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate aligned memory.  <a href="#ac594ce6eb0ebb9ad123269472e43eb8e">More...</a><br/></td></tr>
<tr class="separator:ac594ce6eb0ebb9ad123269472e43eb8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00349251434a6c99f7a6d1bfe1263107"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#a00349251434a6c99f7a6d1bfe1263107">alignedFree</a> (void *p)</td></tr>
<tr class="memdesc:a00349251434a6c99f7a6d1bfe1263107"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free aligned memory.  <a href="#a00349251434a6c99f7a6d1bfe1263107">More...</a><br/></td></tr>
<tr class="separator:a00349251434a6c99f7a6d1bfe1263107"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga921af955af13677427b80c3237a798fe"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga921af955af13677427b80c3237a798fe"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga921af955af13677427b80c3237a798fe">ignoreValueHelper</a> (const T &amp;)</td></tr>
<tr class="memdesc:ga921af955af13677427b80c3237a798fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper for ignoring values in macros.  <a href="group__module__utility.xhtml#ga921af955af13677427b80c3237a798fe">More...</a><br/></td></tr>
<tr class="separator:ga921af955af13677427b80c3237a798fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c0ea704fa958e9e7c79e7484a2d6f6b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3c0ea704fa958e9e7c79e7484a2d6f6b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1internal.xhtml#a3c0ea704fa958e9e7c79e7484a2d6f6b">current_function_helper</a> ()</td></tr>
<tr class="memdesc:a3c0ea704fa958e9e7c79e7484a2d6f6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper for defining GMX_CURRENT_FUNCTION. <br/></td></tr>
<tr class="separator:a3c0ea704fa958e9e7c79e7484a2d6f6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga34257490d770efb0f6a87adeef2629c6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga34257490d770efb0f6a87adeef2629c6">printFatalErrorHeader</a> (FILE *fp, const char *title, const char *func, const char *file, int line)</td></tr>
<tr class="memdesc:ga34257490d770efb0f6a87adeef2629c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats a common header for fatal error messages.  <a href="group__module__utility.xhtml#ga34257490d770efb0f6a87adeef2629c6">More...</a><br/></td></tr>
<tr class="separator:ga34257490d770efb0f6a87adeef2629c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0a42e4f258d42ec3a31c6a633de8d5da"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga0a42e4f258d42ec3a31c6a633de8d5da">printFatalErrorMessageLine</a> (FILE *fp, const char *text, int indent)</td></tr>
<tr class="memdesc:ga0a42e4f258d42ec3a31c6a633de8d5da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats a line of fatal error message text.  <a href="group__module__utility.xhtml#ga0a42e4f258d42ec3a31c6a633de8d5da">More...</a><br/></td></tr>
<tr class="separator:ga0a42e4f258d42ec3a31c6a633de8d5da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadcb892c734184fade6b913a4d3a66aa7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gadcb892c734184fade6b913a4d3a66aa7">printFatalErrorFooter</a> (FILE *fp)</td></tr>
<tr class="memdesc:gadcb892c734184fade6b913a4d3a66aa7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats a common footer for fatal error messages.  <a href="group__module__utility.xhtml#gadcb892c734184fade6b913a4d3a66aa7">More...</a><br/></td></tr>
<tr class="separator:gadcb892c734184fade6b913a4d3a66aa7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaebf12d5435f39db87d2627d024b0b4c1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaebf12d5435f39db87d2627d024b0b4c1">assertHandler</a> (const char *condition, const char *msg, const char *func, const char *file, int line)</td></tr>
<tr class="memdesc:gaebf12d5435f39db87d2627d024b0b4c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when an assert fails.  <a href="group__module__utility.xhtml#gaebf12d5435f39db87d2627d024b0b4c1">More...</a><br/></td></tr>
<tr class="separator:gaebf12d5435f39db87d2627d024b0b4c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a00349251434a6c99f7a6d1bfe1263107"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::internal::alignedFree </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Free aligned memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>Memory pointer previously returned from <a class="el" href="namespacegmx_1_1internal.xhtml#ac594ce6eb0ebb9ad123269472e43eb8e" title="Allocate aligned memory. ">gmx::internal::alignedMalloc()</a></td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This routine should only be called with pointers obtained from <a class="el" href="namespacegmx_1_1internal.xhtml#ac594ce6eb0ebb9ad123269472e43eb8e" title="Allocate aligned memory. ">gmx::internal::alignedMalloc()</a>, and absolutely not any pointers obtained the system malloc(). </dd></dl>

</div>
</div>
<a class="anchor" id="ab9e58bfac927013d9b274c8162bb8f0b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::internal::alignedFreeGeneric </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Free aligned memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>Memory pointer previously returned from gmx::internal::alignedFreePortable().</td></tr>
  </table>
  </dd>
</dl>
<p>Since this routine relies on the original pointer being stored just before the memory area p points to, bad things will happen if you call this routine with a pointer obtained any other way, or if you call the system free() with a pointer obtained from <a class="el" href="namespacegmx_1_1internal.xhtml#ac594ce6eb0ebb9ad123269472e43eb8e" title="Allocate aligned memory. ">std::alignedMalloc()</a>.</p>
<dl class="section note"><dt>Note</dt><dd>This is an internal routine that should only be called from <a class="el" href="namespacegmx_1_1internal.xhtml#a00349251434a6c99f7a6d1bfe1263107" title="Free aligned memory. ">gmx::alignedFree()</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="ac594ce6eb0ebb9ad123269472e43eb8e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void * gmx::internal::alignedMalloc </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>bytes</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocate aligned memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bytes</td><td>Amount of memory (bytes) to allocate. It is valid to ask for 0 bytes, which will return a non-null pointer that is properly aligned and padded (but that you should not use).</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Valid pointer if the allocation worked, otherwise nullptr.</dd></dl>
<p>The memory will always be aligned to 128 bytes, which is our estimate of the longest cache lines on architectures currently in use. It will also be padded by the same amount at the end of the area, to help avoid false cache sharing.</p>
<dl class="section note"><dt>Note</dt><dd>Memory allocated with this routine must be released with <a class="el" href="namespacegmx_1_1internal.xhtml#a00349251434a6c99f7a6d1bfe1263107" title="Free aligned memory. ">gmx::internal::alignedFree()</a>, and absolutely not the system free(). </dd></dl>

</div>
</div>
<a class="anchor" id="a2ad671bf11130f20a61b343200ed952d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void* gmx::internal::alignedMallocGeneric </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>alignment</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allocate aligned memory in a fully portable way. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bytes</td><td>Amount of memory (bytes) to allocate. The routine will return nullptr if the allocation fails. However, note that asking for zero bytes will return a pointer that is non-null and properly aligned (but obviously you cannot use it, since you promised not to access data beyond the 0 bytes you asked for).</td></tr>
    <tr><td class="paramname">alignment</td><td>Alignment specification in bytes, must be a power of 2.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Nonzero pointer if the allocation worked, otherwise nullptr. This routine should only be called from <a class="el" href="namespacegmx_1_1internal.xhtml#ac594ce6eb0ebb9ad123269472e43eb8e" title="Allocate aligned memory. ">alignedMalloc()</a>, which also does the checking for valid values. This particular function is used for platforms where we have no control of the alignment of memory returned by the system. Instead, we increase the amount of memory requested internally such that we both can create a pointer inside this memory that fulfills the memory alignment requested, and that we have room to store the original pointer just before this area.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is an internal routine that should only be called from <a class="el" href="namespacegmx_1_1internal.xhtml#ac594ce6eb0ebb9ad123269472e43eb8e" title="Allocate aligned memory. ">gmx::alignedMalloc()</a>. Just like system-provided routines, it provides memory that is aligned - but not padded. </dd></dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:20:48 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
