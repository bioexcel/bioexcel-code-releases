<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/mdlib/nbnxn_ocl/nbnxn_ocl_data_mgmt.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_71392c6f4b1ed3a32ba5c064e868a1ba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a798d384400d41a9e6864d9b1b8753fe.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_b988dc028879cf86b2e2d3976beb6cdb.xhtml">mdlib</a></li><li class="navelem"><a class="el" href="dir_6b5b7efdd20568ac96099d3d02ad84c4.xhtml">nbnxn_ocl</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">nbnxn_ocl_data_mgmt.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="gmxpre_8h.xhtml">gmxpre.h</a>&quot;</code><br/>
<code>#include &lt;assert.h&gt;</code><br/>
<code>#include &lt;math.h&gt;</code><br/>
<code>#include &lt;stdarg.h&gt;</code><br/>
<code>#include &lt;stdio.h&gt;</code><br/>
<code>#include &lt;stdlib.h&gt;</code><br/>
<code>#include &lt;string.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="gpu__utils_8h.xhtml">gromacs/gpu_utils/gpu_utils.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="oclutils_8h.xhtml">gromacs/gpu_utils/oclutils.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/hardware/detecthardware.h&quot;</code><br/>
<code>#include &quot;gromacs/hardware/gpu_hw_info.h&quot;</code><br/>
<code>#include &quot;gromacs/math/vectypes.h&quot;</code><br/>
<code>#include &quot;gromacs/mdlib/force_flags.h&quot;</code><br/>
<code>#include &quot;gromacs/mdlib/nb_verlet.h&quot;</code><br/>
<code>#include &quot;gromacs/mdlib/nbnxn_consts.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="nbnxn__gpu_8h.xhtml">gromacs/mdlib/nbnxn_gpu.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="nbnxn__gpu__data__mgmt_8h.xhtml">gromacs/mdlib/nbnxn_gpu_data_mgmt.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="nbnxn__gpu__jit__support_8h.xhtml">gromacs/mdlib/nbnxn_gpu_jit_support.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/mdtypes/interaction_const.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="md__enums_8h.xhtml">gromacs/mdtypes/md_enums.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/pbcutil/ishift.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="gpu__timing_8h.xhtml">gromacs/timing/gpu_timing.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="cstringutil_8h.xhtml">gromacs/utility/cstringutil.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="fatalerror_8h.xhtml">gromacs/utility/fatalerror.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="gmxassert_8h.xhtml">gromacs/utility/gmxassert.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="real_8h.xhtml">gromacs/utility/real.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="smalloc_8h.xhtml">gromacs/utility/smalloc.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="nbnxn__ocl__internal_8h.xhtml">nbnxn_ocl_internal.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="nbnxn__ocl__types_8h.xhtml">nbnxn_ocl_types.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for nbnxn_ocl_data_mgmt.cpp:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="nbnxn__ocl__data__mgmt_8cpp__incl.svg" width="2776" height="306"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Define OpenCL implementation of <a class="el" href="nbnxn__gpu__data__mgmt_8h.xhtml" title="Declare interface for GPU data transfer for NBNXN module. ">nbnxn_gpu_data_mgmt.h</a>. </p>
<dl class="section author"><dt>Author</dt><dd>Anca Hamuraru <a href="#" onclick="location.href='mai'+'lto:'+'anc'+'a@'+'str'+'ea'+'mco'+'mp'+'uti'+'ng'+'.eu'; return false;">anca@<span style="display: none;">.nosp@m.</span>stre<span style="display: none;">.nosp@m.</span>amcom<span style="display: none;">.nosp@m.</span>puti<span style="display: none;">.nosp@m.</span>ng.eu</a> </dd>
<dd>
Dimitrios Karkoulis <a href="#" onclick="location.href='mai'+'lto:'+'dim'+'it'+'ris'+'.k'+'ark'+'ou'+'lis'+'@g'+'mai'+'l.'+'com'; return false;">dimit<span style="display: none;">.nosp@m.</span>ris.<span style="display: none;">.nosp@m.</span>karko<span style="display: none;">.nosp@m.</span>ulis<span style="display: none;">.nosp@m.</span>@gmai<span style="display: none;">.nosp@m.</span>l.co<span style="display: none;">.nosp@m.</span>m</a> </dd>
<dd>
Teemu Virolainen <a href="#" onclick="location.href='mai'+'lto:'+'tee'+'mu'+'@st'+'re'+'amc'+'om'+'put'+'in'+'g.e'+'u'; return false;">teemu<span style="display: none;">.nosp@m.</span>@str<span style="display: none;">.nosp@m.</span>eamco<span style="display: none;">.nosp@m.</span>mput<span style="display: none;">.nosp@m.</span>ing.e<span style="display: none;">.nosp@m.</span>u</a> </dd>
<dd>
Szilárd Páll <a href="#" onclick="location.href='mai'+'lto:'+'pal'+'l.'+'szi'+'la'+'rd@'+'gm'+'ail'+'.c'+'om'; return false;">pall.<span style="display: none;">.nosp@m.</span>szil<span style="display: none;">.nosp@m.</span>ard@g<span style="display: none;">.nosp@m.</span>mail<span style="display: none;">.nosp@m.</span>.com</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a98a149c4fe1a12bb09dd3cffa8f2db3d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a98a149c4fe1a12bb09dd3cffa8f2db3d">useLjCombRule</a> (int vdwType)</td></tr>
<tr class="memdesc:a98a149c4fe1a12bb09dd3cffa8f2db3d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if LJ combination rules are used in the non-bonded kernels.  <a href="#a98a149c4fe1a12bb09dd3cffa8f2db3d">More...</a><br/></td></tr>
<tr class="separator:a98a149c4fe1a12bb09dd3cffa8f2db3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7e8b26580a66389d5d452f0e626ecec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#ae7e8b26580a66389d5d452f0e626ecec">ocl_free_buffered</a> (cl_mem d_ptr, int *n, int *nalloc)</td></tr>
<tr class="memdesc:ae7e8b26580a66389d5d452f0e626ecec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free device buffers.  <a href="#ae7e8b26580a66389d5d452f0e626ecec">More...</a><br/></td></tr>
<tr class="separator:ae7e8b26580a66389d5d452f0e626ecec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a574283c41135bdeb3d14791fecfcf3cf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a574283c41135bdeb3d14791fecfcf3cf">ocl_realloc_buffered</a> (cl_mem *d_dest, void *h_src, size_t type_size, int *curr_size, int *curr_alloc_size, int req_size, cl_context context, cl_command_queue s, bool bAsync=true, cl_event *copy_event=NULL)</td></tr>
<tr class="memdesc:a574283c41135bdeb3d14791fecfcf3cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reallocation device buffers.  <a href="#a574283c41135bdeb3d14791fecfcf3cf">More...</a><br/></td></tr>
<tr class="separator:a574283c41135bdeb3d14791fecfcf3cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea538590c4dacbc640c096baa2d758a0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aea538590c4dacbc640c096baa2d758a0"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#aea538590c4dacbc640c096baa2d758a0">free_ocl_buffer</a> (cl_mem *buffer)</td></tr>
<tr class="memdesc:aea538590c4dacbc640c096baa2d758a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Releases the input OpenCL buffer. <br/></td></tr>
<tr class="separator:aea538590c4dacbc640c096baa2d758a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada8c5674a18d2b841eabaa6ab237d0ab"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#ada8c5674a18d2b841eabaa6ab237d0ab">init_ewald_coulomb_force_table</a> (const interaction_const_t *ic, <a class="el" href="nbnxn__ocl__types_8h.xhtml#a843768e0200ba88ef306abedc4a2dc19">cl_nbparam_t</a> *nbp, const <a class="el" href="structgmx__device__runtime__data__t.xhtml">gmx_device_runtime_data_t</a> *runData)</td></tr>
<tr class="memdesc:ada8c5674a18d2b841eabaa6ab237d0ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tabulates the Ewald Coulomb force and initializes the size/scale and the table GPU array.  <a href="#ada8c5674a18d2b841eabaa6ab237d0ab">More...</a><br/></td></tr>
<tr class="separator:ada8c5674a18d2b841eabaa6ab237d0ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9667c8b4476a714bb5815f318eedad3"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac9667c8b4476a714bb5815f318eedad3"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#ac9667c8b4476a714bb5815f318eedad3">init_atomdata_first</a> (<a class="el" href="nbnxn__ocl__types_8h.xhtml#ad46034f805d8534649b847494c3fc9d1">cl_atomdata_t</a> *ad, int ntypes, <a class="el" href="structgmx__device__runtime__data__t.xhtml">gmx_device_runtime_data_t</a> *runData)</td></tr>
<tr class="memdesc:ac9667c8b4476a714bb5815f318eedad3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the atomdata structure first time, it only gets filled at pair-search. <br/></td></tr>
<tr class="separator:ac9667c8b4476a714bb5815f318eedad3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7f528b6996590405b566af265c49bc4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac7f528b6996590405b566af265c49bc4"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#ac7f528b6996590405b566af265c49bc4">set_cutoff_parameters</a> (<a class="el" href="nbnxn__ocl__types_8h.xhtml#a843768e0200ba88ef306abedc4a2dc19">cl_nbparam_t</a> *nbp, const interaction_const_t *ic)</td></tr>
<tr class="memdesc:ac7f528b6996590405b566af265c49bc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies all parameters related to the cut-off from ic to nbp. <br/></td></tr>
<tr class="separator:ac7f528b6996590405b566af265c49bc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7dd4672169092d161d9b6216f248019b"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a7dd4672169092d161d9b6216f248019b">map_interaction_types_to_gpu_kernel_flavors</a> (const interaction_const_t *ic, int combRule, int *gpu_eeltype, int *gpu_vdwtype)</td></tr>
<tr class="memdesc:a7dd4672169092d161d9b6216f248019b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the kinds of electrostatics and Vdw OpenCL kernels that will be used.  <a href="#a7dd4672169092d161d9b6216f248019b">More...</a><br/></td></tr>
<tr class="separator:a7dd4672169092d161d9b6216f248019b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77a59be1a60683432849585245113d63"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a77a59be1a60683432849585245113d63"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a77a59be1a60683432849585245113d63">init_nbparam</a> (<a class="el" href="nbnxn__ocl__types_8h.xhtml#a843768e0200ba88ef306abedc4a2dc19">cl_nbparam_t</a> *nbp, const interaction_const_t *ic, const nbnxn_atomdata_t *nbat, const <a class="el" href="structgmx__device__runtime__data__t.xhtml">gmx_device_runtime_data_t</a> *runData)</td></tr>
<tr class="memdesc:a77a59be1a60683432849585245113d63"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the nonbonded parameter data structure. <br/></td></tr>
<tr class="separator:a77a59be1a60683432849585245113d63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a178c39cc9d95bb061d9173b31da79df0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a178c39cc9d95bb061d9173b31da79df0"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a178c39cc9d95bb061d9173b31da79df0">nbnxn_gpu_pme_loadbal_update_param</a> (const nonbonded_verlet_t *nbv, const interaction_const_t *ic)</td></tr>
<tr class="memdesc:a178c39cc9d95bb061d9173b31da79df0"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is documented in the header file. <br/></td></tr>
<tr class="separator:a178c39cc9d95bb061d9173b31da79df0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63351dd68560130324bf5cd940cd8ab9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a63351dd68560130324bf5cd940cd8ab9"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a63351dd68560130324bf5cd940cd8ab9">init_plist</a> (<a class="el" href="nbnxn__ocl__types_8h.xhtml#a6cb179b60c07792c061f6dad58ae770b">cl_plist_t</a> *pl)</td></tr>
<tr class="memdesc:a63351dd68560130324bf5cd940cd8ab9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the pair list data structure. <br/></td></tr>
<tr class="separator:a63351dd68560130324bf5cd940cd8ab9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf3846b049047fbe10a9a6f599c20b2b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="acf3846b049047fbe10a9a6f599c20b2b"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#acf3846b049047fbe10a9a6f599c20b2b">init_timers</a> (<a class="el" href="nbnxn__ocl__types_8h.xhtml#a44dbb04c31b2af0fced3ce4a7f3464dd">cl_timers_t</a> *t, bool bUseTwoStreams)</td></tr>
<tr class="memdesc:acf3846b049047fbe10a9a6f599c20b2b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the timer data structure. <br/></td></tr>
<tr class="separator:acf3846b049047fbe10a9a6f599c20b2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec2eb692e841afe52cc14c3674a10a0e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aec2eb692e841afe52cc14c3674a10a0e"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#aec2eb692e841afe52cc14c3674a10a0e">init_timings</a> (<a class="el" href="structgmx__wallclock__gpu__t.xhtml">gmx_wallclock_gpu_t</a> *t)</td></tr>
<tr class="memdesc:aec2eb692e841afe52cc14c3674a10a0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the timings data structure. <br/></td></tr>
<tr class="separator:aec2eb692e841afe52cc14c3674a10a0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5b4dc6c926444afd293f7079eaa2da2"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#ae5b4dc6c926444afd293f7079eaa2da2">nbnxn_gpu_create_context</a> (<a class="el" href="structgmx__device__runtime__data__t.xhtml">gmx_device_runtime_data_t</a> *runtimeData, const <a class="el" href="structgmx__device__info__t.xhtml">gmx_device_info_t</a> *devInfo, int rank)</td></tr>
<tr class="memdesc:ae5b4dc6c926444afd293f7079eaa2da2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates context for OpenCL GPU given by <code>mygpu</code>.  <a href="#ae5b4dc6c926444afd293f7079eaa2da2">More...</a><br/></td></tr>
<tr class="separator:ae5b4dc6c926444afd293f7079eaa2da2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19694f7275303e3e51bf4e28b982df0f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a19694f7275303e3e51bf4e28b982df0f"></a>
static cl_kernel&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a19694f7275303e3e51bf4e28b982df0f">nbnxn_gpu_create_kernel</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *nb, const char *kernel_name)</td></tr>
<tr class="memdesc:a19694f7275303e3e51bf4e28b982df0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the OpenCL kernel pointers of the nbnxn_ocl_ptr_t input data structure. <br/></td></tr>
<tr class="separator:a19694f7275303e3e51bf4e28b982df0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a734b64bb09784b4a812c5bfe30e86138"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a734b64bb09784b4a812c5bfe30e86138"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a734b64bb09784b4a812c5bfe30e86138">nbnxn_ocl_clear_e_fshift</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *nb)</td></tr>
<tr class="memdesc:a734b64bb09784b4a812c5bfe30e86138"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears nonbonded shift force output array and energy outputs on the GPU. <br/></td></tr>
<tr class="separator:a734b64bb09784b4a812c5bfe30e86138"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d98854da29204a4c03cab74224b8ded"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0d98854da29204a4c03cab74224b8ded"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a0d98854da29204a4c03cab74224b8ded">nbnxn_gpu_init_kernels</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *nb)</td></tr>
<tr class="memdesc:a0d98854da29204a4c03cab74224b8ded"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the OpenCL kernel pointers of the nbnxn_ocl_ptr_t input data structure. <br/></td></tr>
<tr class="separator:a0d98854da29204a4c03cab74224b8ded"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a217d9f0f17a9c2481bf2a1183b4c84ee"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a217d9f0f17a9c2481bf2a1183b4c84ee">nbnxn_ocl_init_const</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *nb, const interaction_const_t *ic, const nonbonded_verlet_group_t *nbv_group)</td></tr>
<tr class="memdesc:a217d9f0f17a9c2481bf2a1183b4c84ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes simulation constant data.  <a href="#a217d9f0f17a9c2481bf2a1183b4c84ee">More...</a><br/></td></tr>
<tr class="separator:a217d9f0f17a9c2481bf2a1183b4c84ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae59ded984913f5c1e4cf995f77628b74"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae59ded984913f5c1e4cf995f77628b74"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#ae59ded984913f5c1e4cf995f77628b74">nbnxn_gpu_init</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> **p_nb, const gmx_gpu_info_t *gpu_info, const gmx_gpu_opt_t *gpu_opt, const interaction_const_t *ic, nonbonded_verlet_group_t *nbv_grp, int my_gpu_index, int rank, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bLocalAndNonlocal)</td></tr>
<tr class="memdesc:ae59ded984913f5c1e4cf995f77628b74"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is documented in the header file. <br/></td></tr>
<tr class="separator:ae59ded984913f5c1e4cf995f77628b74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6177fc38bed52cccc5e29dd9409cce7d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6177fc38bed52cccc5e29dd9409cce7d"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a6177fc38bed52cccc5e29dd9409cce7d">nbnxn_ocl_clear_f</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *nb, int natoms_clear)</td></tr>
<tr class="memdesc:a6177fc38bed52cccc5e29dd9409cce7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears the first natoms_clear elements of the GPU nonbonded force output array. <br/></td></tr>
<tr class="separator:a6177fc38bed52cccc5e29dd9409cce7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15f6165846a1600706f3da5e6749e04e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a15f6165846a1600706f3da5e6749e04e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a15f6165846a1600706f3da5e6749e04e">nbnxn_gpu_clear_outputs</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *nb, int flags)</td></tr>
<tr class="memdesc:a15f6165846a1600706f3da5e6749e04e"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is documented in the header file. <br/></td></tr>
<tr class="separator:a15f6165846a1600706f3da5e6749e04e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9df8b3c697d9dd17d6c599a7274ca1e0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9df8b3c697d9dd17d6c599a7274ca1e0"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a9df8b3c697d9dd17d6c599a7274ca1e0">nbnxn_gpu_init_pairlist</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *nb, const nbnxn_pairlist_t *h_plist, int iloc)</td></tr>
<tr class="memdesc:a9df8b3c697d9dd17d6c599a7274ca1e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is documented in the header file. <br/></td></tr>
<tr class="separator:a9df8b3c697d9dd17d6c599a7274ca1e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71b7b68172fcc5aa90e2a7bf7f0a6a88"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a71b7b68172fcc5aa90e2a7bf7f0a6a88"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a71b7b68172fcc5aa90e2a7bf7f0a6a88">nbnxn_gpu_upload_shiftvec</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *nb, const nbnxn_atomdata_t *nbatom)</td></tr>
<tr class="memdesc:a71b7b68172fcc5aa90e2a7bf7f0a6a88"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is documented in the header file. <br/></td></tr>
<tr class="separator:a71b7b68172fcc5aa90e2a7bf7f0a6a88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a429968563fe7033f90f624ee09490a6f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a429968563fe7033f90f624ee09490a6f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a429968563fe7033f90f624ee09490a6f">nbnxn_gpu_init_atomdata</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *nb, const struct nbnxn_atomdata_t *nbat)</td></tr>
<tr class="memdesc:a429968563fe7033f90f624ee09490a6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is documented in the header file. <br/></td></tr>
<tr class="separator:a429968563fe7033f90f624ee09490a6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a748e6c353f7f5141f1ec236c3af65228"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a748e6c353f7f5141f1ec236c3af65228"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a748e6c353f7f5141f1ec236c3af65228">free_kernel</a> (cl_kernel *kernel_ptr)</td></tr>
<tr class="memdesc:a748e6c353f7f5141f1ec236c3af65228"><td class="mdescLeft">&#160;</td><td class="mdescRight">Releases an OpenCL kernel pointer. <br/></td></tr>
<tr class="separator:a748e6c353f7f5141f1ec236c3af65228"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13b6d42aeedaf3a7157427d92098238b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a13b6d42aeedaf3a7157427d92098238b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a13b6d42aeedaf3a7157427d92098238b">free_kernels</a> (cl_kernel *kernels, int count)</td></tr>
<tr class="memdesc:a13b6d42aeedaf3a7157427d92098238b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Releases a list of OpenCL kernel pointers. <br/></td></tr>
<tr class="separator:a13b6d42aeedaf3a7157427d92098238b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb6815b07b481ed2594190e11c3b8c57"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#afb6815b07b481ed2594190e11c3b8c57">free_gpu_device_runtime_data</a> (<a class="el" href="structgmx__device__runtime__data__t.xhtml">gmx_device_runtime_data_t</a> *runData)</td></tr>
<tr class="memdesc:afb6815b07b481ed2594190e11c3b8c57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free the OpenCL runtime data (context and program).  <a href="#afb6815b07b481ed2594190e11c3b8c57">More...</a><br/></td></tr>
<tr class="separator:afb6815b07b481ed2594190e11c3b8c57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59618dcc91f5213e080c8bd3b1a47922"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a59618dcc91f5213e080c8bd3b1a47922"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a59618dcc91f5213e080c8bd3b1a47922">nbnxn_gpu_free</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *nb)</td></tr>
<tr class="memdesc:a59618dcc91f5213e080c8bd3b1a47922"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is documented in the header file. <br/></td></tr>
<tr class="separator:a59618dcc91f5213e080c8bd3b1a47922"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5786a3ad80111e4e2681e6005404eedb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5786a3ad80111e4e2681e6005404eedb"></a>
<a class="el" href="structgmx__wallclock__gpu__t.xhtml">gmx_wallclock_gpu_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a5786a3ad80111e4e2681e6005404eedb">nbnxn_gpu_get_timings</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *nb)</td></tr>
<tr class="memdesc:a5786a3ad80111e4e2681e6005404eedb"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is documented in the header file. <br/></td></tr>
<tr class="separator:a5786a3ad80111e4e2681e6005404eedb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ad788d37edfddeadf33e9e0087e67af"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5ad788d37edfddeadf33e9e0087e67af"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a5ad788d37edfddeadf33e9e0087e67af">nbnxn_gpu_reset_timings</a> (nonbonded_verlet_t *nbv)</td></tr>
<tr class="memdesc:a5ad788d37edfddeadf33e9e0087e67af"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is documented in the header file. <br/></td></tr>
<tr class="separator:a5ad788d37edfddeadf33e9e0087e67af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a69973e4ed05edce5a994ac82734b34"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6a69973e4ed05edce5a994ac82734b34"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#a6a69973e4ed05edce5a994ac82734b34">nbnxn_gpu_min_ci_balanced</a> (<a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *nb)</td></tr>
<tr class="memdesc:a6a69973e4ed05edce5a994ac82734b34"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is documented in the header file. <br/></td></tr>
<tr class="separator:a6a69973e4ed05edce5a994ac82734b34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae97c7089839738a2eb763efa9e88ab0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aae97c7089839738a2eb763efa9e88ab0"></a>
<a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#aae97c7089839738a2eb763efa9e88ab0">nbnxn_gpu_is_kernel_ewald_analytical</a> (const <a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *nb)</td></tr>
<tr class="memdesc:aae97c7089839738a2eb763efa9e88ab0"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is documented in the header file. <br/></td></tr>
<tr class="separator:aae97c7089839738a2eb763efa9e88ab0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:aa4e43c39232f4a5124e374969a8ae9ae"><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="nbnxn__ocl__data__mgmt_8cpp.xhtml#aa4e43c39232f4a5124e374969a8ae9ae">gpu_min_ci_balanced_factor</a> = 50</td></tr>
<tr class="memdesc:aa4e43c39232f4a5124e374969a8ae9ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">This parameter should be determined heuristically from the kernel execution times.  <a href="#aa4e43c39232f4a5124e374969a8ae9ae">More...</a><br/></td></tr>
<tr class="separator:aa4e43c39232f4a5124e374969a8ae9ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="afb6815b07b481ed2594190e11c3b8c57"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void free_gpu_device_runtime_data </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structgmx__device__runtime__data__t.xhtml">gmx_device_runtime_data_t</a> *&#160;</td>
          <td class="paramname"><em>runData</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Free the OpenCL runtime data (context and program). </p>
<p>The function releases the OpenCL context and program assuciated with the device that the calling PP rank is running on.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">runData</td><td>[in] porinter to the structure with runtime data. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ada8c5674a18d2b841eabaa6ab237d0ab"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void init_ewald_coulomb_force_table </td>
          <td>(</td>
          <td class="paramtype">const interaction_const_t *&#160;</td>
          <td class="paramname"><em>ic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="nbnxn__ocl__types_8h.xhtml#a843768e0200ba88ef306abedc4a2dc19">cl_nbparam_t</a> *&#160;</td>
          <td class="paramname"><em>nbp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structgmx__device__runtime__data__t.xhtml">gmx_device_runtime_data_t</a> *&#160;</td>
          <td class="paramname"><em>runData</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tabulates the Ewald Coulomb force and initializes the size/scale and the table GPU array. </p>
<p>If called with an already allocated table, it just re-uploads the table. </p>

</div>
</div>
<a class="anchor" id="a7dd4672169092d161d9b6216f248019b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void map_interaction_types_to_gpu_kernel_flavors </td>
          <td>(</td>
          <td class="paramtype">const interaction_const_t *&#160;</td>
          <td class="paramname"><em>ic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>combRule</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>gpu_eeltype</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>gpu_vdwtype</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the kinds of electrostatics and Vdw OpenCL kernels that will be used. </p>
<p>Respectively, these values are from enum eelOcl and enum evdwOcl. </p>

</div>
</div>
<a class="anchor" id="ae5b4dc6c926444afd293f7079eaa2da2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void nbnxn_gpu_create_context </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structgmx__device__runtime__data__t.xhtml">gmx_device_runtime_data_t</a> *&#160;</td>
          <td class="paramname"><em>runtimeData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structgmx__device__info__t.xhtml">gmx_device_info_t</a> *&#160;</td>
          <td class="paramname"><em>devInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rank</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates context for OpenCL GPU given by <code>mygpu</code>. </p>
<p>A fatal error results if creation fails.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">runtimeData</td><td>runtime data including program and context </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">devInfo</td><td>device info struct </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rank</td><td>MPI rank (for error reporting) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a217d9f0f17a9c2481bf2a1183b4c84ee"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void nbnxn_ocl_init_const </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structgmx__nbnxn__ocl__t.xhtml">gmx_nbnxn_ocl_t</a> *&#160;</td>
          <td class="paramname"><em>nb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interaction_const_t *&#160;</td>
          <td class="paramname"><em>ic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const nonbonded_verlet_group_t *&#160;</td>
          <td class="paramname"><em>nbv_group</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes simulation constant data. </p>
<p>Initializes members of the atomdata and nbparam structs and clears e/fshift output buffers. </p>

</div>
</div>
<a class="anchor" id="ae7e8b26580a66389d5d452f0e626ecec"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ocl_free_buffered </td>
          <td>(</td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>d_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>nalloc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Free device buffers. </p>
<p>If the pointers to the size variables are NULL no resetting happens. </p>

</div>
</div>
<a class="anchor" id="a574283c41135bdeb3d14791fecfcf3cf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ocl_realloc_buffered </td>
          <td>(</td>
          <td class="paramtype">cl_mem *&#160;</td>
          <td class="paramname"><em>d_dest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>h_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>type_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>curr_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>curr_alloc_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>req_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bAsync</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_event *&#160;</td>
          <td class="paramname"><em>copy_event</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reallocation device buffers. </p>
<p>Reallocation of the memory pointed by d_ptr and copying of the data from the location pointed by h_src host-side pointer is done. Allocation is buffered and therefore freeing is only needed if the previously allocated space is not enough. The H2D copy is launched in command queue s and can be done synchronously or asynchronously (the default is the latter). If copy_event is not NULL, on return it will contain an event object identifying the H2D copy. The event can further be used to queue a wait for this operation or to query profiling information. OpenCL equivalent of cu_realloc_buffered. </p>

</div>
</div>
<a class="anchor" id="a98a149c4fe1a12bb09dd3cffa8f2db3d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool useLjCombRule </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>vdwType</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if LJ combination rules are used in the non-bonded kernels. </p>
<p>Full doc in <a class="el" href="nbnxn__ocl__internal_8h.xhtml" title="Internal API of the OpenCL non-bonded module. ">nbnxn_ocl_internal.h</a> </p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a class="anchor" id="aa4e43c39232f4a5124e374969a8ae9ae"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int gpu_min_ci_balanced_factor = 50</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This parameter should be determined heuristically from the kernel execution times. </p>
<p>This value is best for small systems on a single AMD Radeon R9 290X (and about 5% faster than 40, which is the default for CUDA devices). Larger simulation systems were quite insensitive to the value of this parameter. </p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:20:35 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
