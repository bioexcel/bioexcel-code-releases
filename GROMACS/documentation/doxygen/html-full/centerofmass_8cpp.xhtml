<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/selection/centerofmass.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_71392c6f4b1ed3a32ba5c064e868a1ba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a798d384400d41a9e6864d9b1b8753fe.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_aa770a1c85b1dd65249ff2086d775c37.xhtml">selection</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">centerofmass.cpp File Reference<div class="ingroups"><a class="el" href="group__module__selection.xhtml">Parsing and Evaluation of Analysis Selections (selection)</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="gmxpre_8h.xhtml">gmxpre.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="centerofmass_8h.xhtml">centerofmass.h</a>&quot;</code><br/>
<code>#include &quot;gromacs/math/vec.h&quot;</code><br/>
<code>#include &quot;gromacs/pbcutil/pbc.h&quot;</code><br/>
<code>#include &quot;gromacs/topology/block.h&quot;</code><br/>
<code>#include &quot;gromacs/topology/topology.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="gmxassert_8h.xhtml">gromacs/utility/gmxassert.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for centerofmass.cpp:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="centerofmass_8cpp__incl.svg" width="516" height="291"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Implements functions in <a class="el" href="centerofmass_8h.xhtml" title="API for calculation of centers of mass/geometry. ">centerofmass.h</a>. </p>
<dl class="section author"><dt>Author</dt><dd>Teemu Murtola <a href="#" onclick="location.href='mai'+'lto:'+'tee'+'mu'+'.mu'+'rt'+'ola'+'@g'+'mai'+'l.'+'com'; return false;">teemu<span style="display: none;">.nosp@m.</span>.mur<span style="display: none;">.nosp@m.</span>tola@<span style="display: none;">.nosp@m.</span>gmai<span style="display: none;">.nosp@m.</span>l.com</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a6b7ba74ab1695f06f0c76171d6008710"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="centerofmass_8cpp.xhtml#a6b7ba74ab1695f06f0c76171d6008710">gmx_calc_cog</a> (const t_topology *, rvec x[], int nrefat, const int index[], rvec xout)</td></tr>
<tr class="memdesc:a6b7ba74ab1695f06f0c76171d6008710"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate a single center of geometry.  <a href="#a6b7ba74ab1695f06f0c76171d6008710">More...</a><br/></td></tr>
<tr class="separator:a6b7ba74ab1695f06f0c76171d6008710"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b91956bcfcd026f0697171be707dffd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="centerofmass_8cpp.xhtml#a9b91956bcfcd026f0697171be707dffd">gmx_calc_com</a> (const t_topology *top, rvec x[], int nrefat, const int index[], rvec xout)</td></tr>
<tr class="memdesc:a9b91956bcfcd026f0697171be707dffd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate a single center of mass.  <a href="#a9b91956bcfcd026f0697171be707dffd">More...</a><br/></td></tr>
<tr class="separator:a9b91956bcfcd026f0697171be707dffd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accd02b9b50e1fc54695742b9e16817cb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="centerofmass_8cpp.xhtml#accd02b9b50e1fc54695742b9e16817cb">gmx_calc_cog_f</a> (const t_topology *top, rvec f[], int nrefat, const int index[], rvec fout)</td></tr>
<tr class="memdesc:accd02b9b50e1fc54695742b9e16817cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate force on a single center of geometry.  <a href="#accd02b9b50e1fc54695742b9e16817cb">More...</a><br/></td></tr>
<tr class="separator:accd02b9b50e1fc54695742b9e16817cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f9cf57984b751e8c584c6ae47fcd6bf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="centerofmass_8cpp.xhtml#a1f9cf57984b751e8c584c6ae47fcd6bf">gmx_calc_com_f</a> (const t_topology *, rvec f[], int nrefat, const int index[], rvec fout)</td></tr>
<tr class="memdesc:a1f9cf57984b751e8c584c6ae47fcd6bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate force on a single center of mass.  <a href="#a1f9cf57984b751e8c584c6ae47fcd6bf">More...</a><br/></td></tr>
<tr class="separator:a1f9cf57984b751e8c584c6ae47fcd6bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac57928046174a983f26a4f54e9206152"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="centerofmass_8cpp.xhtml#ac57928046174a983f26a4f54e9206152">gmx_calc_comg</a> (const t_topology *top, rvec x[], int nrefat, const int index[], bool bMass, rvec xout)</td></tr>
<tr class="memdesc:ac57928046174a983f26a4f54e9206152"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate a single center of mass/geometry.  <a href="#ac57928046174a983f26a4f54e9206152">More...</a><br/></td></tr>
<tr class="separator:ac57928046174a983f26a4f54e9206152"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a030beb4111d97df92ea9ccebbdd532f8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="centerofmass_8cpp.xhtml#a030beb4111d97df92ea9ccebbdd532f8">gmx_calc_comg_f</a> (const t_topology *top, rvec f[], int nrefat, const int index[], bool bMass, rvec fout)</td></tr>
<tr class="memdesc:a030beb4111d97df92ea9ccebbdd532f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate force on a single center of mass/geometry.  <a href="#a030beb4111d97df92ea9ccebbdd532f8">More...</a><br/></td></tr>
<tr class="separator:a030beb4111d97df92ea9ccebbdd532f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8500222dc4da383fa537ed1677e8328b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="centerofmass_8cpp.xhtml#a8500222dc4da383fa537ed1677e8328b">gmx_calc_cog_pbc</a> (const t_topology *top, rvec x[], <a class="el" href="structt__pbc.xhtml">t_pbc</a> *pbc, int nrefat, const int index[], rvec xout)</td></tr>
<tr class="memdesc:a8500222dc4da383fa537ed1677e8328b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate a single center of geometry iteratively, taking PBC into account.  <a href="#a8500222dc4da383fa537ed1677e8328b">More...</a><br/></td></tr>
<tr class="separator:a8500222dc4da383fa537ed1677e8328b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8561c5843a7376b1d6a66446d59061a5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="centerofmass_8cpp.xhtml#a8561c5843a7376b1d6a66446d59061a5">gmx_calc_com_pbc</a> (const t_topology *top, rvec x[], <a class="el" href="structt__pbc.xhtml">t_pbc</a> *pbc, int nrefat, const int index[], rvec xout)</td></tr>
<tr class="memdesc:a8561c5843a7376b1d6a66446d59061a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate a single center of mass iteratively, taking PBC into account.  <a href="#a8561c5843a7376b1d6a66446d59061a5">More...</a><br/></td></tr>
<tr class="separator:a8561c5843a7376b1d6a66446d59061a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50eb30d38edc2d52717ff8752d225d98"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="centerofmass_8cpp.xhtml#a50eb30d38edc2d52717ff8752d225d98">gmx_calc_comg_pbc</a> (const t_topology *top, rvec x[], <a class="el" href="structt__pbc.xhtml">t_pbc</a> *pbc, int nrefat, const int index[], bool bMass, rvec xout)</td></tr>
<tr class="memdesc:a50eb30d38edc2d52717ff8752d225d98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate a single center of mass/geometry iteratively with PBC.  <a href="#a50eb30d38edc2d52717ff8752d225d98">More...</a><br/></td></tr>
<tr class="separator:a50eb30d38edc2d52717ff8752d225d98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad49ba2c0500b1d2be1c64b4ef8841152"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="centerofmass_8cpp.xhtml#ad49ba2c0500b1d2be1c64b4ef8841152">gmx_calc_cog_block</a> (const t_topology *, rvec x[], const t_block *block, const int index[], rvec xout[])</td></tr>
<tr class="memdesc:ad49ba2c0500b1d2be1c64b4ef8841152"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate centers of geometry for a blocked index.  <a href="#ad49ba2c0500b1d2be1c64b4ef8841152">More...</a><br/></td></tr>
<tr class="separator:ad49ba2c0500b1d2be1c64b4ef8841152"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e1bb7fff10ad1557a85fccf7fb31e97"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="centerofmass_8cpp.xhtml#a7e1bb7fff10ad1557a85fccf7fb31e97">gmx_calc_com_block</a> (const t_topology *top, rvec x[], const t_block *block, const int index[], rvec xout[])</td></tr>
<tr class="memdesc:a7e1bb7fff10ad1557a85fccf7fb31e97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate centers of mass for a blocked index.  <a href="#a7e1bb7fff10ad1557a85fccf7fb31e97">More...</a><br/></td></tr>
<tr class="separator:a7e1bb7fff10ad1557a85fccf7fb31e97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03533df05eaa6ef971470bcd0cb53f7d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="centerofmass_8cpp.xhtml#a03533df05eaa6ef971470bcd0cb53f7d">gmx_calc_cog_f_block</a> (const t_topology *top, rvec f[], const t_block *block, const int index[], rvec fout[])</td></tr>
<tr class="memdesc:a03533df05eaa6ef971470bcd0cb53f7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate forces on centers of geometry for a blocked index.  <a href="#a03533df05eaa6ef971470bcd0cb53f7d">More...</a><br/></td></tr>
<tr class="separator:a03533df05eaa6ef971470bcd0cb53f7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a323e6e24a19175f15e6b088b67cd0f2a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="centerofmass_8cpp.xhtml#a323e6e24a19175f15e6b088b67cd0f2a">gmx_calc_com_f_block</a> (const t_topology *, rvec f[], const t_block *block, const int index[], rvec fout[])</td></tr>
<tr class="memdesc:a323e6e24a19175f15e6b088b67cd0f2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate forces on centers of mass for a blocked index.  <a href="#a323e6e24a19175f15e6b088b67cd0f2a">More...</a><br/></td></tr>
<tr class="separator:a323e6e24a19175f15e6b088b67cd0f2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab60670b334dc6895bfc024e549a19bda"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="centerofmass_8cpp.xhtml#ab60670b334dc6895bfc024e549a19bda">gmx_calc_comg_block</a> (const t_topology *top, rvec x[], const t_block *block, const int index[], bool bMass, rvec xout[])</td></tr>
<tr class="memdesc:ab60670b334dc6895bfc024e549a19bda"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate centers of mass/geometry for a blocked index.  <a href="#ab60670b334dc6895bfc024e549a19bda">More...</a><br/></td></tr>
<tr class="separator:ab60670b334dc6895bfc024e549a19bda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf2d985532261c8399dc0a28917ae133"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="centerofmass_8cpp.xhtml#aaf2d985532261c8399dc0a28917ae133">gmx_calc_comg_f_block</a> (const t_topology *top, rvec f[], const t_block *block, const int index[], bool bMass, rvec fout[])</td></tr>
<tr class="memdesc:aaf2d985532261c8399dc0a28917ae133"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate forces on centers of mass/geometry for a blocked index.  <a href="#aaf2d985532261c8399dc0a28917ae133">More...</a><br/></td></tr>
<tr class="separator:aaf2d985532261c8399dc0a28917ae133"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44c3d6cc440f4acff1f151cc98e9ddf4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="centerofmass_8cpp.xhtml#a44c3d6cc440f4acff1f151cc98e9ddf4">gmx_calc_comg_blocka</a> (const t_topology *top, rvec x[], const t_blocka *block, bool bMass, rvec xout[])</td></tr>
<tr class="memdesc:a44c3d6cc440f4acff1f151cc98e9ddf4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate centers of mass/geometry for a set of blocks;.  <a href="#a44c3d6cc440f4acff1f151cc98e9ddf4">More...</a><br/></td></tr>
<tr class="separator:a44c3d6cc440f4acff1f151cc98e9ddf4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1f54d0498ef217bfaba2c5f78a88123"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="centerofmass_8cpp.xhtml#ac1f54d0498ef217bfaba2c5f78a88123">gmx_calc_comg_f_blocka</a> (const t_topology *top, rvec f[], const t_blocka *block, bool bMass, rvec fout[])</td></tr>
<tr class="memdesc:ac1f54d0498ef217bfaba2c5f78a88123"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate forces on centers of mass/geometry for a set of blocks;.  <a href="#ac1f54d0498ef217bfaba2c5f78a88123">More...</a><br/></td></tr>
<tr class="separator:ac1f54d0498ef217bfaba2c5f78a88123"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a6b7ba74ab1695f06f0c76171d6008710"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_calc_cog </td>
          <td>(</td>
          <td class="paramtype">const t_topology *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>x</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nrefat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>index</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>xout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate a single center of geometry. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure (unused, can be NULL). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Position vectors of all atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nrefat</td><td>Number of atoms in the index. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Indices of atoms. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xout</td><td>COG position for the indexed atoms. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad49ba2c0500b1d2be1c64b4ef8841152"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_calc_cog_block </td>
          <td>(</td>
          <td class="paramtype">const t_topology *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>x</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_block *&#160;</td>
          <td class="paramname"><em>block</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>index</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>xout</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate centers of geometry for a blocked index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure (unused, can be NULL). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Position vectors of all atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">block</td><td>t_block structure that divides <code>index</code> into blocks. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Indices of atoms. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xout</td><td><code>block-&gt;nr</code> COG positions. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="accd02b9b50e1fc54695742b9e16817cb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_calc_cog_f </td>
          <td>(</td>
          <td class="paramtype">const t_topology *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>f</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nrefat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>index</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>fout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate force on a single center of geometry. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure with masses. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">f</td><td>Forces on all atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nrefat</td><td>Number of atoms in the index. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Indices of atoms. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">fout</td><td>Force on the COG position for the indexed atoms. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a03533df05eaa6ef971470bcd0cb53f7d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_calc_cog_f_block </td>
          <td>(</td>
          <td class="paramtype">const t_topology *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>f</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_block *&#160;</td>
          <td class="paramname"><em>block</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>index</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>fout</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate forces on centers of geometry for a blocked index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure with masses. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">f</td><td>Forces on all atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">block</td><td>t_block structure that divides <code>index</code> into blocks. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Indices of atoms. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">fout</td><td><code>block-&gt;nr</code> Forces on COG positions. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8500222dc4da383fa537ed1677e8328b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_calc_cog_pbc </td>
          <td>(</td>
          <td class="paramtype">const t_topology *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>x</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__pbc.xhtml">t_pbc</a> *&#160;</td>
          <td class="paramname"><em>pbc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nrefat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>index</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>xout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate a single center of geometry iteratively, taking PBC into account. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure (unused, can be NULL). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Position vectors of all atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pbc</td><td>Periodic boundary conditions structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nrefat</td><td>Number of atoms in the index. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Indices of atoms. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xout</td><td>COG position for the indexed atoms.</td></tr>
  </table>
  </dd>
</dl>
<p>Works exactly as <a class="el" href="centerofmass_8cpp.xhtml#a8561c5843a7376b1d6a66446d59061a5" title="Calculate a single center of mass iteratively, taking PBC into account. ">gmx_calc_com_pbc()</a>, but calculates the center of geometry. </p>

</div>
</div>
<a class="anchor" id="a9b91956bcfcd026f0697171be707dffd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_calc_com </td>
          <td>(</td>
          <td class="paramtype">const t_topology *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>x</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nrefat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>index</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>xout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate a single center of mass. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure with masses. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Position vectors of all atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nrefat</td><td>Number of atoms in the index. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Indices of atoms. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xout</td><td>COM position for the indexed atoms.</td></tr>
  </table>
  </dd>
</dl>
<p>Works exactly as <a class="el" href="centerofmass_8cpp.xhtml#a6b7ba74ab1695f06f0c76171d6008710" title="Calculate a single center of geometry. ">gmx_calc_cog()</a> with the exception that a center of mass are calculated, and hence a topology with masses is required. </p>

</div>
</div>
<a class="anchor" id="a7e1bb7fff10ad1557a85fccf7fb31e97"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_calc_com_block </td>
          <td>(</td>
          <td class="paramtype">const t_topology *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>x</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_block *&#160;</td>
          <td class="paramname"><em>block</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>index</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>xout</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate centers of mass for a blocked index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure with masses. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Position vectors of all atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">block</td><td>t_block structure that divides <code>index</code> into blocks. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Indices of atoms. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xout</td><td><code>block-&gt;nr</code> COM positions.</td></tr>
  </table>
  </dd>
</dl>
<p>Works exactly as <a class="el" href="centerofmass_8cpp.xhtml#ad49ba2c0500b1d2be1c64b4ef8841152" title="Calculate centers of geometry for a blocked index. ">gmx_calc_cog_block()</a> with the exception that centers of mass are calculated, and hence a topology with masses is required. </p>

</div>
</div>
<a class="anchor" id="a1f9cf57984b751e8c584c6ae47fcd6bf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_calc_com_f </td>
          <td>(</td>
          <td class="paramtype">const t_topology *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>f</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nrefat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>index</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>fout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate force on a single center of mass. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure (unused, can be NULL). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">f</td><td>Forces on all atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nrefat</td><td>Number of atoms in the index. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Indices of atoms. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">fout</td><td>Force on the COM position for the indexed atoms. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a323e6e24a19175f15e6b088b67cd0f2a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_calc_com_f_block </td>
          <td>(</td>
          <td class="paramtype">const t_topology *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>f</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_block *&#160;</td>
          <td class="paramname"><em>block</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>index</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>fout</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate forces on centers of mass for a blocked index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure (unused, can be NULL). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">f</td><td>Forces on all atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">block</td><td>t_block structure that divides <code>index</code> into blocks. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Indices of atoms. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">fout</td><td><code>block-&gt;nr</code> Forces on COM positions. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8561c5843a7376b1d6a66446d59061a5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_calc_com_pbc </td>
          <td>(</td>
          <td class="paramtype">const t_topology *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>x</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__pbc.xhtml">t_pbc</a> *&#160;</td>
          <td class="paramname"><em>pbc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nrefat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>index</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>xout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate a single center of mass iteratively, taking PBC into account. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure with masses. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Position vectors of all atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pbc</td><td>Periodic boundary conditions structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nrefat</td><td>Number of atoms in the index. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Indices of atoms. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xout</td><td>COM position for the indexed atoms.</td></tr>
  </table>
  </dd>
</dl>
<p>Works as <a class="el" href="centerofmass_8cpp.xhtml#a9b91956bcfcd026f0697171be707dffd" title="Calculate a single center of mass. ">gmx_calc_com()</a>, but takes into account periodic boundary conditions: If any atom is more than half the box from the COM, it is wrapped around and a new COM is calculated. This is repeated until no atoms violate the condition.</p>
<p>Modified from src/tools/gmx_sorient.c in Gromacs distribution. </p>

</div>
</div>
<a class="anchor" id="ac57928046174a983f26a4f54e9206152"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_calc_comg </td>
          <td>(</td>
          <td class="paramtype">const t_topology *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>x</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nrefat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>index</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bMass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>xout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate a single center of mass/geometry. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure with masses (can be NULL if <code>bMASS==false</code>). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Position vectors of all atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nrefat</td><td>Number of atoms in the index. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Indices of atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bMass</td><td>If true, mass weighting is used. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xout</td><td>COM/COG position for the indexed atoms.</td></tr>
  </table>
  </dd>
</dl>
<p>Calls either <a class="el" href="centerofmass_8cpp.xhtml#a9b91956bcfcd026f0697171be707dffd" title="Calculate a single center of mass. ">gmx_calc_com()</a> or <a class="el" href="centerofmass_8cpp.xhtml#a6b7ba74ab1695f06f0c76171d6008710" title="Calculate a single center of geometry. ">gmx_calc_cog()</a> depending on the value of <code>bMass</code>. Other parameters are passed unmodified to these functions. </p>

</div>
</div>
<a class="anchor" id="ab60670b334dc6895bfc024e549a19bda"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_calc_comg_block </td>
          <td>(</td>
          <td class="paramtype">const t_topology *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>x</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_block *&#160;</td>
          <td class="paramname"><em>block</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>index</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bMass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>xout</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate centers of mass/geometry for a blocked index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure with masses (can be NULL if <code>bMASS==false</code>). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Position vectors of all atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">block</td><td>t_block structure that divides <code>index</code> into blocks. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Indices of atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bMass</td><td>If true, mass weighting is used. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xout</td><td><code>block-&gt;nr</code> COM/COG positions.</td></tr>
  </table>
  </dd>
</dl>
<p>Calls either <a class="el" href="centerofmass_8cpp.xhtml#a7e1bb7fff10ad1557a85fccf7fb31e97" title="Calculate centers of mass for a blocked index. ">gmx_calc_com_block()</a> or <a class="el" href="centerofmass_8cpp.xhtml#ad49ba2c0500b1d2be1c64b4ef8841152" title="Calculate centers of geometry for a blocked index. ">gmx_calc_cog_block()</a> depending on the value of <code>bMass</code>. Other parameters are passed unmodified to these functions. </p>

</div>
</div>
<a class="anchor" id="a44c3d6cc440f4acff1f151cc98e9ddf4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_calc_comg_blocka </td>
          <td>(</td>
          <td class="paramtype">const t_topology *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>x</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_blocka *&#160;</td>
          <td class="paramname"><em>block</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bMass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>xout</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate centers of mass/geometry for a set of blocks;. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure with masses (can be NULL if <code>bMASS==false</code>). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Position vectors of all atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">block</td><td>Blocks for calculation. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bMass</td><td>If true, mass weighting is used. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xout</td><td><code>block-&gt;nr</code> COM/COG positions.</td></tr>
  </table>
  </dd>
</dl>
<p>Calls <a class="el" href="centerofmass_8cpp.xhtml#ab60670b334dc6895bfc024e549a19bda" title="Calculate centers of mass/geometry for a blocked index. ">gmx_calc_comg_block()</a>, converting the <code>t_blocka</code> structure into a <code>t_block</code> and an index. Other parameters are passed unmodified.</p>
<dl class="section attention"><dt>Attention</dt><dd>This function assumes that a pointer to <code>t_blocka</code> can be safely typecast into <code>t_block</code> such that the index fields can still be referenced. With the present Gromacs defitions of these types, this is the case, but if the layout of these structures is changed, this may lead to strange crashes. </dd></dl>

</div>
</div>
<a class="anchor" id="a030beb4111d97df92ea9ccebbdd532f8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_calc_comg_f </td>
          <td>(</td>
          <td class="paramtype">const t_topology *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>f</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nrefat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>index</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bMass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>fout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate force on a single center of mass/geometry. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure with masses (can be NULL if <code>bMASS==true</code>). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">f</td><td>Forces on all atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nrefat</td><td>Number of atoms in the index. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Indices of atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bMass</td><td>If true, force on COM is calculated. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">fout</td><td>Force on the COM/COG position for the indexed atoms.</td></tr>
  </table>
  </dd>
</dl>
<p>Calls either <a class="el" href="centerofmass_8cpp.xhtml#accd02b9b50e1fc54695742b9e16817cb" title="Calculate force on a single center of geometry. ">gmx_calc_cog_f()</a> or <a class="el" href="centerofmass_8cpp.xhtml#a1f9cf57984b751e8c584c6ae47fcd6bf" title="Calculate force on a single center of mass. ">gmx_calc_com_f()</a> depending on the value of <code>bMass</code>. Other parameters are passed unmodified to these functions. </p>

</div>
</div>
<a class="anchor" id="aaf2d985532261c8399dc0a28917ae133"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_calc_comg_f_block </td>
          <td>(</td>
          <td class="paramtype">const t_topology *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>f</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_block *&#160;</td>
          <td class="paramname"><em>block</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>index</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bMass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>fout</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate forces on centers of mass/geometry for a blocked index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure with masses (can be NULL if <code>bMASS==false</code>). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">f</td><td>Forces on all atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">block</td><td>t_block structure that divides <code>index</code> into blocks. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Indices of atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bMass</td><td>If true, force on COM is calculated. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">fout</td><td><code>block-&gt;nr</code> forces on the COM/COG positions.</td></tr>
  </table>
  </dd>
</dl>
<p>Calls either <a class="el" href="centerofmass_8cpp.xhtml#a323e6e24a19175f15e6b088b67cd0f2a" title="Calculate forces on centers of mass for a blocked index. ">gmx_calc_com_f_block()</a> or <a class="el" href="centerofmass_8cpp.xhtml#a03533df05eaa6ef971470bcd0cb53f7d" title="Calculate forces on centers of geometry for a blocked index. ">gmx_calc_cog_f_block()</a> depending on the value of <code>bMass</code>. Other parameters are passed unmodified to these functions. </p>

</div>
</div>
<a class="anchor" id="ac1f54d0498ef217bfaba2c5f78a88123"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_calc_comg_f_blocka </td>
          <td>(</td>
          <td class="paramtype">const t_topology *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>f</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const t_blocka *&#160;</td>
          <td class="paramname"><em>block</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bMass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>fout</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate forces on centers of mass/geometry for a set of blocks;. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure with masses (can be NULL if <code>bMASS==true</code>). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">f</td><td>Forces on all atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">block</td><td>Blocks for calculation. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bMass</td><td>If true, force on COM is calculated. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">fout</td><td><code>block-&gt;nr</code> forces on the COM/COG positions.</td></tr>
  </table>
  </dd>
</dl>
<p>Calls <a class="el" href="centerofmass_8cpp.xhtml#aaf2d985532261c8399dc0a28917ae133" title="Calculate forces on centers of mass/geometry for a blocked index. ">gmx_calc_comg_f_block()</a>, converting the <code>t_blocka</code> structure into a <code>t_block</code> and an index. Other parameters are passed unmodified.</p>
<dl class="section attention"><dt>Attention</dt><dd>This function assumes that a pointer to <code>t_blocka</code> can be safely typecast into <code>t_block</code> such that the index fields can still be referenced. With the present Gromacs defitions of these types, this is the case, but if the layout of these structures is changed, this may lead to strange crashes. </dd></dl>

</div>
</div>
<a class="anchor" id="a50eb30d38edc2d52717ff8752d225d98"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_calc_comg_pbc </td>
          <td>(</td>
          <td class="paramtype">const t_topology *&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>x</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structt__pbc.xhtml">t_pbc</a> *&#160;</td>
          <td class="paramname"><em>pbc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nrefat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>index</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bMass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rvec&#160;</td>
          <td class="paramname"><em>xout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate a single center of mass/geometry iteratively with PBC. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">top</td><td>Topology structure with masses (can be NULL if <code>bMASS==false</code>). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Position vectors of all atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pbc</td><td>Periodic boundary conditions structure. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nrefat</td><td>Number of atoms in the index. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Indices of atoms. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bMass</td><td>If true, mass weighting is used. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xout</td><td>COM/COG position for the indexed atoms.</td></tr>
  </table>
  </dd>
</dl>
<p>Calls either <a class="el" href="centerofmass_8cpp.xhtml#a9b91956bcfcd026f0697171be707dffd" title="Calculate a single center of mass. ">gmx_calc_com()</a> or <a class="el" href="centerofmass_8cpp.xhtml#a6b7ba74ab1695f06f0c76171d6008710" title="Calculate a single center of geometry. ">gmx_calc_cog()</a> depending on the value of <code>bMass</code>. Other parameters are passed unmodified to these functions. </p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:20:35 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
