<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::test::TestReferenceChecker::Impl Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="namespacegmx_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a></li><li class="navelem"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml">Impl</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl-members.xhtml">List of all members</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a>  </div>
  <div class="headertitle">
<div class="title">gmx::test::TestReferenceChecker::Impl Class Reference<div class="ingroups"><a class="el" href="group__module__testutils.xhtml">Testing Utilities (testutils)</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for gmx::test::TestReferenceChecker::Impl:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl__coll__graph.svg" width="204" height="156"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Private implementation class for <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml" title="Handles comparison to test reference data. ">TestReferenceChecker</a>. </p>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad4f1c767e47356b8ac32f95284bf01d0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad4f1c767e47356b8ac32f95284bf01d0"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#ad4f1c767e47356b8ac32f95284bf01d0">Impl</a> (bool <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a71ccd615b9408d78faf606f38ffc600c">initialized</a>)</td></tr>
<tr class="memdesc:ad4f1c767e47356b8ac32f95284bf01d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a checker that does nothing. <br/></td></tr>
<tr class="separator:ad4f1c767e47356b8ac32f95284bf01d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63dd1e9a79219231d31123a6ce0329ef"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a63dd1e9a79219231d31123a6ce0329ef"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a63dd1e9a79219231d31123a6ce0329ef">Impl</a> (const std::string &amp;path, ReferenceDataEntry *compareRootEntry, ReferenceDataEntry *outputRootEntry, bool updateMismatchingEntries, bool bSelfTestMode, const <a class="el" href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml">FloatingPointTolerance</a> &amp;defaultTolerance)</td></tr>
<tr class="memdesc:a63dd1e9a79219231d31123a6ce0329ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a checker with a given root entry. <br/></td></tr>
<tr class="separator:a63dd1e9a79219231d31123a6ce0329ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0015f1d298e99a23b35149d8afd5e97f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0015f1d298e99a23b35149d8afd5e97f"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a0015f1d298e99a23b35149d8afd5e97f">appendPath</a> (const char *id) const </td></tr>
<tr class="memdesc:a0015f1d298e99a23b35149d8afd5e97f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the path of this checker with <code>id</code> appended. <br/></td></tr>
<tr class="separator:a0015f1d298e99a23b35149d8afd5e97f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af67f8942f65348c08072b18d20b051f0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af67f8942f65348c08072b18d20b051f0"></a>
ReferenceDataEntry::EntryPointer&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#af67f8942f65348c08072b18d20b051f0">createEntry</a> (const char *type, const char *id, const IReferenceDataEntryChecker &amp;checker) const </td></tr>
<tr class="memdesc:af67f8942f65348c08072b18d20b051f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an entry with given parameters and fills it with <code>checker</code>. <br/></td></tr>
<tr class="separator:af67f8942f65348c08072b18d20b051f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48b5959416d0fc5bc3508854ccc8e367"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a48b5959416d0fc5bc3508854ccc8e367"></a>
::testing::AssertionResult&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a48b5959416d0fc5bc3508854ccc8e367">checkEntry</a> (const ReferenceDataEntry &amp;entry, const std::string &amp;fullId, const char *type, const IReferenceDataEntryChecker &amp;checker) const </td></tr>
<tr class="memdesc:a48b5959416d0fc5bc3508854ccc8e367"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks an entry for correct type and using <code>checker</code>. <br/></td></tr>
<tr class="separator:a48b5959416d0fc5bc3508854ccc8e367"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab12899826f8cf641570e3fa3ef6133d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aab12899826f8cf641570e3fa3ef6133d"></a>
ReferenceDataEntry *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#aab12899826f8cf641570e3fa3ef6133d">findEntry</a> (const char *id)</td></tr>
<tr class="memdesc:aab12899826f8cf641570e3fa3ef6133d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds an entry by id and updates the last found entry pointer. <br/></td></tr>
<tr class="separator:aab12899826f8cf641570e3fa3ef6133d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5d12e4244fbbb53904562aa7d6e4ec3"><td class="memItemLeft" align="right" valign="top">ReferenceDataEntry *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#ad5d12e4244fbbb53904562aa7d6e4ec3">findOrCreateEntry</a> (const char *type, const char *id, const IReferenceDataEntryChecker &amp;checker)</td></tr>
<tr class="memdesc:ad5d12e4244fbbb53904562aa7d6e4ec3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds/creates a reference data entry to match against.  <a href="#ad5d12e4244fbbb53904562aa7d6e4ec3">More...</a><br/></td></tr>
<tr class="separator:ad5d12e4244fbbb53904562aa7d6e4ec3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cd19d6065ab5fa0135ebd18906cc439"><td class="memItemLeft" align="right" valign="top">::testing::AssertionResult&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a0cd19d6065ab5fa0135ebd18906cc439">processItem</a> (const char *name, const char *id, const IReferenceDataEntryChecker &amp;checker)</td></tr>
<tr class="memdesc:a0cd19d6065ab5fa0135ebd18906cc439"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper method for checking a reference data value.  <a href="#a0cd19d6065ab5fa0135ebd18906cc439">More...</a><br/></td></tr>
<tr class="separator:a0cd19d6065ab5fa0135ebd18906cc439"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71ccd615b9408d78faf606f38ffc600c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a71ccd615b9408d78faf606f38ffc600c"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a71ccd615b9408d78faf606f38ffc600c">initialized</a> () const </td></tr>
<tr class="memdesc:a71ccd615b9408d78faf606f38ffc600c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether the checker is initialized. <br/></td></tr>
<tr class="separator:a71ccd615b9408d78faf606f38ffc600c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07b50c88bae31837b40d5b579a7b09c3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a07b50c88bae31837b40d5b579a7b09c3">shouldIgnore</a> () const </td></tr>
<tr class="memdesc:a07b50c88bae31837b40d5b579a7b09c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether the checker should ignore all validation calls.  <a href="#a07b50c88bae31837b40d5b579a7b09c3">More...</a><br/></td></tr>
<tr class="separator:a07b50c88bae31837b40d5b579a7b09c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:aad50e03a6910edd05eb38636a1638e88"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aad50e03a6910edd05eb38636a1638e88"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#aad50e03a6910edd05eb38636a1638e88">initialized_</a></td></tr>
<tr class="memdesc:aad50e03a6910edd05eb38636a1638e88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether initialized with other means than the default constructor. <br/></td></tr>
<tr class="separator:aad50e03a6910edd05eb38636a1638e88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04a872dd8e24fb821ed705540663691d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a04a872dd8e24fb821ed705540663691d"></a>
<a class="el" href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml">FloatingPointTolerance</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a04a872dd8e24fb821ed705540663691d">defaultTolerance_</a></td></tr>
<tr class="memdesc:a04a872dd8e24fb821ed705540663691d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default floating-point comparison tolerance. <br/></td></tr>
<tr class="separator:a04a872dd8e24fb821ed705540663691d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae864c01ce9412c5674de823de8c0effb"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#ae864c01ce9412c5674de823de8c0effb">path_</a></td></tr>
<tr class="memdesc:ae864c01ce9412c5674de823de8c0effb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Human-readable path to the root node of this checker.  <a href="#ae864c01ce9412c5674de823de8c0effb">More...</a><br/></td></tr>
<tr class="separator:ae864c01ce9412c5674de823de8c0effb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a20c83fa9cb4952ebf78ec99d5a472c"><td class="memItemLeft" align="right" valign="top">ReferenceDataEntry *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a0a20c83fa9cb4952ebf78ec99d5a472c">compareRootEntry_</a></td></tr>
<tr class="memdesc:a0a20c83fa9cb4952ebf78ec99d5a472c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Current entry under which reference data is searched for comparison.  <a href="#a0a20c83fa9cb4952ebf78ec99d5a472c">More...</a><br/></td></tr>
<tr class="separator:a0a20c83fa9cb4952ebf78ec99d5a472c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a3b479f7489afaa61e604660a15ae19"><td class="memItemLeft" align="right" valign="top">ReferenceDataEntry *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a0a3b479f7489afaa61e604660a15ae19">outputRootEntry_</a></td></tr>
<tr class="memdesc:a0a3b479f7489afaa61e604660a15ae19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Current entry under which entries for writing are created.  <a href="#a0a3b479f7489afaa61e604660a15ae19">More...</a><br/></td></tr>
<tr class="separator:a0a3b479f7489afaa61e604660a15ae19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a353b051ec9527ab745fcfb637ddd92ae"><td class="memItemLeft" align="right" valign="top">ReferenceDataEntry::ChildIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a353b051ec9527ab745fcfb637ddd92ae">lastFoundEntry_</a></td></tr>
<tr class="memdesc:a353b051ec9527ab745fcfb637ddd92ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator to a child of <em>compareRootEntry_</em> that was last found.  <a href="#a353b051ec9527ab745fcfb637ddd92ae">More...</a><br/></td></tr>
<tr class="separator:a353b051ec9527ab745fcfb637ddd92ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1aecae7352e5cdfbd04ee7bc4e7bb0d4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1aecae7352e5cdfbd04ee7bc4e7bb0d4"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a1aecae7352e5cdfbd04ee7bc4e7bb0d4">updateMismatchingEntries_</a></td></tr>
<tr class="memdesc:a1aecae7352e5cdfbd04ee7bc4e7bb0d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether the reference data is being written (true) or compared (false). <br/></td></tr>
<tr class="separator:a1aecae7352e5cdfbd04ee7bc4e7bb0d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c8cfcb3e778c22ff3e5a54e0364fede"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6c8cfcb3e778c22ff3e5a54e0364fede"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a6c8cfcb3e778c22ff3e5a54e0364fede">bSelfTestMode_</a></td></tr>
<tr class="memdesc:a6c8cfcb3e778c22ff3e5a54e0364fede"><td class="mdescLeft">&#160;</td><td class="mdescRight"><code>true</code> if self-testing (enables extra failure messages). <br/></td></tr>
<tr class="separator:a6c8cfcb3e778c22ff3e5a54e0364fede"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5de7f1436e0bfefd57108e96072cf242"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a5de7f1436e0bfefd57108e96072cf242">seqIndex_</a></td></tr>
<tr class="memdesc:a5de7f1436e0bfefd57108e96072cf242"><td class="mdescLeft">&#160;</td><td class="mdescRight">Current number of unnamed elements in a sequence.  <a href="#a5de7f1436e0bfefd57108e96072cf242">More...</a><br/></td></tr>
<tr class="separator:a5de7f1436e0bfefd57108e96072cf242"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a8ea71aefa212cf96b1d68e0061e9302c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8ea71aefa212cf96b1d68e0061e9302c"></a>
static const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a8ea71aefa212cf96b1d68e0061e9302c">cBooleanNodeName</a> = &quot;Bool&quot;</td></tr>
<tr class="memdesc:a8ea71aefa212cf96b1d68e0061e9302c"><td class="mdescLeft">&#160;</td><td class="mdescRight">String constant for naming XML elements for boolean values. <br/></td></tr>
<tr class="separator:a8ea71aefa212cf96b1d68e0061e9302c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad25c430d0933e60469c07b096d7d05ae"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad25c430d0933e60469c07b096d7d05ae"></a>
static const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#ad25c430d0933e60469c07b096d7d05ae">cStringNodeName</a> = &quot;String&quot;</td></tr>
<tr class="memdesc:ad25c430d0933e60469c07b096d7d05ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">String constant for naming XML elements for string values. <br/></td></tr>
<tr class="separator:ad25c430d0933e60469c07b096d7d05ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a517f29fea3a0d0cdde4f652bdc605f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6a517f29fea3a0d0cdde4f652bdc605f"></a>
static const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a6a517f29fea3a0d0cdde4f652bdc605f">cIntegerNodeName</a> = &quot;Int&quot;</td></tr>
<tr class="memdesc:a6a517f29fea3a0d0cdde4f652bdc605f"><td class="mdescLeft">&#160;</td><td class="mdescRight">String constant for naming XML elements for integer values. <br/></td></tr>
<tr class="separator:a6a517f29fea3a0d0cdde4f652bdc605f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8159b89f8c0704164c58ebbb49798c73"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8159b89f8c0704164c58ebbb49798c73"></a>
static const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a8159b89f8c0704164c58ebbb49798c73">cInt64NodeName</a> = &quot;Int64&quot;</td></tr>
<tr class="memdesc:a8159b89f8c0704164c58ebbb49798c73"><td class="mdescLeft">&#160;</td><td class="mdescRight">String constant for naming XML elements for int64 values. <br/></td></tr>
<tr class="separator:a8159b89f8c0704164c58ebbb49798c73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9f48272c4c5c7f8d1ed22a795ad3f26"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af9f48272c4c5c7f8d1ed22a795ad3f26"></a>
static const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#af9f48272c4c5c7f8d1ed22a795ad3f26">cUInt64NodeName</a> = &quot;UInt64&quot;</td></tr>
<tr class="memdesc:af9f48272c4c5c7f8d1ed22a795ad3f26"><td class="mdescLeft">&#160;</td><td class="mdescRight">String constant for naming XML elements for unsigned int64 values. <br/></td></tr>
<tr class="separator:af9f48272c4c5c7f8d1ed22a795ad3f26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02ceb833b0070968c2a2fbcba782b951"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a02ceb833b0070968c2a2fbcba782b951"></a>
static const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a02ceb833b0070968c2a2fbcba782b951">cRealNodeName</a> = &quot;Real&quot;</td></tr>
<tr class="memdesc:a02ceb833b0070968c2a2fbcba782b951"><td class="mdescLeft">&#160;</td><td class="mdescRight">String constant for naming XML elements for floating-point values. <br/></td></tr>
<tr class="separator:a02ceb833b0070968c2a2fbcba782b951"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad296fc7ff55074e18ba785bb51b7f6be"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad296fc7ff55074e18ba785bb51b7f6be"></a>
static const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#ad296fc7ff55074e18ba785bb51b7f6be">cIdAttrName</a> = &quot;Name&quot;</td></tr>
<tr class="memdesc:ad296fc7ff55074e18ba785bb51b7f6be"><td class="mdescLeft">&#160;</td><td class="mdescRight">String constant for naming XML attribute for value identifiers. <br/></td></tr>
<tr class="separator:ad296fc7ff55074e18ba785bb51b7f6be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af34e0ec8239d7e2c2302576f81acd819"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af34e0ec8239d7e2c2302576f81acd819"></a>
static const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#af34e0ec8239d7e2c2302576f81acd819">cVectorType</a> = &quot;Vector&quot;</td></tr>
<tr class="memdesc:af34e0ec8239d7e2c2302576f81acd819"><td class="mdescLeft">&#160;</td><td class="mdescRight">String constant for naming compounds for vectors. <br/></td></tr>
<tr class="separator:af34e0ec8239d7e2c2302576f81acd819"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91d71841386d14ba364d23731a4919c8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a91d71841386d14ba364d23731a4919c8"></a>
static const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a91d71841386d14ba364d23731a4919c8">cSequenceType</a> = &quot;Sequence&quot;</td></tr>
<tr class="memdesc:a91d71841386d14ba364d23731a4919c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">String constant for naming compounds for sequences. <br/></td></tr>
<tr class="separator:a91d71841386d14ba364d23731a4919c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a408eca7422972d977d6a65d5674c5983"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a408eca7422972d977d6a65d5674c5983"></a>
static const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a408eca7422972d977d6a65d5674c5983">cSequenceLengthName</a> = &quot;Length&quot;</td></tr>
<tr class="memdesc:a408eca7422972d977d6a65d5674c5983"><td class="mdescLeft">&#160;</td><td class="mdescRight">String constant for value identifier for sequence length. <br/></td></tr>
<tr class="separator:a408eca7422972d977d6a65d5674c5983"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ad5d12e4244fbbb53904562aa7d6e4ec3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ReferenceDataEntry * gmx::test::TestReferenceChecker::Impl::findOrCreateEntry </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const IReferenceDataEntryChecker &amp;&#160;</td>
          <td class="paramname"><em>checker</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Finds/creates a reference data entry to match against. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>Type of entry to create. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Unique identifier of the entry (can be NULL, in which case the next entry without an id is matched). </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">checker</td><td>Checker to use for filling out created entries. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Matching entry, or NULL if no matching entry found (NULL is never returned in write mode; new entries are created instead). </dd></dl>

</div>
</div>
<a class="anchor" id="a0cd19d6065ab5fa0135ebd18906cc439"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">testing::AssertionResult gmx::test::TestReferenceChecker::Impl::processItem </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const IReferenceDataEntryChecker &amp;&#160;</td>
          <td class="paramname"><em>checker</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper method for checking a reference data value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Type of entry to find. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Unique identifier of the entry (can be NULL, in which case the next entry without an id is matched). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">checker</td><td>Checker that provides logic specific to the type of the entry. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Whether the reference data matched, including details of the mismatch if the comparison failed. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1test_1_1TestException.xhtml" title="Exception class for reporting errors in tests. ">TestException</a></td><td>if there is a problem parsing the reference data.</td></tr>
  </table>
  </dd>
</dl>
<p>Performs common tasks in checking a reference value, such as finding or creating the correct entry. Caller needs to provide a checker object that provides the string value for a newly created entry and performs the actual comparison against a found entry. </p>

</div>
</div>
<a class="anchor" id="a07b50c88bae31837b40d5b579a7b09c3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool gmx::test::TestReferenceChecker::Impl::shouldIgnore </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Whether the checker should ignore all validation calls. </p>
<p>This is used to ignore any calls within compounds for which reference data could not be found, such that only one error is issued for the missing compound, instead of every individual value. </p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a0a20c83fa9cb4952ebf78ec99d5a472c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ReferenceDataEntry* gmx::test::TestReferenceChecker::Impl::compareRootEntry_</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Current entry under which reference data is searched for comparison. </p>
<p>Points to either the TestReferenceDataImpl::compareRootEntry_, or to a compound entry in the tree rooted at that entry.</p>
<p>Can be NULL, in which case this checker does nothing (doesn't even report errors, see <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a07b50c88bae31837b40d5b579a7b09c3" title="Whether the checker should ignore all validation calls. ">shouldIgnore()</a>). </p>

</div>
</div>
<a class="anchor" id="a353b051ec9527ab745fcfb637ddd92ae"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ReferenceDataEntry::ChildIterator gmx::test::TestReferenceChecker::Impl::lastFoundEntry_</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Iterator to a child of <em>compareRootEntry_</em> that was last found. </p>
<p>If <code>compareRootEntry_-&gt;isValidChild()</code> returns false, no entry has been found yet. After every check, is updated to point to the entry that was used for the check. Subsequent checks start the search for the matching node on this node. </p>

</div>
</div>
<a class="anchor" id="a0a3b479f7489afaa61e604660a15ae19"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ReferenceDataEntry* gmx::test::TestReferenceChecker::Impl::outputRootEntry_</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Current entry under which entries for writing are created. </p>
<p>Points to either the TestReferenceDataImpl::outputRootEntry_, or to a compound entry in the tree rooted at that entry. NULL if only comparing, or if <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#a07b50c88bae31837b40d5b579a7b09c3" title="Whether the checker should ignore all validation calls. ">shouldIgnore()</a> returns <code>false</code>. </p>

</div>
</div>
<a class="anchor" id="ae864c01ce9412c5674de823de8c0effb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::test::TestReferenceChecker::Impl::path_</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Human-readable path to the root node of this checker. </p>
<p>For the root checker, this will be "/", and for each compound, the id of the compound is added. Used for reporting comparison mismatches. </p>

</div>
</div>
<a class="anchor" id="a5de7f1436e0bfefd57108e96072cf242"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx::test::TestReferenceChecker::Impl::seqIndex_</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Current number of unnamed elements in a sequence. </p>
<p>It is the index of the next added unnamed element. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/testutils/<a class="el" href="refdata_8cpp.xhtml">refdata.cpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:20:48 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
