<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: Testing Utilities (testutils)</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#dirs">Directories</a> &#124;
<a href="#files">Files</a>  </div>
  <div class="headertitle">
<div class="title">Testing Utilities (testutils)<div class="ingroups"><a class="el" href="group__group__utilitymodules.xhtml">Utility Modules</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for Testing Utilities (testutils):</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<center><table><tr><td><div class="center"><iframe scrolling="no" frameborder="0" src="group__module__testutils.svg" width="626" height="452"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</td></tr></table></center>
</div>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<p>Common helper classes and functions for writing tests using Google Test. </p>
<p>General documentation for the testing in GROMACS can be found in the <a href="../../dev-manual/index.html">developer guide</a>. This page provides an overview of the actual API provided by the <code>testutils</code> module.</p>
<p>There are several distinct functionalities provided:</p>
<ul>
<li><a class="el" href="classgmx_1_1test_1_1TestFileManager.xhtml" title="Helper for tests that need input and output files. ">gmx::test::TestFileManager</a> (in <a class="el" href="testfilemanager_8h.xhtml" title="Declares gmx::test::TestFileManager. ">testfilemanager.h</a>) provides functionality for locating test input files from the source directory and managing temporary files that need to be created during the test.</li>
<li><a class="el" href="classgmx_1_1test_1_1TestFileInputRedirector.xhtml" title="In-memory implementation for IFileInputRedirector for tests. ">gmx::test::TestFileInputRedirector</a> (in <a class="el" href="testfileredirector_8h.xhtml" title="Declares generic mock implementations for interfaces in fileredirector.h. ">testfileredirector.h</a>) provides functionality for capturing file existence checks in code that uses <a class="el" href="classgmx_1_1IFileInputRedirector.xhtml" title="Allows overriding file existence checks from code that supports it. ">gmx::IFileInputRedirector</a>.</li>
<li><a class="el" href="classgmx_1_1test_1_1TestFileOutputRedirector.xhtml" title="In-memory implementation of IFileOutputRedirector for tests. ">gmx::test::TestFileOutputRedirector</a> (in <a class="el" href="testfileredirector_8h.xhtml" title="Declares generic mock implementations for interfaces in fileredirector.h. ">testfileredirector.h</a>) provides functionality for capturing file output (including <code>stdout</code>) from code that uses <a class="el" href="classgmx_1_1IFileOutputRedirector.xhtml" title="Allows capturing stdout and file output from code that supports it. ">gmx::IFileOutputRedirector</a>, and checking that output against reference data.</li>
<li><a class="el" href="classgmx_1_1test_1_1InteractiveTestHelper.xhtml" title="Helper class for testing interactive sessions. ">gmx::test::InteractiveTestHelper</a> (in <a class="el" href="interactivetest_8h.xhtml" title="Provides helper classes for testing interactive prompts. ">interactivetest.h</a>) provides a helper class for testing an interactive session that uses <a class="el" href="classgmx_1_1TextInputStream.xhtml" title="Interface for reading text. ">gmx::TextInputStream</a> and <a class="el" href="classgmx_1_1TextOutputStream.xhtml" title="Interface for writing text. ">gmx::TextOutputStream</a> for prompting input and printing status messages.</li>
<li><a class="el" href="group__module__testutils.xhtml#gad8c14b8ddce6c8a7852915ac57f3b52a" title="Macro to add additional command-line options for the test binary. ">GMX_TEST_OPTIONS</a> macro provides facilities for adding custom command line options for the test binary.</li>
<li><a class="el" href="testasserts_8h.xhtml" title="Extra assertions for unit tests. ">testasserts.h</a> provides several custom test assertions for better exception and floating-point handling than built-in Google Test assertions.</li>
<li><a class="el" href="classgmx_1_1test_1_1TestReferenceData.xhtml" title="Handles creation of and comparison to test reference data. ">gmx::test::TestReferenceData</a> and related classes (in <a class="el" href="refdata_8h.xhtml" title="Functionality for writing tests that can produce their own reference data. ">refdata.h</a>) provide utilities to write regression-style tests that check that the test produces the same results as an earlier run of the same test. See <a class="el" href="page_refdata.xhtml">Using reference data in C++ tests</a> for more details.</li>
<li><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml" title="Helper class for tests that need to construct command lines. ">gmx::test::CommandLine</a> and related classes (in <a class="el" href="cmdlinetest_8h.xhtml" title="Declares utilities testing command-line programs. ">cmdlinetest.h</a>) provide utilities for constructing command line argument arrays for use in tests that invoke actual commands.</li>
<li><a class="el" href="classgmx_1_1test_1_1StringTestBase.xhtml" title="Test fixture for tests that check string formatting. ">gmx::test::StringTestBase</a> provides a test fixture for tests that need to test long strings for correctness.</li>
<li><a class="el" href="classgmx_1_1test_1_1IntegrationTestFixture.xhtml" title="Test fixture for integration tests. ">gmx::test::IntegrationTestFixture</a> provides a test fixture for tests that execute legacy code where <code>stdin</code> reading etc. cannot be easily mocked.</li>
</ul>
<p>Additionally, <a class="el" href="testinit_8h.xhtml" title="Functions for initialing GROMACS unit test executables. ">testinit.h</a> and <a class="el" href="mpi-printer_8h.xhtml" title="Declares gmx::test::initMPIOutput(). ">mpi-printer.h</a>, and their corresponding source files, provide functionality that is not visible on the API level: they provide initialization routines for the above functionality, which are automatically called by the main() function provided in <a class="el" href="unittest__main_8cpp.xhtml" title="main() for unit tests that use Testing Utilities (testutils). ">unittest_main.cpp</a>.</p>
<p><a class="el" href="mpi-printer_8h.xhtml" title="Declares gmx::test::initMPIOutput(). ">mpi-printer.h</a> provides a Google Test listener that is installed when the tests are compiled with MPI. This listener allows the test binary to be run on multiple MPI ranks, and synchronizes the execution and output from the test cases, as well as makes the test fail on even if an assertion fails only on one rank.</p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Helper functions for computing floating-point differences</h2></td></tr>
<tr><td class="ititle" colspan="2"><p><a class="anchor" id="amgrp26666819f80cbb3278a24b48c65906da"></a>These routines are used to initialize <a class="el" href="classgmx_1_1test_1_1FloatingPointDifference.xhtml" title="Computes and represents a floating-point difference value. ">FloatingPointDifference</a>. They peek into some internal types from Google Test (gtest-internal.h), and duplicate some other functionality from there, but that is likely a better alternative than just copying all that code here. </p>
</td></tr>
<tr class="memitem:gaa4f52fad8b5f296790f25f67d66b56c4"><td class="memTemplParams" colspan="2">template&lt;typename FloatType &gt; </td></tr>
<tr class="memitem:gaa4f52fad8b5f296790f25f67d66b56c4"><td class="memTemplItemLeft" align="right" valign="top">FloatingPoint&lt; FloatType &gt;::Bits&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gaa4f52fad8b5f296790f25f67d66b56c4">gmx::test::anonymous_namespace{testasserts.cpp}::floatingPointToBiasedInteger</a> (const FloatingPoint&lt; FloatType &gt; &amp;value)</td></tr>
<tr class="memdesc:gaa4f52fad8b5f296790f25f67d66b56c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes biased integer representation for a floating-point value.  <a href="#gaa4f52fad8b5f296790f25f67d66b56c4">More...</a><br/></td></tr>
<tr class="separator:gaa4f52fad8b5f296790f25f67d66b56c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2be2fba2cf97cfc6c04864a0d568c996"><td class="memTemplParams" colspan="2"><a class="anchor" id="ga2be2fba2cf97cfc6c04864a0d568c996"></a>
template&lt;typename FloatType &gt; </td></tr>
<tr class="memitem:ga2be2fba2cf97cfc6c04864a0d568c996"><td class="memTemplItemLeft" align="right" valign="top">gmx_uint64_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga2be2fba2cf97cfc6c04864a0d568c996">gmx::test::anonymous_namespace{testasserts.cpp}::calculateUlpDifference</a> (const FloatingPoint&lt; FloatType &gt; &amp;value1, const FloatingPoint&lt; FloatType &gt; &amp;value2)</td></tr>
<tr class="memdesc:ga2be2fba2cf97cfc6c04864a0d568c996"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the magnitude of the difference in ULPs between two numbers, treating also values of different sign. <br/></td></tr>
<tr class="separator:ga2be2fba2cf97cfc6c04864a0d568c996"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab1c5bf65f975bc8e0572b6ba2b94b2a1"><td class="memTemplParams" colspan="2"><a class="anchor" id="gab1c5bf65f975bc8e0572b6ba2b94b2a1"></a>
template&lt;typename FloatType &gt; </td></tr>
<tr class="memitem:gab1c5bf65f975bc8e0572b6ba2b94b2a1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gab1c5bf65f975bc8e0572b6ba2b94b2a1">gmx::test::anonymous_namespace{testasserts.cpp}::initDifference</a> (FloatType raw1, FloatType raw2, double *absoluteDifference, gmx_uint64_t *ulpDifference, bool *bSignDifference)</td></tr>
<tr class="memdesc:gab1c5bf65f975bc8e0572b6ba2b94b2a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper to implement the constructors for <a class="el" href="classgmx_1_1test_1_1FloatingPointDifference.xhtml" title="Computes and represents a floating-point difference value. ">FloatingPointDifference</a>. <br/></td></tr>
<tr class="separator:gab1c5bf65f975bc8e0572b6ba2b94b2a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6b6c825872baad5c13b7f073d6778cf"><td class="memTemplParams" colspan="2"><a class="anchor" id="gac6b6c825872baad5c13b7f073d6778cf"></a>
template&lt;typename FloatType &gt; </td></tr>
<tr class="memitem:gac6b6c825872baad5c13b7f073d6778cf"><td class="memTemplItemLeft" align="right" valign="top">gmx_uint64_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gac6b6c825872baad5c13b7f073d6778cf">gmx::test::anonymous_namespace{testasserts.cpp}::relativeToleranceToUlp</a> (FloatType tolerance)</td></tr>
<tr class="memdesc:gac6b6c825872baad5c13b7f073d6778cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a relative tolerance into an ULP difference. <br/></td></tr>
<tr class="separator:gac6b6c825872baad5c13b7f073d6778cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Assertions for exceptions</h2></td></tr>
<tr><td class="ititle" colspan="2"><p><a class="anchor" id="amgrp856171326afbb00ddfc7027f57aa4002"></a>These macros replace <code>(ASSERT|EXPECT)(_NO)?_THROW</code> from Google Test. They are used exactly like the Google Test ones, but also print details of any unexpected exceptions using GROMACS-specific routines. This makes it much easier to see at one glance what went wrong. See Google Test documentation for details on how to use the macros. </p>
</td></tr>
<tr class="memitem:ga1eec5082a161ff78e7b973d55593828b"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga1eec5082a161ff78e7b973d55593828b">GMX_TEST_THROW_</a>(statement, expected_exception, fail)</td></tr>
<tr class="memdesc:ga1eec5082a161ff78e7b973d55593828b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal implementation macro for exception assertations.  <a href="#ga1eec5082a161ff78e7b973d55593828b">More...</a><br/></td></tr>
<tr class="separator:ga1eec5082a161ff78e7b973d55593828b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab5c7b3b6b5b1656debbec8fc2ffe0d99"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gab5c7b3b6b5b1656debbec8fc2ffe0d99">GMX_TEST_NO_THROW_</a>(statement, fail)</td></tr>
<tr class="memdesc:gab5c7b3b6b5b1656debbec8fc2ffe0d99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal implementation macro for exception assertations.  <a href="#gab5c7b3b6b5b1656debbec8fc2ffe0d99">More...</a><br/></td></tr>
<tr class="separator:gab5c7b3b6b5b1656debbec8fc2ffe0d99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga902c620217d0acf1b0f0ab9319ad64ae"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga902c620217d0acf1b0f0ab9319ad64ae"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga902c620217d0acf1b0f0ab9319ad64ae">EXPECT_THROW_GMX</a>(statement, expected_exception)</td></tr>
<tr class="memdesc:ga902c620217d0acf1b0f0ab9319ad64ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Asserts that a statement throws a given exception. <br/></td></tr>
<tr class="separator:ga902c620217d0acf1b0f0ab9319ad64ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1f05debf4536f9e77a6a0d992fee686f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga1f05debf4536f9e77a6a0d992fee686f"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga1f05debf4536f9e77a6a0d992fee686f">EXPECT_NO_THROW_GMX</a>(statement)</td></tr>
<tr class="memdesc:ga1f05debf4536f9e77a6a0d992fee686f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Asserts that a statement does not throw. <br/></td></tr>
<tr class="separator:ga1f05debf4536f9e77a6a0d992fee686f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5cd586713beef5aa3cf19b0ed2b3a269"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga5cd586713beef5aa3cf19b0ed2b3a269"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga5cd586713beef5aa3cf19b0ed2b3a269">ASSERT_THROW_GMX</a>(statement, expected_exception)</td></tr>
<tr class="memdesc:ga5cd586713beef5aa3cf19b0ed2b3a269"><td class="mdescLeft">&#160;</td><td class="mdescRight">Asserts that a statement throws a given exception. <br/></td></tr>
<tr class="separator:ga5cd586713beef5aa3cf19b0ed2b3a269"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafbd852cd87908495678c48118c02ee82"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gafbd852cd87908495678c48118c02ee82"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gafbd852cd87908495678c48118c02ee82">ASSERT_NO_THROW_GMX</a>(statement)</td></tr>
<tr class="memdesc:gafbd852cd87908495678c48118c02ee82"><td class="mdescLeft">&#160;</td><td class="mdescRight">Asserts that a statement does not throw. <br/></td></tr>
<tr class="separator:gafbd852cd87908495678c48118c02ee82"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Assertions for floating-point comparison</h2></td></tr>
<tr><td class="ititle" colspan="2"><p><a class="anchor" id="amgrp85037fb0ed1e10a36100983a0e19c5a5"></a>These routines extend <code>(EXPECT|ASSERT)_(FLOAT|DOUBLE)_EQ</code> and <code>(EXPECT|ASSERT)_NEAR</code> from Google Test to provide more flexible assertions for floating-point values.</p>
<p>See <a class="el" href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml" title="Specifies a floating-point comparison tolerance and checks whether a difference is within the toleran...">gmx::test::FloatingPointTolerance</a> for the possible ways to specify the tolerance, and <a class="el" href="classgmx_1_1test_1_1FloatingPointDifference.xhtml" title="Computes and represents a floating-point difference value. ">gmx::test::FloatingPointDifference</a> for some additional details of the difference calculation. </p>
</td></tr>
<tr class="memitem:ga2e6cf2631a7f8256a5a044685a702fbb"><td class="memTemplParams" colspan="2">template&lt;typename FloatType &gt; </td></tr>
<tr class="memitem:ga2e6cf2631a7f8256a5a044685a702fbb"><td class="memTemplItemLeft" align="right" valign="top">static <br class="typebreak"/>
inline::testing::AssertionResult&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga2e6cf2631a7f8256a5a044685a702fbb">gmx::test::assertEqualWithinTolerance</a> (const char *expr1, const char *expr2, const char *, FloatType value1, FloatType value2, const FloatingPointTolerance &amp;tolerance)</td></tr>
<tr class="memdesc:ga2e6cf2631a7f8256a5a044685a702fbb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assertion predicate formatter for comparing two floating-point values.  <a href="#ga2e6cf2631a7f8256a5a044685a702fbb">More...</a><br/></td></tr>
<tr class="separator:ga2e6cf2631a7f8256a5a044685a702fbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab2d4d6b8ac472eccb5aa6ae100d12aa9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gab2d4d6b8ac472eccb5aa6ae100d12aa9"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gab2d4d6b8ac472eccb5aa6ae100d12aa9">EXPECT_FLOAT_EQ_TOL</a>(value1, value2, tolerance)</td></tr>
<tr class="memdesc:gab2d4d6b8ac472eccb5aa6ae100d12aa9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Asserts that two single-precision values are within the given tolerance. <br/></td></tr>
<tr class="separator:gab2d4d6b8ac472eccb5aa6ae100d12aa9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4ca34636bd95cb3738291224d27e9649"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga4ca34636bd95cb3738291224d27e9649"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga4ca34636bd95cb3738291224d27e9649">EXPECT_DOUBLE_EQ_TOL</a>(value1, value2, tolerance)</td></tr>
<tr class="memdesc:ga4ca34636bd95cb3738291224d27e9649"><td class="mdescLeft">&#160;</td><td class="mdescRight">Asserts that two double-precision values are within the given tolerance. <br/></td></tr>
<tr class="separator:ga4ca34636bd95cb3738291224d27e9649"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7285ed4e345fac4ba689c8bbcd24118d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga7285ed4e345fac4ba689c8bbcd24118d"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga7285ed4e345fac4ba689c8bbcd24118d">EXPECT_REAL_EQ_TOL</a>(value1, value2, tolerance)</td></tr>
<tr class="memdesc:ga7285ed4e345fac4ba689c8bbcd24118d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Asserts that two <code>real</code> values are within the given tolerance. <br/></td></tr>
<tr class="separator:ga7285ed4e345fac4ba689c8bbcd24118d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8ee3a0884221d08e838d4e4c46708153"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga8ee3a0884221d08e838d4e4c46708153"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga8ee3a0884221d08e838d4e4c46708153">ASSERT_FLOAT_EQ_TOL</a>(value1, value2, tolerance)</td></tr>
<tr class="memdesc:ga8ee3a0884221d08e838d4e4c46708153"><td class="mdescLeft">&#160;</td><td class="mdescRight">Asserts that two single-precision values are within the given tolerance. <br/></td></tr>
<tr class="separator:ga8ee3a0884221d08e838d4e4c46708153"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga010a2c949d35b7f815862bcbd6418ca0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga010a2c949d35b7f815862bcbd6418ca0"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga010a2c949d35b7f815862bcbd6418ca0">ASSERT_DOUBLE_EQ_TOL</a>(value1, value2, tolerance)</td></tr>
<tr class="memdesc:ga010a2c949d35b7f815862bcbd6418ca0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Asserts that two double-precision values are within the given tolerance. <br/></td></tr>
<tr class="separator:ga010a2c949d35b7f815862bcbd6418ca0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6e4937301d5b94f07bb4d9fd71030555"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga6e4937301d5b94f07bb4d9fd71030555"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga6e4937301d5b94f07bb4d9fd71030555">ASSERT_REAL_EQ_TOL</a>(value1, value2, tolerance)</td></tr>
<tr class="memdesc:ga6e4937301d5b94f07bb4d9fd71030555"><td class="mdescLeft">&#160;</td><td class="mdescRight">Asserts that two <code>real</code> values are within the given tolerance. <br/></td></tr>
<tr class="separator:ga6e4937301d5b94f07bb4d9fd71030555"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Assertions for NULL comparison</h2></td></tr>
<tr><td class="ititle" colspan="2"><p><a class="anchor" id="amgrp8a2d8a967d3d506ddeede32e485cea97"></a>These macros should be used instead of <code>(EXPECT|ASSERT)_EQ(NULL, ...)</code>, because Google Test doesn't support the NULL comparison with xlC++ 12.1 on BG/Q. </p>
</td></tr>
<tr class="memitem:gab0e3aeeef45655e39e4a0d99bf434faf"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gab0e3aeeef45655e39e4a0d99bf434faf">EXPECT_NULL</a>(val)&#160;&#160;&#160;EXPECT_EQ((void *) NULL, val)</td></tr>
<tr class="memdesc:gab0e3aeeef45655e39e4a0d99bf434faf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Asserts that a pointer is null.  <a href="#gab0e3aeeef45655e39e4a0d99bf434faf">More...</a><br/></td></tr>
<tr class="separator:gab0e3aeeef45655e39e4a0d99bf434faf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7846505c9b466e811f48e74345067ec6"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga7846505c9b466e811f48e74345067ec6">ASSERT_NULL</a>(val)&#160;&#160;&#160;ASSERT_EQ((void *) NULL, val)</td></tr>
<tr class="memdesc:ga7846505c9b466e811f48e74345067ec6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Asserts that a pointer is null.  <a href="#ga7846505c9b466e811f48e74345067ec6">More...</a><br/></td></tr>
<tr class="separator:ga7846505c9b466e811f48e74345067ec6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">gmx::test::CommandLine</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class for tests that need to construct command lines.  <a href="classgmx_1_1test_1_1CommandLine.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml">gmx::test::CommandLineTestHelper</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class for tests that construct command lines that need to reference existing files.  <a href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLineTestBase.xhtml">gmx::test::CommandLineTestBase</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test fixture for tests that call a single command-line program with input/output files.  <a href="classgmx_1_1test_1_1CommandLineTestBase.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1ConfMatch.xhtml">gmx::test::ConfMatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Match the contents as an gro file.  <a href="classgmx_1_1test_1_1ConfMatch.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1IntegrationTestFixture.xhtml">gmx::test::IntegrationTestFixture</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test fixture for integration tests.  <a href="classgmx_1_1test_1_1IntegrationTestFixture.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1InteractiveTestHelper.xhtml">gmx::test::InteractiveTestHelper</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class for testing interactive sessions.  <a href="classgmx_1_1test_1_1InteractiveTestHelper.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1internal_1_1TestReferenceDataImpl.xhtml">gmx::test::internal::TestReferenceDataImpl</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Private implementation class for <a class="el" href="classgmx_1_1test_1_1TestReferenceData.xhtml" title="Handles creation of and comparison to test reference data. ">TestReferenceData</a>.  <a href="classgmx_1_1test_1_1internal_1_1TestReferenceDataImpl.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml">gmx::test::TestReferenceChecker::Impl</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Private implementation class for <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml" title="Handles comparison to test reference data. ">TestReferenceChecker</a>.  <a href="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceData.xhtml">gmx::test::TestReferenceData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handles creation of and comparison to test reference data.  <a href="classgmx_1_1test_1_1TestReferenceData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">gmx::test::TestReferenceChecker</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handles comparison to test reference data.  <a href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1StringTestBase.xhtml">gmx::test::StringTestBase</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test fixture for tests that check string formatting.  <a href="classgmx_1_1test_1_1StringTestBase.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1FloatingPointDifference.xhtml">gmx::test::FloatingPointDifference</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes and represents a floating-point difference value.  <a href="classgmx_1_1test_1_1FloatingPointDifference.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml">gmx::test::FloatingPointTolerance</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies a floating-point comparison tolerance and checks whether a difference is within the tolerance.  <a href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestException.xhtml">gmx::test::TestException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for reporting errors in tests.  <a href="classgmx_1_1test_1_1TestException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestFileManager.xhtml">gmx::test::TestFileManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper for tests that need input and output files.  <a href="classgmx_1_1test_1_1TestFileManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestFileInputRedirector.xhtml">gmx::test::TestFileInputRedirector</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">In-memory implementation for <a class="el" href="classgmx_1_1IFileInputRedirector.xhtml" title="Allows overriding file existence checks from code that supports it. ">IFileInputRedirector</a> for tests.  <a href="classgmx_1_1test_1_1TestFileInputRedirector.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestFileOutputRedirector.xhtml">gmx::test::TestFileOutputRedirector</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">In-memory implementation of <a class="el" href="classgmx_1_1IFileOutputRedirector.xhtml" title="Allows capturing stdout and file output from code that supports it. ">IFileOutputRedirector</a> for tests.  <a href="classgmx_1_1test_1_1TestFileOutputRedirector.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1anonymous__namespace_02testinit_8cpp_03_1_1TestProgramContext.xhtml">gmx::test::anonymous_namespace{testinit.cpp}::TestProgramContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Custom program context for test binaries.  <a href="classgmx_1_1test_1_1anonymous__namespace_02testinit_8cpp_03_1_1TestProgramContext.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1anonymous__namespace_02testoptions_8cpp_03_1_1TestOptionsRegistry.xhtml">gmx::test::anonymous_namespace{testoptions.cpp}::TestOptionsRegistry</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Singleton registry for test options added with <a class="el" href="group__module__testutils.xhtml#gad8c14b8ddce6c8a7852915ac57f3b52a" title="Macro to add additional command-line options for the test binary. ">GMX_TEST_OPTIONS</a>.  <a href="classgmx_1_1test_1_1anonymous__namespace_02testoptions_8cpp_03_1_1TestOptionsRegistry.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestOptionsProvider.xhtml">gmx::test::TestOptionsProvider</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides additional options for the test executable.  <a href="classgmx_1_1test_1_1TestOptionsProvider.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1ITextBlockMatcher.xhtml">gmx::test::ITextBlockMatcher</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a text matcher, matching text stream contents against reference data.  <a href="classgmx_1_1test_1_1ITextBlockMatcher.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1ITextBlockMatcherSettings.xhtml">gmx::test::ITextBlockMatcherSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a factory for creating a text matcher.  <a href="classgmx_1_1test_1_1ITextBlockMatcherSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1ExactTextMatch.xhtml">gmx::test::ExactTextMatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use an exact text match (the contents should be exactly equal).  <a href="classgmx_1_1test_1_1ExactTextMatch.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1NoTextMatch.xhtml">gmx::test::NoTextMatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do not match the text (the contents are ignored).  <a href="classgmx_1_1test_1_1NoTextMatch.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1XvgMatch.xhtml">gmx::test::XvgMatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Match the contents as an xvg file.  <a href="classgmx_1_1test_1_1XvgMatch.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga8ed3c4e4b4ce3220687cd59aaca59905"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga8ed3c4e4b4ce3220687cd59aaca59905">EXPECT_PLAIN</a>(expr)</td></tr>
<tr class="memdesc:ga8ed3c4e4b4ce3220687cd59aaca59905"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assert for predicates that return AssertionResult and produce a full failure message.  <a href="#ga8ed3c4e4b4ce3220687cd59aaca59905">More...</a><br/></td></tr>
<tr class="separator:ga8ed3c4e4b4ce3220687cd59aaca59905"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga97a0194de1d98402f697adee0fe39a98"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga97a0194de1d98402f697adee0fe39a98">ASSERT_PLAIN</a>(expr)</td></tr>
<tr class="memdesc:ga97a0194de1d98402f697adee0fe39a98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assert for predicates that return AssertionResult and produce a full failure message.  <a href="#ga97a0194de1d98402f697adee0fe39a98">More...</a><br/></td></tr>
<tr class="separator:ga97a0194de1d98402f697adee0fe39a98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad8c14b8ddce6c8a7852915ac57f3b52a"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gad8c14b8ddce6c8a7852915ac57f3b52a">GMX_TEST_OPTIONS</a>(name, options)</td></tr>
<tr class="memdesc:gad8c14b8ddce6c8a7852915ac57f3b52a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Macro to add additional command-line options for the test binary.  <a href="#gad8c14b8ddce6c8a7852915ac57f3b52a">More...</a><br/></td></tr>
<tr class="separator:gad8c14b8ddce6c8a7852915ac57f3b52a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:gad7a0c1ac11a9748556948309218fc08a"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gad7a0c1ac11a9748556948309218fc08a">gmx::test::ReferenceDataMode</a> { <a class="el" href="group__module__testutils.xhtml#ggad7a0c1ac11a9748556948309218fc08aaf5623014171529e1db8e56212300eb02">gmx::test::erefdataCompare</a>, 
<a class="el" href="group__module__testutils.xhtml#ggad7a0c1ac11a9748556948309218fc08aa00a47e9712009f3cf96d99a29e9624fe">gmx::test::erefdataCreateMissing</a>, 
<a class="el" href="group__module__testutils.xhtml#ggad7a0c1ac11a9748556948309218fc08aab551acebd822aba51d7f40993b418988">gmx::test::erefdataUpdateChanged</a>, 
<a class="el" href="group__module__testutils.xhtml#ggad7a0c1ac11a9748556948309218fc08aa67803fee1c34e6e1926d843157533d50">gmx::test::erefdataUpdateAll</a>
 }</td></tr>
<tr class="memdesc:gad7a0c1ac11a9748556948309218fc08a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Mode of operation for reference data handling.  <a href="group__module__testutils.xhtml#gad7a0c1ac11a9748556948309218fc08a">More...</a><br/></td></tr>
<tr class="separator:gad7a0c1ac11a9748556948309218fc08a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga6b2b79eb69558fee27e1832a43b1e6b6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga6b2b79eb69558fee27e1832a43b1e6b6">gmx::test::initMPIOutput</a> ()</td></tr>
<tr class="memdesc:ga6b2b79eb69558fee27e1832a43b1e6b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Customizes test output and test failure handling for MPI runs.  <a href="#ga6b2b79eb69558fee27e1832a43b1e6b6">More...</a><br/></td></tr>
<tr class="separator:ga6b2b79eb69558fee27e1832a43b1e6b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaca906b8c921bc54965ffa4750d6bfbc9"><td class="memItemLeft" align="right" valign="top">ReferenceDataEntry::EntryPointer&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gaca906b8c921bc54965ffa4750d6bfbc9">gmx::test::readReferenceDataFile</a> (const std::string &amp;path)</td></tr>
<tr class="memdesc:gaca906b8c921bc54965ffa4750d6bfbc9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Loads reference data from an XML file.  <a href="#gaca906b8c921bc54965ffa4750d6bfbc9">More...</a><br/></td></tr>
<tr class="separator:gaca906b8c921bc54965ffa4750d6bfbc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga20a6368a3b167869311f158b47d07741"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga20a6368a3b167869311f158b47d07741">gmx::test::writeReferenceDataFile</a> (const std::string &amp;path, const ReferenceDataEntry &amp;root)</td></tr>
<tr class="memdesc:ga20a6368a3b167869311f158b47d07741"><td class="mdescLeft">&#160;</td><td class="mdescRight">Saves reference data to an XML file.  <a href="#ga20a6368a3b167869311f158b47d07741">More...</a><br/></td></tr>
<tr class="separator:ga20a6368a3b167869311f158b47d07741"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac88155b9b78810f4117349514b93fe00"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gac88155b9b78810f4117349514b93fe00">gmx::test::initReferenceData</a> (IOptionsContainer *options)</td></tr>
<tr class="memdesc:gac88155b9b78810f4117349514b93fe00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes reference data handling.  <a href="#gac88155b9b78810f4117349514b93fe00">More...</a><br/></td></tr>
<tr class="separator:gac88155b9b78810f4117349514b93fe00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae9b29d32f4bd98d7af90115c230709d4"><td class="memItemLeft" align="right" valign="top">static <br class="typebreak"/>
inline::testing::AssertionResult&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gae9b29d32f4bd98d7af90115c230709d4">gmx::test::plainAssertHelper</a> (const char *, const ::testing::AssertionResult &amp;expr)</td></tr>
<tr class="memdesc:gae9b29d32f4bd98d7af90115c230709d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper method for <code>(EXPECT|ASSERT)_PLAIN</code>.  <a href="#gae9b29d32f4bd98d7af90115c230709d4">More...</a><br/></td></tr>
<tr class="separator:gae9b29d32f4bd98d7af90115c230709d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5b50a220f4fd9b9fdafd4fd6fab83bbe"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga5b50a220f4fd9b9fdafd4fd6fab83bbe">gmx::test::initTestUtils</a> (const char *dataPath, const char *tempPath, bool usesMpi, int *argc, char ***argv)</td></tr>
<tr class="memdesc:ga5b50a220f4fd9b9fdafd4fd6fab83bbe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the test utilities library.  <a href="#ga5b50a220f4fd9b9fdafd4fd6fab83bbe">More...</a><br/></td></tr>
<tr class="separator:ga5b50a220f4fd9b9fdafd4fd6fab83bbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab5da2af9203abbde7d455d49f6453c76"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gab5da2af9203abbde7d455d49f6453c76">gmx::test::finalizeTestUtils</a> ()</td></tr>
<tr class="memdesc:gab5da2af9203abbde7d455d49f6453c76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finalizes the test utilities library.  <a href="#gab5da2af9203abbde7d455d49f6453c76">More...</a><br/></td></tr>
<tr class="separator:gab5da2af9203abbde7d455d49f6453c76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9b0da354984c1f3ef4e6530d54204cc1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga9b0da354984c1f3ef4e6530d54204cc1">gmx::test::registerTestOptions</a> (const char *name, TestOptionsProvider *provider)</td></tr>
<tr class="memdesc:ga9b0da354984c1f3ef4e6530d54204cc1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registers a test option provider with the test framework.  <a href="#ga9b0da354984c1f3ef4e6530d54204cc1">More...</a><br/></td></tr>
<tr class="separator:ga9b0da354984c1f3ef4e6530d54204cc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabca45f04287813b96ad94839f9a10cb3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gabca45f04287813b96ad94839f9a10cb3">gmx::test::initTestOptions</a> (IOptionsContainer *options)</td></tr>
<tr class="memdesc:gabca45f04287813b96ad94839f9a10cb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the options from all registered test providers.  <a href="#gabca45f04287813b96ad94839f9a10cb3">More...</a><br/></td></tr>
<tr class="separator:gabca45f04287813b96ad94839f9a10cb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaad10037356014d0ba6ab4599f38ca3f4"><td class="memTemplParams" colspan="2">template&lt;typename FloatType &gt; </td></tr>
<tr class="memitem:gaad10037356014d0ba6ab4599f38ca3f4"><td class="memTemplItemLeft" align="right" valign="top">FloatType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gaad10037356014d0ba6ab4599f38ca3f4">anonymous_namespace{testasserts_tests.cpp}::addUlps</a> (FloatType value, int ulps)</td></tr>
<tr class="memdesc:gaad10037356014d0ba6ab4599f38ca3f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper to produce floating-point numbers with specified ULP difference.  <a href="#gaad10037356014d0ba6ab4599f38ca3f4">More...</a><br/></td></tr>
<tr class="separator:gaad10037356014d0ba6ab4599f38ca3f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad25b9666492f99265f71a3c6da9e2a1b"><td class="memItemLeft" align="right" valign="top">static FloatingPointTolerance&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gad25b9666492f99265f71a3c6da9e2a1b">ulpTolerance</a> (gmx_uint64_t ulpDiff)</td></tr>
<tr class="memdesc:gad25b9666492f99265f71a3c6da9e2a1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a tolerance that only allows a specified ULP difference.  <a href="#gad25b9666492f99265f71a3c6da9e2a1b">More...</a><br/></td></tr>
<tr class="separator:gad25b9666492f99265f71a3c6da9e2a1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad4123626be56582b11ef6accf715dbe3"><td class="memItemLeft" align="right" valign="top">FloatingPointTolerance&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gad4123626be56582b11ef6accf715dbe3">relativeToleranceAsFloatingPoint</a> (double magnitude, double tolerance)</td></tr>
<tr class="memdesc:gad4123626be56582b11ef6accf715dbe3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a tolerance that allows a difference in two compared values that is relative to the given magnitude.  <a href="#gad4123626be56582b11ef6accf715dbe3">More...</a><br/></td></tr>
<tr class="separator:gad4123626be56582b11ef6accf715dbe3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga665e9f7521e7815f6e5eac6bb375f167"><td class="memItemLeft" align="right" valign="top">static FloatingPointTolerance&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga665e9f7521e7815f6e5eac6bb375f167">relativeToleranceAsPrecisionDependentUlp</a> (double magnitude, gmx_uint64_t singleUlpDiff, gmx_uint64_t doubleUlpDiff)</td></tr>
<tr class="memdesc:ga665e9f7521e7815f6e5eac6bb375f167"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a tolerance that allows a precision-dependent relative difference in a complex computation.  <a href="#ga665e9f7521e7815f6e5eac6bb375f167">More...</a><br/></td></tr>
<tr class="separator:ga665e9f7521e7815f6e5eac6bb375f167"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga56f5fffbd8acc6dccade6feafc2e0f59"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga56f5fffbd8acc6dccade6feafc2e0f59"></a>
static FloatingPointTolerance&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga56f5fffbd8acc6dccade6feafc2e0f59">absoluteTolerance</a> (double tolerance)</td></tr>
<tr class="memdesc:ga56f5fffbd8acc6dccade6feafc2e0f59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a tolerance that allows a specified absolute difference. <br/></td></tr>
<tr class="separator:ga56f5fffbd8acc6dccade6feafc2e0f59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5395a4d9809d729093751f7a4e5600ed"><td class="memItemLeft" align="right" valign="top">static FloatingPointTolerance&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga5395a4d9809d729093751f7a4e5600ed">relativeToleranceAsUlp</a> (double magnitude, gmx_uint64_t ulpDiff)</td></tr>
<tr class="memdesc:ga5395a4d9809d729093751f7a4e5600ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a tolerance that allows a relative difference in a complex computation.  <a href="#ga5395a4d9809d729093751f7a4e5600ed">More...</a><br/></td></tr>
<tr class="separator:ga5395a4d9809d729093751f7a4e5600ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab00e5c316ac0e80559fd0e24c8a36a7e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gab00e5c316ac0e80559fd0e24c8a36a7e"></a>
static FloatingPointTolerance&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gab00e5c316ac0e80559fd0e24c8a36a7e">defaultRealTolerance</a> ()</td></tr>
<tr class="memdesc:gab00e5c316ac0e80559fd0e24c8a36a7e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the default tolerance for comparing <code>real</code> numbers. <br/></td></tr>
<tr class="separator:gab00e5c316ac0e80559fd0e24c8a36a7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="dirs"></a>
Directories</h2></td></tr>
<tr class="memitem:dir_578bb10d05c7497569e3ae4615cf11b2"><td class="memItemLeft" align="right" valign="top">directory&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dir_578bb10d05c7497569e3ae4615cf11b2.xhtml">testutils</a></td></tr>
<tr class="memdesc:dir_578bb10d05c7497569e3ae4615cf11b2"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="group__module__testutils.xhtml">Testing Utilities (testutils)</a> <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:dir_d02a5539bcac5e2122d27c6bf8198bcf"><td class="memItemLeft" align="right" valign="top">directory&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dir_d02a5539bcac5e2122d27c6bf8198bcf.xhtml">tests</a></td></tr>
<tr class="memdesc:dir_d02a5539bcac5e2122d27c6bf8198bcf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unit tests for <a class="el" href="group__module__testutils.xhtml">Testing Utilities (testutils)</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"></a>
Files</h2></td></tr>
<tr class="memitem:cmdlinetest_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cmdlinetest_8cpp.xhtml">cmdlinetest.cpp</a></td></tr>
<tr class="memdesc:cmdlinetest_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements classes from <a class="el" href="cmdlinetest_8h.xhtml" title="Declares utilities testing command-line programs. ">cmdlinetest.h</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:cmdlinetest_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cmdlinetest_8h.xhtml">cmdlinetest.h</a></td></tr>
<tr class="memdesc:cmdlinetest_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares utilities testing command-line programs. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:conftest_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conftest_8cpp.xhtml">conftest.cpp</a></td></tr>
<tr class="memdesc:conftest_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements routine to check the content of conf files. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:conftest_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conftest_8h.xhtml">conftest.h</a></td></tr>
<tr class="memdesc:conftest_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares function to add the content of a conf file to a checker. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:integrationtests_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="integrationtests_8cpp.xhtml">integrationtests.cpp</a></td></tr>
<tr class="memdesc:integrationtests_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements classes in <a class="el" href="integrationtests_8h.xhtml" title="Declares test fixture for integration tests. ">integrationtests.h</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:integrationtests_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="integrationtests_8h.xhtml">integrationtests.h</a></td></tr>
<tr class="memdesc:integrationtests_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares test fixture for integration tests. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:interactivetest_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interactivetest_8cpp.xhtml">interactivetest.cpp</a></td></tr>
<tr class="memdesc:interactivetest_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements classes from <a class="el" href="interactivetest_8h.xhtml" title="Provides helper classes for testing interactive prompts. ">interactivetest.h</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:interactivetest_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interactivetest_8h.xhtml">interactivetest.h</a></td></tr>
<tr class="memdesc:interactivetest_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides helper classes for testing interactive prompts. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:mpi-printer_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="mpi-printer_8h.xhtml">mpi-printer.h</a></td></tr>
<tr class="memdesc:mpi-printer_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <a class="el" href="group__module__testutils.xhtml#ga6b2b79eb69558fee27e1832a43b1e6b6" title="Customizes test output and test failure handling for MPI runs. ">gmx::test::initMPIOutput()</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:refdata-checkers_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="refdata-checkers_8h.xhtml">refdata-checkers.h</a></td></tr>
<tr class="memdesc:refdata-checkers_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares internal helper classes for the reference data framework to check reference data values of different types. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:refdata-impl_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="refdata-impl_8h.xhtml">refdata-impl.h</a></td></tr>
<tr class="memdesc:refdata-impl_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares internal data structures for the reference data framework. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:refdata-xml_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="refdata-xml_8cpp.xhtml">refdata-xml.cpp</a></td></tr>
<tr class="memdesc:refdata-xml_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements reference data XML persistence. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:refdata-xml_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="refdata-xml_8h.xhtml">refdata-xml.h</a></td></tr>
<tr class="memdesc:refdata-xml_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares functions for reference data XML persistence. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:refdata_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="refdata_8cpp.xhtml">refdata.cpp</a></td></tr>
<tr class="memdesc:refdata_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements classes and functions from <a class="el" href="refdata_8h.xhtml" title="Functionality for writing tests that can produce their own reference data. ">refdata.h</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:refdata_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="refdata_8h.xhtml">refdata.h</a></td></tr>
<tr class="memdesc:refdata_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Functionality for writing tests that can produce their own reference data. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:stringtest_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stringtest_8cpp.xhtml">stringtest.cpp</a></td></tr>
<tr class="memdesc:stringtest_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements <a class="el" href="classgmx_1_1test_1_1StringTestBase.xhtml" title="Test fixture for tests that check string formatting. ">gmx::test::StringTestBase</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:stringtest_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stringtest_8h.xhtml">stringtest.h</a></td></tr>
<tr class="memdesc:stringtest_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <a class="el" href="classgmx_1_1test_1_1StringTestBase.xhtml" title="Test fixture for tests that check string formatting. ">gmx::test::StringTestBase</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:testasserts_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="testasserts_8cpp.xhtml">testasserts.cpp</a></td></tr>
<tr class="memdesc:testasserts_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements floating-point comparison routines from <a class="el" href="testasserts_8h.xhtml" title="Extra assertions for unit tests. ">testasserts.h</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:testasserts_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="testasserts_8h.xhtml">testasserts.h</a></td></tr>
<tr class="memdesc:testasserts_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extra assertions for unit tests. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:testexceptions_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="testexceptions_8h.xhtml">testexceptions.h</a></td></tr>
<tr class="memdesc:testexceptions_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception classes for errors in tests. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:testfilemanager_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="testfilemanager_8cpp.xhtml">testfilemanager.cpp</a></td></tr>
<tr class="memdesc:testfilemanager_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements <a class="el" href="classgmx_1_1test_1_1TestFileManager.xhtml" title="Helper for tests that need input and output files. ">gmx::test::TestFileManager</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:testfilemanager_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="testfilemanager_8h.xhtml">testfilemanager.h</a></td></tr>
<tr class="memdesc:testfilemanager_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <a class="el" href="classgmx_1_1test_1_1TestFileManager.xhtml" title="Helper for tests that need input and output files. ">gmx::test::TestFileManager</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:testfileredirector_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="testfileredirector_8cpp.xhtml">testfileredirector.cpp</a></td></tr>
<tr class="memdesc:testfileredirector_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements classes from <a class="el" href="testfileredirector_8h.xhtml" title="Declares generic mock implementations for interfaces in fileredirector.h. ">testfileredirector.h</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:testfileredirector_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="testfileredirector_8h.xhtml">testfileredirector.h</a></td></tr>
<tr class="memdesc:testfileredirector_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares generic mock implementations for interfaces in <a class="el" href="fileredirector_8h.xhtml" title="Declares gmx::IFileOutputRedirector. ">fileredirector.h</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:testinit_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="testinit_8cpp.xhtml">testinit.cpp</a></td></tr>
<tr class="memdesc:testinit_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements functions in <a class="el" href="testinit_8h.xhtml" title="Functions for initialing GROMACS unit test executables. ">testinit.h</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:testinit_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="testinit_8h.xhtml">testinit.h</a></td></tr>
<tr class="memdesc:testinit_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Functions for initialing GROMACS unit test executables. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:testoptions_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="testoptions_8cpp.xhtml">testoptions.cpp</a></td></tr>
<tr class="memdesc:testoptions_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements functions in <a class="el" href="testoptions_8h.xhtml" title="Functions for accessing test command-line options. ">testoptions.h</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:testoptions_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="testoptions_8h.xhtml">testoptions.h</a></td></tr>
<tr class="memdesc:testoptions_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Functions for accessing test command-line options. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:tests_2interactivetest_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tests_2interactivetest_8cpp.xhtml">interactivetest.cpp</a></td></tr>
<tr class="memdesc:tests_2interactivetest_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Self-tests for interactive test helpers. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:refdata__tests_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="refdata__tests_8cpp.xhtml">refdata_tests.cpp</a></td></tr>
<tr class="memdesc:refdata__tests_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests utilities for test reference data. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:testasserts__tests_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="testasserts__tests_8cpp.xhtml">testasserts_tests.cpp</a></td></tr>
<tr class="memdesc:testasserts__tests_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests GROMACS-specific test assertions. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:xvgtest__tests_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvgtest__tests_8cpp.xhtml">xvgtest_tests.cpp</a></td></tr>
<tr class="memdesc:xvgtest__tests_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests utilities for testing xvg files. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:testutils-doc_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="testutils-doc_8h.xhtml">testutils-doc.h</a></td></tr>
<tr class="memdesc:testutils-doc_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dummy header for <a class="el" href="group__module__testutils.xhtml">Testing Utilities (testutils)</a> documentation. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:textblockmatchers_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="textblockmatchers_8cpp.xhtml">textblockmatchers.cpp</a></td></tr>
<tr class="memdesc:textblockmatchers_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements classes from <a class="el" href="textblockmatchers_8h.xhtml" title="Declares utility classes for testing multi-line strings against reference data. ">textblockmatchers.h</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:textblockmatchers_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="textblockmatchers_8h.xhtml">textblockmatchers.h</a></td></tr>
<tr class="memdesc:textblockmatchers_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares utility classes for testing multi-line strings against reference data. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:unittest__main_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unittest__main_8cpp.xhtml">unittest_main.cpp</a></td></tr>
<tr class="memdesc:unittest__main_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="test__selection_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the selection testing tool. ">main()</a> for unit tests that use <a class="el" href="group__module__testutils.xhtml">Testing Utilities (testutils)</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:xvgtest_8cpp"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvgtest_8cpp.xhtml">xvgtest.cpp</a></td></tr>
<tr class="memdesc:xvgtest_8cpp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements routine to check the content of xvg files. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:xvgtest_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvgtest_8h.xhtml">xvgtest.h</a></td></tr>
<tr class="memdesc:xvgtest_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares function to add the content of an xvg file to a checker. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a class="anchor" id="ga7846505c9b466e811f48e74345067ec6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ASSERT_NULL</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">val</td><td>)</td>
          <td>&#160;&#160;&#160;ASSERT_EQ((void *) NULL, val)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Asserts that a pointer is null. </p>
<p>Works exactly like ASSERT_EQ comparing with a null pointer. </p>

</div>
</div>
<a class="anchor" id="ga97a0194de1d98402f697adee0fe39a98"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ASSERT_PLAIN</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">expr</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Assert for predicates that return AssertionResult and produce a full failure message. </p>
<p><code>expr</code> should evaluate to AssertionResult, and on failure the message from the result is used as-is, unlike in ASSERT_TRUE(). </p>

</div>
</div>
<a class="anchor" id="gab0e3aeeef45655e39e4a0d99bf434faf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define EXPECT_NULL</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">val</td><td>)</td>
          <td>&#160;&#160;&#160;EXPECT_EQ((void *) NULL, val)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Asserts that a pointer is null. </p>
<p>Works exactly like EXPECT_EQ comparing with a null pointer. </p>

</div>
</div>
<a class="anchor" id="ga8ed3c4e4b4ce3220687cd59aaca59905"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define EXPECT_PLAIN</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">expr</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Assert for predicates that return AssertionResult and produce a full failure message. </p>
<p><code>expr</code> should evaluate to AssertionResult, and on failure the message from the result is used as-is, unlike in EXPECT_TRUE(). </p>

</div>
</div>
<a class="anchor" id="gab5c7b3b6b5b1656debbec8fc2ffe0d99"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define GMX_TEST_NO_THROW_</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">statement, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">fail&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line">GTEST_AMBIGUOUS_ELSE_BLOCKER_ \</div>
<div class="line">    if (::testing::AssertionResult gmx_ar = ::testing::AssertionSuccess()) { \</div>
<div class="line">        try { \</div>
<div class="line">            GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement); \</div>
<div class="line">        } \</div>
<div class="line">        catch (std::exception <span class="keyword">const</span> &amp;ex) { \</div>
<div class="line">            gmx_ar &lt;&lt; <span class="stringliteral">&quot;Expected: &quot;</span> #statement <span class="stringliteral">&quot; doesn&#39;t throw an exception.\n&quot;</span> \</div>
<div class="line">            &lt;&lt; <span class="stringliteral">&quot;  Actual: it throws.\n&quot;</span> \</div>
<div class="line">            &lt;&lt; <span class="stringliteral">&quot;Exception details:\n&quot;</span> &lt;&lt; <a class="code" href="group__module__utility.xhtml#gac7703ad35b606758d2d12edc0a3d5217">::gmx::formatExceptionMessageToString</a>(ex); \</div>
<div class="line">            goto GTEST_CONCAT_TOKEN_(gmx_label_testnothrow_, __LINE__); \</div>
<div class="line">        } \</div>
<div class="line">        catch (...) { \</div>
<div class="line">            gmx_ar &lt;&lt; <span class="stringliteral">&quot;Expected: &quot;</span> #statement <span class="stringliteral">&quot; doesn&#39;t throw an exception.\n&quot;</span> \</div>
<div class="line">            &lt;&lt; <span class="stringliteral">&quot;  Actual: it throws.&quot;</span>; \</div>
<div class="line">            goto GTEST_CONCAT_TOKEN_(gmx_label_testnothrow_, __LINE__); \</div>
<div class="line">        } \</div>
<div class="line">    } else \</div>
<div class="line">        GTEST_CONCAT_TOKEN_(gmx_label_testnothrow_, __LINE__) : \</div>
<div class="line">            fail(gmx_ar.message())</div>
<div class="ttc" id="group__module__utility_xhtml_gac7703ad35b606758d2d12edc0a3d5217"><div class="ttname"><a href="group__module__utility.xhtml#gac7703ad35b606758d2d12edc0a3d5217">gmx::formatExceptionMessageToString</a></div><div class="ttdeci">std::string formatExceptionMessageToString(const std::exception &amp;ex)</div><div class="ttdoc">Formats an error message for reporting an exception. </div><div class="ttdef"><b>Definition:</b> exceptions.cpp:561</div></div>
</div><!-- fragment -->
<p>Internal implementation macro for exception assertations. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">statement</td><td>Statements to execute. </td></tr>
    <tr><td class="paramname">fail</td><td>Function/macro to call on failure.</td></tr>
  </table>
  </dd>
</dl>
<p>The implementation is copied and adjusted from include/gtest/internal/gtest-internal.h in Google Test 1.6.0. </p>

</div>
</div>
<a class="anchor" id="gad8c14b8ddce6c8a7852915ac57f3b52a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define GMX_TEST_OPTIONS</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">name, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">options&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Macro to add additional command-line options for the test binary. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Unique name for the set of options. </td></tr>
    <tr><td class="paramname">options</td><td>Placeholder name for an <a class="el" href="classgmx_1_1Options.xhtml" title="Collection of options. ">gmx::Options</a> object for adding options.</td></tr>
  </table>
  </dd>
</dl>
<p>The macro should be followed by a block that adds the desired command-line options to <code>options</code> using <a class="el" href="classgmx_1_1Options.xhtml#a7add46682b6c65d3de585e7942df7807" title="Adds a recognized option. ">gmx::Options::addOption()</a>. <a class="el" href="group__module__options.xhtml">Extensible Handling of Options (options)</a> provides an overview of the options machinery.</p>
<p><code>name</code> must be unique within the executable to which the options are added. If the macro is within an unnamed namespace, then it is sufficient that it is unique within the file.</p>
<p>Typical usage: </p>
<div class="fragment"><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="basicoptions_8h.xhtml">gromacs/options/basicoptions.h</a>&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;<a class="code" href="ioptionscontainer_8h.xhtml">gromacs/options/ioptionscontainer.h</a>&quot;</span></div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#include &quot;<a class="code" href="testoptions_8h.xhtml">testutils/testoptions.h</a>&quot;</span></div>
<div class="line"></div>
<div class="line"><span class="keyword">namespace </span>gmx</div>
<div class="line">{</div>
<div class="line"><span class="keyword">namespace</span></div>
<div class="line">{</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">bool</span> g_optionValue = <span class="keyword">false</span>;</div>
<div class="line"><span class="comment"></span></div>
<div class="line"><span class="comment">//! \cond</span></div>
<div class="line"><span class="comment"></span><a class="code" href="group__module__testutils.xhtml#gad8c14b8ddce6c8a7852915ac57f3b52a">GMX_TEST_OPTIONS</a>(MyTestOptions, options)</div>
<div class="line">{</div>
<div class="line">    options-&gt;addOption(BooleanOption(<span class="stringliteral">&quot;flag&quot;</span>).<a class="code" href="namespacegmx.xhtml#a9c1227e97a6084a280a611c2934c8ee1">store</a>(&amp;g_optionValue)</div>
<div class="line">                           .description(<span class="stringliteral">&quot;My description&quot;</span>));</div>
<div class="line">}<span class="comment"></span></div>
<div class="line"><span class="comment">//! \endcond</span></div>
<div class="line"><span class="comment"></span></div>
<div class="line">} <span class="comment">// namespace</span></div>
<div class="line">} <span class="comment">// namespace gmx</span></div>
</div><!-- fragment --><p><code>\cond</code> and <code>\endcond</code> statements are necessary around the macro to avoid Doxygen warnings.</p>
<p>One macro invocation per an added option, with more of the implementation details hidden inside the macro, could be nicer. But that requires more elaborate macro machinery, so it is probably not worth the effort and complexity. </p>

</div>
</div>
<a class="anchor" id="ga1eec5082a161ff78e7b973d55593828b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define GMX_TEST_THROW_</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">statement, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">expected_exception, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">fail&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line">GTEST_AMBIGUOUS_ELSE_BLOCKER_ \</div>
<div class="line">    if (::testing::AssertionResult gmx_ar = ::testing::AssertionSuccess()) { \</div>
<div class="line">        bool gmx_caught_expected = <span class="keyword">false</span>; \</div>
<div class="line">        try { \</div>
<div class="line">            GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement); \</div>
<div class="line">        } \</div>
<div class="line">        catch (expected_exception <span class="keyword">const</span> &amp;ex) { \</div>
<div class="line">            gmx_caught_expected = <span class="keyword">true</span>; \</div>
<div class="line">            ::gmx::test::internal::processExpectedException(ex); \</div>
<div class="line">        } \</div>
<div class="line">        catch (std::exception <span class="keyword">const</span> &amp;ex) { \</div>
<div class="line">            gmx_ar &lt;&lt; <span class="stringliteral">&quot;Expected: &quot;</span> #statement <span class="stringliteral">&quot; throws an exception of type &quot;</span> \</div>
<div class="line">            &lt;&lt; #expected_exception <span class="stringliteral">&quot;.\n  Actual: it throws a different type.\n&quot;</span> \</div>
<div class="line">            &lt;&lt; <span class="stringliteral">&quot;Exception details:\n&quot;</span> &lt;&lt; <a class="code" href="group__module__utility.xhtml#gac7703ad35b606758d2d12edc0a3d5217">::gmx::formatExceptionMessageToString</a>(ex); \</div>
<div class="line">            goto GTEST_CONCAT_TOKEN_(gmx_label_testthrow_, __LINE__); \</div>
<div class="line">        } \</div>
<div class="line">        catch (...) { \</div>
<div class="line">            gmx_ar &lt;&lt; <span class="stringliteral">&quot;Expected: &quot;</span> #statement <span class="stringliteral">&quot; throws an exception of type &quot;</span> \</div>
<div class="line">            &lt;&lt; #expected_exception <span class="stringliteral">&quot;.\n  Actual: it throws a different type.&quot;</span>; \</div>
<div class="line">            goto GTEST_CONCAT_TOKEN_(gmx_label_testthrow_, __LINE__); \</div>
<div class="line">        } \</div>
<div class="line">        if (!gmx_caught_expected) { \</div>
<div class="line">            gmx_ar &lt;&lt; <span class="stringliteral">&quot;Expected: &quot;</span> #statement <span class="stringliteral">&quot; throws an exception of type &quot;</span> \</div>
<div class="line">            &lt;&lt; #expected_exception <span class="stringliteral">&quot;.\n  Actual: it throws nothing.&quot;</span>; \</div>
<div class="line">            goto GTEST_CONCAT_TOKEN_(gmx_label_testthrow_, __LINE__); \</div>
<div class="line">        } \</div>
<div class="line">    } else \</div>
<div class="line">        GTEST_CONCAT_TOKEN_(gmx_label_testthrow_, __LINE__) : \</div>
<div class="line">            fail(gmx_ar.message())</div>
<div class="ttc" id="group__module__utility_xhtml_gac7703ad35b606758d2d12edc0a3d5217"><div class="ttname"><a href="group__module__utility.xhtml#gac7703ad35b606758d2d12edc0a3d5217">gmx::formatExceptionMessageToString</a></div><div class="ttdeci">std::string formatExceptionMessageToString(const std::exception &amp;ex)</div><div class="ttdoc">Formats an error message for reporting an exception. </div><div class="ttdef"><b>Definition:</b> exceptions.cpp:561</div></div>
</div><!-- fragment -->
<p>Internal implementation macro for exception assertations. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">statement</td><td>Statements to execute. </td></tr>
    <tr><td class="paramname">expected_exception</td><td>Exception type that <code>statement</code> should throw. </td></tr>
    <tr><td class="paramname">fail</td><td>Function/macro to call on failure.</td></tr>
  </table>
  </dd>
</dl>
<p>The implementation is copied and adjusted from include/gtest/internal/gtest-internal.h in Google Test 1.6.0. </p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a class="anchor" id="gad7a0c1ac11a9748556948309218fc08a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__module__testutils.xhtml#gad7a0c1ac11a9748556948309218fc08a">gmx::test::ReferenceDataMode</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Mode of operation for reference data handling. </p>
<p>There should be no need to use this type outside the test utility module. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="ggad7a0c1ac11a9748556948309218fc08aaf5623014171529e1db8e56212300eb02"></a>erefdataCompare</em>&nbsp;</td><td class="fielddoc">
<p>Compare to existing reference data. </p>
<p>If reference data does not exist, or if the test results differ from those in the reference data, the test fails. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggad7a0c1ac11a9748556948309218fc08aa00a47e9712009f3cf96d99a29e9624fe"></a>erefdataCreateMissing</em>&nbsp;</td><td class="fielddoc">
<p>Create missing reference data. </p>
<p>If reference data does not exist for a test, that test behaves as if <a class="el" href="group__module__testutils.xhtml#ggad7a0c1ac11a9748556948309218fc08aa67803fee1c34e6e1926d843157533d50" title="Update reference data, overwriting old data. ">erefdataUpdateAll</a> had been specified. Tests for which reference data exists, behave like with <a class="el" href="group__module__testutils.xhtml#ggad7a0c1ac11a9748556948309218fc08aaf5623014171529e1db8e56212300eb02" title="Compare to existing reference data. ">erefdataCompare</a>. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggad7a0c1ac11a9748556948309218fc08aab551acebd822aba51d7f40993b418988"></a>erefdataUpdateChanged</em>&nbsp;</td><td class="fielddoc">
<p>Update reference data that does not pass comparison. </p>
<p>Tests utilizing reference data should always pass in this mode unless there is an I/O error. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggad7a0c1ac11a9748556948309218fc08aa67803fee1c34e6e1926d843157533d50"></a>erefdataUpdateAll</em>&nbsp;</td><td class="fielddoc">
<p>Update reference data, overwriting old data. </p>
<p>Tests utilizing reference data should always pass in this mode unless there is an I/O error. </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="gaad10037356014d0ba6ab4599f38ca3f4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename FloatType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">FloatType anonymous_namespace{testasserts_tests.cpp}::addUlps </td>
          <td>(</td>
          <td class="paramtype">FloatType&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ulps</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper to produce floating-point numbers with specified ULP difference. </p>
<p>This doesn't work if the value would change sign. </p>

</div>
</div>
<a class="anchor" id="ga2e6cf2631a7f8256a5a044685a702fbb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename FloatType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static inline ::testing::AssertionResult gmx::test::assertEqualWithinTolerance </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>expr1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>expr2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FloatType&#160;</td>
          <td class="paramname"><em>value1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FloatType&#160;</td>
          <td class="paramname"><em>value2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const FloatingPointTolerance &amp;&#160;</td>
          <td class="paramname"><em>tolerance</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Assertion predicate formatter for comparing two floating-point values. </p>

</div>
</div>
<a class="anchor" id="gab5da2af9203abbde7d455d49f6453c76"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::finalizeTestUtils </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Finalizes the test utilities library. </p>
<p>Does not throw. Terminates the program with a non-zero error code if an error occurs.</p>
<p>This function is automatically called by <a class="el" href="unittest__main_8cpp.xhtml" title="main() for unit tests that use Testing Utilities (testutils). ">unittest_main.cpp</a>. </p>

</div>
</div>
<a class="anchor" id="gaa4f52fad8b5f296790f25f67d66b56c4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename FloatType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">FloatingPoint&lt;FloatType&gt;::Bits gmx::test::anonymous_namespace{testasserts.cpp}::floatingPointToBiasedInteger </td>
          <td>(</td>
          <td class="paramtype">const FloatingPoint&lt; FloatType &gt; &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Computes biased integer representation for a floating-point value. </p>
<p>This moves the integer representation from a sign-and-magnitude representation to a biased representation where the 0x8000... represents zero, and the order of the integer values matches the order of the floating-point values. </p>

</div>
</div>
<a class="anchor" id="ga6b2b79eb69558fee27e1832a43b1e6b6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::initMPIOutput </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Customizes test output and test failure handling for MPI runs. </p>
<p>Only one rank should report the test result. Errors detected on a subset of ranks need to be reported individually, and as an overall failure.</p>
<p>On non-MPI builds, does nothing. </p>

</div>
</div>
<a class="anchor" id="gac88155b9b78810f4117349514b93fe00"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::initReferenceData </td>
          <td>(</td>
          <td class="paramtype">IOptionsContainer *&#160;</td>
          <td class="paramname"><em>options</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes reference data handling. </p>
<p>Adds command-line options to <code>options</code> to set the reference data mode. By default, <a class="el" href="group__module__testutils.xhtml#ggad7a0c1ac11a9748556948309218fc08aaf5623014171529e1db8e56212300eb02" title="Compare to existing reference data. ">erefdataCompare</a> is used, but <code>--ref-data create</code> or <code>--ref-data update</code> can be used to change it.</p>
<p>This function is automatically called by <a class="el" href="group__module__testutils.xhtml#ga5b50a220f4fd9b9fdafd4fd6fab83bbe" title="Initializes the test utilities library. ">initTestUtils()</a>. </p>

</div>
</div>
<a class="anchor" id="gabca45f04287813b96ad94839f9a10cb3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::initTestOptions </td>
          <td>(</td>
          <td class="paramtype">IOptionsContainer *&#160;</td>
          <td class="paramname"><em>options</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes the options from all registered test providers. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">options</td><td>The options are added here.</td></tr>
  </table>
  </dd>
</dl>
<p>This is called automatically by <a class="el" href="group__module__testutils.xhtml#ga5b50a220f4fd9b9fdafd4fd6fab83bbe" title="Initializes the test utilities library. ">initTestUtils()</a>. </p>

</div>
</div>
<a class="anchor" id="ga5b50a220f4fd9b9fdafd4fd6fab83bbe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::initTestUtils </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>dataPath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>tempPath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>usesMpi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char ***&#160;</td>
          <td class="paramname"><em>argv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes the test utilities library. </p>
<p>Does not throw. Terminates the program with a non-zero error code if an error occurs.</p>
<p>This function is automatically called by <a class="el" href="unittest__main_8cpp.xhtml" title="main() for unit tests that use Testing Utilities (testutils). ">unittest_main.cpp</a>. </p>

</div>
</div>
<a class="anchor" id="gae9b29d32f4bd98d7af90115c230709d4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static inline ::testing::AssertionResult gmx::test::plainAssertHelper </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ::testing::AssertionResult &amp;&#160;</td>
          <td class="paramname"><em>expr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Helper method for <code>(EXPECT|ASSERT)_PLAIN</code>. </p>

</div>
</div>
<a class="anchor" id="gaca906b8c921bc54965ffa4750d6bfbc9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ReferenceDataEntry::EntryPointer gmx::test::readReferenceDataFile </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>path</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Loads reference data from an XML file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">path</td><td>Path to the file from which the data is loaded. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Root entry for the reference data parsed from the file. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1test_1_1TestException.xhtml" title="Exception class for reporting errors in tests. ">TestException</a></td><td>if there is a problem reading the file. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga9b0da354984c1f3ef4e6530d54204cc1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::registerTestOptions </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TestOptionsProvider *&#160;</td>
          <td class="paramname"><em>provider</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Registers a test option provider with the test framework. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Name of the options provider (for ordering). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">provider</td><td>The provider to register. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
    <tr><td class="paramname">tMPI::system_error</td><td>on mutex failures.</td></tr>
  </table>
  </dd>
</dl>
<p>Typically not used directly in test code, but through the <a class="el" href="group__module__testutils.xhtml#gad8c14b8ddce6c8a7852915ac57f3b52a" title="Macro to add additional command-line options for the test binary. ">GMX_TEST_OPTIONS</a> macro.</p>
<p>This gets called from constructors for global variables, so ideally it would not throw to avoid unhandled exceptions. But since this is only test code, it is not worth the effort to try to remove those rare exceptions (mutex failures and out-of-memory from STL). </p>

</div>
</div>
<a class="anchor" id="gad4123626be56582b11ef6accf715dbe3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">FloatingPointTolerance relativeToleranceAsFloatingPoint </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>magnitude</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>tolerance</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a tolerance that allows a difference in two compared values that is relative to the given magnitude. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">magnitude</td><td>Magnitude of the numbers the computation operates in. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tolerance</td><td>Relative tolerance permitted (e.g. 1e-4).</td></tr>
  </table>
  </dd>
</dl>
<p>In addition to setting an ULP tolerance equivalent to <code>tolerance</code> for both precisions, this sets the absolute tolerance such that values close to zero (in general, smaller than <code>magnitude</code>) do not fail the check if they differ by less than <code>tolerance</code> evaluated at <code>magnitude</code>. This accounts for potential loss of precision for small values, and should be used when accuracy of values much less than <code>magnitude</code> do not matter for correctness.</p>
<p>The ULP tolerance for different precisions will be different to make them both match <code>tolerance</code>. </p>

</div>
</div>
<a class="anchor" id="ga665e9f7521e7815f6e5eac6bb375f167"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static FloatingPointTolerance relativeToleranceAsPrecisionDependentUlp </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>magnitude</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_uint64_t&#160;</td>
          <td class="paramname"><em>singleUlpDiff</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_uint64_t&#160;</td>
          <td class="paramname"><em>doubleUlpDiff</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a tolerance that allows a precision-dependent relative difference in a complex computation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">magnitude</td><td>Magnitude of the numbers the computation operates in. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">singleUlpDiff</td><td>Expected accuracy of single-precision computation (in ULPs). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">doubleUlpDiff</td><td>Expected accuracy of double-precision computation (in ULPs).</td></tr>
  </table>
  </dd>
</dl>
<p>This works as <a class="el" href="group__module__testutils.xhtml#ga5395a4d9809d729093751f7a4e5600ed" title="Creates a tolerance that allows a relative difference in a complex computation. ">relativeToleranceAsUlp()</a>, but allows setting the ULP difference separately for the different precisions. This supports cases where the double-precision calculation can acceptably has a higher ULP difference, but relaxing the single-precision tolerance would lead to an unnecessarily loose test. </p>

</div>
</div>
<a class="anchor" id="ga5395a4d9809d729093751f7a4e5600ed"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static FloatingPointTolerance relativeToleranceAsUlp </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>magnitude</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_uint64_t&#160;</td>
          <td class="paramname"><em>ulpDiff</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a tolerance that allows a relative difference in a complex computation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">magnitude</td><td>Magnitude of the numbers the computation operates in. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ulpDiff</td><td>Expected accuracy of the computation (in ULPs).</td></tr>
  </table>
  </dd>
</dl>
<p>In addition to setting the ULP tolerance as <a class="el" href="group__module__testutils.xhtml#gad25b9666492f99265f71a3c6da9e2a1b" title="Creates a tolerance that only allows a specified ULP difference. ">ulpTolerance()</a>, this sets the absolute tolerance such that values close to zero (in general, smaller than <code>magnitude</code>) do not fail the check if they differ by less than <code>ulpDiff</code> evaluated at <code>magnitude</code>. This accounts for potential loss of precision for small values, and should be used when accuracy of values much less than <code>magnitude</code> do not matter for correctness. </p>

</div>
</div>
<a class="anchor" id="gad25b9666492f99265f71a3c6da9e2a1b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static FloatingPointTolerance ulpTolerance </td>
          <td>(</td>
          <td class="paramtype">gmx_uint64_t&#160;</td>
          <td class="paramname"><em>ulpDiff</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a tolerance that only allows a specified ULP difference. </p>
<p>The tolerance uses the given ULP value for both precisions, i.e., double precision will have much stricter tolerance. </p>

</div>
</div>
<a class="anchor" id="ga20a6368a3b167869311f158b47d07741"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::writeReferenceDataFile </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ReferenceDataEntry &amp;&#160;</td>
          <td class="paramname"><em>root</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Saves reference data to an XML file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">path</td><td>Path to the file to which the data is saved. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">root</td><td>Root entry for the reference data to write. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1test_1_1TestException.xhtml" title="Exception class for reporting errors in tests. ">TestException</a></td><td>if there is a problem writing the file. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:20:42 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
