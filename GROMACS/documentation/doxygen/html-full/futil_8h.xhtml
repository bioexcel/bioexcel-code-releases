<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/utility/futil.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_71392c6f4b1ed3a32ba5c064e868a1ba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a798d384400d41a9e6864d9b1b8753fe.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_de18afb36696138c96356a62009637d5.xhtml">utility</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">futil.h File Reference<div class="ingroups"><a class="el" href="group__group__publicapi.xhtml">Public API</a> &#124; <a class="el" href="group__module__utility.xhtml">Low-Level Utilities (utility)</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;limits.h&gt;</code><br/>
<code>#include &lt;stdio.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="basedefinitions_8h.xhtml">gromacs/utility/basedefinitions.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for futil.h:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="futil_8h__incl.svg" width="395" height="202"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><div class="textblock"><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> This graph shows which files directly or indirectly include this file:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="futil_8h__dep__incl.svg" width="2150" height="142"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Low-level wrappers for OS-specific file handling with some GROMACS customizations. </p>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:a0f04ff8d319bc5138202e2fa3e64b56b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0f04ff8d319bc5138202e2fa3e64b56b"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#a0f04ff8d319bc5138202e2fa3e64b56b">GMX_PATH_MAX</a>&#160;&#160;&#160;4096</td></tr>
<tr class="memdesc:a0f04ff8d319bc5138202e2fa3e64b56b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Maximum path length, if the OS provides one, otherwise a fixed constant. <br/></td></tr>
<tr class="separator:a0f04ff8d319bc5138202e2fa3e64b56b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a64ea88d267946ddd697e3f64f27b2096"><td class="memItemLeft" align="right" valign="top">typedef gmx_int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#a64ea88d267946ddd697e3f64f27b2096">gmx_off_t</a></td></tr>
<tr class="memdesc:a64ea88d267946ddd697e3f64f27b2096"><td class="mdescLeft">&#160;</td><td class="mdescRight">GROMACS definition to use instead of <code>off_t</code>.  <a href="#a64ea88d267946ddd697e3f64f27b2096">More...</a><br/></td></tr>
<tr class="separator:a64ea88d267946ddd697e3f64f27b2096"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ae804cc3e5d675cb81002eb59eedd9371"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#ae804cc3e5d675cb81002eb59eedd9371">gmx_disable_file_buffering</a> (void)</td></tr>
<tr class="memdesc:ae804cc3e5d675cb81002eb59eedd9371"><td class="mdescLeft">&#160;</td><td class="mdescRight">Turn off buffering for output files (which is default) for debugging purposes.  <a href="#ae804cc3e5d675cb81002eb59eedd9371">More...</a><br/></td></tr>
<tr class="separator:ae804cc3e5d675cb81002eb59eedd9371"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac04305b8571b223cf4446027136db8a0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#ac04305b8571b223cf4446027136db8a0">gmx_set_max_backup_count</a> (int count)</td></tr>
<tr class="memdesc:ac04305b8571b223cf4446027136db8a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables backups with the specified number of maximum backups.  <a href="#ac04305b8571b223cf4446027136db8a0">More...</a><br/></td></tr>
<tr class="separator:ac04305b8571b223cf4446027136db8a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfdb6d2c9d419a59da6cd0d07ea90e19"><td class="memItemLeft" align="right" valign="top"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#abfdb6d2c9d419a59da6cd0d07ea90e19">gmx_fexist</a> (const char *fname)</td></tr>
<tr class="memdesc:abfdb6d2c9d419a59da6cd0d07ea90e19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check whether a path exists.  <a href="#abfdb6d2c9d419a59da6cd0d07ea90e19">More...</a><br/></td></tr>
<tr class="separator:abfdb6d2c9d419a59da6cd0d07ea90e19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ec115442af23bf7cd22f12dc595ca11"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2ec115442af23bf7cd22f12dc595ca11"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#a2ec115442af23bf7cd22f12dc595ca11">make_backup</a> (const char *file)</td></tr>
<tr class="memdesc:a2ec115442af23bf7cd22f12dc595ca11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Makes a backup of file if the file exists. <br/></td></tr>
<tr class="separator:a2ec115442af23bf7cd22f12dc595ca11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab32f45e948fd8696971da1be2fdc6d69"><td class="memItemLeft" align="right" valign="top">FILE *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#ab32f45e948fd8696971da1be2fdc6d69">gmx_ffopen</a> (const char *file, const char *mode)</td></tr>
<tr class="memdesc:ab32f45e948fd8696971da1be2fdc6d69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Opens a file, with GROMACS-specific additions.  <a href="#ab32f45e948fd8696971da1be2fdc6d69">More...</a><br/></td></tr>
<tr class="separator:ab32f45e948fd8696971da1be2fdc6d69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f1a6621f0e162b7d180611cb3cccb0e"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#a4f1a6621f0e162b7d180611cb3cccb0e">gmx_ffclose</a> (FILE *fp)</td></tr>
<tr class="memdesc:a4f1a6621f0e162b7d180611cb3cccb0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Closes a file opened with <a class="el" href="futil_8h.xhtml#ab32f45e948fd8696971da1be2fdc6d69" title="Opens a file, with GROMACS-specific additions. ">gmx_ffopen()</a>.  <a href="#a4f1a6621f0e162b7d180611cb3cccb0e">More...</a><br/></td></tr>
<tr class="separator:a4f1a6621f0e162b7d180611cb3cccb0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97d171ba8393365df315e678061376c0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#a97d171ba8393365df315e678061376c0">frewind</a> (FILE *fp)</td></tr>
<tr class="memdesc:a97d171ba8393365df315e678061376c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wraps rewind() for files opened with <a class="el" href="futil_8h.xhtml#ab32f45e948fd8696971da1be2fdc6d69" title="Opens a file, with GROMACS-specific additions. ">gmx_ffopen()</a>.  <a href="#a97d171ba8393365df315e678061376c0">More...</a><br/></td></tr>
<tr class="separator:a97d171ba8393365df315e678061376c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a753a02b3c29d5bceb1ddd85a4f270090"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#a753a02b3c29d5bceb1ddd85a4f270090">gmx_fseek</a> (FILE *stream, <a class="el" href="futil_8h.xhtml#a64ea88d267946ddd697e3f64f27b2096">gmx_off_t</a> offset, int whence)</td></tr>
<tr class="memdesc:a753a02b3c29d5bceb1ddd85a4f270090"><td class="mdescLeft">&#160;</td><td class="mdescRight">OS-independent 64-bit fseek().  <a href="#a753a02b3c29d5bceb1ddd85a4f270090">More...</a><br/></td></tr>
<tr class="separator:a753a02b3c29d5bceb1ddd85a4f270090"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12c2b3c4ce544e97cc094b72c0698843"><td class="memItemLeft" align="right" valign="top"><a class="el" href="futil_8h.xhtml#a64ea88d267946ddd697e3f64f27b2096">gmx_off_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#a12c2b3c4ce544e97cc094b72c0698843">gmx_ftell</a> (FILE *stream)</td></tr>
<tr class="memdesc:a12c2b3c4ce544e97cc094b72c0698843"><td class="mdescLeft">&#160;</td><td class="mdescRight">OS-independent 64-bit ftell().  <a href="#a12c2b3c4ce544e97cc094b72c0698843">More...</a><br/></td></tr>
<tr class="separator:a12c2b3c4ce544e97cc094b72c0698843"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a100fabb2980d39acc7a0899fa2360960"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#a100fabb2980d39acc7a0899fa2360960">gmx_truncate</a> (const char *filename, <a class="el" href="futil_8h.xhtml#a64ea88d267946ddd697e3f64f27b2096">gmx_off_t</a> length)</td></tr>
<tr class="memdesc:a100fabb2980d39acc7a0899fa2360960"><td class="mdescLeft">&#160;</td><td class="mdescRight">OS-independent truncate().  <a href="#a100fabb2980d39acc7a0899fa2360960">More...</a><br/></td></tr>
<tr class="separator:a100fabb2980d39acc7a0899fa2360960"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07349956250b160526d32b00d15a544c"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#a07349956250b160526d32b00d15a544c">gmxlibfn</a> (const char *file)</td></tr>
<tr class="memdesc:a07349956250b160526d32b00d15a544c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds full path for a library file.  <a href="#a07349956250b160526d32b00d15a544c">More...</a><br/></td></tr>
<tr class="separator:a07349956250b160526d32b00d15a544c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5be6c498c4e4820ead110d48b4587210"><td class="memItemLeft" align="right" valign="top">FILE *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#a5be6c498c4e4820ead110d48b4587210">libopen</a> (const char *file)</td></tr>
<tr class="memdesc:a5be6c498c4e4820ead110d48b4587210"><td class="mdescLeft">&#160;</td><td class="mdescRight">Opens a library file for reading.  <a href="#a5be6c498c4e4820ead110d48b4587210">More...</a><br/></td></tr>
<tr class="separator:a5be6c498c4e4820ead110d48b4587210"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5b23b8748bf197b7cf3244f83c13054"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#aa5b23b8748bf197b7cf3244f83c13054">low_gmxlibfn</a> (const char *file, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bAddCWD, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bFatal)</td></tr>
<tr class="memdesc:aa5b23b8748bf197b7cf3244f83c13054"><td class="mdescLeft">&#160;</td><td class="mdescRight">More flexible <a class="el" href="futil_8h.xhtml#a07349956250b160526d32b00d15a544c" title="Finds full path for a library file. ">gmxlibfn()</a>.  <a href="#aa5b23b8748bf197b7cf3244f83c13054">More...</a><br/></td></tr>
<tr class="separator:aa5b23b8748bf197b7cf3244f83c13054"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af36db7e990c36d52839d2c28c5f24d02"><td class="memItemLeft" align="right" valign="top">FILE *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#af36db7e990c36d52839d2c28c5f24d02">low_libopen</a> (const char *file, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bFatal)</td></tr>
<tr class="memdesc:af36db7e990c36d52839d2c28c5f24d02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alternative for <a class="el" href="futil_8h.xhtml#a5be6c498c4e4820ead110d48b4587210" title="Opens a library file for reading. ">libopen()</a> that optionally does not exit.  <a href="#af36db7e990c36d52839d2c28c5f24d02">More...</a><br/></td></tr>
<tr class="separator:af36db7e990c36d52839d2c28c5f24d02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4d9b7136ec8e1f8d0632b5ff77ee6a3"><td class="memItemLeft" align="right" valign="top">FILE *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#ac4d9b7136ec8e1f8d0632b5ff77ee6a3">gmx_fopen_temporary</a> (char *buf)</td></tr>
<tr class="memdesc:ac4d9b7136ec8e1f8d0632b5ff77ee6a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates unique name for temp file (wrapper around mkstemp) and opens it.  <a href="#ac4d9b7136ec8e1f8d0632b5ff77ee6a3">More...</a><br/></td></tr>
<tr class="separator:ac4d9b7136ec8e1f8d0632b5ff77ee6a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5259bc75c689e1bcb6356445b8652201"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#a5259bc75c689e1bcb6356445b8652201">gmx_tmpnam</a> (char *buf)</td></tr>
<tr class="memdesc:a5259bc75c689e1bcb6356445b8652201"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates unique name for temp file (wrapper around mkstemp).  <a href="#a5259bc75c689e1bcb6356445b8652201">More...</a><br/></td></tr>
<tr class="separator:a5259bc75c689e1bcb6356445b8652201"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac22088525068dae1d807eee526a57eb5"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#ac22088525068dae1d807eee526a57eb5">gmx_file_rename</a> (const char *oldname, const char *newname)</td></tr>
<tr class="memdesc:ac22088525068dae1d807eee526a57eb5"><td class="mdescLeft">&#160;</td><td class="mdescRight">OS-independent rename().  <a href="#ac22088525068dae1d807eee526a57eb5">More...</a><br/></td></tr>
<tr class="separator:ac22088525068dae1d807eee526a57eb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8efb270becda3bc6582631ca0ae80760"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#a8efb270becda3bc6582631ca0ae80760">gmx_file_copy</a> (const char *oldname, const char *newname, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> copy_if_empty)</td></tr>
<tr class="memdesc:a8efb270becda3bc6582631ca0ae80760"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies a file (data only) oldname to newname.  <a href="#a8efb270becda3bc6582631ca0ae80760">More...</a><br/></td></tr>
<tr class="separator:a8efb270becda3bc6582631ca0ae80760"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c027ff8f7abc1c785384a59e14d6c8f"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#a2c027ff8f7abc1c785384a59e14d6c8f">gmx_fsync</a> (FILE *fp)</td></tr>
<tr class="memdesc:a2c027ff8f7abc1c785384a59e14d6c8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">OS-independent fsync().  <a href="#a2c027ff8f7abc1c785384a59e14d6c8f">More...</a><br/></td></tr>
<tr class="separator:a2c027ff8f7abc1c785384a59e14d6c8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39fe2082a5979a63dc06c9cc4810132b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#a39fe2082a5979a63dc06c9cc4810132b">gmx_chdir</a> (const char *directory)</td></tr>
<tr class="memdesc:a39fe2082a5979a63dc06c9cc4810132b"><td class="mdescLeft">&#160;</td><td class="mdescRight">OS-independent chdir().  <a href="#a39fe2082a5979a63dc06c9cc4810132b">More...</a><br/></td></tr>
<tr class="separator:a39fe2082a5979a63dc06c9cc4810132b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41d2347f1a0391cdf2a7104264900564"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml#a41d2347f1a0391cdf2a7104264900564">gmx_getcwd</a> (char *buffer, size_t size)</td></tr>
<tr class="memdesc:a41d2347f1a0391cdf2a7104264900564"><td class="mdescLeft">&#160;</td><td class="mdescRight">OS-independent getcwd().  <a href="#a41d2347f1a0391cdf2a7104264900564">More...</a><br/></td></tr>
<tr class="separator:a41d2347f1a0391cdf2a7104264900564"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga312499e4abb409ad85844d83e52d795b"><td class="memItemLeft" align="right" valign="top">const DataFileFinder &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga312499e4abb409ad85844d83e52d795b">gmx::getLibraryFileFinder</a> ()</td></tr>
<tr class="memdesc:ga312499e4abb409ad85844d83e52d795b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets a finder for locating data files from share/top/.  <a href="group__module__utility.xhtml#ga312499e4abb409ad85844d83e52d795b">More...</a><br/></td></tr>
<tr class="separator:ga312499e4abb409ad85844d83e52d795b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a106cb113fd73e054dbb8dfa2118d7153"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a106cb113fd73e054dbb8dfa2118d7153">gmx::setLibraryFileFinder</a> (const DataFileFinder *finder)</td></tr>
<tr class="memdesc:a106cb113fd73e054dbb8dfa2118d7153"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets a finder for location data files from share/top/.  <a href="#a106cb113fd73e054dbb8dfa2118d7153">More...</a><br/></td></tr>
<tr class="separator:a106cb113fd73e054dbb8dfa2118d7153"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a class="anchor" id="a64ea88d267946ddd697e3f64f27b2096"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef gmx_int64_t <a class="el" href="futil_8h.xhtml#a64ea88d267946ddd697e3f64f27b2096">gmx_off_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>GROMACS definition to use instead of <code>off_t</code>. </p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a97d171ba8393365df315e678061376c0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void frewind </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wraps rewind() for files opened with <a class="el" href="futil_8h.xhtml#ab32f45e948fd8696971da1be2fdc6d69" title="Opens a file, with GROMACS-specific additions. ">gmx_ffopen()</a>. </p>
<p>A fatal error results if this function is called for a pipe (a compressed input file). </p>

</div>
</div>
<a class="anchor" id="a39fe2082a5979a63dc06c9cc4810132b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_chdir </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>directory</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>OS-independent chdir(). </p>
<p>Exits with a fatal error if changing the directory fails. </p>

</div>
</div>
<a class="anchor" id="ae804cc3e5d675cb81002eb59eedd9371"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_disable_file_buffering </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Turn off buffering for output files (which is default) for debugging purposes. </p>
<p>This only has effect on files opened with <a class="el" href="futil_8h.xhtml#ab32f45e948fd8696971da1be2fdc6d69" title="Opens a file, with GROMACS-specific additions. ">gmx_ffopen()</a>. </p>

</div>
</div>
<a class="anchor" id="abfdb6d2c9d419a59da6cd0d07ea90e19"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> gmx_fexist </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fname</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check whether a path exists. </p>
<dl class="section return"><dt>Returns</dt><dd><code>TRUE</code> when <code>fname</code> exists.</dd></dl>
<p>Note that this returns <code>TRUE</code> even if <code>fname</code> is a directory instead of a file. </p>

</div>
</div>
<a class="anchor" id="a4f1a6621f0e162b7d180611cb3cccb0e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_ffclose </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Closes a file opened with <a class="el" href="futil_8h.xhtml#ab32f45e948fd8696971da1be2fdc6d69" title="Opens a file, with GROMACS-specific additions. ">gmx_ffopen()</a>. </p>

</div>
</div>
<a class="anchor" id="ab32f45e948fd8696971da1be2fdc6d69"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">FILE* gmx_ffopen </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Opens a file, with GROMACS-specific additions. </p>
<p>If the file is in compressed format, opens a pipe which uncompresses the file on the fly. For this to work, <a class="el" href="futil_8h.xhtml#a4f1a6621f0e162b7d180611cb3cccb0e" title="Closes a file opened with gmx_ffopen(). ">gmx_ffclose()</a> and <a class="el" href="futil_8h.xhtml#a97d171ba8393365df315e678061376c0" title="Wraps rewind() for files opened with gmx_ffopen(). ">frewind()</a> should always be used for files opened with <a class="el" href="futil_8h.xhtml#ab32f45e948fd8696971da1be2fdc6d69" title="Opens a file, with GROMACS-specific additions. ">gmx_ffopen()</a> instead of fclose() and rewind(). For compressed files, the <code>file</code> parameter should be passed without the compressed extension; if that file is not found, then a few compression extensions are tried. Creates a backup if a file opened for writing already exists before overwriting it. A fatal error results if the file cannot be opened, for whatever reason. </p>

</div>
</div>
<a class="anchor" id="a8efb270becda3bc6582631ca0ae80760"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_file_copy </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>oldname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>newname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>copy_if_empty</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copies a file (data only) oldname to newname. </p>
<p>If <code>copy_if_empty</code> is <code>FALSE</code>, the file won't be copied if it's empty. </p>

</div>
</div>
<a class="anchor" id="ac22088525068dae1d807eee526a57eb5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_file_rename </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>oldname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>newname</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>OS-independent rename(). </p>
<p>Renames/moves a file atomically, if the OS makes that available. </p>

</div>
</div>
<a class="anchor" id="ac4d9b7136ec8e1f8d0632b5ff77ee6a3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">FILE* gmx_fopen_temporary </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates unique name for temp file (wrapper around mkstemp) and opens it. </p>
<p><code>buf</code> should be at least 7 bytes long </p>

</div>
</div>
<a class="anchor" id="a753a02b3c29d5bceb1ddd85a4f270090"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_fseek </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="futil_8h.xhtml#a64ea88d267946ddd697e3f64f27b2096">gmx_off_t</a>&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>whence</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>OS-independent 64-bit fseek(). </p>

</div>
</div>
<a class="anchor" id="a2c027ff8f7abc1c785384a59e14d6c8f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_fsync </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>OS-independent fsync(). </p>
<p>Only use this during checkpointing! </p>

</div>
</div>
<a class="anchor" id="a12c2b3c4ce544e97cc094b72c0698843"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="futil_8h.xhtml#a64ea88d267946ddd697e3f64f27b2096">gmx_off_t</a> gmx_ftell </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>stream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>OS-independent 64-bit ftell(). </p>

</div>
</div>
<a class="anchor" id="a41d2347f1a0391cdf2a7104264900564"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_getcwd </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>OS-independent getcwd(). </p>
<p>Exits with a fatal error if the call fails. </p>

</div>
</div>
<a class="anchor" id="ac04305b8571b223cf4446027136db8a0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_set_max_backup_count </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enables backups with the specified number of maximum backups. </p>
<p>If <code>count</code> == 0, disables backups. If not called, this is the default. If <code>count</code> == -1, reads the count from an environment variable.</p>
<p>This is not currently thread-safe, as it is only called during initialization code. </p>

</div>
</div>
<a class="anchor" id="a5259bc75c689e1bcb6356445b8652201"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_tmpnam </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates unique name for temp file (wrapper around mkstemp). </p>
<p><code>buf</code> should be at least 7 bytes long </p>

</div>
</div>
<a class="anchor" id="a100fabb2980d39acc7a0899fa2360960"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_truncate </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="futil_8h.xhtml#a64ea88d267946ddd697e3f64f27b2096">gmx_off_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>OS-independent truncate(). </p>

</div>
</div>
<a class="anchor" id="a07349956250b160526d32b00d15a544c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* gmxlibfn </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Finds full path for a library file. </p>
<p>Searches first in the current directory, and then in the configured library directories. Fatal error results if the file is not found in any location. The caller is responsible of freeing the returned string. </p>

</div>
</div>
<a class="anchor" id="a5be6c498c4e4820ead110d48b4587210"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">FILE* libopen </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Opens a library file for reading. </p>
<p>Works as <a class="el" href="futil_8h.xhtml#a07349956250b160526d32b00d15a544c" title="Finds full path for a library file. ">gmxlibfn()</a>, except that it opens the file and returns a file handle. </p>

</div>
</div>
<a class="anchor" id="aa5b23b8748bf197b7cf3244f83c13054"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* low_gmxlibfn </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bAddCWD</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bFatal</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>More flexible <a class="el" href="futil_8h.xhtml#a07349956250b160526d32b00d15a544c" title="Finds full path for a library file. ">gmxlibfn()</a>. </p>
<p>Works as <a class="el" href="futil_8h.xhtml#a07349956250b160526d32b00d15a544c" title="Finds full path for a library file. ">gmxlibfn()</a>, but provides control whether the current working directory is searched or not, and whether a missing file is a fatal error or not. </p>

</div>
</div>
<a class="anchor" id="af36db7e990c36d52839d2c28c5f24d02"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">FILE* low_libopen </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bFatal</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Alternative for <a class="el" href="futil_8h.xhtml#a5be6c498c4e4820ead110d48b4587210" title="Opens a library file for reading. ">libopen()</a> that optionally does not exit. </p>
<p>Works as <a class="el" href="futil_8h.xhtml#a5be6c498c4e4820ead110d48b4587210" title="Opens a library file for reading. ">libopen()</a>, but provides control whether a missing file is a fatal error or not. </p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:20:37 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
