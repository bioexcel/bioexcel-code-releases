<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::ConstArrayRef&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="classgmx_1_1ConstArrayRef-members.xhtml">List of all members</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#related">Related Functions</a>  </div>
  <div class="headertitle">
<div class="title">gmx::ConstArrayRef&lt; T &gt; Class Template Reference<div class="ingroups"><a class="el" href="group__group__publicapi.xhtml">Public API</a> &#124; <a class="el" href="group__module__utility.xhtml">Low-Level Utilities (utility)</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;gromacs/utility/arrayref.h&gt;</code></p>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br/>
class gmx::ConstArrayRef&lt; T &gt;</h3>

<p>STL-like container for non-mutable interface to a C array (or part of a std::vector). </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Value type of elements.</td></tr>
  </table>
  </dd>
</dl>
<p>This class provides an interface similar to <code>std::vector&lt;T&gt;</code>, with the following main differences:</p>
<ul>
<li>This class does not have its own storage. Instead, it references an existing array of values (either a C-style array or part of an existing std::vector&lt;T&gt;).</li>
<li>Only const methods are provided to access the stored values. It is not possible to alter the referenced array.</li>
<li>Copying objects of this type is cheap, and the copies behave identically to the original object: the copy references the same set of values.</li>
</ul>
<p>This class is useful for writing wrappers that expose a different view of the internal data stored as a single vector/array.</p>
<p>Methods in this class do not throw, except where indicated.</p>
<p>Note that due to a Doxygen limitation, the constructor that takes a C array whose size is known at compile time does not appear in the documentation. </p>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a7228c51415cdc1c7fe72fc78c538764d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7228c51415cdc1c7fe72fc78c538764d"></a>
typedef T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7228c51415cdc1c7fe72fc78c538764d">value_type</a></td></tr>
<tr class="memdesc:a7228c51415cdc1c7fe72fc78c538764d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of values stored in the container. <br/></td></tr>
<tr class="separator:a7228c51415cdc1c7fe72fc78c538764d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab65b495b02224ce68b3b5f829cadbe94"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab65b495b02224ce68b3b5f829cadbe94"></a>
typedef size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#ab65b495b02224ce68b3b5f829cadbe94">size_type</a></td></tr>
<tr class="memdesc:ab65b495b02224ce68b3b5f829cadbe94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type for representing size of the container. <br/></td></tr>
<tr class="separator:ab65b495b02224ce68b3b5f829cadbe94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cfbd58b26bf60dbe47c22e7a9c19305"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7cfbd58b26bf60dbe47c22e7a9c19305"></a>
typedef ptrdiff_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7cfbd58b26bf60dbe47c22e7a9c19305">difference_type</a></td></tr>
<tr class="memdesc:a7cfbd58b26bf60dbe47c22e7a9c19305"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type for representing difference between two container indices. <br/></td></tr>
<tr class="separator:a7cfbd58b26bf60dbe47c22e7a9c19305"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7ce1a3107fd084590eb1320959b0e45"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af7ce1a3107fd084590eb1320959b0e45"></a>
typedef const T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#af7ce1a3107fd084590eb1320959b0e45">const_reference</a></td></tr>
<tr class="memdesc:af7ce1a3107fd084590eb1320959b0e45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Const reference to a container element. <br/></td></tr>
<tr class="separator:af7ce1a3107fd084590eb1320959b0e45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2d5e28a2608c447c7db4af0f265cf77"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac2d5e28a2608c447c7db4af0f265cf77"></a>
typedef const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#ac2d5e28a2608c447c7db4af0f265cf77">const_pointer</a></td></tr>
<tr class="memdesc:ac2d5e28a2608c447c7db4af0f265cf77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Const pointer to a container element. <br/></td></tr>
<tr class="separator:ac2d5e28a2608c447c7db4af0f265cf77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84f4516890c6ee6ff191ff39dbb01059"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a84f4516890c6ee6ff191ff39dbb01059"></a>
typedef const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a84f4516890c6ee6ff191ff39dbb01059">const_iterator</a></td></tr>
<tr class="memdesc:a84f4516890c6ee6ff191ff39dbb01059"><td class="mdescLeft">&#160;</td><td class="mdescRight">Const iterator type for the container. <br/></td></tr>
<tr class="separator:a84f4516890c6ee6ff191ff39dbb01059"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abda55908237c041fdec0a56abec39a89"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="abda55908237c041fdec0a56abec39a89"></a>
typedef <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#af7ce1a3107fd084590eb1320959b0e45">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#abda55908237c041fdec0a56abec39a89">reference</a></td></tr>
<tr class="memdesc:abda55908237c041fdec0a56abec39a89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equal to <em>const_reference</em> since changes are not allowed. <br/></td></tr>
<tr class="separator:abda55908237c041fdec0a56abec39a89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20fea3aa62ecc554ef222c8804a1b545"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a20fea3aa62ecc554ef222c8804a1b545"></a>
typedef <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#ac2d5e28a2608c447c7db4af0f265cf77">const_pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a20fea3aa62ecc554ef222c8804a1b545">pointer</a></td></tr>
<tr class="memdesc:a20fea3aa62ecc554ef222c8804a1b545"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equal to <em>const_pointer</em> since changes are not allowed. <br/></td></tr>
<tr class="separator:a20fea3aa62ecc554ef222c8804a1b545"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f3714a3b40e08afc90e64239474fd73"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2f3714a3b40e08afc90e64239474fd73"></a>
typedef <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a84f4516890c6ee6ff191ff39dbb01059">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a2f3714a3b40e08afc90e64239474fd73">iterator</a></td></tr>
<tr class="memdesc:a2f3714a3b40e08afc90e64239474fd73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equal to <em>const_iterator</em> since changes are not allowed. <br/></td></tr>
<tr class="separator:a2f3714a3b40e08afc90e64239474fd73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94318d6e769661f6d7bb903ee1b07ced"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a94318d6e769661f6d7bb903ee1b07ced"></a>
typedef std::reverse_iterator<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a2f3714a3b40e08afc90e64239474fd73">iterator</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a94318d6e769661f6d7bb903ee1b07ced">reverse_iterator</a></td></tr>
<tr class="memdesc:a94318d6e769661f6d7bb903ee1b07ced"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard reverse iterator. <br/></td></tr>
<tr class="separator:a94318d6e769661f6d7bb903ee1b07ced"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae338d5cac94e9fb07cfe2b449b465ed8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae338d5cac94e9fb07cfe2b449b465ed8"></a>
typedef std::reverse_iterator<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a84f4516890c6ee6ff191ff39dbb01059">const_iterator</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#ae338d5cac94e9fb07cfe2b449b465ed8">const_reverse_iterator</a></td></tr>
<tr class="memdesc:ae338d5cac94e9fb07cfe2b449b465ed8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard reverse iterator. <br/></td></tr>
<tr class="separator:ae338d5cac94e9fb07cfe2b449b465ed8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a01f08a3b4455b11f645efe5ac2d09ce5"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a01f08a3b4455b11f645efe5ac2d09ce5"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a01f08a3b4455b11f645efe5ac2d09ce5">ConstArrayRef</a> ()</td></tr>
<tr class="memdesc:a01f08a3b4455b11f645efe5ac2d09ce5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs an empty reference. <br/></td></tr>
<tr class="separator:a01f08a3b4455b11f645efe5ac2d09ce5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9029dcd01fc825ae9c941294a2f103a2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a9029dcd01fc825ae9c941294a2f103a2">ConstArrayRef</a> (const <a class="el" href="structgmx_1_1EmptyArrayRef.xhtml">EmptyArrayRef</a> &amp;)</td></tr>
<tr class="memdesc:a9029dcd01fc825ae9c941294a2f103a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs an empty reference.  <a href="#a9029dcd01fc825ae9c941294a2f103a2">More...</a><br/></td></tr>
<tr class="separator:a9029dcd01fc825ae9c941294a2f103a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad227a7380cfbd0d87c55f4ec08d7f977"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#ad227a7380cfbd0d87c55f4ec08d7f977">ConstArrayRef</a> (<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#ac2d5e28a2608c447c7db4af0f265cf77">const_pointer</a> <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a1ca5882192dcebda0bb2c3024d1413c1">begin</a>, <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#ac2d5e28a2608c447c7db4af0f265cf77">const_pointer</a> <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#af777df53fed30c67c35c55b8c8b234d3">end</a>)</td></tr>
<tr class="memdesc:ad227a7380cfbd0d87c55f4ec08d7f977"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs a reference to a particular range.  <a href="#ad227a7380cfbd0d87c55f4ec08d7f977">More...</a><br/></td></tr>
<tr class="separator:ad227a7380cfbd0d87c55f4ec08d7f977"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d44dd6b7f5fece5f038734019d069b9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a0d44dd6b7f5fece5f038734019d069b9">ConstArrayRef</a> (const std::vector&lt; T &gt; &amp;v)</td></tr>
<tr class="memdesc:a0d44dd6b7f5fece5f038734019d069b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs a reference to a whole vector.  <a href="#a0d44dd6b7f5fece5f038734019d069b9">More...</a><br/></td></tr>
<tr class="separator:a0d44dd6b7f5fece5f038734019d069b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ca5882192dcebda0bb2c3024d1413c1"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1ca5882192dcebda0bb2c3024d1413c1"></a>
<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a84f4516890c6ee6ff191ff39dbb01059">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a1ca5882192dcebda0bb2c3024d1413c1">begin</a> () const </td></tr>
<tr class="memdesc:a1ca5882192dcebda0bb2c3024d1413c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to the beginning of the container. <br/></td></tr>
<tr class="separator:a1ca5882192dcebda0bb2c3024d1413c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af777df53fed30c67c35c55b8c8b234d3"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af777df53fed30c67c35c55b8c8b234d3"></a>
<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a84f4516890c6ee6ff191ff39dbb01059">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#af777df53fed30c67c35c55b8c8b234d3">end</a> () const </td></tr>
<tr class="memdesc:af777df53fed30c67c35c55b8c8b234d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to the end of the container. <br/></td></tr>
<tr class="separator:af777df53fed30c67c35c55b8c8b234d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3000bdd333dd6ed7dd3a548d397f2441"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3000bdd333dd6ed7dd3a548d397f2441"></a>
<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#ae338d5cac94e9fb07cfe2b449b465ed8">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a3000bdd333dd6ed7dd3a548d397f2441">rbegin</a> () const </td></tr>
<tr class="memdesc:a3000bdd333dd6ed7dd3a548d397f2441"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to the reverse beginning of the container. <br/></td></tr>
<tr class="separator:a3000bdd333dd6ed7dd3a548d397f2441"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8527eeb6897e444c8ac03267e11febb4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8527eeb6897e444c8ac03267e11febb4"></a>
<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#ae338d5cac94e9fb07cfe2b449b465ed8">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a8527eeb6897e444c8ac03267e11febb4">rend</a> () const </td></tr>
<tr class="memdesc:a8527eeb6897e444c8ac03267e11febb4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to the reverse end of the container. <br/></td></tr>
<tr class="separator:a8527eeb6897e444c8ac03267e11febb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6aba63c734c119a3aa56f237ad0f333"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa6aba63c734c119a3aa56f237ad0f333"></a>
<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#ab65b495b02224ce68b3b5f829cadbe94">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#aa6aba63c734c119a3aa56f237ad0f333">size</a> () const </td></tr>
<tr class="memdesc:aa6aba63c734c119a3aa56f237ad0f333"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the size of the container. <br/></td></tr>
<tr class="separator:aa6aba63c734c119a3aa56f237ad0f333"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e8574c37fd76ef28cba58a65cc92091"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3e8574c37fd76ef28cba58a65cc92091"></a>
<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#ab65b495b02224ce68b3b5f829cadbe94">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a3e8574c37fd76ef28cba58a65cc92091">capacity</a> () const </td></tr>
<tr class="memdesc:a3e8574c37fd76ef28cba58a65cc92091"><td class="mdescLeft">&#160;</td><td class="mdescRight">Identical to <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#aa6aba63c734c119a3aa56f237ad0f333" title="Returns the size of the container. ">size()</a>. <br/></td></tr>
<tr class="separator:a3e8574c37fd76ef28cba58a65cc92091"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6725da3326326993a278e983a1f14848"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6725da3326326993a278e983a1f14848"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a6725da3326326993a278e983a1f14848">empty</a> () const </td></tr>
<tr class="memdesc:a6725da3326326993a278e983a1f14848"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether the container is empty. <br/></td></tr>
<tr class="separator:a6725da3326326993a278e983a1f14848"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15095526acd621cfc61aceb373851ece"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a15095526acd621cfc61aceb373851ece"></a>
<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#af7ce1a3107fd084590eb1320959b0e45">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a15095526acd621cfc61aceb373851ece">operator[]</a> (<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#ab65b495b02224ce68b3b5f829cadbe94">size_type</a> n) const </td></tr>
<tr class="memdesc:a15095526acd621cfc61aceb373851ece"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access container element. <br/></td></tr>
<tr class="separator:a15095526acd621cfc61aceb373851ece"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3402f1b3da1034e68c27f3edbea1d17"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa3402f1b3da1034e68c27f3edbea1d17"></a>
<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#af7ce1a3107fd084590eb1320959b0e45">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#aa3402f1b3da1034e68c27f3edbea1d17">at</a> (<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#ab65b495b02224ce68b3b5f829cadbe94">size_type</a> n) const </td></tr>
<tr class="memdesc:aa3402f1b3da1034e68c27f3edbea1d17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access container element (throws on out-of-range error). <br/></td></tr>
<tr class="separator:aa3402f1b3da1034e68c27f3edbea1d17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06200ac1eee9f56b26894f23ae76767b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a06200ac1eee9f56b26894f23ae76767b"></a>
<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#af7ce1a3107fd084590eb1320959b0e45">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a06200ac1eee9f56b26894f23ae76767b">front</a> () const </td></tr>
<tr class="memdesc:a06200ac1eee9f56b26894f23ae76767b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the first element in the container. <br/></td></tr>
<tr class="separator:a06200ac1eee9f56b26894f23ae76767b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affc80cbb4e05d3827c2541d18ddd62f3"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="affc80cbb4e05d3827c2541d18ddd62f3"></a>
<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#af7ce1a3107fd084590eb1320959b0e45">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#affc80cbb4e05d3827c2541d18ddd62f3">back</a> () const </td></tr>
<tr class="memdesc:affc80cbb4e05d3827c2541d18ddd62f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the last element in the container. <br/></td></tr>
<tr class="separator:affc80cbb4e05d3827c2541d18ddd62f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7caa66d9d847bd452b520d7e8e8aa5c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af7caa66d9d847bd452b520d7e8e8aa5c"></a>
<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#ac2d5e28a2608c447c7db4af0f265cf77">const_pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#af7caa66d9d847bd452b520d7e8e8aa5c">data</a> () const </td></tr>
<tr class="memdesc:af7caa66d9d847bd452b520d7e8e8aa5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a raw pointer to the contents of the array. <br/></td></tr>
<tr class="separator:af7caa66d9d847bd452b520d7e8e8aa5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9c00ef92094cc2a1f725f64b8dec471"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#af9c00ef92094cc2a1f725f64b8dec471">swap</a> (<a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt; T &gt; &amp;other)</td></tr>
<tr class="memdesc:af9c00ef92094cc2a1f725f64b8dec471"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps referenced memory with the other object.  <a href="#af9c00ef92094cc2a1f725f64b8dec471">More...</a><br/></td></tr>
<tr class="separator:af9c00ef92094cc2a1f725f64b8dec471"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a7a6e390d671ad2ded46609e53ee5026f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt; <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7228c51415cdc1c7fe72fc78c538764d">value_type</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7a6e390d671ad2ded46609e53ee5026f">fromPointers</a> (const <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7228c51415cdc1c7fe72fc78c538764d">value_type</a> *<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a1ca5882192dcebda0bb2c3024d1413c1">begin</a>, const <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7228c51415cdc1c7fe72fc78c538764d">value_type</a> *<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#af777df53fed30c67c35c55b8c8b234d3">end</a>)</td></tr>
<tr class="memdesc:a7a6e390d671ad2ded46609e53ee5026f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs a reference to a particular range from two pointers.  <a href="#a7a6e390d671ad2ded46609e53ee5026f">More...</a><br/></td></tr>
<tr class="separator:a7a6e390d671ad2ded46609e53ee5026f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabb9e2826c456cdf9f4f07f49f39e8e6"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt; <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7228c51415cdc1c7fe72fc78c538764d">value_type</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#aabb9e2826c456cdf9f4f07f49f39e8e6">fromArray</a> (const <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7228c51415cdc1c7fe72fc78c538764d">value_type</a> *<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a1ca5882192dcebda0bb2c3024d1413c1">begin</a>, size_t <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#aa6aba63c734c119a3aa56f237ad0f333">size</a>)</td></tr>
<tr class="memdesc:aabb9e2826c456cdf9f4f07f49f39e8e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs a reference to an array.  <a href="#aabb9e2826c456cdf9f4f07f49f39e8e6">More...</a><br/></td></tr>
<tr class="separator:aabb9e2826c456cdf9f4f07f49f39e8e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab2d7ef962fdc3b1a78c9799e86b3f5d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt; <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7228c51415cdc1c7fe72fc78c538764d">value_type</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#aab2d7ef962fdc3b1a78c9799e86b3f5d">fromVector</a> (typename std::vector&lt; <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7228c51415cdc1c7fe72fc78c538764d">value_type</a> &gt;::<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a84f4516890c6ee6ff191ff39dbb01059">const_iterator</a> <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a1ca5882192dcebda0bb2c3024d1413c1">begin</a>, typename std::vector&lt; <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7228c51415cdc1c7fe72fc78c538764d">value_type</a> &gt;::<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a84f4516890c6ee6ff191ff39dbb01059">const_iterator</a> <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#af777df53fed30c67c35c55b8c8b234d3">end</a>)</td></tr>
<tr class="memdesc:aab2d7ef962fdc3b1a78c9799e86b3f5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs a reference to a particular range in a std::vector.  <a href="#aab2d7ef962fdc3b1a78c9799e86b3f5d">More...</a><br/></td></tr>
<tr class="separator:aab2d7ef962fdc3b1a78c9799e86b3f5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="related"></a>
Related Functions</h2></td></tr>
<tr><td class="ititle" colspan="2"><p>(Note that these are not member functions.) </p>
</td></tr>
<tr class="memitem:a50ee12f2bdc2f09edc898fb1749d30e0"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a50ee12f2bdc2f09edc898fb1749d30e0"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a50ee12f2bdc2f09edc898fb1749d30e0">constArrayRefFromPointers</a> (const T *<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a1ca5882192dcebda0bb2c3024d1413c1">begin</a>, const T *<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#af777df53fed30c67c35c55b8c8b234d3">end</a>)</td></tr>
<tr class="memdesc:a50ee12f2bdc2f09edc898fb1749d30e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs a reference to a particular range from two pointers.  <a href="#a50ee12f2bdc2f09edc898fb1749d30e0">More...</a><br/></td></tr>
<tr class="separator:a50ee12f2bdc2f09edc898fb1749d30e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a166d990cb222e245882df676209ebfa0"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a166d990cb222e245882df676209ebfa0"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a166d990cb222e245882df676209ebfa0">constArrayRefFromArray</a> (const T *<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a1ca5882192dcebda0bb2c3024d1413c1">begin</a>, size_t <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#aa6aba63c734c119a3aa56f237ad0f333">size</a>)</td></tr>
<tr class="memdesc:a166d990cb222e245882df676209ebfa0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs a reference to an array.  <a href="#a166d990cb222e245882df676209ebfa0">More...</a><br/></td></tr>
<tr class="separator:a166d990cb222e245882df676209ebfa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaf3ee38ea2a4fa96217ea650453c89b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:adaf3ee38ea2a4fa96217ea650453c89b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#adaf3ee38ea2a4fa96217ea650453c89b">constArrayRefFromVector</a> (typename std::vector&lt; T &gt;::<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a84f4516890c6ee6ff191ff39dbb01059">const_iterator</a> <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a1ca5882192dcebda0bb2c3024d1413c1">begin</a>, typename std::vector&lt; T &gt;::<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a84f4516890c6ee6ff191ff39dbb01059">const_iterator</a> <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#af777df53fed30c67c35c55b8c8b234d3">end</a>)</td></tr>
<tr class="memdesc:adaf3ee38ea2a4fa96217ea650453c89b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs a reference to a particular range in a std::vector.  <a href="#adaf3ee38ea2a4fa96217ea650453c89b">More...</a><br/></td></tr>
<tr class="separator:adaf3ee38ea2a4fa96217ea650453c89b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a9029dcd01fc825ae9c941294a2f103a2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml">gmx::ConstArrayRef</a>&lt; T &gt;::<a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structgmx_1_1EmptyArrayRef.xhtml">EmptyArrayRef</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs an empty reference. </p>
<p>This is provided for convenience, such that <a class="el" href="structgmx_1_1EmptyArrayRef.xhtml" title="Tag type to initialize empty array references. ">EmptyArrayRef</a> can be used to initialize any Const <a class="el" href="classgmx_1_1ArrayRef.xhtml" title="STL-like container for an interface to a C array (or part of a std::vector). ">ArrayRef</a>, without specifying the template type. It is not explicit to enable that usage. </p>

</div>
</div>
<a class="anchor" id="ad227a7380cfbd0d87c55f4ec08d7f977"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml">gmx::ConstArrayRef</a>&lt; T &gt;::<a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#ac2d5e28a2608c447c7db4af0f265cf77">const_pointer</a>&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#ac2d5e28a2608c447c7db4af0f265cf77">const_pointer</a>&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs a reference to a particular range. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">begin</td><td>Pointer to the beginning of a range. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end</td><td>Pointer to the end of a range.</td></tr>
  </table>
  </dd>
</dl>
<p>Passed pointers must remain valid for the lifetime of this object.</p>
<dl class="section note"><dt>Note</dt><dd>For clarity, use the non-member function constArrayRefFromPointers instead. </dd></dl>

</div>
</div>
<a class="anchor" id="a0d44dd6b7f5fece5f038734019d069b9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml">gmx::ConstArrayRef</a>&lt; T &gt;::<a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a> </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs a reference to a whole vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">v</td><td>Vector to reference.</td></tr>
  </table>
  </dd>
</dl>
<p>Passed vector must remain valid and not be reallocated for the lifetime of this object.</p>
<p>This constructor is not explicit to allow directly passing std::vector to a method that takes <a class="el" href="classgmx_1_1ConstArrayRef.xhtml" title="STL-like container for non-mutable interface to a C array (or part of a std::vector). ">ConstArrayRef</a>. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="aabb9e2826c456cdf9f4f07f49f39e8e6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt;<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7228c51415cdc1c7fe72fc78c538764d">value_type</a>&gt; <a class="el" href="classgmx_1_1ConstArrayRef.xhtml">gmx::ConstArrayRef</a>&lt; T &gt;::fromArray </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7228c51415cdc1c7fe72fc78c538764d">value_type</a> *&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs a reference to an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">begin</td><td>Pointer to the beginning of the array. May be NULL if <code>size</code> is zero. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">size</td><td>Number of elements in the array.</td></tr>
  </table>
  </dd>
</dl>
<p>Passed pointer must remain valid for the lifetime of this object. </p>

</div>
</div>
<a class="anchor" id="a7a6e390d671ad2ded46609e53ee5026f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt;<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7228c51415cdc1c7fe72fc78c538764d">value_type</a>&gt; <a class="el" href="classgmx_1_1ConstArrayRef.xhtml">gmx::ConstArrayRef</a>&lt; T &gt;::fromPointers </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7228c51415cdc1c7fe72fc78c538764d">value_type</a> *&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7228c51415cdc1c7fe72fc78c538764d">value_type</a> *&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs a reference to a particular range from two pointers. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">begin</td><td>Pointer to the beginning of a range. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end</td><td>Pointer to the end of a range.</td></tr>
  </table>
  </dd>
</dl>
<p>Passed pointers must remain valid for the lifetime of this object. </p>

</div>
</div>
<a class="anchor" id="aab2d7ef962fdc3b1a78c9799e86b3f5d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt;<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7228c51415cdc1c7fe72fc78c538764d">value_type</a>&gt; <a class="el" href="classgmx_1_1ConstArrayRef.xhtml">gmx::ConstArrayRef</a>&lt; T &gt;::fromVector </td>
          <td>(</td>
          <td class="paramtype">typename std::vector&lt; <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7228c51415cdc1c7fe72fc78c538764d">value_type</a> &gt;::<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a84f4516890c6ee6ff191ff39dbb01059">const_iterator</a>&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">typename std::vector&lt; <a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a7228c51415cdc1c7fe72fc78c538764d">value_type</a> &gt;::<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a84f4516890c6ee6ff191ff39dbb01059">const_iterator</a>&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs a reference to a particular range in a std::vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">begin</td><td>Iterator to the beginning of a range. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end</td><td>Iterator to the end of a range.</td></tr>
  </table>
  </dd>
</dl>
<p>The referenced vector must remain valid and not be reallocated for the lifetime of this object. </p>

</div>
</div>
<a class="anchor" id="af9c00ef92094cc2a1f725f64b8dec471"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgmx_1_1ConstArrayRef.xhtml">gmx::ConstArrayRef</a>&lt; T &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Swaps referenced memory with the other object. </p>
<p>The actual memory areas are not modified, only the references are swapped. </p>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a class="anchor" id="a166d990cb222e245882df676209ebfa0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt; T &gt; constArrayRefFromArray </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs a reference to an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">begin</td><td>Pointer to the beginning of the array. May be NULL if <code>size</code> is zero. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">size</td><td>Number of elements in the array.</td></tr>
  </table>
  </dd>
</dl>
<p>Passed pointer must remain valid for the lifetime of this object. </p>

</div>
</div>
<a class="anchor" id="a50ee12f2bdc2f09edc898fb1749d30e0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt; T &gt; constArrayRefFromPointers </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs a reference to a particular range from two pointers. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">begin</td><td>Pointer to the beginning of a range. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end</td><td>Pointer to the end of a range.</td></tr>
  </table>
  </dd>
</dl>
<p>Passed pointers must remain valid for the lifetime of this object. </p>

</div>
</div>
<a class="anchor" id="adaf3ee38ea2a4fa96217ea650453c89b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt; T &gt; constArrayRefFromVector </td>
          <td>(</td>
          <td class="paramtype">typename std::vector&lt; T &gt;::<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a84f4516890c6ee6ff191ff39dbb01059">const_iterator</a>&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">typename std::vector&lt; T &gt;::<a class="el" href="classgmx_1_1ConstArrayRef.xhtml#a84f4516890c6ee6ff191ff39dbb01059">const_iterator</a>&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs a reference to a particular range in a std::vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">begin</td><td>Iterator to the beginning of a range. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end</td><td>Iterator to the end of a range.</td></tr>
  </table>
  </dd>
</dl>
<p>The referenced vector must remain valid and not be reallocated for the lifetime of this object. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/gromacs/commandline/<a class="el" href="cmdlinehelpwriter_8h.xhtml">cmdlinehelpwriter.h</a></li>
<li>src/gromacs/utility/<a class="el" href="arrayref_8h.xhtml">arrayref.h</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:18:09 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
