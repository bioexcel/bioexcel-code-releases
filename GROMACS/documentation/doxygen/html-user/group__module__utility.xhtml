<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: Low-Level Utilities (utility)</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#dirs">Directories</a> &#124;
<a href="#files">Files</a>  </div>
  <div class="headertitle">
<div class="title">Low-Level Utilities (utility)<div class="ingroups"><a class="el" href="group__group__utilitymodules.xhtml">Utility Modules</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for Low-Level Utilities (utility):</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<center><table><tr><td><div class="center"><iframe scrolling="no" frameborder="0" src="group__module__utility.svg" width="579" height="487"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</td></tr></table></center>
</div>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<p>Provides low-level utilities for error handling and other tasks. </p>
<p>This module provides various low-level utilities for tasks such as error handling and string formatting, as well as helper classes and common custom containers to simplify implementation of other code. Contents of the module are discussed in more details under the different headings below. Some of the code in installed headers in the module is intended for use directly from code outside the GROMACS library, but a significant portion is exposed only because other public headers depend on it.</p>
<p>Since this module implements error handling, it should be at the lowest level: it should not depend on other modules. Any functionality needed by the error handling code should also be kept in this module.</p>
<h3>Error handling</h3>
<p>Exception classes used in the library are declared in the <a class="el" href="exceptions_8h.xhtml" title="Declares common exception classes and macros for fatal error handling. ">exceptions.h</a> header file. Most GROMACS-specific exceptions derive from <a class="el" href="classgmx_1_1GromacsException.xhtml" title="Base class for all exception objects in Gromacs. ">gmx::GromacsException</a>.</p>
<p>This header also declares a <a class="el" href="group__module__utility.xhtml#gaed2c1af17dbda0e02e8cfd2c3d7e7096" title="Macro for throwing an exception. ">GMX_THROW</a> macro that should be used for throwing exceptions. <a class="el" href="group__module__utility.xhtml#ga02415d7db680dcec8185c3d4af0d09fc" title="Macro for throwing an exception based on errno. ">GMX_THROW_WITH_ERRNO</a> is also provided for reporting syscall errors, but its use should be mostly limited to within the library. This header also declares helper functions <a class="el" href="group__module__utility.xhtml#gac6287dc8a550a2d54429e44994e00e58" title="Formats a standard fatal error message for reporting an exception. ">printFatalErrorMessage()</a>, <a class="el" href="group__module__utility.xhtml#gac7703ad35b606758d2d12edc0a3d5217" title="Formats an error message for reporting an exception. ">formatExceptionMessageToString()</a>, and <a class="el" href="group__module__utility.xhtml#gac5e6f6ec944fb2484d6f273c9a0ff495" title="Formats an error message for reporting an exception. ">formatExceptionMessageToFile()</a> for creating standard error messages. <a class="el" href="group__module__utility.xhtml#ga5a45f49e157fa8e1059d24243283e248" title="Handles an exception that is causing the program to terminate. ">processExceptionAtExit()</a> provides clean-up code before exiting the program after an exception. To help in cases where bottom-up conversion to C++ is appropriate, macro <a class="el" href="group__module__utility.xhtml#ga5e77eb0451e9294f07e04bdc8ded0d96" title="Macro for catching exceptions at C++ -&gt; C boundary. ">GMX_CATCH_ALL_AND_EXIT_WITH_FATAL_ERROR</a> is also provided to catch all exceptions at C++ to C boundary.</p>
<p>Header file <a class="el" href="gmxassert_8h.xhtml" title="Defines assert macros customized for Gromacs. ">gmxassert.h</a> is also provided for assertions. It declares macros <a class="el" href="group__module__utility.xhtml#ga5ae3261a89ac2c165cfba084c6b02ef7" title="Macro for debug asserts. ">GMX_ASSERT</a> and <a class="el" href="group__module__utility.xhtml#ga1071dd9ef4577eac808a66272ecef494" title="Macro for asserts that should also be present in the release version. ">GMX_RELEASE_ASSERT</a> that should be used for assertions.</p>
<h3>Implementation helpers</h3>
<p>The header <a class="el" href="basedefinitions_8h.xhtml" title="Basic types and macros used throughout GROMACS. ">basedefinitions.h</a> contains common definitions and macros used throughout GROMACS. It includes fixed-width integer types (<code>gmx_int64_t</code> and friends), <code>gmx_bool</code> for C code, some macros for compiler-specific attributes, and <a class="el" href="group__module__utility.xhtml#ga33e34477bae2bbb86c4d9af1823e3fd0" title="Macro to explicitly ignore an unused value. ">GMX_UNUSED_VALUE</a> and <a class="el" href="group__module__utility.xhtml#gaea5f9b70aab0c21b621fe421fb53a9b1" title="Macro to explicitly ignore a return value of a call. ">GMX_IGNORE_RETURN_VALUE</a> for handling warnings about unused values.</p>
<p>The header <a class="el" href="classhelpers_8h.xhtml" title="Declares common utility classes and macros. ">classhelpers.h</a> implements a <a class="el" href="classgmx_1_1PrivateImplPointer.xhtml" title="Helper class to manage a pointer to a private implementation class. ">gmx::PrivateImplPointer</a> template for easily writing classes that use the private implementation idiom. This header also declares <a class="el" href="group__module__utility.xhtml#gaa92e208d024bed7158ccb0d435d0c604" title="Macro to declare a class non-copyable and non-assignable. ">GMX_DISALLOW_COPY_AND_ASSIGN</a> and <a class="el" href="group__module__utility.xhtml#ga7c055bdcca22bf1e0feb1a93e6ca86cd" title="Macro to declare a class non-assignable. ">GMX_DISALLOW_ASSIGN</a> macros for class declarations.</p>
<p>The header <a class="el" href="flags_8h.xhtml" title="Declares gmx::FlagsTemplate. ">flags.h</a> implements a <a class="el" href="classgmx_1_1FlagsTemplate.xhtml" title="Template class for typesafe handling of combination of flags. ">gmx::FlagsTemplate</a> template for better type safety when using bit flag fields.</p>
<h3>Other functionality</h3>
<p>The header <a class="el" href="init_8h.xhtml" title="Declares functions for initializing the GROMACS library. ">init.h</a> declares <a class="el" href="group__module__utility.xhtml#gae00d174a8ddd5325460d74dc663711c0" title="Initializes the GROMACS library. ">gmx::init()</a> and <a class="el" href="group__module__utility.xhtml#gaa0a90b2770cb4b69e16229daa271a1af" title="Deinitializes the GROMACS library. ">gmx::finalize()</a> for initializing and deinitializing the GROMACS library.</p>
<p>The header <a class="el" href="arrayref_8h.xhtml" title="Declares gmx::ArrayRef and gmx::ConstArrayRef. ">arrayref.h</a> implements a <a class="el" href="classgmx_1_1ConstArrayRef.xhtml" title="STL-like container for non-mutable interface to a C array (or part of a std::vector). ">gmx::ConstArrayRef</a> class for exposing a C array or part of a std::vector (basically, any continuous stretch of memory) throuh a std::vector-like interface.</p>
<p>The header <a class="el" href="stringutil_8h.xhtml" title="Declares common string utility and formatting routines. ">stringutil.h</a> declares various string utility routines.</p>
<dl class="section author"><dt>Author</dt><dd>Teemu Murtola <a href="#" onclick="location.href='mai'+'lto:'+'tee'+'mu'+'.mu'+'rt'+'ola'+'@g'+'mai'+'l.'+'com'; return false;">teemu<span style="display: none;">.nosp@m.</span>.mur<span style="display: none;">.nosp@m.</span>tola@<span style="display: none;">.nosp@m.</span>gmai<span style="display: none;">.nosp@m.</span>l.com</a> </dd></dl>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ArrayRef.xhtml">gmx::ArrayRef&lt; T &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">STL-like container for an interface to a C array (or part of a std::vector).  <a href="classgmx_1_1ArrayRef.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ConstArrayRef.xhtml">gmx::ConstArrayRef&lt; T &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">STL-like container for non-mutable interface to a C array (or part of a std::vector).  <a href="classgmx_1_1ConstArrayRef.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1PrivateImplPointer.xhtml">gmx::PrivateImplPointer&lt; Impl &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class to manage a pointer to a private implementation class.  <a href="classgmx_1_1PrivateImplPointer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1DataFileOptions.xhtml">gmx::DataFileOptions</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Search parameters for <a class="el" href="classgmx_1_1DataFileFinder.xhtml" title="Searches data files from a set of paths. ">DataFileFinder</a>.  <a href="classgmx_1_1DataFileOptions.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgmx_1_1DataFileInfo.xhtml">gmx::DataFileInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Information about a data file found by <a class="el" href="classgmx_1_1DataFileFinder.xhtml#a45d2ecd3b688a1432fb94d9632de232a" title="Enumerates files in the data directories. ">DataFileFinder::enumerateFiles()</a>.  <a href="structgmx_1_1DataFileInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1DataFileFinder.xhtml">gmx::DataFileFinder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches data files from a set of paths.  <a href="classgmx_1_1DataFileFinder.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ExceptionInfo.xhtml">gmx::ExceptionInfo&lt; Tag, T &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores additional context information for exceptions.  <a href="classgmx_1_1ExceptionInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1ExceptionInitializer.xhtml">gmx::ExceptionInitializer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides information for Gromacs exception constructors.  <a href="classgmx_1_1ExceptionInitializer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1GromacsException.xhtml">gmx::GromacsException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for all exception objects in Gromacs.  <a href="classgmx_1_1GromacsException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1FileIOError.xhtml">gmx::FileIOError</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for file I/O errors.  <a href="classgmx_1_1FileIOError.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1UserInputError.xhtml">gmx::UserInputError</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for user input errors.  <a href="classgmx_1_1UserInputError.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1InvalidInputError.xhtml">gmx::InvalidInputError</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for situations where user input cannot be parsed/understood.  <a href="classgmx_1_1InvalidInputError.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1InconsistentInputError.xhtml">gmx::InconsistentInputError</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for situations where user input is inconsistent.  <a href="classgmx_1_1InconsistentInputError.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimulationInstabilityError.xhtml">gmx::SimulationInstabilityError</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for simulation instabilities.  <a href="classgmx_1_1SimulationInstabilityError.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1InternalError.xhtml">gmx::InternalError</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for internal errors.  <a href="classgmx_1_1InternalError.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1APIError.xhtml">gmx::APIError</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for incorrect use of an API.  <a href="classgmx_1_1APIError.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1NotImplementedError.xhtml">gmx::NotImplementedError</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for use of an unimplemented feature.  <a href="classgmx_1_1NotImplementedError.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1FlagsTemplate.xhtml">gmx::FlagsTemplate&lt; FlagType &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Template class for typesafe handling of combination of flags.  <a href="classgmx_1_1FlagsTemplate.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgmx_1_1InstallationPrefixInfo.xhtml">gmx::InstallationPrefixInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides information about installation prefix (see <a class="el" href="classgmx_1_1IProgramContext.xhtml#ada732144a05c8faa224b5ad0d904df6f" title="Returns the installation prefix for GROMACS. ">IProgramContext::installationPrefix()</a>).  <a href="structgmx_1_1InstallationPrefixInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1IProgramContext.xhtml">gmx::IProgramContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides context information about the program that is calling the library.  <a href="classgmx_1_1IProgramContext.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1StringFormatter.xhtml">gmx::StringFormatter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function object that wraps a call to <a class="el" href="group__module__utility.xhtml#gaed06df18ca6f9fc3f42bad9ea4d7e025" title="Formats a string (snprintf() wrapper). ">formatString()</a> that expects a single conversion argument, for use with algorithms.  <a href="classgmx_1_1StringFormatter.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1IdentityFormatter.xhtml">gmx::IdentityFormatter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function object to implement the same interface as <code><a class="el" href="classgmx_1_1StringFormatter.xhtml" title="Function object that wraps a call to formatString() that expects a single conversion argument...">StringFormatter</a></code> to use with strings that should not be formatted further.  <a href="classgmx_1_1IdentityFormatter.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextLineWrapperSettings.xhtml">gmx::TextLineWrapperSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores settings for line wrapping.  <a href="classgmx_1_1TextLineWrapperSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextLineWrapper.xhtml">gmx::TextLineWrapper</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wraps lines to a predefined length.  <a href="classgmx_1_1TextLineWrapper.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga0883345a58f8f63aefa249a4f127f707"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga0883345a58f8f63aefa249a4f127f707"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga0883345a58f8f63aefa249a4f127f707">asize</a>(a)&#160;&#160;&#160;((int)(sizeof(a)/sizeof((a)[0])))</td></tr>
<tr class="memdesc:ga0883345a58f8f63aefa249a4f127f707"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the static number of elements in an array. <br/></td></tr>
<tr class="separator:ga0883345a58f8f63aefa249a4f127f707"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga33e34477bae2bbb86c4d9af1823e3fd0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga33e34477bae2bbb86c4d9af1823e3fd0"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga33e34477bae2bbb86c4d9af1823e3fd0">GMX_UNUSED_VALUE</a>(value)&#160;&#160;&#160;(void)value</td></tr>
<tr class="memdesc:ga33e34477bae2bbb86c4d9af1823e3fd0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Macro to explicitly ignore an unused value. <br/></td></tr>
<tr class="separator:ga33e34477bae2bbb86c4d9af1823e3fd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaea5f9b70aab0c21b621fe421fb53a9b1"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaea5f9b70aab0c21b621fe421fb53a9b1">GMX_IGNORE_RETURN_VALUE</a>(call)&#160;&#160;&#160;::gmx::internal::ignoreValueHelper(call)</td></tr>
<tr class="memdesc:gaea5f9b70aab0c21b621fe421fb53a9b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Macro to explicitly ignore a return value of a call.  <a href="#gaea5f9b70aab0c21b621fe421fb53a9b1">More...</a><br/></td></tr>
<tr class="separator:gaea5f9b70aab0c21b621fe421fb53a9b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa92e208d024bed7158ccb0d435d0c604"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaa92e208d024bed7158ccb0d435d0c604">GMX_DISALLOW_COPY_AND_ASSIGN</a>(ClassName)</td></tr>
<tr class="memdesc:gaa92e208d024bed7158ccb0d435d0c604"><td class="mdescLeft">&#160;</td><td class="mdescRight">Macro to declare a class non-copyable and non-assignable.  <a href="#gaa92e208d024bed7158ccb0d435d0c604">More...</a><br/></td></tr>
<tr class="separator:gaa92e208d024bed7158ccb0d435d0c604"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7c055bdcca22bf1e0feb1a93e6ca86cd"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga7c055bdcca22bf1e0feb1a93e6ca86cd">GMX_DISALLOW_ASSIGN</a>(ClassName)&#160;&#160;&#160;ClassName &amp;operator=(const ClassName &amp;) = delete</td></tr>
<tr class="memdesc:ga7c055bdcca22bf1e0feb1a93e6ca86cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Macro to declare a class non-assignable.  <a href="#ga7c055bdcca22bf1e0feb1a93e6ca86cd">More...</a><br/></td></tr>
<tr class="separator:ga7c055bdcca22bf1e0feb1a93e6ca86cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac05e1c9dcf15fe6214d655fafba28a48"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gac05e1c9dcf15fe6214d655fafba28a48">GMX_DEFAULT_CONSTRUCTORS</a>(ClassName)</td></tr>
<tr class="memdesc:gac05e1c9dcf15fe6214d655fafba28a48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Macro to declare default constructors.  <a href="#gac05e1c9dcf15fe6214d655fafba28a48">More...</a><br/></td></tr>
<tr class="separator:gac05e1c9dcf15fe6214d655fafba28a48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae874dfbf621e3e04133619aec5d466e5"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae874dfbf621e3e04133619aec5d466e5"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gae874dfbf621e3e04133619aec5d466e5">GMX_CURRENT_FUNCTION</a>&#160;&#160;&#160;&quot;(unknown)&quot;</td></tr>
<tr class="memdesc:gae874dfbf621e3e04133619aec5d466e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Expands to a string that provides the name of the current function. <br/></td></tr>
<tr class="separator:gae874dfbf621e3e04133619aec5d466e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaed2c1af17dbda0e02e8cfd2c3d7e7096"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaed2c1af17dbda0e02e8cfd2c3d7e7096">GMX_THROW</a>(e)&#160;&#160;&#160;throw (e) &lt;&lt; <a class="el" href="group__module__utility.xhtml#gab5d3ee620090581599c5762270314897">gmx::ExceptionInfoLocation</a>(gmx::ThrowLocation(<a class="el" href="group__module__utility.xhtml#gae874dfbf621e3e04133619aec5d466e5">GMX_CURRENT_FUNCTION</a>, __FILE__, __LINE__))</td></tr>
<tr class="memdesc:gaed2c1af17dbda0e02e8cfd2c3d7e7096"><td class="mdescLeft">&#160;</td><td class="mdescRight">Macro for throwing an exception.  <a href="#gaed2c1af17dbda0e02e8cfd2c3d7e7096">More...</a><br/></td></tr>
<tr class="separator:gaed2c1af17dbda0e02e8cfd2c3d7e7096"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga02415d7db680dcec8185c3d4af0d09fc"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga02415d7db680dcec8185c3d4af0d09fc">GMX_THROW_WITH_ERRNO</a>(e, syscall, err)</td></tr>
<tr class="memdesc:ga02415d7db680dcec8185c3d4af0d09fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Macro for throwing an exception based on errno.  <a href="#ga02415d7db680dcec8185c3d4af0d09fc">More...</a><br/></td></tr>
<tr class="separator:ga02415d7db680dcec8185c3d4af0d09fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5e77eb0451e9294f07e04bdc8ded0d96"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga5e77eb0451e9294f07e04bdc8ded0d96">GMX_CATCH_ALL_AND_EXIT_WITH_FATAL_ERROR</a></td></tr>
<tr class="memdesc:ga5e77eb0451e9294f07e04bdc8ded0d96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Macro for catching exceptions at C++ -&gt; C boundary.  <a href="#ga5e77eb0451e9294f07e04bdc8ded0d96">More...</a><br/></td></tr>
<tr class="separator:ga5e77eb0451e9294f07e04bdc8ded0d96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1071dd9ef4577eac808a66272ecef494"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga1071dd9ef4577eac808a66272ecef494">GMX_RELEASE_ASSERT</a>(condition, msg)</td></tr>
<tr class="memdesc:ga1071dd9ef4577eac808a66272ecef494"><td class="mdescLeft">&#160;</td><td class="mdescRight">Macro for asserts that should also be present in the release version.  <a href="#ga1071dd9ef4577eac808a66272ecef494">More...</a><br/></td></tr>
<tr class="separator:ga1071dd9ef4577eac808a66272ecef494"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5ae3261a89ac2c165cfba084c6b02ef7"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga5ae3261a89ac2c165cfba084c6b02ef7">GMX_ASSERT</a>(condition, msg)&#160;&#160;&#160;<a class="el" href="group__module__utility.xhtml#ga1071dd9ef4577eac808a66272ecef494">GMX_RELEASE_ASSERT</a>(condition, msg)</td></tr>
<tr class="memdesc:ga5ae3261a89ac2c165cfba084c6b02ef7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Macro for debug asserts.  <a href="#ga5ae3261a89ac2c165cfba084c6b02ef7">More...</a><br/></td></tr>
<tr class="separator:ga5ae3261a89ac2c165cfba084c6b02ef7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaf82b25c57ecd30a306f027b0696ca94"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaaf82b25c57ecd30a306f027b0696ca94">gmx_qsort_threadsafe</a>&#160;&#160;&#160;qsort</td></tr>
<tr class="memdesc:gaaf82b25c57ecd30a306f027b0696ca94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Threadsafe qsort().  <a href="#gaaf82b25c57ecd30a306f027b0696ca94">More...</a><br/></td></tr>
<tr class="separator:gaaf82b25c57ecd30a306f027b0696ca94"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ga590b36651977793730ea2413906302cf"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga590b36651977793730ea2413906302cf"></a>
typedef ExceptionInfo&lt; struct <br class="typebreak"/>
ExceptionInfoErrno_, int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga590b36651977793730ea2413906302cf">gmx::ExceptionInfoErrno</a></td></tr>
<tr class="memdesc:ga590b36651977793730ea2413906302cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores <code>errno</code> value that triggered the exception. <br/></td></tr>
<tr class="separator:ga590b36651977793730ea2413906302cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3c8f9c19c0ed36c16770317afc7c69bb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga3c8f9c19c0ed36c16770317afc7c69bb"></a>
typedef ExceptionInfo&lt; struct <br class="typebreak"/>
ExceptionInfoApiFunc_, const <br class="typebreak"/>
char * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga3c8f9c19c0ed36c16770317afc7c69bb">gmx::ExceptionInfoApiFunction</a></td></tr>
<tr class="memdesc:ga3c8f9c19c0ed36c16770317afc7c69bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores the function name that returned the <code>errno</code> in ExceptionInfoErrno. <br/></td></tr>
<tr class="separator:ga3c8f9c19c0ed36c16770317afc7c69bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab5d3ee620090581599c5762270314897"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gab5d3ee620090581599c5762270314897"></a>
typedef ExceptionInfo&lt; struct <br class="typebreak"/>
ExceptionInfoLocation_, <br class="typebreak"/>
ThrowLocation &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gab5d3ee620090581599c5762270314897">gmx::ExceptionInfoLocation</a></td></tr>
<tr class="memdesc:gab5d3ee620090581599c5762270314897"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores the location where the exception was thrown. <br/></td></tr>
<tr class="separator:gab5d3ee620090581599c5762270314897"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:gac92ff9c7f6f5ed5200b3d8d92a4d53e3"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gac92ff9c7f6f5ed5200b3d8d92a4d53e3">gmx::ErrorCode</a> { <br/>
&#160;&#160;<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3acacaa10fa7070b0494b30fdc97a7a356">gmx::eeOK</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a35a82c5a0f04b6255d3f28d6144dd24e">gmx::eeOutOfMemory</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a444e88ccfbfc246dc671919d0cf127c1">gmx::eeFileNotFound</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3ad0a05315bf704c8457baef6eac42dc4e">gmx::eeFileIO</a>, 
<br/>
&#160;&#160;<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a4c2569b29b84eda15a5cf90e28395b21">gmx::eeInvalidInput</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a7eb29dbd6ce224f815ba82ddcc3b6f62">gmx::eeInconsistentInput</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3ac0b348673979b42ebc8df4562b8ebfa4">gmx::eeInstability</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3ae958977bd58e97bcc4fd367324c8b21b">gmx::eeNotImplemented</a>, 
<br/>
&#160;&#160;<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a71840645faa70349b0e4bede4da4b6d1">gmx::eeInvalidValue</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a40bd4aef44a2ab731b61fb9c9184a3bd">gmx::eeInvalidCall</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a90b9f0f24cf026b56ebf63d359c5f422">gmx::eeInternalError</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a414167b1bc702c9e8bb7f91078360845">gmx::eeAPIError</a>, 
<br/>
&#160;&#160;<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a068d9a3d2c79173f39457344cd60380f">gmx::eeRange</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a395dad7e12b144dd6805157e6d92e40f">gmx::eeCommunication</a>, 
<a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a46578ca340e1c440d5f519569e6884fb">gmx::eeUnknownError</a>
<br/>
 }</td></tr>
<tr class="memdesc:gac92ff9c7f6f5ed5200b3d8d92a4d53e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Possible error return codes from Gromacs functions.  <a href="group__module__utility.xhtml#gac92ff9c7f6f5ed5200b3d8d92a4d53e3">More...</a><br/></td></tr>
<tr class="separator:gac92ff9c7f6f5ed5200b3d8d92a4d53e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga6f21654b9945d04d277523f6c8ab1d11"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga6f21654b9945d04d277523f6c8ab1d11"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga6f21654b9945d04d277523f6c8ab1d11">gmx::swap</a> (ArrayRef&lt; T &gt; &amp;a, ArrayRef&lt; T &gt; &amp;b)</td></tr>
<tr class="memdesc:ga6f21654b9945d04d277523f6c8ab1d11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple swap method for <a class="el" href="classgmx_1_1ArrayRef.xhtml" title="STL-like container for an interface to a C array (or part of a std::vector). ">ArrayRef</a> objects.  <a href="#ga6f21654b9945d04d277523f6c8ab1d11">More...</a><br/></td></tr>
<tr class="separator:ga6f21654b9945d04d277523f6c8ab1d11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3faec92610cb1ba29dfdf35a05e794cd"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga3faec92610cb1ba29dfdf35a05e794cd"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga3faec92610cb1ba29dfdf35a05e794cd">gmx::swap</a> (ConstArrayRef&lt; T &gt; &amp;a, ConstArrayRef&lt; T &gt; &amp;b)</td></tr>
<tr class="memdesc:ga3faec92610cb1ba29dfdf35a05e794cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple swap method for <a class="el" href="classgmx_1_1ConstArrayRef.xhtml" title="STL-like container for non-mutable interface to a C array (or part of a std::vector). ">ConstArrayRef</a> objects.  <a href="#ga3faec92610cb1ba29dfdf35a05e794cd">More...</a><br/></td></tr>
<tr class="separator:ga3faec92610cb1ba29dfdf35a05e794cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga26891cd06bdb1b0a8bb759957628be9f"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga26891cd06bdb1b0a8bb759957628be9f">gmx_version</a> (void)</td></tr>
<tr class="memdesc:ga26891cd06bdb1b0a8bb759957628be9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Version string, containing the version, date, and abbreviated hash.  <a href="#ga26891cd06bdb1b0a8bb759957628be9f">More...</a><br/></td></tr>
<tr class="separator:ga26891cd06bdb1b0a8bb759957628be9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9fcf89a9f3c65ca42810bbbdff25893b"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga9fcf89a9f3c65ca42810bbbdff25893b">gmx_version_git_full_hash</a> (void)</td></tr>
<tr class="memdesc:ga9fcf89a9f3c65ca42810bbbdff25893b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Full git hash of the latest commit.  <a href="#ga9fcf89a9f3c65ca42810bbbdff25893b">More...</a><br/></td></tr>
<tr class="separator:ga9fcf89a9f3c65ca42810bbbdff25893b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga61d315f10e21d489a53b372e45fbcd5a"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga61d315f10e21d489a53b372e45fbcd5a">gmx_version_git_central_base_hash</a> (void)</td></tr>
<tr class="memdesc:ga61d315f10e21d489a53b372e45fbcd5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Full git hash of the latest commit in a central GROMACS repository.  <a href="#ga61d315f10e21d489a53b372e45fbcd5a">More...</a><br/></td></tr>
<tr class="separator:ga61d315f10e21d489a53b372e45fbcd5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga62ad1902885ca86ef8b05bc29c0f0a90"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga62ad1902885ca86ef8b05bc29c0f0a90">gmx_is_double_precision</a> ()</td></tr>
<tr class="memdesc:ga62ad1902885ca86ef8b05bc29c0f0a90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Defined if <code>libgromacs</code> has been compiled in double precision.  <a href="#ga62ad1902885ca86ef8b05bc29c0f0a90">More...</a><br/></td></tr>
<tr class="separator:ga62ad1902885ca86ef8b05bc29c0f0a90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga41bdbf2771535287b9b0cd043464155f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga41bdbf2771535287b9b0cd043464155f">gmx_is_single_precision</a> ()</td></tr>
<tr class="memdesc:ga41bdbf2771535287b9b0cd043464155f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Defined if <code>libgromacs</code> has been compiled in single/mixed precision.  <a href="#ga41bdbf2771535287b9b0cd043464155f">More...</a><br/></td></tr>
<tr class="separator:ga41bdbf2771535287b9b0cd043464155f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaac30db5a87fa0f55776bc8a3dcef0d67"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaac30db5a87fa0f55776bc8a3dcef0d67">gmx::getErrorCodeString</a> (int errorcode)</td></tr>
<tr class="memdesc:gaac30db5a87fa0f55776bc8a3dcef0d67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a short string description of an error code.  <a href="#gaac30db5a87fa0f55776bc8a3dcef0d67">More...</a><br/></td></tr>
<tr class="separator:gaac30db5a87fa0f55776bc8a3dcef0d67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1b9a1e3988a89d1b90944c6ff6c3e794"><td class="memTemplParams" colspan="2">template&lt;class Exception , class Tag , class T &gt; </td></tr>
<tr class="memitem:ga1b9a1e3988a89d1b90944c6ff6c3e794"><td class="memTemplItemLeft" align="right" valign="top">std::enable_if<br class="typebreak"/>
&lt; std::is_base_of<br class="typebreak"/>
&lt; GromacsException, Exception &gt;<br class="typebreak"/>
::value, const Exception &amp; &gt;<br class="typebreak"/>
::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga1b9a1e3988a89d1b90944c6ff6c3e794">gmx::operator&lt;&lt;</a> (const Exception &amp;ex, const ExceptionInfo&lt; Tag, T &gt; &amp;item)</td></tr>
<tr class="memdesc:ga1b9a1e3988a89d1b90944c6ff6c3e794"><td class="mdescLeft">&#160;</td><td class="mdescRight">Associates extra information with an exception.  <a href="#ga1b9a1e3988a89d1b90944c6ff6c3e794">More...</a><br/></td></tr>
<tr class="separator:ga1b9a1e3988a89d1b90944c6ff6c3e794"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6287dc8a550a2d54429e44994e00e58"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gac6287dc8a550a2d54429e44994e00e58">gmx::printFatalErrorMessage</a> (FILE *fp, const std::exception &amp;ex)</td></tr>
<tr class="memdesc:gac6287dc8a550a2d54429e44994e00e58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats a standard fatal error message for reporting an exception.  <a href="#gac6287dc8a550a2d54429e44994e00e58">More...</a><br/></td></tr>
<tr class="separator:gac6287dc8a550a2d54429e44994e00e58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac7703ad35b606758d2d12edc0a3d5217"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gac7703ad35b606758d2d12edc0a3d5217">gmx::formatExceptionMessageToString</a> (const std::exception &amp;ex)</td></tr>
<tr class="memdesc:gac7703ad35b606758d2d12edc0a3d5217"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats an error message for reporting an exception.  <a href="#gac7703ad35b606758d2d12edc0a3d5217">More...</a><br/></td></tr>
<tr class="separator:gac7703ad35b606758d2d12edc0a3d5217"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac5e6f6ec944fb2484d6f273c9a0ff495"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gac5e6f6ec944fb2484d6f273c9a0ff495">gmx::formatExceptionMessageToFile</a> (FILE *fp, const std::exception &amp;ex)</td></tr>
<tr class="memdesc:gac5e6f6ec944fb2484d6f273c9a0ff495"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats an error message for reporting an exception.  <a href="#gac5e6f6ec944fb2484d6f273c9a0ff495">More...</a><br/></td></tr>
<tr class="separator:gac5e6f6ec944fb2484d6f273c9a0ff495"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaacf6bfb81220e44ed1bf73f0a44d9926"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaacf6bfb81220e44ed1bf73f0a44d9926">gmx::formatExceptionMessageToWriter</a> (TextWriter *writer, const std::exception &amp;ex)</td></tr>
<tr class="memdesc:gaacf6bfb81220e44ed1bf73f0a44d9926"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats an error message for reporting an exception.  <a href="#gaacf6bfb81220e44ed1bf73f0a44d9926">More...</a><br/></td></tr>
<tr class="separator:gaacf6bfb81220e44ed1bf73f0a44d9926"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5a45f49e157fa8e1059d24243283e248"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga5a45f49e157fa8e1059d24243283e248">gmx::processExceptionAtExit</a> (const std::exception &amp;ex)</td></tr>
<tr class="memdesc:ga5a45f49e157fa8e1059d24243283e248"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handles an exception that is causing the program to terminate.  <a href="#ga5a45f49e157fa8e1059d24243283e248">More...</a><br/></td></tr>
<tr class="separator:ga5a45f49e157fa8e1059d24243283e248"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga13076c5bb17dd3bf90f683af835b8b62"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga13076c5bb17dd3bf90f683af835b8b62">gmx::processExceptionAsFatalError</a> (const std::exception &amp;ex)</td></tr>
<tr class="memdesc:ga13076c5bb17dd3bf90f683af835b8b62"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function for terminating the program on an exception.  <a href="#ga13076c5bb17dd3bf90f683af835b8b62">More...</a><br/></td></tr>
<tr class="separator:ga13076c5bb17dd3bf90f683af835b8b62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga312499e4abb409ad85844d83e52d795b"><td class="memItemLeft" align="right" valign="top">const DataFileFinder &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga312499e4abb409ad85844d83e52d795b">gmx::getLibraryFileFinder</a> ()</td></tr>
<tr class="memdesc:ga312499e4abb409ad85844d83e52d795b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets a finder for locating data files from share/top/.  <a href="#ga312499e4abb409ad85844d83e52d795b">More...</a><br/></td></tr>
<tr class="separator:ga312499e4abb409ad85844d83e52d795b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga29a756d1573d36b702845f21700bd12f"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga29a756d1573d36b702845f21700bd12f">gmx_omp_get_max_threads</a> (void)</td></tr>
<tr class="memdesc:ga29a756d1573d36b702845f21700bd12f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an integer equal to or greater than the number of threads that would be available if a parallel region without num_threads were defined at that point in the code.  <a href="#ga29a756d1573d36b702845f21700bd12f">More...</a><br/></td></tr>
<tr class="separator:ga29a756d1573d36b702845f21700bd12f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1397b58c16c60a0349d9e4aa1df2349e"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga1397b58c16c60a0349d9e4aa1df2349e">gmx_omp_get_num_procs</a> (void)</td></tr>
<tr class="memdesc:ga1397b58c16c60a0349d9e4aa1df2349e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of processors available when the function is called.  <a href="#ga1397b58c16c60a0349d9e4aa1df2349e">More...</a><br/></td></tr>
<tr class="separator:ga1397b58c16c60a0349d9e4aa1df2349e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga04383c3cc48de75f41acbcd8de33b78f"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga04383c3cc48de75f41acbcd8de33b78f">gmx_omp_get_thread_num</a> (void)</td></tr>
<tr class="memdesc:ga04383c3cc48de75f41acbcd8de33b78f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the thread number of the thread executing within its thread team.  <a href="#ga04383c3cc48de75f41acbcd8de33b78f">More...</a><br/></td></tr>
<tr class="separator:ga04383c3cc48de75f41acbcd8de33b78f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7a75b2bb561a45da2abede8709ae5339"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga7a75b2bb561a45da2abede8709ae5339">gmx_omp_set_num_threads</a> (int num_threads)</td></tr>
<tr class="memdesc:ga7a75b2bb561a45da2abede8709ae5339"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the number of threads in subsequent parallel regions, unless overridden by a num_threads clause.  <a href="#ga7a75b2bb561a45da2abede8709ae5339">More...</a><br/></td></tr>
<tr class="separator:ga7a75b2bb561a45da2abede8709ae5339"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafd33d9597e51bde4d96e7608ebf40d58"><td class="memItemLeft" align="right" valign="top"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gafd33d9597e51bde4d96e7608ebf40d58">gmx_omp_check_thread_affinity</a> (char **message)</td></tr>
<tr class="memdesc:gafd33d9597e51bde4d96e7608ebf40d58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check for externally set thread affinity to avoid conflicts with GROMACS internal setting.  <a href="#gafd33d9597e51bde4d96e7608ebf40d58">More...</a><br/></td></tr>
<tr class="separator:gafd33d9597e51bde4d96e7608ebf40d58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga63a859aed5514fa9801ed06e42b472d4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga63a859aed5514fa9801ed06e42b472d4"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga63a859aed5514fa9801ed06e42b472d4">gmx_pause</a> ()</td></tr>
<tr class="memdesc:ga63a859aed5514fa9801ed06e42b472d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pause for use in a spin-wait loop. <br/></td></tr>
<tr class="separator:ga63a859aed5514fa9801ed06e42b472d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae00d174a8ddd5325460d74dc663711c0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gae00d174a8ddd5325460d74dc663711c0">gmx::init</a> (int *argc, char ***argv)</td></tr>
<tr class="memdesc:gae00d174a8ddd5325460d74dc663711c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the GROMACS library.  <a href="#gae00d174a8ddd5325460d74dc663711c0">More...</a><br/></td></tr>
<tr class="separator:gae00d174a8ddd5325460d74dc663711c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa0a90b2770cb4b69e16229daa271a1af"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaa0a90b2770cb4b69e16229daa271a1af">gmx::finalize</a> ()</td></tr>
<tr class="memdesc:gaa0a90b2770cb4b69e16229daa271a1af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deinitializes the GROMACS library.  <a href="#gaa0a90b2770cb4b69e16229daa271a1af">More...</a><br/></td></tr>
<tr class="separator:gaa0a90b2770cb4b69e16229daa271a1af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5ac09bdfd662fa49b0426432744f57be"><td class="memItemLeft" align="right" valign="top">const IProgramContext &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga5ac09bdfd662fa49b0426432744f57be">gmx::getProgramContext</a> ()</td></tr>
<tr class="memdesc:ga5ac09bdfd662fa49b0426432744f57be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the global <a class="el" href="classgmx_1_1IProgramContext.xhtml" title="Provides context information about the program that is calling the library. ">IProgramContext</a> instance.  <a href="#ga5ac09bdfd662fa49b0426432744f57be">More...</a><br/></td></tr>
<tr class="separator:ga5ac09bdfd662fa49b0426432744f57be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2cf34635c815cc712b6291c2c8da2555"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga2cf34635c815cc712b6291c2c8da2555">gmx::setProgramContext</a> (const IProgramContext *context)</td></tr>
<tr class="memdesc:ga2cf34635c815cc712b6291c2c8da2555"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the global <a class="el" href="classgmx_1_1IProgramContext.xhtml" title="Provides context information about the program that is calling the library. ">IProgramContext</a> instance.  <a href="#ga2cf34635c815cc712b6291c2c8da2555">More...</a><br/></td></tr>
<tr class="separator:ga2cf34635c815cc712b6291c2c8da2555"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae5b3474512462e1c7b27d8a8a096568f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gae5b3474512462e1c7b27d8a8a096568f">gmx_qsort</a> (void *base, size_t nmemb, size_t size, int(*compar)(const void *, const void *))</td></tr>
<tr class="memdesc:gae5b3474512462e1c7b27d8a8a096568f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Portable threadsafe sort routine.  <a href="#gae5b3474512462e1c7b27d8a8a096568f">More...</a><br/></td></tr>
<tr class="separator:gae5b3474512462e1c7b27d8a8a096568f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f35bd1d4a654edabc2a3aaf6f6bccea"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga2f35bd1d4a654edabc2a3aaf6f6bccea">gmx::isNullOrEmpty</a> (const char *str)</td></tr>
<tr class="memdesc:ga2f35bd1d4a654edabc2a3aaf6f6bccea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests whether a string is null or empty.  <a href="#ga2f35bd1d4a654edabc2a3aaf6f6bccea">More...</a><br/></td></tr>
<tr class="separator:ga2f35bd1d4a654edabc2a3aaf6f6bccea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8adb72aeb7775a649d7378c8e51321e6"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga8adb72aeb7775a649d7378c8e51321e6">gmx::startsWith</a> (const std::string &amp;str, const std::string &amp;prefix)</td></tr>
<tr class="memdesc:ga8adb72aeb7775a649d7378c8e51321e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests whether a string starts with another string.  <a href="#ga8adb72aeb7775a649d7378c8e51321e6">More...</a><br/></td></tr>
<tr class="separator:ga8adb72aeb7775a649d7378c8e51321e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga87824e9b26adc46671ccffa89f3985d0"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga87824e9b26adc46671ccffa89f3985d0">gmx::startsWith</a> (const char *str, const char *prefix)</td></tr>
<tr class="memdesc:ga87824e9b26adc46671ccffa89f3985d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests whether a string starts with another string.  <a href="#ga87824e9b26adc46671ccffa89f3985d0">More...</a><br/></td></tr>
<tr class="separator:ga87824e9b26adc46671ccffa89f3985d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8b22d1fd014cc09c9cf7c4c1615c0a1b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga8b22d1fd014cc09c9cf7c4c1615c0a1b">gmx::endsWith</a> (const char *str, const char *suffix)</td></tr>
<tr class="memdesc:ga8b22d1fd014cc09c9cf7c4c1615c0a1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests whether a string ends with another string.  <a href="#ga8b22d1fd014cc09c9cf7c4c1615c0a1b">More...</a><br/></td></tr>
<tr class="separator:ga8b22d1fd014cc09c9cf7c4c1615c0a1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa1e33d963e2538664428c8db95ca564e"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaa1e33d963e2538664428c8db95ca564e">gmx::endsWith</a> (const std::string &amp;str, const char *suffix)</td></tr>
<tr class="memdesc:gaa1e33d963e2538664428c8db95ca564e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests whether a string ends with another string.  <a href="#gaa1e33d963e2538664428c8db95ca564e">More...</a><br/></td></tr>
<tr class="separator:gaa1e33d963e2538664428c8db95ca564e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5d6c1daa93bf46a2c397d179e007e3e8"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga5d6c1daa93bf46a2c397d179e007e3e8">gmx::contains</a> (const std::string &amp;str, const char *substr)</td></tr>
<tr class="memdesc:ga5d6c1daa93bf46a2c397d179e007e3e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests whether a string contains another as a substring.  <a href="#ga5d6c1daa93bf46a2c397d179e007e3e8">More...</a><br/></td></tr>
<tr class="separator:ga5d6c1daa93bf46a2c397d179e007e3e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac0bef974d105fbfcc7e5362111eafed5"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gac0bef974d105fbfcc7e5362111eafed5">gmx::contains</a> (const std::string &amp;str, const std::string &amp;substr)</td></tr>
<tr class="memdesc:gac0bef974d105fbfcc7e5362111eafed5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests whether a string contains another as a substring.  <a href="#gac0bef974d105fbfcc7e5362111eafed5">More...</a><br/></td></tr>
<tr class="separator:gac0bef974d105fbfcc7e5362111eafed5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaea61e0b5bfc1f24f51a9eb5272b51603"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaea61e0b5bfc1f24f51a9eb5272b51603">gmx::countWords</a> (const char *s)</td></tr>
<tr class="memdesc:gaea61e0b5bfc1f24f51a9eb5272b51603"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns number of space-separated words in zero-terminated char ptr.  <a href="#gaea61e0b5bfc1f24f51a9eb5272b51603">More...</a><br/></td></tr>
<tr class="separator:gaea61e0b5bfc1f24f51a9eb5272b51603"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae837a92609acdf559a6b8587e9233008"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gae837a92609acdf559a6b8587e9233008">gmx::countWords</a> (const std::string &amp;str)</td></tr>
<tr class="memdesc:gae837a92609acdf559a6b8587e9233008"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of space-separated words in a string object.  <a href="#gae837a92609acdf559a6b8587e9233008">More...</a><br/></td></tr>
<tr class="separator:gae837a92609acdf559a6b8587e9233008"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga555d78d19565dec63c740318187b4d0d"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga555d78d19565dec63c740318187b4d0d">gmx::endsWith</a> (const std::string &amp;str, const std::string &amp;suffix)</td></tr>
<tr class="memdesc:ga555d78d19565dec63c740318187b4d0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests whether a string ends with another string.  <a href="#ga555d78d19565dec63c740318187b4d0d">More...</a><br/></td></tr>
<tr class="separator:ga555d78d19565dec63c740318187b4d0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaea84ff4850c382e09a3e158939b34b3e"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaea84ff4850c382e09a3e158939b34b3e">gmx::stripSuffixIfPresent</a> (const std::string &amp;str, const char *suffix)</td></tr>
<tr class="memdesc:gaea84ff4850c382e09a3e158939b34b3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes a suffix from a string.  <a href="#gaea84ff4850c382e09a3e158939b34b3e">More...</a><br/></td></tr>
<tr class="separator:gaea84ff4850c382e09a3e158939b34b3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5f31464a19604fde038dba36307ac066"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga5f31464a19604fde038dba36307ac066">gmx::stripString</a> (const std::string &amp;str)</td></tr>
<tr class="memdesc:ga5f31464a19604fde038dba36307ac066"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes leading and trailing whitespace from a string.  <a href="#ga5f31464a19604fde038dba36307ac066">More...</a><br/></td></tr>
<tr class="separator:ga5f31464a19604fde038dba36307ac066"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaed06df18ca6f9fc3f42bad9ea4d7e025"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaed06df18ca6f9fc3f42bad9ea4d7e025">gmx::formatString</a> (const char *fmt,...)</td></tr>
<tr class="memdesc:gaed06df18ca6f9fc3f42bad9ea4d7e025"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats a string (snprintf() wrapper).  <a href="#gaed06df18ca6f9fc3f42bad9ea4d7e025">More...</a><br/></td></tr>
<tr class="separator:gaed06df18ca6f9fc3f42bad9ea4d7e025"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa21c247b747e12412da58cb9f6d500ef"><td class="memTemplParams" colspan="2">template&lt;typename InputIterator , typename FormatterType &gt; </td></tr>
<tr class="memitem:gaa21c247b747e12412da58cb9f6d500ef"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaa21c247b747e12412da58cb9f6d500ef">gmx::formatAndJoin</a> (InputIterator begin, InputIterator end, const char *separator, const FormatterType &amp;formatter)</td></tr>
<tr class="memdesc:gaa21c247b747e12412da58cb9f6d500ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats all the range as strings, and then joins them with a separator in between.  <a href="#gaa21c247b747e12412da58cb9f6d500ef">More...</a><br/></td></tr>
<tr class="separator:gaa21c247b747e12412da58cb9f6d500ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8e151e320e4072b2cc254b653077bb68"><td class="memTemplParams" colspan="2">template&lt;typename ContainerType , typename FormatterType &gt; </td></tr>
<tr class="memitem:ga8e151e320e4072b2cc254b653077bb68"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga8e151e320e4072b2cc254b653077bb68">gmx::formatAndJoin</a> (const ContainerType &amp;container, const char *separator, const FormatterType &amp;formatter)</td></tr>
<tr class="memdesc:ga8e151e320e4072b2cc254b653077bb68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats all elements of the container as strings, and then joins them with a separator in between.  <a href="#ga8e151e320e4072b2cc254b653077bb68">More...</a><br/></td></tr>
<tr class="separator:ga8e151e320e4072b2cc254b653077bb68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae0ae45171d0f46a06095bf86855a8b28"><td class="memTemplParams" colspan="2">template&lt;typename InputIterator &gt; </td></tr>
<tr class="memitem:gae0ae45171d0f46a06095bf86855a8b28"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gae0ae45171d0f46a06095bf86855a8b28">gmx::joinStrings</a> (InputIterator begin, InputIterator end, const char *separator)</td></tr>
<tr class="memdesc:gae0ae45171d0f46a06095bf86855a8b28"><td class="mdescLeft">&#160;</td><td class="mdescRight">Joins strings from a range with a separator in between.  <a href="#gae0ae45171d0f46a06095bf86855a8b28">More...</a><br/></td></tr>
<tr class="separator:gae0ae45171d0f46a06095bf86855a8b28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7dec76a57e8089a89f9298fb2fbaf2ed"><td class="memTemplParams" colspan="2">template&lt;typename ContainerType &gt; </td></tr>
<tr class="memitem:ga7dec76a57e8089a89f9298fb2fbaf2ed"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga7dec76a57e8089a89f9298fb2fbaf2ed">gmx::joinStrings</a> (const ContainerType &amp;container, const char *separator)</td></tr>
<tr class="memdesc:ga7dec76a57e8089a89f9298fb2fbaf2ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Joins strings from a container with a separator in between.  <a href="#ga7dec76a57e8089a89f9298fb2fbaf2ed">More...</a><br/></td></tr>
<tr class="separator:ga7dec76a57e8089a89f9298fb2fbaf2ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga31335553bd6174a68ad8d30c48de3df5"><td class="memTemplParams" colspan="2">template&lt;size_t count&gt; </td></tr>
<tr class="memitem:ga31335553bd6174a68ad8d30c48de3df5"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga31335553bd6174a68ad8d30c48de3df5">gmx::joinStrings</a> (const char *const (&amp;array)[count], const char *separator)</td></tr>
<tr class="memdesc:ga31335553bd6174a68ad8d30c48de3df5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Joins strings from an array with a separator in between.  <a href="#ga31335553bd6174a68ad8d30c48de3df5">More...</a><br/></td></tr>
<tr class="separator:ga31335553bd6174a68ad8d30c48de3df5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3862c8128924c3311429a4dadf075ecc"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga3862c8128924c3311429a4dadf075ecc">gmx::boolToString</a> (bool value)</td></tr>
<tr class="memdesc:ga3862c8128924c3311429a4dadf075ecc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a boolean to a "true"/"false" string.  <a href="#ga3862c8128924c3311429a4dadf075ecc">More...</a><br/></td></tr>
<tr class="separator:ga3862c8128924c3311429a4dadf075ecc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga720e46b4a7625c675507adbea1df3f96"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga720e46b4a7625c675507adbea1df3f96">gmx::splitString</a> (const std::string &amp;str)</td></tr>
<tr class="memdesc:ga720e46b4a7625c675507adbea1df3f96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Splits a string to whitespace separated tokens.  <a href="#ga720e46b4a7625c675507adbea1df3f96">More...</a><br/></td></tr>
<tr class="separator:ga720e46b4a7625c675507adbea1df3f96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e4d61dba5d6fb924b8888e5597d2d0f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga1e4d61dba5d6fb924b8888e5597d2d0f">gmx::replaceAll</a> (const std::string &amp;input, const char *from, const char *to)</td></tr>
<tr class="memdesc:ga1e4d61dba5d6fb924b8888e5597d2d0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace all occurrences of a string with another string.  <a href="#ga1e4d61dba5d6fb924b8888e5597d2d0f">More...</a><br/></td></tr>
<tr class="separator:ga1e4d61dba5d6fb924b8888e5597d2d0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaba6fb72c71891e47fc68c36167bee72e"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaba6fb72c71891e47fc68c36167bee72e">gmx::replaceAll</a> (const std::string &amp;input, const std::string &amp;from, const std::string &amp;to)</td></tr>
<tr class="memdesc:gaba6fb72c71891e47fc68c36167bee72e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace all occurrences of a string with another string.  <a href="#gaba6fb72c71891e47fc68c36167bee72e">More...</a><br/></td></tr>
<tr class="separator:gaba6fb72c71891e47fc68c36167bee72e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaacdb65ab5673b946ea9764f708a4afcc"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaacdb65ab5673b946ea9764f708a4afcc">gmx::replaceAllWords</a> (const std::string &amp;input, const char *from, const char *to)</td></tr>
<tr class="memdesc:gaacdb65ab5673b946ea9764f708a4afcc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace whole words with others.  <a href="#gaacdb65ab5673b946ea9764f708a4afcc">More...</a><br/></td></tr>
<tr class="separator:gaacdb65ab5673b946ea9764f708a4afcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2df338df2e0b32b8c1fd032452409d57"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga2df338df2e0b32b8c1fd032452409d57">gmx::replaceAllWords</a> (const std::string &amp;input, const std::string &amp;from, const std::string &amp;to)</td></tr>
<tr class="memdesc:ga2df338df2e0b32b8c1fd032452409d57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace whole words with others.  <a href="#ga2df338df2e0b32b8c1fd032452409d57">More...</a><br/></td></tr>
<tr class="separator:ga2df338df2e0b32b8c1fd032452409d57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae4f67c4d34d788c50b3d2f04ea1042e4"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gae4f67c4d34d788c50b3d2f04ea1042e4">gmx_gethostname</a> (char *buf, size_t len)</td></tr>
<tr class="memdesc:gae4f67c4d34d788c50b3d2f04ea1042e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the hostname as given by gethostname(), if available.  <a href="#gae4f67c4d34d788c50b3d2f04ea1042e4">More...</a><br/></td></tr>
<tr class="separator:gae4f67c4d34d788c50b3d2f04ea1042e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5549cd3ef028cf8dec7293e703527afc"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga5549cd3ef028cf8dec7293e703527afc">gmx_getpid</a> (void)</td></tr>
<tr class="memdesc:ga5549cd3ef028cf8dec7293e703527afc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the process ID of the current process.  <a href="#ga5549cd3ef028cf8dec7293e703527afc">More...</a><br/></td></tr>
<tr class="separator:ga5549cd3ef028cf8dec7293e703527afc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f646e4c6bb4fc4da25ce7fc13012d10"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#ga2f646e4c6bb4fc4da25ce7fc13012d10">gmx_getuid</a> (void)</td></tr>
<tr class="memdesc:ga2f646e4c6bb4fc4da25ce7fc13012d10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the current user ID, or -1 if not available.  <a href="#ga2f646e4c6bb4fc4da25ce7fc13012d10">More...</a><br/></td></tr>
<tr class="separator:ga2f646e4c6bb4fc4da25ce7fc13012d10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafd93456291d0bd6b35565424554cd9e5"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gafd93456291d0bd6b35565424554cd9e5">gmx_getusername</a> (char *buf, size_t len)</td></tr>
<tr class="memdesc:gafd93456291d0bd6b35565424554cd9e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current user name, if available.  <a href="#gafd93456291d0bd6b35565424554cd9e5">More...</a><br/></td></tr>
<tr class="separator:gafd93456291d0bd6b35565424554cd9e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac5e99fdf62333b4e42a627897b00ab1e"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gac5e99fdf62333b4e42a627897b00ab1e">gmx_ctime_r</a> (const time_t *clock, char *buf, size_t len)</td></tr>
<tr class="memdesc:gac5e99fdf62333b4e42a627897b00ab1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Portable version of ctime_r.  <a href="#gac5e99fdf62333b4e42a627897b00ab1e">More...</a><br/></td></tr>
<tr class="separator:gac5e99fdf62333b4e42a627897b00ab1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf53bcf1058c4a76409e32a711eba3d59"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gaf53bcf1058c4a76409e32a711eba3d59">gmx_format_current_time</a> (char *buf, size_t len)</td></tr>
<tr class="memdesc:gaf53bcf1058c4a76409e32a711eba3d59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current time as a string.  <a href="#gaf53bcf1058c4a76409e32a711eba3d59">More...</a><br/></td></tr>
<tr class="separator:gaf53bcf1058c4a76409e32a711eba3d59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac2072a6edde816d91e0bf12ca016f3b4"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__utility.xhtml#gac2072a6edde816d91e0bf12ca016f3b4">gmx_set_nice</a> (int level)</td></tr>
<tr class="memdesc:gac2072a6edde816d91e0bf12ca016f3b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrapper for nice().  <a href="#gac2072a6edde816d91e0bf12ca016f3b4">More...</a><br/></td></tr>
<tr class="separator:gac2072a6edde816d91e0bf12ca016f3b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="dirs"></a>
Directories</h2></td></tr>
<tr class="memitem:dir_de18afb36696138c96356a62009637d5"><td class="memItemLeft" align="right" valign="top">directory&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dir_de18afb36696138c96356a62009637d5.xhtml">utility</a></td></tr>
<tr class="memdesc:dir_de18afb36696138c96356a62009637d5"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="group__module__utility.xhtml">Low-Level Utilities (utility)</a> <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"></a>
Files</h2></td></tr>
<tr class="memitem:arrayref_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="arrayref_8h.xhtml">arrayref.h</a></td></tr>
<tr class="memdesc:arrayref_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <a class="el" href="classgmx_1_1ArrayRef.xhtml" title="STL-like container for an interface to a C array (or part of a std::vector). ">gmx::ArrayRef</a> and <a class="el" href="classgmx_1_1ConstArrayRef.xhtml" title="STL-like container for non-mutable interface to a C array (or part of a std::vector). ">gmx::ConstArrayRef</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:arraysize_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="arraysize_8h.xhtml">arraysize.h</a></td></tr>
<tr class="memdesc:arraysize_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides <a class="el" href="group__module__utility.xhtml#ga0883345a58f8f63aefa249a4f127f707" title="Calculates the static number of elements in an array. ">asize()</a> macro for calculating the static size of an array. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:basedefinitions_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="basedefinitions_8h.xhtml">basedefinitions.h</a></td></tr>
<tr class="memdesc:basedefinitions_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic types and macros used throughout GROMACS. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:baseversion_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="baseversion_8h.xhtml">baseversion.h</a></td></tr>
<tr class="memdesc:baseversion_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares functions to get basic version information. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:classhelpers_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classhelpers_8h.xhtml">classhelpers.h</a></td></tr>
<tr class="memdesc:classhelpers_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares common utility classes and macros. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:cstringutil_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml">cstringutil.h</a></td></tr>
<tr class="memdesc:cstringutil_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic C string handling functions. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:current__function_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="current__function_8h.xhtml">current_function.h</a></td></tr>
<tr class="memdesc:current__function_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares GMX_CURRENT_FUNCTION for getting the current function name. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:datafilefinder_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="datafilefinder_8h.xhtml">datafilefinder.h</a></td></tr>
<tr class="memdesc:datafilefinder_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <a class="el" href="classgmx_1_1DataFileFinder.xhtml" title="Searches data files from a set of paths. ">gmx::DataFileFinder</a> and related classes. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:errorcodes_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="errorcodes_8h.xhtml">errorcodes.h</a></td></tr>
<tr class="memdesc:errorcodes_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares error codes and related functions for fatal error handling. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:exceptions_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="exceptions_8h.xhtml">exceptions.h</a></td></tr>
<tr class="memdesc:exceptions_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares common exception classes and macros for fatal error handling. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:fatalerror_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="fatalerror_8h.xhtml">fatalerror.h</a></td></tr>
<tr class="memdesc:fatalerror_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares fatal error handling and debugging routines for C code. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:flags_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="flags_8h.xhtml">flags.h</a></td></tr>
<tr class="memdesc:flags_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <a class="el" href="classgmx_1_1FlagsTemplate.xhtml" title="Template class for typesafe handling of combination of flags. ">gmx::FlagsTemplate</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:futil_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="futil_8h.xhtml">futil.h</a></td></tr>
<tr class="memdesc:futil_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Low-level wrappers for OS-specific file handling with some GROMACS customizations. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gmxassert_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gmxassert_8h.xhtml">gmxassert.h</a></td></tr>
<tr class="memdesc:gmxassert_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Defines assert macros customized for Gromacs. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:init_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="init_8h.xhtml">init.h</a></td></tr>
<tr class="memdesc:init_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares functions for initializing the GROMACS library. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:programcontext_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="programcontext_8h.xhtml">programcontext.h</a></td></tr>
<tr class="memdesc:programcontext_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <a class="el" href="classgmx_1_1IProgramContext.xhtml" title="Provides context information about the program that is calling the library. ">gmx::IProgramContext</a> and related methods. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:real_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="real_8h.xhtml">real.h</a></td></tr>
<tr class="memdesc:real_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares <code>real</code> and related constants. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:smalloc_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smalloc_8h.xhtml">smalloc.h</a></td></tr>
<tr class="memdesc:smalloc_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">C memory allocation routines for GROMACS. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:stringutil_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stringutil_8h.xhtml">stringutil.h</a></td></tr>
<tr class="memdesc:stringutil_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares common string utility and formatting routines. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:utility_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="utility_8h.xhtml">utility.h</a></td></tr>
<tr class="memdesc:utility_8h"><td class="mdescLeft">&#160;</td><td class="mdescRight">Public API convenience header for low-level utilities. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a class="anchor" id="ga5ae3261a89ac2c165cfba084c6b02ef7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define GMX_ASSERT</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">condition, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">msg&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;<a class="el" href="group__module__utility.xhtml#ga1071dd9ef4577eac808a66272ecef494">GMX_RELEASE_ASSERT</a>(condition, msg)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Macro for debug asserts. </p>
<p>If NDEBUG is defined, this macro expands to nothing. If it is not defined, it will work exactly like <a class="el" href="group__module__utility.xhtml#ga1071dd9ef4577eac808a66272ecef494" title="Macro for asserts that should also be present in the release version. ">GMX_RELEASE_ASSERT</a>.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="group__module__utility.xhtml#ga1071dd9ef4577eac808a66272ecef494" title="Macro for asserts that should also be present in the release version. ">GMX_RELEASE_ASSERT</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga5e77eb0451e9294f07e04bdc8ded0d96"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define GMX_CATCH_ALL_AND_EXIT_WITH_FATAL_ERROR</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception &amp;ex) { <a class="code" href="group__module__utility.xhtml#ga13076c5bb17dd3bf90f683af835b8b62">\</a></div>
<div class="line"><a class="code" href="group__module__utility.xhtml#ga13076c5bb17dd3bf90f683af835b8b62">        ::gmx::processExceptionAsFatalError</a>(ex); \</div>
<div class="line">    }</div>
<div class="ttc" id="group__module__utility_xhtml_ga13076c5bb17dd3bf90f683af835b8b62"><div class="ttname"><a href="group__module__utility.xhtml#ga13076c5bb17dd3bf90f683af835b8b62">gmx::processExceptionAsFatalError</a></div><div class="ttdeci">void processExceptionAsFatalError(const std::exception &amp;ex)</div><div class="ttdoc">Helper function for terminating the program on an exception. </div><div class="ttdef"><b>Definition:</b> exceptions.cpp:597</div></div>
</div><!-- fragment -->
<p>Macro for catching exceptions at C++ -&gt; C boundary. </p>
<p>This macro is intended for uniform handling of exceptions when C++ code is called from C code within Gromacs. Since most existing code is written using the assumption that fatal errors terminate the program, this macro implements this behavior for exceptions. It should only be used in cases where the error cannot be propagated upwards using return values or such.</p>
<p>Having this as a macro instead of having the same code in each place makes it easy to 1) find all such locations in the code, and 2) change the exact behavior if needed.</p>
<p>Usage: </p>
<div class="fragment"><div class="line"><span class="keywordflow">try</span></div>
<div class="line">{</div>
<div class="line">    <span class="comment">// C++ code</span></div>
<div class="line">}</div>
<div class="line"><a class="code" href="group__module__utility.xhtml#ga5e77eb0451e9294f07e04bdc8ded0d96">GMX_CATCH_ALL_AND_EXIT_WITH_FATAL_ERROR</a>;</div>
</div><!-- fragment --> 
</div>
</div>
<a class="anchor" id="gac05e1c9dcf15fe6214d655fafba28a48"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define GMX_DEFAULT_CONSTRUCTORS</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">ClassName</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Macro to declare default constructors. </p>
<p>Intended for copyable interfaces or bases classes which require to create custom destructor (e.g. protected or virtual) but need the default constructors. </p>

</div>
</div>
<a class="anchor" id="ga7c055bdcca22bf1e0feb1a93e6ca86cd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define GMX_DISALLOW_ASSIGN</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">ClassName</td><td>)</td>
          <td>&#160;&#160;&#160;ClassName &amp;operator=(const ClassName &amp;) = delete</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Macro to declare a class non-assignable. </p>
<p>For consistency, should appear last in the class declaration. </p>

</div>
</div>
<a class="anchor" id="gaa92e208d024bed7158ccb0d435d0c604"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define GMX_DISALLOW_COPY_AND_ASSIGN</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">ClassName</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line">ClassName &amp;operator=(<span class="keyword">const</span> ClassName &amp;) = <span class="keyword">delete</span>;   \</div>
<div class="line">    ClassName(<span class="keyword">const</span> ClassName &amp;)            = <span class="keyword">delete</span></div>
</div><!-- fragment -->
<p>Macro to declare a class non-copyable and non-assignable. </p>
<p>For consistency, should appear last in the class declaration. </p>

</div>
</div>
<a class="anchor" id="gaea5f9b70aab0c21b621fe421fb53a9b1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define GMX_IGNORE_RETURN_VALUE</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">call</td><td>)</td>
          <td>&#160;&#160;&#160;::gmx::internal::ignoreValueHelper(call)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Macro to explicitly ignore a return value of a call. </p>
<p>Mainly meant for ignoring values of functions declared with <code>__attribute__((warn_unused_return))</code>. Makes it easy to find those places if they need to be fixed, and document the intent in cases where the return value really can be ignored. It also makes it easy to adapt the approach so that they don't produce warnings. A cast to void doesn't remove the warning in gcc, while adding a dummy variable can cause warnings about an unused variable. </p>

</div>
</div>
<a class="anchor" id="gaaf82b25c57ecd30a306f027b0696ca94"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define gmx_qsort_threadsafe&#160;&#160;&#160;qsort</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Threadsafe qsort(). </p>
<p>Expands to <a class="el" href="group__module__utility.xhtml#gae5b3474512462e1c7b27d8a8a096568f" title="Portable threadsafe sort routine. ">gmx_qsort()</a> if Gromacs is built with threading, or system qsort() otherwise. </p>

</div>
</div>
<a class="anchor" id="ga1071dd9ef4577eac808a66272ecef494"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define GMX_RELEASE_ASSERT</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">condition, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">msg&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line">((void) ((condition) ? (void)0 : \</div>
<div class="line">             ::gmx::internal::assertHandler(#condition, msg, \</div>
<div class="line">                                            <a class="code" href="group__module__utility.xhtml#gae874dfbf621e3e04133619aec5d466e5">GMX_CURRENT_FUNCTION</a>, __FILE__, __LINE__)))</div>
<div class="ttc" id="group__module__utility_xhtml_gae874dfbf621e3e04133619aec5d466e5"><div class="ttname"><a href="group__module__utility.xhtml#gae874dfbf621e3e04133619aec5d466e5">GMX_CURRENT_FUNCTION</a></div><div class="ttdeci">#define GMX_CURRENT_FUNCTION</div><div class="ttdoc">Expands to a string that provides the name of the current function. </div></div>
</div><!-- fragment -->
<p>Macro for asserts that should also be present in the release version. </p>
<p>Regardless of NDEBUG, this macro checks <code>condition</code>, and if it is not true, it calls the assert handler.</p>
<p>Although this macro currently calls abort() if the assertion fails, it should only be used in a context where it is safe to throw an exception to keep the option open. </p>

</div>
</div>
<a class="anchor" id="gaed2c1af17dbda0e02e8cfd2c3d7e7096"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define GMX_THROW</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">e</td><td>)</td>
          <td>&#160;&#160;&#160;throw (e) &lt;&lt; <a class="el" href="group__module__utility.xhtml#gab5d3ee620090581599c5762270314897">gmx::ExceptionInfoLocation</a>(gmx::ThrowLocation(<a class="el" href="group__module__utility.xhtml#gae874dfbf621e3e04133619aec5d466e5">GMX_CURRENT_FUNCTION</a>, __FILE__, __LINE__))</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Macro for throwing an exception. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Exception object to throw.</td></tr>
  </table>
  </dd>
</dl>
<p>Using this macro instead of <code>throw</code> directly makes it possible to uniformly attach information into the exception objects. <code>e</code> should evaluate to an instance of an object derived from GromacsException.</p>
<p>Basic usage: </p>
<div class="fragment"><div class="line"><span class="keywordflow">if</span> (value &lt; 0)</div>
<div class="line">{</div>
<div class="line">    <a class="code" href="group__module__utility.xhtml#gaed2c1af17dbda0e02e8cfd2c3d7e7096">GMX_THROW</a>(InconsistentUserInput(<span class="stringliteral">&quot;Negative values not allowed for value&quot;</span>));</div>
<div class="line">}</div>
</div><!-- fragment --> 
</div>
</div>
<a class="anchor" id="ga02415d7db680dcec8185c3d4af0d09fc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define GMX_THROW_WITH_ERRNO</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">e, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">syscall, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">err&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keywordflow">do</span> { \</div>
<div class="line">        int stored_errno_ = (err); <a class="code" href="group__module__utility.xhtml#gaed2c1af17dbda0e02e8cfd2c3d7e7096">\</a></div>
<div class="line"><a class="code" href="group__module__utility.xhtml#gaed2c1af17dbda0e02e8cfd2c3d7e7096">        GMX_THROW</a>((e) &lt;&lt; <a class="code" href="classgmx_1_1ExceptionInfo.xhtml">gmx::ExceptionInfoErrno</a>(stored_errno_) \</div>
<div class="line">                  &lt;&lt; <a class="code" href="classgmx_1_1ExceptionInfo.xhtml">gmx::ExceptionInfoApiFunction</a>(syscall)); \</div>
<div class="line">    } <span class="keywordflow">while</span> (0)</div>
<div class="ttc" id="group__module__utility_xhtml_gaed2c1af17dbda0e02e8cfd2c3d7e7096"><div class="ttname"><a href="group__module__utility.xhtml#gaed2c1af17dbda0e02e8cfd2c3d7e7096">GMX_THROW</a></div><div class="ttdeci">#define GMX_THROW(e)</div><div class="ttdoc">Macro for throwing an exception. </div><div class="ttdef"><b>Definition:</b> exceptions.h:544</div></div>
<div class="ttc" id="classgmx_1_1ExceptionInfo_xhtml"><div class="ttname"><a href="classgmx_1_1ExceptionInfo.xhtml">gmx::ExceptionInfo</a></div><div class="ttdoc">Stores additional context information for exceptions. </div><div class="ttdef"><b>Definition:</b> exceptions.h:119</div></div>
</div><!-- fragment -->
<p>Macro for throwing an exception based on errno. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Exception object to throw. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">syscall</td><td>Name of the syscall that returned the error. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">err</td><td>errno value returned by the syscall.</td></tr>
  </table>
  </dd>
</dl>
<p>This macro provides a convenience interface for throwing an exception to report an error based on a errno value. In addition to adding the necessary information to the exception object, the macro also ensures that <code>errno</code> is evaluated before, e.g., the constructor of <code>e</code> may call other functions that could overwrite the errno value. <code>e</code> should evaluate to an instance of an object derived from GromacsException.</p>
<p>Typical usage (note that gmx::File wraps this particular case): </p>
<div class="fragment"><div class="line">FILE *fp = fopen(<span class="stringliteral">&quot;filename.txt&quot;</span>, <span class="stringliteral">&quot;r&quot;</span>);</div>
<div class="line"><span class="keywordflow">if</span> (fp == NULL)</div>
<div class="line">{</div>
<div class="line">    <a class="code" href="group__module__utility.xhtml#gaed2c1af17dbda0e02e8cfd2c3d7e7096">GMX_THROW</a>(FileIOError(<span class="stringliteral">&quot;Could not open file&quot;</span>), <span class="stringliteral">&quot;fopen&quot;</span>, errno);</div>
<div class="line">}</div>
</div><!-- fragment --> 
</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a class="anchor" id="gac92ff9c7f6f5ed5200b3d8d92a4d53e3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__module__utility.xhtml#gac92ff9c7f6f5ed5200b3d8d92a4d53e3">gmx::ErrorCode</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Possible error return codes from Gromacs functions. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="ggac92ff9c7f6f5ed5200b3d8d92a4d53e3acacaa10fa7070b0494b30fdc97a7a356"></a>eeOK</em>&nbsp;</td><td class="fielddoc">
<p>Zero for successful return. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a35a82c5a0f04b6255d3f28d6144dd24e"></a>eeOutOfMemory</em>&nbsp;</td><td class="fielddoc">
<p>Not enough memory to complete operation. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a444e88ccfbfc246dc671919d0cf127c1"></a>eeFileNotFound</em>&nbsp;</td><td class="fielddoc">
<p>Provided file could not be opened. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggac92ff9c7f6f5ed5200b3d8d92a4d53e3ad0a05315bf704c8457baef6eac42dc4e"></a>eeFileIO</em>&nbsp;</td><td class="fielddoc">
<p>System I/O error. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a4c2569b29b84eda15a5cf90e28395b21"></a>eeInvalidInput</em>&nbsp;</td><td class="fielddoc">
<p>Invalid user input (could not be understood). </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a7eb29dbd6ce224f815ba82ddcc3b6f62"></a>eeInconsistentInput</em>&nbsp;</td><td class="fielddoc">
<p>Invalid user input (conflicting or unsupported settings). </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggac92ff9c7f6f5ed5200b3d8d92a4d53e3ac0b348673979b42ebc8df4562b8ebfa4"></a>eeInstability</em>&nbsp;</td><td class="fielddoc">
<p>Simulation instability detected. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggac92ff9c7f6f5ed5200b3d8d92a4d53e3ae958977bd58e97bcc4fd367324c8b21b"></a>eeNotImplemented</em>&nbsp;</td><td class="fielddoc">
<p>Requested feature not yet implemented. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a71840645faa70349b0e4bede4da4b6d1"></a>eeInvalidValue</em>&nbsp;</td><td class="fielddoc">
<p>Input value violates API specification. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a40bd4aef44a2ab731b61fb9c9184a3bd"></a>eeInvalidCall</em>&nbsp;</td><td class="fielddoc">
<p>Invalid routine called or wrong calling sequence detected. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a90b9f0f24cf026b56ebf63d359c5f422"></a>eeInternalError</em>&nbsp;</td><td class="fielddoc">
<p>Internal consistency check failed. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a414167b1bc702c9e8bb7f91078360845"></a>eeAPIError</em>&nbsp;</td><td class="fielddoc">
<p>API specification was violated. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a068d9a3d2c79173f39457344cd60380f"></a>eeRange</em>&nbsp;</td><td class="fielddoc">
<p>Range consistency check failed. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a395dad7e12b144dd6805157e6d92e40f"></a>eeCommunication</em>&nbsp;</td><td class="fielddoc">
<p>Communication consistency check failed. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a46578ca340e1c440d5f519569e6884fb"></a>eeUnknownError</em>&nbsp;</td><td class="fielddoc">
<p>Unknown error detected. </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga3862c8128924c3311429a4dadf075ecc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static const char* gmx::boolToString </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Converts a boolean to a "true"/"false" string. </p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="ga5d6c1daa93bf46a2c397d179e007e3e8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool gmx::contains </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>substr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tests whether a string contains another as a substring. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to process. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">substr</td><td>Substring to find. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if <code>str</code> contains <code>substr</code>.</dd></dl>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="gac0bef974d105fbfcc7e5362111eafed5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool gmx::contains </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>substr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tests whether a string contains another as a substring. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to process. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">substr</td><td>Substring to find. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if <code>str</code> contains <code>substr</code>.</dd></dl>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="gaea61e0b5bfc1f24f51a9eb5272b51603"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t gmx::countWords </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns number of space-separated words in zero-terminated char ptr. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>Character pointer to zero-terminated, which will not be changed.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>number of words in string.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This routine is mainly meant to support legacy code in GROMACS. For new source you should try hard to use C++ string objects instead. </dd></dl>

</div>
</div>
<a class="anchor" id="gae837a92609acdf559a6b8587e9233008"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t gmx::countWords </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of space-separated words in a string object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>Reference to string object, which will not be changed.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>number of words in string. </dd></dl>

</div>
</div>
<a class="anchor" id="ga8b22d1fd014cc09c9cf7c4c1615c0a1b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool gmx::endsWith </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>suffix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tests whether a string ends with another string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to process. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">suffix</td><td>Suffix to find. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if <code>str</code> ends with <code>suffix</code>.</dd></dl>
<p>Returns true if <code>suffix</code> is NULL or empty. Does not throw. </p>

</div>
</div>
<a class="anchor" id="gaa1e33d963e2538664428c8db95ca564e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool gmx::endsWith </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>suffix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tests whether a string ends with another string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to process. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">suffix</td><td>Suffix to find. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if <code>str</code> ends with <code>suffix</code>.</dd></dl>
<p>Returns true if <code>suffix</code> is NULL or empty. Does not throw. </p>

</div>
</div>
<a class="anchor" id="ga555d78d19565dec63c740318187b4d0d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool gmx::endsWith </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>suffix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tests whether a string ends with another string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to process. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">suffix</td><td>Suffix to find. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if <code>str</code> ends with <code>suffix</code>.</dd></dl>
<p>Returns true if <code>suffix</code> is NULL or empty. Does not throw. </p>

</div>
</div>
<a class="anchor" id="gaa0a90b2770cb4b69e16229daa271a1af"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::finalize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Deinitializes the GROMACS library. </p>
<p>Decrements the initialization counter, and calls MPI_Finalize() if GROMACS is compiled with MPI support and the counter has reached zero. In that case, it is not possible to reinitialize GROMACS after calling this function. Instead, call <a class="el" href="group__module__utility.xhtml#gae00d174a8ddd5325460d74dc663711c0" title="Initializes the GROMACS library. ">gmx::init()</a> at a higher level, and note that calls to init can be nested safely. </p>

</div>
</div>
<a class="anchor" id="gaa21c247b747e12412da58cb9f6d500ef"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename InputIterator , typename FormatterType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::formatAndJoin </td>
          <td>(</td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>separator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const FormatterType &amp;&#160;</td>
          <td class="paramname"><em>formatter</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formats all the range as strings, and then joins them with a separator in between. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">begin</td><td>Iterator the beginning of the range to join. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end</td><td>Iterator the end of the range to join. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">separator</td><td>String to put in between the joined strings. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">formatter</td><td>Function object to format the objects in <code>container</code> as strings </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>All objects in the range from <code>begin</code> to <code>end</code> formatted as strings and concatenated with <code>separator</code> between each pair. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga8e151e320e4072b2cc254b653077bb68"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerType , typename FormatterType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::formatAndJoin </td>
          <td>(</td>
          <td class="paramtype">const ContainerType &amp;&#160;</td>
          <td class="paramname"><em>container</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>separator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const FormatterType &amp;&#160;</td>
          <td class="paramname"><em>formatter</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formats all elements of the container as strings, and then joins them with a separator in between. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">container</td><td>Objects to join. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">separator</td><td>String to put in between the joined strings. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">formatter</td><td>Function object to format the objects in <code>container</code> as strings </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>All objects from <code>container</code> formatted as strings and concatenated with <code>separator</code> between each pair. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gac5e6f6ec944fb2484d6f273c9a0ff495"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::formatExceptionMessageToFile </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::exception &amp;&#160;</td>
          <td class="paramname"><em>ex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formats an error message for reporting an exception. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">fp</td><td>File to write the message to. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ex</td><td>Exception to format. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gac7703ad35b606758d2d12edc0a3d5217"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::formatExceptionMessageToString </td>
          <td>(</td>
          <td class="paramtype">const std::exception &amp;&#160;</td>
          <td class="paramname"><em>ex</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formats an error message for reporting an exception. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ex</td><td>Exception to format. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Formatted string containing details of <code>ex</code>. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaacf6bfb81220e44ed1bf73f0a44d9926"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::formatExceptionMessageToWriter </td>
          <td>(</td>
          <td class="paramtype">TextWriter *&#160;</td>
          <td class="paramname"><em>writer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::exception &amp;&#160;</td>
          <td class="paramname"><em>ex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formats an error message for reporting an exception. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">writer</td><td>Writer to use for writing the message. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ex</td><td>Exception to format. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaed06df18ca6f9fc3f42bad9ea4d7e025"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::formatString </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formats a string (snprintf() wrapper). </p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>This function works like sprintf(), except that it returns an std::string instead of requiring a preallocated buffer. Arbitrary length output is supported. </p>

</div>
</div>
<a class="anchor" id="gaac30db5a87fa0f55776bc8a3dcef0d67"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * gmx::getErrorCodeString </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>errorcode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a short string description of an error code. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">errorcode</td><td>Error code to retrieve the string for. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A constant string corresponding to <code>errorcode</code>.</dd></dl>
<p>If <code>errorcode</code> is not one of those defined for <a class="el" href="group__module__utility.xhtml#gac92ff9c7f6f5ed5200b3d8d92a4d53e3" title="Possible error return codes from Gromacs functions. ">gmx::ErrorCode</a>, the string corresponding to <a class="el" href="group__module__utility.xhtml#ggac92ff9c7f6f5ed5200b3d8d92a4d53e3a46578ca340e1c440d5f519569e6884fb" title="Unknown error detected. ">eeUnknownError</a> is returned.</p>
<p>This function does not throw. </p>

</div>
</div>
<a class="anchor" id="ga312499e4abb409ad85844d83e52d795b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const DataFileFinder &amp; gmx::getLibraryFileFinder </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets a finder for locating data files from share/top/. </p>
<dl class="section return"><dt>Returns</dt><dd>Finder set with <a class="el" href="namespacegmx.xhtml#a106cb113fd73e054dbb8dfa2118d7153" title="Sets a finder for location data files from share/top/. ">setLibraryFileFinder()</a>, or a default finder.</dd></dl>
<p>If <a class="el" href="namespacegmx.xhtml#a106cb113fd73e054dbb8dfa2118d7153" title="Sets a finder for location data files from share/top/. ">setLibraryFileFinder()</a> has not been called (or a <code>NULL</code> finder has been set), a default finder is returned. The default finder searches data files from the directory identified by the global program context; it does not respect GMXLIB environment variable. Calling <a class="el" href="group__module__commandline.xhtml#ga8c376f5f94bd1a63a3a97e288c4be50d" title="Initializes the GROMACS library for command-line use. ">initForCommandLine()</a> sets a finder that respects GMXLIB.</p>
<p>Does not throw.</p>
<p>See <a class="el" href="namespacegmx.xhtml#a106cb113fd73e054dbb8dfa2118d7153" title="Sets a finder for location data files from share/top/. ">setLibraryFileFinder()</a> for thread safety. </p>

</div>
</div>
<a class="anchor" id="ga5ac09bdfd662fa49b0426432744f57be"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const IProgramContext &amp; gmx::getProgramContext </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the global <a class="el" href="classgmx_1_1IProgramContext.xhtml" title="Provides context information about the program that is calling the library. ">IProgramContext</a> instance. </p>
<dl class="section return"><dt>Returns</dt><dd>The context set with <a class="el" href="group__module__utility.xhtml#ga2cf34635c815cc712b6291c2c8da2555" title="Sets the global IProgramContext instance. ">setProgramContext()</a>.</dd></dl>
<p>If nothing has been set with <a class="el" href="group__module__utility.xhtml#ga2cf34635c815cc712b6291c2c8da2555" title="Sets the global IProgramContext instance. ">setProgramContext()</a>, returns a default implementation that returns <code>"GROMACS"</code> for the program and display names, and empty strings for other values. The default implementation never throws.</p>
<p>Does not throw.</p>
<p>See <a class="el" href="group__module__utility.xhtml#ga2cf34635c815cc712b6291c2c8da2555" title="Sets the global IProgramContext instance. ">setProgramContext()</a> for thread safety notes. You should not call this method in global deinitialization methods (e.g., destructors of global variables), since it is very difficult to clean up the state correctly in the presence of such calls. For example, <a class="el" href="group__module__commandline.xhtml#ga8c376f5f94bd1a63a3a97e288c4be50d" title="Initializes the GROMACS library for command-line use. ">initForCommandLine()</a> assumes that such calls do not exist to be able to free the context before exiting.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1IProgramContext.xhtml" title="Provides context information about the program that is calling the library. ">IProgramContext</a> </dd></dl>

</div>
</div>
<a class="anchor" id="gac5e99fdf62333b4e42a627897b00ab1e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* gmx_ctime_r </td>
          <td>(</td>
          <td class="paramtype">const time_t *&#160;</td>
          <td class="paramname"><em>clock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Portable version of ctime_r. </p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="gaf53bcf1058c4a76409e32a711eba3d59"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_format_current_time </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the current time as a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">buf</td><td>Buffer to receive the string. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">len</td><td>Length of buffer <code>buf</code> (26 characters should be sufficient).</td></tr>
  </table>
  </dd>
</dl>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="gae4f67c4d34d788c50b3d2f04ea1042e4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_gethostname </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the hostname as given by gethostname(), if available. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">buf</td><td>Buffer to receive the hostname. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">len</td><td>Length of buffer <code>buf</code> (must be &gt;= 8). </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 on success, -1 on error.</dd></dl>
<p>If the value is not available, "unknown" is returned. <code>name</code> should have at least size <code>len</code>.</p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="ga5549cd3ef028cf8dec7293e703527afc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_getpid </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the process ID of the current process. </p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="ga2f646e4c6bb4fc4da25ce7fc13012d10"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_getuid </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the current user ID, or -1 if not available. </p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="gafd93456291d0bd6b35565424554cd9e5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_getusername </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the current user name, if available. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">buf</td><td>Buffer to receive the username. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">len</td><td>Length of buffer <code>buf</code> (must be &gt;= 8). </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 on success, -1 on error.</dd></dl>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="ga62ad1902885ca86ef8b05bc29c0f0a90"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_is_double_precision </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Defined if <code>libgromacs</code> has been compiled in double precision. </p>
<p>Allows detecting the compiled precision of the library through checking the presence of the symbol, e.g., from autoconf or other types of build systems. </p>

</div>
</div>
<a class="anchor" id="ga41bdbf2771535287b9b0cd043464155f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_is_single_precision </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Defined if <code>libgromacs</code> has been compiled in single/mixed precision. </p>
<p>Allows detecting the compiled precision of the library through checking the presence of the symbol, e.g., from autoconf or other types of build systems. </p>

</div>
</div>
<a class="anchor" id="gafd33d9597e51bde4d96e7608ebf40d58"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> gmx_omp_check_thread_affinity </td>
          <td>(</td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>message</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check for externally set thread affinity to avoid conflicts with GROMACS internal setting. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">message</td><td>Receives the message to be shown to the user. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><code>true</code> if we can set thread affinity ourselves.</dd></dl>
<p>The KMP_AFFINITY environment variable is used by Intel, GOMP_CPU_AFFINITY by the GNU compilers (Intel also honors it well). If any of the variables is set, we should honor it and disable the internal pinning.</p>
<p>If this function returns <code>false</code>, the caller is responsible to disable the pinning, show the message from <code>*message</code> to the user, and free the memory allocated for <code>*message</code>. If the return value is <code>true</code>, <code>*message</code> is NULL. </p>

</div>
</div>
<a class="anchor" id="ga29a756d1573d36b702845f21700bd12f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_omp_get_max_threads </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns an integer equal to or greater than the number of threads that would be available if a parallel region without num_threads were defined at that point in the code. </p>
<p>Acts as a wrapper for omp_get_max_threads(). </p>

</div>
</div>
<a class="anchor" id="ga1397b58c16c60a0349d9e4aa1df2349e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_omp_get_num_procs </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of processors available when the function is called. </p>
<p>Acts as a wrapper around omp_get_num_procs(). </p>

</div>
</div>
<a class="anchor" id="ga04383c3cc48de75f41acbcd8de33b78f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_omp_get_thread_num </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the thread number of the thread executing within its thread team. </p>
<p>Acts as a wrapper for omp_get_thread_num(). </p>

</div>
</div>
<a class="anchor" id="ga7a75b2bb561a45da2abede8709ae5339"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_omp_set_num_threads </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_threads</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the number of threads in subsequent parallel regions, unless overridden by a num_threads clause. </p>
<p>Acts as a wrapper for omp_set_num_threads(). </p>

</div>
</div>
<a class="anchor" id="gae5b3474512462e1c7b27d8a8a096568f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx_qsort </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>base</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>nmemb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(const void *, const void *)&#160;</td>
          <td class="paramname"><em>compar</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Portable threadsafe sort routine. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">base</td><td>Pointer to first element in list to sort </td></tr>
    <tr><td class="paramname">nmemb</td><td>Number of elements in list </td></tr>
    <tr><td class="paramname">size</td><td>Size in bytes of each element </td></tr>
    <tr><td class="paramname">compar</td><td>Comparison function that takes two pointers to elements being compared as arguments. The function should return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gac2072a6edde816d91e0bf12ca016f3b4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_set_nice </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>level</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wrapper for nice(). </p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="ga26891cd06bdb1b0a8bb759957628be9f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* gmx_version </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Version string, containing the version, date, and abbreviated hash. </p>
<p>This can be a plain version if git version info was disabled during the build. The returned string used to start with a literal word <code>VERSION</code> before GROMACS 2016, but no longer does. </p>

</div>
</div>
<a class="anchor" id="ga61d315f10e21d489a53b372e45fbcd5a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* gmx_version_git_central_base_hash </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Full git hash of the latest commit in a central GROMACS repository. </p>
<p>If git version info was disabled during the build, returns an empty string. Also, if the latest commit was from a central repository, the return value is an empty string. </p>

</div>
</div>
<a class="anchor" id="ga9fcf89a9f3c65ca42810bbbdff25893b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* gmx_version_git_full_hash </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Full git hash of the latest commit. </p>
<p>If git version info was disabled during the build, returns an empty string. </p>

</div>
</div>
<a class="anchor" id="gae00d174a8ddd5325460d74dc663711c0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::init </td>
          <td>(</td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char ***&#160;</td>
          <td class="paramname"><em>argv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes the GROMACS library. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">argc</td><td>argc value passed to <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">argv</td><td>argv array passed to <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>.</td></tr>
  </table>
  </dd>
</dl>
<p><code>argc</code> and <code>argv</code> are the command line arguments passed to <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>. They are allowed to be NULL if GROMACS is not compiled with MPI, MPI_Init() has already been called, or if the MPI library GROMACS is compiled against allows it.</p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="ga2f35bd1d4a654edabc2a3aaf6f6bccea"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool gmx::isNullOrEmpty </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tests whether a string is null or empty. </p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="gae0ae45171d0f46a06095bf86855a8b28"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::joinStrings </td>
          <td>(</td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>separator</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Joins strings from a range with a separator in between. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">begin</td><td>Iterator the beginning of the range to join. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end</td><td>Iterator the end of the range to join. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">separator</td><td>String to put in between the joined strings. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>All strings from (<code>begin</code>, <code>end</code>) concatenated with <code>separator</code> between each pair. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga7dec76a57e8089a89f9298fb2fbaf2ed"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::joinStrings </td>
          <td>(</td>
          <td class="paramtype">const ContainerType &amp;&#160;</td>
          <td class="paramname"><em>container</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>separator</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Joins strings from a container with a separator in between. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">container</td><td>Strings to join. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">separator</td><td>String to put in between the joined strings. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>All strings from <code>container</code> concatenated with <code>separator</code> between each pair. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga31335553bd6174a68ad8d30c48de3df5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t count&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::joinStrings </td>
          <td>(</td>
          <td class="paramtype">const char *const (&amp;)&#160;</td>
          <td class="paramname"><em>array</em>[count], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>separator</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Joins strings from an array with a separator in between. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">array</td><td>Array of strings to join. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">separator</td><td>String to put in between the joined strings. </td></tr>
  </table>
  </dd>
</dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">count</td><td>Deduced number of elements in <code>array</code>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>All strings from <code>aray</code> concatenated with <code>separator</code> between each pair. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga1b9a1e3988a89d1b90944c6ff6c3e794"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Exception , class Tag , class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::enable_if&lt;std::is_base_of&lt;GromacsException, Exception&gt;::value, const Exception &amp;&gt;::type gmx::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">const Exception &amp;&#160;</td>
          <td class="paramname"><em>ex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ExceptionInfo&lt; Tag, T &gt; &amp;&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Associates extra information with an exception. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Exception</td><td>Exception type (must be derived from <a class="el" href="classgmx_1_1GromacsException.xhtml" title="Base class for all exception objects in Gromacs. ">GromacsException</a>). </td></tr>
    <tr><td class="paramname">Tag</td><td><a class="el" href="classgmx_1_1ExceptionInfo.xhtml" title="Stores additional context information for exceptions. ">ExceptionInfo</a> tag. </td></tr>
    <tr><td class="paramname">T</td><td><a class="el" href="classgmx_1_1ExceptionInfo.xhtml" title="Stores additional context information for exceptions. ">ExceptionInfo</a> value type. </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">ex</td><td>Exception to associate the information to. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">item</td><td>Information to associate. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gac6287dc8a550a2d54429e44994e00e58"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::printFatalErrorMessage </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::exception &amp;&#160;</td>
          <td class="paramname"><em>ex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formats a standard fatal error message for reporting an exception. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fp</td><td>File to format the message to. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ex</td><td>Exception to format.</td></tr>
  </table>
  </dd>
</dl>
<p>Does not throw. If memory allocation fails or some other error occurs while formatting the error, tries to print a reasonable alternative message.</p>
<p>Normal usage in Gromacs command-line programs is like this: </p>
<div class="fragment"><div class="line"><span class="keywordtype">int</span> <a class="code" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])</div>
<div class="line">{</div>
<div class="line">    <a class="code" href="group__module__utility.xhtml#gae00d174a8ddd5325460d74dc663711c0">gmx::init</a>(&amp;argc, &amp;argv);</div>
<div class="line">    <span class="keywordflow">try</span></div>
<div class="line">    {</div>
<div class="line">        <span class="comment">// The actual code for the program</span></div>
<div class="line">        <span class="keywordflow">return</span> 0;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception &amp;ex)</div>
<div class="line">    {</div>
<div class="line">        <a class="code" href="group__module__utility.xhtml#gac6287dc8a550a2d54429e44994e00e58">gmx::printFatalErrorMessage</a>(stderr, ex);</div>
<div class="line">        <span class="keywordflow">return</span> <a class="code" href="group__module__utility.xhtml#ga5a45f49e157fa8e1059d24243283e248">gmx::processExceptionAtExit</a>(ex);</div>
<div class="line">    }</div>
<div class="line">}</div>
</div><!-- fragment --> 
</div>
</div>
<a class="anchor" id="ga13076c5bb17dd3bf90f683af835b8b62"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::processExceptionAsFatalError </td>
          <td>(</td>
          <td class="paramtype">const std::exception &amp;&#160;</td>
          <td class="paramname"><em>ex</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function for terminating the program on an exception. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ex</td><td>Exception that is the cause for terminating the program.</td></tr>
  </table>
  </dd>
</dl>
<p>Does not throw, and does not return. </p>

</div>
</div>
<a class="anchor" id="ga5a45f49e157fa8e1059d24243283e248"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx::processExceptionAtExit </td>
          <td>(</td>
          <td class="paramtype">const std::exception &amp;&#160;</td>
          <td class="paramname"><em>ex</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Handles an exception that is causing the program to terminate. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ex</td><td>Exception that is the cause for terminating the program. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return code to return from <a class="el" href="template_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97" title="The main function for the analysis template. ">main()</a>.</dd></dl>
<p>This method should be called as the last thing before terminating the program because of an exception. It exists to terminate the program as gracefully as possible in the case of MPI processing (but the current implementation always calls MPI_Abort()).</p>
<p>See <a class="el" href="group__module__utility.xhtml#gac6287dc8a550a2d54429e44994e00e58" title="Formats a standard fatal error message for reporting an exception. ">printFatalErrorMessage()</a> for example usage.</p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="ga1e4d61dba5d6fb924b8888e5597d2d0f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::replaceAll </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>to</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replace all occurrences of a string with another string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input string. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">from</td><td>String to find. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">to</td><td>String to use to replace <code>from</code>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Copy of <code>input</code> with all occurrences of <code>from</code> replaced with <code>to</code>. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>The replacement is greedy and not recursive: starting from the beginning of <code>input</code>, each match of <code>from</code> is replaced with <code>to</code>, and the search for the next match begins after the end of the previous match.</p>
<p>Compexity is O(N), where N is length of output.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="group__module__utility.xhtml#gaacdb65ab5673b946ea9764f708a4afcc" title="Replace whole words with others. ">replaceAllWords()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="gaba6fb72c71891e47fc68c36167bee72e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::replaceAll </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>to</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replace all occurrences of a string with another string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input string. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">from</td><td>String to find. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">to</td><td>String to use to replace <code>from</code>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Copy of <code>input</code> with all occurrences of <code>from</code> replaced with <code>to</code>. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>The replacement is greedy and not recursive: starting from the beginning of <code>input</code>, each match of <code>from</code> is replaced with <code>to</code>, and the search for the next match begins after the end of the previous match.</p>
<p>Compexity is O(N), where N is length of output.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="group__module__utility.xhtml#gaacdb65ab5673b946ea9764f708a4afcc" title="Replace whole words with others. ">replaceAllWords()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="gaacdb65ab5673b946ea9764f708a4afcc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::replaceAllWords </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>to</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replace whole words with others. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input string. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">from</td><td>String to find. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">to</td><td>String to use to replace <code>from</code>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Copy of <code>input</code> with all <code>from</code> words replaced with <code>to</code>. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>Works as <a class="el" href="group__module__utility.xhtml#ga1e4d61dba5d6fb924b8888e5597d2d0f" title="Replace all occurrences of a string with another string. ">replaceAll()</a>, but a match is only considered if it is delimited by non-alphanumeric characters.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="group__module__utility.xhtml#ga1e4d61dba5d6fb924b8888e5597d2d0f" title="Replace all occurrences of a string with another string. ">replaceAll()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga2df338df2e0b32b8c1fd032452409d57"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::replaceAllWords </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>to</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replace whole words with others. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input string. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">from</td><td>String to find. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">to</td><td>String to use to replace <code>from</code>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Copy of <code>input</code> with all <code>from</code> words replaced with <code>to</code>. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>Works as <a class="el" href="group__module__utility.xhtml#ga1e4d61dba5d6fb924b8888e5597d2d0f" title="Replace all occurrences of a string with another string. ">replaceAll()</a>, but a match is only considered if it is delimited by non-alphanumeric characters.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="group__module__utility.xhtml#ga1e4d61dba5d6fb924b8888e5597d2d0f" title="Replace all occurrences of a string with another string. ">replaceAll()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga2cf34635c815cc712b6291c2c8da2555"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::setProgramContext </td>
          <td>(</td>
          <td class="paramtype">const IProgramContext *&#160;</td>
          <td class="paramname"><em>context</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the global <a class="el" href="classgmx_1_1IProgramContext.xhtml" title="Provides context information about the program that is calling the library. ">IProgramContext</a> instance. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">context</td><td>Program context to set (can be NULL to restore the default context).</td></tr>
  </table>
  </dd>
</dl>
<p>The library does not take ownership of <code>context</code>. The provided object must remain valid until the global instance is changed by another call to <a class="el" href="group__module__utility.xhtml#ga2cf34635c815cc712b6291c2c8da2555" title="Sets the global IProgramContext instance. ">setProgramContext()</a>.</p>
<p>This method is not thread-safe. It must be the first call to the library after <a class="el" href="group__module__utility.xhtml#gae00d174a8ddd5325460d74dc663711c0" title="Initializes the GROMACS library. ">gmx::init()</a>, and multi-threaded access is only supported after the call completes. If GROMACS is getting called from multiple threads, or uses multiple threads simultaneously, changing the program context is not supported once it is set. If the context is cleared at the end of the program, the caller must ensure that all other threads have been terminated at this point. These constraints simplify the implementation significantly.</p>
<p>Does not throw.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1IProgramContext.xhtml" title="Provides context information about the program that is calling the library. ">IProgramContext</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga720e46b4a7625c675507adbea1df3f96"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; gmx::splitString </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Splits a string to whitespace separated tokens. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to process. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><code>str</code> split into tokens at each whitespace sequence. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>This function works like <code>split</code> in Python, i.e., leading and trailing whitespace is ignored, and consecutive whitespaces are treated as a single separator. </p>

</div>
</div>
<a class="anchor" id="ga8adb72aeb7775a649d7378c8e51321e6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool gmx::startsWith </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>prefix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tests whether a string starts with another string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to process. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">prefix</td><td>Prefix to find. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if <code>str</code> starts with <code>prefix</code>.</dd></dl>
<p>Returns true if <code>prefix</code> is empty. Does not throw. </p>

</div>
</div>
<a class="anchor" id="ga87824e9b26adc46671ccffa89f3985d0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool gmx::startsWith </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>prefix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tests whether a string starts with another string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to process. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">prefix</td><td>Prefix to find. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if <code>str</code> starts with <code>prefix</code>.</dd></dl>
<p>Returns true if <code>prefix</code> is empty. Does not throw. </p>

</div>
</div>
<a class="anchor" id="ga5f31464a19604fde038dba36307ac066"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::stripString </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes leading and trailing whitespace from a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to process. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><code>str</code> with leading and trailing whitespaces removed. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaea84ff4850c382e09a3e158939b34b3e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::stripSuffixIfPresent </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>suffix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes a suffix from a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to process. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">suffix</td><td>Suffix to remove. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><code>str</code> with <code>suffix</code> removed, or <code>str</code> unmodified if it does not end with <code>suffix</code>. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>Returns <code>str</code> if <code>suffix</code> is NULL or empty. </p>

</div>
</div>
<a class="anchor" id="ga6f21654b9945d04d277523f6c8ab1d11"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void gmx::swap </td>
          <td>(</td>
          <td class="paramtype">ArrayRef&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ArrayRef&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Simple swap method for <a class="el" href="classgmx_1_1ArrayRef.xhtml" title="STL-like container for an interface to a C array (or part of a std::vector). ">ArrayRef</a> objects. </p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1ArrayRef.xhtml#a6b0d543799e64b307d4832545e16f6f7" title="Swaps referenced memory with the other object. ">ArrayRef::swap()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga3faec92610cb1ba29dfdf35a05e794cd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void gmx::swap </td>
          <td>(</td>
          <td class="paramtype">ConstArrayRef&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ConstArrayRef&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Simple swap method for <a class="el" href="classgmx_1_1ConstArrayRef.xhtml" title="STL-like container for non-mutable interface to a C array (or part of a std::vector). ">ConstArrayRef</a> objects. </p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1ConstArrayRef.xhtml#af9c00ef92094cc2a1f725f64b8dec471" title="Swaps referenced memory with the other object. ">ConstArrayRef::swap()</a> </dd></dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:18:08 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
