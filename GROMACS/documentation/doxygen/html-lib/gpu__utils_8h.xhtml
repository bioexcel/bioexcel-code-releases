<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/gpu_utils/gpu_utils.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_71392c6f4b1ed3a32ba5c064e868a1ba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a798d384400d41a9e6864d9b1b8753fe.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_b649eef30449290339e642e0a9a21ab3.xhtml">gpu_utils</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">gpu_utils.h File Reference<div class="ingroups"><a class="el" href="group__group__libraryapi.xhtml">Library API</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;cstdio&gt;</code><br/>
<code>#include &quot;gromacs/gpu_utils/gpu_macros.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="basedefinitions_8h.xhtml">gromacs/utility/basedefinitions.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for gpu_utils.h:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="gpu__utils_8h__incl.svg" width="302" height="202"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Declare functions for detection and initialization for GPU devices. </p>
<dl class="section author"><dt>Author</dt><dd>Szilard Pall <a href="#" onclick="location.href='mai'+'lto:'+'pal'+'l.'+'szi'+'la'+'rd@'+'gm'+'ail'+'.c'+'om'; return false;">pall.<span style="display: none;">.nosp@m.</span>szil<span style="display: none;">.nosp@m.</span>ard@g<span style="display: none;">.nosp@m.</span>mail<span style="display: none;">.nosp@m.</span>.com</a> </dd>
<dd>
Mark Abraham <a href="#" onclick="location.href='mai'+'lto:'+'mar'+'k.'+'j.a'+'br'+'aha'+'m@'+'gma'+'il'+'.co'+'m'; return false;">mark.<span style="display: none;">.nosp@m.</span>j.ab<span style="display: none;">.nosp@m.</span>raham<span style="display: none;">.nosp@m.</span>@gma<span style="display: none;">.nosp@m.</span>il.co<span style="display: none;">.nosp@m.</span>m</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a4a5340aac0cf9145eaae8a5ac5d6b0dc"><td class="memItemLeft" align="right" valign="top">typedef void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a4a5340aac0cf9145eaae8a5ac5d6b0dc">gmx_host_alloc_t</a> (void **ptr, size_t nbytes)</td></tr>
<tr class="memdesc:a4a5340aac0cf9145eaae8a5ac5d6b0dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer *ptr to page-locked memory of size nbytes.  <a href="#a4a5340aac0cf9145eaae8a5ac5d6b0dc">More...</a><br/></td></tr>
<tr class="separator:a4a5340aac0cf9145eaae8a5ac5d6b0dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff7e0f62ae0592b0aefadcf9071d0435"><td class="memItemLeft" align="right" valign="top">typedef void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#aff7e0f62ae0592b0aefadcf9071d0435">gmx_host_free_t</a> (void *ptr)</td></tr>
<tr class="memdesc:aff7e0f62ae0592b0aefadcf9071d0435"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees page-locked memory pointed to by *ptr.  <a href="#aff7e0f62ae0592b0aefadcf9071d0435">More...</a><br/></td></tr>
<tr class="separator:aff7e0f62ae0592b0aefadcf9071d0435"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a6cc60186e3cbb57446ed0b08630c0be4"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a6cc60186e3cbb57446ed0b08630c0be4">detect_gpus</a> (struct gmx_gpu_info_t *gpu_info, char *err_str)</td></tr>
<tr class="memdesc:a6cc60186e3cbb57446ed0b08630c0be4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detect all GPUs in the system.  <a href="#a6cc60186e3cbb57446ed0b08630c0be4">More...</a><br/></td></tr>
<tr class="separator:a6cc60186e3cbb57446ed0b08630c0be4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab76db8c3287673503a2462224cb918b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#aab76db8c3287673503a2462224cb918b">pick_compatible_gpus</a> (const struct gmx_gpu_info_t *gpu_info, gmx_gpu_opt_t *gpu_opt)</td></tr>
<tr class="memdesc:aab76db8c3287673503a2462224cb918b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select the compatible GPUs.  <a href="#aab76db8c3287673503a2462224cb918b">More...</a><br/></td></tr>
<tr class="separator:aab76db8c3287673503a2462224cb918b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d1b8175a3e875d40a2606a35c010d9c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a2d1b8175a3e875d40a2606a35c010d9c">check_selected_gpus</a> (int *checkres, const struct gmx_gpu_info_t *gpu_info, gmx_gpu_opt_t *gpu_opt)</td></tr>
<tr class="memdesc:a2d1b8175a3e875d40a2606a35c010d9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check the existence/compatibility of a set of GPUs specified by their device IDs.  <a href="#a2d1b8175a3e875d40a2606a35c010d9c">More...</a><br/></td></tr>
<tr class="separator:a2d1b8175a3e875d40a2606a35c010d9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca84b5cc77147071ae8504cfd6193ad5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#aca84b5cc77147071ae8504cfd6193ad5">free_gpu_info</a> (const struct gmx_gpu_info_t *gpu_info)</td></tr>
<tr class="memdesc:aca84b5cc77147071ae8504cfd6193ad5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees the gpu_dev and dev_use array fields of <code>gpu_info</code>.  <a href="#aca84b5cc77147071ae8504cfd6193ad5">More...</a><br/></td></tr>
<tr class="separator:aca84b5cc77147071ae8504cfd6193ad5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad48b2fdc51150dd0c2beff0f5775ef90"><td class="memItemLeft" align="right" valign="top"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#ad48b2fdc51150dd0c2beff0f5775ef90">init_gpu</a> (FILE *fplog, int mygpu, char *result_str, const struct gmx_gpu_info_t *gpu_info, const gmx_gpu_opt_t *gpu_opt)</td></tr>
<tr class="memdesc:ad48b2fdc51150dd0c2beff0f5775ef90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the GPU with the given index.  <a href="#ad48b2fdc51150dd0c2beff0f5775ef90">More...</a><br/></td></tr>
<tr class="separator:ad48b2fdc51150dd0c2beff0f5775ef90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10aeedc5ccc459189d33d32a024a2a48"><td class="memItemLeft" align="right" valign="top"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a10aeedc5ccc459189d33d32a024a2a48">free_cuda_gpu</a> (int mygpu, char *result_str, const gmx_gpu_info_t *gpu_info, const gmx_gpu_opt_t *gpu_opt)</td></tr>
<tr class="memdesc:a10aeedc5ccc459189d33d32a024a2a48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees up the CUDA GPU used by the active context at the time of calling.  <a href="#a10aeedc5ccc459189d33d32a024a2a48">More...</a><br/></td></tr>
<tr class="separator:a10aeedc5ccc459189d33d32a024a2a48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefeb87fd57039f9d5dd877d6f2caf857"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#aefeb87fd57039f9d5dd877d6f2caf857">get_current_cuda_gpu_device_id</a> (void)</td></tr>
<tr class="memdesc:aefeb87fd57039f9d5dd877d6f2caf857"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the device ID of the CUDA GPU currently in use.  <a href="#aefeb87fd57039f9d5dd877d6f2caf857">More...</a><br/></td></tr>
<tr class="separator:aefeb87fd57039f9d5dd877d6f2caf857"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c78de44bceaca470ef300f6bfcec808"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a2c78de44bceaca470ef300f6bfcec808">get_gpu_device_id</a> (const struct gmx_gpu_info_t *gpu_info, const gmx_gpu_opt_t *gpu_opt, int idx)</td></tr>
<tr class="memdesc:a2c78de44bceaca470ef300f6bfcec808"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an identifier for the GPU with a given index into the array of used GPUs.  <a href="#a2c78de44bceaca470ef300f6bfcec808">More...</a><br/></td></tr>
<tr class="separator:a2c78de44bceaca470ef300f6bfcec808"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c7608b06602727b20cb87cd2acbe7bc"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a6c7608b06602727b20cb87cd2acbe7bc">get_ocl_gpu_device_name</a> (const struct gmx_gpu_info_t *gpu_info, const gmx_gpu_opt_t *gpu_opt, int idx)</td></tr>
<tr class="memdesc:a6c7608b06602727b20cb87cd2acbe7bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the name for the OpenCL GPU with a given index into the array of used GPUs.  <a href="#a6c7608b06602727b20cb87cd2acbe7bc">More...</a><br/></td></tr>
<tr class="separator:a6c7608b06602727b20cb87cd2acbe7bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8633d345b05452997b7f7315027f67f4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a8633d345b05452997b7f7315027f67f4">get_gpu_device_info_string</a> (char *s, const struct gmx_gpu_info_t *gpu_info, int index)</td></tr>
<tr class="memdesc:a8633d345b05452997b7f7315027f67f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats and returns a device information string for a given GPU.  <a href="#a8633d345b05452997b7f7315027f67f4">More...</a><br/></td></tr>
<tr class="separator:a8633d345b05452997b7f7315027f67f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac368c4a971290513fbabe74a0c80b716"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#ac368c4a971290513fbabe74a0c80b716">sizeof_gpu_dev_info</a> (void)</td></tr>
<tr class="memdesc:ac368c4a971290513fbabe74a0c80b716"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the size of the gpu_dev_info struct.  <a href="#ac368c4a971290513fbabe74a0c80b716">More...</a><br/></td></tr>
<tr class="separator:ac368c4a971290513fbabe74a0c80b716"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab791918a19cd4aefc96a099f27f0ca1e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#ab791918a19cd4aefc96a099f27f0ca1e">gpu_set_host_malloc_and_free</a> (bool bUseGpuKernels, <a class="el" href="gpu__utils_8h.xhtml#a4a5340aac0cf9145eaae8a5ac5d6b0dc">gmx_host_alloc_t</a> **nb_alloc, <a class="el" href="gpu__utils_8h.xhtml#aff7e0f62ae0592b0aefadcf9071d0435">gmx_host_free_t</a> **nb_free)</td></tr>
<tr class="memdesc:ab791918a19cd4aefc96a099f27f0ca1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set page-locked memory allocation functions used by the GPU host.  <a href="#ab791918a19cd4aefc96a099f27f0ca1e">More...</a><br/></td></tr>
<tr class="separator:ab791918a19cd4aefc96a099f27f0ca1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a7aa4fffbbd8a56589d49b25021f268"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a4a7aa4fffbbd8a56589d49b25021f268">startGpuProfiler</a> (void)</td></tr>
<tr class="memdesc:a4a7aa4fffbbd8a56589d49b25021f268"><td class="mdescLeft">&#160;</td><td class="mdescRight">Starts the GPU profiler if mdrun is being profiled.  <a href="#a4a7aa4fffbbd8a56589d49b25021f268">More...</a><br/></td></tr>
<tr class="separator:a4a7aa4fffbbd8a56589d49b25021f268"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a437ab09a563614df382d80d53f662b4a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a437ab09a563614df382d80d53f662b4a">resetGpuProfiler</a> (void)</td></tr>
<tr class="memdesc:a437ab09a563614df382d80d53f662b4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets the GPU profiler if mdrun is being profiled.  <a href="#a437ab09a563614df382d80d53f662b4a">More...</a><br/></td></tr>
<tr class="separator:a437ab09a563614df382d80d53f662b4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49e144aebbc0f0af255f1b49c67d598b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="gpu__utils_8h.xhtml#a49e144aebbc0f0af255f1b49c67d598b">stopGpuProfiler</a> (void)</td></tr>
<tr class="memdesc:a49e144aebbc0f0af255f1b49c67d598b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stops the CUDA profiler if mdrun is being profiled.  <a href="#a49e144aebbc0f0af255f1b49c67d598b">More...</a><br/></td></tr>
<tr class="separator:a49e144aebbc0f0af255f1b49c67d598b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a class="anchor" id="a4a5340aac0cf9145eaae8a5ac5d6b0dc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef void gmx_host_alloc_t(void **ptr, size_t nbytes)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a pointer *ptr to page-locked memory of size nbytes. </p>
<p>The allocated memory is suitable to be used for data transfers between host and GPU. Error handling should be done within this function. </p>

</div>
</div>
<a class="anchor" id="aff7e0f62ae0592b0aefadcf9071d0435"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef void gmx_host_free_t(void *ptr)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees page-locked memory pointed to by *ptr. </p>
<p>NULL should not be passed to this function. </p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a2d1b8175a3e875d40a2606a35c010d9c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> check_selected_gpus </td>
          <td>(</td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>checkres</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const struct gmx_gpu_info_t *&#160;</td>
          <td class="paramname"><em>gpu_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_gpu_opt_t *&#160;</td>
          <td class="paramname"><em>gpu_opt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check the existence/compatibility of a set of GPUs specified by their device IDs. </p>
<p>Given the a list of gpu_opt-&gt;n_dev_use GPU device IDs stored in gpu_opt-&gt;dev_use check the existence and compatibility of the respective GPUs. Also provide the caller with an array containing the result of checks in <code>checkres</code>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">checkres</td><td>check result for each ID passed in requested_devs </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_info</td><td>pointer to structure holding GPU information </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">gpu_opt</td><td>pointer to structure holding GPU options </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>TRUE if every the requested GPUs are compatible </dd></dl>

</div>
</div>
<a class="anchor" id="a6cc60186e3cbb57446ed0b08630c0be4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int detect_gpus </td>
          <td>(</td>
          <td class="paramtype">gmx_gpu_info_t *&#160;</td>
          <td class="paramname"><em>gpu_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>err_str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Detect all GPUs in the system. </p>
<p>Will detect every GPU supported by the device driver in use. Also check for the compatibility of each and fill the gpu_info-&gt;gpu_dev array with the required information on each the device: ID, device properties, status.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_info</td><td>pointer to structure holding GPU information. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">err_str</td><td>The error message of any GPU API error that caused the detection to fail (if there was any). The memory the pointer points to should be managed externally. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>non-zero if the detection encountered a failure, zero otherwise.</dd></dl>
<p>Detect all GPUs in the system. </p>

</div>
</div>
<a class="anchor" id="a10aeedc5ccc459189d33d32a024a2a48"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> free_cuda_gpu </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>mygpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>result_str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_gpu_info_t *&#160;</td>
          <td class="paramname"><em>gpu_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_gpu_opt_t *&#160;</td>
          <td class="paramname"><em>gpu_opt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees up the CUDA GPU used by the active context at the time of calling. </p>
<p>The context is explicitly destroyed and therefore all data uploaded to the GPU is lost. This should only be called when none of this data is required anymore.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">mygpu</td><td>index of the GPU clean up for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">result_str</td><td>the message related to the error that occurred during the initialization (if there was any). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_info</td><td>GPU info of all detected devices in the system. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_opt</td><td>options for using the GPUs in gpu_info </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if no error occurs during the freeing. </dd></dl>

</div>
</div>
<a class="anchor" id="aca84b5cc77147071ae8504cfd6193ad5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void free_gpu_info </td>
          <td>(</td>
          <td class="paramtype">const struct gmx_gpu_info_t *&#160;</td>
          <td class="paramname"><em>gpu_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees the gpu_dev and dev_use array fields of <code>gpu_info</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_info</td><td>pointer to structure holding GPU information </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aefeb87fd57039f9d5dd877d6f2caf857"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int get_current_cuda_gpu_device_id </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the device ID of the CUDA GPU currently in use. </p>
<p>The GPU used is the one that is active at the time of the call in the active context.</p>
<dl class="section return"><dt>Returns</dt><dd>device ID of the GPU in use at the time of the call </dd></dl>

</div>
</div>
<a class="anchor" id="a2c78de44bceaca470ef300f6bfcec808"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int get_gpu_device_id </td>
          <td>(</td>
          <td class="paramtype">const struct gmx_gpu_info_t *&#160;</td>
          <td class="paramname"><em>gpu_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_gpu_opt_t *&#160;</td>
          <td class="paramname"><em>gpu_opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns an identifier for the GPU with a given index into the array of used GPUs. </p>
<p>Getter function which, given an index into the array of GPUs in use (dev_use) &ndash; typically an MPI rank &ndash;, returns an identifier of the respective GPU.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_info</td><td>Pointer to structure holding GPU information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_opt</td><td>Pointer to structure holding GPU options </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">idx</td><td>Index into the array of used GPUs </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>device ID of the requested GPU </dd></dl>

</div>
</div>
<a class="anchor" id="a8633d345b05452997b7f7315027f67f4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void get_gpu_device_info_string </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const struct gmx_gpu_info_t *&#160;</td>
          <td class="paramname"><em>gpu_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formats and returns a device information string for a given GPU. </p>
<p>Given an index <em>directly</em> into the array of available GPUs (gpu_dev) returns a formatted info string for the respective GPU which includes ID, name, compute capability, and detection status.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">s</td><td>pointer to output string (has to be allocated externally) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_info</td><td>pointer to structure holding GPU information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>an index <em>directly</em> into the array of available GPUs </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6c7608b06602727b20cb87cd2acbe7bc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* get_ocl_gpu_device_name </td>
          <td>(</td>
          <td class="paramtype">const struct gmx_gpu_info_t *&#160;</td>
          <td class="paramname"><em>gpu_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_gpu_opt_t *&#160;</td>
          <td class="paramname"><em>gpu_opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the name for the OpenCL GPU with a given index into the array of used GPUs. </p>
<p>Getter function which, given an index into the array of GPUs in use (dev_use) &ndash; typically a tMPI/MPI rank &ndash;, returns the device name for the respective OpenCL GPU.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_info</td><td>Pointer to structure holding GPU information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_opt</td><td>Pointer to structure holding GPU options </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">idx</td><td>Index into the array of used GPUs </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A string with the name of the requested OpenCL GPU </dd></dl>

</div>
</div>
<a class="anchor" id="ab791918a19cd4aefc96a099f27f0ca1e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gpu_set_host_malloc_and_free </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="gpu__utils_8h.xhtml#a4a5340aac0cf9145eaae8a5ac5d6b0dc">gmx_host_alloc_t</a> **&#160;</td>
          <td class="paramname"><em>nb_alloc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="gpu__utils_8h.xhtml#aff7e0f62ae0592b0aefadcf9071d0435">gmx_host_free_t</a> **&#160;</td>
          <td class="paramname"><em>nb_free</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set page-locked memory allocation functions used by the GPU host. </p>
<p>Set page-locked memory allocation functions used by the GPU host.</p>
<p>Since GPU support is not configured, there is no host memory to allocate. </p>

</div>
</div>
<a class="anchor" id="ad48b2fdc51150dd0c2beff0f5775ef90"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> init_gpu </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fplog</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>mygpu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>result_str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const struct gmx_gpu_info_t *&#160;</td>
          <td class="paramname"><em>gpu_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gmx_gpu_opt_t *&#160;</td>
          <td class="paramname"><em>gpu_opt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes the GPU with the given index. </p>
<p>The varible <code>mygpu</code> is the index of the GPU to initialize in the gpu_info.gpu_dev array.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">fplog</td><td>log file to write to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mygpu</td><td>index of the GPU to initialize </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">result_str</td><td>the message related to the error that occurred during the initialization (if there was any). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_info</td><td>GPU info of all detected devices in the system. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_opt</td><td>options for using the GPUs in gpu_info </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if no error occurs during initialization. </dd></dl>

</div>
</div>
<a class="anchor" id="aab76db8c3287673503a2462224cb918b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pick_compatible_gpus </td>
          <td>(</td>
          <td class="paramtype">const struct gmx_gpu_info_t *&#160;</td>
          <td class="paramname"><em>gpu_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gmx_gpu_opt_t *&#160;</td>
          <td class="paramname"><em>gpu_opt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Select the compatible GPUs. </p>
<p>This function selects the compatible gpus and initializes gpu_info-&gt;dev_use and gpu_info-&gt;n_dev_use.</p>
<p>Given the list of GPUs available in the system check each device in gpu_info-&gt;gpu_dev and place the indices of the compatible GPUs into dev_use with this marking the respective GPUs as "available for use." Note that <code>detect_gpus</code> must have been called before.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gpu_info</td><td>pointer to structure holding GPU information </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gpu_opt</td><td>pointer to structure holding GPU options </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a437ab09a563614df382d80d53f662b4a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void resetGpuProfiler </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Resets the GPU profiler if mdrun is being profiled. </p>
<p>When a profiler run is in progress (based on the presence of the NVPROF_ID env. var.), the profiler data is restet in order to eliminate the data collected from the preceding part fo the run.</p>
<p>This function should typically be called at the mdrun counter reset time.</p>
<p>Note that this is implemented only for the CUDA API. </p>

</div>
</div>
<a class="anchor" id="ac368c4a971290513fbabe74a0c80b716"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t sizeof_gpu_dev_info </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the size of the gpu_dev_info struct. </p>
<p>The size of gpu_dev_info can be used for allocation and communication.</p>
<dl class="section return"><dt>Returns</dt><dd>size in bytes of gpu_dev_info</dd></dl>
<p>Returns the size of the gpu_dev_info struct. </p>

</div>
</div>
<a class="anchor" id="a4a7aa4fffbbd8a56589d49b25021f268"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void startGpuProfiler </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Starts the GPU profiler if mdrun is being profiled. </p>
<p>When a profiler run is in progress (based on the presence of the NVPROF_ID env. var.), the profiler is started to begin collecting data during the rest of the run (or until stopGpuProfiler is called).</p>
<p>Note that this is implemented only for the CUDA API. </p>

</div>
</div>
<a class="anchor" id="a49e144aebbc0f0af255f1b49c67d598b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stopGpuProfiler </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Stops the CUDA profiler if mdrun is being profiled. </p>
<p>This function can be called at cleanup when skipping recording recording subsequent API calls from being traces/profiled is desired, e.g. before uninitialization.</p>
<p>Note that this is implemented only for the CUDA API. </p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:19:34 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
