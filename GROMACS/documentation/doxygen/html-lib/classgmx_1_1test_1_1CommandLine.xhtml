<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::test::CommandLine Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="namespacegmx_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="classgmx_1_1test_1_1CommandLine-members.xhtml">List of all members</a> &#124;
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">gmx::test::CommandLine Class Reference<div class="ingroups"><a class="el" href="group__group__libraryapi.xhtml">Library API</a> &#124; <a class="el" href="group__module__testutils.xhtml">Testing Utilities (testutils)</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;testutils/cmdlinetest.h&gt;</code></p>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Helper class for tests that need to construct command lines. </p>
<p>This class helps in writing tests for command-line handling. The constructor method takes an array of const char pointers, specifying the command-line arguments, each as one array element. It is also possible to construct the command line by adding individual arguments with <a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a053310b6cdf479cec4438ff4fccaf750" title="Appends an argument to the command line. ">append()</a> and <a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a53ea7c5c119cefa660e0039fccb1ecf8" title="Adds an option-value pair to the command line. ">addOption()</a>. The <a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a0d5a74abdcce310809907a24e72469f4" title="Returns argc for passing into C-style command-line handling. ">argc()</a> and <a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a045cc47df3ba3a4fb1deb5541a39252a" title="Returns argv for passing into C-style command-line handling. ">argv()</a> methods can then be used to obtain <code>argc</code> and <code>argv</code> (non-const char pointers) arrays for passing into methods that expect these.</p>
<p>Note that although the interface allows passing the argc and argv pointers to methods that modify them (typically as <code>f</code>(&amp;<a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a0d5a74abdcce310809907a24e72469f4" title="Returns argc for passing into C-style command-line handling. ">argc()</a>, <a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a045cc47df3ba3a4fb1deb5541a39252a" title="Returns argv for passing into C-style command-line handling. ">argv()</a>)), currently the <a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml" title="Helper class for tests that need to construct command lines. ">CommandLine</a> object is not in a consistent state internally if the parameters are actually modified. Reading the command line is possible afterwards, but modification is not.</p>
<p>If you need to construct command lines that refer to files on the file system, see <a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml" title="Helper class for tests that construct command lines that need to reference existing files...">CommandLineTestHelper</a> and <a class="el" href="classgmx_1_1test_1_1CommandLineTestBase.xhtml" title="Test fixture for tests that call a single command-line program with input/output files. ">CommandLineTestBase</a> for additional convenience utilities.</p>
<p>All constructors and methods that modify this class may throw an std::bad_alloc. Const methods and accessors do not throw. </p>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a22a93cd63c334aa73c33bc04dc553111"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a22a93cd63c334aa73c33bc04dc553111"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a22a93cd63c334aa73c33bc04dc553111">CommandLine</a> ()</td></tr>
<tr class="memdesc:a22a93cd63c334aa73c33bc04dc553111"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes an empty command-line object. <br/></td></tr>
<tr class="separator:a22a93cd63c334aa73c33bc04dc553111"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58d62bb45b852fa579e4fe01724dc8fe"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a58d62bb45b852fa579e4fe01724dc8fe">CommandLine</a> (const <a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt; const char * &gt; &amp;cmdline)</td></tr>
<tr class="memdesc:a58d62bb45b852fa579e4fe01724dc8fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes a command-line object from an array.  <a href="#a58d62bb45b852fa579e4fe01724dc8fe">More...</a><br/></td></tr>
<tr class="separator:a58d62bb45b852fa579e4fe01724dc8fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a4690a0f5f9bca11ea361b1e536387a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6a4690a0f5f9bca11ea361b1e536387a"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a6a4690a0f5f9bca11ea361b1e536387a">CommandLine</a> (const <a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> &amp;other)</td></tr>
<tr class="memdesc:a6a4690a0f5f9bca11ea361b1e536387a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a deep copy of a command-line object. <br/></td></tr>
<tr class="separator:a6a4690a0f5f9bca11ea361b1e536387a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4545a4170eb6afaba62b9826b9a18205"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a4545a4170eb6afaba62b9826b9a18205">initFromArray</a> (const <a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt; const char * &gt; &amp;cmdline)</td></tr>
<tr class="memdesc:a4545a4170eb6afaba62b9826b9a18205"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes a command-line object in-place from an array.  <a href="#a4545a4170eb6afaba62b9826b9a18205">More...</a><br/></td></tr>
<tr class="separator:a4545a4170eb6afaba62b9826b9a18205"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a053310b6cdf479cec4438ff4fccaf750"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a053310b6cdf479cec4438ff4fccaf750">append</a> (const char *<a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#aae2a51f1efc29e3d1c23f48978694226">arg</a>)</td></tr>
<tr class="memdesc:a053310b6cdf479cec4438ff4fccaf750"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends an argument to the command line.  <a href="#a053310b6cdf479cec4438ff4fccaf750">More...</a><br/></td></tr>
<tr class="separator:a053310b6cdf479cec4438ff4fccaf750"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a124ec247e0ef3f87125648bf4c05f4d6"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a124ec247e0ef3f87125648bf4c05f4d6"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a124ec247e0ef3f87125648bf4c05f4d6">append</a> (const std::string &amp;<a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#aae2a51f1efc29e3d1c23f48978694226">arg</a>)</td></tr>
<tr class="memdesc:a124ec247e0ef3f87125648bf4c05f4d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience overload taking a std::string. <br/></td></tr>
<tr class="separator:a124ec247e0ef3f87125648bf4c05f4d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53ea7c5c119cefa660e0039fccb1ecf8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a53ea7c5c119cefa660e0039fccb1ecf8">addOption</a> (const char *name, const char *value)</td></tr>
<tr class="memdesc:a53ea7c5c119cefa660e0039fccb1ecf8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an option-value pair to the command line.  <a href="#a53ea7c5c119cefa660e0039fccb1ecf8">More...</a><br/></td></tr>
<tr class="separator:a53ea7c5c119cefa660e0039fccb1ecf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9dd443462e08fcac1e8e7c847f6ae942"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9dd443462e08fcac1e8e7c847f6ae942"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a9dd443462e08fcac1e8e7c847f6ae942">addOption</a> (const char *name, const std::string &amp;value)</td></tr>
<tr class="memdesc:a9dd443462e08fcac1e8e7c847f6ae942"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience overload taking a std::string. <br/></td></tr>
<tr class="separator:a9dd443462e08fcac1e8e7c847f6ae942"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a244dd72e165c89ee162473699224f5fa"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a244dd72e165c89ee162473699224f5fa"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a244dd72e165c89ee162473699224f5fa">addOption</a> (const char *name, int value)</td></tr>
<tr class="memdesc:a244dd72e165c89ee162473699224f5fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload taking an int. <br/></td></tr>
<tr class="separator:a244dd72e165c89ee162473699224f5fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a131387ad76abfa6813965240f9bf9ed3"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a131387ad76abfa6813965240f9bf9ed3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a131387ad76abfa6813965240f9bf9ed3">addOption</a> (const char *name, double value)</td></tr>
<tr class="memdesc:a131387ad76abfa6813965240f9bf9ed3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload taking a double. <br/></td></tr>
<tr class="separator:a131387ad76abfa6813965240f9bf9ed3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcb0cc263f3998c55898cd1c5649fecd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#abcb0cc263f3998c55898cd1c5649fecd">merge</a> (const <a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> &amp;args)</td></tr>
<tr class="memdesc:abcb0cc263f3998c55898cd1c5649fecd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends all arguments from <code>args</code> to the command line.  <a href="#abcb0cc263f3998c55898cd1c5649fecd">More...</a><br/></td></tr>
<tr class="separator:abcb0cc263f3998c55898cd1c5649fecd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d5a74abdcce310809907a24e72469f4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0d5a74abdcce310809907a24e72469f4"></a>
int &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a0d5a74abdcce310809907a24e72469f4">argc</a> ()</td></tr>
<tr class="memdesc:a0d5a74abdcce310809907a24e72469f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns argc for passing into C-style command-line handling. <br/></td></tr>
<tr class="separator:a0d5a74abdcce310809907a24e72469f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a045cc47df3ba3a4fb1deb5541a39252a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a045cc47df3ba3a4fb1deb5541a39252a"></a>
char **&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a045cc47df3ba3a4fb1deb5541a39252a">argv</a> ()</td></tr>
<tr class="memdesc:a045cc47df3ba3a4fb1deb5541a39252a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns argv for passing into C-style command-line handling. <br/></td></tr>
<tr class="separator:a045cc47df3ba3a4fb1deb5541a39252a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0fa3d826e3a614fc0fbe674b97d4aa6"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa0fa3d826e3a614fc0fbe674b97d4aa6"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#aa0fa3d826e3a614fc0fbe674b97d4aa6">argc</a> () const </td></tr>
<tr class="memdesc:aa0fa3d826e3a614fc0fbe674b97d4aa6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns argc for passing into C-style command-line handling. <br/></td></tr>
<tr class="separator:aa0fa3d826e3a614fc0fbe674b97d4aa6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11db2debbc8c78d2bbbb8517d4503097"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a11db2debbc8c78d2bbbb8517d4503097"></a>
const char *const *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#a11db2debbc8c78d2bbbb8517d4503097">argv</a> () const </td></tr>
<tr class="memdesc:a11db2debbc8c78d2bbbb8517d4503097"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns argv for passing into C-style command-line handling. <br/></td></tr>
<tr class="separator:a11db2debbc8c78d2bbbb8517d4503097"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae2a51f1efc29e3d1c23f48978694226"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aae2a51f1efc29e3d1c23f48978694226"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#aae2a51f1efc29e3d1c23f48978694226">arg</a> (int i) const </td></tr>
<tr class="memdesc:aae2a51f1efc29e3d1c23f48978694226"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a single argument. <br/></td></tr>
<tr class="separator:aae2a51f1efc29e3d1c23f48978694226"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5969f9e34c036ab67d41d5fff49e842"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa5969f9e34c036ab67d41d5fff49e842"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml#aa5969f9e34c036ab67d41d5fff49e842">toString</a> () const </td></tr>
<tr class="memdesc:aa5969f9e34c036ab67d41d5fff49e842"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the command line formatted as a single string. <br/></td></tr>
<tr class="separator:aa5969f9e34c036ab67d41d5fff49e842"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a58d62bb45b852fa579e4fe01724dc8fe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">gmx::test::CommandLine::CommandLine </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt; const char * &gt; &amp;&#160;</td>
          <td class="paramname"><em>cmdline</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes a command-line object from an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">cmdline</td><td>Array of command-line arguments.</td></tr>
  </table>
  </dd>
</dl>
<p><code>cmdline</code> should include the binary name as the first element if that is desired in the output.</p>
<p>This constructor is not explicit to make it possible to create a <a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml" title="Helper class for tests that need to construct command lines. ">CommandLine</a> object directly from a C array. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a53ea7c5c119cefa660e0039fccb1ecf8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::CommandLine::addOption </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds an option-value pair to the command line. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Name of the option to append, which should start with "-". </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value of the argument to append. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a053310b6cdf479cec4438ff4fccaf750"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::CommandLine::append </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>arg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Appends an argument to the command line. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">arg</td><td>Argument to append.</td></tr>
  </table>
  </dd>
</dl>
<p>Strong exception safety. </p>

</div>
</div>
<a class="anchor" id="a4545a4170eb6afaba62b9826b9a18205"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::CommandLine::initFromArray </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1ConstArrayRef.xhtml">ConstArrayRef</a>&lt; const char * &gt; &amp;&#160;</td>
          <td class="paramname"><em>cmdline</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes a command-line object in-place from an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">cmdline</td><td>Array of command-line arguments.</td></tr>
  </table>
  </dd>
</dl>
<p><code>cmdline</code> should include the binary name as the first element if that is desired in the output.</p>
<p>This function does the same as the constructor that takes a <a class="el" href="classgmx_1_1ConstArrayRef.xhtml" title="STL-like container for non-mutable interface to a C array (or part of a std::vector). ">ConstArrayRef</a>. Any earlier contents of the object are discarded.</p>
<p>Strong exception safety. </p>

</div>
</div>
<a class="anchor" id="abcb0cc263f3998c55898cd1c5649fecd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::CommandLine::merge </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> &amp;&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Appends all arguments from <code>args</code> to the command line. </p>
<p>If the first argument of <code>args</code> does not start with a <code>-</code>, it is skipped, assuming it is a gmx module name and thus useless. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/testutils/<a class="el" href="cmdlinetest_8h.xhtml">cmdlinetest.h</a></li>
<li>src/testutils/cmdlinetest.cpp</li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:19:42 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
