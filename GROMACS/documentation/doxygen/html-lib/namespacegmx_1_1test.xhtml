<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::test Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li class="current"><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.xhtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.xhtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="namespacegmx_1_1test.xhtml">test</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">gmx::test Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Testing utilities namespace. </p>
<p>This namespace contains utilities for writing unit tests, mostly from the <a class="el" href="group__module__testutils.xhtml">Testing Utilities (testutils)</a> module. </p>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInputPointSet.xhtml">AnalysisDataTestInputPointSet</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a single set of points in <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInputFrame.xhtml" title="Represents a single frame in AnalysisDataTestInput structure. ">AnalysisDataTestInputFrame</a> structure.  <a href="classgmx_1_1test_1_1AnalysisDataTestInputPointSet.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInputFrame.xhtml">AnalysisDataTestInputFrame</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a single frame in <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a> structure.  <a href="classgmx_1_1test_1_1AnalysisDataTestInputFrame.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml">AnalysisDataTestInput</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents static input data for <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml" title="Abstract base class for all objects that provide data. ">AbstractAnalysisData</a> tests.  <a href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml">AnalysisDataTestFixture</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test fixture for <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml" title="Abstract base class for all objects that provide data. ">AbstractAnalysisData</a> testing.  <a href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1MdrunComparisonFixture.xhtml">MdrunComparisonFixture</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Declares abstract base text fixture class for integration tests of mdrun functionality that will compare multiple calls to mdrun.  <a href="classgmx_1_1test_1_1MdrunComparisonFixture.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class for tests that need to construct command lines.  <a href="classgmx_1_1test_1_1CommandLine.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml">CommandLineTestHelper</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class for tests that construct command lines that need to reference existing files.  <a href="classgmx_1_1test_1_1CommandLineTestHelper.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1CommandLineTestBase.xhtml">CommandLineTestBase</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test fixture for tests that call a single command-line program with input/output files.  <a href="classgmx_1_1test_1_1CommandLineTestBase.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1ConfMatch.xhtml">ConfMatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Match the contents as an gro file.  <a href="classgmx_1_1test_1_1ConfMatch.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1IntegrationTestFixture.xhtml">IntegrationTestFixture</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test fixture for integration tests.  <a href="classgmx_1_1test_1_1IntegrationTestFixture.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1InteractiveTestHelper.xhtml">InteractiveTestHelper</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class for testing interactive sessions.  <a href="classgmx_1_1test_1_1InteractiveTestHelper.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handles comparison to test reference data.  <a href="classgmx_1_1test_1_1TestReferenceChecker.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestReferenceData.xhtml">TestReferenceData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handles creation of and comparison to test reference data.  <a href="classgmx_1_1test_1_1TestReferenceData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1StringTestBase.xhtml">StringTestBase</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test fixture for tests that check string formatting.  <a href="classgmx_1_1test_1_1StringTestBase.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1FloatingPointDifference.xhtml">FloatingPointDifference</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes and represents a floating-point difference value.  <a href="classgmx_1_1test_1_1FloatingPointDifference.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml">FloatingPointTolerance</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies a floating-point comparison tolerance and checks whether a difference is within the tolerance.  <a href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestException.xhtml">TestException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exception class for reporting errors in tests.  <a href="classgmx_1_1test_1_1TestException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestFileManager.xhtml">TestFileManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper for tests that need input and output files.  <a href="classgmx_1_1test_1_1TestFileManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestFileInputRedirector.xhtml">TestFileInputRedirector</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">In-memory implementation for <a class="el" href="classgmx_1_1IFileInputRedirector.xhtml" title="Allows overriding file existence checks from code that supports it. ">IFileInputRedirector</a> for tests.  <a href="classgmx_1_1test_1_1TestFileInputRedirector.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestFileOutputRedirector.xhtml">TestFileOutputRedirector</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">In-memory implementation of <a class="el" href="classgmx_1_1IFileOutputRedirector.xhtml" title="Allows capturing stdout and file output from code that supports it. ">IFileOutputRedirector</a> for tests.  <a href="classgmx_1_1test_1_1TestFileOutputRedirector.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1TestOptionsProvider.xhtml">TestOptionsProvider</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides additional options for the test executable.  <a href="classgmx_1_1test_1_1TestOptionsProvider.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1ITextBlockMatcher.xhtml">ITextBlockMatcher</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a text matcher, matching text stream contents against reference data.  <a href="classgmx_1_1test_1_1ITextBlockMatcher.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1ITextBlockMatcherSettings.xhtml">ITextBlockMatcherSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a factory for creating a text matcher.  <a href="classgmx_1_1test_1_1ITextBlockMatcherSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1ExactTextMatch.xhtml">ExactTextMatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use an exact text match (the contents should be exactly equal).  <a href="classgmx_1_1test_1_1ExactTextMatch.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1NoTextMatch.xhtml">NoTextMatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do not match the text (the contents are ignored).  <a href="classgmx_1_1test_1_1NoTextMatch.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1XvgMatch.xhtml">XvgMatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Match the contents as an xvg file.  <a href="classgmx_1_1test_1_1XvgMatch.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a2987dd0c79606a4d1ab555d34c616906"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2987dd0c79606a4d1ab555d34c616906"></a>
typedef std::shared_ptr<br class="typebreak"/>
&lt; MockAnalysisDataModule &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a2987dd0c79606a4d1ab555d34c616906">MockAnalysisDataModulePointer</a></td></tr>
<tr class="memdesc:a2987dd0c79606a4d1ab555d34c616906"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer to manage an MockAnalysisDataModule object. <br/></td></tr>
<tr class="separator:a2987dd0c79606a4d1ab555d34c616906"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae66ac556ce21b022b954b74a4862e68"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aae66ac556ce21b022b954b74a4862e68"></a>
typedef std::tuple&lt; int, bool, <br class="typebreak"/>
bool, bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#aae66ac556ce21b022b954b74a4862e68">SettleTestParameters</a></td></tr>
<tr class="memdesc:aae66ac556ce21b022b954b74a4862e68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience typedef. <br/></td></tr>
<tr class="separator:aae66ac556ce21b022b954b74a4862e68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaf53810da1094987057767b0714fb27"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="adaf53810da1094987057767b0714fb27"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; EnergyFrameReader &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#adaf53810da1094987057767b0714fb27">EnergyFrameReaderPtr</a></td></tr>
<tr class="memdesc:adaf53810da1094987057767b0714fb27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience smart pointer typedef. <br/></td></tr>
<tr class="separator:adaf53810da1094987057767b0714fb27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc0ee39e524cefc1476d1323242fc0bb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="acc0ee39e524cefc1476d1323242fc0bb"></a>
typedef <a class="el" href="classgmx_1_1scoped__cptr.xhtml">scoped_cptr</a>&lt; ener_file, <br class="typebreak"/>
done_ener_file &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#acc0ee39e524cefc1476d1323242fc0bb">ener_file_ptr</a></td></tr>
<tr class="memdesc:acc0ee39e524cefc1476d1323242fc0bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience smart pointer typedef. <br/></td></tr>
<tr class="separator:acc0ee39e524cefc1476d1323242fc0bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2c604cbfc91e04302edeba22ee15a53"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab2c604cbfc91e04302edeba22ee15a53"></a>
typedef <a class="el" href="classgmx_1_1scoped__cptr.xhtml">scoped_cptr</a><br class="typebreak"/>
&lt; t_enxframe, <a class="el" href="namespacegmx_1_1test.xhtml#aba30b242a0aed11e08b4c7f57dbac8e9">done_enxframe</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ab2c604cbfc91e04302edeba22ee15a53">enxframe_ptr</a></td></tr>
<tr class="memdesc:ab2c604cbfc91e04302edeba22ee15a53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience smart pointer typedef. <br/></td></tr>
<tr class="separator:ab2c604cbfc91e04302edeba22ee15a53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48cdc0c618f8f53c711a2a006d067c87"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a48cdc0c618f8f53c711a2a006d067c87"></a>
typedef gmx::test::ImdTestFixture&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a48cdc0c618f8f53c711a2a006d067c87">ImdTest</a></td></tr>
<tr class="memdesc:a48cdc0c618f8f53c711a2a006d067c87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test fixture for mdrun with IMD settings. <br/></td></tr>
<tr class="separator:a48cdc0c618f8f53c711a2a006d067c87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab370581bf9c1efd3678f7ec928a67324"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab370581bf9c1efd3678f7ec928a67324"></a>
typedef MultiSimTest&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ab370581bf9c1efd3678f7ec928a67324">MultiSimTerminationTest</a></td></tr>
<tr class="memdesc:ab370581bf9c1efd3678f7ec928a67324"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience typedef. <br/></td></tr>
<tr class="separator:ab370581bf9c1efd3678f7ec928a67324"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ff224dd094f2706d4224fadf046483a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2ff224dd094f2706d4224fadf046483a"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1test_1_1CommandLine.xhtml">CommandLine</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a2ff224dd094f2706d4224fadf046483a">CommandLinePointer</a></td></tr>
<tr class="memdesc:a2ff224dd094f2706d4224fadf046483a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience typedef. <br/></td></tr>
<tr class="separator:a2ff224dd094f2706d4224fadf046483a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18925960bf5114a04e0932b589ff75f0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a18925960bf5114a04e0932b589ff75f0"></a>
typedef MultiSimTest&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a18925960bf5114a04e0932b589ff75f0">ReplicaExchangeEnsembleTest</a></td></tr>
<tr class="memdesc:a18925960bf5114a04e0932b589ff75f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience typedef. <br/></td></tr>
<tr class="separator:a18925960bf5114a04e0932b589ff75f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0e6fbbc16a9a5ea5374565e86a58380"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac0e6fbbc16a9a5ea5374565e86a58380"></a>
typedef MultiSimTest&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ac0e6fbbc16a9a5ea5374565e86a58380">ReplicaExchangeTerminationTest</a></td></tr>
<tr class="memdesc:ac0e6fbbc16a9a5ea5374565e86a58380"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience typedef. <br/></td></tr>
<tr class="separator:ac0e6fbbc16a9a5ea5374565e86a58380"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28768cab0a7836447cc29bc00cf740f5"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a28768cab0a7836447cc29bc00cf740f5"></a>
typedef gmx::test::SwapTestFixture&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a28768cab0a7836447cc29bc00cf740f5">CompelTest</a></td></tr>
<tr class="memdesc:a28768cab0a7836447cc29bc00cf740f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test fixture for mdrun with "Computational Electrophysiology" settings,. <br/></td></tr>
<tr class="separator:a28768cab0a7836447cc29bc00cf740f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bf6cc9e49e6deb4469f79b764bf6680"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1bf6cc9e49e6deb4469f79b764bf6680"></a>
typedef MdrunTestFixture&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a1bf6cc9e49e6deb4469f79b764bf6680">MdrunTerminationTest</a></td></tr>
<tr class="memdesc:a1bf6cc9e49e6deb4469f79b764bf6680"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience typedef. <br/></td></tr>
<tr class="separator:a1bf6cc9e49e6deb4469f79b764bf6680"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee78957ead68e1e7531f70e3b39f56d1"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aee78957ead68e1e7531f70e3b39f56d1"></a>
typedef <a class="el" href="classgmx_1_1scoped__cptr.xhtml">scoped_cptr</a><br class="typebreak"/>
&lt; gmx_output_env_t, <br class="typebreak"/>
output_env_done &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#aee78957ead68e1e7531f70e3b39f56d1">oenv_ptr</a></td></tr>
<tr class="memdesc:aee78957ead68e1e7531f70e3b39f56d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience smart pointer typedef. <br/></td></tr>
<tr class="separator:aee78957ead68e1e7531f70e3b39f56d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9f31f7ed112002acf9e3730c126726f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa9f31f7ed112002acf9e3730c126726f"></a>
typedef <a class="el" href="classgmx_1_1scoped__cptr.xhtml">scoped_cptr</a><br class="typebreak"/>
&lt; t_trxstatus, close_trx &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#aa9f31f7ed112002acf9e3730c126726f">trxstatus_file_ptr</a></td></tr>
<tr class="memdesc:aa9f31f7ed112002acf9e3730c126726f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience smart pointer typedef. <br/></td></tr>
<tr class="separator:aa9f31f7ed112002acf9e3730c126726f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affa665569eba3c20c9b22ec90958a022"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="affa665569eba3c20c9b22ec90958a022"></a>
typedef <a class="el" href="classgmx_1_1scoped__cptr.xhtml">scoped_cptr</a><br class="typebreak"/>
&lt; t_trxframe, <a class="el" href="namespacegmx_1_1test.xhtml#a38e926a71822704ecee2753eec73d8e5">done_trxframe</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#affa665569eba3c20c9b22ec90958a022">trxframe_ptr</a></td></tr>
<tr class="memdesc:affa665569eba3c20c9b22ec90958a022"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience smart pointer typedef. <br/></td></tr>
<tr class="separator:affa665569eba3c20c9b22ec90958a022"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa37ca161973ffde331a669d4fa07b1a2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa37ca161973ffde331a669d4fa07b1a2"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; TrajectoryFrameReader &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#aa37ca161973ffde331a669d4fa07b1a2">TrajectoryFrameReaderPtr</a></td></tr>
<tr class="memdesc:aa37ca161973ffde331a669d4fa07b1a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience smart pointer typedef. <br/></td></tr>
<tr class="separator:aa37ca161973ffde331a669d4fa07b1a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab67aed93a000e8ab0343052804f18d03"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab67aed93a000e8ab0343052804f18d03"></a>
typedef std::unique_ptr<br class="typebreak"/>
&lt; <a class="el" href="classgmx_1_1test_1_1ITextBlockMatcher.xhtml">ITextBlockMatcher</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ab67aed93a000e8ab0343052804f18d03">TextBlockMatcherPointer</a></td></tr>
<tr class="memdesc:ab67aed93a000e8ab0343052804f18d03"><td class="mdescLeft">&#160;</td><td class="mdescRight">Smart pointer for managing a <a class="el" href="classgmx_1_1test_1_1ITextBlockMatcher.xhtml" title="Represents a text matcher, matching text stream contents against reference data. ">ITextBlockMatcher</a>. <br/></td></tr>
<tr class="separator:ab67aed93a000e8ab0343052804f18d03"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:gad7a0c1ac11a9748556948309218fc08a"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gad7a0c1ac11a9748556948309218fc08a">ReferenceDataMode</a> { <a class="el" href="group__module__testutils.xhtml#ggad7a0c1ac11a9748556948309218fc08aaf5623014171529e1db8e56212300eb02">erefdataCompare</a>, 
<a class="el" href="group__module__testutils.xhtml#ggad7a0c1ac11a9748556948309218fc08aa00a47e9712009f3cf96d99a29e9624fe">erefdataCreateMissing</a>, 
<a class="el" href="group__module__testutils.xhtml#ggad7a0c1ac11a9748556948309218fc08aab551acebd822aba51d7f40993b418988">erefdataUpdateChanged</a>, 
<a class="el" href="group__module__testutils.xhtml#ggad7a0c1ac11a9748556948309218fc08aa67803fee1c34e6e1926d843157533d50">erefdataUpdateAll</a>
 }</td></tr>
<tr class="memdesc:gad7a0c1ac11a9748556948309218fc08a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Mode of operation for reference data handling.  <a href="group__module__testutils.xhtml#gad7a0c1ac11a9748556948309218fc08a">More...</a><br/></td></tr>
<tr class="separator:gad7a0c1ac11a9748556948309218fc08a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a9f0a07eba4641c66724f87100aa8eaa0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacegmx_1_1test.xhtml#adaf53810da1094987057767b0714fb27">EnergyFrameReaderPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a9f0a07eba4641c66724f87100aa8eaa0">openEnergyFileToReadFields</a> (const std::string &amp;filename, const std::vector&lt; std::string &gt; &amp;requiredEnergyFieldNames)</td></tr>
<tr class="memdesc:a9f0a07eba4641c66724f87100aa8eaa0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Open the file and return an object that can read the required fields from frames of an .edr file.  <a href="#a9f0a07eba4641c66724f87100aa8eaa0">More...</a><br/></td></tr>
<tr class="separator:a9f0a07eba4641c66724f87100aa8eaa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59a502ab2881b80d18cd00eb88deb3f7"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a59a502ab2881b80d18cd00eb88deb3f7"></a>
t_enxframe *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a59a502ab2881b80d18cd00eb88deb3f7">make_enxframe</a> ()</td></tr>
<tr class="memdesc:a59a502ab2881b80d18cd00eb88deb3f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to obtain resources. <br/></td></tr>
<tr class="separator:a59a502ab2881b80d18cd00eb88deb3f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba30b242a0aed11e08b4c7f57dbac8e9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#aba30b242a0aed11e08b4c7f57dbac8e9">done_enxframe</a> (t_enxframe *fr)</td></tr>
<tr class="memdesc:aba30b242a0aed11e08b4c7f57dbac8e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to clean up resources.  <a href="#aba30b242a0aed11e08b4c7f57dbac8e9">More...</a><br/></td></tr>
<tr class="separator:aba30b242a0aed11e08b4c7f57dbac8e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3294871401e53338ae611b132c508ae5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a3294871401e53338ae611b132c508ae5">compareFrames</a> (const std::pair&lt; EnergyFrame, EnergyFrame &gt; &amp;frames, <a class="el" href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml">FloatingPointTolerance</a> tolerance)</td></tr>
<tr class="memdesc:a3294871401e53338ae611b132c508ae5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare all fields of reference with all matching fields from test.  <a href="#a3294871401e53338ae611b132c508ae5">More...</a><br/></td></tr>
<tr class="separator:a3294871401e53338ae611b132c508ae5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a509a225ce153e9fc48c0c77feec46d1e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a509a225ce153e9fc48c0c77feec46d1e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a509a225ce153e9fc48c0c77feec46d1e">organizeMdpFile</a> (SimulationRunner *runner)</td></tr>
<tr class="memdesc:a509a225ce153e9fc48c0c77feec46d1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Build a simple .mdp file. <br/></td></tr>
<tr class="separator:a509a225ce153e9fc48c0c77feec46d1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69dbc56100ed07d1cf09a71d2e8b159e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a69dbc56100ed07d1cf09a71d2e8b159e"></a>
t_trxframe *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a69dbc56100ed07d1cf09a71d2e8b159e">make_trxframe</a> ()</td></tr>
<tr class="memdesc:a69dbc56100ed07d1cf09a71d2e8b159e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to obtain resources. <br/></td></tr>
<tr class="separator:a69dbc56100ed07d1cf09a71d2e8b159e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38e926a71822704ecee2753eec73d8e5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a38e926a71822704ecee2753eec73d8e5">done_trxframe</a> (t_trxframe *fr)</td></tr>
<tr class="memdesc:a38e926a71822704ecee2753eec73d8e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to clean up resources.  <a href="#a38e926a71822704ecee2753eec73d8e5">More...</a><br/></td></tr>
<tr class="separator:a38e926a71822704ecee2753eec73d8e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8c9242354b103b20a654fe674fe21ea"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ad8c9242354b103b20a654fe674fe21ea">compareFrames</a> (const std::pair&lt; TrajectoryFrame, TrajectoryFrame &gt; &amp;frames, <a class="el" href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml">FloatingPointTolerance</a> tolerance)</td></tr>
<tr class="memdesc:ad8c9242354b103b20a654fe674fe21ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare the fields of the two frames for equality within the <code>tolerance</code>.  <a href="#ad8c9242354b103b20a654fe674fe21ea">More...</a><br/></td></tr>
<tr class="separator:ad8c9242354b103b20a654fe674fe21ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab12f4df4bfc1db7445b7ad238d062913"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ab12f4df4bfc1db7445b7ad238d062913">checkConfFile</a> (<a class="el" href="classgmx_1_1TextInputStream.xhtml">TextInputStream</a> *input, <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a> *checker, const ConfMatchSettings &amp;settings)</td></tr>
<tr class="memdesc:ab12f4df4bfc1db7445b7ad238d062913"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds content of a gro file to <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml" title="Handles comparison to test reference data. ">TestReferenceChecker</a> object.  <a href="#ab12f4df4bfc1db7445b7ad238d062913">More...</a><br/></td></tr>
<tr class="separator:ab12f4df4bfc1db7445b7ad238d062913"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a122b00c5372971f9b01bbaa01ad8c9d2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a122b00c5372971f9b01bbaa01ad8c9d2"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a122b00c5372971f9b01bbaa01ad8c9d2">convertDouble</a> (const std::string &amp;value)</td></tr>
<tr class="memdesc:a122b00c5372971f9b01bbaa01ad8c9d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to parse a floating-point value. <br/></td></tr>
<tr class="separator:a122b00c5372971f9b01bbaa01ad8c9d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad8fbcf6a1ef3d204339b20f47fe577a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aad8fbcf6a1ef3d204339b20f47fe577a"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#aad8fbcf6a1ef3d204339b20f47fe577a">convertDoubleReferenceValue</a> (const std::string &amp;value)</td></tr>
<tr class="memdesc:aad8fbcf6a1ef3d204339b20f47fe577a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to parse a floating-point reference data value. <br/></td></tr>
<tr class="separator:aad8fbcf6a1ef3d204339b20f47fe577a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac88155b9b78810f4117349514b93fe00"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gac88155b9b78810f4117349514b93fe00">initReferenceData</a> (<a class="el" href="classgmx_1_1IOptionsContainer.xhtml">IOptionsContainer</a> *options)</td></tr>
<tr class="memdesc:gac88155b9b78810f4117349514b93fe00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes reference data handling.  <a href="group__module__testutils.xhtml#gac88155b9b78810f4117349514b93fe00">More...</a><br/></td></tr>
<tr class="separator:gac88155b9b78810f4117349514b93fe00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26d94b8bbe10b3fa39e5c03ef3833b4a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a26d94b8bbe10b3fa39e5c03ef3833b4a">throwIfNonEmptyAndOnlyWhitespace</a> (const std::string &amp;s, const char *id)</td></tr>
<tr class="memdesc:a26d94b8bbe10b3fa39e5c03ef3833b4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Throw a <a class="el" href="classgmx_1_1test_1_1TestException.xhtml" title="Exception class for reporting errors in tests. ">TestException</a> if the caller tries to write particular refdata that can't work.  <a href="#a26d94b8bbe10b3fa39e5c03ef3833b4a">More...</a><br/></td></tr>
<tr class="separator:a26d94b8bbe10b3fa39e5c03ef3833b4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9b0da354984c1f3ef4e6530d54204cc1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#ga9b0da354984c1f3ef4e6530d54204cc1">registerTestOptions</a> (const char *name, <a class="el" href="classgmx_1_1test_1_1TestOptionsProvider.xhtml">TestOptionsProvider</a> *provider)</td></tr>
<tr class="memdesc:ga9b0da354984c1f3ef4e6530d54204cc1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registers a test option provider with the test framework.  <a href="group__module__testutils.xhtml#ga9b0da354984c1f3ef4e6530d54204cc1">More...</a><br/></td></tr>
<tr class="separator:ga9b0da354984c1f3ef4e6530d54204cc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabca45f04287813b96ad94839f9a10cb3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__module__testutils.xhtml#gabca45f04287813b96ad94839f9a10cb3">initTestOptions</a> (<a class="el" href="classgmx_1_1IOptionsContainer.xhtml">IOptionsContainer</a> *options)</td></tr>
<tr class="memdesc:gabca45f04287813b96ad94839f9a10cb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the options from all registered test providers.  <a href="group__module__testutils.xhtml#gabca45f04287813b96ad94839f9a10cb3">More...</a><br/></td></tr>
<tr class="separator:gabca45f04287813b96ad94839f9a10cb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26c7bb1a6f6c06b006a800f8d4d125ab"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a26c7bb1a6f6c06b006a800f8d4d125ab">checkXvgFile</a> (<a class="el" href="classgmx_1_1TextInputStream.xhtml">TextInputStream</a> *input, <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a> *checker, const XvgMatchSettings &amp;settings)</td></tr>
<tr class="memdesc:a26c7bb1a6f6c06b006a800f8d4d125ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds content of xvg file to <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml" title="Handles comparison to test reference data. ">TestReferenceChecker</a> object.  <a href="#a26c7bb1a6f6c06b006a800f8d4d125ab">More...</a><br/></td></tr>
<tr class="separator:a26c7bb1a6f6c06b006a800f8d4d125ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:afc2b21942f523ce739d801ae0652e01e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="afc2b21942f523ce739d801ae0652e01e"></a>
const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#afc2b21942f523ce739d801ae0652e01e">g_positions</a> []</td></tr>
<tr class="memdesc:afc2b21942f523ce739d801ae0652e01e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Database of 51 water atom input positions (DIM reals per atom, taken from spc216.gro) for use as test inputs. <br/></td></tr>
<tr class="separator:afc2b21942f523ce739d801ae0652e01e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae09f7400768147dd31fe2778f92e7985"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae09f7400768147dd31fe2778f92e7985"></a>
matrix&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#ae09f7400768147dd31fe2778f92e7985">g_box</a> = {{<a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>(1.86206), 0, 0}, {0, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>(1.86206), 0}, {0, 0, <a class="el" href="real_8h.xhtml#a58a0c7cf2501f4492da833421be92547">real</a>(1.86206)}}</td></tr>
<tr class="memdesc:ae09f7400768147dd31fe2778f92e7985"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple cubic simulation box to use in tests. <br/></td></tr>
<tr class="separator:ae09f7400768147dd31fe2778f92e7985"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b73ce4b125bef6a7142cff78280c2e9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8b73ce4b125bef6a7142cff78280c2e9"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#a8b73ce4b125bef6a7142cff78280c2e9">g_butaneTopFileFormatString</a></td></tr>
<tr class="memdesc:a8b73ce4b125bef6a7142cff78280c2e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Format string for building a configurable .top file. <br/></td></tr>
<tr class="separator:a8b73ce4b125bef6a7142cff78280c2e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abedb4677d6c18c46b7287cd3427f4b68"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx_1_1test.xhtml#abedb4677d6c18c46b7287cd3427f4b68">g_bDeleteFilesAfterTest</a> = true</td></tr>
<tr class="memdesc:abedb4677d6c18c46b7287cd3427f4b68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Controls whether <a class="el" href="classgmx_1_1test_1_1TestFileManager.xhtml" title="Helper for tests that need input and output files. ">TestFileManager</a> should delete temporary files after the test finishes.  <a href="#abedb4677d6c18c46b7287cd3427f4b68">More...</a><br/></td></tr>
<tr class="separator:abedb4677d6c18c46b7287cd3427f4b68"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ab12f4df4bfc1db7445b7ad238d062913"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::checkConfFile </td>
          <td>(</td>
          <td class="paramtype">TextInputStream *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TestReferenceChecker *&#160;</td>
          <td class="paramname"><em>checker</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ConfMatchSettings &amp;&#160;</td>
          <td class="paramname"><em>settings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds content of a gro file to <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml" title="Handles comparison to test reference data. ">TestReferenceChecker</a> object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Stream that provides the gro content. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">checker</td><td>Checker to use. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">settings</td><td>Settings to use for matching.</td></tr>
  </table>
  </dd>
</dl>
<p>Parses a gro file from the input stream, and checks the contents against reference data (only first two lines for now).</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1test_1_1ConfMatch.xhtml" title="Match the contents as an gro file. ">ConfMatch</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a26c7bb1a6f6c06b006a800f8d4d125ab"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::checkXvgFile </td>
          <td>(</td>
          <td class="paramtype">TextInputStream *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TestReferenceChecker *&#160;</td>
          <td class="paramname"><em>checker</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const XvgMatchSettings &amp;&#160;</td>
          <td class="paramname"><em>settings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds content of xvg file to <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml" title="Handles comparison to test reference data. ">TestReferenceChecker</a> object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Stream that provides the xvg content. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">checker</td><td>Checker to use. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">settings</td><td>Settings to use for matching.</td></tr>
  </table>
  </dd>
</dl>
<p>Parses an xvg file from the input stream, and checks the contents against reference data. <code>settings</code> can be used to customize the matching. Only a single data set is supported (but multiple columns work). A subset of xmgrace formatting is also checked; static content that is nearly always the same is skipped.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1test_1_1XvgMatch.xhtml" title="Match the contents as an xvg file. ">XvgMatch</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad8c9242354b103b20a654fe674fe21ea"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::compareFrames </td>
          <td>(</td>
          <td class="paramtype">const std::pair&lt; TrajectoryFrame, TrajectoryFrame &gt; &amp;&#160;</td>
          <td class="paramname"><em>frames</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FloatingPointTolerance&#160;</td>
          <td class="paramname"><em>tolerance</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compare the fields of the two frames for equality within the <code>tolerance</code>. </p>
<p>The two frames are required to have valid and matching values for time and step. Positions, velocities and/or forces will be compared when present in both frames, and expected to be equal within <code>tolerance</code>. </p>

</div>
</div>
<a class="anchor" id="a3294871401e53338ae611b132c508ae5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::compareFrames </td>
          <td>(</td>
          <td class="paramtype">const std::pair&lt; EnergyFrame, EnergyFrame &gt; &amp;&#160;</td>
          <td class="paramname"><em>frames</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FloatingPointTolerance&#160;</td>
          <td class="paramname"><em>tolerance</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compare all fields of reference with all matching fields from test. </p>
<p>Ignore any key found in either <code>reference</code> or <code>test</code> that is not found in the other. For all keys found in both frames, compare the values with EXPECT_REAL_EQ_TOL and the given tolerance. </p>

</div>
</div>
<a class="anchor" id="aba30b242a0aed11e08b4c7f57dbac8e9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::done_enxframe </td>
          <td>(</td>
          <td class="paramtype">t_enxframe *&#160;</td>
          <td class="paramname"><em>fr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to clean up resources. </p>
<p>Helper function to free resources (NB free_enxframe only frees the contents, not the pointer itself) </p>

</div>
</div>
<a class="anchor" id="a38e926a71822704ecee2753eec73d8e5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::done_trxframe </td>
          <td>(</td>
          <td class="paramtype">t_trxframe *&#160;</td>
          <td class="paramname"><em>fr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to clean up resources. </p>
<p>Helper function to free all resources. </p>

</div>
</div>
<a class="anchor" id="a9f0a07eba4641c66724f87100aa8eaa0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacegmx_1_1test.xhtml#adaf53810da1094987057767b0714fb27">EnergyFrameReaderPtr</a> gmx::test::openEnergyFileToReadFields </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>requiredEnergyFieldNames</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Open the file and return an object that can read the required fields from frames of an .edr file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Name of the energy file to use </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">requiredEnergyFieldNames</td><td>Names of the energy fields that the caller requires to be present for an .edr file frame to be considered valid </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1FileIOError.xhtml" title="Exception class for file I/O errors. ">FileIOError</a></td><td>If the .edr file cannot be opened </td></tr>
    <tr><td class="paramname"><a class="el" href="classgmx_1_1APIError.xhtml" title="Exception class for incorrect use of an API. ">APIError</a></td><td>If any required energy field is not present in the file </td></tr>
    <tr><td class="paramname">std::bad_alloc</td><td>When out of memory</td></tr>
  </table>
  </dd>
</dl>
<p>This function is intended to have the main responsibility for making EnergyFrameReader objects. </p>

</div>
</div>
<a class="anchor" id="a26d94b8bbe10b3fa39e5c03ef3833b4a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void gmx::test::throwIfNonEmptyAndOnlyWhitespace </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Throw a <a class="el" href="classgmx_1_1test_1_1TestException.xhtml" title="Exception class for reporting errors in tests. ">TestException</a> if the caller tries to write particular refdata that can't work. </p>
<p>If the string to write is non-empty and has only whitespace, TinyXML2 can't read it correctly, so throw an exception for this case, so that we can't accidentally use it and run into mysterious problems.</p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000061">Todo:</a></b></dt><dd>Eliminate this limitation of TinyXML2. See e.g. <a href="https://github.com/leethomason/tinyxml2/issues/432">https://github.com/leethomason/tinyxml2/issues/432</a> </dd></dl>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a class="anchor" id="abedb4677d6c18c46b7287cd3427f4b68"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool gmx::test::g_bDeleteFilesAfterTest = true</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Controls whether <a class="el" href="classgmx_1_1test_1_1TestFileManager.xhtml" title="Helper for tests that need input and output files. ">TestFileManager</a> should delete temporary files after the test finishes. </p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:19:42 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
