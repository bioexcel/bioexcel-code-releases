<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::TextWriter Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="classgmx_1_1TextWriter.xhtml">TextWriter</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="classgmx_1_1TextWriter-members.xhtml">List of all members</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">gmx::TextWriter Class Reference<div class="ingroups"><a class="el" href="group__group__libraryapi.xhtml">Library API</a> &#124; <a class="el" href="group__module__utility.xhtml">Low-Level Utilities (utility)</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;gromacs/utility/textwriter.h&gt;</code></p>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Writes text into a <a class="el" href="classgmx_1_1TextOutputStream.xhtml" title="Interface for writing text. ">TextOutputStream</a>. </p>
<p>This class provides more formatting and line-oriented writing capabilities than writing raw strings into the stream.</p>
<p>All methods that write to the stream can throw any exceptions that the underlying stream throws. </p>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a2d8ffd21a5defa0c0cccb4cae8c79aa4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextWriter.xhtml#a2d8ffd21a5defa0c0cccb4cae8c79aa4">TextWriter</a> (const std::string &amp;filename)</td></tr>
<tr class="memdesc:a2d8ffd21a5defa0c0cccb4cae8c79aa4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a writer that writes to specified file.  <a href="#a2d8ffd21a5defa0c0cccb4cae8c79aa4">More...</a><br/></td></tr>
<tr class="separator:a2d8ffd21a5defa0c0cccb4cae8c79aa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32e12f85503d74940a73aea293198bbe"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextWriter.xhtml#a32e12f85503d74940a73aea293198bbe">TextWriter</a> (FILE *fp)</td></tr>
<tr class="memdesc:a32e12f85503d74940a73aea293198bbe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a writer that writes to specified file.  <a href="#a32e12f85503d74940a73aea293198bbe">More...</a><br/></td></tr>
<tr class="separator:a32e12f85503d74940a73aea293198bbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ad8fe5cb5d45d210076b6acc2bb3305"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextWriter.xhtml#a7ad8fe5cb5d45d210076b6acc2bb3305">TextWriter</a> (<a class="el" href="classgmx_1_1TextOutputStream.xhtml">TextOutputStream</a> *stream)</td></tr>
<tr class="memdesc:a7ad8fe5cb5d45d210076b6acc2bb3305"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a writer that writes to specified stream.  <a href="#a7ad8fe5cb5d45d210076b6acc2bb3305">More...</a><br/></td></tr>
<tr class="separator:a7ad8fe5cb5d45d210076b6acc2bb3305"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87717822eeaef8cfe9b9bddcdc69d068"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextWriter.xhtml#a87717822eeaef8cfe9b9bddcdc69d068">TextWriter</a> (const <a class="el" href="namespacegmx.xhtml#a1fdec6c0997f8c033905f1f82f253d25">TextOutputStreamPointer</a> &amp;stream)</td></tr>
<tr class="memdesc:a87717822eeaef8cfe9b9bddcdc69d068"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a writer that writes to specified stream.  <a href="#a87717822eeaef8cfe9b9bddcdc69d068">More...</a><br/></td></tr>
<tr class="separator:a87717822eeaef8cfe9b9bddcdc69d068"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87a974330d5791f7410e6b20e516d5ae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1TextLineWrapperSettings.xhtml">TextLineWrapperSettings</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextWriter.xhtml#a87a974330d5791f7410e6b20e516d5ae">wrapperSettings</a> ()</td></tr>
<tr class="memdesc:a87a974330d5791f7410e6b20e516d5ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows adjusting wrapping settings for the writer.  <a href="#a87a974330d5791f7410e6b20e516d5ae">More...</a><br/></td></tr>
<tr class="separator:a87a974330d5791f7410e6b20e516d5ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a6aceff08f3a9bb9c5514892ea3dc3e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextWriter.xhtml#a7a6aceff08f3a9bb9c5514892ea3dc3e">writeString</a> (const char *str)</td></tr>
<tr class="memdesc:a7a6aceff08f3a9bb9c5514892ea3dc3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a string to the stream.  <a href="#a7a6aceff08f3a9bb9c5514892ea3dc3e">More...</a><br/></td></tr>
<tr class="separator:a7a6aceff08f3a9bb9c5514892ea3dc3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6ec637edd2a0525a722775ff6118d81"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextWriter.xhtml#af6ec637edd2a0525a722775ff6118d81">writeString</a> (const std::string &amp;str)</td></tr>
<tr class="memdesc:af6ec637edd2a0525a722775ff6118d81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a string to the stream.  <a href="#af6ec637edd2a0525a722775ff6118d81">More...</a><br/></td></tr>
<tr class="separator:af6ec637edd2a0525a722775ff6118d81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5341367dcef6c8b27dca8c249b611dd1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextWriter.xhtml#a5341367dcef6c8b27dca8c249b611dd1">writeLine</a> (const char *line)</td></tr>
<tr class="memdesc:a5341367dcef6c8b27dca8c249b611dd1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a line to the stream.  <a href="#a5341367dcef6c8b27dca8c249b611dd1">More...</a><br/></td></tr>
<tr class="separator:a5341367dcef6c8b27dca8c249b611dd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63c33695252c2a9eec8f23b61b82a73a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextWriter.xhtml#a63c33695252c2a9eec8f23b61b82a73a">writeLine</a> (const std::string &amp;line)</td></tr>
<tr class="memdesc:a63c33695252c2a9eec8f23b61b82a73a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a line to the stream.  <a href="#a63c33695252c2a9eec8f23b61b82a73a">More...</a><br/></td></tr>
<tr class="separator:a63c33695252c2a9eec8f23b61b82a73a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8648ce2a6f353fe300ec05148e70c386"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8648ce2a6f353fe300ec05148e70c386"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextWriter.xhtml#a8648ce2a6f353fe300ec05148e70c386">writeLine</a> ()</td></tr>
<tr class="memdesc:a8648ce2a6f353fe300ec05148e70c386"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a newline to the stream. <br/></td></tr>
<tr class="separator:a8648ce2a6f353fe300ec05148e70c386"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21a2ed84930db8b70db2fde42dacca00"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextWriter.xhtml#a21a2ed84930db8b70db2fde42dacca00">ensureLineBreak</a> ()</td></tr>
<tr class="memdesc:a21a2ed84930db8b70db2fde42dacca00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a newline if previous output did not end in one.  <a href="#a21a2ed84930db8b70db2fde42dacca00">More...</a><br/></td></tr>
<tr class="separator:a21a2ed84930db8b70db2fde42dacca00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a730a830dc07436dae5ff40d941056329"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextWriter.xhtml#a730a830dc07436dae5ff40d941056329">ensureEmptyLine</a> ()</td></tr>
<tr class="memdesc:a730a830dc07436dae5ff40d941056329"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ensures that the next string written starts after an empty line.  <a href="#a730a830dc07436dae5ff40d941056329">More...</a><br/></td></tr>
<tr class="separator:a730a830dc07436dae5ff40d941056329"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb5664c1d354a35f621061f73888fb0d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aeb5664c1d354a35f621061f73888fb0d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextWriter.xhtml#aeb5664c1d354a35f621061f73888fb0d">close</a> ()</td></tr>
<tr class="memdesc:aeb5664c1d354a35f621061f73888fb0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Closes the underlying stream. <br/></td></tr>
<tr class="separator:aeb5664c1d354a35f621061f73888fb0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:abbde4743bd9082bacb2e0e999600df9f"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1TextWriter.xhtml#abbde4743bd9082bacb2e0e999600df9f">writeFileFromString</a> (const std::string &amp;filename, const std::string &amp;text)</td></tr>
<tr class="memdesc:abbde4743bd9082bacb2e0e999600df9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience method for writing a file from a string in a single call.  <a href="#abbde4743bd9082bacb2e0e999600df9f">More...</a><br/></td></tr>
<tr class="separator:abbde4743bd9082bacb2e0e999600df9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a2d8ffd21a5defa0c0cccb4cae8c79aa4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">gmx::TextWriter::TextWriter </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a writer that writes to specified file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Path to the file to open. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
    <tr><td class="paramname"><a class="el" href="classgmx_1_1FileIOError.xhtml" title="Exception class for file I/O errors. ">FileIOError</a></td><td>on any I/O error.</td></tr>
  </table>
  </dd>
</dl>
<p>This constructor is provided for convenience for writing directly to a file, without the need to construct multiple objects. </p>

</div>
</div>
<a class="anchor" id="a32e12f85503d74940a73aea293198bbe"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">gmx::TextWriter::TextWriter </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a writer that writes to specified file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fp</td><td>File handle to write to. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
    <tr><td class="paramname"><a class="el" href="classgmx_1_1FileIOError.xhtml" title="Exception class for file I/O errors. ">FileIOError</a></td><td>on any I/O error.</td></tr>
  </table>
  </dd>
</dl>
<p>This constructor is provided for interoperability with C-like code for writing directly to an already opened file, without the need to construct multiple objects.</p>
<p>The caller is responsible of closing <code>fp</code>; it is not allowed to call <a class="el" href="classgmx_1_1TextWriter.xhtml#aeb5664c1d354a35f621061f73888fb0d" title="Closes the underlying stream. ">close()</a> on the writer. </p>

</div>
</div>
<a class="anchor" id="a7ad8fe5cb5d45d210076b6acc2bb3305"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">gmx::TextWriter::TextWriter </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1TextOutputStream.xhtml">TextOutputStream</a> *&#160;</td>
          <td class="paramname"><em>stream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a writer that writes to specified stream. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">stream</td><td>Stream to write to. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>The caller is responsible of the lifetime of the stream (should remain in existence as long as the writer exists).</p>
<p>This constructor is provided for convenience for cases where the stream is not allocated with <code>new</code> and/or not managed by a std::shared_ptr (e.g., if the stream is an object on the stack). </p>

</div>
</div>
<a class="anchor" id="a87717822eeaef8cfe9b9bddcdc69d068"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">gmx::TextWriter::TextWriter </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacegmx.xhtml#a1fdec6c0997f8c033905f1f82f253d25">TextOutputStreamPointer</a> &amp;&#160;</td>
          <td class="paramname"><em>stream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a writer that writes to specified stream. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">stream</td><td>Stream to write to. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>The writer keeps a reference to the stream, so the caller can pass in a temporary if necessary. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a730a830dc07436dae5ff40d941056329"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::TextWriter::ensureEmptyLine </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Ensures that the next string written starts after an empty line. </p>
<p>Always terminates the current line (as with <a class="el" href="classgmx_1_1TextWriter.xhtml#a21a2ed84930db8b70db2fde42dacca00" title="Writes a newline if previous output did not end in one. ">ensureLineBreak()</a>), but the empty line is only written out when the next line is written, so that trailing newlines after final output can be avoided.</p>
<p>If nothing has been written using the writer, this method does nothing. </p>

</div>
</div>
<a class="anchor" id="a21a2ed84930db8b70db2fde42dacca00"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::TextWriter::ensureLineBreak </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Writes a newline if previous output did not end in one. </p>
<p>If nothing has been written using the writer, this method does nothing. </p>

</div>
</div>
<a class="anchor" id="a87a974330d5791f7410e6b20e516d5ae"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1TextLineWrapperSettings.xhtml">TextLineWrapperSettings</a> &amp; gmx::TextWriter::wrapperSettings </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allows adjusting wrapping settings for the writer. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000056">Todo:</a></b></dt><dd>Wrapping is not currently implemented for code that writes partial lines with <a class="el" href="classgmx_1_1TextWriter.xhtml#a7a6aceff08f3a9bb9c5514892ea3dc3e" title="Writes a string to the stream. ">writeString()</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="abbde4743bd9082bacb2e0e999600df9f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::TextWriter::writeFileFromString </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>text</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convenience method for writing a file from a string in a single call. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Name of the file to read. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">text</td><td>String to write to <code>filename</code>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
    <tr><td class="paramname"><a class="el" href="classgmx_1_1FileIOError.xhtml" title="Exception class for file I/O errors. ">FileIOError</a></td><td>on any I/O error.</td></tr>
  </table>
  </dd>
</dl>
<p>If <code>filename</code> exists, it is overwritten. </p>

</div>
</div>
<a class="anchor" id="a5341367dcef6c8b27dca8c249b611dd1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::TextWriter::writeLine </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>line</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Writes a line to the stream. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line to write.</td></tr>
  </table>
  </dd>
</dl>
<p>If <code>line</code> does not end in a newline, one newline is appended. Otherwise, works as <a class="el" href="classgmx_1_1TextWriter.xhtml#a7a6aceff08f3a9bb9c5514892ea3dc3e" title="Writes a string to the stream. ">writeString()</a>. </p>

</div>
</div>
<a class="anchor" id="a63c33695252c2a9eec8f23b61b82a73a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::TextWriter::writeLine </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>line</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Writes a line to the stream. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>Line to write.</td></tr>
  </table>
  </dd>
</dl>
<p>If <code>line</code> does not end in a newline, one newline is appended. Otherwise, works as <a class="el" href="classgmx_1_1TextWriter.xhtml#a7a6aceff08f3a9bb9c5514892ea3dc3e" title="Writes a string to the stream. ">writeString()</a>. </p>

</div>
</div>
<a class="anchor" id="a7a6aceff08f3a9bb9c5514892ea3dc3e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::TextWriter::writeString </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Writes a string to the stream. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to write. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af6ec637edd2a0525a722775ff6118d81"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::TextWriter::writeString </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Writes a string to the stream. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to write. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/gromacs/utility/<a class="el" href="textwriter_8h.xhtml">textwriter.h</a></li>
<li>src/gromacs/utility/textwriter.cpp</li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:19:42 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
