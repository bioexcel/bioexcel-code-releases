<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/simd/impl_reference/impl_reference_simd_double.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_71392c6f4b1ed3a32ba5c064e868a1ba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a798d384400d41a9e6864d9b1b8753fe.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_69a31023f2cb90cacd6802dc380f9733.xhtml">simd</a></li><li class="navelem"><a class="el" href="dir_14b36525801fb40dda8150620166f44d.xhtml">impl_reference</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a>  </div>
  <div class="headertitle">
<div class="title">impl_reference_simd_double.h File Reference<div class="ingroups"><a class="el" href="group__module__simd.xhtml">SIMD intrinsics interface (simd)</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;config.h&quot;</code><br/>
<code>#include &lt;cassert&gt;</code><br/>
<code>#include &lt;cmath&gt;</code><br/>
<code>#include &lt;cstddef&gt;</code><br/>
<code>#include &lt;cstdint&gt;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
<code>#include &lt;array&gt;</code><br/>
<code>#include &quot;<a class="el" href="fatalerror_8h.xhtml">gromacs/utility/fatalerror.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="impl__reference__definitions_8h.xhtml">impl_reference_definitions.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="impl__reference__simd__float_8h.xhtml">impl_reference_simd_float.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for impl_reference_simd_double.h:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="impl__reference__simd__double_8h__incl.svg" width="1222" height="306"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><div class="textblock"><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> This graph shows which files directly or indirectly include this file:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="impl__reference__simd__double_8h__dep__incl.svg" width="522" height="424"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Reference implementation, SIMD double precision. </p>
<dl class="section author"><dt>Author</dt><dd>Erik Lindahl <a href="#" onclick="location.href='mai'+'lto:'+'eri'+'k.'+'lin'+'da'+'hl@'+'sc'+'ili'+'fe'+'lab'+'.s'+'e'; return false;">erik.<span style="display: none;">.nosp@m.</span>lind<span style="display: none;">.nosp@m.</span>ahl@s<span style="display: none;">.nosp@m.</span>cili<span style="display: none;">.nosp@m.</span>felab<span style="display: none;">.nosp@m.</span>.se</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdDouble.xhtml">gmx::SimdDouble</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Double SIMD variable. Available if GMX_SIMD_HAVE_DOUBLE is 1.  <a href="classgmx_1_1SimdDouble.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdDInt32.xhtml">gmx::SimdDInt32</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD variable type to use for conversions to/from double.  <a href="classgmx_1_1SimdDInt32.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdDBool.xhtml">gmx::SimdDBool</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Boolean type for double SIMD data.  <a href="classgmx_1_1SimdDBool.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdDIBool.xhtml">gmx::SimdDIBool</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Boolean type for integer datatypes corresponding to double SIMD.  <a href="classgmx_1_1SimdDIBool.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation load/store operations for double precision floating point</div></td></tr>
<tr class="memitem:aca6f2a60f2104d5a19d51bf16fe4ecd2"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aca6f2a60f2104d5a19d51bf16fe4ecd2">gmx::simdLoad</a> (const double *m)</td></tr>
<tr class="memdesc:aca6f2a60f2104d5a19d51bf16fe4ecd2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load <a class="el" href="group__module__simd.xhtml#ga417e9d28b6310876bb2c69eb528c0a86">GMX_SIMD_DOUBLE_WIDTH</a> numbers from aligned memory.  <a href="#aca6f2a60f2104d5a19d51bf16fe4ecd2">More...</a><br/></td></tr>
<tr class="separator:aca6f2a60f2104d5a19d51bf16fe4ecd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c1227e97a6084a280a611c2934c8ee1"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a9c1227e97a6084a280a611c2934c8ee1">gmx::store</a> (double *m, SimdDouble a)</td></tr>
<tr class="memdesc:a9c1227e97a6084a280a611c2934c8ee1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store the contents of SIMD double variable to aligned memory m.  <a href="#a9c1227e97a6084a280a611c2934c8ee1">More...</a><br/></td></tr>
<tr class="separator:a9c1227e97a6084a280a611c2934c8ee1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4f7f04699111821557406cf7bfe75b9"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae4f7f04699111821557406cf7bfe75b9">gmx::simdLoadU</a> (const double *m)</td></tr>
<tr class="memdesc:ae4f7f04699111821557406cf7bfe75b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load SIMD double from unaligned memory.  <a href="#ae4f7f04699111821557406cf7bfe75b9">More...</a><br/></td></tr>
<tr class="separator:ae4f7f04699111821557406cf7bfe75b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a8c867df8fe75511871290626c367ed"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a9a8c867df8fe75511871290626c367ed">gmx::storeU</a> (double *m, SimdDouble a)</td></tr>
<tr class="memdesc:a9a8c867df8fe75511871290626c367ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store SIMD double to unaligned memory.  <a href="#a9a8c867df8fe75511871290626c367ed">More...</a><br/></td></tr>
<tr class="separator:a9a8c867df8fe75511871290626c367ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09dfcfeaf5bcd29a456e658026d65c01"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a09dfcfeaf5bcd29a456e658026d65c01">gmx::setZeroD</a> ()</td></tr>
<tr class="memdesc:a09dfcfeaf5bcd29a456e658026d65c01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set all SIMD double variable elements to 0.0.  <a href="#a09dfcfeaf5bcd29a456e658026d65c01">More...</a><br/></td></tr>
<tr class="separator:a09dfcfeaf5bcd29a456e658026d65c01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation load/store operations for integers (corresponding to double)</div></td></tr>
<tr class="memitem:a0943da18bf332314bf2d524586c728e5"><td class="memItemLeft" align="right" valign="top">static SimdDInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0943da18bf332314bf2d524586c728e5">gmx::simdLoadDI</a> (const std::int32_t *m)</td></tr>
<tr class="memdesc:a0943da18bf332314bf2d524586c728e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load aligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdDouble.xhtml">gmx::SimdDouble</a>.  <a href="#a0943da18bf332314bf2d524586c728e5">More...</a><br/></td></tr>
<tr class="separator:a0943da18bf332314bf2d524586c728e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4aef7840d04d5d9e2fabbc44445babad"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a4aef7840d04d5d9e2fabbc44445babad">gmx::store</a> (std::int32_t *m, SimdDInt32 a)</td></tr>
<tr class="memdesc:a4aef7840d04d5d9e2fabbc44445babad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store aligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdDouble.xhtml">gmx::SimdDouble</a>.  <a href="#a4aef7840d04d5d9e2fabbc44445babad">More...</a><br/></td></tr>
<tr class="separator:a4aef7840d04d5d9e2fabbc44445babad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a236d2b76779fdbdf5e6e9e9c5dd00a6d"><td class="memItemLeft" align="right" valign="top">static SimdDInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a236d2b76779fdbdf5e6e9e9c5dd00a6d">gmx::simdLoadUDI</a> (const std::int32_t *m)</td></tr>
<tr class="memdesc:a236d2b76779fdbdf5e6e9e9c5dd00a6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load unaligned integer SIMD data, width corresponds to <a class="el" href="classgmx_1_1SimdDouble.xhtml">gmx::SimdDouble</a>.  <a href="#a236d2b76779fdbdf5e6e9e9c5dd00a6d">More...</a><br/></td></tr>
<tr class="separator:a236d2b76779fdbdf5e6e9e9c5dd00a6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe60b257e28900c4cf3cc8c45a0d1d64"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#abe60b257e28900c4cf3cc8c45a0d1d64">gmx::storeU</a> (std::int32_t *m, SimdDInt32 a)</td></tr>
<tr class="memdesc:abe60b257e28900c4cf3cc8c45a0d1d64"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store unaligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdDouble.xhtml">gmx::SimdDouble</a>.  <a href="#abe60b257e28900c4cf3cc8c45a0d1d64">More...</a><br/></td></tr>
<tr class="separator:abe60b257e28900c4cf3cc8c45a0d1d64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b6fe2f4cd666b23f1c0e7aa8b0a31d0"><td class="memItemLeft" align="right" valign="top">static SimdDInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a9b6fe2f4cd666b23f1c0e7aa8b0a31d0">gmx::setZeroDI</a> ()</td></tr>
<tr class="memdesc:a9b6fe2f4cd666b23f1c0e7aa8b0a31d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set all SIMD (double) integer variable elements to 0.  <a href="#a9b6fe2f4cd666b23f1c0e7aa8b0a31d0">More...</a><br/></td></tr>
<tr class="separator:a9b6fe2f4cd666b23f1c0e7aa8b0a31d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3db712af1745296d49be276840062dee"><td class="memTemplParams" colspan="2">template&lt;int index&gt; </td></tr>
<tr class="memitem:a3db712af1745296d49be276840062dee"><td class="memTemplItemLeft" align="right" valign="top">static std::int32_t gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3db712af1745296d49be276840062dee">gmx::extract</a> (SimdDInt32 a)</td></tr>
<tr class="memdesc:a3db712af1745296d49be276840062dee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract element with index i from <a class="el" href="classgmx_1_1SimdDInt32.xhtml">gmx::SimdDInt32</a>.  <a href="#a3db712af1745296d49be276840062dee">More...</a><br/></td></tr>
<tr class="separator:a3db712af1745296d49be276840062dee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation double precision floating-point bitwise logical operations</div></td></tr>
<tr class="memitem:a1f1cadff23a6ebe7ef211147359a3841"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a1f1cadff23a6ebe7ef211147359a3841">gmx::operator&amp;</a> (SimdDouble a, SimdDouble b)</td></tr>
<tr class="memdesc:a1f1cadff23a6ebe7ef211147359a3841"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise and for two SIMD double variables.  <a href="#a1f1cadff23a6ebe7ef211147359a3841">More...</a><br/></td></tr>
<tr class="separator:a1f1cadff23a6ebe7ef211147359a3841"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a374d7e1788f0ec4f2c5952d8d9ebdada"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a374d7e1788f0ec4f2c5952d8d9ebdada">gmx::andNot</a> (SimdDouble a, SimdDouble b)</td></tr>
<tr class="memdesc:a374d7e1788f0ec4f2c5952d8d9ebdada"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise andnot for SIMD double.  <a href="#a374d7e1788f0ec4f2c5952d8d9ebdada">More...</a><br/></td></tr>
<tr class="separator:a374d7e1788f0ec4f2c5952d8d9ebdada"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72cbfbcd5395b355e242f2ef4284f5c5"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a72cbfbcd5395b355e242f2ef4284f5c5">gmx::operator|</a> (SimdDouble a, SimdDouble b)</td></tr>
<tr class="memdesc:a72cbfbcd5395b355e242f2ef4284f5c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise or for SIMD double.  <a href="#a72cbfbcd5395b355e242f2ef4284f5c5">More...</a><br/></td></tr>
<tr class="separator:a72cbfbcd5395b355e242f2ef4284f5c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad65f7d7aa6d2a6c4b697ac0be0f3a616"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad65f7d7aa6d2a6c4b697ac0be0f3a616">gmx::operator^</a> (SimdDouble a, SimdDouble b)</td></tr>
<tr class="memdesc:ad65f7d7aa6d2a6c4b697ac0be0f3a616"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise xor for SIMD double.  <a href="#ad65f7d7aa6d2a6c4b697ac0be0f3a616">More...</a><br/></td></tr>
<tr class="separator:ad65f7d7aa6d2a6c4b697ac0be0f3a616"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation double precision floating-point arithmetics</div></td></tr>
<tr class="memitem:a436c58e62a6941821532df1b75b4c99f"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a436c58e62a6941821532df1b75b4c99f">gmx::operator+</a> (SimdDouble a, SimdDouble b)</td></tr>
<tr class="memdesc:a436c58e62a6941821532df1b75b4c99f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add two double SIMD variables.  <a href="#a436c58e62a6941821532df1b75b4c99f">More...</a><br/></td></tr>
<tr class="separator:a436c58e62a6941821532df1b75b4c99f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97d6e522f43e9b9501d4c0c6b94ca6b9"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a97d6e522f43e9b9501d4c0c6b94ca6b9">gmx::operator-</a> (SimdDouble a, SimdDouble b)</td></tr>
<tr class="memdesc:a97d6e522f43e9b9501d4c0c6b94ca6b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtract two double SIMD variables.  <a href="#a97d6e522f43e9b9501d4c0c6b94ca6b9">More...</a><br/></td></tr>
<tr class="separator:a97d6e522f43e9b9501d4c0c6b94ca6b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0b76cf454d06f1d328d25b58135b570"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa0b76cf454d06f1d328d25b58135b570">gmx::operator-</a> (SimdDouble a)</td></tr>
<tr class="memdesc:aa0b76cf454d06f1d328d25b58135b570"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double precision negate.  <a href="#aa0b76cf454d06f1d328d25b58135b570">More...</a><br/></td></tr>
<tr class="separator:aa0b76cf454d06f1d328d25b58135b570"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a520d9799e6ece1f2446a51eee48ea4"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3a520d9799e6ece1f2446a51eee48ea4">gmx::operator*</a> (SimdDouble a, SimdDouble b)</td></tr>
<tr class="memdesc:a3a520d9799e6ece1f2446a51eee48ea4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply two double SIMD variables.  <a href="#a3a520d9799e6ece1f2446a51eee48ea4">More...</a><br/></td></tr>
<tr class="separator:a3a520d9799e6ece1f2446a51eee48ea4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b86949473ebaef8ccbd4d2852947839"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3b86949473ebaef8ccbd4d2852947839">gmx::fma</a> (SimdDouble a, SimdDouble b, SimdDouble c)</td></tr>
<tr class="memdesc:a3b86949473ebaef8ccbd4d2852947839"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double Fused-multiply-add. Result is a*b+c.  <a href="#a3b86949473ebaef8ccbd4d2852947839">More...</a><br/></td></tr>
<tr class="separator:a3b86949473ebaef8ccbd4d2852947839"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86c14cb73d3484b0a5e01e74640a4ee3"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a86c14cb73d3484b0a5e01e74640a4ee3">gmx::fms</a> (SimdDouble a, SimdDouble b, SimdDouble c)</td></tr>
<tr class="memdesc:a86c14cb73d3484b0a5e01e74640a4ee3"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double Fused-multiply-subtract. Result is a*b-c.  <a href="#a86c14cb73d3484b0a5e01e74640a4ee3">More...</a><br/></td></tr>
<tr class="separator:a86c14cb73d3484b0a5e01e74640a4ee3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaeca5c242a059145a90dc091db78ad57"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aaeca5c242a059145a90dc091db78ad57">gmx::fnma</a> (SimdDouble a, SimdDouble b, SimdDouble c)</td></tr>
<tr class="memdesc:aaeca5c242a059145a90dc091db78ad57"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double Fused-negated-multiply-add. Result is -a*b+c.  <a href="#aaeca5c242a059145a90dc091db78ad57">More...</a><br/></td></tr>
<tr class="separator:aaeca5c242a059145a90dc091db78ad57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44d26f7a7b8d6088d41be0b646f71543"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a44d26f7a7b8d6088d41be0b646f71543">gmx::fnms</a> (SimdDouble a, SimdDouble b, SimdDouble c)</td></tr>
<tr class="memdesc:a44d26f7a7b8d6088d41be0b646f71543"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double Fused-negated-multiply-subtract. Result is -a*b-c.  <a href="#a44d26f7a7b8d6088d41be0b646f71543">More...</a><br/></td></tr>
<tr class="separator:a44d26f7a7b8d6088d41be0b646f71543"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add1d990b3c0c841a88ea4e4d4df90425"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#add1d990b3c0c841a88ea4e4d4df90425">gmx::rsqrt</a> (SimdDouble x)</td></tr>
<tr class="memdesc:add1d990b3c0c841a88ea4e4d4df90425"><td class="mdescLeft">&#160;</td><td class="mdescRight">double SIMD 1.0/sqrt(x) lookup.  <a href="#add1d990b3c0c841a88ea4e4d4df90425">More...</a><br/></td></tr>
<tr class="separator:add1d990b3c0c841a88ea4e4d4df90425"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c2c3eae5c42d898373ec6e90dd99064"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a4c2c3eae5c42d898373ec6e90dd99064">gmx::rcp</a> (SimdDouble x)</td></tr>
<tr class="memdesc:a4c2c3eae5c42d898373ec6e90dd99064"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double 1.0/x lookup.  <a href="#a4c2c3eae5c42d898373ec6e90dd99064">More...</a><br/></td></tr>
<tr class="separator:a4c2c3eae5c42d898373ec6e90dd99064"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adab86e04bd62248ab68039d8983a9206"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#adab86e04bd62248ab68039d8983a9206">gmx::maskAdd</a> (SimdDouble a, SimdDouble b, SimdDBool m)</td></tr>
<tr class="memdesc:adab86e04bd62248ab68039d8983a9206"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add two double SIMD variables, masked version.  <a href="#adab86e04bd62248ab68039d8983a9206">More...</a><br/></td></tr>
<tr class="separator:adab86e04bd62248ab68039d8983a9206"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb416d879be4463f38af9b670583fd65"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#afb416d879be4463f38af9b670583fd65">gmx::maskzMul</a> (SimdDouble a, SimdDouble b, SimdDBool m)</td></tr>
<tr class="memdesc:afb416d879be4463f38af9b670583fd65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply two double SIMD variables, masked version.  <a href="#afb416d879be4463f38af9b670583fd65">More...</a><br/></td></tr>
<tr class="separator:afb416d879be4463f38af9b670583fd65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa689a6c17b1d60d62b6fcd51daa7639"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aaa689a6c17b1d60d62b6fcd51daa7639">gmx::maskzFma</a> (SimdDouble a, SimdDouble b, SimdDouble c, SimdDBool m)</td></tr>
<tr class="memdesc:aaa689a6c17b1d60d62b6fcd51daa7639"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double fused multiply-add, masked version.  <a href="#aaa689a6c17b1d60d62b6fcd51daa7639">More...</a><br/></td></tr>
<tr class="separator:aaa689a6c17b1d60d62b6fcd51daa7639"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bbc24d75706e7515afc2f2071f1a469"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3bbc24d75706e7515afc2f2071f1a469">gmx::maskzRsqrt</a> (SimdDouble x, SimdDBool m)</td></tr>
<tr class="memdesc:a3bbc24d75706e7515afc2f2071f1a469"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double 1.0/sqrt(x) lookup, masked version.  <a href="#a3bbc24d75706e7515afc2f2071f1a469">More...</a><br/></td></tr>
<tr class="separator:a3bbc24d75706e7515afc2f2071f1a469"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f425368efd0895189b0e11d4b5d4ccc"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0f425368efd0895189b0e11d4b5d4ccc">gmx::maskzRcp</a> (SimdDouble x, SimdDBool m)</td></tr>
<tr class="memdesc:a0f425368efd0895189b0e11d4b5d4ccc"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double 1.0/x lookup, masked version.  <a href="#a0f425368efd0895189b0e11d4b5d4ccc">More...</a><br/></td></tr>
<tr class="separator:a0f425368efd0895189b0e11d4b5d4ccc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ccaa7e4df0a45208a4c316d8b71d01c"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a7ccaa7e4df0a45208a4c316d8b71d01c">gmx::abs</a> (SimdDouble a)</td></tr>
<tr class="memdesc:a7ccaa7e4df0a45208a4c316d8b71d01c"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double floating-point fabs().  <a href="#a7ccaa7e4df0a45208a4c316d8b71d01c">More...</a><br/></td></tr>
<tr class="separator:a7ccaa7e4df0a45208a4c316d8b71d01c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aceb279f0a831efc0d8e6be7d96c9e6d2"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aceb279f0a831efc0d8e6be7d96c9e6d2">gmx::max</a> (SimdDouble a, SimdDouble b)</td></tr>
<tr class="memdesc:aceb279f0a831efc0d8e6be7d96c9e6d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set each SIMD double element to the largest from two variables.  <a href="#aceb279f0a831efc0d8e6be7d96c9e6d2">More...</a><br/></td></tr>
<tr class="separator:aceb279f0a831efc0d8e6be7d96c9e6d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48c0e6ede1542c0a5eee7094c56d51b2"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a48c0e6ede1542c0a5eee7094c56d51b2">gmx::min</a> (SimdDouble a, SimdDouble b)</td></tr>
<tr class="memdesc:a48c0e6ede1542c0a5eee7094c56d51b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set each SIMD double element to the smallest from two variables.  <a href="#a48c0e6ede1542c0a5eee7094c56d51b2">More...</a><br/></td></tr>
<tr class="separator:a48c0e6ede1542c0a5eee7094c56d51b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae99869398e453b11f1305a657ce8d886"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae99869398e453b11f1305a657ce8d886">gmx::round</a> (SimdDouble a)</td></tr>
<tr class="memdesc:ae99869398e453b11f1305a657ce8d886"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD double round to nearest integer value (in floating-point format).  <a href="#ae99869398e453b11f1305a657ce8d886">More...</a><br/></td></tr>
<tr class="separator:ae99869398e453b11f1305a657ce8d886"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc9e911dbe1d9be0b86d8870a91b399c"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#acc9e911dbe1d9be0b86d8870a91b399c">gmx::trunc</a> (SimdDouble a)</td></tr>
<tr class="memdesc:acc9e911dbe1d9be0b86d8870a91b399c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate SIMD double, i.e. round towards zero - common hardware instruction.  <a href="#acc9e911dbe1d9be0b86d8870a91b399c">More...</a><br/></td></tr>
<tr class="separator:acc9e911dbe1d9be0b86d8870a91b399c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93cd53cbf5857c1350814602d5e6418d"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a93cd53cbf5857c1350814602d5e6418d">gmx::frexp</a> (SimdDouble value, SimdDInt32 *exponent)</td></tr>
<tr class="memdesc:a93cd53cbf5857c1350814602d5e6418d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract (integer) exponent and fraction from double precision SIMD.  <a href="#a93cd53cbf5857c1350814602d5e6418d">More...</a><br/></td></tr>
<tr class="separator:a93cd53cbf5857c1350814602d5e6418d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86c665079d6936b82f5b7bc065dd13aa"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a86c665079d6936b82f5b7bc065dd13aa">gmx::ldexp</a> (SimdDouble value, SimdDInt32 exponent)</td></tr>
<tr class="memdesc:a86c665079d6936b82f5b7bc065dd13aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply a SIMD double value by the number 2 raised to an exp power.  <a href="#a86c665079d6936b82f5b7bc065dd13aa">More...</a><br/></td></tr>
<tr class="separator:a86c665079d6936b82f5b7bc065dd13aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62d67c8b5c817dab3ee4acdd5779c14b"><td class="memItemLeft" align="right" valign="top">static double gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a62d67c8b5c817dab3ee4acdd5779c14b">gmx::reduce</a> (SimdDouble a)</td></tr>
<tr class="memdesc:a62d67c8b5c817dab3ee4acdd5779c14b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return sum of all elements in SIMD double variable.  <a href="#a62d67c8b5c817dab3ee4acdd5779c14b">More...</a><br/></td></tr>
<tr class="separator:a62d67c8b5c817dab3ee4acdd5779c14b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation double precision floating-point comparison, boolean, selection.</div></td></tr>
<tr class="memitem:ad31f9caa693d0383acaf2b1b174ab0da"><td class="memItemLeft" align="right" valign="top">static SimdDBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad31f9caa693d0383acaf2b1b174ab0da">gmx::operator==</a> (SimdDouble a, SimdDouble b)</td></tr>
<tr class="memdesc:ad31f9caa693d0383acaf2b1b174ab0da"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD a==b for double SIMD.  <a href="#ad31f9caa693d0383acaf2b1b174ab0da">More...</a><br/></td></tr>
<tr class="separator:ad31f9caa693d0383acaf2b1b174ab0da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9711191866c2d823326c3bab599914b9"><td class="memItemLeft" align="right" valign="top">static SimdDBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a9711191866c2d823326c3bab599914b9">gmx::operator!=</a> (SimdDouble a, SimdDouble b)</td></tr>
<tr class="memdesc:a9711191866c2d823326c3bab599914b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD a!=b for double SIMD.  <a href="#a9711191866c2d823326c3bab599914b9">More...</a><br/></td></tr>
<tr class="separator:a9711191866c2d823326c3bab599914b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8d93f6a684ac7c60b588ed9f7241b97"><td class="memItemLeft" align="right" valign="top">static SimdDBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad8d93f6a684ac7c60b588ed9f7241b97">gmx::operator&lt;</a> (SimdDouble a, SimdDouble b)</td></tr>
<tr class="memdesc:ad8d93f6a684ac7c60b588ed9f7241b97"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD a&lt;b for double SIMD.  <a href="#ad8d93f6a684ac7c60b588ed9f7241b97">More...</a><br/></td></tr>
<tr class="separator:ad8d93f6a684ac7c60b588ed9f7241b97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c82364af392a21816e7eedf1a086812"><td class="memItemLeft" align="right" valign="top">static SimdDBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2c82364af392a21816e7eedf1a086812">gmx::operator&lt;=</a> (SimdDouble a, SimdDouble b)</td></tr>
<tr class="memdesc:a2c82364af392a21816e7eedf1a086812"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD a&lt;=b for double SIMD.  <a href="#a2c82364af392a21816e7eedf1a086812">More...</a><br/></td></tr>
<tr class="separator:a2c82364af392a21816e7eedf1a086812"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c87788b1cb09e4e6bfdf94f83f1ec76"><td class="memItemLeft" align="right" valign="top">static SimdDBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a5c87788b1cb09e4e6bfdf94f83f1ec76">gmx::testBits</a> (SimdDouble a)</td></tr>
<tr class="memdesc:a5c87788b1cb09e4e6bfdf94f83f1ec76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if any bits are set in the single precision SIMD.  <a href="#a5c87788b1cb09e4e6bfdf94f83f1ec76">More...</a><br/></td></tr>
<tr class="separator:a5c87788b1cb09e4e6bfdf94f83f1ec76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afccdf85d0ee6c0e8a8ca8070010cc268"><td class="memItemLeft" align="right" valign="top">static SimdDBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#afccdf85d0ee6c0e8a8ca8070010cc268">gmx::operator&amp;&amp;</a> (SimdDBool a, SimdDBool b)</td></tr>
<tr class="memdesc:afccdf85d0ee6c0e8a8ca8070010cc268"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical <em>and</em> on double precision SIMD booleans.  <a href="#afccdf85d0ee6c0e8a8ca8070010cc268">More...</a><br/></td></tr>
<tr class="separator:afccdf85d0ee6c0e8a8ca8070010cc268"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1da27c5bc4fd40afe78810c7b6e0730"><td class="memItemLeft" align="right" valign="top">static SimdDBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad1da27c5bc4fd40afe78810c7b6e0730">gmx::operator||</a> (SimdDBool a, SimdDBool b)</td></tr>
<tr class="memdesc:ad1da27c5bc4fd40afe78810c7b6e0730"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical <em>or</em> on double precision SIMD booleans.  <a href="#ad1da27c5bc4fd40afe78810c7b6e0730">More...</a><br/></td></tr>
<tr class="separator:ad1da27c5bc4fd40afe78810c7b6e0730"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6391860ba12e41a4a827077b6037f98"><td class="memItemLeft" align="right" valign="top">static bool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa6391860ba12e41a4a827077b6037f98">gmx::anyTrue</a> (SimdDBool a)</td></tr>
<tr class="memdesc:aa6391860ba12e41a4a827077b6037f98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns non-zero if any of the boolean in SIMD a is True, otherwise 0.  <a href="#aa6391860ba12e41a4a827077b6037f98">More...</a><br/></td></tr>
<tr class="separator:aa6391860ba12e41a4a827077b6037f98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb2e8393818311d9b97ab723b8150e77"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#adb2e8393818311d9b97ab723b8150e77">gmx::selectByMask</a> (SimdDouble a, SimdDBool mask)</td></tr>
<tr class="memdesc:adb2e8393818311d9b97ab723b8150e77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from double precision SIMD variable where boolean is true.  <a href="#adb2e8393818311d9b97ab723b8150e77">More...</a><br/></td></tr>
<tr class="separator:adb2e8393818311d9b97ab723b8150e77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ad9dbb3900122823a8c86435335d3e6"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2ad9dbb3900122823a8c86435335d3e6">gmx::selectByNotMask</a> (SimdDouble a, SimdDBool mask)</td></tr>
<tr class="memdesc:a2ad9dbb3900122823a8c86435335d3e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from double precision SIMD variable where boolean is false.  <a href="#a2ad9dbb3900122823a8c86435335d3e6">More...</a><br/></td></tr>
<tr class="separator:a2ad9dbb3900122823a8c86435335d3e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa089539a35e39d68f6c8b40421e0a68e"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa089539a35e39d68f6c8b40421e0a68e">gmx::blend</a> (SimdDouble a, SimdDouble b, SimdDBool sel)</td></tr>
<tr class="memdesc:aa089539a35e39d68f6c8b40421e0a68e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector-blend SIMD double selection.  <a href="#aa089539a35e39d68f6c8b40421e0a68e">More...</a><br/></td></tr>
<tr class="separator:aa089539a35e39d68f6c8b40421e0a68e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation integer (corresponding to double) bitwise logical operations</div></td></tr>
<tr class="memitem:a34f3bd81d4cc0d29e1811642fcb320d6"><td class="memItemLeft" align="right" valign="top">static SimdDInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a34f3bd81d4cc0d29e1811642fcb320d6">gmx::operator&lt;&lt;</a> (SimdDInt32 a, int n)</td></tr>
<tr class="memdesc:a34f3bd81d4cc0d29e1811642fcb320d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD integer shift left logical, based on immediate value.  <a href="#a34f3bd81d4cc0d29e1811642fcb320d6">More...</a><br/></td></tr>
<tr class="separator:a34f3bd81d4cc0d29e1811642fcb320d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a574a9e9fc8c684d24234850bee75ce8e"><td class="memItemLeft" align="right" valign="top">static SimdDInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a574a9e9fc8c684d24234850bee75ce8e">gmx::operator&gt;&gt;</a> (SimdDInt32 a, int n)</td></tr>
<tr class="memdesc:a574a9e9fc8c684d24234850bee75ce8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD integer shift right logical, based on immediate value.  <a href="#a574a9e9fc8c684d24234850bee75ce8e">More...</a><br/></td></tr>
<tr class="separator:a574a9e9fc8c684d24234850bee75ce8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8db7e6183dba97097e0f1379c6368dad"><td class="memItemLeft" align="right" valign="top">static SimdDInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a8db7e6183dba97097e0f1379c6368dad">gmx::operator&amp;</a> (SimdDInt32 a, SimdDInt32 b)</td></tr>
<tr class="memdesc:a8db7e6183dba97097e0f1379c6368dad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD bitwise and.  <a href="#a8db7e6183dba97097e0f1379c6368dad">More...</a><br/></td></tr>
<tr class="separator:a8db7e6183dba97097e0f1379c6368dad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3ee5a899ca3b9e9aafd6fd6323537e0"><td class="memItemLeft" align="right" valign="top">static SimdDInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae3ee5a899ca3b9e9aafd6fd6323537e0">gmx::andNot</a> (SimdDInt32 a, SimdDInt32 b)</td></tr>
<tr class="memdesc:ae3ee5a899ca3b9e9aafd6fd6323537e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD bitwise not/complement.  <a href="#ae3ee5a899ca3b9e9aafd6fd6323537e0">More...</a><br/></td></tr>
<tr class="separator:ae3ee5a899ca3b9e9aafd6fd6323537e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65d3eb9cd43b33b4665dfe676c0e79d2"><td class="memItemLeft" align="right" valign="top">static SimdDInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a65d3eb9cd43b33b4665dfe676c0e79d2">gmx::operator|</a> (SimdDInt32 a, SimdDInt32 b)</td></tr>
<tr class="memdesc:a65d3eb9cd43b33b4665dfe676c0e79d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD bitwise or.  <a href="#a65d3eb9cd43b33b4665dfe676c0e79d2">More...</a><br/></td></tr>
<tr class="separator:a65d3eb9cd43b33b4665dfe676c0e79d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba7ccd2477ecf6b07f5b7696d9490038"><td class="memItemLeft" align="right" valign="top">static SimdDInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aba7ccd2477ecf6b07f5b7696d9490038">gmx::operator^</a> (SimdDInt32 a, SimdDInt32 b)</td></tr>
<tr class="memdesc:aba7ccd2477ecf6b07f5b7696d9490038"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD bitwise xor.  <a href="#aba7ccd2477ecf6b07f5b7696d9490038">More...</a><br/></td></tr>
<tr class="separator:aba7ccd2477ecf6b07f5b7696d9490038"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation integer (corresponding to double) arithmetics</div></td></tr>
<tr class="memitem:ae94ff177ebee1634f158cb0d7ff8b1a1"><td class="memItemLeft" align="right" valign="top">static SimdDInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae94ff177ebee1634f158cb0d7ff8b1a1">gmx::operator+</a> (SimdDInt32 a, SimdDInt32 b)</td></tr>
<tr class="memdesc:ae94ff177ebee1634f158cb0d7ff8b1a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add SIMD integers.  <a href="#ae94ff177ebee1634f158cb0d7ff8b1a1">More...</a><br/></td></tr>
<tr class="separator:ae94ff177ebee1634f158cb0d7ff8b1a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a669d0b90b5b52a929462ae00735125c0"><td class="memItemLeft" align="right" valign="top">static SimdDInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a669d0b90b5b52a929462ae00735125c0">gmx::operator-</a> (SimdDInt32 a, SimdDInt32 b)</td></tr>
<tr class="memdesc:a669d0b90b5b52a929462ae00735125c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtract SIMD integers.  <a href="#a669d0b90b5b52a929462ae00735125c0">More...</a><br/></td></tr>
<tr class="separator:a669d0b90b5b52a929462ae00735125c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc27ad2d3586f1a673bd0c9c1f344f4f"><td class="memItemLeft" align="right" valign="top">static SimdDInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#acc27ad2d3586f1a673bd0c9c1f344f4f">gmx::operator*</a> (SimdDInt32 a, SimdDInt32 b)</td></tr>
<tr class="memdesc:acc27ad2d3586f1a673bd0c9c1f344f4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply SIMD integers.  <a href="#acc27ad2d3586f1a673bd0c9c1f344f4f">More...</a><br/></td></tr>
<tr class="separator:acc27ad2d3586f1a673bd0c9c1f344f4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation integer (corresponding to double) comparisons, boolean selection</div></td></tr>
<tr class="memitem:a2f054cf4aa61343e3a940b6d64939c5c"><td class="memItemLeft" align="right" valign="top">static SimdDIBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2f054cf4aa61343e3a940b6d64939c5c">gmx::operator==</a> (SimdDInt32 a, SimdDInt32 b)</td></tr>
<tr class="memdesc:a2f054cf4aa61343e3a940b6d64939c5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equality comparison of two integers corresponding to double values.  <a href="#a2f054cf4aa61343e3a940b6d64939c5c">More...</a><br/></td></tr>
<tr class="separator:a2f054cf4aa61343e3a940b6d64939c5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a464359cf52613efaacad1cb0f39832bc"><td class="memItemLeft" align="right" valign="top">static SimdDIBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a464359cf52613efaacad1cb0f39832bc">gmx::operator&lt;</a> (SimdDInt32 a, SimdDInt32 b)</td></tr>
<tr class="memdesc:a464359cf52613efaacad1cb0f39832bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Less-than comparison of two SIMD integers corresponding to double values.  <a href="#a464359cf52613efaacad1cb0f39832bc">More...</a><br/></td></tr>
<tr class="separator:a464359cf52613efaacad1cb0f39832bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2ea05053a363baccc4a01d7d0bc137d"><td class="memItemLeft" align="right" valign="top">static SimdDIBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af2ea05053a363baccc4a01d7d0bc137d">gmx::testBits</a> (SimdDInt32 a)</td></tr>
<tr class="memdesc:af2ea05053a363baccc4a01d7d0bc137d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if any bit is set in each element.  <a href="#af2ea05053a363baccc4a01d7d0bc137d">More...</a><br/></td></tr>
<tr class="separator:af2ea05053a363baccc4a01d7d0bc137d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae41bec54342cb6c56e395fab2ac3dc2"><td class="memItemLeft" align="right" valign="top">static SimdDIBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aae41bec54342cb6c56e395fab2ac3dc2">gmx::operator&amp;&amp;</a> (SimdDIBool a, SimdDIBool b)</td></tr>
<tr class="memdesc:aae41bec54342cb6c56e395fab2ac3dc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical AND on <a class="el" href="classgmx_1_1SimdDIBool.xhtml" title="Boolean type for integer datatypes corresponding to double SIMD. ">SimdDIBool</a>.  <a href="#aae41bec54342cb6c56e395fab2ac3dc2">More...</a><br/></td></tr>
<tr class="separator:aae41bec54342cb6c56e395fab2ac3dc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2382ca9a262a0503bb5dcfcec09df671"><td class="memItemLeft" align="right" valign="top">static SimdDIBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a2382ca9a262a0503bb5dcfcec09df671">gmx::operator||</a> (SimdDIBool a, SimdDIBool b)</td></tr>
<tr class="memdesc:a2382ca9a262a0503bb5dcfcec09df671"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical OR on <a class="el" href="classgmx_1_1SimdDIBool.xhtml" title="Boolean type for integer datatypes corresponding to double SIMD. ">SimdDIBool</a>.  <a href="#a2382ca9a262a0503bb5dcfcec09df671">More...</a><br/></td></tr>
<tr class="separator:a2382ca9a262a0503bb5dcfcec09df671"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01b540961fe7e3f5aede8df5bba89237"><td class="memItemLeft" align="right" valign="top">static bool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a01b540961fe7e3f5aede8df5bba89237">gmx::anyTrue</a> (SimdDIBool a)</td></tr>
<tr class="memdesc:a01b540961fe7e3f5aede8df5bba89237"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if any of the boolean in x is True, otherwise 0.  <a href="#a01b540961fe7e3f5aede8df5bba89237">More...</a><br/></td></tr>
<tr class="separator:a01b540961fe7e3f5aede8df5bba89237"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41408567ca23cb56ace128e8fe0be4f4"><td class="memItemLeft" align="right" valign="top">static SimdDInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a41408567ca23cb56ace128e8fe0be4f4">gmx::selectByMask</a> (SimdDInt32 a, SimdDIBool mask)</td></tr>
<tr class="memdesc:a41408567ca23cb56ace128e8fe0be4f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from <a class="el" href="classgmx_1_1SimdDInt32.xhtml">gmx::SimdDInt32</a> variable where boolean is true.  <a href="#a41408567ca23cb56ace128e8fe0be4f4">More...</a><br/></td></tr>
<tr class="separator:a41408567ca23cb56ace128e8fe0be4f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5465630a9899275f6ab90f2e0af66554"><td class="memItemLeft" align="right" valign="top">static SimdDInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a5465630a9899275f6ab90f2e0af66554">gmx::selectByNotMask</a> (SimdDInt32 a, SimdDIBool mask)</td></tr>
<tr class="memdesc:a5465630a9899275f6ab90f2e0af66554"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from <a class="el" href="classgmx_1_1SimdDInt32.xhtml">gmx::SimdDInt32</a> variable where boolean is false.  <a href="#a5465630a9899275f6ab90f2e0af66554">More...</a><br/></td></tr>
<tr class="separator:a5465630a9899275f6ab90f2e0af66554"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a897cd563974628f57a983656bc4f0be5"><td class="memItemLeft" align="right" valign="top">static SimdDInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a897cd563974628f57a983656bc4f0be5">gmx::blend</a> (SimdDInt32 a, SimdDInt32 b, SimdDIBool sel)</td></tr>
<tr class="memdesc:a897cd563974628f57a983656bc4f0be5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector-blend SIMD integer selection.  <a href="#a897cd563974628f57a983656bc4f0be5">More...</a><br/></td></tr>
<tr class="separator:a897cd563974628f57a983656bc4f0be5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation conversion operations</div></td></tr>
<tr class="memitem:ab44adfad19a5d4f810428dea125c2618"><td class="memItemLeft" align="right" valign="top">static SimdDInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ab44adfad19a5d4f810428dea125c2618">gmx::cvtR2I</a> (SimdDouble a)</td></tr>
<tr class="memdesc:ab44adfad19a5d4f810428dea125c2618"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round double precision floating point to integer.  <a href="#ab44adfad19a5d4f810428dea125c2618">More...</a><br/></td></tr>
<tr class="separator:ab44adfad19a5d4f810428dea125c2618"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4adbb04ea5039d62805c3082368dd76"><td class="memItemLeft" align="right" valign="top">static SimdDInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ac4adbb04ea5039d62805c3082368dd76">gmx::cvttR2I</a> (SimdDouble a)</td></tr>
<tr class="memdesc:ac4adbb04ea5039d62805c3082368dd76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate double precision floating point to integer.  <a href="#ac4adbb04ea5039d62805c3082368dd76">More...</a><br/></td></tr>
<tr class="separator:ac4adbb04ea5039d62805c3082368dd76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97d21ad971c1efb6685f073f344590cc"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a97d21ad971c1efb6685f073f344590cc">gmx::cvtI2R</a> (SimdDInt32 a)</td></tr>
<tr class="memdesc:a97d21ad971c1efb6685f073f344590cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert integer to double precision floating point.  <a href="#a97d21ad971c1efb6685f073f344590cc">More...</a><br/></td></tr>
<tr class="separator:a97d21ad971c1efb6685f073f344590cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15023cda21995e0a86c76416fff7575e"><td class="memItemLeft" align="right" valign="top">static SimdDIBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a15023cda21995e0a86c76416fff7575e">gmx::cvtB2IB</a> (SimdDBool a)</td></tr>
<tr class="memdesc:a15023cda21995e0a86c76416fff7575e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert from double precision boolean to corresponding integer boolean.  <a href="#a15023cda21995e0a86c76416fff7575e">More...</a><br/></td></tr>
<tr class="separator:a15023cda21995e0a86c76416fff7575e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb2ccc1aebc69073299a26c404fcf5ba"><td class="memItemLeft" align="right" valign="top">static SimdDBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#abb2ccc1aebc69073299a26c404fcf5ba">gmx::cvtIB2B</a> (SimdDIBool a)</td></tr>
<tr class="memdesc:abb2ccc1aebc69073299a26c404fcf5ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert from integer boolean to corresponding double precision boolean.  <a href="#abb2ccc1aebc69073299a26c404fcf5ba">More...</a><br/></td></tr>
<tr class="separator:abb2ccc1aebc69073299a26c404fcf5ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67d3b8f955282068904125585dfe4791"><td class="memItemLeft" align="right" valign="top">static SimdDouble gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a67d3b8f955282068904125585dfe4791">gmx::cvtF2D</a> (SimdFloat f)</td></tr>
<tr class="memdesc:a67d3b8f955282068904125585dfe4791"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert SIMD float to double.  <a href="#a67d3b8f955282068904125585dfe4791">More...</a><br/></td></tr>
<tr class="separator:a67d3b8f955282068904125585dfe4791"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fb883892d82707c8c58f3ecb3d0f7a3"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a8fb883892d82707c8c58f3ecb3d0f7a3">gmx::cvtD2F</a> (SimdDouble d)</td></tr>
<tr class="memdesc:a8fb883892d82707c8c58f3ecb3d0f7a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert SIMD double to float.  <a href="#a8fb883892d82707c8c58f3ecb3d0f7a3">More...</a><br/></td></tr>
<tr class="separator:a8fb883892d82707c8c58f3ecb3d0f7a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1567e05e71a05d804c30ef65e66e9e96"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a1567e05e71a05d804c30ef65e66e9e96">gmx::cvtF2DD</a> (SimdFloat f, SimdDouble *d0, SimdDouble *d1)</td></tr>
<tr class="memdesc:a1567e05e71a05d804c30ef65e66e9e96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert SIMD float to double.  <a href="#a1567e05e71a05d804c30ef65e66e9e96">More...</a><br/></td></tr>
<tr class="separator:a1567e05e71a05d804c30ef65e66e9e96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cc129ae379b11a89f6f100b82dcecfa"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a9cc129ae379b11a89f6f100b82dcecfa">gmx::cvtDD2F</a> (SimdDouble d0, SimdDouble d1)</td></tr>
<tr class="memdesc:a9cc129ae379b11a89f6f100b82dcecfa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert SIMD double to float.  <a href="#a9cc129ae379b11a89f6f100b82dcecfa">More...</a><br/></td></tr>
<tr class="separator:a9cc129ae379b11a89f6f100b82dcecfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:19:34 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
