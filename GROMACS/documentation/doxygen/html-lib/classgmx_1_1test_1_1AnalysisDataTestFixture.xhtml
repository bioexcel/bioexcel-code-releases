<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::test::AnalysisDataTestFixture Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="namespacegmx_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml">AnalysisDataTestFixture</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="classgmx_1_1test_1_1AnalysisDataTestFixture-members.xhtml">List of all members</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">gmx::test::AnalysisDataTestFixture Class Reference<div class="ingroups"><a class="el" href="group__group__libraryapi.xhtml">Library API</a> &#124; <a class="el" href="group__module__analysisdata.xhtml">Parallelizable Handling of Output Data (analysisdata)</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;gromacs/analysisdata/tests/datatest.h&gt;</code></p>

<p>Inherits Test.</p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for gmx::test::AnalysisDataTestFixture:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classgmx_1_1test_1_1AnalysisDataTestFixture__coll__graph.svg" width="210" height="142"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Test fixture for <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml" title="Abstract base class for all objects that provide data. ">AbstractAnalysisData</a> testing. </p>
<p>This test fixture is designed to help writing tests for objects that derive from the <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml" title="Abstract base class for all objects that provide data. ">AbstractAnalysisData</a> class. Typical flow in such tests is that first the test creates the required data objects, then call static methods in this class to add mock modules (using <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml#ada778191d76b2826b57e7b30ecd7a296" title="Adds a module to process the data. ">AbstractAnalysisData::addModule()</a>) to the data objects to check that they produce the correct data, and then invokes methods in the data object to produce the data to be checked. Static methods are also provided for pushing data from an <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a> object to some generic types derived from <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml" title="Abstract base class for all objects that provide data. ">AbstractAnalysisData</a>.</p>
<p>Methods <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#a2fc3918b673a7a4a9d0a833e5810aa0a" title="Adds a mock module that verifies output against AnalysisDataTestInput. ">addStaticCheckerModule()</a>, <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#a6ae8baf736bd899abb55b907320e8965" title="Adds a column mock module that verifies output against AnalysisDataTestInput. ">addStaticColumnCheckerModule()</a> and <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#a12fde98e6a1b66c5173e149be5181092" title="Adds a mock module that verifies output and storage against AnalysisDataTestInput. ">addStaticStorageCheckerModule()</a> create and add mock modules that check the data against a given <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a> instance.</p>
<p>Method <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#ad5dee01e61dc4e717056b6ef01da0161" title="Adds a mock module that verifies output against reference data. ">addReferenceCheckerModule()</a> creates and adds a mock module that checks the output against reference data produced by a previous test execution (see <a class="el" href="classgmx_1_1test_1_1TestReferenceData.xhtml" title="Handles creation of and comparison to test reference data. ">TestReferenceData</a>). Two versions are provided, a static method to be used with any <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml" title="Handles comparison to test reference data. ">TestReferenceChecker</a>, and a non-static method that uses the protected <code>data_</code> member.</p>
<p><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#ab07eb7b9cb4b5e0fb8fc85c196223f06" title="Adds all data from AnalysisDataTestInput into an AnalysisData. ">presentAllData()</a> and <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#a89e3f46a66165f59608fb91cdec5257c" title="Adds a single frame from AnalysisDataTestInput into an AnalysisData. ">presentDataFrame()</a> are provided to push data from an <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a> into an <a class="el" href="classgmx_1_1AnalysisData.xhtml" title="Parallelizable data container for raw data. ">AnalysisData</a> object. In typical tests, most checks are done during these methods, by the added mock modules. <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#ab6d21da208c94e97df257919cc89b3e1" title="Initializes an array data object from AnalysisDataTestInput. ">setupArrayData()</a> performs the same function for classes derived from <a class="el" href="classgmx_1_1AbstractAnalysisArrayData.xhtml" title="Abstract base class for data objects that present in-memory data. ">AbstractAnalysisArrayData</a>. In that case, the test should separately ensure that <a class="el" href="classgmx_1_1AbstractAnalysisArrayData.xhtml#a31bf12b51cba167036e9d3baf9676e80" title="Notifies modules of the data. ">AbstractAnalysisArrayData::valuesReady()</a> gets called.</p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000011">Todo:</a></b></dt><dd>Support for arbitrary AnalysisDataValues (errors and missing values).</dd></dl>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:af4a3b1a8a5331a4e0c70e0951041736b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#af4a3b1a8a5331a4e0c70e0951041736b">addReferenceCheckerModule</a> (const char *id, <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> *source)</td></tr>
<tr class="memdesc:af4a3b1a8a5331a4e0c70e0951041736b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a mock module that verifies output against reference data.  <a href="#af4a3b1a8a5331a4e0c70e0951041736b">More...</a><br/></td></tr>
<tr class="separator:af4a3b1a8a5331a4e0c70e0951041736b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a0cb8a329321fa6694d70cb2366b54ba6"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#a0cb8a329321fa6694d70cb2366b54ba6">setupDataObject</a> (const <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml">AnalysisDataTestInput</a> &amp;input, <a class="el" href="classgmx_1_1AnalysisData.xhtml">AnalysisData</a> *data)</td></tr>
<tr class="memdesc:a0cb8a329321fa6694d70cb2366b54ba6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes an <a class="el" href="classgmx_1_1AnalysisData.xhtml" title="Parallelizable data container for raw data. ">AnalysisData</a> object from input data.  <a href="#a0cb8a329321fa6694d70cb2366b54ba6">More...</a><br/></td></tr>
<tr class="separator:a0cb8a329321fa6694d70cb2366b54ba6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab07eb7b9cb4b5e0fb8fc85c196223f06"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab07eb7b9cb4b5e0fb8fc85c196223f06"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#ab07eb7b9cb4b5e0fb8fc85c196223f06">presentAllData</a> (const <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml">AnalysisDataTestInput</a> &amp;input, <a class="el" href="classgmx_1_1AnalysisData.xhtml">AnalysisData</a> *data)</td></tr>
<tr class="memdesc:ab07eb7b9cb4b5e0fb8fc85c196223f06"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds all data from <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a> into an <a class="el" href="classgmx_1_1AnalysisData.xhtml" title="Parallelizable data container for raw data. ">AnalysisData</a>. <br/></td></tr>
<tr class="separator:ab07eb7b9cb4b5e0fb8fc85c196223f06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89e3f46a66165f59608fb91cdec5257c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a89e3f46a66165f59608fb91cdec5257c"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#a89e3f46a66165f59608fb91cdec5257c">presentDataFrame</a> (const <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml">AnalysisDataTestInput</a> &amp;input, int row, <a class="el" href="classgmx_1_1AnalysisDataHandle.xhtml">AnalysisDataHandle</a> handle)</td></tr>
<tr class="memdesc:a89e3f46a66165f59608fb91cdec5257c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a single frame from <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a> into an <a class="el" href="classgmx_1_1AnalysisData.xhtml" title="Parallelizable data container for raw data. ">AnalysisData</a>. <br/></td></tr>
<tr class="separator:a89e3f46a66165f59608fb91cdec5257c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6d21da208c94e97df257919cc89b3e1"><td class="memTemplParams" colspan="2">template&lt;class ArrayData &gt; </td></tr>
<tr class="memitem:ab6d21da208c94e97df257919cc89b3e1"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#ab6d21da208c94e97df257919cc89b3e1">setupArrayData</a> (const <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml">AnalysisDataTestInput</a> &amp;input, ArrayData *data)</td></tr>
<tr class="memdesc:ab6d21da208c94e97df257919cc89b3e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes an array data object from <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a>.  <a href="#ab6d21da208c94e97df257919cc89b3e1">More...</a><br/></td></tr>
<tr class="separator:ab6d21da208c94e97df257919cc89b3e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fc3918b673a7a4a9d0a833e5810aa0a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#a2fc3918b673a7a4a9d0a833e5810aa0a">addStaticCheckerModule</a> (const <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml">AnalysisDataTestInput</a> &amp;data, <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> *source)</td></tr>
<tr class="memdesc:a2fc3918b673a7a4a9d0a833e5810aa0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a mock module that verifies output against <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a>.  <a href="#a2fc3918b673a7a4a9d0a833e5810aa0a">More...</a><br/></td></tr>
<tr class="separator:a2fc3918b673a7a4a9d0a833e5810aa0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8135ee6ac884b6288799ef887b0dafcf"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#a8135ee6ac884b6288799ef887b0dafcf">addStaticParallelCheckerModule</a> (const <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml">AnalysisDataTestInput</a> &amp;data, <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> *source)</td></tr>
<tr class="memdesc:a8135ee6ac884b6288799ef887b0dafcf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a mock module that verifies parallel output against <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a>.  <a href="#a8135ee6ac884b6288799ef887b0dafcf">More...</a><br/></td></tr>
<tr class="separator:a8135ee6ac884b6288799ef887b0dafcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ae8baf736bd899abb55b907320e8965"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#a6ae8baf736bd899abb55b907320e8965">addStaticColumnCheckerModule</a> (const <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml">AnalysisDataTestInput</a> &amp;data, int firstcol, int n, <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> *source)</td></tr>
<tr class="memdesc:a6ae8baf736bd899abb55b907320e8965"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a column mock module that verifies output against <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a>.  <a href="#a6ae8baf736bd899abb55b907320e8965">More...</a><br/></td></tr>
<tr class="separator:a6ae8baf736bd899abb55b907320e8965"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12fde98e6a1b66c5173e149be5181092"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#a12fde98e6a1b66c5173e149be5181092">addStaticStorageCheckerModule</a> (const <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml">AnalysisDataTestInput</a> &amp;data, int storageCount, <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> *source)</td></tr>
<tr class="memdesc:a12fde98e6a1b66c5173e149be5181092"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a mock module that verifies output and storage against <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a>.  <a href="#a12fde98e6a1b66c5173e149be5181092">More...</a><br/></td></tr>
<tr class="separator:a12fde98e6a1b66c5173e149be5181092"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5dee01e61dc4e717056b6ef01da0161"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#ad5dee01e61dc4e717056b6ef01da0161">addReferenceCheckerModule</a> (const <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a> &amp;checker, const char *id, <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> *source, const <a class="el" href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml">FloatingPointTolerance</a> &amp;tolerance)</td></tr>
<tr class="memdesc:ad5dee01e61dc4e717056b6ef01da0161"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a mock module that verifies output against reference data.  <a href="#ad5dee01e61dc4e717056b6ef01da0161">More...</a><br/></td></tr>
<tr class="separator:ad5dee01e61dc4e717056b6ef01da0161"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a68e3631fcc7c250f1aa1aa5c1406c92d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1test_1_1TestReferenceData.xhtml">gmx::test::TestReferenceData</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#a68e3631fcc7c250f1aa1aa5c1406c92d">data_</a></td></tr>
<tr class="memdesc:a68e3631fcc7c250f1aa1aa5c1406c92d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reference data object used for the reference checker modules.  <a href="#a68e3631fcc7c250f1aa1aa5c1406c92d">More...</a><br/></td></tr>
<tr class="separator:a68e3631fcc7c250f1aa1aa5c1406c92d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ad5dee01e61dc4e717056b6ef01da0161"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::AnalysisDataTestFixture::addReferenceCheckerModule </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1test_1_1TestReferenceChecker.xhtml">TestReferenceChecker</a> &amp;&#160;</td>
          <td class="paramname"><em>checker</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1test_1_1FloatingPointTolerance.xhtml">FloatingPointTolerance</a> &amp;&#160;</td>
          <td class="paramname"><em>tolerance</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a mock module that verifies output against reference data. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">checker</td><td>Reference data checker to use for comparison. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Identifier for reference data compound to use. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">source</td><td>Data object to verify. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tolerance</td><td>Tolerance to use for comparison.</td></tr>
  </table>
  </dd>
</dl>
<p>Creates a mock module that verifies that the <a class="el" href="classgmx_1_1IAnalysisDataModule.xhtml" title="Interface for a module that gets notified whenever data is added. ">IAnalysisDataModule</a> methods are called correctly by <code>source</code>. Parameters for the calls are verified against reference data using a child compound <code>id</code> of <code>checker</code>. Adds the created module to <code>source</code> using <code>data-&gt;addModule()</code>. Any exceptions from the called functions should be caught by the caller.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1test_1_1TestReferenceData.xhtml" title="Handles creation of and comparison to test reference data. ">TestReferenceData</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af4a3b1a8a5331a4e0c70e0951041736b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::AnalysisDataTestFixture::addReferenceCheckerModule </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> *&#160;</td>
          <td class="paramname"><em>source</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a mock module that verifies output against reference data. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Identifier for reference data compound to use. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">source</td><td>Data object to verify.</td></tr>
  </table>
  </dd>
</dl>
<p>Creates a reference checker module using a compound checker with id <code>id</code> at the root level of <code>data_</code>.</p>
<p>See the static overload for other details. </p>

</div>
</div>
<a class="anchor" id="a2fc3918b673a7a4a9d0a833e5810aa0a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::AnalysisDataTestFixture::addStaticCheckerModule </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml">AnalysisDataTestInput</a> &amp;&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> *&#160;</td>
          <td class="paramname"><em>source</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a mock module that verifies output against <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Data to compare against. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">source</td><td>Data object to verify.</td></tr>
  </table>
  </dd>
</dl>
<p>Creates a mock module that verifies that the <a class="el" href="classgmx_1_1IAnalysisDataModule.xhtml" title="Interface for a module that gets notified whenever data is added. ">IAnalysisDataModule</a> methods are called correctly by <code>source</code>. Parameters for the calls are verified against <code>data</code>. Adds the created module to <code>source</code> using <code>data-&gt;addModule()</code>. Any exceptions from the called functions should be caught by the caller.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml#ada778191d76b2826b57e7b30ecd7a296" title="Adds a module to process the data. ">AbstractAnalysisData::addModule()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a6ae8baf736bd899abb55b907320e8965"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::AnalysisDataTestFixture::addStaticColumnCheckerModule </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml">AnalysisDataTestInput</a> &amp;&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>firstcol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> *&#160;</td>
          <td class="paramname"><em>source</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a column mock module that verifies output against <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Data to compare against. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">firstcol</td><td>First column to check. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>Number of columns to check. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">source</td><td>Data object to verify.</td></tr>
  </table>
  </dd>
</dl>
<p>Creates a mock module that verifies that the <a class="el" href="classgmx_1_1IAnalysisDataModule.xhtml" title="Interface for a module that gets notified whenever data is added. ">IAnalysisDataModule</a> methods are called correctly by <code>source</code>. Parameters for the calls are verified against <code>data</code>. Adds the created module to <code>source</code> using <code>data-&gt;addColumnModule()</code>. Any exceptions from the called functions should be caught by the caller.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml#a8e6f762df563d577f8a1d34a35273952" title="Adds a module that processes only a subset of the columns. ">AbstractAnalysisData::addColumnModule()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a8135ee6ac884b6288799ef887b0dafcf"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::AnalysisDataTestFixture::addStaticParallelCheckerModule </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml">AnalysisDataTestInput</a> &amp;&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> *&#160;</td>
          <td class="paramname"><em>source</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a mock module that verifies parallel output against <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Data to compare against. </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">source</td><td>Data object to verify.</td></tr>
  </table>
  </dd>
</dl>
<p>Creates a parallel mock module that verifies that the <a class="el" href="classgmx_1_1IAnalysisDataModule.xhtml" title="Interface for a module that gets notified whenever data is added. ">IAnalysisDataModule</a> methods are called correctly by <code>source</code>. Parameters for the calls are verified against <code>data</code>. Adds the created module to <code>source</code> using <code>data-&gt;addModule()</code>. Any exceptions from the called functions should be caught by the caller.</p>
<p>Differs from <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#a2fc3918b673a7a4a9d0a833e5810aa0a" title="Adds a mock module that verifies output against AnalysisDataTestInput. ">addStaticCheckerModule()</a> in that the created mock module reports that it accepts parallel input data, and accepts and verifies notification calls following the parallel pattern.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml#ada778191d76b2826b57e7b30ecd7a296" title="Adds a module to process the data. ">AbstractAnalysisData::addModule()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a12fde98e6a1b66c5173e149be5181092"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::AnalysisDataTestFixture::addStaticStorageCheckerModule </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml">AnalysisDataTestInput</a> &amp;&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>storageCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml">AbstractAnalysisData</a> *&#160;</td>
          <td class="paramname"><em>source</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a mock module that verifies output and storage against <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Data to compare against. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">storageCount</td><td>Number of previous frames to check (-1 = all). </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">source</td><td>Data object to verify.</td></tr>
  </table>
  </dd>
</dl>
<p>Works like <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestFixture.xhtml#a2fc3918b673a7a4a9d0a833e5810aa0a" title="Adds a mock module that verifies output against AnalysisDataTestInput. ">addStaticCheckerModule()</a>, except that in addition, for each frame, the mock module also checks that previous frames can be accessed using <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml#ac97ab78a57e02aad95c9e679ef8b2798" title="Access stored data. ">AbstractAnalysisData::getDataFrame()</a>. In the <a class="el" href="classgmx_1_1IAnalysisDataModule.xhtml#ac77236904b9f2871c38a73e2d150d787" title="Called (once) when the data has been set up properly. ">IAnalysisDataModule::dataStarted()</a> callback, the mock module calls <a class="el" href="classgmx_1_1AbstractAnalysisData.xhtml#a99ba2f4072c75c8e56d1e377cb6b5f8c" title="Request storage of frames. ">AbstractAnalysisData::requestStorage()</a> with <code>storageCount</code> as the parameter. </p>

</div>
</div>
<a class="anchor" id="ab6d21da208c94e97df257919cc89b3e1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class ArrayData &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::AnalysisDataTestFixture::setupArrayData </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml">AnalysisDataTestInput</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ArrayData *&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes an array data object from <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml" title="Represents static input data for AbstractAnalysisData tests. ">AnalysisDataTestInput</a>. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ArrayData</td><td>Class derived from <a class="el" href="classgmx_1_1AbstractAnalysisArrayData.xhtml" title="Abstract base class for data objects that present in-memory data. ">AbstractAnalysisArrayData</a>.</td></tr>
  </table>
  </dd>
</dl>
<p>The ArrayData class should expose the setter methods (setColumnCount(), setRowCount(), allocateValues(), setValue()) publicly or declare the fixture class as a friend. The X axis in <code>data</code> must be configured to match <code>input</code> before calling this method.</p>
<p>Does not call <a class="el" href="classgmx_1_1AbstractAnalysisArrayData.xhtml#a31bf12b51cba167036e9d3baf9676e80" title="Notifies modules of the data. ">AbstractAnalysisArrayData::valuesReady()</a>. The test must ensure that this method gets called, otherwise the mock modules never get called. </p>

</div>
</div>
<a class="anchor" id="a0cb8a329321fa6694d70cb2366b54ba6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::test::AnalysisDataTestFixture::setupDataObject </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1test_1_1AnalysisDataTestInput.xhtml">AnalysisDataTestInput</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgmx_1_1AnalysisData.xhtml">AnalysisData</a> *&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes an <a class="el" href="classgmx_1_1AnalysisData.xhtml" title="Parallelizable data container for raw data. ">AnalysisData</a> object from input data. </p>
<p>Sets the column count and other properties based on the input data. </p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a68e3631fcc7c250f1aa1aa5c1406c92d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1test_1_1TestReferenceData.xhtml">gmx::test::TestReferenceData</a> gmx::test::AnalysisDataTestFixture::data_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reference data object used for the reference checker modules. </p>
<p>Tests can use the data object also for their own purposes if needed. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/gromacs/analysisdata/tests/<a class="el" href="datatest_8h.xhtml">datatest.h</a></li>
<li>src/gromacs/analysisdata/tests/datatest.cpp</li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:19:42 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
