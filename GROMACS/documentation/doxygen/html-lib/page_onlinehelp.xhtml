<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: Help formatting</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li class="current"><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="index.xhtml">GROMACS</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Help formatting </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>Some parts of GROMACS use in-source strings as a documentation source. The most notable use of these is the description and options list printed out by the <code>-h</code> command line, and this case is exposed also to code that uses GROMACS as a library to write command-line tools. The help text is declared as an array of strings: </p>
<pre class="fragment">const char *const desc[] = {
    "First paragraph.",
    "",
    "Second paragraph",
    "with more text",
    "and [TT]some formatting[tt].",
};
</pre><p>The array variable is then passed to a function that exposes it as the help text. Some of the help content is also generated based on, e.g., the list of options that the program declares.</p>
<p>The same approach is also used internally in GROMACS in a few other places. The same help text is used for console output (like in the <code>-h</code> case), as well as for producing reStructuredText. The reStructuredText output is passed to Sphinx to produce a HTML user guide and Unix man pages.</p>
<h1>Formatting markup </h1>
<p>Partly due to historical reasons, the markup allowed within the help text is a mixture of reStructuredText and GROMACS-specific markup. The allowed formatting is currently not that extensive, but basic constructs should work.</p>
<p>The general approach to formatting is that the text is written to reStructuredText as-is, after replacement of the GROMACS-specific markup, with line breaks between each string in the input array. This means that the commas at the end of each line (separating the strings) are critical for proper formatting. This also means that any reStructuredText construct will appear correctly in the HTML and man pages (as long as the output format supports it).</p>
<p>For console output, there input string is parsed for some basic reStructuredText constructs to be able to rewrap the text to the console width (currently fixed at 78 characters). This parsing is one major constraint on what reStructuredText constructs can be used; paragraph-level markup that is not recognized by this parser results in messy console output. Inline markup is currently not processed in any way, so any construct that renders reasonably in plain text can in principle be used.</p>
<h2>reStructuredText </h2>
<p>The following reStructuredText constructs are recognized and work for console output:</p>
<ul>
<li>Paragraphs, i.e., blocks of text separated by an empty line. Text within each paragraph is wrapped separately, and indentation is preserved (as long as the whole paragraph has the same indentation level, which is expected for reStructuredText). This means that block quotes are also rendered reasonably, since they are just indented paragraphs.</li>
<li>Literal blocks, i.e., indented paragraphs where the preceding paragraph ends with <code>::</code>. Line breaks within such paragraphs are preserved. The rules for handling the <code>::</code> are the same as in reStructuredText. Multiple paragraphs within a literal block are not currently supported.</li>
<li>Titles, i.e., a line underlined by a punctuation character. Title formatting is currently preserved as-is, so it must be manually ensured that the used punctuation character properly fits into the context (i.e., other titles in the same generated reStructuredText document). Titles with both under- and overline are not currently supported.</li>
<li>Bullet lists. Only lists that start with <code>*</code> are currently recognized. Indentation for the second and subsequent lines is determined from the first non-space character after the bullet and/or from the second line in the input (if these are not the same, the minimum is used). Note that in reStructuredText, the <code>*</code> must not be indented with respect to the preceding paragraph; otherwise, the bullet list is rendered within a block quote. Also, an empty line needs to precede a bullet list.</li>
<li>Enumerated lists. Only lists that start with digits are supported (e.g., <code>1.</code>). Multi-digit numbers can be used. Indentation is determined as for bullet lists. Lists are not renumbered automatically.</li>
</ul>
<h2>GROMACS-specific markup </h2>
<p>Markup within paragraphs is currently done with GROMACS-specific constructs limited with brackets. In the future, some of these may get replaced with more reStructuredText constructs. The following are used:</p>
<ul>
<li><code>[TT]</code>/<code>[tt]</code>: text between these tags is formatted in a monospace font.</li>
<li><code>[BB]</code>/<code>[bb]</code>: text between these tags is formatted in a bold font.</li>
<li><code>[IT]</code>/<code>[it]</code>: text between these tags is formatted in an italic font.</li>
<li><code>[MAG]</code>/<code>[mag]</code>: text between these tags is rendered between <code>|</code> (bar) characters (which is a special character in reStructuredText).</li>
<li><code>[PAR]</code>: this is replaced by two newlines to produce a paragraph break. For any new help text, an explicit empty line is preferred. Various other markup constructs, mainly related to math, are also used in some places, but currently these are always replaced with the same text irrespective of the output format, and a new approach is needed for proper math support.</li>
</ul>
<p>Additionally, the following replacements are possible (not necessarily in all contexts):</p>
<ul>
<li><code>[REF]</code>/<code>[ref]</code>: replaced with a link to a section that describes the term between these tags. Only affects the reStructuredText output; the tags are simply removed from console output. The mechanism for managing these crosslinks would need additional work.</li>
<li><code>[THISMODULE]</code>: replaced with the name of the current module/command (e.g., <code>gmx angle</code>).</li>
<li><code>[PROGRAM]</code>: replaced with the name of the current executable (e.g., <code>gmx</code>).</li>
</ul>
<h1>Implementation </h1>
<p>See <a class="el" href="group__module__onlinehelp.xhtml">Help Formatting for Online Help (onlinehelp)</a> module documentation for implementation details.</p>
<p>See <a class="el" href="page_wrapperbinary.xhtml">Wrapper binary implementation</a> for details of how the reStructuredText help is exported and processed further. </p>
</div></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:19:37 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
