<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/utility/cstringutil.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_71392c6f4b1ed3a32ba5c064e868a1ba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a798d384400d41a9e6864d9b1b8753fe.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_de18afb36696138c96356a62009637d5.xhtml">utility</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">cstringutil.h File Reference<div class="ingroups"><a class="el" href="group__group__publicapi.xhtml">Public API</a> &#124; <a class="el" href="group__module__utility.xhtml">Low-Level Utilities (utility)</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;stdio.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="basedefinitions_8h.xhtml">gromacs/utility/basedefinitions.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for cstringutil.h:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="cstringutil_8h__incl.svg" width="307" height="202"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Generic C string handling functions. </p>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ab711666ad09d7f6c0b91576525ea158e"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#ab711666ad09d7f6c0b91576525ea158e">CONTINUE</a>&#160;&#160;&#160;'\\'</td></tr>
<tr class="memdesc:ab711666ad09d7f6c0b91576525ea158e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Continuation character.  <a href="#ab711666ad09d7f6c0b91576525ea158e">More...</a><br/></td></tr>
<tr class="separator:ab711666ad09d7f6c0b91576525ea158e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15be34a1d7b93d10f581b60833afca7a"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a15be34a1d7b93d10f581b60833afca7a">COMMENTSIGN</a>&#160;&#160;&#160;';'</td></tr>
<tr class="memdesc:a15be34a1d7b93d10f581b60833afca7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comment sign to use.  <a href="#a15be34a1d7b93d10f581b60833afca7a">More...</a><br/></td></tr>
<tr class="separator:a15be34a1d7b93d10f581b60833afca7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a278cf415676752815cfb411cb0b32802"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a278cf415676752815cfb411cb0b32802">STRLEN</a>&#160;&#160;&#160;4096</td></tr>
<tr class="memdesc:a278cf415676752815cfb411cb0b32802"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard size for char* string buffers.  <a href="#a278cf415676752815cfb411cb0b32802">More...</a><br/></td></tr>
<tr class="separator:a278cf415676752815cfb411cb0b32802"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21836ee214b24d91bf3911c0d99f707b"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a21836ee214b24d91bf3911c0d99f707b">GMX_NO_WCMATCH</a>&#160;&#160;&#160;1</td></tr>
<tr class="memdesc:a21836ee214b24d91bf3911c0d99f707b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return value for <a class="el" href="cstringutil_8h.xhtml#ae5242279c5f96040a36162574dc97d0c" title="Pattern matching with wildcards. ">gmx_wcmatch()</a> when there is no match.  <a href="#a21836ee214b24d91bf3911c0d99f707b">More...</a><br/></td></tr>
<tr class="separator:a21836ee214b24d91bf3911c0d99f707b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a96d5cf3819b5488f13881771adbb60"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a7a96d5cf3819b5488f13881771adbb60">STEPSTRSIZE</a>&#160;&#160;&#160;22</td></tr>
<tr class="memdesc:a7a96d5cf3819b5488f13881771adbb60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Minimum size of buffer to pass to <a class="el" href="cstringutil_8h.xhtml#a3cb3397e019fa79f20ec3cfcfb4c81f3" title="Prints a gmx_int64_t value in buf and returns the pointer to buf. ">gmx_step_str()</a>.  <a href="#a7a96d5cf3819b5488f13881771adbb60">More...</a><br/></td></tr>
<tr class="separator:a7a96d5cf3819b5488f13881771adbb60"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ac103ab2c7ce56d62340d2f351142ccab"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#ac103ab2c7ce56d62340d2f351142ccab">continuing</a> (char *s)</td></tr>
<tr class="memdesc:ac103ab2c7ce56d62340d2f351142ccab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Strip trailing spaces and if s ends with a <a class="el" href="cstringutil_8h.xhtml#ab711666ad09d7f6c0b91576525ea158e" title="Continuation character. ">CONTINUE</a> remove that too.  <a href="#ac103ab2c7ce56d62340d2f351142ccab">More...</a><br/></td></tr>
<tr class="separator:ac103ab2c7ce56d62340d2f351142ccab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11c0d58b9af1c15dbc58f04c3b1667dd"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a11c0d58b9af1c15dbc58f04c3b1667dd">fgets2</a> (char *s, int n, FILE *stream)</td></tr>
<tr class="memdesc:a11c0d58b9af1c15dbc58f04c3b1667dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads a line from a stream.  <a href="#a11c0d58b9af1c15dbc58f04c3b1667dd">More...</a><br/></td></tr>
<tr class="separator:a11c0d58b9af1c15dbc58f04c3b1667dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4371bd7d8210d09a110b9642b42b7e7f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a4371bd7d8210d09a110b9642b42b7e7f">strip_comment</a> (char *line)</td></tr>
<tr class="memdesc:a4371bd7d8210d09a110b9642b42b7e7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove portion of a line after a <a class="el" href="cstringutil_8h.xhtml#a15be34a1d7b93d10f581b60833afca7a" title="Comment sign to use. ">COMMENTSIGN</a>.  <a href="#a4371bd7d8210d09a110b9642b42b7e7f">More...</a><br/></td></tr>
<tr class="separator:a4371bd7d8210d09a110b9642b42b7e7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74173c7afe5600452edf4956ae58bbe8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a74173c7afe5600452edf4956ae58bbe8">upstring</a> (char *str)</td></tr>
<tr class="memdesc:a74173c7afe5600452edf4956ae58bbe8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Make a string uppercase.  <a href="#a74173c7afe5600452edf4956ae58bbe8">More...</a><br/></td></tr>
<tr class="separator:a74173c7afe5600452edf4956ae58bbe8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d9ff13ca6fbfeed019ff8459a2d7b27"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a1d9ff13ca6fbfeed019ff8459a2d7b27">ltrim</a> (char *str)</td></tr>
<tr class="memdesc:a1d9ff13ca6fbfeed019ff8459a2d7b27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove leading whitespace from a string.  <a href="#a1d9ff13ca6fbfeed019ff8459a2d7b27">More...</a><br/></td></tr>
<tr class="separator:a1d9ff13ca6fbfeed019ff8459a2d7b27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36c31afc53e5a1e87177eff988d6d17e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a36c31afc53e5a1e87177eff988d6d17e">rtrim</a> (char *str)</td></tr>
<tr class="memdesc:a36c31afc53e5a1e87177eff988d6d17e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove trailing whitespace from a string.  <a href="#a36c31afc53e5a1e87177eff988d6d17e">More...</a><br/></td></tr>
<tr class="separator:a36c31afc53e5a1e87177eff988d6d17e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60ea663401e86ca2a60a29e76c716679"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a60ea663401e86ca2a60a29e76c716679">trim</a> (char *str)</td></tr>
<tr class="memdesc:a60ea663401e86ca2a60a29e76c716679"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove leading and trailing whitespace from a string.  <a href="#a60ea663401e86ca2a60a29e76c716679">More...</a><br/></td></tr>
<tr class="separator:a60ea663401e86ca2a60a29e76c716679"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a075edcfe0f6dfd4ca5e15770d19c2709"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a075edcfe0f6dfd4ca5e15770d19c2709">nice_header</a> (FILE *out, const char *fn)</td></tr>
<tr class="memdesc:a075edcfe0f6dfd4ca5e15770d19c2709"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prints creation time stamp and user information into a file as comments.  <a href="#a075edcfe0f6dfd4ca5e15770d19c2709">More...</a><br/></td></tr>
<tr class="separator:a075edcfe0f6dfd4ca5e15770d19c2709"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac088a6356a03b85a516823c77e8bf594"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#ac088a6356a03b85a516823c77e8bf594">gmx_strcasecmp_min</a> (const char *str1, const char *str2)</td></tr>
<tr class="memdesc:ac088a6356a03b85a516823c77e8bf594"><td class="mdescLeft">&#160;</td><td class="mdescRight">Version of <a class="el" href="cstringutil_8h.xhtml#a6b201e0b9f999f296778a437ac6249d4" title="Case-insensitive strcmp(). ">gmx_strcasecmp()</a> that also ignores '-' and '_'.  <a href="#ac088a6356a03b85a516823c77e8bf594">More...</a><br/></td></tr>
<tr class="separator:ac088a6356a03b85a516823c77e8bf594"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2ea251cda429a6f437ee9c5a5746590"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#aa2ea251cda429a6f437ee9c5a5746590">gmx_strncasecmp_min</a> (const char *str1, const char *str2, int n)</td></tr>
<tr class="memdesc:aa2ea251cda429a6f437ee9c5a5746590"><td class="mdescLeft">&#160;</td><td class="mdescRight">Version of <a class="el" href="cstringutil_8h.xhtml#ab7c80209718acf9845ef30405b612d25" title="Case-insensitive strncmp(). ">gmx_strncasecmp()</a> that also ignores '-' and '_'.  <a href="#aa2ea251cda429a6f437ee9c5a5746590">More...</a><br/></td></tr>
<tr class="separator:aa2ea251cda429a6f437ee9c5a5746590"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b201e0b9f999f296778a437ac6249d4"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a6b201e0b9f999f296778a437ac6249d4">gmx_strcasecmp</a> (const char *str1, const char *str2)</td></tr>
<tr class="memdesc:a6b201e0b9f999f296778a437ac6249d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive strcmp().  <a href="#a6b201e0b9f999f296778a437ac6249d4">More...</a><br/></td></tr>
<tr class="separator:a6b201e0b9f999f296778a437ac6249d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7c80209718acf9845ef30405b612d25"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#ab7c80209718acf9845ef30405b612d25">gmx_strncasecmp</a> (const char *str1, const char *str2, int n)</td></tr>
<tr class="memdesc:ab7c80209718acf9845ef30405b612d25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive strncmp().  <a href="#ab7c80209718acf9845ef30405b612d25">More...</a><br/></td></tr>
<tr class="separator:ab7c80209718acf9845ef30405b612d25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94be9cd5076011714476c26badc7d250"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a94be9cd5076011714476c26badc7d250">gmx_strdup</a> (const char *src)</td></tr>
<tr class="memdesc:a94be9cd5076011714476c26badc7d250"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a duplicate of <code>src</code>.  <a href="#a94be9cd5076011714476c26badc7d250">More...</a><br/></td></tr>
<tr class="separator:a94be9cd5076011714476c26badc7d250"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a892337fcde247de2e1f1ac5b414d0c"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a2a892337fcde247de2e1f1ac5b414d0c">gmx_strndup</a> (const char *src, int n)</td></tr>
<tr class="memdesc:a2a892337fcde247de2e1f1ac5b414d0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Duplicates first <code>n</code> characters of <code>src</code>.  <a href="#a2a892337fcde247de2e1f1ac5b414d0c">More...</a><br/></td></tr>
<tr class="separator:a2a892337fcde247de2e1f1ac5b414d0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5242279c5f96040a36162574dc97d0c"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#ae5242279c5f96040a36162574dc97d0c">gmx_wcmatch</a> (const char *pattern, const char *str)</td></tr>
<tr class="memdesc:ae5242279c5f96040a36162574dc97d0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pattern matching with wildcards.  <a href="#ae5242279c5f96040a36162574dc97d0c">More...</a><br/></td></tr>
<tr class="separator:ae5242279c5f96040a36162574dc97d0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f29e4714f3618996df11a09fbdf820e"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a8f29e4714f3618996df11a09fbdf820e">gmx_string_fullhash_func</a> (const char *s, unsigned int hash_init)</td></tr>
<tr class="memdesc:a8f29e4714f3618996df11a09fbdf820e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a hash of the string according to Dan J. Bernsteins algorithm.  <a href="#a8f29e4714f3618996df11a09fbdf820e">More...</a><br/></td></tr>
<tr class="separator:a8f29e4714f3618996df11a09fbdf820e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7551c37dbac76a247a4305b3bea52f0c"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a7551c37dbac76a247a4305b3bea52f0c">gmx_string_hash_func</a> (const char *s, unsigned int hash_init)</td></tr>
<tr class="memdesc:a7551c37dbac76a247a4305b3bea52f0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a hash of the string according to Dan J. Bernsteins algorithm.  <a href="#a7551c37dbac76a247a4305b3bea52f0c">More...</a><br/></td></tr>
<tr class="separator:a7551c37dbac76a247a4305b3bea52f0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78512fb6ca46ef3528c91480dfcfba2a"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a78512fb6ca46ef3528c91480dfcfba2a">wrap_lines</a> (const char *buf, int line_width, int indent, <a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a> bIndentFirst)</td></tr>
<tr class="memdesc:a78512fb6ca46ef3528c91480dfcfba2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wraps lines, optionally indenting lines.  <a href="#a78512fb6ca46ef3528c91480dfcfba2a">More...</a><br/></td></tr>
<tr class="separator:a78512fb6ca46ef3528c91480dfcfba2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4477abec400b014f38cc5389835f742"><td class="memItemLeft" align="right" valign="top">gmx_int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#ae4477abec400b014f38cc5389835f742">str_to_int64_t</a> (const char *str, char **endptr)</td></tr>
<tr class="memdesc:ae4477abec400b014f38cc5389835f742"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a string to gmx_int64_t.  <a href="#ae4477abec400b014f38cc5389835f742">More...</a><br/></td></tr>
<tr class="separator:ae4477abec400b014f38cc5389835f742"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3cb3397e019fa79f20ec3cfcfb4c81f3"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a3cb3397e019fa79f20ec3cfcfb4c81f3">gmx_step_str</a> (gmx_int64_t i, char *buf)</td></tr>
<tr class="memdesc:a3cb3397e019fa79f20ec3cfcfb4c81f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prints a gmx_int64_t value in buf and returns the pointer to buf.  <a href="#a3cb3397e019fa79f20ec3cfcfb4c81f3">More...</a><br/></td></tr>
<tr class="separator:a3cb3397e019fa79f20ec3cfcfb4c81f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e9036486ecc3db7965717c1263d2196"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a6e9036486ecc3db7965717c1263d2196">parse_digits_from_plain_string</a> (const char *digitstring, int *ndigits, int **digitlist)</td></tr>
<tr class="memdesc:a6e9036486ecc3db7965717c1263d2196"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct an array of digits found in the input string.  <a href="#a6e9036486ecc3db7965717c1263d2196">More...</a><br/></td></tr>
<tr class="separator:a6e9036486ecc3db7965717c1263d2196"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84e7306c4b152ca09f9cf8b892217bd7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a84e7306c4b152ca09f9cf8b892217bd7">parse_digits_from_csv_string</a> (const char *digitstring, int *ndigits, int **digitlist)</td></tr>
<tr class="memdesc:a84e7306c4b152ca09f9cf8b892217bd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct an array of digits from a comma separated input string.  <a href="#a84e7306c4b152ca09f9cf8b892217bd7">More...</a><br/></td></tr>
<tr class="separator:a84e7306c4b152ca09f9cf8b892217bd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a993d674a5511831a274d989927423cb2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a993d674a5511831a274d989927423cb2">parse_digits_from_string</a> (const char *digitstring, int *ndigits, int **digitlist)</td></tr>
<tr class="memdesc:a993d674a5511831a274d989927423cb2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct an array of digits an input string.  <a href="#a993d674a5511831a274d989927423cb2">More...</a><br/></td></tr>
<tr class="separator:a993d674a5511831a274d989927423cb2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a929ed36fc580abd4984ae5500adbf9c3"><td class="memItemLeft" align="right" valign="top">const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cstringutil_8h.xhtml#a929ed36fc580abd4984ae5500adbf9c3">gmx_string_hash_init</a></td></tr>
<tr class="memdesc:a929ed36fc580abd4984ae5500adbf9c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Magic hash initialization number from Dan J.  <a href="#a929ed36fc580abd4984ae5500adbf9c3">More...</a><br/></td></tr>
<tr class="separator:a929ed36fc580abd4984ae5500adbf9c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a class="anchor" id="a15be34a1d7b93d10f581b60833afca7a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define COMMENTSIGN&#160;&#160;&#160;';'</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Comment sign to use. </p>

</div>
</div>
<a class="anchor" id="ab711666ad09d7f6c0b91576525ea158e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CONTINUE&#160;&#160;&#160;'\\'</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Continuation character. </p>

</div>
</div>
<a class="anchor" id="a21836ee214b24d91bf3911c0d99f707b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define GMX_NO_WCMATCH&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return value for <a class="el" href="cstringutil_8h.xhtml#ae5242279c5f96040a36162574dc97d0c" title="Pattern matching with wildcards. ">gmx_wcmatch()</a> when there is no match. </p>

</div>
</div>
<a class="anchor" id="a7a96d5cf3819b5488f13881771adbb60"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define STEPSTRSIZE&#160;&#160;&#160;22</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Minimum size of buffer to pass to <a class="el" href="cstringutil_8h.xhtml#a3cb3397e019fa79f20ec3cfcfb4c81f3" title="Prints a gmx_int64_t value in buf and returns the pointer to buf. ">gmx_step_str()</a>. </p>

</div>
</div>
<a class="anchor" id="a278cf415676752815cfb411cb0b32802"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define STRLEN&#160;&#160;&#160;4096</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Standard size for char* string buffers. </p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ac103ab2c7ce56d62340d2f351142ccab"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int continuing </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Strip trailing spaces and if s ends with a <a class="el" href="cstringutil_8h.xhtml#ab711666ad09d7f6c0b91576525ea158e" title="Continuation character. ">CONTINUE</a> remove that too. </p>
<dl class="section return"><dt>Returns</dt><dd>TRUE if s ends with a CONTINUE, FALSE otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a11c0d58b9af1c15dbc58f04c3b1667dd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* fgets2 </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>stream</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reads a line from a stream. </p>
<p>This routine reads a string from stream of max length n, including \0 and zero terminated, without newlines. <code>s</code> should be long enough (&gt;= <code>n</code>) </p>

</div>
</div>
<a class="anchor" id="a3cb3397e019fa79f20ec3cfcfb4c81f3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* gmx_step_str </td>
          <td>(</td>
          <td class="paramtype">gmx_int64_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buf</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Prints a gmx_int64_t value in buf and returns the pointer to buf. </p>
<p>buf should be large enough to contain i: STEPSTRSIZE (22) chars. When multiple gmx_int64_t values are printed in the same printf call, be sure to call gmx_step_str with different buffers. </p>

</div>
</div>
<a class="anchor" id="a6b201e0b9f999f296778a437ac6249d4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_strcasecmp </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Case-insensitive strcmp(). </p>

</div>
</div>
<a class="anchor" id="ac088a6356a03b85a516823c77e8bf594"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_strcasecmp_min </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Version of <a class="el" href="cstringutil_8h.xhtml#a6b201e0b9f999f296778a437ac6249d4" title="Case-insensitive strcmp(). ">gmx_strcasecmp()</a> that also ignores '-' and '_'. </p>

</div>
</div>
<a class="anchor" id="a94be9cd5076011714476c26badc7d250"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* gmx_strdup </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>src</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a duplicate of <code>src</code>. </p>

</div>
</div>
<a class="anchor" id="a8f29e4714f3618996df11a09fbdf820e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int gmx_string_fullhash_func </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>hash_init</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a hash of the string according to Dan J. Bernsteins algorithm. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>String to calculate hash for. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">hash_init</td><td>Initial (or previous) hash value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Updated hash value (hash_init combined with string hash).</dd></dl>
<p>On the first invocation for a new string, use the constant gmx_string_hash_init for the second argument. If you want to create a hash corresponding to several concatenated strings, provide the returned hash value as hash_init for the second string, etc. </p>

</div>
</div>
<a class="anchor" id="a7551c37dbac76a247a4305b3bea52f0c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int gmx_string_hash_func </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>hash_init</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a hash of the string according to Dan J. Bernsteins algorithm. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>String to calculate hash for. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">hash_init</td><td>Initial (or previous) hash value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Updated hash value (hash_init combined with string hash).</dd></dl>
<p>Identical to gmx_string_fullhash_func, except that this routine only uses characters for which isalnum(c) is true, and all characters are converted to upper case. </p>

</div>
</div>
<a class="anchor" id="ab7c80209718acf9845ef30405b612d25"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_strncasecmp </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Case-insensitive strncmp(). </p>

</div>
</div>
<a class="anchor" id="aa2ea251cda429a6f437ee9c5a5746590"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_strncasecmp_min </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Version of <a class="el" href="cstringutil_8h.xhtml#ab7c80209718acf9845ef30405b612d25" title="Case-insensitive strncmp(). ">gmx_strncasecmp()</a> that also ignores '-' and '_'. </p>

</div>
</div>
<a class="anchor" id="a2a892337fcde247de2e1f1ac5b414d0c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* gmx_strndup </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Duplicates first <code>n</code> characters of <code>src</code>. </p>

</div>
</div>
<a class="anchor" id="ae5242279c5f96040a36162574dc97d0c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int gmx_wcmatch </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>pattern</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Pattern matching with wildcards. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pattern</td><td>Pattern to match against. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to match. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 on match, GMX_NO_WCMATCH if there is no match.</dd></dl>
<p>Matches <code>str</code> against <code>pattern</code>, which may contain * and ? wildcards. All other characters are matched literally. Currently, it is not possible to match literal * or ?. </p>

</div>
</div>
<a class="anchor" id="a1d9ff13ca6fbfeed019ff8459a2d7b27"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ltrim </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove leading whitespace from a string. </p>

</div>
</div>
<a class="anchor" id="a075edcfe0f6dfd4ca5e15770d19c2709"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void nice_header </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Prints creation time stamp and user information into a file as comments. </p>

</div>
</div>
<a class="anchor" id="a84e7306c4b152ca09f9cf8b892217bd7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void parse_digits_from_csv_string </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>digitstring</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>ndigits</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int **&#160;</td>
          <td class="paramname"><em>digitlist</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct an array of digits from a comma separated input string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">digitstring</td><td>String that must contain only digits and commas </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">ndigits</td><td>Size of return array with the values of the digits </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">digitlist</td><td>Array of digits found in digitstring. Allocated by this function with size *ndigits. Calling code is responsible for deallocation.</td></tr>
  </table>
  </dd>
</dl>
<p>If digitstring is NULL, then ndigits is set to zero and digitlist to NULL. If digitstring contains a non digit-or-comma character, a fatal error results. </p>

</div>
</div>
<a class="anchor" id="a6e9036486ecc3db7965717c1263d2196"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void parse_digits_from_plain_string </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>digitstring</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>ndigits</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int **&#160;</td>
          <td class="paramname"><em>digitlist</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct an array of digits found in the input string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">digitstring</td><td>String that must contain only digits </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">ndigits</td><td>Size of return array with the values of the digits </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">digitlist</td><td>Array of digits found in digitstring. Allocated by this function with size *ndigits. Calling code is responsible for deallocation.</td></tr>
  </table>
  </dd>
</dl>
<p>If digitstring is NULL, then ndigits is set to zero and digitlist to NULL. If digitstring contains a non-digit character, a fatal error results. </p>

</div>
</div>
<a class="anchor" id="a993d674a5511831a274d989927423cb2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void parse_digits_from_string </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>digitstring</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>ndigits</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int **&#160;</td>
          <td class="paramname"><em>digitlist</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct an array of digits an input string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">digitstring</td><td>String that must contain only digits, or only digits and commas </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">ndigits</td><td>Size of return array with the values of the digits </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">digitlist</td><td>Array of digits found in digitstring. Allocated by this function with size *ndigits. Calling code is responsible for deallocation. If digitstring is NULL, then ndigits is set to zero and digitlist to NULL. If digitstring contains a non digit-or-comma character, a fatal error results. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a36c31afc53e5a1e87177eff988d6d17e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rtrim </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove trailing whitespace from a string. </p>

</div>
</div>
<a class="anchor" id="ae4477abec400b014f38cc5389835f742"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">gmx_int64_t str_to_int64_t </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>endptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a string to gmx_int64_t. </p>
<p>This method works as the standard library function strtol(), except that it does not support different bases. </p>

</div>
</div>
<a class="anchor" id="a4371bd7d8210d09a110b9642b42b7e7f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void strip_comment </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>line</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove portion of a line after a <a class="el" href="cstringutil_8h.xhtml#a15be34a1d7b93d10f581b60833afca7a" title="Comment sign to use. ">COMMENTSIGN</a>. </p>

</div>
</div>
<a class="anchor" id="a60ea663401e86ca2a60a29e76c716679"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void trim </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove leading and trailing whitespace from a string. </p>

</div>
</div>
<a class="anchor" id="a74173c7afe5600452edf4956ae58bbe8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void upstring </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Make a string uppercase. </p>

</div>
</div>
<a class="anchor" id="a78512fb6ca46ef3528c91480dfcfba2a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* wrap_lines </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line_width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>indent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="basedefinitions_8h.xhtml#a8fddad319f226e856400d190198d5151">gmx_bool</a>&#160;</td>
          <td class="paramname"><em>bIndentFirst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wraps lines, optionally indenting lines. </p>
<p>Wraps lines at <code>linewidth</code>, indenting all following lines by <code>indent</code> spaces. A temp buffer is allocated and returned, which can be disposed of if no longer needed. If <code>bIndentFirst</code> is FALSE, then the first line will not be indented, only the lines that are created due to wapping. </p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a class="anchor" id="a929ed36fc580abd4984ae5500adbf9c3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned int gmx_string_hash_init</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Magic hash initialization number from Dan J. </p>
<p>Bernstein. </p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:19:34 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
