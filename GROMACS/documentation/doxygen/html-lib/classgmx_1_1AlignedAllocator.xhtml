<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::AlignedAllocator&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml">AlignedAllocator</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="classgmx_1_1AlignedAllocator-members.xhtml">List of all members</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">gmx::AlignedAllocator&lt; T &gt; Class Template Reference<div class="ingroups"><a class="el" href="group__group__libraryapi.xhtml">Library API</a> &#124; <a class="el" href="group__module__utility.xhtml">Low-Level Utilities (utility)</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;gromacs/utility/alignedallocator.h&gt;</code></p>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><h3>template&lt;class T&gt;<br/>
class gmx::AlignedAllocator&lt; T &gt;</h3>

<p>Aligned memory allocator. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Type of objects to allocate</td></tr>
  </table>
  </dd>
</dl>
<p>This class can be used for the optional allocator template parameter in standard library containers, which is necessary e.g. to use SIMD aligned load and store operations in those containers. The memory will always be aligned to 128 bytes, which is our estimate of the longest cache lines on architectures currently in use. It will also be padded by the same amount at the end of the area, to help avoid false cache sharing.</p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>Instead of a GROMACS exception object we throw the standard one on allocation failures to make it as compatible as possible with the errors expected by code using the standard library containers. </td></tr>
  </table>
  </dd>
</dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgmx_1_1AlignedAllocator_1_1rebind.xhtml">rebind</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard-required typedef to use allocator with different class.  <a href="structgmx_1_1AlignedAllocator_1_1rebind.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a677357166e167adc9266c74621959e7b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a677357166e167adc9266c74621959e7b"></a>
typedef T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a677357166e167adc9266c74621959e7b">value_type</a></td></tr>
<tr class="memdesc:a677357166e167adc9266c74621959e7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of allocated elements. <br/></td></tr>
<tr class="separator:a677357166e167adc9266c74621959e7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51dd28eb304c1969e2fab4c2a6a29108"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a51dd28eb304c1969e2fab4c2a6a29108"></a>
typedef T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a51dd28eb304c1969e2fab4c2a6a29108">reference</a></td></tr>
<tr class="memdesc:a51dd28eb304c1969e2fab4c2a6a29108"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reference to allocated elements. <br/></td></tr>
<tr class="separator:a51dd28eb304c1969e2fab4c2a6a29108"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6448fac83f7da202996dd5c2b492aa6b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6448fac83f7da202996dd5c2b492aa6b"></a>
typedef const T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a6448fac83f7da202996dd5c2b492aa6b">const_reference</a></td></tr>
<tr class="memdesc:a6448fac83f7da202996dd5c2b492aa6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant reference to allocated elements. <br/></td></tr>
<tr class="separator:a6448fac83f7da202996dd5c2b492aa6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac87223f955ff47913b00c1173960e2ec"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac87223f955ff47913b00c1173960e2ec"></a>
typedef T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#ac87223f955ff47913b00c1173960e2ec">pointer</a></td></tr>
<tr class="memdesc:ac87223f955ff47913b00c1173960e2ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pointer to allocated elements. <br/></td></tr>
<tr class="separator:ac87223f955ff47913b00c1173960e2ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38870b826c1240841455ca5510948eb0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a38870b826c1240841455ca5510948eb0"></a>
typedef const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a38870b826c1240841455ca5510948eb0">const_pointer</a></td></tr>
<tr class="memdesc:a38870b826c1240841455ca5510948eb0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant pointer to allocated elements. <br/></td></tr>
<tr class="separator:a38870b826c1240841455ca5510948eb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d3a8c78d56d0904868706dbe119ccdd"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2d3a8c78d56d0904868706dbe119ccdd"></a>
typedef std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a2d3a8c78d56d0904868706dbe119ccdd">size_type</a></td></tr>
<tr class="memdesc:a2d3a8c78d56d0904868706dbe119ccdd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer type to use for size of objects. <br/></td></tr>
<tr class="separator:a2d3a8c78d56d0904868706dbe119ccdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a494b6ca0f5efd3d5f6935f3e3e3ab70c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a494b6ca0f5efd3d5f6935f3e3e3ab70c"></a>
typedef std::ptrdiff_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a494b6ca0f5efd3d5f6935f3e3e3ab70c">difference_type</a></td></tr>
<tr class="memdesc:a494b6ca0f5efd3d5f6935f3e3e3ab70c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type to hold differences between pointers. <br/></td></tr>
<tr class="separator:a494b6ca0f5efd3d5f6935f3e3e3ab70c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:afd4aaa18a61ec445d5c84a3c2a3dad91"><td class="memTemplParams" colspan="2">template&lt;class U &gt; </td></tr>
<tr class="memitem:afd4aaa18a61ec445d5c84a3c2a3dad91"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#afd4aaa18a61ec445d5c84a3c2a3dad91">AlignedAllocator</a> (const <a class="el" href="classgmx_1_1AlignedAllocator.xhtml">AlignedAllocator</a>&lt; U &gt; &amp;)</td></tr>
<tr class="memdesc:afd4aaa18a61ec445d5c84a3c2a3dad91"><td class="mdescLeft">&#160;</td><td class="mdescRight">Templated copy constructor.  <a href="#afd4aaa18a61ec445d5c84a3c2a3dad91">More...</a><br/></td></tr>
<tr class="separator:afd4aaa18a61ec445d5c84a3c2a3dad91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af120711baba893800bd57aa705838716"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#af120711baba893800bd57aa705838716">AlignedAllocator</a> ()</td></tr>
<tr class="memdesc:af120711baba893800bd57aa705838716"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#af120711baba893800bd57aa705838716">More...</a><br/></td></tr>
<tr class="separator:af120711baba893800bd57aa705838716"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4555558379d2108737b4958a694f7461"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#ac87223f955ff47913b00c1173960e2ec">pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a4555558379d2108737b4958a694f7461">address</a> (<a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a51dd28eb304c1969e2fab4c2a6a29108">reference</a> r) const </td></tr>
<tr class="memdesc:a4555558379d2108737b4958a694f7461"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return address of an object.  <a href="#a4555558379d2108737b4958a694f7461">More...</a><br/></td></tr>
<tr class="separator:a4555558379d2108737b4958a694f7461"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2878eff97ba969633cb2d4a452955255"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a38870b826c1240841455ca5510948eb0">const_pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a2878eff97ba969633cb2d4a452955255">address</a> (<a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a6448fac83f7da202996dd5c2b492aa6b">const_reference</a> r) const </td></tr>
<tr class="memdesc:a2878eff97ba969633cb2d4a452955255"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return address of a const object.  <a href="#a2878eff97ba969633cb2d4a452955255">More...</a><br/></td></tr>
<tr class="separator:a2878eff97ba969633cb2d4a452955255"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cee961fd20968e4809e52a9c0a96fe7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#ac87223f955ff47913b00c1173960e2ec">pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a4cee961fd20968e4809e52a9c0a96fe7">allocate</a> (std::size_t n, typename std::allocator&lt; void &gt;::<a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a38870b826c1240841455ca5510948eb0">const_pointer</a> hint=0)</td></tr>
<tr class="memdesc:a4cee961fd20968e4809e52a9c0a96fe7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do the actual memory allocation.  <a href="#a4cee961fd20968e4809e52a9c0a96fe7">More...</a><br/></td></tr>
<tr class="separator:a4cee961fd20968e4809e52a9c0a96fe7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd6558b11514455470876cb4ca7a0aad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#acd6558b11514455470876cb4ca7a0aad">deallocate</a> (<a class="el" href="classgmx_1_1AlignedAllocator.xhtml#ac87223f955ff47913b00c1173960e2ec">pointer</a> p, std::size_t n)</td></tr>
<tr class="memdesc:acd6558b11514455470876cb4ca7a0aad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Release memory.  <a href="#acd6558b11514455470876cb4ca7a0aad">More...</a><br/></td></tr>
<tr class="separator:acd6558b11514455470876cb4ca7a0aad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6edc056e97a90772fc1e024344cf3842"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:a6edc056e97a90772fc1e024344cf3842"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a6edc056e97a90772fc1e024344cf3842">construct</a> (<a class="el" href="classgmx_1_1AlignedAllocator.xhtml#ac87223f955ff47913b00c1173960e2ec">pointer</a> p, Args &amp;&amp;...args)</td></tr>
<tr class="memdesc:a6edc056e97a90772fc1e024344cf3842"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct an object without allocating memory.  <a href="#a6edc056e97a90772fc1e024344cf3842">More...</a><br/></td></tr>
<tr class="separator:a6edc056e97a90772fc1e024344cf3842"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afaed62ee93df256992b5b51d46e794d9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#afaed62ee93df256992b5b51d46e794d9">destroy</a> (<a class="el" href="classgmx_1_1AlignedAllocator.xhtml#ac87223f955ff47913b00c1173960e2ec">pointer</a> p)</td></tr>
<tr class="memdesc:afaed62ee93df256992b5b51d46e794d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call the destructor of object without releasing memory.  <a href="#afaed62ee93df256992b5b51d46e794d9">More...</a><br/></td></tr>
<tr class="separator:afaed62ee93df256992b5b51d46e794d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b7d39324f43782b93e860a6cf01286b"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a2b7d39324f43782b93e860a6cf01286b">max_size</a> () const </td></tr>
<tr class="memdesc:a2b7d39324f43782b93e860a6cf01286b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return largest number of objects that can be allocated.  <a href="#a2b7d39324f43782b93e860a6cf01286b">More...</a><br/></td></tr>
<tr class="separator:a2b7d39324f43782b93e860a6cf01286b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a267cf3371f0a3e51595ebe34b6b90e39"><td class="memTemplParams" colspan="2">template&lt;class T2 &gt; </td></tr>
<tr class="memitem:a267cf3371f0a3e51595ebe34b6b90e39"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a267cf3371f0a3e51595ebe34b6b90e39">operator==</a> (const <a class="el" href="classgmx_1_1AlignedAllocator.xhtml">AlignedAllocator</a>&lt; T2 &gt; &amp;rhs) const </td></tr>
<tr class="memdesc:a267cf3371f0a3e51595ebe34b6b90e39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if two allocators are identical.  <a href="#a267cf3371f0a3e51595ebe34b6b90e39">More...</a><br/></td></tr>
<tr class="separator:a267cf3371f0a3e51595ebe34b6b90e39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac58071cd8c225d1d9468ce61385d1cbf"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#ac58071cd8c225d1d9468ce61385d1cbf">operator!=</a> (const <a class="el" href="classgmx_1_1AlignedAllocator.xhtml">AlignedAllocator</a> &amp;rhs) const </td></tr>
<tr class="memdesc:ac58071cd8c225d1d9468ce61385d1cbf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if two allocators are different.  <a href="#ac58071cd8c225d1d9468ce61385d1cbf">More...</a><br/></td></tr>
<tr class="separator:ac58071cd8c225d1d9468ce61385d1cbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="afd4aaa18a61ec445d5c84a3c2a3dad91"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<div class="memtemplate">
template&lt;class U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml">gmx::AlignedAllocator</a>&lt; T &gt;::<a class="el" href="classgmx_1_1AlignedAllocator.xhtml">AlignedAllocator</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1AlignedAllocator.xhtml">AlignedAllocator</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Templated copy constructor. </p>
<p>This template constructor cannot be auto-generated, and is normally unused, except e.g. MSVC2015 standard library uses it in debug mode, presumably to implement some checks. </p>

</div>
</div>
<a class="anchor" id="af120711baba893800bd57aa705838716"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml">gmx::AlignedAllocator</a>&lt; T &gt;::<a class="el" href="classgmx_1_1AlignedAllocator.xhtml">AlignedAllocator</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor. </p>
<p>No constructor can be auto-generated in the presence of any user-defined constructor, but we want the default constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a4555558379d2108737b4958a694f7461"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#ac87223f955ff47913b00c1173960e2ec">pointer</a> <a class="el" href="classgmx_1_1AlignedAllocator.xhtml">gmx::AlignedAllocator</a>&lt; T &gt;::address </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a51dd28eb304c1969e2fab4c2a6a29108">reference</a>&#160;</td>
          <td class="paramname"><em>r</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return address of an object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">r</td><td>Reference to object of type T </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to T memory </dd></dl>

</div>
</div>
<a class="anchor" id="a2878eff97ba969633cb2d4a452955255"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a38870b826c1240841455ca5510948eb0">const_pointer</a> <a class="el" href="classgmx_1_1AlignedAllocator.xhtml">gmx::AlignedAllocator</a>&lt; T &gt;::address </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a6448fac83f7da202996dd5c2b492aa6b">const_reference</a>&#160;</td>
          <td class="paramname"><em>r</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return address of a const object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">r</td><td>Const reference to object of type T </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to T memory </dd></dl>

</div>
</div>
<a class="anchor" id="a4cee961fd20968e4809e52a9c0a96fe7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#ac87223f955ff47913b00c1173960e2ec">pointer</a> <a class="el" href="classgmx_1_1AlignedAllocator.xhtml">gmx::AlignedAllocator</a>&lt; T &gt;::allocate </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">typename std::allocator&lt; void &gt;::<a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a38870b826c1240841455ca5510948eb0">const_pointer</a>&#160;</td>
          <td class="paramname"><em>hint</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Do the actual memory allocation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">n</td><td>Number of elements of type T to allocate. n can be 0 bytes, which will return a non-null properly aligned and padded pointer that should not be used. </td></tr>
    <tr><td class="paramname">hint</td><td>Optional value returned from previous call to allocate. For now this is not used. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to allocated memory</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if the allocation fails. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6edc056e97a90772fc1e024344cf3842"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgmx_1_1AlignedAllocator.xhtml">gmx::AlignedAllocator</a>&lt; T &gt;::construct </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#ac87223f955ff47913b00c1173960e2ec">pointer</a>&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Construct an object without allocating memory. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Args</td><td>Variable-length list of types for constructor args </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>Adress of memory where to construct object </td></tr>
    <tr><td class="paramname">args</td><td>Variable-length list of arguments to constructor </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="acd6558b11514455470876cb4ca7a0aad"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgmx_1_1AlignedAllocator.xhtml">gmx::AlignedAllocator</a>&lt; T &gt;::deallocate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#ac87223f955ff47913b00c1173960e2ec">pointer</a>&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Release memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>Pointer to previously allocated memory returned from <a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a4cee961fd20968e4809e52a9c0a96fe7" title="Do the actual memory allocation. ">allocate()</a> </td></tr>
    <tr><td class="paramname">n</td><td>number of objects previously passed to <a class="el" href="classgmx_1_1AlignedAllocator.xhtml#a4cee961fd20968e4809e52a9c0a96fe7" title="Do the actual memory allocation. ">allocate()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afaed62ee93df256992b5b51d46e794d9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgmx_1_1AlignedAllocator.xhtml">gmx::AlignedAllocator</a>&lt; T &gt;::destroy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1AlignedAllocator.xhtml#ac87223f955ff47913b00c1173960e2ec">pointer</a>&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Call the destructor of object without releasing memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>Address of memory where to destroy object </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2b7d39324f43782b93e860a6cf01286b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="classgmx_1_1AlignedAllocator.xhtml">gmx::AlignedAllocator</a>&lt; T &gt;::max_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return largest number of objects that can be allocated. </p>
<p>This will be set such that the number of objects T multiplied by the size of each object is the largest value that can be represented by size_type. </p>

</div>
</div>
<a class="anchor" id="ac58071cd8c225d1d9468ce61385d1cbf"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgmx_1_1AlignedAllocator.xhtml">gmx::AlignedAllocator</a>&lt; T &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1AlignedAllocator.xhtml">AlignedAllocator</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return true if two allocators are different. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rhs</td><td>Other allocator.</td></tr>
  </table>
  </dd>
</dl>
<p>This is a member function of the left-hand-side allocator. </p>

</div>
</div>
<a class="anchor" id="a267cf3371f0a3e51595ebe34b6b90e39"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<div class="memtemplate">
template&lt;class T2 &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgmx_1_1AlignedAllocator.xhtml">gmx::AlignedAllocator</a>&lt; T &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1AlignedAllocator.xhtml">AlignedAllocator</a>&lt; T2 &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return true if two allocators are identical. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rhs</td><td>Other allocator</td></tr>
  </table>
  </dd>
</dl>
<p>This is a member function of the left-hand-side allocator. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/gromacs/utility/<a class="el" href="alignedallocator_8h.xhtml">alignedallocator.h</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:19:42 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
