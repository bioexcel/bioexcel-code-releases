<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: gmx::OptionStorageTemplate&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegmx.xhtml">gmx</a></li><li class="navelem"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">OptionStorageTemplate</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="classgmx_1_1OptionStorageTemplate-members.xhtml">List of all members</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-static-attribs">Static Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">gmx::OptionStorageTemplate&lt; T &gt; Class Template Reference<span class="mlabels"><span class="mlabel">abstract</span></span><div class="ingroups"><a class="el" href="group__group__libraryapi.xhtml">Library API</a> &#124; <a class="el" href="group__module__options.xhtml">Extensible Handling of Options (options)</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;gromacs/options/optionstoragetemplate.h&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for gmx::OptionStorageTemplate&lt; T &gt;:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classgmx_1_1OptionStorageTemplate__inherit__graph.svg" width="235" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for gmx::OptionStorageTemplate&lt; T &gt;:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classgmx_1_1OptionStorageTemplate__coll__graph.svg" width="235" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br/>
class gmx::OptionStorageTemplate&lt; T &gt;</h3>

<p>Templated base class for constructing option value storage classes. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Assignable type that stores a single option value.</td></tr>
  </table>
  </dd>
</dl>
<p>Provides an implementation of the <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a96507a21540785ce55c5dc0777a9c7e7" title="Removes all values from temporary storage for a set. ">clearSet()</a>, <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ae63cf6e91d4d1cb3e8cbe4de35058604" title="Returns the number of option values added so far. ">valueCount()</a>, and <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a72cf6c7884e6e23e6f71b8dc2dbede40" title="Performs validation and/or actions once a set of values has been added. ">processSet()</a> methods of <a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml" title="Abstract base class for converting, validating, and storing option values. ">AbstractOptionStorage</a>, as well as a basic no-action implementation of <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a51614d345954174fcd417bf76de828e8" title="Performs validation and/or actions once all values have been added. ">processAll()</a>. Two new virtual methods are added: <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ac2087a4d9de673881807396fe394319c" title="Processes values for a set after all have been converted. ">processSetValues()</a> and <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a5ee640e7f9dfcda26f44882bac46e5da" title="Updates alternative store locations. ">refreshValues()</a>. The default implementation of <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ac2087a4d9de673881807396fe394319c" title="Processes values for a set after all have been converted. ">processSetValues()</a> does nothing, and <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a5ee640e7f9dfcda26f44882bac46e5da" title="Updates alternative store locations. ">refreshValues()</a> is used to update secondary storage after values have been added/changed. This leaves <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a9d0a3cd45d156c6dbfff5f2018a36fe6" title="Returns a short string describing the type of the option. ">typeString()</a>, <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ac65e90fe546f98837fa52cf92f8c1e20" title="Returns the i&#39;th value formatted as a string. ">formatValue()</a>, and <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a16bc81c18398085c38e2a89de7b99b72" title="Adds a new value, converting it from a string. ">convertValue()</a> to be implemented in derived classes. <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ac2087a4d9de673881807396fe394319c" title="Processes values for a set after all have been converted. ">processSetValues()</a> and <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a51614d345954174fcd417bf76de828e8" title="Performs validation and/or actions once all values have been added. ">processAll()</a> can also be implemented if necessary.</p>
<p>Implements transaction support for adding values within a set: all calls to <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ad7a265c0033a0c97e2dbead4f19a1735" title="Adds a value to a temporary storage. ">addValue()</a> add the value to a temporary storage, <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ac2087a4d9de673881807396fe394319c" title="Processes values for a set after all have been converted. ">processSetValues()</a> operates on this temporary storage, and <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a5cc8b970a7922f99e2a24eef2433a00c" title="Commits values added with addValue(). ">commitValues()</a> then copies these values to the real storage. <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a5cc8b970a7922f99e2a24eef2433a00c" title="Commits values added with addValue(). ">commitValues()</a> provides a strong exception safety guarantee for the process (and it only throws if it runs out of memory). </p>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a331a2ea6e35627d2aef4ff1409492167"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a331a2ea6e35627d2aef4ff1409492167"></a>
typedef <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">OptionStorageTemplate</a>&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a331a2ea6e35627d2aef4ff1409492167">MyBase</a></td></tr>
<tr class="memdesc:a331a2ea6e35627d2aef4ff1409492167"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias for the template class for use in base classes. <br/></td></tr>
<tr class="separator:a331a2ea6e35627d2aef4ff1409492167"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58cbf66d644a4d22384f1dab5e6eaa5f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a58cbf66d644a4d22384f1dab5e6eaa5f"></a>
typedef std::vector&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a58cbf66d644a4d22384f1dab5e6eaa5f">ValueList</a></td></tr>
<tr class="memdesc:a58cbf66d644a4d22384f1dab5e6eaa5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the container that contains the current values. <br/></td></tr>
<tr class="separator:a58cbf66d644a4d22384f1dab5e6eaa5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a9d0a3cd45d156c6dbfff5f2018a36fe6"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9d0a3cd45d156c6dbfff5f2018a36fe6"></a>
virtual std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a9d0a3cd45d156c6dbfff5f2018a36fe6">typeString</a> () const =0</td></tr>
<tr class="memdesc:a9d0a3cd45d156c6dbfff5f2018a36fe6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a short string describing the type of the option. <br/></td></tr>
<tr class="separator:a9d0a3cd45d156c6dbfff5f2018a36fe6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae63cf6e91d4d1cb3e8cbe4de35058604"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ae63cf6e91d4d1cb3e8cbe4de35058604">valueCount</a> () const </td></tr>
<tr class="memdesc:ae63cf6e91d4d1cb3e8cbe4de35058604"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of option values added so far.  <a href="#ae63cf6e91d4d1cb3e8cbe4de35058604">More...</a><br/></td></tr>
<tr class="separator:ae63cf6e91d4d1cb3e8cbe4de35058604"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac65e90fe546f98837fa52cf92f8c1e20"><td class="memItemLeft" align="right" valign="top">virtual std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ac65e90fe546f98837fa52cf92f8c1e20">formatValue</a> (int i) const </td></tr>
<tr class="memdesc:ac65e90fe546f98837fa52cf92f8c1e20"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the i'th value formatted as a string.  <a href="#ac65e90fe546f98837fa52cf92f8c1e20">More...</a><br/></td></tr>
<tr class="separator:ac65e90fe546f98837fa52cf92f8c1e20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2097f0f1c88c6e5549193559287fd45"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad2097f0f1c88c6e5549193559287fd45"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#ad2097f0f1c88c6e5549193559287fd45">isSet</a> () const </td></tr>
<tr class="memdesc:ad2097f0f1c88c6e5549193559287fd45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the option has been set. <br/></td></tr>
<tr class="separator:ad2097f0f1c88c6e5549193559287fd45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29d58d7ea9051fed055bbfb1ba307439"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a29d58d7ea9051fed055bbfb1ba307439">isBoolean</a> () const </td></tr>
<tr class="memdesc:a29d58d7ea9051fed055bbfb1ba307439"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the option is a boolean option.  <a href="#a29d58d7ea9051fed055bbfb1ba307439">More...</a><br/></td></tr>
<tr class="separator:a29d58d7ea9051fed055bbfb1ba307439"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88331502f27fa03f609650322045adaf"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a88331502f27fa03f609650322045adaf"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a88331502f27fa03f609650322045adaf">isHidden</a> () const </td></tr>
<tr class="memdesc:a88331502f27fa03f609650322045adaf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the option is a hidden option. <br/></td></tr>
<tr class="separator:a88331502f27fa03f609650322045adaf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01bfa2e153b5733b9930de8344057583"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a01bfa2e153b5733b9930de8344057583"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a01bfa2e153b5733b9930de8344057583">isRequired</a> () const </td></tr>
<tr class="memdesc:a01bfa2e153b5733b9930de8344057583"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the option is required. <br/></td></tr>
<tr class="separator:a01bfa2e153b5733b9930de8344057583"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4f2db7255ecdd4633a7a9fafb508081"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af4f2db7255ecdd4633a7a9fafb508081"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#af4f2db7255ecdd4633a7a9fafb508081">isVector</a> () const </td></tr>
<tr class="memdesc:af4f2db7255ecdd4633a7a9fafb508081"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the option is vector-valued. <br/></td></tr>
<tr class="separator:af4f2db7255ecdd4633a7a9fafb508081"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5f49905072b9517a755e2c6ee136365"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab5f49905072b9517a755e2c6ee136365"></a>
const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#ab5f49905072b9517a755e2c6ee136365">name</a> () const </td></tr>
<tr class="memdesc:ab5f49905072b9517a755e2c6ee136365"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the name of the option. <br/></td></tr>
<tr class="separator:ab5f49905072b9517a755e2c6ee136365"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c502d185cd3b3e862fda1465478e0e0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3c502d185cd3b3e862fda1465478e0e0"></a>
const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a3c502d185cd3b3e862fda1465478e0e0">description</a> () const </td></tr>
<tr class="memdesc:a3c502d185cd3b3e862fda1465478e0e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the description of the option set by the calling code. <br/></td></tr>
<tr class="separator:a3c502d185cd3b3e862fda1465478e0e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7bbdfb210f9e7c61225fa6495732370f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7bbdfb210f9e7c61225fa6495732370f"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a7bbdfb210f9e7c61225fa6495732370f">defaultValueIfSetExists</a> () const </td></tr>
<tr class="memdesc:a7bbdfb210f9e7c61225fa6495732370f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if defaultValueIfSet() value is specified. <br/></td></tr>
<tr class="separator:a7bbdfb210f9e7c61225fa6495732370f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b83a1075a05cf7724929d9a327c19d9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4b83a1075a05cf7724929d9a327c19d9"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a4b83a1075a05cf7724929d9a327c19d9">minValueCount</a> () const </td></tr>
<tr class="memdesc:a4b83a1075a05cf7724929d9a327c19d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the minimum number of values required in one set. <br/></td></tr>
<tr class="separator:a4b83a1075a05cf7724929d9a327c19d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49d1050263094d215b032f2cc45d4bf2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a49d1050263094d215b032f2cc45d4bf2"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a49d1050263094d215b032f2cc45d4bf2">maxValueCount</a> () const </td></tr>
<tr class="memdesc:a49d1050263094d215b032f2cc45d4bf2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the maximum allowed number of values in one set (-1 = no limit). <br/></td></tr>
<tr class="separator:a49d1050263094d215b032f2cc45d4bf2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43e2b0b2040bba6ffb81ad242bcf0bf8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a43e2b0b2040bba6ffb81ad242bcf0bf8"></a>
virtual <a class="el" href="classgmx_1_1OptionInfo.xhtml">OptionInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a43e2b0b2040bba6ffb81ad242bcf0bf8">optionInfo</a> ()=0</td></tr>
<tr class="memdesc:a43e2b0b2040bba6ffb81ad242bcf0bf8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an option info object corresponding to this option. <br/></td></tr>
<tr class="separator:a43e2b0b2040bba6ffb81ad242bcf0bf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaa5310b634232d6c73f97d8d5ec4a57"><td class="memItemLeft" align="right" valign="top">virtual std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#adaa5310b634232d6c73f97d8d5ec4a57">formatExtraDescription</a> () const </td></tr>
<tr class="memdesc:adaa5310b634232d6c73f97d8d5ec4a57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats additional description for the option.  <a href="#adaa5310b634232d6c73f97d8d5ec4a57">More...</a><br/></td></tr>
<tr class="separator:adaa5310b634232d6c73f97d8d5ec4a57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a471240a802f212999c63919b3fbbd846"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a471240a802f212999c63919b3fbbd846">formatDefaultValueIfSet</a> () const </td></tr>
<tr class="memdesc:a471240a802f212999c63919b3fbbd846"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the default value if set for the option as a string.  <a href="#a471240a802f212999c63919b3fbbd846">More...</a><br/></td></tr>
<tr class="separator:a471240a802f212999c63919b3fbbd846"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade91fa23f548325aa893ad4d179439fd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#ade91fa23f548325aa893ad4d179439fd">startSource</a> ()</td></tr>
<tr class="memdesc:ade91fa23f548325aa893ad4d179439fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Starts adding values from a new source for the option.  <a href="#ade91fa23f548325aa893ad4d179439fd">More...</a><br/></td></tr>
<tr class="separator:ade91fa23f548325aa893ad4d179439fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18f2d143bce5bfabfee3f4ccc8c7a9d2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a18f2d143bce5bfabfee3f4ccc8c7a9d2">startSet</a> ()</td></tr>
<tr class="memdesc:a18f2d143bce5bfabfee3f4ccc8c7a9d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Starts adding a new set of values for the option.  <a href="#a18f2d143bce5bfabfee3f4ccc8c7a9d2">More...</a><br/></td></tr>
<tr class="separator:a18f2d143bce5bfabfee3f4ccc8c7a9d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a52974de7c31160eddbbe7bece745b6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a4a52974de7c31160eddbbe7bece745b6">appendValue</a> (const std::string &amp;value)</td></tr>
<tr class="memdesc:a4a52974de7c31160eddbbe7bece745b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a new value for the option, converting it from a string.  <a href="#a4a52974de7c31160eddbbe7bece745b6">More...</a><br/></td></tr>
<tr class="separator:a4a52974de7c31160eddbbe7bece745b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ea3148553e7b8da30b9b50f17f89a94"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a2ea3148553e7b8da30b9b50f17f89a94">finishSet</a> ()</td></tr>
<tr class="memdesc:a2ea3148553e7b8da30b9b50f17f89a94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs validation and/or actions once a set of values has been added.  <a href="#a2ea3148553e7b8da30b9b50f17f89a94">More...</a><br/></td></tr>
<tr class="separator:a2ea3148553e7b8da30b9b50f17f89a94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0ddac0898462d8aae5d55d5c2919963"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#ac0ddac0898462d8aae5d55d5c2919963">finish</a> ()</td></tr>
<tr class="memdesc:ac0ddac0898462d8aae5d55d5c2919963"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs validation and/or actions once all values have been added.  <a href="#ac0ddac0898462d8aae5d55d5c2919963">More...</a><br/></td></tr>
<tr class="separator:ac0ddac0898462d8aae5d55d5c2919963"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a979a7a8f2176df65f7ba26e52e67da6e"><td class="memTemplParams" colspan="2">template&lt;class U &gt; </td></tr>
<tr class="memitem:a979a7a8f2176df65f7ba26e52e67da6e"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a979a7a8f2176df65f7ba26e52e67da6e">OptionStorageTemplate</a> (const <a class="el" href="classgmx_1_1OptionTemplate.xhtml">OptionTemplate</a>&lt; T, U &gt; &amp;settings, <a class="el" href="namespacegmx.xhtml#a0b60cc84dcdf372e00a5084712630993">OptionFlags</a> staticFlags=<a class="el" href="namespacegmx.xhtml#a0b60cc84dcdf372e00a5084712630993">OptionFlags</a>())</td></tr>
<tr class="memdesc:a979a7a8f2176df65f7ba26e52e67da6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the storage from option settings.  <a href="#a979a7a8f2176df65f7ba26e52e67da6e">More...</a><br/></td></tr>
<tr class="separator:a979a7a8f2176df65f7ba26e52e67da6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8f80c3cf8e3c6c45d3e11b5f6795c07"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ab8f80c3cf8e3c6c45d3e11b5f6795c07">OptionStorageTemplate</a> (const <a class="el" href="classgmx_1_1AbstractOption.xhtml">AbstractOption</a> &amp;settings)</td></tr>
<tr class="memdesc:ab8f80c3cf8e3c6c45d3e11b5f6795c07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the storage from base option settings.  <a href="#ab8f80c3cf8e3c6c45d3e11b5f6795c07">More...</a><br/></td></tr>
<tr class="separator:ab8f80c3cf8e3c6c45d3e11b5f6795c07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96507a21540785ce55c5dc0777a9c7e7"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a96507a21540785ce55c5dc0777a9c7e7">clearSet</a> ()</td></tr>
<tr class="memdesc:a96507a21540785ce55c5dc0777a9c7e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all values from temporary storage for a set.  <a href="#a96507a21540785ce55c5dc0777a9c7e7">More...</a><br/></td></tr>
<tr class="separator:a96507a21540785ce55c5dc0777a9c7e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16bc81c18398085c38e2a89de7b99b72"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a16bc81c18398085c38e2a89de7b99b72">convertValue</a> (const std::string &amp;value)=0</td></tr>
<tr class="memdesc:a16bc81c18398085c38e2a89de7b99b72"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a new value, converting it from a string.  <a href="#a16bc81c18398085c38e2a89de7b99b72">More...</a><br/></td></tr>
<tr class="separator:a16bc81c18398085c38e2a89de7b99b72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2087a4d9de673881807396fe394319c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ac2087a4d9de673881807396fe394319c">processSetValues</a> (<a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a58cbf66d644a4d22384f1dab5e6eaa5f">ValueList</a> *<a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ad19c6d984aadb90102fa2e7e070d47d0">values</a>)</td></tr>
<tr class="memdesc:ac2087a4d9de673881807396fe394319c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Processes values for a set after all have been converted.  <a href="#ac2087a4d9de673881807396fe394319c">More...</a><br/></td></tr>
<tr class="separator:ac2087a4d9de673881807396fe394319c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72cf6c7884e6e23e6f71b8dc2dbede40"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a72cf6c7884e6e23e6f71b8dc2dbede40">processSet</a> ()</td></tr>
<tr class="memdesc:a72cf6c7884e6e23e6f71b8dc2dbede40"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs validation and/or actions once a set of values has been added.  <a href="#a72cf6c7884e6e23e6f71b8dc2dbede40">More...</a><br/></td></tr>
<tr class="separator:a72cf6c7884e6e23e6f71b8dc2dbede40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51614d345954174fcd417bf76de828e8"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a51614d345954174fcd417bf76de828e8">processAll</a> ()</td></tr>
<tr class="memdesc:a51614d345954174fcd417bf76de828e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs validation and/or actions once all values have been added.  <a href="#a51614d345954174fcd417bf76de828e8">More...</a><br/></td></tr>
<tr class="separator:a51614d345954174fcd417bf76de828e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba54f7d43ae5ec873428ba0d56b39b06"><td class="memItemLeft" align="right" valign="top">virtual std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#aba54f7d43ae5ec873428ba0d56b39b06">formatSingleValue</a> (const T &amp;value) const =0</td></tr>
<tr class="memdesc:aba54f7d43ae5ec873428ba0d56b39b06"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formats a single value as a string.  <a href="#aba54f7d43ae5ec873428ba0d56b39b06">More...</a><br/></td></tr>
<tr class="separator:aba54f7d43ae5ec873428ba0d56b39b06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1d19939ff083d98f546ca96d5a3c34b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ab1d19939ff083d98f546ca96d5a3c34b">clear</a> ()</td></tr>
<tr class="memdesc:ab1d19939ff083d98f546ca96d5a3c34b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all values from the storage.  <a href="#ab1d19939ff083d98f546ca96d5a3c34b">More...</a><br/></td></tr>
<tr class="separator:ab1d19939ff083d98f546ca96d5a3c34b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7a265c0033a0c97e2dbead4f19a1735"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ad7a265c0033a0c97e2dbead4f19a1735">addValue</a> (const T &amp;value)</td></tr>
<tr class="memdesc:ad7a265c0033a0c97e2dbead4f19a1735"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a value to a temporary storage.  <a href="#ad7a265c0033a0c97e2dbead4f19a1735">More...</a><br/></td></tr>
<tr class="separator:ad7a265c0033a0c97e2dbead4f19a1735"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cc8b970a7922f99e2a24eef2433a00c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a5cc8b970a7922f99e2a24eef2433a00c">commitValues</a> ()</td></tr>
<tr class="memdesc:a5cc8b970a7922f99e2a24eef2433a00c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Commits values added with <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ad7a265c0033a0c97e2dbead4f19a1735" title="Adds a value to a temporary storage. ">addValue()</a>.  <a href="#a5cc8b970a7922f99e2a24eef2433a00c">More...</a><br/></td></tr>
<tr class="separator:a5cc8b970a7922f99e2a24eef2433a00c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ee640e7f9dfcda26f44882bac46e5da"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a5ee640e7f9dfcda26f44882bac46e5da">refreshValues</a> ()</td></tr>
<tr class="memdesc:a5ee640e7f9dfcda26f44882bac46e5da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates alternative store locations.  <a href="#a5ee640e7f9dfcda26f44882bac46e5da">More...</a><br/></td></tr>
<tr class="separator:a5ee640e7f9dfcda26f44882bac46e5da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28ff31e0d6b783b725ad306bc370b73b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a28ff31e0d6b783b725ad306bc370b73b">setDefaultValue</a> (const T &amp;value)</td></tr>
<tr class="memdesc:a28ff31e0d6b783b725ad306bc370b73b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the default value for the option.  <a href="#a28ff31e0d6b783b725ad306bc370b73b">More...</a><br/></td></tr>
<tr class="separator:a28ff31e0d6b783b725ad306bc370b73b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36bc6c3a3061abef502856d64799d1dc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a36bc6c3a3061abef502856d64799d1dc">setDefaultValueIfSet</a> (const T &amp;value)</td></tr>
<tr class="memdesc:a36bc6c3a3061abef502856d64799d1dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the default value if set for the option.  <a href="#a36bc6c3a3061abef502856d64799d1dc">More...</a><br/></td></tr>
<tr class="separator:a36bc6c3a3061abef502856d64799d1dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad19c6d984aadb90102fa2e7e070d47d0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a58cbf66d644a4d22384f1dab5e6eaa5f">ValueList</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ad19c6d984aadb90102fa2e7e070d47d0">values</a> ()</td></tr>
<tr class="memdesc:ad19c6d984aadb90102fa2e7e070d47d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides derived classes access to the current list of values.  <a href="#ad19c6d984aadb90102fa2e7e070d47d0">More...</a><br/></td></tr>
<tr class="separator:ad19c6d984aadb90102fa2e7e070d47d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae51cea8bf9daa3bc29fd95483e4df285"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae51cea8bf9daa3bc29fd95483e4df285"></a>
const <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a58cbf66d644a4d22384f1dab5e6eaa5f">ValueList</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ae51cea8bf9daa3bc29fd95483e4df285">values</a> () const </td></tr>
<tr class="memdesc:ae51cea8bf9daa3bc29fd95483e4df285"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides derived classes access to the current list of values. <br/></td></tr>
<tr class="separator:ae51cea8bf9daa3bc29fd95483e4df285"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af02f972186bba8ff52f0e789e7d6fedc"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af02f972186bba8ff52f0e789e7d6fedc"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#af02f972186bba8ff52f0e789e7d6fedc">markAsSet</a> ()</td></tr>
<tr class="memdesc:af02f972186bba8ff52f0e789e7d6fedc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Marks the option as set. <br/></td></tr>
<tr class="separator:af02f972186bba8ff52f0e789e7d6fedc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a432d25fcf4ff2079b3fee2acba70cb9a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a432d25fcf4ff2079b3fee2acba70cb9a"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a432d25fcf4ff2079b3fee2acba70cb9a">hasFlag</a> (<a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987">OptionFlag</a> flag) const </td></tr>
<tr class="memdesc:a432d25fcf4ff2079b3fee2acba70cb9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the given flag is set. <br/></td></tr>
<tr class="separator:a432d25fcf4ff2079b3fee2acba70cb9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc92ddb8a068df8a4964377fc3aad290"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="afc92ddb8a068df8a4964377fc3aad290"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#afc92ddb8a068df8a4964377fc3aad290">setFlag</a> (<a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987">OptionFlag</a> flag)</td></tr>
<tr class="memdesc:afc92ddb8a068df8a4964377fc3aad290"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the given flag. <br/></td></tr>
<tr class="separator:afc92ddb8a068df8a4964377fc3aad290"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d6e0188ddb4972078e16beffb0f697a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4d6e0188ddb4972078e16beffb0f697a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a4d6e0188ddb4972078e16beffb0f697a">clearFlag</a> (<a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987">OptionFlag</a> flag)</td></tr>
<tr class="memdesc:a4d6e0188ddb4972078e16beffb0f697a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears the given flag. <br/></td></tr>
<tr class="separator:a4d6e0188ddb4972078e16beffb0f697a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a294172ec6d7594bec65903874d0b828a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a294172ec6d7594bec65903874d0b828a">setMinValueCount</a> (int count)</td></tr>
<tr class="memdesc:a294172ec6d7594bec65903874d0b828a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets a new minimum number of values required in one set.  <a href="#a294172ec6d7594bec65903874d0b828a">More...</a><br/></td></tr>
<tr class="separator:a294172ec6d7594bec65903874d0b828a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2f4d5f2d169e80a0edcb51cfe180eb4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#ab2f4d5f2d169e80a0edcb51cfe180eb4">setMaxValueCount</a> (int count)</td></tr>
<tr class="memdesc:ab2f4d5f2d169e80a0edcb51cfe180eb4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets a new maximum number of values required in one set.  <a href="#ab2f4d5f2d169e80a0edcb51cfe180eb4">More...</a><br/></td></tr>
<tr class="separator:ab2f4d5f2d169e80a0edcb51cfe180eb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-attribs"></a>
Static Protected Attributes</h2></td></tr>
<tr class="memitem:ac7a3e55e341f618132674d12d79d2620"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac7a3e55e341f618132674d12d79d2620"></a>
static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#ac7a3e55e341f618132674d12d79d2620">DefaultValueIfSetIndex</a> = -1</td></tr>
<tr class="memdesc:ac7a3e55e341f618132674d12d79d2620"><td class="mdescLeft">&#160;</td><td class="mdescRight">Index used with <a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#aa0fea60c4d07701f3ed32004b34d8cc1" title="Returns the i&#39;th value formatted as a string. ">formatValue()</a> for formatting default value if set. <br/></td></tr>
<tr class="separator:ac7a3e55e341f618132674d12d79d2620"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a979a7a8f2176df65f7ba26e52e67da6e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<div class="memtemplate">
template&lt;class U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">gmx::OptionStorageTemplate</a>&lt; T &gt;::<a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">OptionStorageTemplate</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1OptionTemplate.xhtml">OptionTemplate</a>&lt; T, U &gt; &amp;&#160;</td>
          <td class="paramname"><em>settings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacegmx.xhtml#a0b60cc84dcdf372e00a5084712630993">OptionFlags</a>&#160;</td>
          <td class="paramname"><em>staticFlags</em> = <code><a class="el" href="namespacegmx.xhtml#a0b60cc84dcdf372e00a5084712630993">OptionFlags</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes the storage from option settings. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">settings</td><td>Option settings. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">staticFlags</td><td>Option flags that are always set and specify generic behavior of the option. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1APIError.xhtml" title="Exception class for incorrect use of an API. ">APIError</a></td><td>if invalid settings have been provided. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab8f80c3cf8e3c6c45d3e11b5f6795c07"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">gmx::OptionStorageTemplate</a>&lt; T &gt;::<a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">OptionStorageTemplate</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgmx_1_1AbstractOption.xhtml">AbstractOption</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializes the storage from base option settings. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">settings</td><td>Option settings. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1APIError.xhtml" title="Exception class for incorrect use of an API. ">APIError</a></td><td>if invalid settings have been provided.</td></tr>
  </table>
  </dd>
</dl>
<p>This constructor works for cases where there is no matching <a class="el" href="classgmx_1_1OptionTemplate.xhtml" title="Templated base class for constructing concrete option settings classes. ">OptionTemplate</a> (e.g., <a class="el" href="classgmx_1_1EnumOption.xhtml" title="Specifies an option that accepts enumerated string values and writes the selected index into an enum ...">EnumOption</a>). </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ad7a265c0033a0c97e2dbead4f19a1735"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">gmx::OptionStorageTemplate</a>&lt; T &gt;::addValue </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a value to a temporary storage. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to add. A copy is made. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory. </td></tr>
    <tr><td class="paramname"><a class="el" href="classgmx_1_1InvalidInputError.xhtml" title="Exception class for situations where user input cannot be parsed/understood. ">InvalidInputError</a></td><td>if the maximum value count has been reached.</td></tr>
  </table>
  </dd>
</dl>
<p>Derived classes should call this function from the <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a16bc81c18398085c38e2a89de7b99b72" title="Adds a new value, converting it from a string. ">convertValue()</a> implementation to add converted values to the storage. If the maximum value count has been reached, the value is discarded and an exception is thrown.</p>
<p>If adding values outside <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a16bc81c18398085c38e2a89de7b99b72" title="Adds a new value, converting it from a string. ">convertValue()</a> (e.g., to set a custom default value), derived classes should call <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a96507a21540785ce55c5dc0777a9c7e7" title="Removes all values from temporary storage for a set. ">clearSet()</a> before adding values (unless in the constructor) and <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a5cc8b970a7922f99e2a24eef2433a00c" title="Commits values added with addValue(). ">commitValues()</a> once all values are added. </p>

</div>
</div>
<a class="anchor" id="a4a52974de7c31160eddbbe7bece745b6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::AbstractOptionStorage::appendValue </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a new value for the option, converting it from a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>String value to convert. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1InvalidInputError.xhtml" title="Exception class for situations where user input cannot be parsed/understood. ">InvalidInputError</a></td><td>if value cannot be converted, or if there are too many values.</td></tr>
  </table>
  </dd>
</dl>
<p>This method should only be called between <a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a18f2d143bce5bfabfee3f4ccc8c7a9d2" title="Starts adding a new set of values for the option. ">startSet()</a> and <a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a2ea3148553e7b8da30b9b50f17f89a94" title="Performs validation and/or actions once a set of values has been added. ">finishSet()</a>. </p>

</div>
</div>
<a class="anchor" id="ab1d19939ff083d98f546ca96d5a3c34b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">gmx::OptionStorageTemplate</a>&lt; T &gt;::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes all values from the storage. </p>
<p>Does not throw. </p>

</div>
</div>
<a class="anchor" id="a96507a21540785ce55c5dc0777a9c7e7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">gmx::OptionStorageTemplate</a>&lt; T &gt;::clearSet </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes all values from temporary storage for a set. </p>
<p>This function is always called before starting to add values to a set, allowing the storage to clear its internal buffers.</p>
<p>Should not throw. </p>

<p>Implements <a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a3777ada9336d3fd52068a9929b6fb3b8">gmx::AbstractOptionStorage</a>.</p>

</div>
</div>
<a class="anchor" id="a5cc8b970a7922f99e2a24eef2433a00c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">gmx::OptionStorageTemplate</a>&lt; T &gt;::commitValues </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Commits values added with <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ad7a265c0033a0c97e2dbead4f19a1735" title="Adds a value to a temporary storage. ">addValue()</a>. </p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>If this function succeeds, values added with <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ad7a265c0033a0c97e2dbead4f19a1735" title="Adds a value to a temporary storage. ">addValue()</a> since the previous <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a96507a21540785ce55c5dc0777a9c7e7" title="Removes all values from temporary storage for a set. ">clearSet()</a> are added to the storage for the option. Only throws in out-of-memory conditions, and provides the strong exception safety guarantee as long as the copy constructor of <code>T</code> does not throw.</p>
<p>See <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ad7a265c0033a0c97e2dbead4f19a1735" title="Adds a value to a temporary storage. ">addValue()</a> for cases where this method should be used in derived classes.</p>
<p>Calls <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a5ee640e7f9dfcda26f44882bac46e5da" title="Updates alternative store locations. ">refreshValues()</a> and <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a96507a21540785ce55c5dc0777a9c7e7" title="Removes all values from temporary storage for a set. ">clearSet()</a> if it is successful. </p>

</div>
</div>
<a class="anchor" id="a16bc81c18398085c38e2a89de7b99b72"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">gmx::OptionStorageTemplate</a>&lt; T &gt;::convertValue </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a new value, converting it from a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>String value to convert. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1InvalidInputError.xhtml" title="Exception class for situations where user input cannot be parsed/understood. ">InvalidInputError</a></td><td>if <code>value</code> is not valid for this option or if there have been too many values in the set.</td></tr>
  </table>
  </dd>
</dl>
<p>This method may be called multiple times if the underlying option is defined to accept multiple values.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a16bc81c18398085c38e2a89de7b99b72" title="Adds a new value, converting it from a string. ">OptionStorageTemplate::convertValue()</a></dd></dl>
<p>Derived classes should call <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ad7a265c0033a0c97e2dbead4f19a1735" title="Adds a value to a temporary storage. ">addValue()</a> after they have converted <code>value</code> to the storage type. It is allowed to call <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ad7a265c0033a0c97e2dbead4f19a1735" title="Adds a value to a temporary storage. ">addValue()</a> more than once, or not at all. <a class="el" href="classgmx_1_1OptionsAssigner.xhtml#a30cba2db5cbd7b4a61e7453c72face3d" title="Appends a value to the value list of the current option. ">OptionsAssigner::appendValue()</a> provides the same exception safety guarantee as this method, so it should be considered whether the implementation can be made strongly exception safe. </p>

<p>Implements <a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a4bc47d7fabf904201f16f1772ae4d12a">gmx::AbstractOptionStorage</a>.</p>

</div>
</div>
<a class="anchor" id="ac0ddac0898462d8aae5d55d5c2919963"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::AbstractOptionStorage::finish </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Performs validation and/or actions once all values have been added. </p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1InvalidInputError.xhtml" title="Exception class for situations where user input cannot be parsed/understood. ">InvalidInputError</a></td><td>if the option is required but not set, or if all valid values together are invalid as a set.</td></tr>
  </table>
  </dd>
</dl>
<p>This method should be called after all values have been provided with <a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a4a52974de7c31160eddbbe7bece745b6" title="Adds a new value for the option, converting it from a string. ">appendValue()</a>. </p>

</div>
</div>
<a class="anchor" id="a2ea3148553e7b8da30b9b50f17f89a94"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::AbstractOptionStorage::finishSet </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Performs validation and/or actions once a set of values has been added. </p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1InvalidInputError.xhtml" title="Exception class for situations where user input cannot be parsed/understood. ">InvalidInputError</a></td><td>if too few values have been provided, or if the valid values since previous <a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a18f2d143bce5bfabfee3f4ccc8c7a9d2" title="Starts adding a new set of values for the option. ">startSet()</a> are invalid as a set.</td></tr>
  </table>
  </dd>
</dl>
<p>If the parameter is specified multiple times, <a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a2ea3148553e7b8da30b9b50f17f89a94" title="Performs validation and/or actions once a set of values has been added. ">finishSet()</a> should be called after the values for each instance. </p>

</div>
</div>
<a class="anchor" id="a471240a802f212999c63919b3fbbd846"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string gmx::AbstractOptionStorage::formatDefaultValueIfSet </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the default value if set for the option as a string. </p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1OptionTemplate.xhtml#a400e5589c2dcb2d4758e21c5feffab69" title="Sets a default value for the option when it is set. ">OptionTemplate::defaultValueIfSet()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="adaa5310b634232d6c73f97d8d5ec4a57"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::string gmx::AbstractOptionStorage::formatExtraDescription </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formats additional description for the option. </p>
<p>If this method returns a non-empty string, it is appended to the plain description when printing help texts. The default implementation returns an empty string. </p>

</div>
</div>
<a class="anchor" id="aba54f7d43ae5ec873428ba0d56b39b06"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::string <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">gmx::OptionStorageTemplate</a>&lt; T &gt;::formatSingleValue </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Formats a single value as a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to format. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><code>value</code> formatted as a string.</dd></dl>
<p>The derived class must provide this method to format values a strings. Called by <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ac65e90fe546f98837fa52cf92f8c1e20" title="Returns the i&#39;th value formatted as a string. ">formatValue()</a> to do the actual formatting. </p>

</div>
</div>
<a class="anchor" id="ac65e90fe546f98837fa52cf92f8c1e20"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">gmx::OptionStorageTemplate</a>&lt; T &gt;::formatValue </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the i'th value formatted as a string. </p>
<p>If <code>i</code> is DefaultValueIfSetIndex, should format the default value if set (see <a class="el" href="classgmx_1_1OptionTemplate.xhtml#a400e5589c2dcb2d4758e21c5feffab69" title="Sets a default value for the option when it is set. ">OptionTemplate::defaultValueIfSet()</a>).</p>
<p><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml" title="Templated base class for constructing option value storage classes. ">OptionStorageTemplate</a> implements handling of DefaultValueIfSetIndex in this method, as well as checking that <code>i</code> is a valid index. Derived classes must implement <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#aba54f7d43ae5ec873428ba0d56b39b06" title="Formats a single value as a string. ">formatSingleValue()</a> to provide the actual formatting for a value of type <code>T</code>. </p>

<p>Implements <a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#aa0fea60c4d07701f3ed32004b34d8cc1">gmx::AbstractOptionStorage</a>.</p>

</div>
</div>
<a class="anchor" id="a29d58d7ea9051fed055bbfb1ba307439"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool gmx::AbstractOptionStorage::isBoolean </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns true if the option is a boolean option. </p>
<p>This is used to optionally support an alternative syntax where an option provided with no value sets the value to true and an option prefixed with "no" clears the value. </p>

</div>
</div>
<a class="anchor" id="a51614d345954174fcd417bf76de828e8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">gmx::OptionStorageTemplate</a>&lt; T &gt;::processAll </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Performs validation and/or actions once all values have been added. </p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1InvalidInputError.xhtml" title="Exception class for situations where user input cannot be parsed/understood. ">InvalidInputError</a></td><td>if all provided values are not valid as a set.</td></tr>
  </table>
  </dd>
</dl>
<p>This method is always called once.</p>
<p>If the method throws, implementation should take care to leave the option in a consistent, meaningful state. However, currently none of the implementations actually throw in any situation where the option may be left in an inconsistent state.</p>
<p>The implementation in <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml" title="Templated base class for constructing option value storage classes. ">OptionStorageTemplate</a> does nothing. </p>

<p>Implements <a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a1ed3015bac2e5a4af9631fb8fef8cd39">gmx::AbstractOptionStorage</a>.</p>

</div>
</div>
<a class="anchor" id="a72cf6c7884e6e23e6f71b8dc2dbede40"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">gmx::OptionStorageTemplate</a>&lt; T &gt;::processSet </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Performs validation and/or actions once a set of values has been added. </p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1InvalidInputError.xhtml" title="Exception class for situations where user input cannot be parsed/understood. ">InvalidInputError</a></td><td>if the values in the set are not valid as a whole.</td></tr>
  </table>
  </dd>
</dl>
<p>This method may be called multiple times if the underlying option can be specified multiple times. This method is not currently called if one of the <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a16bc81c18398085c38e2a89de7b99b72" title="Adds a new value, converting it from a string. ">convertValue()</a> calls throwed.</p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000034">Todo:</a></b></dt><dd>Improve the call semantics.</dd></dl>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ac2087a4d9de673881807396fe394319c" title="Processes values for a set after all have been converted. ">OptionStorageTemplate::processSetValues()</a></dd></dl>
<p><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml" title="Templated base class for constructing option value storage classes. ">OptionStorageTemplate</a> implements transaction support for a set of values in this method (see the class description), and provides a more detailed <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ac2087a4d9de673881807396fe394319c" title="Processes values for a set after all have been converted. ">processSetValues()</a> method that can be overridden in subclasses to process the actual values. Derived classes should override that method instead of this one if set value processing is necessary. </p>

<p>Implements <a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a9aa8495e558f50edd35b80754a508052">gmx::AbstractOptionStorage</a>.</p>

</div>
</div>
<a class="anchor" id="ac2087a4d9de673881807396fe394319c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">gmx::OptionStorageTemplate</a>&lt; T &gt;::processSetValues </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a58cbf66d644a4d22384f1dab5e6eaa5f">ValueList</a> *&#160;</td>
          <td class="paramname"><em>values</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Processes values for a set after all have been converted. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">values</td><td>Valid values in the set. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1InvalidInputError.xhtml" title="Exception class for situations where user input cannot be parsed/understood. ">InvalidInputError</a></td><td>if the values do not form a valid set.</td></tr>
  </table>
  </dd>
</dl>
<p>This method is called after all <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a16bc81c18398085c38e2a89de7b99b72" title="Adds a new value, converting it from a string. ">convertValue()</a> calls for a set. <code>values</code> contains all values that were validly converted by <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a16bc81c18398085c38e2a89de7b99b72" title="Adds a new value, converting it from a string. ">convertValue()</a>. The derived class may alter the values, but should in such a case ensure that a correct number of values is produced. If the derived class throws, all values in <code>values</code> are discarded. </p>

</div>
</div>
<a class="anchor" id="a5ee640e7f9dfcda26f44882bac46e5da"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">gmx::OptionStorageTemplate</a>&lt; T &gt;::refreshValues </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Updates alternative store locations. </p>
<p>Derived classes should override this method if they implement alternative store locations, and copy/translate values from the <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ad19c6d984aadb90102fa2e7e070d47d0" title="Provides derived classes access to the current list of values. ">values()</a> vector to these alternative storages. They should also call the base class implementation as part of their implementation.</p>
<p>Should be called in derived classes if values are modified directly through the <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#ad19c6d984aadb90102fa2e7e070d47d0" title="Provides derived classes access to the current list of values. ">values()</a> method, e.g., in <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a51614d345954174fcd417bf76de828e8" title="Performs validation and/or actions once all values have been added. ">processAll()</a>. Does not need to be called if <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a5cc8b970a7922f99e2a24eef2433a00c" title="Commits values added with addValue(). ">commitValues()</a> is used.</p>
<p>Does not throw, and derived classes should not change that. </p>

</div>
</div>
<a class="anchor" id="a28ff31e0d6b783b725ad306bc370b73b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">gmx::OptionStorageTemplate</a>&lt; T &gt;::setDefaultValue </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the default value for the option. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Default value to set. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>This method can be used from the derived class constructor to programmatically set a default value. </p>

</div>
</div>
<a class="anchor" id="a36bc6c3a3061abef502856d64799d1dc"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">gmx::OptionStorageTemplate</a>&lt; T &gt;::setDefaultValueIfSet </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the default value if set for the option. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Default value to set. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if out of memory.</td></tr>
  </table>
  </dd>
</dl>
<p>This method can be used from the derived class constructor to programmatically set a default value. </p>

</div>
</div>
<a class="anchor" id="ab2f4d5f2d169e80a0edcb51cfe180eb4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::AbstractOptionStorage::setMaxValueCount </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets a new maximum number of values required in one set. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">count</td><td>New maximum number of values (must be &gt; 0, or -1 for no limit). </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1InvalidInputError.xhtml" title="Exception class for situations where user input cannot be parsed/understood. ">InvalidInputError</a></td><td>if already provided values violate the limit.</td></tr>
  </table>
  </dd>
</dl>
<p>If values have already been provided, it is checked that there are not too many.</p>
<p>Cannot be called for options with <a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987a31719daac8b8d93c1db41332e5fa9d1f" title="Option can be specified multiple times. ">efOption_MultipleTimes</a> set, because it is impossible to check the requirement after the values have been set. If attempted, will assert. </p>

</div>
</div>
<a class="anchor" id="a294172ec6d7594bec65903874d0b828a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::AbstractOptionStorage::setMinValueCount </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets a new minimum number of values required in one set. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">count</td><td>New minimum number of values (must be &gt; 0). </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1InvalidInputError.xhtml" title="Exception class for situations where user input cannot be parsed/understood. ">InvalidInputError</a></td><td>if already provided values violate the limit.</td></tr>
  </table>
  </dd>
</dl>
<p>If values have already been provided, it is checked that there are enough.</p>
<p>Cannot be called for options with <a class="el" href="namespacegmx.xhtml#a3f775199bddf83f286ee8172f7dda987a31719daac8b8d93c1db41332e5fa9d1f" title="Option can be specified multiple times. ">efOption_MultipleTimes</a> set, because it is impossible to check the requirement after the values have been set. If attempted, will assert. </p>

</div>
</div>
<a class="anchor" id="a18f2d143bce5bfabfee3f4ccc8c7a9d2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::AbstractOptionStorage::startSet </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Starts adding a new set of values for the option. </p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classgmx_1_1InvalidInputError.xhtml" title="Exception class for situations where user input cannot be parsed/understood. ">InvalidInputError</a></td><td>if option is specified multiple times, but is not specified to accept it.</td></tr>
  </table>
  </dd>
</dl>
<p>If the parameter is specified multiple times, <a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a18f2d143bce5bfabfee3f4ccc8c7a9d2" title="Starts adding a new set of values for the option. ">startSet()</a> should be called before the values for each instance.</p>
<p>Strong exception safety guarantee. </p>

</div>
</div>
<a class="anchor" id="ade91fa23f548325aa893ad4d179439fd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gmx::AbstractOptionStorage::startSource </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Starts adding values from a new source for the option. </p>
<p>This marks the vurrent value of the option as a default value, causing next call to <a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#a18f2d143bce5bfabfee3f4ccc8c7a9d2" title="Starts adding a new set of values for the option. ">startSet()</a> to clear it. This allows values from the new source to overwrite old values.</p>
<p>This method does not throw. </p>

</div>
</div>
<a class="anchor" id="ae63cf6e91d4d1cb3e8cbe4de35058604"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">gmx::OptionStorageTemplate</a>&lt; T &gt;::valueCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of option values added so far. </p>

<p>Implements <a class="el" href="classgmx_1_1AbstractOptionStorage.xhtml#adebb6238d8d5faf3b2470809337eb155">gmx::AbstractOptionStorage</a>.</p>

</div>
</div>
<a class="anchor" id="ad19c6d984aadb90102fa2e7e070d47d0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a58cbf66d644a4d22384f1dab5e6eaa5f">ValueList</a>&amp; <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml">gmx::OptionStorageTemplate</a>&lt; T &gt;::values </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Provides derived classes access to the current list of values. </p>
<p>The non-const variant should only be used from <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a51614d345954174fcd417bf76de828e8" title="Performs validation and/or actions once all values have been added. ">processAll()</a> in derived classes if necessary, and <a class="el" href="classgmx_1_1OptionStorageTemplate.xhtml#a5ee640e7f9dfcda26f44882bac46e5da" title="Updates alternative store locations. ">refreshValues()</a> should be called if any changes are made. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/gromacs/options/<a class="el" href="abstractoption_8h.xhtml">abstractoption.h</a></li>
<li>src/gromacs/options/<a class="el" href="optionstoragetemplate_8h.xhtml">optionstoragetemplate.h</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:19:40 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
