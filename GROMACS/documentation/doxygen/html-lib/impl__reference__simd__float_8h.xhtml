<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Gromacs: src/gromacs/simd/impl_reference/impl_reference_simd_float.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Gromacs
   &#160;<span id="projectnumber">2016.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="pages.xhtml"><span>Other&#160;Docs</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_71392c6f4b1ed3a32ba5c064e868a1ba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a798d384400d41a9e6864d9b1b8753fe.xhtml">gromacs</a></li><li class="navelem"><a class="el" href="dir_69a31023f2cb90cacd6802dc380f9733.xhtml">simd</a></li><li class="navelem"><a class="el" href="dir_14b36525801fb40dda8150620166f44d.xhtml">impl_reference</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a>  </div>
  <div class="headertitle">
<div class="title">impl_reference_simd_float.h File Reference<div class="ingroups"><a class="el" href="group__module__simd.xhtml">SIMD intrinsics interface (simd)</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;config.h&quot;</code><br/>
<code>#include &lt;cassert&gt;</code><br/>
<code>#include &lt;cmath&gt;</code><br/>
<code>#include &lt;cstddef&gt;</code><br/>
<code>#include &lt;cstdint&gt;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
<code>#include &lt;array&gt;</code><br/>
<code>#include &quot;<a class="el" href="impl__reference__definitions_8h.xhtml">impl_reference_definitions.h</a>&quot;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for impl_reference_simd_float.h:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="impl__reference__simd__float_8h__incl.svg" width="810" height="142"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><div class="textblock"><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> This graph shows which files directly or indirectly include this file:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="impl__reference__simd__float_8h__dep__incl.svg" width="535" height="528"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<div class="textblock"><p>Reference implementation, SIMD single precision. </p>
<dl class="section author"><dt>Author</dt><dd>Erik Lindahl <a href="#" onclick="location.href='mai'+'lto:'+'eri'+'k.'+'lin'+'da'+'hl@'+'sc'+'ili'+'fe'+'lab'+'.s'+'e'; return false;">erik.<span style="display: none;">.nosp@m.</span>lind<span style="display: none;">.nosp@m.</span>ahl@s<span style="display: none;">.nosp@m.</span>cili<span style="display: none;">.nosp@m.</span>felab<span style="display: none;">.nosp@m.</span>.se</a> </dd></dl>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdFloat.xhtml">gmx::SimdFloat</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Float SIMD variable. Available if GMX_SIMD_HAVE_FLOAT is 1.  <a href="classgmx_1_1SimdFloat.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdFInt32.xhtml">gmx::SimdFInt32</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD variable type to use for conversions to/from float.  <a href="classgmx_1_1SimdFInt32.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdFBool.xhtml">gmx::SimdFBool</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Boolean type for float SIMD data.  <a href="classgmx_1_1SimdFBool.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgmx_1_1SimdFIBool.xhtml">gmx::SimdFIBool</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Boolean type for integer datatypes corresponding to float SIMD.  <a href="classgmx_1_1SimdFIBool.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation load/store operations for single precision floating point</div></td></tr>
<tr class="memitem:af4e458ade067ee9a54638f2cfda3a156"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af4e458ade067ee9a54638f2cfda3a156">gmx::simdLoad</a> (const float *m)</td></tr>
<tr class="memdesc:af4e458ade067ee9a54638f2cfda3a156"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load <a class="el" href="group__module__simd.xhtml#gafdbf804a40bfa3dcb15bc50055e58e74">GMX_SIMD_FLOAT_WIDTH</a> float numbers from aligned memory.  <a href="#af4e458ade067ee9a54638f2cfda3a156">More...</a><br/></td></tr>
<tr class="separator:af4e458ade067ee9a54638f2cfda3a156"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52f7df2355065163447397f980294447"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a52f7df2355065163447397f980294447">gmx::store</a> (float *m, SimdFloat a)</td></tr>
<tr class="memdesc:a52f7df2355065163447397f980294447"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store the contents of SIMD float variable to aligned memory m.  <a href="#a52f7df2355065163447397f980294447">More...</a><br/></td></tr>
<tr class="separator:a52f7df2355065163447397f980294447"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f6db4291f0fb805ed63c168b34b12e7"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3f6db4291f0fb805ed63c168b34b12e7">gmx::simdLoadU</a> (const float *m)</td></tr>
<tr class="memdesc:a3f6db4291f0fb805ed63c168b34b12e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load SIMD float from unaligned memory.  <a href="#a3f6db4291f0fb805ed63c168b34b12e7">More...</a><br/></td></tr>
<tr class="separator:a3f6db4291f0fb805ed63c168b34b12e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78a753ce93218a4e83f9733c66a48020"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a78a753ce93218a4e83f9733c66a48020">gmx::storeU</a> (float *m, SimdFloat a)</td></tr>
<tr class="memdesc:a78a753ce93218a4e83f9733c66a48020"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store SIMD float to unaligned memory.  <a href="#a78a753ce93218a4e83f9733c66a48020">More...</a><br/></td></tr>
<tr class="separator:a78a753ce93218a4e83f9733c66a48020"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaeabcbecb3158411b57502164c854a31"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aaeabcbecb3158411b57502164c854a31">gmx::setZeroF</a> ()</td></tr>
<tr class="memdesc:aaeabcbecb3158411b57502164c854a31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set all SIMD float variable elements to 0.0.  <a href="#aaeabcbecb3158411b57502164c854a31">More...</a><br/></td></tr>
<tr class="separator:aaeabcbecb3158411b57502164c854a31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation load/store operations for integers (corresponding to float)</div></td></tr>
<tr class="memitem:a8b416215a20a73aff5fa5808c448811e"><td class="memItemLeft" align="right" valign="top">static SimdFInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a8b416215a20a73aff5fa5808c448811e">gmx::simdLoadFI</a> (const std::int32_t *m)</td></tr>
<tr class="memdesc:a8b416215a20a73aff5fa5808c448811e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load aligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdFloat.xhtml">gmx::SimdFloat</a>.  <a href="#a8b416215a20a73aff5fa5808c448811e">More...</a><br/></td></tr>
<tr class="separator:a8b416215a20a73aff5fa5808c448811e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05b56e14f8499393813cb23869a97a98"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a05b56e14f8499393813cb23869a97a98">gmx::store</a> (std::int32_t *m, SimdFInt32 a)</td></tr>
<tr class="memdesc:a05b56e14f8499393813cb23869a97a98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store aligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdFloat.xhtml">gmx::SimdFloat</a>.  <a href="#a05b56e14f8499393813cb23869a97a98">More...</a><br/></td></tr>
<tr class="separator:a05b56e14f8499393813cb23869a97a98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37e5f3b6be0b2d544f0239939a775f91"><td class="memItemLeft" align="right" valign="top">static SimdFInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a37e5f3b6be0b2d544f0239939a775f91">gmx::simdLoadUFI</a> (const std::int32_t *m)</td></tr>
<tr class="memdesc:a37e5f3b6be0b2d544f0239939a775f91"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load unaligned integer SIMD data, width corresponds to <a class="el" href="classgmx_1_1SimdFloat.xhtml">gmx::SimdFloat</a>.  <a href="#a37e5f3b6be0b2d544f0239939a775f91">More...</a><br/></td></tr>
<tr class="separator:a37e5f3b6be0b2d544f0239939a775f91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a849eec56bc26a1d99f3f198fc9a9cba5"><td class="memItemLeft" align="right" valign="top">static void gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a849eec56bc26a1d99f3f198fc9a9cba5">gmx::storeU</a> (std::int32_t *m, SimdFInt32 a)</td></tr>
<tr class="memdesc:a849eec56bc26a1d99f3f198fc9a9cba5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store unaligned SIMD integer data, width corresponds to <a class="el" href="classgmx_1_1SimdFloat.xhtml">gmx::SimdFloat</a>.  <a href="#a849eec56bc26a1d99f3f198fc9a9cba5">More...</a><br/></td></tr>
<tr class="separator:a849eec56bc26a1d99f3f198fc9a9cba5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52eac01d95edbe3b448fc447832a5d3c"><td class="memItemLeft" align="right" valign="top">static SimdFInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a52eac01d95edbe3b448fc447832a5d3c">gmx::setZeroFI</a> ()</td></tr>
<tr class="memdesc:a52eac01d95edbe3b448fc447832a5d3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set all SIMD (float) integer variable elements to 0.  <a href="#a52eac01d95edbe3b448fc447832a5d3c">More...</a><br/></td></tr>
<tr class="separator:a52eac01d95edbe3b448fc447832a5d3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48a0504dfe392db42fd419cd80ea7d9a"><td class="memTemplParams" colspan="2">template&lt;int index&gt; </td></tr>
<tr class="memitem:a48a0504dfe392db42fd419cd80ea7d9a"><td class="memTemplItemLeft" align="right" valign="top">static std::int32_t gmx_simdcall&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a48a0504dfe392db42fd419cd80ea7d9a">gmx::extract</a> (SimdFInt32 a)</td></tr>
<tr class="memdesc:a48a0504dfe392db42fd419cd80ea7d9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract element with index i from <a class="el" href="classgmx_1_1SimdFInt32.xhtml">gmx::SimdFInt32</a>.  <a href="#a48a0504dfe392db42fd419cd80ea7d9a">More...</a><br/></td></tr>
<tr class="separator:a48a0504dfe392db42fd419cd80ea7d9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation single precision floating-point bitwise logical operations</div></td></tr>
<tr class="memitem:a4093d368f060b40d9a9dee083b33411c"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a4093d368f060b40d9a9dee083b33411c">gmx::operator&amp;</a> (SimdFloat a, SimdFloat b)</td></tr>
<tr class="memdesc:a4093d368f060b40d9a9dee083b33411c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise and for two SIMD float variables.  <a href="#a4093d368f060b40d9a9dee083b33411c">More...</a><br/></td></tr>
<tr class="separator:a4093d368f060b40d9a9dee083b33411c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a621b6d4eb9d2d992b07f7bc515dad46d"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a621b6d4eb9d2d992b07f7bc515dad46d">gmx::andNot</a> (SimdFloat a, SimdFloat b)</td></tr>
<tr class="memdesc:a621b6d4eb9d2d992b07f7bc515dad46d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise andnot for SIMD float.  <a href="#a621b6d4eb9d2d992b07f7bc515dad46d">More...</a><br/></td></tr>
<tr class="separator:a621b6d4eb9d2d992b07f7bc515dad46d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69973d1808eb0e8e60715d3abf01cd22"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a69973d1808eb0e8e60715d3abf01cd22">gmx::operator|</a> (SimdFloat a, SimdFloat b)</td></tr>
<tr class="memdesc:a69973d1808eb0e8e60715d3abf01cd22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise or for SIMD float.  <a href="#a69973d1808eb0e8e60715d3abf01cd22">More...</a><br/></td></tr>
<tr class="separator:a69973d1808eb0e8e60715d3abf01cd22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37544015fbce9d2b11dce07e159e878b"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a37544015fbce9d2b11dce07e159e878b">gmx::operator^</a> (SimdFloat a, SimdFloat b)</td></tr>
<tr class="memdesc:a37544015fbce9d2b11dce07e159e878b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise xor for SIMD float.  <a href="#a37544015fbce9d2b11dce07e159e878b">More...</a><br/></td></tr>
<tr class="separator:a37544015fbce9d2b11dce07e159e878b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation single precision floating-point arithmetics</div></td></tr>
<tr class="memitem:aebe772c4714b2ce0f9a70c7fbbc01f98"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aebe772c4714b2ce0f9a70c7fbbc01f98">gmx::operator+</a> (SimdFloat a, SimdFloat b)</td></tr>
<tr class="memdesc:aebe772c4714b2ce0f9a70c7fbbc01f98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add two float SIMD variables.  <a href="#aebe772c4714b2ce0f9a70c7fbbc01f98">More...</a><br/></td></tr>
<tr class="separator:aebe772c4714b2ce0f9a70c7fbbc01f98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae00e0dcf36832ed7c591e1204dd9dcc8"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae00e0dcf36832ed7c591e1204dd9dcc8">gmx::operator-</a> (SimdFloat a, SimdFloat b)</td></tr>
<tr class="memdesc:ae00e0dcf36832ed7c591e1204dd9dcc8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtract two float SIMD variables.  <a href="#ae00e0dcf36832ed7c591e1204dd9dcc8">More...</a><br/></td></tr>
<tr class="separator:ae00e0dcf36832ed7c591e1204dd9dcc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae409460fda30359c437522eca447e24e"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae409460fda30359c437522eca447e24e">gmx::operator-</a> (SimdFloat a)</td></tr>
<tr class="memdesc:ae409460fda30359c437522eca447e24e"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD single precision negate.  <a href="#ae409460fda30359c437522eca447e24e">More...</a><br/></td></tr>
<tr class="separator:ae409460fda30359c437522eca447e24e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51972cf72cc64e7d4ec87e53d4b25376"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a51972cf72cc64e7d4ec87e53d4b25376">gmx::operator*</a> (SimdFloat a, SimdFloat b)</td></tr>
<tr class="memdesc:a51972cf72cc64e7d4ec87e53d4b25376"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply two float SIMD variables.  <a href="#a51972cf72cc64e7d4ec87e53d4b25376">More...</a><br/></td></tr>
<tr class="separator:a51972cf72cc64e7d4ec87e53d4b25376"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6969c0baf1592d7a5fec29636a85628f"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a6969c0baf1592d7a5fec29636a85628f">gmx::fma</a> (SimdFloat a, SimdFloat b, SimdFloat c)</td></tr>
<tr class="memdesc:a6969c0baf1592d7a5fec29636a85628f"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float Fused-multiply-add. Result is a*b+c.  <a href="#a6969c0baf1592d7a5fec29636a85628f">More...</a><br/></td></tr>
<tr class="separator:a6969c0baf1592d7a5fec29636a85628f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a075eeabb5171e4f74cdd74e2f97bab5c"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a075eeabb5171e4f74cdd74e2f97bab5c">gmx::fms</a> (SimdFloat a, SimdFloat b, SimdFloat c)</td></tr>
<tr class="memdesc:a075eeabb5171e4f74cdd74e2f97bab5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float Fused-multiply-subtract. Result is a*b-c.  <a href="#a075eeabb5171e4f74cdd74e2f97bab5c">More...</a><br/></td></tr>
<tr class="separator:a075eeabb5171e4f74cdd74e2f97bab5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6be2e3e5adbdf49e6468c8a2d638658d"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a6be2e3e5adbdf49e6468c8a2d638658d">gmx::fnma</a> (SimdFloat a, SimdFloat b, SimdFloat c)</td></tr>
<tr class="memdesc:a6be2e3e5adbdf49e6468c8a2d638658d"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float Fused-negated-multiply-add. Result is -a*b+c.  <a href="#a6be2e3e5adbdf49e6468c8a2d638658d">More...</a><br/></td></tr>
<tr class="separator:a6be2e3e5adbdf49e6468c8a2d638658d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8fe2e25414c377f8ed03d5c23f84963"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af8fe2e25414c377f8ed03d5c23f84963">gmx::fnms</a> (SimdFloat a, SimdFloat b, SimdFloat c)</td></tr>
<tr class="memdesc:af8fe2e25414c377f8ed03d5c23f84963"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float Fused-negated-multiply-subtract. Result is -a*b-c.  <a href="#af8fe2e25414c377f8ed03d5c23f84963">More...</a><br/></td></tr>
<tr class="separator:af8fe2e25414c377f8ed03d5c23f84963"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a611e17e307050f3a78e3390a5e63c460"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a611e17e307050f3a78e3390a5e63c460">gmx::rsqrt</a> (SimdFloat x)</td></tr>
<tr class="memdesc:a611e17e307050f3a78e3390a5e63c460"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float 1.0/sqrt(x) lookup.  <a href="#a611e17e307050f3a78e3390a5e63c460">More...</a><br/></td></tr>
<tr class="separator:a611e17e307050f3a78e3390a5e63c460"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48cb29271cf7ac44a06cfe20e5c29dc2"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a48cb29271cf7ac44a06cfe20e5c29dc2">gmx::rcp</a> (SimdFloat x)</td></tr>
<tr class="memdesc:a48cb29271cf7ac44a06cfe20e5c29dc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float 1.0/x lookup.  <a href="#a48cb29271cf7ac44a06cfe20e5c29dc2">More...</a><br/></td></tr>
<tr class="separator:a48cb29271cf7ac44a06cfe20e5c29dc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a766a313a4a158cfcb0eed0373dd82dfc"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a766a313a4a158cfcb0eed0373dd82dfc">gmx::maskAdd</a> (SimdFloat a, SimdFloat b, SimdFBool m)</td></tr>
<tr class="memdesc:a766a313a4a158cfcb0eed0373dd82dfc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add two float SIMD variables, masked version.  <a href="#a766a313a4a158cfcb0eed0373dd82dfc">More...</a><br/></td></tr>
<tr class="separator:a766a313a4a158cfcb0eed0373dd82dfc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa732ce9ab59cca63f834923a8cb4c775"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aa732ce9ab59cca63f834923a8cb4c775">gmx::maskzMul</a> (SimdFloat a, SimdFloat b, SimdFBool m)</td></tr>
<tr class="memdesc:aa732ce9ab59cca63f834923a8cb4c775"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply two float SIMD variables, masked version.  <a href="#aa732ce9ab59cca63f834923a8cb4c775">More...</a><br/></td></tr>
<tr class="separator:aa732ce9ab59cca63f834923a8cb4c775"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac21c886b9883657fd67d8b48e784af2d"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ac21c886b9883657fd67d8b48e784af2d">gmx::maskzFma</a> (SimdFloat a, SimdFloat b, SimdFloat c, SimdFBool m)</td></tr>
<tr class="memdesc:ac21c886b9883657fd67d8b48e784af2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float fused multiply-add, masked version.  <a href="#ac21c886b9883657fd67d8b48e784af2d">More...</a><br/></td></tr>
<tr class="separator:ac21c886b9883657fd67d8b48e784af2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6eb1ba8851b08ceea1c160b6b255ee9b"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a6eb1ba8851b08ceea1c160b6b255ee9b">gmx::maskzRsqrt</a> (SimdFloat x, SimdFBool m)</td></tr>
<tr class="memdesc:a6eb1ba8851b08ceea1c160b6b255ee9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float 1.0/sqrt(x) lookup, masked version.  <a href="#a6eb1ba8851b08ceea1c160b6b255ee9b">More...</a><br/></td></tr>
<tr class="separator:a6eb1ba8851b08ceea1c160b6b255ee9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abda785f716b1445f709fc7aa028c0589"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#abda785f716b1445f709fc7aa028c0589">gmx::maskzRcp</a> (SimdFloat x, SimdFBool m)</td></tr>
<tr class="memdesc:abda785f716b1445f709fc7aa028c0589"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float 1.0/x lookup, masked version.  <a href="#abda785f716b1445f709fc7aa028c0589">More...</a><br/></td></tr>
<tr class="separator:abda785f716b1445f709fc7aa028c0589"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad59e3c65fd7e52438579b9ea98edefba"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad59e3c65fd7e52438579b9ea98edefba">gmx::abs</a> (SimdFloat a)</td></tr>
<tr class="memdesc:ad59e3c65fd7e52438579b9ea98edefba"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float Floating-point <a class="el" href="group__module__simd.xhtml#ga9339c53d13a59e946834c14d565f1e18" title="SIMD4 Floating-point abs(). ">abs()</a>.  <a href="#ad59e3c65fd7e52438579b9ea98edefba">More...</a><br/></td></tr>
<tr class="separator:ad59e3c65fd7e52438579b9ea98edefba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4edeef3c458f5c77cf3ceb80532a57ff"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a4edeef3c458f5c77cf3ceb80532a57ff">gmx::max</a> (SimdFloat a, SimdFloat b)</td></tr>
<tr class="memdesc:a4edeef3c458f5c77cf3ceb80532a57ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set each SIMD float element to the largest from two variables.  <a href="#a4edeef3c458f5c77cf3ceb80532a57ff">More...</a><br/></td></tr>
<tr class="separator:a4edeef3c458f5c77cf3ceb80532a57ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66c497c1f66c2aaccafefdfdeaf6ce2f"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a66c497c1f66c2aaccafefdfdeaf6ce2f">gmx::min</a> (SimdFloat a, SimdFloat b)</td></tr>
<tr class="memdesc:a66c497c1f66c2aaccafefdfdeaf6ce2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set each SIMD float element to the smallest from two variables.  <a href="#a66c497c1f66c2aaccafefdfdeaf6ce2f">More...</a><br/></td></tr>
<tr class="separator:a66c497c1f66c2aaccafefdfdeaf6ce2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ef18bc7373b1450c963374f72d472e4"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3ef18bc7373b1450c963374f72d472e4">gmx::round</a> (SimdFloat a)</td></tr>
<tr class="memdesc:a3ef18bc7373b1450c963374f72d472e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD float round to nearest integer value (in floating-point format).  <a href="#a3ef18bc7373b1450c963374f72d472e4">More...</a><br/></td></tr>
<tr class="separator:a3ef18bc7373b1450c963374f72d472e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03c0d9c75faf734c06f162e92e56f5f7"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a03c0d9c75faf734c06f162e92e56f5f7">gmx::trunc</a> (SimdFloat a)</td></tr>
<tr class="memdesc:a03c0d9c75faf734c06f162e92e56f5f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate SIMD float, i.e. round towards zero - common hardware instruction.  <a href="#a03c0d9c75faf734c06f162e92e56f5f7">More...</a><br/></td></tr>
<tr class="separator:a03c0d9c75faf734c06f162e92e56f5f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25fcdea880b577ac51ac92b915fd89e7"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a25fcdea880b577ac51ac92b915fd89e7">gmx::frexp</a> (SimdFloat value, SimdFInt32 *exponent)</td></tr>
<tr class="memdesc:a25fcdea880b577ac51ac92b915fd89e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract (integer) exponent and fraction from single precision SIMD.  <a href="#a25fcdea880b577ac51ac92b915fd89e7">More...</a><br/></td></tr>
<tr class="separator:a25fcdea880b577ac51ac92b915fd89e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d8d4c79d514bc6dc56832b2a44fc312"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a7d8d4c79d514bc6dc56832b2a44fc312">gmx::ldexp</a> (SimdFloat value, SimdFInt32 exponent)</td></tr>
<tr class="memdesc:a7d8d4c79d514bc6dc56832b2a44fc312"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply a SIMD float value by the number 2 raised to an exp power.  <a href="#a7d8d4c79d514bc6dc56832b2a44fc312">More...</a><br/></td></tr>
<tr class="separator:a7d8d4c79d514bc6dc56832b2a44fc312"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55d2bf9090a7a9aed6e4b1f6391ef844"><td class="memItemLeft" align="right" valign="top">static float gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a55d2bf9090a7a9aed6e4b1f6391ef844">gmx::reduce</a> (SimdFloat a)</td></tr>
<tr class="memdesc:a55d2bf9090a7a9aed6e4b1f6391ef844"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return sum of all elements in SIMD float variable.  <a href="#a55d2bf9090a7a9aed6e4b1f6391ef844">More...</a><br/></td></tr>
<tr class="separator:a55d2bf9090a7a9aed6e4b1f6391ef844"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation single precision floating-point comparisons, boolean, selection.</div></td></tr>
<tr class="memitem:afc42a1e43f4158ce45339e3a8ea225b7"><td class="memItemLeft" align="right" valign="top">static SimdFBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#afc42a1e43f4158ce45339e3a8ea225b7">gmx::operator==</a> (SimdFloat a, SimdFloat b)</td></tr>
<tr class="memdesc:afc42a1e43f4158ce45339e3a8ea225b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD a==b for single SIMD.  <a href="#afc42a1e43f4158ce45339e3a8ea225b7">More...</a><br/></td></tr>
<tr class="separator:afc42a1e43f4158ce45339e3a8ea225b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a254a7b42f107dbc05f506a139ff24cb6"><td class="memItemLeft" align="right" valign="top">static SimdFBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a254a7b42f107dbc05f506a139ff24cb6">gmx::operator!=</a> (SimdFloat a, SimdFloat b)</td></tr>
<tr class="memdesc:a254a7b42f107dbc05f506a139ff24cb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD a!=b for single SIMD.  <a href="#a254a7b42f107dbc05f506a139ff24cb6">More...</a><br/></td></tr>
<tr class="separator:a254a7b42f107dbc05f506a139ff24cb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd963f002451c284f4dc52167c6c1dc1"><td class="memItemLeft" align="right" valign="top">static SimdFBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#acd963f002451c284f4dc52167c6c1dc1">gmx::operator&lt;</a> (SimdFloat a, SimdFloat b)</td></tr>
<tr class="memdesc:acd963f002451c284f4dc52167c6c1dc1"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD a&lt;b for single SIMD.  <a href="#acd963f002451c284f4dc52167c6c1dc1">More...</a><br/></td></tr>
<tr class="separator:acd963f002451c284f4dc52167c6c1dc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0e463866d58d57bbc388c17299c4829"><td class="memItemLeft" align="right" valign="top">static SimdFBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad0e463866d58d57bbc388c17299c4829">gmx::operator&lt;=</a> (SimdFloat a, SimdFloat b)</td></tr>
<tr class="memdesc:ad0e463866d58d57bbc388c17299c4829"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD a&lt;=b for single SIMD.  <a href="#ad0e463866d58d57bbc388c17299c4829">More...</a><br/></td></tr>
<tr class="separator:ad0e463866d58d57bbc388c17299c4829"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10dfe150e697592814f1d3edd5c3c87e"><td class="memItemLeft" align="right" valign="top">static SimdFBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a10dfe150e697592814f1d3edd5c3c87e">gmx::testBits</a> (SimdFloat a)</td></tr>
<tr class="memdesc:a10dfe150e697592814f1d3edd5c3c87e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if any bits are set in the single precision SIMD.  <a href="#a10dfe150e697592814f1d3edd5c3c87e">More...</a><br/></td></tr>
<tr class="separator:a10dfe150e697592814f1d3edd5c3c87e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae161ba7a8d47adeac2e26eca03095d13"><td class="memItemLeft" align="right" valign="top">static SimdFBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae161ba7a8d47adeac2e26eca03095d13">gmx::operator&amp;&amp;</a> (SimdFBool a, SimdFBool b)</td></tr>
<tr class="memdesc:ae161ba7a8d47adeac2e26eca03095d13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical <em>and</em> on single precision SIMD booleans.  <a href="#ae161ba7a8d47adeac2e26eca03095d13">More...</a><br/></td></tr>
<tr class="separator:ae161ba7a8d47adeac2e26eca03095d13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5595db8a2c813f0ae078285a1b6b8bd3"><td class="memItemLeft" align="right" valign="top">static SimdFBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a5595db8a2c813f0ae078285a1b6b8bd3">gmx::operator||</a> (SimdFBool a, SimdFBool b)</td></tr>
<tr class="memdesc:a5595db8a2c813f0ae078285a1b6b8bd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical <em>or</em> on single precision SIMD booleans.  <a href="#a5595db8a2c813f0ae078285a1b6b8bd3">More...</a><br/></td></tr>
<tr class="separator:a5595db8a2c813f0ae078285a1b6b8bd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3771cceb27c74f62fe77ae2b3375f19"><td class="memItemLeft" align="right" valign="top">static bool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad3771cceb27c74f62fe77ae2b3375f19">gmx::anyTrue</a> (SimdFBool a)</td></tr>
<tr class="memdesc:ad3771cceb27c74f62fe77ae2b3375f19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns non-zero if any of the boolean in SIMD a is True, otherwise 0.  <a href="#ad3771cceb27c74f62fe77ae2b3375f19">More...</a><br/></td></tr>
<tr class="separator:ad3771cceb27c74f62fe77ae2b3375f19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8662b109c880042900ece585e9b4c68"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ad8662b109c880042900ece585e9b4c68">gmx::selectByMask</a> (SimdFloat a, SimdFBool mask)</td></tr>
<tr class="memdesc:ad8662b109c880042900ece585e9b4c68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from single precision SIMD variable where boolean is true.  <a href="#ad8662b109c880042900ece585e9b4c68">More...</a><br/></td></tr>
<tr class="separator:ad8662b109c880042900ece585e9b4c68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b181964f04f57a08d6241f639696d31"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3b181964f04f57a08d6241f639696d31">gmx::selectByNotMask</a> (SimdFloat a, SimdFBool mask)</td></tr>
<tr class="memdesc:a3b181964f04f57a08d6241f639696d31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from single precision SIMD variable where boolean is false.  <a href="#a3b181964f04f57a08d6241f639696d31">More...</a><br/></td></tr>
<tr class="separator:a3b181964f04f57a08d6241f639696d31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a443be80edc7822ae0582bc5a4d4da34c"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a443be80edc7822ae0582bc5a4d4da34c">gmx::blend</a> (SimdFloat a, SimdFloat b, SimdFBool sel)</td></tr>
<tr class="memdesc:a443be80edc7822ae0582bc5a4d4da34c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector-blend SIMD float selection.  <a href="#a443be80edc7822ae0582bc5a4d4da34c">More...</a><br/></td></tr>
<tr class="separator:a443be80edc7822ae0582bc5a4d4da34c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation integer (corresponding to float) bitwise logical operations</div></td></tr>
<tr class="memitem:a944742d0897cd5cd137f635350038916"><td class="memItemLeft" align="right" valign="top">static SimdFInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a944742d0897cd5cd137f635350038916">gmx::operator&lt;&lt;</a> (SimdFInt32 a, int n)</td></tr>
<tr class="memdesc:a944742d0897cd5cd137f635350038916"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD integer shift left logical, based on immediate value.  <a href="#a944742d0897cd5cd137f635350038916">More...</a><br/></td></tr>
<tr class="separator:a944742d0897cd5cd137f635350038916"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af05b883b2ca284120a3f7458354ed27a"><td class="memItemLeft" align="right" valign="top">static SimdFInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af05b883b2ca284120a3f7458354ed27a">gmx::operator&gt;&gt;</a> (SimdFInt32 a, int n)</td></tr>
<tr class="memdesc:af05b883b2ca284120a3f7458354ed27a"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIMD integer shift right logical, based on immediate value.  <a href="#af05b883b2ca284120a3f7458354ed27a">More...</a><br/></td></tr>
<tr class="separator:af05b883b2ca284120a3f7458354ed27a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa2f30ddbbff1d91de4d1ef1f516fe9f"><td class="memItemLeft" align="right" valign="top">static SimdFInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aaa2f30ddbbff1d91de4d1ef1f516fe9f">gmx::operator&amp;</a> (SimdFInt32 a, SimdFInt32 b)</td></tr>
<tr class="memdesc:aaa2f30ddbbff1d91de4d1ef1f516fe9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD bitwise and.  <a href="#aaa2f30ddbbff1d91de4d1ef1f516fe9f">More...</a><br/></td></tr>
<tr class="separator:aaa2f30ddbbff1d91de4d1ef1f516fe9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03632f7c71496ded26a0c3eda8ed33b7"><td class="memItemLeft" align="right" valign="top">static SimdFInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a03632f7c71496ded26a0c3eda8ed33b7">gmx::andNot</a> (SimdFInt32 a, SimdFInt32 b)</td></tr>
<tr class="memdesc:a03632f7c71496ded26a0c3eda8ed33b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD bitwise not/complement.  <a href="#a03632f7c71496ded26a0c3eda8ed33b7">More...</a><br/></td></tr>
<tr class="separator:a03632f7c71496ded26a0c3eda8ed33b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6f2042babc63e1b20b08ed61d859f74"><td class="memItemLeft" align="right" valign="top">static SimdFInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af6f2042babc63e1b20b08ed61d859f74">gmx::operator|</a> (SimdFInt32 a, SimdFInt32 b)</td></tr>
<tr class="memdesc:af6f2042babc63e1b20b08ed61d859f74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD bitwise or.  <a href="#af6f2042babc63e1b20b08ed61d859f74">More...</a><br/></td></tr>
<tr class="separator:af6f2042babc63e1b20b08ed61d859f74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb7e81f2ef83cfb9aaae088c8762c2b0"><td class="memItemLeft" align="right" valign="top">static SimdFInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#abb7e81f2ef83cfb9aaae088c8762c2b0">gmx::operator^</a> (SimdFInt32 a, SimdFInt32 b)</td></tr>
<tr class="memdesc:abb7e81f2ef83cfb9aaae088c8762c2b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer SIMD bitwise xor.  <a href="#abb7e81f2ef83cfb9aaae088c8762c2b0">More...</a><br/></td></tr>
<tr class="separator:abb7e81f2ef83cfb9aaae088c8762c2b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation integer (corresponding to float) arithmetics</div></td></tr>
<tr class="memitem:af3c5a94b0e74b2e5b7fbb4c9c0bd1938"><td class="memItemLeft" align="right" valign="top">static SimdFInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#af3c5a94b0e74b2e5b7fbb4c9c0bd1938">gmx::operator+</a> (SimdFInt32 a, SimdFInt32 b)</td></tr>
<tr class="memdesc:af3c5a94b0e74b2e5b7fbb4c9c0bd1938"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add SIMD integers.  <a href="#af3c5a94b0e74b2e5b7fbb4c9c0bd1938">More...</a><br/></td></tr>
<tr class="separator:af3c5a94b0e74b2e5b7fbb4c9c0bd1938"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accbca9c905a278763e5ff7c584f75f21"><td class="memItemLeft" align="right" valign="top">static SimdFInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#accbca9c905a278763e5ff7c584f75f21">gmx::operator-</a> (SimdFInt32 a, SimdFInt32 b)</td></tr>
<tr class="memdesc:accbca9c905a278763e5ff7c584f75f21"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtract SIMD integers.  <a href="#accbca9c905a278763e5ff7c584f75f21">More...</a><br/></td></tr>
<tr class="separator:accbca9c905a278763e5ff7c584f75f21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9acf86fe51d043353aa609f65263386e"><td class="memItemLeft" align="right" valign="top">static SimdFInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a9acf86fe51d043353aa609f65263386e">gmx::operator*</a> (SimdFInt32 a, SimdFInt32 b)</td></tr>
<tr class="memdesc:a9acf86fe51d043353aa609f65263386e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply SIMD integers.  <a href="#a9acf86fe51d043353aa609f65263386e">More...</a><br/></td></tr>
<tr class="separator:a9acf86fe51d043353aa609f65263386e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation integer (corresponding to float) comparisons, boolean, selection</div></td></tr>
<tr class="memitem:aec52e80a85ca0737723f5d9b358b1660"><td class="memItemLeft" align="right" valign="top">static SimdFIBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#aec52e80a85ca0737723f5d9b358b1660">gmx::operator==</a> (SimdFInt32 a, SimdFInt32 b)</td></tr>
<tr class="memdesc:aec52e80a85ca0737723f5d9b358b1660"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equality comparison of two integers corresponding to float values.  <a href="#aec52e80a85ca0737723f5d9b358b1660">More...</a><br/></td></tr>
<tr class="separator:aec52e80a85ca0737723f5d9b358b1660"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb9d95ea1f60f4422ff48866615741d3"><td class="memItemLeft" align="right" valign="top">static SimdFIBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#afb9d95ea1f60f4422ff48866615741d3">gmx::operator&lt;</a> (SimdFInt32 a, SimdFInt32 b)</td></tr>
<tr class="memdesc:afb9d95ea1f60f4422ff48866615741d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Less-than comparison of two SIMD integers corresponding to float values.  <a href="#afb9d95ea1f60f4422ff48866615741d3">More...</a><br/></td></tr>
<tr class="separator:afb9d95ea1f60f4422ff48866615741d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47337ed69b038e337974eb220e9455bd"><td class="memItemLeft" align="right" valign="top">static SimdFIBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a47337ed69b038e337974eb220e9455bd">gmx::testBits</a> (SimdFInt32 a)</td></tr>
<tr class="memdesc:a47337ed69b038e337974eb220e9455bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if any bit is set in each element.  <a href="#a47337ed69b038e337974eb220e9455bd">More...</a><br/></td></tr>
<tr class="separator:a47337ed69b038e337974eb220e9455bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0187183d12327ef78c5c5307dd6e1fbf"><td class="memItemLeft" align="right" valign="top">static SimdFIBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a0187183d12327ef78c5c5307dd6e1fbf">gmx::operator&amp;&amp;</a> (SimdFIBool a, SimdFIBool b)</td></tr>
<tr class="memdesc:a0187183d12327ef78c5c5307dd6e1fbf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical AND on <a class="el" href="classgmx_1_1SimdFIBool.xhtml" title="Boolean type for integer datatypes corresponding to float SIMD. ">SimdFIBool</a>.  <a href="#a0187183d12327ef78c5c5307dd6e1fbf">More...</a><br/></td></tr>
<tr class="separator:a0187183d12327ef78c5c5307dd6e1fbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7b197309edc60323a129fa9620a7400"><td class="memItemLeft" align="right" valign="top">static SimdFIBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ab7b197309edc60323a129fa9620a7400">gmx::operator||</a> (SimdFIBool a, SimdFIBool b)</td></tr>
<tr class="memdesc:ab7b197309edc60323a129fa9620a7400"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical OR on <a class="el" href="classgmx_1_1SimdFIBool.xhtml" title="Boolean type for integer datatypes corresponding to float SIMD. ">SimdFIBool</a>.  <a href="#ab7b197309edc60323a129fa9620a7400">More...</a><br/></td></tr>
<tr class="separator:ab7b197309edc60323a129fa9620a7400"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac07fb03248b03957ceee7a258cb01ec9"><td class="memItemLeft" align="right" valign="top">static bool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ac07fb03248b03957ceee7a258cb01ec9">gmx::anyTrue</a> (SimdFIBool a)</td></tr>
<tr class="memdesc:ac07fb03248b03957ceee7a258cb01ec9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if any of the boolean in x is True, otherwise 0.  <a href="#ac07fb03248b03957ceee7a258cb01ec9">More...</a><br/></td></tr>
<tr class="separator:ac07fb03248b03957ceee7a258cb01ec9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a514569727a2e78d7308e19718aa52073"><td class="memItemLeft" align="right" valign="top">static SimdFInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a514569727a2e78d7308e19718aa52073">gmx::selectByMask</a> (SimdFInt32 a, SimdFIBool mask)</td></tr>
<tr class="memdesc:a514569727a2e78d7308e19718aa52073"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from <a class="el" href="classgmx_1_1SimdFInt32.xhtml">gmx::SimdFInt32</a> variable where boolean is true.  <a href="#a514569727a2e78d7308e19718aa52073">More...</a><br/></td></tr>
<tr class="separator:a514569727a2e78d7308e19718aa52073"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab614faa655138f6dd9647301290d993d"><td class="memItemLeft" align="right" valign="top">static SimdFInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ab614faa655138f6dd9647301290d993d">gmx::selectByNotMask</a> (SimdFInt32 a, SimdFIBool mask)</td></tr>
<tr class="memdesc:ab614faa655138f6dd9647301290d993d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select from <a class="el" href="classgmx_1_1SimdFInt32.xhtml">gmx::SimdFInt32</a> variable where boolean is false.  <a href="#ab614faa655138f6dd9647301290d993d">More...</a><br/></td></tr>
<tr class="separator:ab614faa655138f6dd9647301290d993d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f3f322cbf3a7d646003849046028f65"><td class="memItemLeft" align="right" valign="top">static SimdFInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a3f3f322cbf3a7d646003849046028f65">gmx::blend</a> (SimdFInt32 a, SimdFInt32 b, SimdFIBool sel)</td></tr>
<tr class="memdesc:a3f3f322cbf3a7d646003849046028f65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector-blend SIMD integer selection.  <a href="#a3f3f322cbf3a7d646003849046028f65">More...</a><br/></td></tr>
<tr class="separator:a3f3f322cbf3a7d646003849046028f65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SIMD implementation conversion operations</div></td></tr>
<tr class="memitem:ac552eafd6724baac337732185e7aab5b"><td class="memItemLeft" align="right" valign="top">static SimdFInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ac552eafd6724baac337732185e7aab5b">gmx::cvtR2I</a> (SimdFloat a)</td></tr>
<tr class="memdesc:ac552eafd6724baac337732185e7aab5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round single precision floating point to integer.  <a href="#ac552eafd6724baac337732185e7aab5b">More...</a><br/></td></tr>
<tr class="separator:ac552eafd6724baac337732185e7aab5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ea0550c9f9a416bc631e091c2fcbb4e"><td class="memItemLeft" align="right" valign="top">static SimdFInt32 gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a9ea0550c9f9a416bc631e091c2fcbb4e">gmx::cvttR2I</a> (SimdFloat a)</td></tr>
<tr class="memdesc:a9ea0550c9f9a416bc631e091c2fcbb4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate single precision floating point to integer.  <a href="#a9ea0550c9f9a416bc631e091c2fcbb4e">More...</a><br/></td></tr>
<tr class="separator:a9ea0550c9f9a416bc631e091c2fcbb4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dcd41f15fc944cfda5f034cd3c4ecfb"><td class="memItemLeft" align="right" valign="top">static SimdFloat gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a4dcd41f15fc944cfda5f034cd3c4ecfb">gmx::cvtI2R</a> (SimdFInt32 a)</td></tr>
<tr class="memdesc:a4dcd41f15fc944cfda5f034cd3c4ecfb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert integer to single precision floating point.  <a href="#a4dcd41f15fc944cfda5f034cd3c4ecfb">More...</a><br/></td></tr>
<tr class="separator:a4dcd41f15fc944cfda5f034cd3c4ecfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae297fc04e625ca46ca931b39c0c01603"><td class="memItemLeft" align="right" valign="top">static SimdFIBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#ae297fc04e625ca46ca931b39c0c01603">gmx::cvtB2IB</a> (SimdFBool a)</td></tr>
<tr class="memdesc:ae297fc04e625ca46ca931b39c0c01603"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert from single precision boolean to corresponding integer boolean.  <a href="#ae297fc04e625ca46ca931b39c0c01603">More...</a><br/></td></tr>
<tr class="separator:ae297fc04e625ca46ca931b39c0c01603"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05ffa14c31a2ddbc8edc180e65e3b25d"><td class="memItemLeft" align="right" valign="top">static SimdFBool gmx_simdcall&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacegmx.xhtml#a05ffa14c31a2ddbc8edc180e65e3b25d">gmx::cvtIB2B</a> (SimdFIBool a)</td></tr>
<tr class="memdesc:a05ffa14c31a2ddbc8edc180e65e3b25d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert from integer boolean to corresponding single precision boolean.  <a href="#a05ffa14c31a2ddbc8edc180e65e3b25d">More...</a><br/></td></tr>
<tr class="separator:a05ffa14c31a2ddbc8edc180e65e3b25d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Mar 13 2017 19:19:34 for Gromacs by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
