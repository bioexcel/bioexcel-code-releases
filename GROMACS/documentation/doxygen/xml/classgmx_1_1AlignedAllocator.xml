<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1AlignedAllocator" kind="class" prot="public">
    <compoundname>gmx::AlignedAllocator</compoundname>
    <includes local="no">gromacs/utility/alignedallocator.h</includes>
    <innerclass refid="structgmx_1_1AlignedAllocator_1_1rebind" prot="public">gmx::AlignedAllocator::rebind</innerclass>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classgmx_1_1AlignedAllocator_1a677357166e167adc9266c74621959e7b" prot="public" static="no">
        <type>T</type>
        <definition>typedef T gmx::AlignedAllocator&lt; T &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
<para>Type of allocated elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="116" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classgmx_1_1AlignedAllocator_1a51dd28eb304c1969e2fab4c2a6a29108" prot="public" static="no">
        <type>T &amp;</type>
        <definition>typedef T&amp; gmx::AlignedAllocator&lt; T &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
<para>Reference to allocated elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="117" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classgmx_1_1AlignedAllocator_1a6448fac83f7da202996dd5c2b492aa6b" prot="public" static="no">
        <type>const T &amp;</type>
        <definition>typedef const T&amp; gmx::AlignedAllocator&lt; T &gt;::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
<para>Constant reference to allocated elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="118" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classgmx_1_1AlignedAllocator_1ac87223f955ff47913b00c1173960e2ec" prot="public" static="no">
        <type>T *</type>
        <definition>typedef T* gmx::AlignedAllocator&lt; T &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
<para>Pointer to allocated elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="119" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classgmx_1_1AlignedAllocator_1a38870b826c1240841455ca5510948eb0" prot="public" static="no">
        <type>const T *</type>
        <definition>typedef const T* gmx::AlignedAllocator&lt; T &gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
<para>Constant pointer to allocated elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="120" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classgmx_1_1AlignedAllocator_1a2d3a8c78d56d0904868706dbe119ccdd" prot="public" static="no">
        <type>std::size_t</type>
        <definition>typedef std::size_t gmx::AlignedAllocator&lt; T &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
<para>Integer type to use for size of objects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="121" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classgmx_1_1AlignedAllocator_1a494b6ca0f5efd3d5f6935f3e3e3ab70c" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>typedef std::ptrdiff_t gmx::AlignedAllocator&lt; T &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
<para>Type to hold differences between pointers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="122" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1AlignedAllocator_1afd4aaa18a61ec445d5c84a3c2a3dad91" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>gmx::AlignedAllocator&lt; T &gt;::AlignedAllocator</definition>
        <argsstring>(const AlignedAllocator&lt; U &gt; &amp;)</argsstring>
        <name>AlignedAllocator</name>
        <param>
          <type>const <ref refid="classgmx_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref>&lt; U &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Templated copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para>This template constructor cannot be auto-generated, and is normally unused, except e.g. MSVC2015 standard library uses it in debug mode, presumably to implement some checks. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="146" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AlignedAllocator_1af120711baba893800bd57aa705838716" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gmx::AlignedAllocator&lt; T &gt;::AlignedAllocator</definition>
        <argsstring>()</argsstring>
        <name>AlignedAllocator</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>No constructor can be auto-generated in the presence of any user-defined constructor, but we want the default constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="153" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AlignedAllocator_1a4555558379d2108737b4958a694f7461" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgmx_1_1AlignedAllocator_1ac87223f955ff47913b00c1173960e2ec" kindref="member">pointer</ref></type>
        <definition>pointer gmx::AlignedAllocator&lt; T &gt;::address</definition>
        <argsstring>(reference r) const </argsstring>
        <name>address</name>
        <param>
          <type><ref refid="classgmx_1_1AlignedAllocator_1a51dd28eb304c1969e2fab4c2a6a29108" kindref="member">reference</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Return address of an object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to object of type T </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to T memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="161" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AlignedAllocator_1a2878eff97ba969633cb2d4a452955255" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgmx_1_1AlignedAllocator_1a38870b826c1240841455ca5510948eb0" kindref="member">const_pointer</ref></type>
        <definition>const_pointer gmx::AlignedAllocator&lt; T &gt;::address</definition>
        <argsstring>(const_reference r) const </argsstring>
        <name>address</name>
        <param>
          <type><ref refid="classgmx_1_1AlignedAllocator_1a6448fac83f7da202996dd5c2b492aa6b" kindref="member">const_reference</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Return address of a const object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Const reference to object of type T </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to T memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="169" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AlignedAllocator_1a4cee961fd20968e4809e52a9c0a96fe7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgmx_1_1AlignedAllocator_1ac87223f955ff47913b00c1173960e2ec" kindref="member">pointer</ref></type>
        <definition>pointer gmx::AlignedAllocator&lt; T &gt;::allocate</definition>
        <argsstring>(std::size_t n, typename std::allocator&lt; void &gt;::const_pointer hint=0)</argsstring>
        <name>allocate</name>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>typename std::allocator&lt; void &gt;::<ref refid="classgmx_1_1AlignedAllocator_1a38870b826c1240841455ca5510948eb0" kindref="member">const_pointer</ref></type>
          <declname>hint</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Do the actual memory allocation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements of type T to allocate. n can be 0 bytes, which will return a non-null properly aligned and padded pointer that should not be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hint</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional value returned from previous call to allocate. For now this is not used. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to allocated memory</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if the allocation fails. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="183" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="183" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AlignedAllocator_1acd6558b11514455470876cb4ca7a0aad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::AlignedAllocator&lt; T &gt;::deallocate</definition>
        <argsstring>(pointer p, std::size_t n)</argsstring>
        <name>deallocate</name>
        <param>
          <type><ref refid="classgmx_1_1AlignedAllocator_1ac87223f955ff47913b00c1173960e2ec" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Release memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to previously allocated memory returned from <ref refid="classgmx_1_1AlignedAllocator_1a4cee961fd20968e4809e52a9c0a96fe7" kindref="member">allocate()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of objects previously passed to <ref refid="classgmx_1_1AlignedAllocator_1a4cee961fd20968e4809e52a9c0a96fe7" kindref="member">allocate()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="203" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AlignedAllocator_1a6edc056e97a90772fc1e024344cf3842" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::AlignedAllocator&lt; T &gt;::construct</definition>
        <argsstring>(pointer p, Args &amp;&amp;...args)</argsstring>
        <name>construct</name>
        <param>
          <type><ref refid="classgmx_1_1AlignedAllocator_1ac87223f955ff47913b00c1173960e2ec" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Construct an object without allocating memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable-length list of types for constructor args </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Adress of memory where to construct object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable-length list of arguments to constructor </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="216" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="216" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AlignedAllocator_1afaed62ee93df256992b5b51d46e794d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::AlignedAllocator&lt; T &gt;::destroy</definition>
        <argsstring>(pointer p)</argsstring>
        <name>destroy</name>
        <param>
          <type><ref refid="classgmx_1_1AlignedAllocator_1ac87223f955ff47913b00c1173960e2ec" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Call the destructor of object without releasing memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of memory where to destroy object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="223" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="223" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AlignedAllocator_1a2b7d39324f43782b93e860a6cf01286b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t gmx::AlignedAllocator&lt; T &gt;::max_size</definition>
        <argsstring>() const </argsstring>
        <name>max_size</name>
        <briefdescription>
<para>Return largest number of objects that can be allocated. </para>        </briefdescription>
        <detaileddescription>
<para>This will be set such that the number of objects T multiplied by the size of each object is the largest value that can be represented by size_type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="232" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="232" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AlignedAllocator_1a267cf3371f0a3e51595ebe34b6b90e39" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool gmx::AlignedAllocator&lt; T &gt;::operator==</definition>
        <argsstring>(const AlignedAllocator&lt; T2 &gt; &amp;rhs) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classgmx_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref>&lt; T2 &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return true if two allocators are identical. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Other allocator</para></parameterdescription>
</parameteritem>
</parameterlist>
This is a member function of the left-hand-side allocator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="242" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="242" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AlignedAllocator_1ac58071cd8c225d1d9468ce61385d1cbf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::AlignedAllocator&lt; T &gt;::operator!=</definition>
        <argsstring>(const AlignedAllocator &amp;rhs) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classgmx_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return true if two allocators are different. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Other allocator.</para></parameterdescription>
</parameteritem>
</parameterlist>
This is a member function of the left-hand-side allocator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="251" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="251" bodyend="251"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Aligned memory allocator. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal />  <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of objects to allocate</para></parameterdescription>
</parameteritem>
</parameterlist>
This class can be used for the optional allocator template parameter in standard library containers, which is necessary e.g. to use SIMD aligned load and store operations in those containers. The memory will always be aligned to 128 bytes, which is our estimate of the longest cache lines on architectures currently in use. It will also be padded by the same amount at the end of the area, to help avoid false cache sharing.</para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Instead of a GROMACS exception object we throw the standard one on allocation failures to make it as compatible as possible with the errors expected by code using the standard library containers. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" line="112" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.h" bodystart="111" bodyend="252"/>
    <listofallmembers>
      <member refid="classgmx_1_1AlignedAllocator_1a4555558379d2108737b4958a694f7461" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>address</name></member>
      <member refid="classgmx_1_1AlignedAllocator_1a2878eff97ba969633cb2d4a452955255" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>address</name></member>
      <member refid="classgmx_1_1AlignedAllocator_1afd4aaa18a61ec445d5c84a3c2a3dad91" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>AlignedAllocator</name></member>
      <member refid="classgmx_1_1AlignedAllocator_1af120711baba893800bd57aa705838716" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>AlignedAllocator</name></member>
      <member refid="classgmx_1_1AlignedAllocator_1a4cee961fd20968e4809e52a9c0a96fe7" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>allocate</name></member>
      <member refid="classgmx_1_1AlignedAllocator_1a38870b826c1240841455ca5510948eb0" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>const_pointer</name></member>
      <member refid="classgmx_1_1AlignedAllocator_1a6448fac83f7da202996dd5c2b492aa6b" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>const_reference</name></member>
      <member refid="classgmx_1_1AlignedAllocator_1a6edc056e97a90772fc1e024344cf3842" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>construct</name></member>
      <member refid="classgmx_1_1AlignedAllocator_1acd6558b11514455470876cb4ca7a0aad" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>deallocate</name></member>
      <member refid="classgmx_1_1AlignedAllocator_1afaed62ee93df256992b5b51d46e794d9" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>destroy</name></member>
      <member refid="classgmx_1_1AlignedAllocator_1a494b6ca0f5efd3d5f6935f3e3e3ab70c" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>difference_type</name></member>
      <member refid="classgmx_1_1AlignedAllocator_1a2b7d39324f43782b93e860a6cf01286b" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>max_size</name></member>
      <member refid="classgmx_1_1AlignedAllocator_1ac58071cd8c225d1d9468ce61385d1cbf" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>operator!=</name></member>
      <member refid="classgmx_1_1AlignedAllocator_1a267cf3371f0a3e51595ebe34b6b90e39" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>operator==</name></member>
      <member refid="classgmx_1_1AlignedAllocator_1ac87223f955ff47913b00c1173960e2ec" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>pointer</name></member>
      <member refid="classgmx_1_1AlignedAllocator_1a51dd28eb304c1969e2fab4c2a6a29108" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>reference</name></member>
      <member refid="classgmx_1_1AlignedAllocator_1a2d3a8c78d56d0904868706dbe119ccdd" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>size_type</name></member>
      <member refid="classgmx_1_1AlignedAllocator_1a677357166e167adc9266c74621959e7b" prot="public" virt="non-virtual"><scope>gmx::AlignedAllocator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
