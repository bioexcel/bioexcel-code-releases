<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="namespacegmx_1_1anonymous__namespace_02cmdlineprogramcontext_8cpp_03" kind="namespace">
    <compoundname>gmx::anonymous_namespace{cmdlineprogramcontext.cpp}</compoundname>
    <innerclass refid="classgmx_1_1anonymous__namespace_02cmdlineprogramcontext_8cpp_03_1_1DefaultExecutableEnvironment" prot="public">gmx::anonymous_namespace{cmdlineprogramcontext.cpp}::DefaultExecutableEnvironment</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__module__commandline_1ga76aea6d15d47658948021b0237d7dcc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::anonymous_namespace{cmdlineprogramcontext.cpp}::quoteIfNecessary</definition>
        <argsstring>(const char *str)</argsstring>
        <name>quoteIfNecessary</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Quotes a string if it contains spaces. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" line="76" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" bodystart="76" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="group__module__commandline_1ga304b861051e2dbc5acf0e93d5f6a2e77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::anonymous_namespace{cmdlineprogramcontext.cpp}::findFullBinaryPath</definition>
        <argsstring>(const std::string &amp;invokedName, const IExecutableEnvironment &amp;env)</argsstring>
        <name>findFullBinaryPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>invokedName</declname>
        </param>
        <param>
          <type>const <ref refid="classgmx_1_1IExecutableEnvironment" kindref="compound">IExecutableEnvironment</ref> &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Finds the absolute path of the binary from <computeroutput>argv</computeroutput>[0]. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">invokedName</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>argv</computeroutput>[0] the binary was invoked with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>Executable environment. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The full path of the binary.</para></simplesect>
If a binary with the given name cannot be located, <computeroutput>invokedName</computeroutput> is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" line="129" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" bodystart="129" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="group__module__commandline_1gad07ea94ff9a375025a6305c09e6a8630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::anonymous_namespace{cmdlineprogramcontext.cpp}::isAcceptableLibraryPath</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>isAcceptableLibraryPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns whether given path contains files from <computeroutput>share/top/</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Only checks for a single file that has an uncommon enough name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" line="172" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="group__module__commandline_1gaf409a26191c220f2e8a312b24e5b95a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::anonymous_namespace{cmdlineprogramcontext.cpp}::isAcceptableLibraryPathPrefix</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>isAcceptableLibraryPathPrefix</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns whether given path prefix contains files from <computeroutput>share/top/</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1Path" kindref="compound">Path</ref> prefix to check. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>path</computeroutput> contains the data files.</para></simplesect>
Checks whether <computeroutput>path</computeroutput> could be the installation prefix where <computeroutput>share/top/</computeroutput> files have been installed: appends the relative installation path of the data files and calls <ref refid="group__module__commandline_1gad07ea94ff9a375025a6305c09e6a8630" kindref="member">isAcceptableLibraryPath()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" line="187" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" bodystart="187" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="group__module__commandline_1ga1f9147fe32579a8337aefbd852974cf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::anonymous_namespace{cmdlineprogramcontext.cpp}::findFallbackInstallationPrefixPath</definition>
        <argsstring>()</argsstring>
        <name>findFallbackInstallationPrefixPath</name>
        <briefdescription>
<para>Returns a fallback installation prefix path. </para>        </briefdescription>
        <detaileddescription>
<para>Checks a few standard locations for the data files before returning a configure-time hard-coded path. The hard-coded path is preferred if it actually contains the data files, though. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" line="204" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" bodystart="204" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="group__module__commandline_1ga3646677841300ae1be7d7482d916da02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::anonymous_namespace{cmdlineprogramcontext.cpp}::findInstallationPrefixPath</definition>
        <argsstring>(const std::string &amp;binaryPath, bool *bSourceLayout)</argsstring>
        <name>findInstallationPrefixPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>binaryPath</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>bSourceLayout</declname>
        </param>
        <briefdescription>
<para>Generic function to find data files based on path of the binary. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">binaryPath</parametername>
</parameternamelist>
<parameterdescription>
<para>Absolute path to the binary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bSourceLayout</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to <computeroutput>true</computeroutput> if the binary is run from the build tree and the original source directory can be found. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classgmx_1_1Path" kindref="compound">Path</ref> to the <computeroutput>share/top/</computeroutput> data files.</para></simplesect>
The search based on the path only works if the binary is in the same relative path as the installed GROMACS binaries. If the binary is somewhere else, a hard-coded fallback is used. This doesn&apos;t work if the binaries are somewhere else than the path given during configure time...</para><para>Extra logic is present to allow running binaries from the build tree such that they use up-to-date data files from the source tree. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" line="242" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" bodystart="242" bodyend="286"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" line="68" column="1"/>
  </compounddef>
</doxygen>
