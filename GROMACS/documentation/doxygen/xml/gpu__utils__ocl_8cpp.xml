<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="gpu__utils__ocl_8cpp" kind="file">
    <compoundname>gpu_utils_ocl.cpp</compoundname>
    <includes refid="gmxpre_8h" local="yes">gmxpre.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">memory.h</includes>
    <includes refid="gpu__utils_8h" local="yes">gromacs/gpu_utils/gpu_utils.h</includes>
    <includes refid="ocl__compiler_8h" local="yes">gromacs/gpu_utils/ocl_compiler.h</includes>
    <includes refid="oclutils_8h" local="yes">gromacs/gpu_utils/oclutils.h</includes>
    <includes refid="hw__info_8h" local="yes">gromacs/hardware/hw_info.h</includes>
    <includes refid="md__enums_8h" local="yes">gromacs/mdtypes/md_enums.h</includes>
    <includes refid="cstringutil_8h" local="yes">gromacs/utility/cstringutil.h</includes>
    <includes refid="fatalerror_8h" local="yes">gromacs/utility/fatalerror.h</includes>
    <includes refid="smalloc_8h" local="yes">gromacs/utility/smalloc.h</includes>
    <incdepgraph>
      <node id="9042">
        <label>stdarg.h</label>
      </node>
      <node id="9025">
        <label>assert.h</label>
      </node>
      <node id="9043">
        <label>gromacs/utility/smalloc.h</label>
        <link refid="smalloc_8h"/>
        <childnode refid="9044" relation="include">
        </childnode>
        <childnode refid="9032" relation="include">
        </childnode>
      </node>
      <node id="9041">
        <label>gromacs/utility/fatalerror.h</label>
        <link refid="fatalerror_8h"/>
        <childnode refid="9042" relation="include">
        </childnode>
        <childnode refid="9026" relation="include">
        </childnode>
        <childnode refid="9032" relation="include">
        </childnode>
      </node>
      <node id="9033">
        <label>stdint.h</label>
      </node>
      <node id="9027">
        <label>stdlib.h</label>
      </node>
      <node id="9024">
        <label>gmxpre.h</label>
        <link refid="gmxpre_8h"/>
      </node>
      <node id="9040">
        <label>gromacs/utility/cstringutil.h</label>
        <link refid="cstringutil_8h"/>
        <childnode refid="9026" relation="include">
        </childnode>
        <childnode refid="9032" relation="include">
        </childnode>
      </node>
      <node id="9023">
        <label>src/gromacs/gpu_utils/gpu_utils_ocl.cpp</label>
        <link refid="gpu_utils_ocl.cpp"/>
        <childnode refid="9024" relation="include">
        </childnode>
        <childnode refid="9025" relation="include">
        </childnode>
        <childnode refid="9026" relation="include">
        </childnode>
        <childnode refid="9027" relation="include">
        </childnode>
        <childnode refid="9028" relation="include">
        </childnode>
        <childnode refid="9029" relation="include">
        </childnode>
        <childnode refid="9030" relation="include">
        </childnode>
        <childnode refid="9035" relation="include">
        </childnode>
        <childnode refid="9037" relation="include">
        </childnode>
        <childnode refid="9039" relation="include">
        </childnode>
        <childnode refid="9040" relation="include">
        </childnode>
        <childnode refid="9041" relation="include">
        </childnode>
        <childnode refid="9043" relation="include">
        </childnode>
      </node>
      <node id="9036">
        <label>string</label>
      </node>
      <node id="9037">
        <label>gromacs/gpu_utils/oclutils.h</label>
        <link refid="oclutils_8h"/>
        <childnode refid="9038" relation="include">
        </childnode>
        <childnode refid="9036" relation="include">
        </childnode>
      </node>
      <node id="9044">
        <label>stddef.h</label>
      </node>
      <node id="9029">
        <label>memory.h</label>
      </node>
      <node id="9038">
        <label>CL/opencl.h</label>
      </node>
      <node id="9028">
        <label>string.h</label>
      </node>
      <node id="9031">
        <label>cstdio</label>
      </node>
      <node id="9030">
        <label>gromacs/gpu_utils/gpu_utils.h</label>
        <link refid="gpu__utils_8h"/>
        <childnode refid="9031" relation="include">
        </childnode>
        <childnode refid="9032" relation="include">
        </childnode>
      </node>
      <node id="9039">
        <label>gromacs/mdtypes/md_enums.h</label>
        <link refid="md__enums_8h"/>
        <childnode refid="9032" relation="include">
        </childnode>
      </node>
      <node id="9032">
        <label>gromacs/utility/basedefinitions.h</label>
        <link refid="basedefinitions_8h"/>
        <childnode refid="9033" relation="include">
        </childnode>
        <childnode refid="9034" relation="include">
        </childnode>
      </node>
      <node id="9035">
        <label>gromacs/gpu_utils/ocl_compiler.h</label>
        <link refid="ocl__compiler_8h"/>
        <childnode refid="9036" relation="include">
        </childnode>
        <childnode refid="9037" relation="include">
        </childnode>
      </node>
      <node id="9026">
        <label>stdio.h</label>
      </node>
      <node id="9034">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="gpu__utils__ocl_8cpp_1aaa2abbf7d82183e447f53730e465c01f" prot="public" static="no">
        <name>CALLOCLFUNC_LOGERROR</name>
        <param><defname>func</defname></param>
        <param><defname>err_str</defname></param>
        <param><defname>retval</defname></param>
        <initializer>{ \
        cl_int opencl_ret = func; \
        if (CL_SUCCESS != opencl_ret) \
        { \
            sprintf(err_str, &quot;OpenCL error %d&quot;, opencl_ret); \
            retval = -1; \
        } \
        else{ \
            retval = 0; } \
}</initializer>
        <briefdescription>
<para>Helper macro for error handling. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" line="65" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gpu__utils__ocl_8cpp_1a3b91e10671db4bd21d6c6f3bf2763da1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool is_compatible_gpu</definition>
        <argsstring>(int stat)</argsstring>
        <name>is_compatible_gpu</name>
        <param>
          <type>int</type>
          <declname>stat</declname>
        </param>
        <briefdescription>
<para>Helper function that checks whether a given GPU status indicates compatible GPU. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stat</parametername>
</parameternamelist>
<parameterdescription>
<para>GPU status. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the provided status is egpuCompatible, otherwise false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" line="82" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils__ocl_8cpp_1a63db61f0c7660eb3a7a3db486303b47b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool runningOnCompatibleOSForAmd</definition>
        <argsstring>()</argsstring>
        <name>runningOnCompatibleOSForAmd</name>
        <briefdescription>
<para>Return true if executing on compatible OS for AMD OpenCL. </para>        </briefdescription>
        <detaileddescription>
<para>This is assumed to be true for OS X version of at least 10.10.4 and all other OS flavors.</para><para>Uses the BSD sysctl() interfaces to extract the kernel version.</para><para><simplesect kind="return"><para>true if version is 14.4 or later (= OS X version 10.10.4), or OS is not Darwin. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" line="98" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="98" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils__ocl_8cpp_1a2e270f50e7be2fba9bb967d53590f921" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int is_gmx_supported_gpu_id</definition>
        <argsstring>(struct gmx_device_info_t *ocl_gpu_device)</argsstring>
        <name>is_gmx_supported_gpu_id</name>
        <param>
          <type>struct <ref refid="structgmx__device__info__t" kindref="compound">gmx_device_info_t</ref> *</type>
          <declname>ocl_gpu_device</declname>
        </param>
        <briefdescription>
<para>Returns true if the gpu characterized by the device properties is supported by the native gpu acceleration. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the GPU properties passed indicate a compatible GPU, otherwise false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" line="125" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="125" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils__ocl_8cpp_1a48d3a72747f16f7bdc06e48af311eccc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="oclutils_8h_1a10849a150bcdfa716f8adaf20cfaabb7" kindref="member">ocl_vendor_id_t</ref></type>
        <definition>static ocl_vendor_id_t get_vendor_id</definition>
        <argsstring>(char *vendor_name)</argsstring>
        <name>get_vendor_id</name>
        <param>
          <type>char *</type>
          <declname>vendor_name</declname>
        </param>
        <briefdescription>
<para>Returns an ocl_vendor_id_t value corresponding to the input OpenCL vendor name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">vendor_name</parametername>
</parameternamelist>
<parameterdescription>
<para>String with OpenCL vendor name. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ocl_vendor_id_t value for the input vendor_name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" line="145" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="145" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils__ocl_8cpp_1ad2b6b33bd6b179c708cb1592cc96060d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int detect_gpus</definition>
        <argsstring>(gmx_gpu_info_t *gpu_info, char *err_str)</argsstring>
        <name>detect_gpus</name>
        <param>
          <type><ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> *</type>
          <declname>gpu_info</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>err_str</declname>
        </param>
        <briefdescription>
<para>This function is documented in the header file. </para>        </briefdescription>
        <detaileddescription>
<para>Detect all GPUs in the system. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" line="170" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="170" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils__ocl_8cpp_1aafdb3f8b5aee47160ad840824a6f8f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_gpu_info</definition>
        <argsstring>(const gmx_gpu_info_t *gpu_info)</argsstring>
        <name>free_gpu_info</name>
        <param>
          <type>const <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> *</type>
          <declname>gpu_info</declname>
        </param>
        <briefdescription>
<para>This function is documented in the header file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" line="340" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="340" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils__ocl_8cpp_1aa07d72d1beeb0994bb3d36f7c07ec08d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pick_compatible_gpus</definition>
        <argsstring>(const gmx_gpu_info_t *gpu_info, gmx_gpu_opt_t *gpu_opt)</argsstring>
        <name>pick_compatible_gpus</name>
        <param>
          <type>const <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> *</type>
          <declname>gpu_info</declname>
        </param>
        <param>
          <type><ref refid="structgmx__gpu__opt__t" kindref="compound">gmx_gpu_opt_t</ref> *</type>
          <declname>gpu_opt</declname>
        </param>
        <briefdescription>
<para>This function is documented in the header file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" line="351" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="351" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils__ocl_8cpp_1a359a5ebcedc5c49835d93e0f6211ae3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="basedefinitions_8h_1a8fddad319f226e856400d190198d5151" kindref="member">gmx_bool</ref></type>
        <definition>gmx_bool check_selected_gpus</definition>
        <argsstring>(int *checkres, const gmx_gpu_info_t *gpu_info, gmx_gpu_opt_t *gpu_opt)</argsstring>
        <name>check_selected_gpus</name>
        <param>
          <type>int *</type>
          <declname>checkres</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> *</type>
          <declname>gpu_info</declname>
        </param>
        <param>
          <type><ref refid="structgmx__gpu__opt__t" kindref="compound">gmx_gpu_opt_t</ref> *</type>
          <declname>gpu_opt</declname>
        </param>
        <briefdescription>
<para>This function is documented in the header file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" line="379" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="379" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils__ocl_8cpp_1ae061d0b84e9342eb0e278c7220ef891d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void get_gpu_device_info_string</definition>
        <argsstring>(char *s, const gmx_gpu_info_t *gpu_info, int index)</argsstring>
        <name>get_gpu_device_info_string</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> *</type>
          <declname>gpu_info</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>This function is documented in the header file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" line="418" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="418" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils__ocl_8cpp_1a14551b9da2490f598528fcdc54e1ac38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="basedefinitions_8h_1a8fddad319f226e856400d190198d5151" kindref="member">gmx_bool</ref></type>
        <definition>gmx_bool init_gpu</definition>
        <argsstring>(FILE *fplog, int mygpu, char *result_str, const gmx_gpu_info_t *gpu_info, const gmx_gpu_opt_t *gpu_opt)</argsstring>
        <name>init_gpu</name>
        <param>
          <type>FILE *</type>
          <declname>fplog</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mygpu</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>result_str</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> *</type>
          <declname>gpu_info</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__gpu__opt__t" kindref="compound">gmx_gpu_opt_t</ref> *</type>
          <declname>gpu_opt</declname>
        </param>
        <briefdescription>
<para>This function is documented in the header file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" line="450" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="450" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils__ocl_8cpp_1a26b4307bde41d7898fb6edb133823287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_gpu_device_id</definition>
        <argsstring>(const gmx_gpu_info_t *, const gmx_gpu_opt_t *gpu_opt, int idx)</argsstring>
        <name>get_gpu_device_id</name>
        <param>
          <type>const <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> *</type>
        </param>
        <param>
          <type>const <ref refid="structgmx__gpu__opt__t" kindref="compound">gmx_gpu_opt_t</ref> *</type>
          <declname>gpu_opt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>This function is documented in the header file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" line="491" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="491" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils__ocl_8cpp_1a6402ce88a90f2666dd34a7f6f6c931fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* get_ocl_gpu_device_name</definition>
        <argsstring>(const gmx_gpu_info_t *gpu_info, const gmx_gpu_opt_t *gpu_opt, int idx)</argsstring>
        <name>get_ocl_gpu_device_name</name>
        <param>
          <type>const <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> *</type>
          <declname>gpu_info</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__gpu__opt__t" kindref="compound">gmx_gpu_opt_t</ref> *</type>
          <declname>gpu_opt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>This function is documented in the header file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" line="502" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="502" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils__ocl_8cpp_1ac368c4a971290513fbabe74a0c80b716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sizeof_gpu_dev_info</definition>
        <argsstring>(void)</argsstring>
        <name>sizeof_gpu_dev_info</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function is documented in the header file. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the size of the gpu_dev_info struct. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" line="514" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="514" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils__ocl_8cpp_1a460c60ba5797695918f337773ee55f79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cl_int</type>
        <definition>cl_int dbg_ocl_kernel_name</definition>
        <argsstring>(const cl_kernel kernel)</argsstring>
        <name>dbg_ocl_kernel_name</name>
        <param>
          <type>const cl_kernel</type>
          <declname>kernel</declname>
        </param>
        <briefdescription>
<para>Prints the name of a kernel function pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>OpenCL kernel </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CL_SUCCESS if the operation was successful, an OpenCL error otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" line="524" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="524" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils__ocl_8cpp_1aa48c28cd58ca71be57aa185ad9056139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cl_int</type>
        <definition>cl_int dbg_ocl_kernel_name_address</definition>
        <argsstring>(void *kernel)</argsstring>
        <name>dbg_ocl_kernel_name_address</name>
        <param>
          <type>void *</type>
          <declname>kernel</declname>
        </param>
        <briefdescription>
<para>Prints the name of a kernel function pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>OpenCL kernel </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CL_SUCCESS if the operation was successful, an OpenCL error otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" line="546" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="546" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="gpu__utils__ocl_8cpp_1ab791918a19cd4aefc96a099f27f0ca1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gpu_set_host_malloc_and_free</definition>
        <argsstring>(bool bUseGpuKernels, gmx_host_alloc_t **nb_alloc, gmx_host_free_t **nb_free)</argsstring>
        <name>gpu_set_host_malloc_and_free</name>
        <param>
          <type>bool</type>
          <declname>bUseGpuKernels</declname>
        </param>
        <param>
          <type><ref refid="gpu__utils_8h_1a4a5340aac0cf9145eaae8a5ac5d6b0dc" kindref="member">gmx_host_alloc_t</ref> **</type>
          <declname>nb_alloc</declname>
        </param>
        <param>
          <type><ref refid="gpu__utils_8h_1aff7e0f62ae0592b0aefadcf9071d0435" kindref="member">gmx_host_free_t</ref> **</type>
          <declname>nb_free</declname>
        </param>
        <briefdescription>
<para>Set page-locked memory allocation functions used by the GPU host. </para>        </briefdescription>
        <detaileddescription>
<para>Set page-locked memory allocation functions used by the GPU host.</para><para>Since GPU support is not configured, there is no host memory to allocate. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" line="563" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp" bodystart="563" bodyend="577"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Define functions for detection and initialization for OpenCL devices. </para>    </briefdescription>
    <detaileddescription>
<internal><para><simplesect kind="author"><para>Anca Hamuraru <ulink url="mailto:anca@streamcomputing.eu">anca@streamcomputing.eu</ulink> </para><simplesectsep/><para>Dimitrios Karkoulis <ulink url="mailto:dimitris.karkoulis@gmail.com">dimitris.karkoulis@gmail.com</ulink> </para><simplesectsep/><para>Teemu Virolainen <ulink url="mailto:teemu@streamcomputing.eu">teemu@streamcomputing.eu</ulink> </para></simplesect>
</para></internal>
    </detaileddescription>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/gpu_utils/gpu_utils_ocl.cpp"/>
  </compounddef>
</doxygen>
