<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1test_1_1FloatingPointTolerance" kind="class" prot="public">
    <compoundname>gmx::test::FloatingPointTolerance</compoundname>
    <includes local="no">testutils/testasserts.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgmx_1_1test_1_1FloatingPointTolerance_1aa9569b2e5ae75eeac15ad8757469f3b6" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float gmx::test::FloatingPointTolerance::singleAbsoluteTolerance_</definition>
        <argsstring></argsstring>
        <name>singleAbsoluteTolerance_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="346" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1test_1_1FloatingPointTolerance_1a0c887d9745daf5d72005f16c32d1a47f" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double gmx::test::FloatingPointTolerance::doubleAbsoluteTolerance_</definition>
        <argsstring></argsstring>
        <name>doubleAbsoluteTolerance_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="347" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1test_1_1FloatingPointTolerance_1a4d18774658e7707dd360b5d8fa79b7fb" prot="private" static="no" mutable="no">
        <type>gmx_uint64_t</type>
        <definition>gmx_uint64_t gmx::test::FloatingPointTolerance::singleUlpTolerance_</definition>
        <argsstring></argsstring>
        <name>singleUlpTolerance_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="348" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1test_1_1FloatingPointTolerance_1a4224f978fa7c88335b8a1c44b1da8993" prot="private" static="no" mutable="no">
        <type>gmx_uint64_t</type>
        <definition>gmx_uint64_t gmx::test::FloatingPointTolerance::doubleUlpTolerance_</definition>
        <argsstring></argsstring>
        <name>doubleUlpTolerance_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="349" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1test_1_1FloatingPointTolerance_1a31a9e396f32d551e40a34ef305f051d1" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gmx::test::FloatingPointTolerance::bSignMustMatch_</definition>
        <argsstring></argsstring>
        <name>bSignMustMatch_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="350" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="350" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1test_1_1FloatingPointTolerance_1a03b07e798ad5d114a8f4fda6b57f1da0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gmx::test::FloatingPointTolerance::FloatingPointTolerance</definition>
        <argsstring>(float singleAbsoluteTolerance, double doubleAbsoluteTolerance, gmx_uint64_t singleUlpTolerance, gmx_uint64_t doubleUlpTolerance, bool bSignMustMatch)</argsstring>
        <name>FloatingPointTolerance</name>
        <param>
          <type>float</type>
          <declname>singleAbsoluteTolerance</declname>
        </param>
        <param>
          <type>double</type>
          <declname>doubleAbsoluteTolerance</declname>
        </param>
        <param>
          <type>gmx_uint64_t</type>
          <declname>singleUlpTolerance</declname>
        </param>
        <param>
          <type>gmx_uint64_t</type>
          <declname>doubleUlpTolerance</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bSignMustMatch</declname>
        </param>
        <briefdescription>
<para>Creates a tolerance with the specified values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">singleAbsoluteTolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Allowed absolute difference in a single-precision number. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">doubleAbsoluteTolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Allowed absolute difference in a double-precision number. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">singleUlpTolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Allowed ULP difference in a single-precision number. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">doubleUlpTolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Allowed ULP difference in a double-precision number. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bSignMustMatch</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether sign mismatch fails the comparison. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="322" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="322" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1FloatingPointTolerance_1aad49fc0165f03ecca9b3998d5777167a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::test::FloatingPointTolerance::isWithin</definition>
        <argsstring>(const FloatingPointDifference &amp;difference) const </argsstring>
        <name>isWithin</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1FloatingPointDifference" kindref="compound">FloatingPointDifference</ref> &amp;</type>
          <declname>difference</declname>
        </param>
        <briefdescription>
<para>Checks whether a difference is within the specified tolerance. </para>        </briefdescription>
        <detaileddescription>
<para>NaNs are always treated outside the tolerance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="340" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.cpp" bodystart="229" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1FloatingPointTolerance_1ae9afa5dd993326bdef3c918c44f92669" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::test::FloatingPointTolerance::toString</definition>
        <argsstring>(const FloatingPointDifference &amp;difference) const </argsstring>
        <name>toString</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1FloatingPointDifference" kindref="compound">FloatingPointDifference</ref> &amp;</type>
          <declname>difference</declname>
        </param>
        <briefdescription>
<para>Formats the tolerance as a string for assertion failure messages. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="343" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.cpp" bodystart="258" bodyend="289"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="group__module__testutils_1gad25b9666492f99265f71a3c6da9e2a1b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgmx_1_1test_1_1FloatingPointTolerance" kindref="compound">FloatingPointTolerance</ref></type>
        <definition>static FloatingPointTolerance ulpTolerance</definition>
        <argsstring>(gmx_uint64_t ulpDiff)</argsstring>
        <name>ulpTolerance</name>
        <param>
          <type>gmx_uint64_t</type>
          <declname>ulpDiff</declname>
        </param>
        <briefdescription>
<para>Creates a tolerance that only allows a specified ULP difference. </para>        </briefdescription>
        <detaileddescription>
<para>The tolerance uses the given ULP value for both precisions, i.e., double precision will have much stricter tolerance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="362" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="362" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1gad4123626be56582b11ef6accf715dbe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1test_1_1FloatingPointTolerance" kindref="compound">FloatingPointTolerance</ref></type>
        <definition>FloatingPointTolerance relativeToleranceAsFloatingPoint</definition>
        <argsstring>(double magnitude, double tolerance)</argsstring>
        <name>relativeToleranceAsFloatingPoint</name>
        <param>
          <type>double</type>
          <declname>magnitude</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
<para>Creates a tolerance that allows a difference in two compared values that is relative to the given magnitude. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">magnitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Magnitude of the numbers the computation operates in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative tolerance permitted (e.g. 1e-4).</para></parameterdescription>
</parameteritem>
</parameterlist>
In addition to setting an ULP tolerance equivalent to <computeroutput>tolerance</computeroutput> for both precisions, this sets the absolute tolerance such that values close to zero (in general, smaller than <computeroutput>magnitude</computeroutput>) do not fail the check if they differ by less than <computeroutput>tolerance</computeroutput> evaluated at <computeroutput>magnitude</computeroutput>. This accounts for potential loss of precision for small values, and should be used when accuracy of values much less than <computeroutput>magnitude</computeroutput> do not matter for correctness.</para><para>The ULP tolerance for different precisions will be different to make them both match <computeroutput>tolerance</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1ga665e9f7521e7815f6e5eac6bb375f167" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgmx_1_1test_1_1FloatingPointTolerance" kindref="compound">FloatingPointTolerance</ref></type>
        <definition>static FloatingPointTolerance relativeToleranceAsPrecisionDependentUlp</definition>
        <argsstring>(double magnitude, gmx_uint64_t singleUlpDiff, gmx_uint64_t doubleUlpDiff)</argsstring>
        <name>relativeToleranceAsPrecisionDependentUlp</name>
        <param>
          <type>double</type>
          <declname>magnitude</declname>
        </param>
        <param>
          <type>gmx_uint64_t</type>
          <declname>singleUlpDiff</declname>
        </param>
        <param>
          <type>gmx_uint64_t</type>
          <declname>doubleUlpDiff</declname>
        </param>
        <briefdescription>
<para>Creates a tolerance that allows a precision-dependent relative difference in a complex computation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">magnitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Magnitude of the numbers the computation operates in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">singleUlpDiff</parametername>
</parameternamelist>
<parameterdescription>
<para>Expected accuracy of single-precision computation (in ULPs). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">doubleUlpDiff</parametername>
</parameternamelist>
<parameterdescription>
<para>Expected accuracy of double-precision computation (in ULPs).</para></parameterdescription>
</parameteritem>
</parameterlist>
This works as <ref refid="group__module__testutils_1ga5395a4d9809d729093751f7a4e5600ed" kindref="member">relativeToleranceAsUlp()</ref>, but allows setting the ULP difference separately for the different precisions. This supports cases where the double-precision calculation can acceptably has a higher ULP difference, but relaxing the single-precision tolerance would lead to an unnecessarily loose test. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="409" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="409" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1ga56f5fffbd8acc6dccade6feafc2e0f59" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgmx_1_1test_1_1FloatingPointTolerance" kindref="compound">FloatingPointTolerance</ref></type>
        <definition>static FloatingPointTolerance absoluteTolerance</definition>
        <argsstring>(double tolerance)</argsstring>
        <name>absoluteTolerance</name>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
<para>Creates a tolerance that allows a specified absolute difference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="424" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="424" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1ga5395a4d9809d729093751f7a4e5600ed" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgmx_1_1test_1_1FloatingPointTolerance" kindref="compound">FloatingPointTolerance</ref></type>
        <definition>static FloatingPointTolerance relativeToleranceAsUlp</definition>
        <argsstring>(double magnitude, gmx_uint64_t ulpDiff)</argsstring>
        <name>relativeToleranceAsUlp</name>
        <param>
          <type>double</type>
          <declname>magnitude</declname>
        </param>
        <param>
          <type>gmx_uint64_t</type>
          <declname>ulpDiff</declname>
        </param>
        <briefdescription>
<para>Creates a tolerance that allows a relative difference in a complex computation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">magnitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Magnitude of the numbers the computation operates in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ulpDiff</parametername>
</parameternamelist>
<parameterdescription>
<para>Expected accuracy of the computation (in ULPs).</para></parameterdescription>
</parameteritem>
</parameterlist>
In addition to setting the ULP tolerance as <ref refid="group__module__testutils_1gad25b9666492f99265f71a3c6da9e2a1b" kindref="member">ulpTolerance()</ref>, this sets the absolute tolerance such that values close to zero (in general, smaller than <computeroutput>magnitude</computeroutput>) do not fail the check if they differ by less than <computeroutput>ulpDiff</computeroutput> evaluated at <computeroutput>magnitude</computeroutput>. This accounts for potential loss of precision for small values, and should be used when accuracy of values much less than <computeroutput>magnitude</computeroutput> do not matter for correctness. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="447" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="447" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1gab00e5c316ac0e80559fd0e24c8a36a7e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgmx_1_1test_1_1FloatingPointTolerance" kindref="compound">FloatingPointTolerance</ref></type>
        <definition>static FloatingPointTolerance defaultRealTolerance</definition>
        <argsstring>()</argsstring>
        <name>defaultRealTolerance</name>
        <briefdescription>
<para>Returns the default tolerance for comparing <computeroutput>real</computeroutput> numbers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="457" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="457" bodyend="460"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Specifies a floating-point comparison tolerance and checks whether a difference is within the tolerance. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal /> The related functions section lists methods that can be construct methods using less parameters than the full constructor, and with more obvious semantics. These should be preferred over using the constructor directly.</para><para>Several types of tolerances are possible:<itemizedlist>
<listitem><para><emphasis>absolute tolerance</emphasis>: difference between the values must be smaller than the given tolerance for the check to pass. Setting the absolute tolerance to zero disables the absolute tolerance check.</para></listitem><listitem><para><emphasis>ULP tolerance</emphasis>: ULP (units of least precision) difference between the values must be smaller than the given tolerance for the check to pass. Setting the ULP tolerance to zero requires exact match. Setting the ULP tolerance to GMX_UINT64_MAX disables the ULP check. <computeroutput>0.0</computeroutput> and <computeroutput>-0.0</computeroutput> are treated as equal for the ULP check.</para></listitem><listitem><para><emphasis>sign check</emphasis>: if set, any values that are of different signs fail the check (note that this also applies to <computeroutput>0.0</computeroutput> and <computeroutput>-0.0</computeroutput>: a value with a different sign than the zero will fail the check).</para></listitem></itemizedlist>
</para><para>Either an absolute or a ULP tolerance must always be specified. If both are specified, then the check passes if either of the tolerances is satisfied.</para><para>Any combination of absolute and ULP tolerance can be combined with the sign check. In this case, the sign check must succeed for the check to pass, even if other tolerances are satisfied.</para><para>The tolerances can be specified separately for single and double precision comparison. Different initialization functions have different semantics on how the provided tolerance values are interpreted; check their documentation.</para><para>Methods in this class do not throw, except for <ref refid="classgmx_1_1test_1_1FloatingPointTolerance_1ae9afa5dd993326bdef3c918c44f92669" kindref="member">toString()</ref>, which may throw std::bad_alloc.</para><para><xrefsect id="todo_1_todo000084"><xreftitle>Todo</xreftitle><xrefdescription><para>The factory methods that take ULP difference could be better formulated as methods that take the acceptable number of incorrect bits and/or the number of accurate bits.</para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><ref refid="classgmx_1_1test_1_1FloatingPointDifference" kindref="compound">FloatingPointDifference</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="306" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="305" bodyend="351"/>
    <listofallmembers>
      <member refid="group__module__testutils_1ga56f5fffbd8acc6dccade6feafc2e0f59" prot="public" virt="non-virtual"><scope>gmx::test::FloatingPointTolerance</scope><name>absoluteTolerance</name></member>
      <member refid="classgmx_1_1test_1_1FloatingPointTolerance_1a31a9e396f32d551e40a34ef305f051d1" prot="private" virt="non-virtual"><scope>gmx::test::FloatingPointTolerance</scope><name>bSignMustMatch_</name></member>
      <member refid="group__module__testutils_1gab00e5c316ac0e80559fd0e24c8a36a7e" prot="public" virt="non-virtual"><scope>gmx::test::FloatingPointTolerance</scope><name>defaultRealTolerance</name></member>
      <member refid="classgmx_1_1test_1_1FloatingPointTolerance_1a0c887d9745daf5d72005f16c32d1a47f" prot="private" virt="non-virtual"><scope>gmx::test::FloatingPointTolerance</scope><name>doubleAbsoluteTolerance_</name></member>
      <member refid="classgmx_1_1test_1_1FloatingPointTolerance_1a4224f978fa7c88335b8a1c44b1da8993" prot="private" virt="non-virtual"><scope>gmx::test::FloatingPointTolerance</scope><name>doubleUlpTolerance_</name></member>
      <member refid="classgmx_1_1test_1_1FloatingPointTolerance_1a03b07e798ad5d114a8f4fda6b57f1da0" prot="public" virt="non-virtual"><scope>gmx::test::FloatingPointTolerance</scope><name>FloatingPointTolerance</name></member>
      <member refid="classgmx_1_1test_1_1FloatingPointTolerance_1aad49fc0165f03ecca9b3998d5777167a" prot="public" virt="non-virtual"><scope>gmx::test::FloatingPointTolerance</scope><name>isWithin</name></member>
      <member refid="group__module__testutils_1gad4123626be56582b11ef6accf715dbe3" prot="public" virt="non-virtual"><scope>gmx::test::FloatingPointTolerance</scope><name>relativeToleranceAsFloatingPoint</name></member>
      <member refid="group__module__testutils_1ga665e9f7521e7815f6e5eac6bb375f167" prot="public" virt="non-virtual"><scope>gmx::test::FloatingPointTolerance</scope><name>relativeToleranceAsPrecisionDependentUlp</name></member>
      <member refid="group__module__testutils_1ga5395a4d9809d729093751f7a4e5600ed" prot="public" virt="non-virtual"><scope>gmx::test::FloatingPointTolerance</scope><name>relativeToleranceAsUlp</name></member>
      <member refid="classgmx_1_1test_1_1FloatingPointTolerance_1aa9569b2e5ae75eeac15ad8757469f3b6" prot="private" virt="non-virtual"><scope>gmx::test::FloatingPointTolerance</scope><name>singleAbsoluteTolerance_</name></member>
      <member refid="classgmx_1_1test_1_1FloatingPointTolerance_1a4d18774658e7707dd360b5d8fa79b7fb" prot="private" virt="non-virtual"><scope>gmx::test::FloatingPointTolerance</scope><name>singleUlpTolerance_</name></member>
      <member refid="classgmx_1_1test_1_1FloatingPointTolerance_1ae9afa5dd993326bdef3c918c44f92669" prot="public" virt="non-virtual"><scope>gmx::test::FloatingPointTolerance</scope><name>toString</name></member>
      <member refid="group__module__testutils_1gad25b9666492f99265f71a3c6da9e2a1b" prot="public" virt="non-virtual"><scope>gmx::test::FloatingPointTolerance</scope><name>ulpTolerance</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
