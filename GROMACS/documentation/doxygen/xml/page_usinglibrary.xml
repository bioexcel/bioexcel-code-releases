<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="page_usinglibrary" kind="page">
    <compoundname>page_usinglibrary</compoundname>
    <title>Using GROMACS as a library</title>
    <detaileddescription>
<para><heading level="1">Getting started </heading>
</para><para>The GROMACS library (<computeroutput>libgromacs</computeroutput>) provides a few different alternatives for using it. These are listed here from the highest level of abstraction to the low-level functions.<itemizedlist>
<listitem><para>If you are writing a trajectory analysis tool, please see <ref refid="page_analysisframework" kindref="compound">Framework for trajectory analysis</ref>. <ref refid="page_analysistemplate" kindref="compound">Example code for writing trajectory analysis tools</ref> should contain all the ingredients to get started. If you have an existing tool written using the analysis template from 4.5 or 4.6 (using the selection engine added in 4.5), you need to do some conversion work to get this work with the new template. This is mostly straightforward, but requires some studying to understand the new framework.</para></listitem><listitem><para>If you are writing a command line tool for some other purpose, you can use the facilities provided by <ref refid="group__module__commandline" kindref="compound">Command Line Program Management (commandline)</ref>. There are a few different alternatives, depending on how much control you want to give GROMACS:<itemizedlist>
<listitem><para>For C++ code, you can implement <ref refid="classgmx_1_1ICommandLineOptionsModule" kindref="compound">gmx::ICommandLineOptionsModule</ref> and use <ref refid="namespacegmx_1a5a3bc0e66dda7e48091ad129bede7eff" kindref="member">gmx::runCommandLineModule()</ref> to execute it. This interface assumes the use of the <ref refid="classgmx_1_1Options" kindref="compound">gmx::Options</ref> mechanism for declaring command-line options (see <ref refid="group__module__options" kindref="compound">Extensible Handling of Options (options)</ref>). For a lower-level interface, <ref refid="classgmx_1_1ICommandLineModule" kindref="compound">gmx::ICommandLineModule</ref> can be used, but this requires you to implement <computeroutput>-h</computeroutput> output and command-line parsing yourself (possibly using classes that GROMACS provides).</para></listitem><listitem><para>For C code, you can use <ref refid="cmdlineinit_8cpp_1aa51379f681880e0cb70a072f7ea5abe5" kindref="member">gmx_run_cmain()</ref> to wrap an existing C main method. The only constraint on the provided main method is that it should use <ref refid="group__module__commandline_1ga5140c89919960e8e1e218a5b0d881cd5" kindref="member">parse_common_args()</ref> for argument processing. This approach should allow you to convert existing C tools written against pre-5.0 GROMACS (e.g., using the analysis template from 4.0 or earlier) to the new version.</para></listitem><listitem><para>If you want more control (for example, you do not want the default command line options added by GROMACS), you can directly initialize GROMACS using <ref refid="group__module__commandline_1ga8c376f5f94bd1a63a3a97e288c4be50d" kindref="member">gmx::initForCommandLine()</ref> before calling other GROMACS routines. This allows you to write your own handling for command line options from scratch. This is also discussed in <ref refid="group__module__commandline" kindref="compound">Command Line Program Management (commandline)</ref>.</para></listitem></itemizedlist>
</para></listitem><listitem><para>For most control, you can use <ref refid="group__module__utility_1gae00d174a8ddd5325460d74dc663711c0" kindref="member">gmx::init()</ref> to do basic initialization, create your own implementation for <ref refid="classgmx_1_1IProgramContext" kindref="compound">gmx::IProgramContext</ref>, and set that using <ref refid="group__module__utility_1ga2cf34635c815cc712b6291c2c8da2555" kindref="member">gmx::setProgramContext()</ref>. This allows you to customize how the GROMACS library shows the name of the program in messages, as well as how it locates its own data files.</para></listitem></itemizedlist>
</para><para>If these do not fit your needs, you may need to modify the GROMACS source code yourself. In particular, it is currently relatively difficult to extend the functionality of <computeroutput>mdrun</computeroutput> without modifying the source code directly. If you think that some particular API would be necessary for your work, and think that it would be easy to expose, please drop a line on the <computeroutput>gmx-developers</computeroutput> mailing list, or contribute the necessary changes on <ulink url="http://gerrit.gromacs.org/">http://gerrit.gromacs.org/</ulink>.</para><para><heading level="1">Linking against <computeroutput>libgromacs</computeroutput> </heading>
</para><para>GROMACS is a bit picky on how the headers need to be used: depending on compilation options used for GROMACS, some preprocessor defines may need to be set, the required include path may also depend on compilation options, and some extra libraries may need to be linked. You will also likely need to use the same compiler (or sufficiently similar one that uses the same standard library) that was used to compile GROMACS.</para><para>To manage this more easily, GROMACS provides two mechanisms for getting the correct flags for compilation and linking against the GROMACS library:<itemizedlist>
<listitem><para><computeroutput>pkg-config</computeroutput>: GROMACS installs <computeroutput>libgromacs.pc</computeroutput> file (suffixed with the library suffix) for use with <computeroutput>pkg-config</computeroutput> if that is present on the system. Sourcing <computeroutput>GMXRC</computeroutput> adjusts the <computeroutput>pkg-config</computeroutput> search path such that these files are found automatically. See <computeroutput>Makefile.pkg</computeroutput> installed with the analysis template for one example of how to use it (to use it with a differently suffixed GROMACS, just replace <computeroutput>libgromacs</computeroutput> with <computeroutput>libgromacs</computeroutput><emphasis>_suffix</emphasis> in the <computeroutput>pkg-config</computeroutput> calls).</para></listitem><listitem><para>CMake package configuration files and a find module that allow <computeroutput>find_package(GROMACS)</computeroutput> to work. See below for details about how to use this in CMake. Sourcing <computeroutput>GMXRC</computeroutput> sets an environment variable that allows CMake to find the configuration file automatically. See <computeroutput>CMakeLists.txt</computeroutput> installed with the analysis template for one example of how to use it.</para></listitem></itemizedlist>
</para><para>These mechanisms are currently provided on a best-effort basis, but are not routinely tested on a wide range of configurations. Please report any issues with details of how GROMACS was built so that the mechanism can be improved. Known issues:<itemizedlist>
<listitem><para><computeroutput>pkg-config</computeroutput> files are not relocatable, i.e., they hard-code the installation prefix as an absolute path.</para></listitem><listitem><para>Installing both static and shared libraries with the same suffix to the same installation prefix is guaranteed to work only if both are built with exactly the same configuration options (except for <computeroutput>BUILD_SHARED_LIBS</computeroutput>) from exactly the same version. There are several files that are shared between the installations in such a case, and the latter installation will overwrite those from the former.</para></listitem><listitem><para>Further, if both static and shared libraries have been installed in the past to a prefix, then future installations to the same prefix should also install both static and shared libraries. Otherwise, some obsolete CMake package configuration files will be left behind which can lead to finding the old library. Alternatively, you can delete <computeroutput>share/cmake/</computeroutput> from the installation directory before doing the install.</para></listitem><listitem><para>If a mechanism other than the CMake-generated <computeroutput>install</computeroutput> target is used to install GROMACS over an existing installation, and the build type (e.g., Release vs. Debug) does not match what was previously installed, some obsolete CMake import target definition files are left behind in <computeroutput>share/cmake/</computeroutput>, and may cause failures whey trying to use the package configuration files.</para></listitem><listitem><para>If GROMACS is built with <computeroutput>GMX_BUILD_OWN_FFTW=ON</computeroutput>, the CMake-generated import definitions for <computeroutput>libgromacs</computeroutput> reference a <computeroutput>gmxfftw</computeroutput> target that was used in the build to reference the <computeroutput>fftw</computeroutput> library. As this library only exists in the GROMACS build tree, and the CMake machinery does not write any import definitions for it anywhere, linking will fail with errors about not being able to find a <computeroutput>gmxfftw</computeroutput> library. So the CMake package configuration files can only be used with <computeroutput>GMX_BUILD_OWN_FFTW=OFF</computeroutput>.</para></listitem></itemizedlist>
</para><para><heading level="2">CMake <computeroutput>find_package(GROMACS)</computeroutput> details </heading>
</para><para>The CMake machinery to support <computeroutput>find_package(GROMACS)</computeroutput> has two parts: a <computeroutput>FindGROMACS.cmake</computeroutput> find module (found in <computeroutput>share/gromacs/template/cmake/</computeroutput> in the installation and <computeroutput>share/template/cmake/</computeroutput> in the source tree), and actual package configuration files (<computeroutput>gromacs-config.cmake</computeroutput> and supporting files installed to <computeroutput>share/cmake/</computeroutput> from input files in <computeroutput>src/gromacs/</computeroutput>).</para><para><computeroutput>FindGROMACS.cmake</computeroutput> is a simple wrapper over the package configuration files, providing a somewhat more convenient interface to the machinery that supports multiple suffixed GROMACS installations in the same installation prefix (see <computeroutput>GROMACS_SUFFIX</computeroutput> variable below). This file is intended to be version-agnostic and remain both forward- and backward-compatible even between major GROMACS releases. All version-specific information and the actual details about the compilation and linking settings is in the package configuration files. Build systems willing to utilize <computeroutput>FindGROMACS.cmake</computeroutput> can create a local copy of it and use it like it is used in the installed <computeroutput>share/gromacs/template/CMakeLists.txt</computeroutput>. The package configuration files can also be used directly if desired, bypassing <computeroutput>FindGROMACS.cmake</computeroutput>.</para><para>Input options for influencing what to find:</para><para><variablelist>
<varlistentry><term><computeroutput>GROMACS_SUFFIX</computeroutput> (only for <computeroutput>FindGROMACS.cmake</computeroutput>) </term></varlistentry>
<listitem><para>This CMake variable can be set before calling <computeroutput>find_package(GROMACS)</computeroutput> to specify the GROMACS suffix to search for. If not set, an unsuffixed version is searched for. If using the package configuration files directly, the suffix must be set using <computeroutput>find_package(GROMACS NAMES gromacs&lt;suffix&gt;)</computeroutput>. </para></listitem>
<varlistentry><term><computeroutput>GROMACS_PREFER_STATIC</computeroutput> </term></varlistentry>
<listitem><para>This CMake variable can be set before calling <computeroutput>find_package(GROMACS)</computeroutput> to specify whether static or shared libraries are preferred if both are available. It does not affect which GROMACS installation is chosen, but if that installation has both static and shared libraries available (installed from two different builds with the same suffix), then this chooses the library to be returned in <computeroutput>GROMACS_LIBRARIES</computeroutput>. </para></listitem>
<varlistentry><term><computeroutput>GROMACS_DIR</computeroutput> </term></varlistentry>
<listitem><para>This CMake (cache) variable is a standard mechanism provided by <computeroutput>find_package</computeroutput>, and can be used to specify a hint where to search for GROMACS. Also <computeroutput>CMAKE_PREFIX_PATH</computeroutput> can be used for this purpose; see CMake documentation for <computeroutput>find_package</computeroutput> for more details. <computeroutput>GROMACS_DIR</computeroutput> can also be set as an environment variable, and this is done by <computeroutput>GMXRC</computeroutput>. </para></listitem>
</variablelist>
</para><para>Output variables that specify how the found <computeroutput>libgromacs</computeroutput> and header should be used:</para><para><variablelist>
<varlistentry><term><computeroutput>GROMACS_INCLUDE_DIRS</computeroutput> </term></varlistentry>
<listitem><para>List of include directories necessary to compile against the GROMACS headers. Currently, this includes the path to GROMACS headers. </para></listitem>
<varlistentry><term><computeroutput>GROMACS_LIBRARIES</computeroutput> </term></varlistentry>
<listitem><para>List of libraries to link with to link against GROMACS. Under the hood, this uses imported CMake targets to represent <computeroutput>libgromacs</computeroutput>. </para></listitem>
<varlistentry><term><computeroutput>GROMACS_DEFINITIONS</computeroutput> </term></varlistentry>
<listitem><para>List of compile definitions (with <computeroutput>-D</computeroutput> in front) that are required to compile the GROMACS headers. </para></listitem>
<varlistentry><term><computeroutput>GROMACS_IS_DOUBLE</computeroutput> </term></varlistentry>
<listitem><para>Whether the found GROMACS was compiled in double precision. </para></listitem>
<varlistentry><term><computeroutput>GROMACS_CXX_FLAGS</computeroutput> </term></varlistentry>
<listitem><para>Required compiler flags, e.g. for compiling in C++11 mode, or selecting the standard library flavour. </para></listitem>
</variablelist>
</para><para>Declared macros/functions that can be used for checking for correctness of some settings:</para><para><variablelist>
<varlistentry><term><computeroutput>gromacs_check_double(GMX_DOUBLE)</computeroutput> </term></varlistentry>
<listitem><para>Checks that the found GROMACS is in the expected precision. The parameter <computeroutput>GMX_DOUBLE</computeroutput> should be the name of a cache variable that specified whether double-precision was requested. </para></listitem>
<varlistentry><term><computeroutput>gromacs_check_compiler(LANG)</computeroutput></term></varlistentry>
<listitem></listitem>
<varlistentry><term></term></varlistentry>
<listitem><para>Checks that the found GROMACS was compiled with the same compiler that is used by the current CMake system. Currently only <computeroutput>LANG=CXX</computeroutput> is supported. </para></listitem>
</variablelist>
</para><para><heading level="1">Notes on GROMACS API </heading>
</para><para>The headers for the public GROMACS API are installed in <computeroutput>include/gromacs/</computeroutput> under the installation directory. The layout reflects the source code layout under the <computeroutput>src/gromacs/</computeroutput> directory (see <ulink url="../../dev-manual/overview.html#dev-doc-layout">Source code layout</ulink>). The headers directly under <computeroutput>include/gromacs/</computeroutput> do not contain any declarations, but instead include a collection of headers from subdirectories. You should prefer to include these convenience headers instead of individual headers from the subdirectories, since they are much more stable. The individual headers in the subdirectories can be renamed or moved, but the goal is to only rarely change the name of these top-level headers.</para><para>Pre-5.0 versions of GROMACS installed (nearly) all headers directly under <computeroutput>include/gromacs/</computeroutput>. Most of these headers still exist, but are no longer installed. The long-term goal is to reintroduce those parts of the API that make sense, but unfortunately this can take a long time. Thus, you should not expect much stability from the API in these headers.</para><para>For headers under other subdirectories, some effort has been put to design the API for stability. However, with limited development resources, and the focus of GROMACS being in high performance simulations, all the APIs are subject to change without notice. With each new release (with possible exception of patch releases), you should expect incompatible API changes.</para><para>The header version.h (installed as <computeroutput>gromacs/version.h</computeroutput>) provides defines that calling code can use to check the exact (released) version of GROMACS that installed the headers.</para><para>This Doxygen documentation only covers part of the API. </para>    </detaileddescription>
  </compounddef>
</doxygen>
