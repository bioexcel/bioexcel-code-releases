<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1test_1_1AnalysisDataTestFixture" kind="class" prot="public">
    <compoundname>gmx::test::AnalysisDataTestFixture</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
    <includes local="no">gromacs/analysisdata/tests/datatest.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classgmx_1_1test_1_1AnalysisDataTestFixture_1a68e3631fcc7c250f1aa1aa5c1406c92d" prot="protected" static="no" mutable="no">
        <type><ref refid="classgmx_1_1test_1_1TestReferenceData" kindref="compound">gmx::test::TestReferenceData</ref></type>
        <definition>gmx::test::TestReferenceData gmx::test::AnalysisDataTestFixture::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
<para>Reference data object used for the reference checker modules. </para>        </briefdescription>
        <detaileddescription>
<para>Tests can use the data object also for their own purposes if needed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.h" line="463" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.h" bodystart="463" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1test_1_1AnalysisDataTestFixture_1a2527f7aa14600fa641232f6c900a29dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::test::AnalysisDataTestFixture::AnalysisDataTestFixture</definition>
        <argsstring>()</argsstring>
        <name>AnalysisDataTestFixture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.h" line="299" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.cpp" bodystart="191" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1AnalysisDataTestFixture_1af4a3b1a8a5331a4e0c70e0951041736b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::AnalysisDataTestFixture::addReferenceCheckerModule</definition>
        <argsstring>(const char *id, AbstractAnalysisData *source)</argsstring>
        <name>addReferenceCheckerModule</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1AbstractAnalysisData" kindref="compound">AbstractAnalysisData</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Adds a mock module that verifies output against reference data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier for reference data compound to use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Data object to verify.</para></parameterdescription>
</parameteritem>
</parameterlist>
Creates a reference checker module using a compound checker with id <computeroutput>id</computeroutput> at the root level of <computeroutput>data_</computeroutput>.</para><para>See the static overload for other details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.h" line="454" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.cpp" bodystart="312" bodyend="317"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgmx_1_1test_1_1AnalysisDataTestFixture_1a0cb8a329321fa6694d70cb2366b54ba6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::AnalysisDataTestFixture::setupDataObject</definition>
        <argsstring>(const AnalysisDataTestInput &amp;input, AnalysisData *data)</argsstring>
        <name>setupDataObject</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1AnalysisData" kindref="compound">AnalysisData</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Initializes an <ref refid="classgmx_1_1AnalysisData" kindref="compound">AnalysisData</ref> object from input data. </para>        </briefdescription>
        <detaileddescription>
<para>Sets the column count and other properties based on the input data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.h" line="306" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.cpp" bodystart="196" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1AnalysisDataTestFixture_1ab07eb7b9cb4b5e0fb8fc85c196223f06" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::AnalysisDataTestFixture::presentAllData</definition>
        <argsstring>(const AnalysisDataTestInput &amp;input, AnalysisData *data)</argsstring>
        <name>presentAllData</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1AnalysisData" kindref="compound">AnalysisData</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Adds all data from <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref> into an <ref refid="classgmx_1_1AnalysisData" kindref="compound">AnalysisData</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.h" line="312" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.cpp" bodystart="208" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1AnalysisDataTestFixture_1a89e3f46a66165f59608fb91cdec5257c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::AnalysisDataTestFixture::presentDataFrame</definition>
        <argsstring>(const AnalysisDataTestInput &amp;input, int row, AnalysisDataHandle handle)</argsstring>
        <name>presentDataFrame</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1AnalysisDataHandle" kindref="compound">AnalysisDataHandle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Adds a single frame from <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref> into an <ref refid="classgmx_1_1AnalysisData" kindref="compound">AnalysisData</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.h" line="317" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.cpp" bodystart="222" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1AnalysisDataTestFixture_1ab6d21da208c94e97df257919cc89b3e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ArrayData</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::test::AnalysisDataTestFixture::setupArrayData</definition>
        <argsstring>(const AnalysisDataTestInput &amp;input, ArrayData *data)</argsstring>
        <name>setupArrayData</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>ArrayData *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Initializes an array data object from <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ArrayData</parametername>
</parameternamelist>
<parameterdescription>
<para>Class derived from <ref refid="classgmx_1_1AbstractAnalysisArrayData" kindref="compound">AbstractAnalysisArrayData</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
The ArrayData class should expose the setter methods (setColumnCount(), setRowCount(), allocateValues(), setValue()) publicly or declare the fixture class as a friend. The X axis in <computeroutput>data</computeroutput> must be configured to match <computeroutput>input</computeroutput> before calling this method.</para><para>Does not call <ref refid="classgmx_1_1AbstractAnalysisArrayData_1a31bf12b51cba167036e9d3baf9676e80" kindref="member">AbstractAnalysisArrayData::valuesReady()</ref>. The test must ensure that this method gets called, otherwise the mock modules never get called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.h" line="335" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.h" bodystart="468" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1AnalysisDataTestFixture_1a2fc3918b673a7a4a9d0a833e5810aa0a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::AnalysisDataTestFixture::addStaticCheckerModule</definition>
        <argsstring>(const AnalysisDataTestInput &amp;data, AbstractAnalysisData *source)</argsstring>
        <name>addStaticCheckerModule</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1AbstractAnalysisData" kindref="compound">AbstractAnalysisData</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Adds a mock module that verifies output against <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to compare against. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Data object to verify.</para></parameterdescription>
</parameteritem>
</parameterlist>
Creates a mock module that verifies that the <ref refid="classgmx_1_1IAnalysisDataModule" kindref="compound">IAnalysisDataModule</ref> methods are called correctly by <computeroutput>source</computeroutput>. Parameters for the calls are verified against <computeroutput>data</computeroutput>. Adds the created module to <computeroutput>source</computeroutput> using <computeroutput>data-&gt;addModule()</computeroutput>. Any exceptions from the called functions should be caught by the caller.</para><para><simplesect kind="see"><para><ref refid="classgmx_1_1AbstractAnalysisData_1ada778191d76b2826b57e7b30ecd7a296" kindref="member">AbstractAnalysisData::addModule()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.h" line="354" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.cpp" bodystart="254" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1AnalysisDataTestFixture_1a8135ee6ac884b6288799ef887b0dafcf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::AnalysisDataTestFixture::addStaticParallelCheckerModule</definition>
        <argsstring>(const AnalysisDataTestInput &amp;data, AbstractAnalysisData *source)</argsstring>
        <name>addStaticParallelCheckerModule</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1AbstractAnalysisData" kindref="compound">AbstractAnalysisData</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Adds a mock module that verifies parallel output against <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to compare against. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Data object to verify.</para></parameterdescription>
</parameteritem>
</parameterlist>
Creates a parallel mock module that verifies that the <ref refid="classgmx_1_1IAnalysisDataModule" kindref="compound">IAnalysisDataModule</ref> methods are called correctly by <computeroutput>source</computeroutput>. Parameters for the calls are verified against <computeroutput>data</computeroutput>. Adds the created module to <computeroutput>source</computeroutput> using <computeroutput>data-&gt;addModule()</computeroutput>. Any exceptions from the called functions should be caught by the caller.</para><para>Differs from <ref refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1a2fc3918b673a7a4a9d0a833e5810aa0a" kindref="member">addStaticCheckerModule()</ref> in that the created mock module reports that it accepts parallel input data, and accepts and verifies notification calls following the parallel pattern.</para><para><simplesect kind="see"><para><ref refid="classgmx_1_1AbstractAnalysisData_1ada778191d76b2826b57e7b30ecd7a296" kindref="member">AbstractAnalysisData::addModule()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.h" line="376" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.cpp" bodystart="264" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1AnalysisDataTestFixture_1a6ae8baf736bd899abb55b907320e8965" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::AnalysisDataTestFixture::addStaticColumnCheckerModule</definition>
        <argsstring>(const AnalysisDataTestInput &amp;data, int firstcol, int n, AbstractAnalysisData *source)</argsstring>
        <name>addStaticColumnCheckerModule</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>firstcol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1AbstractAnalysisData" kindref="compound">AbstractAnalysisData</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Adds a column mock module that verifies output against <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to compare against. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstcol</parametername>
</parameternamelist>
<parameterdescription>
<para>First column to check. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns to check. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Data object to verify.</para></parameterdescription>
</parameteritem>
</parameterlist>
Creates a mock module that verifies that the <ref refid="classgmx_1_1IAnalysisDataModule" kindref="compound">IAnalysisDataModule</ref> methods are called correctly by <computeroutput>source</computeroutput>. Parameters for the calls are verified against <computeroutput>data</computeroutput>. Adds the created module to <computeroutput>source</computeroutput> using <computeroutput>data-&gt;addColumnModule()</computeroutput>. Any exceptions from the called functions should be caught by the caller.</para><para><simplesect kind="see"><para><ref refid="classgmx_1_1AbstractAnalysisData_1a8e6f762df563d577f8a1d34a35273952" kindref="member">AbstractAnalysisData::addColumnModule()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.h" line="398" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.cpp" bodystart="275" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1AnalysisDataTestFixture_1a12fde98e6a1b66c5173e149be5181092" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::AnalysisDataTestFixture::addStaticStorageCheckerModule</definition>
        <argsstring>(const AnalysisDataTestInput &amp;data, int storageCount, AbstractAnalysisData *source)</argsstring>
        <name>addStaticStorageCheckerModule</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>storageCount</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1AbstractAnalysisData" kindref="compound">AbstractAnalysisData</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Adds a mock module that verifies output and storage against <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to compare against. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">storageCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of previous frames to check (-1 = all). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Data object to verify.</para></parameterdescription>
</parameteritem>
</parameterlist>
Works like <ref refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1a2fc3918b673a7a4a9d0a833e5810aa0a" kindref="member">addStaticCheckerModule()</ref>, except that in addition, for each frame, the mock module also checks that previous frames can be accessed using <ref refid="classgmx_1_1AbstractAnalysisData_1ac97ab78a57e02aad95c9e679ef8b2798" kindref="member">AbstractAnalysisData::getDataFrame()</ref>. In the <ref refid="classgmx_1_1IAnalysisDataModule_1ac77236904b9f2871c38a73e2d150d787" kindref="member">IAnalysisDataModule::dataStarted()</ref> callback, the mock module calls <ref refid="classgmx_1_1AbstractAnalysisData_1a99ba2f4072c75c8e56d1e377cb6b5f8c" kindref="member">AbstractAnalysisData::requestStorage()</ref> with <computeroutput>storageCount</computeroutput> as the parameter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.h" line="417" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.cpp" bodystart="286" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1AnalysisDataTestFixture_1ad5dee01e61dc4e717056b6ef01da0161" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::AnalysisDataTestFixture::addReferenceCheckerModule</definition>
        <argsstring>(const TestReferenceChecker &amp;checker, const char *id, AbstractAnalysisData *source, const FloatingPointTolerance &amp;tolerance)</argsstring>
        <name>addReferenceCheckerModule</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1TestReferenceChecker" kindref="compound">TestReferenceChecker</ref> &amp;</type>
          <declname>checker</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1AbstractAnalysisData" kindref="compound">AbstractAnalysisData</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1FloatingPointTolerance" kindref="compound">FloatingPointTolerance</ref> &amp;</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
<para>Adds a mock module that verifies output against reference data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">checker</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference data checker to use for comparison. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier for reference data compound to use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Data object to verify. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance to use for comparison.</para></parameterdescription>
</parameteritem>
</parameterlist>
Creates a mock module that verifies that the <ref refid="classgmx_1_1IAnalysisDataModule" kindref="compound">IAnalysisDataModule</ref> methods are called correctly by <computeroutput>source</computeroutput>. Parameters for the calls are verified against reference data using a child compound <computeroutput>id</computeroutput> of <computeroutput>checker</computeroutput>. Adds the created module to <computeroutput>source</computeroutput> using <computeroutput>data-&gt;addModule()</computeroutput>. Any exceptions from the called functions should be caught by the caller.</para><para><simplesect kind="see"><para><ref refid="classgmx_1_1test_1_1TestReferenceData" kindref="compound">TestReferenceData</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.h" line="438" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.cpp" bodystart="297" bodyend="308"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Test fixture for <ref refid="classgmx_1_1AbstractAnalysisData" kindref="compound">AbstractAnalysisData</ref> testing. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal /> This test fixture is designed to help writing tests for objects that derive from the <ref refid="classgmx_1_1AbstractAnalysisData" kindref="compound">AbstractAnalysisData</ref> class. Typical flow in such tests is that first the test creates the required data objects, then call static methods in this class to add mock modules (using <ref refid="classgmx_1_1AbstractAnalysisData_1ada778191d76b2826b57e7b30ecd7a296" kindref="member">AbstractAnalysisData::addModule()</ref>) to the data objects to check that they produce the correct data, and then invokes methods in the data object to produce the data to be checked. Static methods are also provided for pushing data from an <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref> object to some generic types derived from <ref refid="classgmx_1_1AbstractAnalysisData" kindref="compound">AbstractAnalysisData</ref>.</para><para>Methods <ref refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1a2fc3918b673a7a4a9d0a833e5810aa0a" kindref="member">addStaticCheckerModule()</ref>, <ref refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1a6ae8baf736bd899abb55b907320e8965" kindref="member">addStaticColumnCheckerModule()</ref> and <ref refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1a12fde98e6a1b66c5173e149be5181092" kindref="member">addStaticStorageCheckerModule()</ref> create and add mock modules that check the data against a given <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref> instance.</para><para>Method <ref refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1ad5dee01e61dc4e717056b6ef01da0161" kindref="member">addReferenceCheckerModule()</ref> creates and adds a mock module that checks the output against reference data produced by a previous test execution (see <ref refid="classgmx_1_1test_1_1TestReferenceData" kindref="compound">TestReferenceData</ref>). Two versions are provided, a static method to be used with any <ref refid="classgmx_1_1test_1_1TestReferenceChecker" kindref="compound">TestReferenceChecker</ref>, and a non-static method that uses the protected <computeroutput>data_</computeroutput> member.</para><para><ref refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1ab07eb7b9cb4b5e0fb8fc85c196223f06" kindref="member">presentAllData()</ref> and <ref refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1a89e3f46a66165f59608fb91cdec5257c" kindref="member">presentDataFrame()</ref> are provided to push data from an <ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref> into an <ref refid="classgmx_1_1AnalysisData" kindref="compound">AnalysisData</ref> object. In typical tests, most checks are done during these methods, by the added mock modules. <ref refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1ab6d21da208c94e97df257919cc89b3e1" kindref="member">setupArrayData()</ref> performs the same function for classes derived from <ref refid="classgmx_1_1AbstractAnalysisArrayData" kindref="compound">AbstractAnalysisArrayData</ref>. In that case, the test should separately ensure that <ref refid="classgmx_1_1AbstractAnalysisArrayData_1a31bf12b51cba167036e9d3baf9676e80" kindref="member">AbstractAnalysisArrayData::valuesReady()</ref> gets called.</para><para><xrefsect id="todo_1_todo000011"><xreftitle>Todo</xreftitle><xrefdescription><para>Support for arbitrary AnalysisDataValues (errors and missing values).</para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><ref refid="classgmx_1_1test_1_1AnalysisDataTestInput" kindref="compound">AnalysisDataTestInput</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="2120">
        <label>gmx::test::AnalysisDataTestFixture</label>
        <link refid="classgmx_1_1test_1_1AnalysisDataTestFixture"/>
        <childnode refid="2121" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2121">
        <label>Test</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2122">
        <label>gmx::test::AnalysisDataTestFixture</label>
        <link refid="classgmx_1_1test_1_1AnalysisDataTestFixture"/>
        <childnode refid="2123" relation="public-inheritance">
        </childnode>
        <childnode refid="2124" relation="usage">
          <edgelabel>data_</edgelabel>
        </childnode>
      </node>
      <node id="2123">
        <label>Test</label>
      </node>
      <node id="2124">
        <label>gmx::test::TestReferenceData</label>
        <link refid="classgmx_1_1test_1_1TestReferenceData"/>
      </node>
    </collaborationgraph>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.h" line="297" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/tests/datatest.h" bodystart="296" bodyend="464"/>
    <listofallmembers>
      <member refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1ad5dee01e61dc4e717056b6ef01da0161" prot="public" virt="non-virtual"><scope>gmx::test::AnalysisDataTestFixture</scope><name>addReferenceCheckerModule</name></member>
      <member refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1af4a3b1a8a5331a4e0c70e0951041736b" prot="public" virt="non-virtual"><scope>gmx::test::AnalysisDataTestFixture</scope><name>addReferenceCheckerModule</name></member>
      <member refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1a2fc3918b673a7a4a9d0a833e5810aa0a" prot="public" virt="non-virtual"><scope>gmx::test::AnalysisDataTestFixture</scope><name>addStaticCheckerModule</name></member>
      <member refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1a6ae8baf736bd899abb55b907320e8965" prot="public" virt="non-virtual"><scope>gmx::test::AnalysisDataTestFixture</scope><name>addStaticColumnCheckerModule</name></member>
      <member refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1a8135ee6ac884b6288799ef887b0dafcf" prot="public" virt="non-virtual"><scope>gmx::test::AnalysisDataTestFixture</scope><name>addStaticParallelCheckerModule</name></member>
      <member refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1a12fde98e6a1b66c5173e149be5181092" prot="public" virt="non-virtual"><scope>gmx::test::AnalysisDataTestFixture</scope><name>addStaticStorageCheckerModule</name></member>
      <member refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1a2527f7aa14600fa641232f6c900a29dc" prot="public" virt="non-virtual"><scope>gmx::test::AnalysisDataTestFixture</scope><name>AnalysisDataTestFixture</name></member>
      <member refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1a68e3631fcc7c250f1aa1aa5c1406c92d" prot="protected" virt="non-virtual"><scope>gmx::test::AnalysisDataTestFixture</scope><name>data_</name></member>
      <member refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1ab07eb7b9cb4b5e0fb8fc85c196223f06" prot="public" virt="non-virtual"><scope>gmx::test::AnalysisDataTestFixture</scope><name>presentAllData</name></member>
      <member refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1a89e3f46a66165f59608fb91cdec5257c" prot="public" virt="non-virtual"><scope>gmx::test::AnalysisDataTestFixture</scope><name>presentDataFrame</name></member>
      <member refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1ab6d21da208c94e97df257919cc89b3e1" prot="public" virt="non-virtual"><scope>gmx::test::AnalysisDataTestFixture</scope><name>setupArrayData</name></member>
      <member refid="classgmx_1_1test_1_1AnalysisDataTestFixture_1a0cb8a329321fa6694d70cb2366b54ba6" prot="public" virt="non-virtual"><scope>gmx::test::AnalysisDataTestFixture</scope><name>setupDataObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
