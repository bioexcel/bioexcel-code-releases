<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1test_1_1TrajectoryFrameReader" kind="class" prot="public">
    <compoundname>gmx::test::TrajectoryFrameReader</compoundname>
    <includes local="no">programs/mdrun/tests/trajectoryreader.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgmx_1_1test_1_1TrajectoryFrameReader_1a4ce9cb1f1b20be003b7fdc03ad2cb31d" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string gmx::test::TrajectoryFrameReader::filename_</definition>
        <argsstring></argsstring>
        <name>filename_</name>
        <briefdescription>
<para>Name of trajectory file to open and read. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" line="122" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1test_1_1TrajectoryFrameReader_1a0b8502d76164e170e2aaf5606be0d83d" prot="private" static="no" mutable="no">
        <type><ref refid="namespacegmx_1_1test_1aee78957ead68e1e7531f70e3b39f56d1" kindref="member">oenv_ptr</ref></type>
        <definition>oenv_ptr gmx::test::TrajectoryFrameReader::oenvGuard_</definition>
        <argsstring></argsstring>
        <name>oenvGuard_</name>
        <briefdescription>
<para>Owning handle of output environment object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" line="124" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1test_1_1TrajectoryFrameReader_1aec9d1898dd7d122cf357aec42924c024" prot="private" static="no" mutable="no">
        <type><ref refid="namespacegmx_1_1test_1aa9f31f7ed112002acf9e3730c126726f" kindref="member">trxstatus_file_ptr</ref></type>
        <definition>trxstatus_file_ptr gmx::test::TrajectoryFrameReader::trajectoryFileGuard_</definition>
        <argsstring></argsstring>
        <name>trajectoryFileGuard_</name>
        <briefdescription>
<para>Owning handle of an open trajectory file ready to read frames. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" line="126" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1test_1_1TrajectoryFrameReader_1ab5238c97a0e5c7cdf6b9043d85e0ba44" prot="private" static="no" mutable="no">
        <type><ref refid="namespacegmx_1_1test_1affa665569eba3c20c9b22ec90958a022" kindref="member">trxframe_ptr</ref></type>
        <definition>trxframe_ptr gmx::test::TrajectoryFrameReader::trxframeGuard_</definition>
        <argsstring></argsstring>
        <name>trxframeGuard_</name>
        <briefdescription>
<para>Owning handle of contents of trajectory file frame after reading. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" line="128" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1test_1_1TrajectoryFrameReader_1a24cd011c118d456669183cd0bb7d7117" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gmx::test::TrajectoryFrameReader::haveReadFirstFrame_</definition>
        <argsstring></argsstring>
        <name>haveReadFirstFrame_</name>
        <briefdescription>
<para>Whether the first frame has been read. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" line="130" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1test_1_1TrajectoryFrameReader_1a8ea05c3570a0ef95426fdc2815be2598" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gmx::test::TrajectoryFrameReader::haveProbedForNextFrame_</definition>
        <argsstring></argsstring>
        <name>haveProbedForNextFrame_</name>
        <briefdescription>
<para>Whether the API has been used properly (ie. probe before reading). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" line="132" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1test_1_1TrajectoryFrameReader_1a5e060a869ac8ea8d8ad4a48e73e7997a" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gmx::test::TrajectoryFrameReader::nextFrameExists_</definition>
        <argsstring></argsstring>
        <name>nextFrameExists_</name>
        <briefdescription>
<para>Whether there has been a probe that found a next frame. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" line="134" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1test_1_1TrajectoryFrameReader_1a63117177e0d578d9a15c12db7bb9f680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::test::TrajectoryFrameReader::readNextFrame</definition>
        <argsstring>()</argsstring>
        <name>readNextFrame</name>
        <briefdescription>
<para>Attempt to read the next frame from the trajectory file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether a frame was available to read.</para></simplesect>
This call wraps the read_first_frame()/read_next_frame() API, which does the file opening as a side effect of reading the first frame.</para><para>If true is returned, then <ref refid="classgmx_1_1test_1_1TrajectoryFrameReader_1aae44f28460581714eb910e5e7d8d14b3" kindref="member">frame()</ref> should be called to get access to the data. If false is returned, then no further data exists and no further call to <ref refid="classgmx_1_1test_1_1TrajectoryFrameReader_1a63117177e0d578d9a15c12db7bb9f680" kindref="member">readNextFrame()</ref> or <ref refid="classgmx_1_1test_1_1TrajectoryFrameReader_1aae44f28460581714eb910e5e7d8d14b3" kindref="member">frame()</ref> should occur.</para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1FileIOError" kindref="compound">FileIOError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon reading the first frame, if the trajectory file cannot be opened </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1APIError" kindref="compound">APIError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if an earlier probe has not been properly handled (by calling <ref refid="classgmx_1_1test_1_1TrajectoryFrameReader_1aae44f28460581714eb910e5e7d8d14b3" kindref="member">frame()</ref>, or stopping trying to read from the file). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" line="104" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.cpp" bodystart="102" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TrajectoryFrameReader_1aae44f28460581714eb910e5e7d8d14b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1test_1_1TrajectoryFrame" kindref="compound">TrajectoryFrame</ref></type>
        <definition>TrajectoryFrame gmx::test::TrajectoryFrameReader::frame</definition>
        <argsstring>()</argsstring>
        <name>frame</name>
        <briefdescription>
<para>Return the next frame from the trajectory file. </para>        </briefdescription>
        <detaileddescription>
<para>If the next frame has not been probed for, then probe for it. If no next frame exists, then throw <ref refid="classgmx_1_1APIError" kindref="compound">APIError</ref>, because user code should have called <ref refid="classgmx_1_1test_1_1TrajectoryFrameReader_1a63117177e0d578d9a15c12db7bb9f680" kindref="member">readNextFrame()</ref> itself if this is possible. (This permits user code to avoid making calls to <ref refid="classgmx_1_1test_1_1TrajectoryFrameReader_1a63117177e0d578d9a15c12db7bb9f680" kindref="member">readNextFrame()</ref> in a case where it already knows that the frame exists.)</para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1APIError" kindref="compound">APIError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if no next frame exists, or if it lacks either time or step number. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" line="115" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.cpp" bodystart="143" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TrajectoryFrameReader_1a705793c6cd9d109f0277b0918118f480" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::test::TrajectoryFrameReader::TrajectoryFrameReader</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>TrajectoryFrameReader</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of trajectory file to open and read. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" line="119" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.cpp" bodystart="88" bodyend="99"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgmx_1_1test_1_1TrajectoryFrameReader_1a42ff8584e8025b46450386864f2279c7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1test_1_1TrajectoryFrameReader" kindref="compound">TrajectoryFrameReader</ref> &amp;</type>
        <definition>TrajectoryFrameReader&amp; gmx::test::TrajectoryFrameReader::operator=</definition>
        <argsstring>(const TrajectoryFrameReader &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1TrajectoryFrameReader" kindref="compound">TrajectoryFrameReader</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TrajectoryFrameReader_1aa350d34d19b1f3bedbc16298f87d42d6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::test::TrajectoryFrameReader::TrajectoryFrameReader</definition>
        <argsstring>(const TrajectoryFrameReader &amp;)=delete</argsstring>
        <name>TrajectoryFrameReader</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1TrajectoryFrameReader" kindref="compound">TrajectoryFrameReader</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" line="137" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Manages returning a <ref refid="structt__trxframe" kindref="compound">t_trxframe</ref> whose contents were read from successive frames of an trajectory file. </para>    </briefdescription>
    <detaileddescription>
<internal></internal>
    </detaileddescription>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" line="85" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/programs/mdrun/tests/trajectoryreader.h" bodystart="84" bodyend="138"/>
    <listofallmembers>
      <member refid="classgmx_1_1test_1_1TrajectoryFrameReader_1a4ce9cb1f1b20be003b7fdc03ad2cb31d" prot="private" virt="non-virtual"><scope>gmx::test::TrajectoryFrameReader</scope><name>filename_</name></member>
      <member refid="classgmx_1_1test_1_1TrajectoryFrameReader_1aae44f28460581714eb910e5e7d8d14b3" prot="public" virt="non-virtual"><scope>gmx::test::TrajectoryFrameReader</scope><name>frame</name></member>
      <member refid="classgmx_1_1test_1_1TrajectoryFrameReader_1a8ea05c3570a0ef95426fdc2815be2598" prot="private" virt="non-virtual"><scope>gmx::test::TrajectoryFrameReader</scope><name>haveProbedForNextFrame_</name></member>
      <member refid="classgmx_1_1test_1_1TrajectoryFrameReader_1a24cd011c118d456669183cd0bb7d7117" prot="private" virt="non-virtual"><scope>gmx::test::TrajectoryFrameReader</scope><name>haveReadFirstFrame_</name></member>
      <member refid="classgmx_1_1test_1_1TrajectoryFrameReader_1a5e060a869ac8ea8d8ad4a48e73e7997a" prot="private" virt="non-virtual"><scope>gmx::test::TrajectoryFrameReader</scope><name>nextFrameExists_</name></member>
      <member refid="classgmx_1_1test_1_1TrajectoryFrameReader_1a0b8502d76164e170e2aaf5606be0d83d" prot="private" virt="non-virtual"><scope>gmx::test::TrajectoryFrameReader</scope><name>oenvGuard_</name></member>
      <member refid="classgmx_1_1test_1_1TrajectoryFrameReader_1a42ff8584e8025b46450386864f2279c7" prot="private" virt="non-virtual"><scope>gmx::test::TrajectoryFrameReader</scope><name>operator=</name></member>
      <member refid="classgmx_1_1test_1_1TrajectoryFrameReader_1a63117177e0d578d9a15c12db7bb9f680" prot="public" virt="non-virtual"><scope>gmx::test::TrajectoryFrameReader</scope><name>readNextFrame</name></member>
      <member refid="classgmx_1_1test_1_1TrajectoryFrameReader_1aec9d1898dd7d122cf357aec42924c024" prot="private" virt="non-virtual"><scope>gmx::test::TrajectoryFrameReader</scope><name>trajectoryFileGuard_</name></member>
      <member refid="classgmx_1_1test_1_1TrajectoryFrameReader_1a705793c6cd9d109f0277b0918118f480" prot="public" virt="non-virtual"><scope>gmx::test::TrajectoryFrameReader</scope><name>TrajectoryFrameReader</name></member>
      <member refid="classgmx_1_1test_1_1TrajectoryFrameReader_1aa350d34d19b1f3bedbc16298f87d42d6" prot="private" virt="non-virtual"><scope>gmx::test::TrajectoryFrameReader</scope><name>TrajectoryFrameReader</name></member>
      <member refid="classgmx_1_1test_1_1TrajectoryFrameReader_1ab5238c97a0e5c7cdf6b9043d85e0ba44" prot="private" virt="non-virtual"><scope>gmx::test::TrajectoryFrameReader</scope><name>trxframeGuard_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
