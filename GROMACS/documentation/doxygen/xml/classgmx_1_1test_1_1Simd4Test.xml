<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1test_1_1Simd4Test" kind="class" prot="public">
    <compoundname>gmx::test::Simd4Test</compoundname>
    <basecompoundref refid="classgmx_1_1test_1_1SimdBaseTest" prot="public" virt="non-virtual">gmx::test::SimdBaseTest</basecompoundref>
    <derivedcompoundref refid="classgmx_1_1test_1_1Simd4MathTest" prot="public" virt="non-virtual">gmx::test::Simd4MathTest</derivedcompoundref>
    <includes local="no">gromacs/simd/tests/simd4.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="group__module__simd_1gad5773057ca8d1874a36bd2de5a6886a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::testing::AssertionResult</type>
        <definition>testing::AssertionResult gmx::test::Simd4Test::compareSimd4RealUlp</definition>
        <argsstring>(const char *refExpr, const char *tstExpr, const Simd4Real ref, const Simd4Real tst)</argsstring>
        <name>compareSimd4RealUlp</name>
        <param>
          <type>const char *</type>
          <declname>refExpr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tstExpr</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegmx_1a37686b0c2ec48a361d6c4473c1fdb70c" kindref="member">Simd4Real</ref></type>
          <declname>ref</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegmx_1a37686b0c2ec48a361d6c4473c1fdb70c" kindref="member">Simd4Real</ref></type>
          <declname>tst</declname>
        </param>
        <briefdescription>
<para>Compare two real SIMD4 variables for approximate equality. </para>        </briefdescription>
        <detaileddescription>
<para>This is an internal implementation routine. YOu should always use <ref refid="group__module__simd_1ga647bdae4102d09c166e67116dd916d99" kindref="member">GMX_EXPECT_SIMD4_REAL_NEAR()</ref> instead.</para><para>This routine is designed according to the Google test specs, so the char strings will describe the arguments to the macro.</para><para>The comparison is applied to each element, and it returns true if each element in the SIMD4 test variable is within the class tolerances of the corresponding reference element. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/simd/tests/simd4.h" line="118" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/simd/tests/simd4.cpp" bodystart="121" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="group__module__simd_1gac59e3efe7feda9d916c5c1e6202ec086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::testing::AssertionResult</type>
        <definition>testing::AssertionResult gmx::test::Simd4Test::compareSimd4RealEq</definition>
        <argsstring>(const char *refExpr, const char *tstExpr, const Simd4Real ref, const Simd4Real tst)</argsstring>
        <name>compareSimd4RealEq</name>
        <param>
          <type>const char *</type>
          <declname>refExpr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tstExpr</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegmx_1a37686b0c2ec48a361d6c4473c1fdb70c" kindref="member">Simd4Real</ref></type>
          <declname>ref</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegmx_1a37686b0c2ec48a361d6c4473c1fdb70c" kindref="member">Simd4Real</ref></type>
          <declname>tst</declname>
        </param>
        <briefdescription>
<para>Compare two real SIMD4 variables for exact equality. </para>        </briefdescription>
        <detaileddescription>
<para>This is an internal implementation routine. YOu should always use <ref refid="group__module__simd_1ga647bdae4102d09c166e67116dd916d99" kindref="member">GMX_EXPECT_SIMD4_REAL_NEAR()</ref> instead.</para><para>This routine is designed according to the Google test specs, so the char strings will describe the arguments to the macro.</para><para>The comparison is applied to each element, and it returns true if each element in the SIMD4 test variable is within the class tolerances of the corresponding reference element. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/simd/tests/simd4.h" line="134" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/simd/tests/simd4.cpp" bodystart="128" bodyend="132"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Test fixture for SIMD4 tests - contains test settings. </para>    </briefdescription>
    <detaileddescription>
<internal><para>This is a very simple test fixture that basically just takes the common SIMD/SIMD4 functionality from <ref refid="classgmx_1_1test_1_1SimdBaseTest" kindref="compound">SimdBaseTest</ref> and creates wrapper routines specific for SIMD4 functionality. </para></internal>
    </detaileddescription>
    <inheritancegraph>
      <node id="2440">
        <label>gmx::test::SimdBaseTest</label>
        <link refid="classgmx_1_1test_1_1SimdBaseTest"/>
        <childnode refid="2441" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2442">
        <label>gmx::test::Simd4MathTest</label>
        <link refid="classgmx_1_1test_1_1Simd4MathTest"/>
        <childnode refid="2439" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2441">
        <label>Test</label>
      </node>
      <node id="2439">
        <label>gmx::test::Simd4Test</label>
        <link refid="classgmx_1_1test_1_1Simd4Test"/>
        <childnode refid="2440" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2444">
        <label>gmx::test::SimdBaseTest</label>
        <link refid="classgmx_1_1test_1_1SimdBaseTest"/>
        <childnode refid="2445" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2445">
        <label>Test</label>
      </node>
      <node id="2443">
        <label>gmx::test::Simd4Test</label>
        <link refid="classgmx_1_1test_1_1Simd4Test"/>
        <childnode refid="2444" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/simd/tests/simd4.h" line="103" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/simd/tests/simd4.h" bodystart="102" bodyend="136"/>
    <listofallmembers>
      <member refid="classgmx_1_1test_1_1SimdBaseTest_1a67e1769c0ddf3a84103a1cd47f065bae" prot="protected" virt="non-virtual"><scope>gmx::test::Simd4Test</scope><name>absTol_</name></member>
      <member refid="group__module__simd_1gac59e3efe7feda9d916c5c1e6202ec086" prot="public" virt="non-virtual"><scope>gmx::test::Simd4Test</scope><name>compareSimd4RealEq</name></member>
      <member refid="group__module__simd_1gad5773057ca8d1874a36bd2de5a6886a3" prot="public" virt="non-virtual"><scope>gmx::test::Simd4Test</scope><name>compareSimd4RealUlp</name></member>
      <member refid="classgmx_1_1test_1_1SimdBaseTest_1a22fabd98b32ffe360fa267d8c0e6ac9d" prot="public" virt="non-virtual"><scope>gmx::test::Simd4Test</scope><name>compareVectorEq</name></member>
      <member refid="group__module__simd_1ga44ad308730db9d832e68ee9864f83c21" prot="public" virt="non-virtual"><scope>gmx::test::Simd4Test</scope><name>compareVectorRealUlp</name></member>
      <member refid="classgmx_1_1test_1_1SimdBaseTest_1a9d70ac319ae213a906f501b0fa63ed34" prot="protected" virt="non-virtual"><scope>gmx::test::Simd4Test</scope><name>range_</name></member>
      <member refid="group__module__simd_1ga8a2a543330f7b970d26162dcdd99ee01" prot="public" virt="non-virtual"><scope>gmx::test::Simd4Test</scope><name>s_nPoints</name></member>
      <member refid="classgmx_1_1test_1_1SimdBaseTest_1aba2dcd7ec0563e05aafd6c176fb286c4" prot="public" virt="non-virtual"><scope>gmx::test::Simd4Test</scope><name>setAbsTol</name></member>
      <member refid="classgmx_1_1test_1_1SimdBaseTest_1a668d22ee1cb32b9bdd226f95479124f0" prot="public" virt="non-virtual"><scope>gmx::test::Simd4Test</scope><name>setRange</name></member>
      <member refid="classgmx_1_1test_1_1SimdBaseTest_1a379ab155d44071bc98d3fd71b3b76449" prot="public" virt="non-virtual"><scope>gmx::test::Simd4Test</scope><name>setUlpTol</name></member>
      <member refid="classgmx_1_1test_1_1SimdBaseTest_1a293b4002e1c6a4e9863c1f50994f694e" prot="public" virt="non-virtual"><scope>gmx::test::Simd4Test</scope><name>SimdBaseTest</name></member>
      <member refid="classgmx_1_1test_1_1SimdBaseTest_1a9e2abac54e05356364ecdb0751e8665b" prot="protected" virt="non-virtual"><scope>gmx::test::Simd4Test</scope><name>ulpTol_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
