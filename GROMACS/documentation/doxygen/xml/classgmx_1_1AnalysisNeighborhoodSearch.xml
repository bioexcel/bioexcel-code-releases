<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1AnalysisNeighborhoodSearch" kind="class" prot="public">
    <compoundname>gmx::AnalysisNeighborhoodSearch</compoundname>
    <includes local="no">gromacs/selection/nbsearch.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classgmx_1_1AnalysisNeighborhoodSearch_1a5148f4912747720780cce5bece02a343" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classgmx_1_1internal_1_1AnalysisNeighborhoodSearchImpl" kindref="compound">internal::AnalysisNeighborhoodSearchImpl</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;internal::AnalysisNeighborhoodSearchImpl&gt; gmx::AnalysisNeighborhoodSearch::ImplPointer</definition>
        <argsstring></argsstring>
        <name>ImplPointer</name>
        <briefdescription>
<para>Internal short-hand type for a pointer to the implementation class. </para>        </briefdescription>
        <detaileddescription>
<para>shared_ptr is used here to automatically keep a reference count to track whether an implementation class is still used outside the <ref refid="classgmx_1_1AnalysisNeighborhood" kindref="compound">AnalysisNeighborhood</ref> object. Ownership currently always stays with <ref refid="classgmx_1_1AnalysisNeighborhood" kindref="compound">AnalysisNeighborhood</ref>; it always keeps one instance of the pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.h" line="436" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.h" bodystart="436" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classgmx_1_1AnalysisNeighborhoodSearch_1a8c52961d6716092a96474dedc053eb32" prot="private" static="no">
        <type><ref refid="classgmx_1_1internal_1_1AnalysisNeighborhoodSearchImpl" kindref="compound">internal::AnalysisNeighborhoodSearchImpl</ref></type>
        <definition>typedef internal::AnalysisNeighborhoodSearchImpl gmx::AnalysisNeighborhoodSearch::Impl</definition>
        <argsstring></argsstring>
        <name>Impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.h" line="514" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.h" bodystart="514" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgmx_1_1AnalysisNeighborhoodSearch_1ae01fe1ea121b77b15830d3a62e912694" prot="private" static="no" mutable="no">
        <type><ref refid="classgmx_1_1AnalysisNeighborhoodSearch_1a5148f4912747720780cce5bece02a343" kindref="member">ImplPointer</ref></type>
        <definition>ImplPointer gmx::AnalysisNeighborhoodSearch::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.h" line="516" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.h" bodystart="516" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1AnalysisNeighborhoodSearch_1af3fe3eb5bc2452c504c6674aada78710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::AnalysisNeighborhoodSearch::AnalysisNeighborhoodSearch</definition>
        <argsstring>()</argsstring>
        <name>AnalysisNeighborhoodSearch</name>
        <briefdescription>
<para>Initializes an invalid search. </para>        </briefdescription>
        <detaileddescription>
<para>Such an object cannot be used for searching. It needs to be assigned a value from <ref refid="classgmx_1_1AnalysisNeighborhood_1ac11ba1b44a1c777677276f6ec664a82d" kindref="member">AnalysisNeighborhood::initSearch()</ref> before it can be used. Provided to allow declaring a variable to hold the search before calling <ref refid="classgmx_1_1AnalysisNeighborhood_1ac11ba1b44a1c777677276f6ec664a82d" kindref="member">AnalysisNeighborhood::initSearch()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.h" line="446" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.cpp" bodystart="1339" bodyend="1341"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisNeighborhoodSearch_1ac78854183d2af635b1179454b7e8dc41" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::AnalysisNeighborhoodSearch::AnalysisNeighborhoodSearch</definition>
        <argsstring>(const ImplPointer &amp;impl)</argsstring>
        <name>AnalysisNeighborhoodSearch</name>
        <param>
          <type>const <ref refid="classgmx_1_1AnalysisNeighborhoodSearch_1a5148f4912747720780cce5bece02a343" kindref="member">ImplPointer</ref> &amp;</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
<para>Internally initialize the search. </para>        </briefdescription>
        <detaileddescription>
<para>Used to implement <ref refid="classgmx_1_1AnalysisNeighborhood_1ac11ba1b44a1c777677276f6ec664a82d" kindref="member">AnalysisNeighborhood::initSearch()</ref>. Cannot be called from user code. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.h" line="453" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.cpp" bodystart="1343" bodyend="1346"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisNeighborhoodSearch_1a5e749843e759e164b790eee1d8004489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::AnalysisNeighborhoodSearch::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Clears this search. </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to <computeroutput>&quot;*this = AnalysisNeighborhoodSearch();&quot;</computeroutput>. Currently, this is necessary to avoid unnecessary memory allocation if the previous search variable is still in scope when you want to call <ref refid="classgmx_1_1AnalysisNeighborhood_1ac11ba1b44a1c777677276f6ec664a82d" kindref="member">AnalysisNeighborhood::initSearch()</ref> again. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.h" line="463" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.cpp" bodystart="1348" bodyend="1351"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisNeighborhoodSearch_1a5850017fb25be239cead2112d7ee3326" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1AnalysisNeighborhood_1a5de52a8b0a7503e848223d313df6a8d5" kindref="member">AnalysisNeighborhood::SearchMode</ref></type>
        <definition>AnalysisNeighborhood::SearchMode gmx::AnalysisNeighborhoodSearch::mode</definition>
        <argsstring>() const </argsstring>
        <name>mode</name>
        <briefdescription>
<para>Returns the searching algorithm that this search is using. </para>        </briefdescription>
        <detaileddescription>
<para>The return value is never <ref refid="classgmx_1_1AnalysisNeighborhood_1a5de52a8b0a7503e848223d313df6a8d5ade6be6891c10bf7a9b7c5b4cf4d9466b" kindref="member">AnalysisNeighborhood::eSearchMode_Automatic</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.h" line="470" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.cpp" bodystart="1353" bodyend="1359"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisNeighborhoodSearch_1aca51cdb79459d86bd3718eaa950114f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::AnalysisNeighborhoodSearch::isWithin</definition>
        <argsstring>(const AnalysisNeighborhoodPositions &amp;positions) const </argsstring>
        <name>isWithin</name>
        <param>
          <type>const <ref refid="classgmx_1_1AnalysisNeighborhoodPositions" kindref="compound">AnalysisNeighborhoodPositions</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <briefdescription>
<para>Check whether a point is within a neighborhood. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">positions</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of test positions to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if any of the test positions is within the cutoff of any reference position. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.h" line="479" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.cpp" bodystart="1361" bodyend="1368"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisNeighborhoodSearch_1adbf80af8e5193cf2cb73694234b77157" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
        <definition>real gmx::AnalysisNeighborhoodSearch::minimumDistance</definition>
        <argsstring>(const AnalysisNeighborhoodPositions &amp;positions) const </argsstring>
        <name>minimumDistance</name>
        <param>
          <type>const <ref refid="classgmx_1_1AnalysisNeighborhoodPositions" kindref="compound">AnalysisNeighborhoodPositions</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <briefdescription>
<para>Calculates the minimum distance from the reference points. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">positions</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of test positions to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The distance to the nearest reference position, or the cutoff value if there are no reference positions within the cutoff. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.h" line="488" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.cpp" bodystart="1370" bodyend="1382"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisNeighborhoodSearch_1a3d5dc061994dfeee42abbe9556cc7147" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1AnalysisNeighborhoodPair" kindref="compound">AnalysisNeighborhoodPair</ref></type>
        <definition>AnalysisNeighborhoodPair gmx::AnalysisNeighborhoodSearch::nearestPoint</definition>
        <argsstring>(const AnalysisNeighborhoodPositions &amp;positions) const </argsstring>
        <name>nearestPoint</name>
        <param>
          <type>const <ref refid="classgmx_1_1AnalysisNeighborhoodPositions" kindref="compound">AnalysisNeighborhoodPositions</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <briefdescription>
<para>Finds the closest reference point. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">positions</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of test positions to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The reference index identifies the reference position that is closest to the test positions. The test index identifies the test position that is closest to the provided test position. The returned pair is invalid if no reference position is within the cutoff. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.h" line="500" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.cpp" bodystart="1385" bodyend="1397"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisNeighborhoodSearch_1a05376f41b50379732ce9bebba6c0e728" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1AnalysisNeighborhoodPairSearch" kindref="compound">AnalysisNeighborhoodPairSearch</ref></type>
        <definition>AnalysisNeighborhoodPairSearch gmx::AnalysisNeighborhoodSearch::startPairSearch</definition>
        <argsstring>(const AnalysisNeighborhoodPositions &amp;positions) const </argsstring>
        <name>startPairSearch</name>
        <param>
          <type>const <ref refid="classgmx_1_1AnalysisNeighborhoodPositions" kindref="compound">AnalysisNeighborhoodPositions</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <briefdescription>
<para>Start a search to find reference positions within a cutoff. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">positions</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of test positions to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Initialized search object to loop through all reference positions within the configured cutoff. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.h" line="511" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.cpp" bodystart="1400" bodyend="1407"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Initialized neighborhood search with a fixed set of reference positions. </para>    </briefdescription>
    <detaileddescription>
<para>An instance of this class is obtained through <ref refid="classgmx_1_1AnalysisNeighborhood_1ac11ba1b44a1c777677276f6ec664a82d" kindref="member">AnalysisNeighborhood::initSearch()</ref>, and can be used to do multiple searches against the provided set of reference positions. It is possible to create concurrent pair searches (including from different threads), as well as call other methods in this class while a pair search is in progress.</para><para>This class works like a pointer: copies of it point to the same search. In general, avoid creating copies, and only use the copy/assignment support for moving the variable around. With C++11, this class would best be movable.</para><para>Methods in this class do not throw unless otherwise indicated.</para><para><xrefsect id="todo_1_todo000050"><xreftitle>Todo</xreftitle><xrefdescription><para>Make it such that <ref refid="classgmx_1_1AnalysisNeighborhoodSearch_1a5e749843e759e164b790eee1d8004489" kindref="member">reset()</ref> is not necessary to call in code that repeatedly assigns the result of <ref refid="classgmx_1_1AnalysisNeighborhood_1ac11ba1b44a1c777677276f6ec664a82d" kindref="member">AnalysisNeighborhood::initSearch()</ref> to the same variable (see <ref refid="sm__distance_8cpp" kindref="compound">sm_distance.cpp</ref>).</para></xrefdescription></xrefsect></para><para><xrefsect id="todo_1_todo000051"><xreftitle>Todo</xreftitle><xrefdescription><para>Consider merging <ref refid="classgmx_1_1AnalysisNeighborhoodSearch_1a3d5dc061994dfeee42abbe9556cc7147" kindref="member">nearestPoint()</ref> and <ref refid="classgmx_1_1AnalysisNeighborhoodSearch_1adbf80af8e5193cf2cb73694234b77157" kindref="member">minimumDistance()</ref> by adding the distance to <ref refid="classgmx_1_1AnalysisNeighborhoodPair" kindref="compound">AnalysisNeighborhoodPair</ref>.</para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.h" line="425" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/selection/nbsearch.h" bodystart="424" bodyend="517"/>
    <listofallmembers>
      <member refid="classgmx_1_1AnalysisNeighborhoodSearch_1af3fe3eb5bc2452c504c6674aada78710" prot="public" virt="non-virtual"><scope>gmx::AnalysisNeighborhoodSearch</scope><name>AnalysisNeighborhoodSearch</name></member>
      <member refid="classgmx_1_1AnalysisNeighborhoodSearch_1ac78854183d2af635b1179454b7e8dc41" prot="public" virt="non-virtual"><scope>gmx::AnalysisNeighborhoodSearch</scope><name>AnalysisNeighborhoodSearch</name></member>
      <member refid="classgmx_1_1AnalysisNeighborhoodSearch_1a8c52961d6716092a96474dedc053eb32" prot="private" virt="non-virtual"><scope>gmx::AnalysisNeighborhoodSearch</scope><name>Impl</name></member>
      <member refid="classgmx_1_1AnalysisNeighborhoodSearch_1ae01fe1ea121b77b15830d3a62e912694" prot="private" virt="non-virtual"><scope>gmx::AnalysisNeighborhoodSearch</scope><name>impl_</name></member>
      <member refid="classgmx_1_1AnalysisNeighborhoodSearch_1a5148f4912747720780cce5bece02a343" prot="public" virt="non-virtual"><scope>gmx::AnalysisNeighborhoodSearch</scope><name>ImplPointer</name></member>
      <member refid="classgmx_1_1AnalysisNeighborhoodSearch_1aca51cdb79459d86bd3718eaa950114f2" prot="public" virt="non-virtual"><scope>gmx::AnalysisNeighborhoodSearch</scope><name>isWithin</name></member>
      <member refid="classgmx_1_1AnalysisNeighborhoodSearch_1adbf80af8e5193cf2cb73694234b77157" prot="public" virt="non-virtual"><scope>gmx::AnalysisNeighborhoodSearch</scope><name>minimumDistance</name></member>
      <member refid="classgmx_1_1AnalysisNeighborhoodSearch_1a5850017fb25be239cead2112d7ee3326" prot="public" virt="non-virtual"><scope>gmx::AnalysisNeighborhoodSearch</scope><name>mode</name></member>
      <member refid="classgmx_1_1AnalysisNeighborhoodSearch_1a3d5dc061994dfeee42abbe9556cc7147" prot="public" virt="non-virtual"><scope>gmx::AnalysisNeighborhoodSearch</scope><name>nearestPoint</name></member>
      <member refid="classgmx_1_1AnalysisNeighborhoodSearch_1a5e749843e759e164b790eee1d8004489" prot="public" virt="non-virtual"><scope>gmx::AnalysisNeighborhoodSearch</scope><name>reset</name></member>
      <member refid="classgmx_1_1AnalysisNeighborhoodSearch_1a05376f41b50379732ce9bebba6c0e728" prot="public" virt="non-virtual"><scope>gmx::AnalysisNeighborhoodSearch</scope><name>startPairSearch</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
