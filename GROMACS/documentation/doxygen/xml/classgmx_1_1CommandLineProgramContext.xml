<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1CommandLineProgramContext" kind="class" prot="public">
    <compoundname>gmx::CommandLineProgramContext</compoundname>
    <basecompoundref refid="classgmx_1_1IProgramContext" prot="public" virt="non-virtual">gmx::IProgramContext</basecompoundref>
    <includes local="no">gromacs/commandline/cmdlineprogramcontext.h</includes>
    <innerclass refid="classgmx_1_1CommandLineProgramContext_1_1Impl" prot="public">gmx::CommandLineProgramContext::Impl</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="group__module__commandline_1gae009d421694b39470c699736d85acca0" prot="private" static="no" mutable="no">
        <type><ref refid="classgmx_1_1PrivateImplPointer" kindref="compound">PrivateImplPointer</ref>&lt; <ref refid="classgmx_1_1CommandLineProgramContext_1_1Impl" kindref="compound">Impl</ref> &gt;</type>
        <definition>PrivateImplPointer&lt;Impl&gt; gmx::CommandLineProgramContext::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.h" line="216" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="group__module__commandline_1gaa1e5312c47534788a14090c55b7dbc0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::CommandLineProgramContext::CommandLineProgramContext</definition>
        <argsstring>()</argsstring>
        <name>CommandLineProgramContext</name>
        <briefdescription>
<para>Constructs an empty context object. </para>        </briefdescription>
        <detaileddescription>
<para>All methods in the constructed object return dummy values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.h" line="118" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" bodystart="361" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="group__module__commandline_1ga18e39255f8afcf4b4c2530fc4a0b1ad7" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::CommandLineProgramContext::CommandLineProgramContext</definition>
        <argsstring>(const char *binaryName)</argsstring>
        <name>CommandLineProgramContext</name>
        <param>
          <type>const char *</type>
          <declname>binaryName</declname>
        </param>
        <briefdescription>
<para>Initializes a program context object with binary name only. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">binaryName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the binary.</para></parameterdescription>
</parameteritem>
</parameterlist>
This is needed for unit testing purposes. The constructed object works as if the command line consisted of only of the binary name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.h" line="128" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="group__module__commandline_1ga513a07555560450ca0d98e090cfceada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::CommandLineProgramContext::CommandLineProgramContext</definition>
        <argsstring>(int argc, const char *const argv[])</argsstring>
        <name>CommandLineProgramContext</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Initializes a program context object based on command line. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">argc</parametername>
</parameternamelist>
<parameterdescription>
<para>argc value passed to <ref refid="test__selection_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">argv</parametername>
</parameternamelist>
<parameterdescription>
<para>argv array passed to <ref refid="test__selection_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.h" line="135" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" bodystart="371" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="group__module__commandline_1ga8119d76767f82520df037d50330017cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::CommandLineProgramContext::CommandLineProgramContext</definition>
        <argsstring>(int argc, const char *const argv[], ExecutableEnvironmentPointer env)</argsstring>
        <name>CommandLineProgramContext</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="group__module__commandline_1gac522eb6a6c382e39345834c796201098" kindref="member">ExecutableEnvironmentPointer</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Initializes a program context object based on command line. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">argc</parametername>
</parameternamelist>
<parameterdescription>
<para>argc value passed to <ref refid="test__selection_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">argv</parametername>
</parameternamelist>
<parameterdescription>
<para>argv array passed to <ref refid="test__selection_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>Customizes the way the binary name is handled.</para></parameterdescription>
</parameteritem>
</parameterlist>
This overload allows one to customize the way the binary is located by providing a custom <ref refid="classgmx_1_1IExecutableEnvironment" kindref="compound">IExecutableEnvironment</ref> implementation. This is mainly useful for testing purposes to make it possible to test different paths without setting environment variables, changing the working directory or doing other process-wide operations. It may also be useful for making Gromacs behave better when linked into a non-Gromacs executable (with possible extensions in <ref refid="classgmx_1_1IExecutableEnvironment" kindref="compound">IExecutableEnvironment</ref>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.h" line="152" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" bodystart="377" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="group__module__commandline_1gad28b3b7dd9373039162997fcccbfa732" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>gmx::CommandLineProgramContext::~CommandLineProgramContext</definition>
        <argsstring>()</argsstring>
        <name>~CommandLineProgramContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.h" line="154" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" bodystart="383" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="group__module__commandline_1ga6cb367921f318985d9c8b369e36060d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::CommandLineProgramContext::setDisplayName</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>setDisplayName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Sets a display name for the binary. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
This is used with the wrapper binary to add the name of the invoked module to the name of the binary shown.</para><para>It is not threadsafe if there are concurrent calls to <ref refid="group__module__commandline_1gad4a598a1052ae416d05ce25e516dfd2e" kindref="member">displayName()</ref> before this method has returned. Thread safety is not required for the normal initialization sequence of command line programs; it is called in the wrapper binary before the control passes to the actual module which may create threads. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.h" line="170" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" bodystart="387" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="group__module__commandline_1gaeab3d8df1129225a277449eae8fe3340" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const char *</type>
        <definition>const char * gmx::CommandLineProgramContext::programName</definition>
        <argsstring>() const </argsstring>
        <name>programName</name>
        <reimplements refid="classgmx_1_1IProgramContext_1a26af3ba471321756753297d624c21d0d">programName</reimplements>
        <briefdescription>
<para>Returns the name of the binary as it was invoked without any path. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.h" line="177" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" bodystart="394" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="group__module__commandline_1gad4a598a1052ae416d05ce25e516dfd2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const char *</type>
        <definition>const char * gmx::CommandLineProgramContext::displayName</definition>
        <argsstring>() const </argsstring>
        <name>displayName</name>
        <reimplements refid="classgmx_1_1IProgramContext_1a66ba95d75a6eefd4cc76b677130a48eb">displayName</reimplements>
        <briefdescription>
<para>Returns a display name of the current module. </para>        </briefdescription>
        <detaileddescription>
<para>The returned value equals <ref refid="group__module__commandline_1gaeab3d8df1129225a277449eae8fe3340" kindref="member">programName()</ref>, unless a separate display name has been set with <ref refid="group__module__commandline_1ga6cb367921f318985d9c8b369e36060d2" kindref="member">setDisplayName()</ref>.</para><para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.h" line="186" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" bodystart="399" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="group__module__commandline_1ga5957348c4bc5a91748e16a84625d5c84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const char *</type>
        <definition>const char * gmx::CommandLineProgramContext::fullBinaryPath</definition>
        <argsstring>() const </argsstring>
        <name>fullBinaryPath</name>
        <reimplements refid="classgmx_1_1IProgramContext_1afaca282ab5e0bc99c6da555c0c7f4434">fullBinaryPath</reimplements>
        <briefdescription>
<para>Returns the full path of the running binary. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tMPI::system_error</parametername>
</parameternamelist>
<parameterdescription>
<para>on thread synchronization errors.</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns argv[0] if there was an error in finding the absolute path. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.h" line="195" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" bodystart="411" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="group__module__commandline_1ga04d4684f9c807f5f191a53477a85646d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="structgmx_1_1InstallationPrefixInfo" kindref="compound">InstallationPrefixInfo</ref></type>
        <definition>InstallationPrefixInfo gmx::CommandLineProgramContext::installationPrefix</definition>
        <argsstring>() const </argsstring>
        <name>installationPrefix</name>
        <reimplements refid="classgmx_1_1IProgramContext_1ada732144a05c8faa224b5ad0d904df6f">installationPrefix</reimplements>
        <briefdescription>
<para>Returns the installation prefix (for finding GROMACS data files). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tMPI::system_error</parametername>
</parameternamelist>
<parameterdescription>
<para>on thread synchronization errors.</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns a hardcoded path set during configuration time if there is an error in finding the library data files. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.h" line="205" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" bodystart="418" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="group__module__commandline_1gaf923ae4442dffcada736934cb5c73dbb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const char *</type>
        <definition>const char * gmx::CommandLineProgramContext::commandLine</definition>
        <argsstring>() const </argsstring>
        <name>commandLine</name>
        <reimplements refid="classgmx_1_1IProgramContext_1a2512c75e34337df80e3a1e994d17a8cc">commandLine</reimplements>
        <briefdescription>
<para>Returns the full command line used to invoke the binary. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.h" line="211" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.cpp" bodystart="406" bodyend="409"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Program context implementation for command line programs. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal /> Constructors are provided mostly for unit testing purposes; in normal usage, a single <ref refid="classgmx_1_1CommandLineProgramContext" kindref="compound">CommandLineProgramContext</ref> object is constructed with <ref refid="group__module__commandline_1ga8c376f5f94bd1a63a3a97e288c4be50d" kindref="member">initForCommandLine()</ref> in the beginning of the program. The returned object can be explicitly passed to other methods, or accessed through <ref refid="group__module__utility_1ga5ac09bdfd662fa49b0426432744f57be" kindref="member">getProgramContext()</ref>.</para><para>Unless explicitly noted otherwise, methods in this class may throw std::bad_alloc on out-of-memory conditions, but do not throw other exceptions. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1329">
        <label>gmx::IProgramContext</label>
        <link refid="classgmx_1_1IProgramContext"/>
      </node>
      <node id="1328">
        <label>gmx::CommandLineProgramContext</label>
        <link refid="classgmx_1_1CommandLineProgramContext"/>
        <childnode refid="1329" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1331">
        <label>gmx::IProgramContext</label>
        <link refid="classgmx_1_1IProgramContext"/>
      </node>
      <node id="1330">
        <label>gmx::CommandLineProgramContext</label>
        <link refid="classgmx_1_1CommandLineProgramContext"/>
        <childnode refid="1331" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.h" line="111" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/commandline/cmdlineprogramcontext.h" bodystart="110" bodyend="217"/>
    <listofallmembers>
      <member refid="group__module__commandline_1gaf923ae4442dffcada736934cb5c73dbb" prot="public" virt="virtual"><scope>gmx::CommandLineProgramContext</scope><name>commandLine</name></member>
      <member refid="group__module__commandline_1gaa1e5312c47534788a14090c55b7dbc0e" prot="public" virt="non-virtual"><scope>gmx::CommandLineProgramContext</scope><name>CommandLineProgramContext</name></member>
      <member refid="group__module__commandline_1ga18e39255f8afcf4b4c2530fc4a0b1ad7" prot="public" virt="non-virtual"><scope>gmx::CommandLineProgramContext</scope><name>CommandLineProgramContext</name></member>
      <member refid="group__module__commandline_1ga513a07555560450ca0d98e090cfceada" prot="public" virt="non-virtual"><scope>gmx::CommandLineProgramContext</scope><name>CommandLineProgramContext</name></member>
      <member refid="group__module__commandline_1ga8119d76767f82520df037d50330017cd" prot="public" virt="non-virtual"><scope>gmx::CommandLineProgramContext</scope><name>CommandLineProgramContext</name></member>
      <member refid="group__module__commandline_1gad4a598a1052ae416d05ce25e516dfd2e" prot="public" virt="virtual"><scope>gmx::CommandLineProgramContext</scope><name>displayName</name></member>
      <member refid="group__module__commandline_1ga5957348c4bc5a91748e16a84625d5c84" prot="public" virt="virtual"><scope>gmx::CommandLineProgramContext</scope><name>fullBinaryPath</name></member>
      <member refid="group__module__commandline_1gae009d421694b39470c699736d85acca0" prot="private" virt="non-virtual"><scope>gmx::CommandLineProgramContext</scope><name>impl_</name></member>
      <member refid="group__module__commandline_1ga04d4684f9c807f5f191a53477a85646d" prot="public" virt="virtual"><scope>gmx::CommandLineProgramContext</scope><name>installationPrefix</name></member>
      <member refid="group__module__commandline_1gaeab3d8df1129225a277449eae8fe3340" prot="public" virt="virtual"><scope>gmx::CommandLineProgramContext</scope><name>programName</name></member>
      <member refid="group__module__commandline_1ga6cb367921f318985d9c8b369e36060d2" prot="public" virt="non-virtual"><scope>gmx::CommandLineProgramContext</scope><name>setDisplayName</name></member>
      <member refid="group__module__commandline_1gad28b3b7dd9373039162997fcccbfa732" prot="public" virt="virtual"><scope>gmx::CommandLineProgramContext</scope><name>~CommandLineProgramContext</name></member>
      <member refid="classgmx_1_1IProgramContext_1a02fc3daccda7f50deaef42c6fa2c3523" prot="protected" virt="virtual"><scope>gmx::CommandLineProgramContext</scope><name>~IProgramContext</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
