<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="group__module__testutils" kind="group">
    <compoundname>module_testutils</compoundname>
    <title>Testing Utilities (testutils)</title>
    <innerfile refid="cmdlinetest_8cpp">cmdlinetest.cpp</innerfile>
    <innerfile refid="cmdlinetest_8h">cmdlinetest.h</innerfile>
    <innerfile refid="conftest_8cpp">conftest.cpp</innerfile>
    <innerfile refid="conftest_8h">conftest.h</innerfile>
    <innerfile refid="integrationtests_8cpp">integrationtests.cpp</innerfile>
    <innerfile refid="integrationtests_8h">integrationtests.h</innerfile>
    <innerfile refid="interactivetest_8cpp">interactivetest.cpp</innerfile>
    <innerfile refid="interactivetest_8h">interactivetest.h</innerfile>
    <innerfile refid="mpi-printer_8h">mpi-printer.h</innerfile>
    <innerfile refid="refdata-checkers_8h">refdata-checkers.h</innerfile>
    <innerfile refid="refdata-impl_8h">refdata-impl.h</innerfile>
    <innerfile refid="refdata-xml_8cpp">refdata-xml.cpp</innerfile>
    <innerfile refid="refdata-xml_8h">refdata-xml.h</innerfile>
    <innerfile refid="refdata_8cpp">refdata.cpp</innerfile>
    <innerfile refid="refdata_8h">refdata.h</innerfile>
    <innerfile refid="stringtest_8cpp">stringtest.cpp</innerfile>
    <innerfile refid="stringtest_8h">stringtest.h</innerfile>
    <innerfile refid="testasserts_8cpp">testasserts.cpp</innerfile>
    <innerfile refid="testasserts_8h">testasserts.h</innerfile>
    <innerfile refid="testexceptions_8h">testexceptions.h</innerfile>
    <innerfile refid="testfilemanager_8cpp">testfilemanager.cpp</innerfile>
    <innerfile refid="testfilemanager_8h">testfilemanager.h</innerfile>
    <innerfile refid="testfileredirector_8cpp">testfileredirector.cpp</innerfile>
    <innerfile refid="testfileredirector_8h">testfileredirector.h</innerfile>
    <innerfile refid="testinit_8cpp">testinit.cpp</innerfile>
    <innerfile refid="testinit_8h">testinit.h</innerfile>
    <innerfile refid="testoptions_8cpp">testoptions.cpp</innerfile>
    <innerfile refid="testoptions_8h">testoptions.h</innerfile>
    <innerfile refid="tests_2interactivetest_8cpp">interactivetest.cpp</innerfile>
    <innerfile refid="refdata__tests_8cpp">refdata_tests.cpp</innerfile>
    <innerfile refid="testasserts__tests_8cpp">testasserts_tests.cpp</innerfile>
    <innerfile refid="xvgtest__tests_8cpp">xvgtest_tests.cpp</innerfile>
    <innerfile refid="testutils-doc_8h">testutils-doc.h</innerfile>
    <innerfile refid="textblockmatchers_8cpp">textblockmatchers.cpp</innerfile>
    <innerfile refid="textblockmatchers_8h">textblockmatchers.h</innerfile>
    <innerfile refid="unittest__main_8cpp">unittest_main.cpp</innerfile>
    <innerfile refid="xvgtest_8cpp">xvgtest.cpp</innerfile>
    <innerfile refid="xvgtest_8h">xvgtest.h</innerfile>
    <innerclass refid="classgmx_1_1test_1_1CommandLine" prot="public">gmx::test::CommandLine</innerclass>
    <innerclass refid="classgmx_1_1test_1_1CommandLineTestHelper" prot="public">gmx::test::CommandLineTestHelper</innerclass>
    <innerclass refid="classgmx_1_1test_1_1CommandLineTestBase" prot="public">gmx::test::CommandLineTestBase</innerclass>
    <innerclass refid="classgmx_1_1test_1_1ConfMatch" prot="public">gmx::test::ConfMatch</innerclass>
    <innerclass refid="classgmx_1_1test_1_1IntegrationTestFixture" prot="public">gmx::test::IntegrationTestFixture</innerclass>
    <innerclass refid="classgmx_1_1test_1_1InteractiveTestHelper" prot="public">gmx::test::InteractiveTestHelper</innerclass>
    <innerclass refid="classgmx_1_1test_1_1internal_1_1TestReferenceDataImpl" prot="public">gmx::test::internal::TestReferenceDataImpl</innerclass>
    <innerclass refid="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl" prot="public">gmx::test::TestReferenceChecker::Impl</innerclass>
    <innerclass refid="classgmx_1_1test_1_1TestReferenceData" prot="public">gmx::test::TestReferenceData</innerclass>
    <innerclass refid="classgmx_1_1test_1_1TestReferenceChecker" prot="public">gmx::test::TestReferenceChecker</innerclass>
    <innerclass refid="classgmx_1_1test_1_1StringTestBase" prot="public">gmx::test::StringTestBase</innerclass>
    <innerclass refid="classgmx_1_1test_1_1FloatingPointDifference" prot="public">gmx::test::FloatingPointDifference</innerclass>
    <innerclass refid="classgmx_1_1test_1_1FloatingPointTolerance" prot="public">gmx::test::FloatingPointTolerance</innerclass>
    <innerclass refid="classgmx_1_1test_1_1TestException" prot="public">gmx::test::TestException</innerclass>
    <innerclass refid="classgmx_1_1test_1_1TestFileManager" prot="public">gmx::test::TestFileManager</innerclass>
    <innerclass refid="classgmx_1_1test_1_1TestFileInputRedirector" prot="public">gmx::test::TestFileInputRedirector</innerclass>
    <innerclass refid="classgmx_1_1test_1_1TestFileOutputRedirector" prot="public">gmx::test::TestFileOutputRedirector</innerclass>
    <innerclass refid="classgmx_1_1test_1_1anonymous__namespace_02testinit_8cpp_03_1_1TestProgramContext" prot="public">gmx::test::anonymous_namespace{testinit.cpp}::TestProgramContext</innerclass>
    <innerclass refid="classgmx_1_1test_1_1anonymous__namespace_02testoptions_8cpp_03_1_1TestOptionsRegistry" prot="public">gmx::test::anonymous_namespace{testoptions.cpp}::TestOptionsRegistry</innerclass>
    <innerclass refid="classgmx_1_1test_1_1TestOptionsProvider" prot="public">gmx::test::TestOptionsProvider</innerclass>
    <innerclass refid="classgmx_1_1test_1_1ITextBlockMatcher" prot="public">gmx::test::ITextBlockMatcher</innerclass>
    <innerclass refid="classgmx_1_1test_1_1ITextBlockMatcherSettings" prot="public">gmx::test::ITextBlockMatcherSettings</innerclass>
    <innerclass refid="classgmx_1_1test_1_1ExactTextMatch" prot="public">gmx::test::ExactTextMatch</innerclass>
    <innerclass refid="classgmx_1_1test_1_1NoTextMatch" prot="public">gmx::test::NoTextMatch</innerclass>
    <innerclass refid="classgmx_1_1test_1_1XvgMatch" prot="public">gmx::test::XvgMatch</innerclass>
      <sectiondef kind="user-defined">
      <header>Helper functions for computing floating-point differences</header>
      <description><para>These routines are used to initialize <ref refid="classgmx_1_1test_1_1FloatingPointDifference" kindref="compound">FloatingPointDifference</ref>. They peek into some internal types from Google Test (gtest-internal.h), and duplicate some other functionality from there, but that is likely a better alternative than just copying all that code here. </para></description>
      <memberdef kind="function" id="group__module__testutils_1gaa4f52fad8b5f296790f25f67d66b56c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FloatType</type>
          </param>
        </templateparamlist>
        <type>FloatingPoint&lt; FloatType &gt;::Bits</type>
        <definition>FloatingPoint&lt;FloatType&gt;::Bits gmx::test::anonymous_namespace{testasserts.cpp}::floatingPointToBiasedInteger</definition>
        <argsstring>(const FloatingPoint&lt; FloatType &gt; &amp;value)</argsstring>
        <name>floatingPointToBiasedInteger</name>
        <param>
          <type>const FloatingPoint&lt; FloatType &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Computes biased integer representation for a floating-point value. </para>        </briefdescription>
        <detaileddescription>
<para>This moves the integer representation from a sign-and-magnitude representation to a biased representation where the 0x8000... represents zero, and the order of the integer values matches the order of the floating-point values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.cpp" line="127" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.cpp" bodystart="127" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1ga2be2fba2cf97cfc6c04864a0d568c996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FloatType</type>
          </param>
        </templateparamlist>
        <type>gmx_uint64_t</type>
        <definition>gmx_uint64_t gmx::test::anonymous_namespace{testasserts.cpp}::calculateUlpDifference</definition>
        <argsstring>(const FloatingPoint&lt; FloatType &gt; &amp;value1, const FloatingPoint&lt; FloatType &gt; &amp;value2)</argsstring>
        <name>calculateUlpDifference</name>
        <param>
          <type>const FloatingPoint&lt; FloatType &gt; &amp;</type>
          <declname>value1</declname>
        </param>
        <param>
          <type>const FloatingPoint&lt; FloatType &gt; &amp;</type>
          <declname>value2</declname>
        </param>
        <briefdescription>
<para>Computes the magnitude of the difference in ULPs between two numbers, treating also values of different sign. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.cpp" line="144" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.cpp" bodystart="144" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1gab1c5bf65f975bc8e0572b6ba2b94b2a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FloatType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::test::anonymous_namespace{testasserts.cpp}::initDifference</definition>
        <argsstring>(FloatType raw1, FloatType raw2, double *absoluteDifference, gmx_uint64_t *ulpDifference, bool *bSignDifference)</argsstring>
        <name>initDifference</name>
        <param>
          <type>FloatType</type>
          <declname>raw1</declname>
        </param>
        <param>
          <type>FloatType</type>
          <declname>raw2</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>absoluteDifference</declname>
        </param>
        <param>
          <type>gmx_uint64_t *</type>
          <declname>ulpDifference</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>bSignDifference</declname>
        </param>
        <briefdescription>
<para>Helper to implement the constructors for <ref refid="classgmx_1_1test_1_1FloatingPointDifference" kindref="compound">FloatingPointDifference</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.cpp" line="158" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.cpp" bodystart="158" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1gac6b6c825872baad5c13b7f073d6778cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FloatType</type>
          </param>
        </templateparamlist>
        <type>gmx_uint64_t</type>
        <definition>gmx_uint64_t gmx::test::anonymous_namespace{testasserts.cpp}::relativeToleranceToUlp</definition>
        <argsstring>(FloatType tolerance)</argsstring>
        <name>relativeToleranceToUlp</name>
        <param>
          <type>FloatType</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
<para>Converts a relative tolerance into an ULP difference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.cpp" line="180" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.cpp" bodystart="180" bodyend="185"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Assertions for exceptions</header>
      <description><para>These macros replace <computeroutput>(ASSERT|EXPECT)(_NO)?_THROW</computeroutput> from Google Test. They are used exactly like the Google Test ones, but also print details of any unexpected exceptions using GROMACS-specific routines. This makes it much easier to see at one glance what went wrong. See Google Test documentation for details on how to use the macros. </para></description>
      <memberdef kind="define" id="group__module__testutils_1ga1eec5082a161ff78e7b973d55593828b" prot="public" static="no">
        <name>GMX_TEST_THROW_</name>
        <param><defname>statement</defname></param>
        <param><defname>expected_exception</defname></param>
        <param><defname>fail</defname></param>
        <initializer>GTEST_AMBIGUOUS_ELSE_BLOCKER_ \
    if (::testing::AssertionResult gmx_ar = ::testing::AssertionSuccess()) { \
        bool gmx_caught_expected = false; \
        try { \
            GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement); \
        } \
        catch (expected_exception const &amp;ex) { \
            gmx_caught_expected = true; \
            ::gmx::test::internal::processExpectedException(ex); \
        } \
        catch (std::exception const &amp;ex) { \
            gmx_ar &lt;&lt; &quot;Expected: &quot; #statement &quot; throws an exception of type &quot; \
            &lt;&lt; #expected_exception &quot;.\n  Actual: it throws a different type.\n&quot; \
            &lt;&lt; &quot;Exception details:\n&quot; &lt;&lt; ::gmx::formatExceptionMessageToString(ex); \
            goto GTEST_CONCAT_TOKEN_(gmx_label_testthrow_, __LINE__); \
        } \
        catch (...) { \
            gmx_ar &lt;&lt; &quot;Expected: &quot; #statement &quot; throws an exception of type &quot; \
            &lt;&lt; #expected_exception &quot;.\n  Actual: it throws a different type.&quot;; \
            goto GTEST_CONCAT_TOKEN_(gmx_label_testthrow_, __LINE__); \
        } \
        if (!gmx_caught_expected) { \
            gmx_ar &lt;&lt; &quot;Expected: &quot; #statement &quot; throws an exception of type &quot; \
            &lt;&lt; #expected_exception &quot;.\n  Actual: it throws nothing.&quot;; \
            goto GTEST_CONCAT_TOKEN_(gmx_label_testthrow_, __LINE__); \
        } \
    } else \
        GTEST_CONCAT_TOKEN_(gmx_label_testthrow_, __LINE__) : \
            fail(gmx_ar.message())</initializer>
        <briefdescription>
<para>Internal implementation macro for exception assertations. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statement</parametername>
</parameternamelist>
<parameterdescription>
<para>Statements to execute. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected_exception</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception type that <computeroutput>statement</computeroutput> should throw. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fail</parametername>
</parameternamelist>
<parameterdescription>
<para>Function/macro to call on failure.</para></parameterdescription>
</parameteritem>
</parameterlist>
The implementation is copied and adjusted from include/gtest/internal/gtest-internal.h in Google Test 1.6.0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="108" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__testutils_1gab5c7b3b6b5b1656debbec8fc2ffe0d99" prot="public" static="no">
        <name>GMX_TEST_NO_THROW_</name>
        <param><defname>statement</defname></param>
        <param><defname>fail</defname></param>
        <initializer>GTEST_AMBIGUOUS_ELSE_BLOCKER_ \
    if (::testing::AssertionResult gmx_ar = ::testing::AssertionSuccess()) { \
        try { \
            GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement); \
        } \
        catch (std::exception const &amp;ex) { \
            gmx_ar &lt;&lt; &quot;Expected: &quot; #statement &quot; doesn&apos;t throw an exception.\n&quot; \
            &lt;&lt; &quot;  Actual: it throws.\n&quot; \
            &lt;&lt; &quot;Exception details:\n&quot; &lt;&lt; ::gmx::formatExceptionMessageToString(ex); \
            goto GTEST_CONCAT_TOKEN_(gmx_label_testnothrow_, __LINE__); \
        } \
        catch (...) { \
            gmx_ar &lt;&lt; &quot;Expected: &quot; #statement &quot; doesn&apos;t throw an exception.\n&quot; \
            &lt;&lt; &quot;  Actual: it throws.&quot;; \
            goto GTEST_CONCAT_TOKEN_(gmx_label_testnothrow_, __LINE__); \
        } \
    } else \
        GTEST_CONCAT_TOKEN_(gmx_label_testnothrow_, __LINE__) : \
            fail(gmx_ar.message())</initializer>
        <briefdescription>
<para>Internal implementation macro for exception assertations. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statement</parametername>
</parameternamelist>
<parameterdescription>
<para>Statements to execute. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fail</parametername>
</parameternamelist>
<parameterdescription>
<para>Function/macro to call on failure.</para></parameterdescription>
</parameteritem>
</parameterlist>
The implementation is copied and adjusted from include/gtest/internal/gtest-internal.h in Google Test 1.6.0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="148" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__testutils_1ga902c620217d0acf1b0f0ab9319ad64ae" prot="public" static="no">
        <name>EXPECT_THROW_GMX</name>
        <param><defname>statement</defname></param>
        <param><defname>expected_exception</defname></param>
        <briefdescription>
<para>Asserts that a statement throws a given exception. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="175" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__testutils_1ga1f05debf4536f9e77a6a0d992fee686f" prot="public" static="no">
        <name>EXPECT_NO_THROW_GMX</name>
        <param><defname>statement</defname></param>
        <briefdescription>
<para>Asserts that a statement does not throw. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="182" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__testutils_1ga5cd586713beef5aa3cf19b0ed2b3a269" prot="public" static="no">
        <name>ASSERT_THROW_GMX</name>
        <param><defname>statement</defname></param>
        <param><defname>expected_exception</defname></param>
        <briefdescription>
<para>Asserts that a statement throws a given exception. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="189" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__testutils_1gafbd852cd87908495678c48118c02ee82" prot="public" static="no">
        <name>ASSERT_NO_THROW_GMX</name>
        <param><defname>statement</defname></param>
        <briefdescription>
<para>Asserts that a statement does not throw. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="196" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Assertions for floating-point comparison</header>
      <description><para>These routines extend <computeroutput>(EXPECT|ASSERT)_(FLOAT|DOUBLE)_EQ</computeroutput> and <computeroutput>(EXPECT|ASSERT)_NEAR</computeroutput> from Google Test to provide more flexible assertions for floating-point values.</para><para>See <ref refid="classgmx_1_1test_1_1FloatingPointTolerance" kindref="compound">gmx::test::FloatingPointTolerance</ref> for the possible ways to specify the tolerance, and <ref refid="classgmx_1_1test_1_1FloatingPointDifference" kindref="compound">gmx::test::FloatingPointDifference</ref> for some additional details of the difference calculation. </para></description>
      <memberdef kind="function" id="group__module__testutils_1ga2e6cf2631a7f8256a5a044685a702fbb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FloatType</type>
          </param>
        </templateparamlist>
        <type>inline::testing::AssertionResult</type>
        <definition>static inline ::testing::AssertionResult gmx::test::assertEqualWithinTolerance</definition>
        <argsstring>(const char *expr1, const char *expr2, const char *, FloatType value1, FloatType value2, const FloatingPointTolerance &amp;tolerance)</argsstring>
        <name>assertEqualWithinTolerance</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>FloatType</type>
          <declname>value1</declname>
        </param>
        <param>
          <type>FloatType</type>
          <declname>value2</declname>
        </param>
        <param>
          <type>const FloatingPointTolerance &amp;</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
<para>Assertion predicate formatter for comparing two floating-point values. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="479" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="479" bodyend="496"/>
      </memberdef>
      <memberdef kind="define" id="group__module__testutils_1gab2d4d6b8ac472eccb5aa6ae100d12aa9" prot="public" static="no">
        <name>EXPECT_FLOAT_EQ_TOL</name>
        <param><defname>value1</defname></param>
        <param><defname>value2</defname></param>
        <param><defname>tolerance</defname></param>
        <briefdescription>
<para>Asserts that two single-precision values are within the given tolerance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="504" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="504" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__testutils_1ga4ca34636bd95cb3738291224d27e9649" prot="public" static="no">
        <name>EXPECT_DOUBLE_EQ_TOL</name>
        <param><defname>value1</defname></param>
        <param><defname>value2</defname></param>
        <param><defname>tolerance</defname></param>
        <briefdescription>
<para>Asserts that two double-precision values are within the given tolerance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="512" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__testutils_1ga7285ed4e345fac4ba689c8bbcd24118d" prot="public" static="no">
        <name>EXPECT_REAL_EQ_TOL</name>
        <param><defname>value1</defname></param>
        <param><defname>value2</defname></param>
        <param><defname>tolerance</defname></param>
        <briefdescription>
<para>Asserts that two <computeroutput>real</computeroutput> values are within the given tolerance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="550" column="10" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="550" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__testutils_1ga8ee3a0884221d08e838d4e4c46708153" prot="public" static="no">
        <name>ASSERT_FLOAT_EQ_TOL</name>
        <param><defname>value1</defname></param>
        <param><defname>value2</defname></param>
        <param><defname>tolerance</defname></param>
        <briefdescription>
<para>Asserts that two single-precision values are within the given tolerance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="526" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__testutils_1ga010a2c949d35b7f815862bcbd6418ca0" prot="public" static="no">
        <name>ASSERT_DOUBLE_EQ_TOL</name>
        <param><defname>value1</defname></param>
        <param><defname>value2</defname></param>
        <param><defname>tolerance</defname></param>
        <briefdescription>
<para>Asserts that two double-precision values are within the given tolerance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="534" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__testutils_1ga6e4937301d5b94f07bb4d9fd71030555" prot="public" static="no">
        <name>ASSERT_REAL_EQ_TOL</name>
        <param><defname>value1</defname></param>
        <param><defname>value2</defname></param>
        <param><defname>tolerance</defname></param>
        <briefdescription>
<para>Asserts that two <computeroutput>real</computeroutput> values are within the given tolerance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="552" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="552" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Assertions for NULL comparison</header>
      <description><para>These macros should be used instead of <computeroutput>(EXPECT|ASSERT)_EQ(NULL, ...)</computeroutput>, because Google Test doesn&apos;t support the NULL comparison with xlC++ 12.1 on BG/Q. </para></description>
      <memberdef kind="define" id="group__module__testutils_1gab0e3aeeef45655e39e4a0d99bf434faf" prot="public" static="no">
        <name>EXPECT_NULL</name>
        <param><defname>val</defname></param>
        <initializer>EXPECT_EQ((void *) NULL, val)</initializer>
        <briefdescription>
<para>Asserts that a pointer is null. </para>        </briefdescription>
        <detaileddescription>
<para>Works exactly like EXPECT_EQ comparing with a null pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="570" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="570" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__testutils_1ga7846505c9b466e811f48e74345067ec6" prot="public" static="no">
        <name>ASSERT_NULL</name>
        <param><defname>val</defname></param>
        <initializer>ASSERT_EQ((void *) NULL, val)</initializer>
        <briefdescription>
<para>Asserts that a pointer is null. </para>        </briefdescription>
        <detaileddescription>
<para>Works exactly like ASSERT_EQ comparing with a null pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="575" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="575" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__module__testutils_1gad7a0c1ac11a9748556948309218fc08a" prot="public" static="no">
        <name>ReferenceDataMode</name>
        <enumvalue id="group__module__testutils_1ggad7a0c1ac11a9748556948309218fc08aaf5623014171529e1db8e56212300eb02" prot="public">
          <name>erefdataCompare</name>
          <briefdescription>
<para>Compare to existing reference data. </para>          </briefdescription>
          <detaileddescription>
<para>If reference data does not exist, or if the test results differ from those in the reference data, the test fails. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__testutils_1ggad7a0c1ac11a9748556948309218fc08aa00a47e9712009f3cf96d99a29e9624fe" prot="public">
          <name>erefdataCreateMissing</name>
          <briefdescription>
<para>Create missing reference data. </para>          </briefdescription>
          <detaileddescription>
<para>If reference data does not exist for a test, that test behaves as if <ref refid="group__module__testutils_1ggad7a0c1ac11a9748556948309218fc08aa67803fee1c34e6e1926d843157533d50" kindref="member">erefdataUpdateAll</ref> had been specified. Tests for which reference data exists, behave like with <ref refid="group__module__testutils_1ggad7a0c1ac11a9748556948309218fc08aaf5623014171529e1db8e56212300eb02" kindref="member">erefdataCompare</ref>. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__testutils_1ggad7a0c1ac11a9748556948309218fc08aab551acebd822aba51d7f40993b418988" prot="public">
          <name>erefdataUpdateChanged</name>
          <briefdescription>
<para>Update reference data that does not pass comparison. </para>          </briefdescription>
          <detaileddescription>
<para>Tests utilizing reference data should always pass in this mode unless there is an I/O error. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__testutils_1ggad7a0c1ac11a9748556948309218fc08aa67803fee1c34e6e1926d843157533d50" prot="public">
          <name>erefdataUpdateAll</name>
          <briefdescription>
<para>Update reference data, overwriting old data. </para>          </briefdescription>
          <detaileddescription>
<para>Tests utilizing reference data should always pass in this mode unless there is an I/O error. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Mode of operation for reference data handling. </para>        </briefdescription>
        <detaileddescription>
<para> <libinternal /> There should be no need to use this type outside the test utility module. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="73" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="72" bodyend="103"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__module__testutils_1ga6b2b79eb69558fee27e1832a43b1e6b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::initMPIOutput</definition>
        <argsstring>()</argsstring>
        <name>initMPIOutput</name>
        <briefdescription>
<para>Customizes test output and test failure handling for MPI runs. </para>        </briefdescription>
        <detaileddescription>
<para>Only one rank should report the test result. Errors detected on a subset of ranks need to be reported individually, and as an overall failure.</para><para>On non-MPI builds, does nothing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/mpi-printer.h" line="61" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/mpi-printer.cpp" bodystart="185" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1gaca906b8c921bc54965ffa4750d6bfbc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ReferenceDataEntry::EntryPointer</type>
        <definition>ReferenceDataEntry::EntryPointer gmx::test::readReferenceDataFile</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>readReferenceDataFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Loads reference data from an XML file. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1Path" kindref="compound">Path</ref> to the file from which the data is loaded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Root entry for the reference data parsed from the file. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1test_1_1TestException" kindref="compound">TestException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if there is a problem reading the file. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata-xml.cpp" line="205" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata-xml.cpp" bodystart="205" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1ga20a6368a3b167869311f158b47d07741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::writeReferenceDataFile</definition>
        <argsstring>(const std::string &amp;path, const ReferenceDataEntry &amp;root)</argsstring>
        <name>writeReferenceDataFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const ReferenceDataEntry &amp;</type>
          <declname>root</declname>
        </param>
        <briefdescription>
<para>Saves reference data to an XML file. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1Path" kindref="compound">Path</ref> to the file to which the data is saved. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">root</parametername>
</parameternamelist>
<parameterdescription>
<para>Root entry for the reference data to write. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1test_1_1TestException" kindref="compound">TestException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if there is a problem writing the file. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata-xml.cpp" line="351" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata-xml.cpp" bodystart="351" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1gac88155b9b78810f4117349514b93fe00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::initReferenceData</definition>
        <argsstring>(IOptionsContainer *options)</argsstring>
        <name>initReferenceData</name>
        <param>
          <type>IOptionsContainer *</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Initializes reference data handling. </para>        </briefdescription>
        <detaileddescription>
<para> <libinternal /> Adds command-line options to <computeroutput>options</computeroutput> to set the reference data mode. By default, <ref refid="group__module__testutils_1ggad7a0c1ac11a9748556948309218fc08aaf5623014171529e1db8e56212300eb02" kindref="member">erefdataCompare</ref> is used, but <computeroutput>--ref-data create</computeroutput> or <computeroutput>--ref-data update</computeroutput> can be used to change it.</para><para>This function is automatically called by <ref refid="group__module__testutils_1ga5b50a220f4fd9b9fdafd4fd6fab83bbe" kindref="member">initTestUtils()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" line="208" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="208" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1gae9b29d32f4bd98d7af90115c230709d4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>inline::testing::AssertionResult</type>
        <definition>static inline ::testing::AssertionResult gmx::test::plainAssertHelper</definition>
        <argsstring>(const char *, const ::testing::AssertionResult &amp;expr)</argsstring>
        <name>plainAssertHelper</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>const ::testing::AssertionResult &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Helper method for <computeroutput>(EXPECT|ASSERT)_PLAIN</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="584" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="584" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1ga5b50a220f4fd9b9fdafd4fd6fab83bbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::initTestUtils</definition>
        <argsstring>(const char *dataPath, const char *tempPath, bool usesMpi, int *argc, char ***argv)</argsstring>
        <name>initTestUtils</name>
        <param>
          <type>const char *</type>
          <declname>dataPath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tempPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>usesMpi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Initializes the test utilities library. </para>        </briefdescription>
        <detaileddescription>
<internal><para>Does not throw. Terminates the program with a non-zero error code if an error occurs.</para><para>This function is automatically called by <ref refid="unittest__main_8cpp" kindref="compound">unittest_main.cpp</ref>. </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testinit.cpp" line="160" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testinit.cpp" bodystart="160" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1gab5da2af9203abbde7d455d49f6453c76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::finalizeTestUtils</definition>
        <argsstring>()</argsstring>
        <name>finalizeTestUtils</name>
        <briefdescription>
<para>Finalizes the test utilities library. </para>        </briefdescription>
        <detaileddescription>
<internal><para>Does not throw. Terminates the program with a non-zero error code if an error occurs.</para><para>This function is automatically called by <ref refid="unittest__main_8cpp" kindref="compound">unittest_main.cpp</ref>. </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testinit.cpp" line="257" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testinit.cpp" bodystart="257" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1ga9b0da354984c1f3ef4e6530d54204cc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::registerTestOptions</definition>
        <argsstring>(const char *name, TestOptionsProvider *provider)</argsstring>
        <name>registerTestOptions</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>TestOptionsProvider *</type>
          <declname>provider</declname>
        </param>
        <briefdescription>
<para>Registers a test option provider with the test framework. </para>        </briefdescription>
        <detaileddescription>
<para> <libinternal /> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the options provider (for ordering). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">provider</parametername>
</parameternamelist>
<parameterdescription>
<para>The provider to register. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tMPI::system_error</parametername>
</parameternamelist>
<parameterdescription>
<para>on mutex failures.</para></parameterdescription>
</parameteritem>
</parameterlist>
Typically not used directly in test code, but through the <ref refid="group__module__testutils_1gad8c14b8ddce6c8a7852915ac57f3b52a" kindref="member">GMX_TEST_OPTIONS</ref> macro.</para><para>This gets called from constructors for global variables, so ideally it would not throw to avoid unhandled exceptions. But since this is only test code, it is not worth the effort to try to remove those rare exceptions (mutex failures and out-of-memory from STL). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testoptions.cpp" line="109" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testoptions.cpp" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1gabca45f04287813b96ad94839f9a10cb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::initTestOptions</definition>
        <argsstring>(IOptionsContainer *options)</argsstring>
        <name>initTestOptions</name>
        <param>
          <type>IOptionsContainer *</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Initializes the options from all registered test providers. </para>        </briefdescription>
        <detaileddescription>
<para> <libinternal /> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>The options are added here.</para></parameterdescription>
</parameteritem>
</parameterlist>
This is called automatically by <ref refid="group__module__testutils_1ga5b50a220f4fd9b9fdafd4fd6fab83bbe" kindref="member">initTestUtils()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testoptions.cpp" line="114" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testoptions.cpp" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1gaad10037356014d0ba6ab4599f38ca3f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FloatType</type>
          </param>
        </templateparamlist>
        <type>FloatType</type>
        <definition>FloatType anonymous_namespace{testasserts_tests.cpp}::addUlps</definition>
        <argsstring>(FloatType value, int ulps)</argsstring>
        <name>addUlps</name>
        <param>
          <type>FloatType</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ulps</declname>
        </param>
        <briefdescription>
<para>Helper to produce floating-point numbers with specified ULP difference. </para>        </briefdescription>
        <detaileddescription>
<para>This doesn&apos;t work if the value would change sign. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/tests/testasserts_tests.cpp" line="61" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/tests/testasserts_tests.cpp" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1gad25b9666492f99265f71a3c6da9e2a1b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FloatingPointTolerance</type>
        <definition>static FloatingPointTolerance ulpTolerance</definition>
        <argsstring>(gmx_uint64_t ulpDiff)</argsstring>
        <name>ulpTolerance</name>
        <param>
          <type>gmx_uint64_t</type>
          <declname>ulpDiff</declname>
        </param>
        <briefdescription>
<para>Creates a tolerance that only allows a specified ULP difference. </para>        </briefdescription>
        <detaileddescription>
<para>The tolerance uses the given ULP value for both precisions, i.e., double precision will have much stricter tolerance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="362" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="362" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1gad4123626be56582b11ef6accf715dbe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FloatingPointTolerance</type>
        <definition>FloatingPointTolerance relativeToleranceAsFloatingPoint</definition>
        <argsstring>(double magnitude, double tolerance)</argsstring>
        <name>relativeToleranceAsFloatingPoint</name>
        <param>
          <type>double</type>
          <declname>magnitude</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
<para>Creates a tolerance that allows a difference in two compared values that is relative to the given magnitude. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">magnitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Magnitude of the numbers the computation operates in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative tolerance permitted (e.g. 1e-4).</para></parameterdescription>
</parameteritem>
</parameterlist>
In addition to setting an ULP tolerance equivalent to <computeroutput>tolerance</computeroutput> for both precisions, this sets the absolute tolerance such that values close to zero (in general, smaller than <computeroutput>magnitude</computeroutput>) do not fail the check if they differ by less than <computeroutput>tolerance</computeroutput> evaluated at <computeroutput>magnitude</computeroutput>. This accounts for potential loss of precision for small values, and should be used when accuracy of values much less than <computeroutput>magnitude</computeroutput> do not matter for correctness.</para><para>The ULP tolerance for different precisions will be different to make them both match <computeroutput>tolerance</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1ga665e9f7521e7815f6e5eac6bb375f167" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FloatingPointTolerance</type>
        <definition>static FloatingPointTolerance relativeToleranceAsPrecisionDependentUlp</definition>
        <argsstring>(double magnitude, gmx_uint64_t singleUlpDiff, gmx_uint64_t doubleUlpDiff)</argsstring>
        <name>relativeToleranceAsPrecisionDependentUlp</name>
        <param>
          <type>double</type>
          <declname>magnitude</declname>
        </param>
        <param>
          <type>gmx_uint64_t</type>
          <declname>singleUlpDiff</declname>
        </param>
        <param>
          <type>gmx_uint64_t</type>
          <declname>doubleUlpDiff</declname>
        </param>
        <briefdescription>
<para>Creates a tolerance that allows a precision-dependent relative difference in a complex computation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">magnitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Magnitude of the numbers the computation operates in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">singleUlpDiff</parametername>
</parameternamelist>
<parameterdescription>
<para>Expected accuracy of single-precision computation (in ULPs). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">doubleUlpDiff</parametername>
</parameternamelist>
<parameterdescription>
<para>Expected accuracy of double-precision computation (in ULPs).</para></parameterdescription>
</parameteritem>
</parameterlist>
This works as <ref refid="group__module__testutils_1ga5395a4d9809d729093751f7a4e5600ed" kindref="member">relativeToleranceAsUlp()</ref>, but allows setting the ULP difference separately for the different precisions. This supports cases where the double-precision calculation can acceptably has a higher ULP difference, but relaxing the single-precision tolerance would lead to an unnecessarily loose test. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="409" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="409" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1ga56f5fffbd8acc6dccade6feafc2e0f59" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FloatingPointTolerance</type>
        <definition>static FloatingPointTolerance absoluteTolerance</definition>
        <argsstring>(double tolerance)</argsstring>
        <name>absoluteTolerance</name>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
<para>Creates a tolerance that allows a specified absolute difference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="424" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="424" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1ga5395a4d9809d729093751f7a4e5600ed" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FloatingPointTolerance</type>
        <definition>static FloatingPointTolerance relativeToleranceAsUlp</definition>
        <argsstring>(double magnitude, gmx_uint64_t ulpDiff)</argsstring>
        <name>relativeToleranceAsUlp</name>
        <param>
          <type>double</type>
          <declname>magnitude</declname>
        </param>
        <param>
          <type>gmx_uint64_t</type>
          <declname>ulpDiff</declname>
        </param>
        <briefdescription>
<para>Creates a tolerance that allows a relative difference in a complex computation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">magnitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Magnitude of the numbers the computation operates in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ulpDiff</parametername>
</parameternamelist>
<parameterdescription>
<para>Expected accuracy of the computation (in ULPs).</para></parameterdescription>
</parameteritem>
</parameterlist>
In addition to setting the ULP tolerance as <ref refid="group__module__testutils_1gad25b9666492f99265f71a3c6da9e2a1b" kindref="member">ulpTolerance()</ref>, this sets the absolute tolerance such that values close to zero (in general, smaller than <computeroutput>magnitude</computeroutput>) do not fail the check if they differ by less than <computeroutput>ulpDiff</computeroutput> evaluated at <computeroutput>magnitude</computeroutput>. This accounts for potential loss of precision for small values, and should be used when accuracy of values much less than <computeroutput>magnitude</computeroutput> do not matter for correctness. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="447" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="447" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="group__module__testutils_1gab00e5c316ac0e80559fd0e24c8a36a7e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FloatingPointTolerance</type>
        <definition>static FloatingPointTolerance defaultRealTolerance</definition>
        <argsstring>()</argsstring>
        <name>defaultRealTolerance</name>
        <briefdescription>
<para>Returns the default tolerance for comparing <computeroutput>real</computeroutput> numbers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="457" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="457" bodyend="460"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__module__testutils_1ga8ed3c4e4b4ce3220687cd59aaca59905" prot="public" static="no">
        <name>EXPECT_PLAIN</name>
        <param><defname>expr</defname></param>
        <briefdescription>
<para>Assert for predicates that return AssertionResult and produce a full failure message. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>expr</computeroutput> should evaluate to AssertionResult, and on failure the message from the result is used as-is, unlike in EXPECT_TRUE(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="599" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="599" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__testutils_1ga97a0194de1d98402f697adee0fe39a98" prot="public" static="no">
        <name>ASSERT_PLAIN</name>
        <param><defname>expr</defname></param>
        <briefdescription>
<para>Assert for predicates that return AssertionResult and produce a full failure message. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>expr</computeroutput> should evaluate to AssertionResult, and on failure the message from the result is used as-is, unlike in ASSERT_TRUE(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" line="609" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testasserts.h" bodystart="609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__module__testutils_1gad8c14b8ddce6c8a7852915ac57f3b52a" prot="public" static="no">
        <name>GMX_TEST_OPTIONS</name>
        <param><defname>name</defname></param>
        <param><defname>options</defname></param>
        <briefdescription>
<para>Macro to add additional command-line options for the test binary. </para>        </briefdescription>
        <detaileddescription>
<para> <libinternal /> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique name for the set of options. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Placeholder name for an <ref refid="classgmx_1_1Options" kindref="compound">gmx::Options</ref> object for adding options.</para></parameterdescription>
</parameteritem>
</parameterlist>
The macro should be followed by a block that adds the desired command-line options to <computeroutput>options</computeroutput> using <ref refid="classgmx_1_1Options_1a7add46682b6c65d3de585e7942df7807" kindref="member">gmx::Options::addOption()</ref>. <ref refid="group__module__options" kindref="compound">Extensible Handling of Options (options)</ref> provides an overview of the options machinery.</para><para><computeroutput>name</computeroutput> must be unique within the executable to which the options are added. If the macro is within an unnamed namespace, then it is sufficient that it is unique within the file.</para><para>Typical usage: <programlisting><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="basicoptions_8h" kindref="compound">gromacs/options/basicoptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ioptionscontainer_8h" kindref="compound">gromacs/options/ioptionscontainer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="testoptions_8h" kindref="compound">testutils/testoptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gmx</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_optionValue<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment">//!<sp/>\cond</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><ref refid="group__module__testutils_1gad8c14b8ddce6c8a7852915ac57f3b52a" kindref="member">GMX_TEST_OPTIONS</ref>(MyTestOptions,<sp/>options)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>options-&gt;<ref refid="classgmx_1_1IOptionsContainer_1af5fa735cc7aeeafd44285fdd66461404" kindref="member">addOption</ref>(BooleanOption(</highlight><highlight class="stringliteral">&quot;flag&quot;</highlight><highlight class="normal">).<ref refid="namespacegmx_1a9c1227e97a6084a280a611c2934c8ee1" kindref="member">store</ref>(&amp;g_optionValue)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.description(</highlight><highlight class="stringliteral">&quot;My<sp/>description&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">}</highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment">//!<sp/>\endcond</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gmx</highlight></codeline>
</programlisting></para><para><computeroutput>\cond</computeroutput> and <computeroutput>\endcond</computeroutput> statements are necessary around the macro to avoid Doxygen warnings.</para><para>One macro invocation per an added option, with more of the implementation details hidden inside the macro, could be nicer. But that requires more elaborate macro machinery, so it is probably not worth the effort and complexity. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testoptions.h" line="165" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/testoptions.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Common helper classes and functions for writing tests using Google Test. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal /> </para><para> <libinternal />  General documentation for the testing in GROMACS can be found in the <ulink url="../../dev-manual/index.html">developer guide</ulink>. This page provides an overview of the actual API provided by the <computeroutput>testutils</computeroutput> module.</para><para>There are several distinct functionalities provided:<itemizedlist>
<listitem><para><ref refid="classgmx_1_1test_1_1TestFileManager" kindref="compound">gmx::test::TestFileManager</ref> (in <ref refid="testfilemanager_8h" kindref="compound">testfilemanager.h</ref>) provides functionality for locating test input files from the source directory and managing temporary files that need to be created during the test.</para></listitem><listitem><para><ref refid="classgmx_1_1test_1_1TestFileInputRedirector" kindref="compound">gmx::test::TestFileInputRedirector</ref> (in <ref refid="testfileredirector_8h" kindref="compound">testfileredirector.h</ref>) provides functionality for capturing file existence checks in code that uses <ref refid="classgmx_1_1IFileInputRedirector" kindref="compound">gmx::IFileInputRedirector</ref>.</para></listitem><listitem><para><ref refid="classgmx_1_1test_1_1TestFileOutputRedirector" kindref="compound">gmx::test::TestFileOutputRedirector</ref> (in <ref refid="testfileredirector_8h" kindref="compound">testfileredirector.h</ref>) provides functionality for capturing file output (including <computeroutput>stdout</computeroutput>) from code that uses <ref refid="classgmx_1_1IFileOutputRedirector" kindref="compound">gmx::IFileOutputRedirector</ref>, and checking that output against reference data.</para></listitem><listitem><para><ref refid="classgmx_1_1test_1_1InteractiveTestHelper" kindref="compound">gmx::test::InteractiveTestHelper</ref> (in <ref refid="interactivetest_8h" kindref="compound">interactivetest.h</ref>) provides a helper class for testing an interactive session that uses <ref refid="classgmx_1_1TextInputStream" kindref="compound">gmx::TextInputStream</ref> and <ref refid="classgmx_1_1TextOutputStream" kindref="compound">gmx::TextOutputStream</ref> for prompting input and printing status messages.</para></listitem><listitem><para><ref refid="group__module__testutils_1gad8c14b8ddce6c8a7852915ac57f3b52a" kindref="member">GMX_TEST_OPTIONS</ref> macro provides facilities for adding custom command line options for the test binary.</para></listitem><listitem><para><ref refid="testasserts_8h" kindref="compound">testasserts.h</ref> provides several custom test assertions for better exception and floating-point handling than built-in Google Test assertions.</para></listitem><listitem><para><ref refid="classgmx_1_1test_1_1TestReferenceData" kindref="compound">gmx::test::TestReferenceData</ref> and related classes (in <ref refid="refdata_8h" kindref="compound">refdata.h</ref>) provide utilities to write regression-style tests that check that the test produces the same results as an earlier run of the same test. See <ref refid="page_refdata" kindref="compound">Using reference data in C++ tests</ref> for more details.</para></listitem><listitem><para><ref refid="classgmx_1_1test_1_1CommandLine" kindref="compound">gmx::test::CommandLine</ref> and related classes (in <ref refid="cmdlinetest_8h" kindref="compound">cmdlinetest.h</ref>) provide utilities for constructing command line argument arrays for use in tests that invoke actual commands.</para></listitem><listitem><para><ref refid="classgmx_1_1test_1_1StringTestBase" kindref="compound">gmx::test::StringTestBase</ref> provides a test fixture for tests that need to test long strings for correctness.</para></listitem><listitem><para><ref refid="classgmx_1_1test_1_1IntegrationTestFixture" kindref="compound">gmx::test::IntegrationTestFixture</ref> provides a test fixture for tests that execute legacy code where <computeroutput>stdin</computeroutput> reading etc. cannot be easily mocked.</para></listitem></itemizedlist>
</para><para>Additionally, <ref refid="testinit_8h" kindref="compound">testinit.h</ref> and <ref refid="mpi-printer_8h" kindref="compound">mpi-printer.h</ref>, and their corresponding source files, provide functionality that is not visible on the API level: they provide initialization routines for the above functionality, which are automatically called by the main() function provided in <ref refid="unittest__main_8cpp" kindref="compound">unittest_main.cpp</ref>.</para><para><ref refid="mpi-printer_8h" kindref="compound">mpi-printer.h</ref> provides a Google Test listener that is installed when the tests are compiled with MPI. This listener allows the test binary to be run on multiple MPI ranks, and synchronizes the execution and output from the test cases, as well as makes the test fail on even if an assertion fails only on one rank.</para><internal></internal>
    </detaileddescription>
  </compounddef>
</doxygen>
