<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1test_1_1TestReferenceChecker" kind="class" prot="public">
    <compoundname>gmx::test::TestReferenceChecker</compoundname>
    <includes local="no">testutils/refdata.h</includes>
    <innerclass refid="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl" prot="public">gmx::test::TestReferenceChecker::Impl</innerclass>
      <sectiondef kind="user-defined">
      <header>Overloaded versions of simple checker methods</header>
      <description><para>These methods provide overloads under a single name for all the methods <ref refid="classgmx_1_1test_1_1TestReferenceChecker_1aebf0890f8e9d033dbeb36c80462413aa" kindref="member">checkBoolean()</ref>, <ref refid="classgmx_1_1test_1_1TestReferenceChecker_1a38f9e5cd7ec4b2a78ff4b1fbaa8b5f44" kindref="member">checkString()</ref>, <ref refid="classgmx_1_1test_1_1TestReferenceChecker_1ab0c7eca872857d85e68a6dd7368fa799" kindref="member">checkReal()</ref> and <ref refid="classgmx_1_1test_1_1TestReferenceChecker_1a32b9421866c3c17bcffc1d347291f702" kindref="member">checkVector()</ref>. They are provided mainly to allow template implementations (such as <ref refid="classgmx_1_1test_1_1TestReferenceChecker_1af2cd9cbf54682bec0b599675a3563724" kindref="member">checkSequence()</ref>). Typically callers should use the individually named versions for greater clarity. </para></description>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1afb3022852336fdd06d5a94a648c6b811" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkValue</definition>
        <argsstring>(bool value, const char *id)</argsstring>
        <name>checkValue</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single boolean value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="365" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="365" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a337cd319b513994c3e86d98766302fb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkValue</definition>
        <argsstring>(const char *value, const char *id)</argsstring>
        <name>checkValue</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single string value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="370" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="370" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a324b4c98f8fd45e4d6b9870e3dfb2711" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkValue</definition>
        <argsstring>(const std::string &amp;value, const char *id)</argsstring>
        <name>checkValue</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single string value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="375" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="375" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a694c5bdee169333bd5b7350d5cf3c417" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkValue</definition>
        <argsstring>(int value, const char *id)</argsstring>
        <name>checkValue</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single integer value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="380" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="380" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a977e9852e9eba99f075d7a7dc7a1d39d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkValue</definition>
        <argsstring>(gmx_int64_t value, const char *id)</argsstring>
        <name>checkValue</name>
        <param>
          <type>gmx_int64_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single integer value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="385" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="385" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1abbc4559a2fd8ff15f65295fddaba2413" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkValue</definition>
        <argsstring>(gmx_uint64_t value, const char *id)</argsstring>
        <name>checkValue</name>
        <param>
          <type>gmx_uint64_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single integer value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="390" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="390" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a5ccfa06551be602c38abca28da483020" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkValue</definition>
        <argsstring>(float value, const char *id)</argsstring>
        <name>checkValue</name>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single single-precision floating point value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="395" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="395" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a5375ce0953d585c6dd2d87b48547cbea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkValue</definition>
        <argsstring>(double value, const char *id)</argsstring>
        <name>checkValue</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single double-precision floating point value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="400" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="400" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a68417145afcaa96402d00483522916cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkValue</definition>
        <argsstring>(const int value[3], const char *id)</argsstring>
        <name>checkValue</name>
        <param>
          <type>const int</type>
          <declname>value</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a vector of three integer values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="405" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="405" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a0c254f2a7eea738576ca7bab1a999b38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkValue</definition>
        <argsstring>(const float value[3], const char *id)</argsstring>
        <name>checkValue</name>
        <param>
          <type>const float</type>
          <declname>value</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a vector of three single-precision floating point values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="410" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="410" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1ac87a991f91e5fb7ceeaeeaf387062c85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkValue</definition>
        <argsstring>(const double value[3], const char *id)</argsstring>
        <name>checkValue</name>
        <param>
          <type>const double</type>
          <declname>value</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a vector of three double-precision floating point values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="415" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="415" bodyend="418"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgmx_1_1test_1_1TestReferenceChecker_1a1f374874acf13826d75ef1523df47116" prot="private" static="no" mutable="no">
        <type><ref refid="classgmx_1_1PrivateImplPointer" kindref="compound">PrivateImplPointer</ref>&lt; <ref refid="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl" kindref="compound">Impl</ref> &gt;</type>
        <definition>PrivateImplPointer&lt;Impl&gt; gmx::test::TestReferenceChecker::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="536" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="536" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classgmx_1_1test_1_1TestReferenceChecker_1aaa15eff193010f3a4b44dbc8109af6ad" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TestReferenceData</definition>
        <argsstring></argsstring>
        <name>TestReferenceData</name>
        <briefdescription>
<para>Needed to expose the constructor only to <ref refid="classgmx_1_1test_1_1TestReferenceData" kindref="compound">TestReferenceData</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="541" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="541" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a254b525b8a7a55d8b7016fb6955b4729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::test::TestReferenceChecker::TestReferenceChecker</definition>
        <argsstring>()</argsstring>
        <name>TestReferenceChecker</name>
        <briefdescription>
<para>Creates a checker that cannot be used for checking. </para>        </briefdescription>
        <detaileddescription>
<para>Attempting to call the check methods generates an assert. It is possible to check whether the checker is initialized by calling <ref refid="classgmx_1_1test_1_1TestReferenceChecker_1a4c1d069312d836f290ebf2aa422c5953" kindref="member">isValid()</ref>. This constructor exists to allow declaring checker variables that will receive their value later without resorting to dynamic allocation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="248" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="631" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a7a44d53b17c9043e1a2a20353d9ab270" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::test::TestReferenceChecker::TestReferenceChecker</definition>
        <argsstring>(const TestReferenceChecker &amp;other)</argsstring>
        <name>TestReferenceChecker</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1TestReferenceChecker" kindref="compound">TestReferenceChecker</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Creates a deep copy of the other checker. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="250" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="641" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a335030d9b52a78b6cab57a5ffbc3723b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::test::TestReferenceChecker::TestReferenceChecker</definition>
        <argsstring>(TestReferenceChecker &amp;&amp;other)</argsstring>
        <name>TestReferenceChecker</name>
        <param>
          <type><ref refid="classgmx_1_1test_1_1TestReferenceChecker" kindref="compound">TestReferenceChecker</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Moves the checker. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="252" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="646" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a6547713ec499a7302c86ddc223a51d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::test::TestReferenceChecker::~TestReferenceChecker</definition>
        <argsstring>()</argsstring>
        <name>~TestReferenceChecker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="253" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="658" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a69102d64f209f3f99eb8d30aa9b35474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1test_1_1TestReferenceChecker" kindref="compound">TestReferenceChecker</ref> &amp;</type>
        <definition>TestReferenceChecker&amp; gmx::test::TestReferenceChecker::operator=</definition>
        <argsstring>(const TestReferenceChecker &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1TestReferenceChecker" kindref="compound">TestReferenceChecker</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Prevents implicit copying during assignment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1ac193427ca61a10938227a4aa1e0e72fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1test_1_1TestReferenceChecker" kindref="compound">TestReferenceChecker</ref> &amp;</type>
        <definition>TestReferenceChecker &amp; gmx::test::TestReferenceChecker::operator=</definition>
        <argsstring>(TestReferenceChecker &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classgmx_1_1test_1_1TestReferenceChecker" kindref="compound">TestReferenceChecker</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assigns a test reference checker. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="258" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="652" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a4c1d069312d836f290ebf2aa422c5953" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::test::TestReferenceChecker::isValid</definition>
        <argsstring>() const </argsstring>
        <name>isValid</name>
        <briefdescription>
<para>Returns whether the checker is initialized. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="261" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="662" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a8263ed14ae942e9f61d8f0718ddaa293" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gmx::test::TestReferenceChecker::operator bool</definition>
        <argsstring>() const </argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Allows testing whether the checker is initialized directly with if. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="263" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="263" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1ad50b745444194c3625a58f2e81937220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::setDefaultTolerance</definition>
        <argsstring>(const FloatingPointTolerance &amp;tolerance)</argsstring>
        <name>setDefaultTolerance</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1FloatingPointTolerance" kindref="compound">FloatingPointTolerance</ref> &amp;</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
<para>Sets the tolerance for floating-point comparisons. </para>        </briefdescription>
        <detaileddescription>
<para>All following floating-point comparisons using this checker will use the new tolerance. Child checkers created with <ref refid="classgmx_1_1test_1_1TestReferenceChecker_1a3fd1541f9033b7fcf199ffb7fd6a7910" kindref="member">checkCompound()</ref> will inherit the tolerance from their parent checker at the time <ref refid="classgmx_1_1test_1_1TestReferenceChecker_1a3fd1541f9033b7fcf199ffb7fd6a7910" kindref="member">checkCompound()</ref> is called.</para><para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="275" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="668" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a10b736179e2a66114f60ba906e7c0bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::test::TestReferenceChecker::checkPresent</definition>
        <argsstring>(bool bPresent, const char *id)</argsstring>
        <name>checkPresent</name>
        <param>
          <type>bool</type>
          <declname>bPresent</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Checks whether a data item is present. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bPresent</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to check for presence or absence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique identifier of the item to check. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if bPresent was true and the data item was found.</para></simplesect>
If <computeroutput>bPresent</computeroutput> is true, checks that a data item with <computeroutput>id</computeroutput> is present, otherwise checks that the data item is absent. If the check fails, a non-fatal Google Test assertion is generated.</para><para>If reference data is being written, the check always succeeds and the return value is <computeroutput>bPresent</computeroutput>.</para><para>The main use of this method is to assign meaning for missing reference data. Example use: <programlisting><codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checker.checkPresent(bHaveVelocities,<sp/></highlight><highlight class="stringliteral">&quot;Velocities&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;check<sp/>the<sp/>velocities&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">*<sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="300" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="675" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a3fd1541f9033b7fcf199ffb7fd6a7910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1test_1_1TestReferenceChecker" kindref="compound">TestReferenceChecker</ref></type>
        <definition>TestReferenceChecker gmx::test::TestReferenceChecker::checkCompound</definition>
        <argsstring>(const char *type, const char *id)</argsstring>
        <name>checkCompound</name>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Initializes comparison of a group of related data items. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>Informational type for the compound. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique identifier for the compound among its siblings. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Checker to use for comparison within the compound.</para></simplesect>
All checks performed with the returned checker only need to have unique ids within the compound, not globally.</para><para>Compound structures can be nested. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="315" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="701" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1aebf0890f8e9d033dbeb36c80462413aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkBoolean</definition>
        <argsstring>(bool value, const char *id)</argsstring>
        <name>checkBoolean</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single boolean value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="318" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="765" bodyend="769"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a38f9e5cd7ec4b2a78ff4b1fbaa8b5f44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkString</definition>
        <argsstring>(const char *value, const char *id)</argsstring>
        <name>checkString</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single string value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="320" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="772" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1ad4ad8f4f22946e28dbdc2dfe8ab47326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkString</definition>
        <argsstring>(const std::string &amp;value, const char *id)</argsstring>
        <name>checkString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single string value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="322" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="780" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1ac5774583c37127643e62a4b4bb5a69c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkTextBlock</definition>
        <argsstring>(const std::string &amp;value, const char *id)</argsstring>
        <name>checkTextBlock</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a multi-line string value. </para>        </briefdescription>
        <detaileddescription>
<para>This method works as <ref refid="classgmx_1_1test_1_1TestReferenceChecker_1a38f9e5cd7ec4b2a78ff4b1fbaa8b5f44" kindref="member">checkString()</ref>, but should be used for long strings that may contain, e.g., newlines. Typically used to check formatted output, and attempts to make the output XML such that it is easier to edit by hand to set the desired output formatting. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="331" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="788" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1abb8d0f46f835599778fa12d12a28acf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkInteger</definition>
        <argsstring>(int value, const char *id)</argsstring>
        <name>checkInteger</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single integer value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="333" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="796" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a913030cb5aa091a9a92de34813ffcf96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkInt64</definition>
        <argsstring>(gmx_int64_t value, const char *id)</argsstring>
        <name>checkInt64</name>
        <param>
          <type>gmx_int64_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single int64 value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="335" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="802" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1ac0884d060961f723e6d93b3047021865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkUInt64</definition>
        <argsstring>(gmx_uint64_t value, const char *id)</argsstring>
        <name>checkUInt64</name>
        <param>
          <type>gmx_uint64_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single uint64 value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="337" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="808" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a31ba9bdb3e27ca53dff300346ada68aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkFloat</definition>
        <argsstring>(float value, const char *id)</argsstring>
        <name>checkFloat</name>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single single-precision floating point value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="339" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="821" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a013b30438e09bf0d448d7ca13a9a86e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkDouble</definition>
        <argsstring>(double value, const char *id)</argsstring>
        <name>checkDouble</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single double-precision floating point value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="341" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="814" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1ab0c7eca872857d85e68a6dd7368fa799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkReal</definition>
        <argsstring>(float value, const char *id)</argsstring>
        <name>checkReal</name>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single floating point value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="343" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="828" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a830071b4f4077c55531cf1a645c16511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkReal</definition>
        <argsstring>(double value, const char *id)</argsstring>
        <name>checkReal</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single floating point value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="345" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="834" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a32b9421866c3c17bcffc1d347291f702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkVector</definition>
        <argsstring>(const int value[3], const char *id)</argsstring>
        <name>checkVector</name>
        <param>
          <type>const int</type>
          <declname>value</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a vector of three integer values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="347" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="847" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a323abaff8b36e0c94af88c1d02d4bb3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkVector</definition>
        <argsstring>(const float value[3], const char *id)</argsstring>
        <name>checkVector</name>
        <param>
          <type>const float</type>
          <declname>value</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a vector of three single-precision floating point values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="349" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="856" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a49b8040bc4c7ef34e2f34b49b2afd2ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkVector</definition>
        <argsstring>(const double value[3], const char *id)</argsstring>
        <name>checkVector</name>
        <param>
          <type>const double</type>
          <declname>value</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a vector of three double-precision floating point values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="351" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="865" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1af3f10879fe252648c4bdaa104dae869f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkRealFromString</definition>
        <argsstring>(const std::string &amp;value, const char *id)</argsstring>
        <name>checkRealFromString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check a single floating-point value from a string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="353" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="840" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1af2cd9cbf54682bec0b599675a3563724" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkSequence</definition>
        <argsstring>(Iterator begin, Iterator end, const char *id)</argsstring>
        <name>checkSequence</name>
        <param>
          <type>Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Generic method to check a sequence of simple values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Input iterator that allows multiple (two) passes. Value type must be one of those accepted by <ref refid="classgmx_1_1test_1_1TestReferenceChecker_1afb3022852336fdd06d5a94a648c6b811" kindref="member">checkValue()</ref>, or implicitly convertible to one. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the start of the range to check. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">end</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the end of the range to check. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique identifier for the sequence among its siblings. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="433" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="433" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1ae1a8225fa98b3b6322d088d010055d07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>class ItemChecker</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkSequence</definition>
        <argsstring>(Iterator begin, Iterator end, const char *id, ItemChecker checkItem)</argsstring>
        <name>checkSequence</name>
        <param>
          <type>Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>ItemChecker</type>
          <declname>checkItem</declname>
        </param>
        <briefdescription>
<para>Generic method to check a sequence of custom values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Input iterator that allows multiple (two) passes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ItemChecker</parametername>
</parameternamelist>
<parameterdescription>
<para>Functor to check an individual value. Signature void(TestReferenceChecker *, const T &amp;), where T is the value type of <computeroutput>Iterator</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the start of the range to check. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">end</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the end of the range to check. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique identifier for the sequence among its siblings. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">checkItem</parametername>
</parameternamelist>
<parameterdescription>
<para>Functor to check an individual item.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method creates a compound checker <computeroutput>compound</computeroutput> within which all values of the sequence are checked. Calls <computeroutput>checkItem(&amp;compound, *i)</computeroutput> with that compound for each iterator <computeroutput>i</computeroutput> in the range [begin, end). <computeroutput>checkItem</computeroutput> should use the various check methods in the passed checker to check each value.</para><para>This method can be used to check a sequence made of compound types. Typically <computeroutput>checkItem</computeroutput> will create a compound within the passed checker to check different aspects of the value that was passed to it. Either NULL or a unique identifier string must be used for the id value of that compound. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="468" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="468" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1ae473056edffa48fa75863c65e517ff18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkSequenceArray</definition>
        <argsstring>(size_t length, const T *values, const char *id)</argsstring>
        <name>checkSequenceArray</name>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check an array of values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of values to check. Should be one of those accepted by <ref refid="classgmx_1_1test_1_1TestReferenceChecker_1afb3022852336fdd06d5a94a648c6b811" kindref="member">checkValue()</ref>, or implicitly convertible to one.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of values to check. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first value to check. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique identifier for the sequence among its siblings.</para></parameterdescription>
</parameteritem>
</parameterlist>
This is a convenience method that delegates all work to <ref refid="classgmx_1_1test_1_1TestReferenceChecker_1af2cd9cbf54682bec0b599675a3563724" kindref="member">checkSequence()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="494" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="494" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a1cdbbfcc92ee5207704250631542eeb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::test::TestReferenceChecker::checkEmptySequence</definition>
        <argsstring>(const char *id)</argsstring>
        <name>checkEmptySequence</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Convenience method for checking that a sequence is empty. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique identifier for the sequence among its siblings.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method provides a convenient solution for a case where there is implicitly a sequence to be checked, but there is no pointer available to the values since the sequence is empty. Since this method does not require the type of the values, it can be used in such cases easily. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="510" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a4f2502a02055396d6d9cb6a4fafdc08e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1test_1_1TestReferenceChecker" kindref="compound">TestReferenceChecker</ref></type>
        <definition>TestReferenceChecker gmx::test::TestReferenceChecker::checkSequenceCompound</definition>
        <argsstring>(const char *id, size_t length)</argsstring>
        <name>checkSequenceCompound</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Initializes a compound for a sequence of items. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique identifier for the sequence among its siblings. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of items that will be in the sequence. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Checker to use for comparison within the sequence.</para></simplesect>
This method can be used to check custom sequences where <ref refid="classgmx_1_1test_1_1TestReferenceChecker_1af2cd9cbf54682bec0b599675a3563724" kindref="member">checkSequence()</ref> is not appropriate. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="522" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="875" bodyend="880"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceChecker_1a9d8c6801d8c59fbd9c9be312626185be" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::test::TestReferenceChecker::TestReferenceChecker</definition>
        <argsstring>(Impl *impl)</argsstring>
        <name>TestReferenceChecker</name>
        <param>
          <type><ref refid="classgmx_1_1test_1_1TestReferenceChecker_1_1Impl" kindref="compound">Impl</ref> *</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
<para>Constructs a checker with a specific internal state. </para>        </briefdescription>
        <detaileddescription>
<para>Is private to only allow users of this class to create instances using <ref refid="classgmx_1_1test_1_1TestReferenceData_1a2c751bb515d71cebb3ad802ec6a5eb0c" kindref="member">TestReferenceData::rootChecker()</ref> or <ref refid="classgmx_1_1test_1_1TestReferenceChecker_1a3fd1541f9033b7fcf199ffb7fd6a7910" kindref="member">checkCompound()</ref> (or by copying). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="534" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="636" bodyend="639"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Handles comparison to test reference data. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal /> Every check*() method takes an id string as the last parameter. This id is used to uniquely identify the value in the reference data, and it makes the output XML more human-friendly and more robust to errors. The id can be NULL; in this case, multiple elements with no id are created, and they will be matched in the same order as in which they are created. The <ref refid="classgmx_1_1test_1_1TestReferenceChecker_1a3fd1541f9033b7fcf199ffb7fd6a7910" kindref="member">checkCompound()</ref> method can be used to create a set of reference values grouped together. In this case, all check*() calls using the returned child <ref refid="classgmx_1_1test_1_1TestReferenceChecker" kindref="compound">TestReferenceChecker</ref> object will create the reference data within this group, and the ids only need to be unique within the compound. Compounds can be nested.</para><para>For usage example, see <ref refid="classgmx_1_1test_1_1TestReferenceData" kindref="compound">TestReferenceData</ref>.</para><para>Copies of this class behave have independent internal state. </para>    </detaileddescription>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="236" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="235" bodyend="542"/>
    <listofallmembers>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1aebf0890f8e9d033dbeb36c80462413aa" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkBoolean</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a3fd1541f9033b7fcf199ffb7fd6a7910" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkCompound</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a013b30438e09bf0d448d7ca13a9a86e2" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkDouble</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a1cdbbfcc92ee5207704250631542eeb7" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkEmptySequence</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a31ba9bdb3e27ca53dff300346ada68aa" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkFloat</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a913030cb5aa091a9a92de34813ffcf96" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkInt64</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1abb8d0f46f835599778fa12d12a28acf9" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkInteger</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a10b736179e2a66114f60ba906e7c0bb6" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkPresent</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1ab0c7eca872857d85e68a6dd7368fa799" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkReal</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a830071b4f4077c55531cf1a645c16511" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkReal</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1af3f10879fe252648c4bdaa104dae869f" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkRealFromString</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1af2cd9cbf54682bec0b599675a3563724" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkSequence</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1ae1a8225fa98b3b6322d088d010055d07" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkSequence</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1ae473056edffa48fa75863c65e517ff18" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkSequenceArray</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a4f2502a02055396d6d9cb6a4fafdc08e" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkSequenceCompound</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a38f9e5cd7ec4b2a78ff4b1fbaa8b5f44" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkString</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1ad4ad8f4f22946e28dbdc2dfe8ab47326" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkString</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1ac5774583c37127643e62a4b4bb5a69c8" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkTextBlock</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1ac0884d060961f723e6d93b3047021865" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkUInt64</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1afb3022852336fdd06d5a94a648c6b811" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkValue</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a337cd319b513994c3e86d98766302fb5" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkValue</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a324b4c98f8fd45e4d6b9870e3dfb2711" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkValue</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a694c5bdee169333bd5b7350d5cf3c417" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkValue</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a977e9852e9eba99f075d7a7dc7a1d39d" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkValue</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1abbc4559a2fd8ff15f65295fddaba2413" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkValue</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a5ccfa06551be602c38abca28da483020" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkValue</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a5375ce0953d585c6dd2d87b48547cbea" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkValue</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a68417145afcaa96402d00483522916cb" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkValue</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a0c254f2a7eea738576ca7bab1a999b38" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkValue</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1ac87a991f91e5fb7ceeaeeaf387062c85" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkValue</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a32b9421866c3c17bcffc1d347291f702" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkVector</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a323abaff8b36e0c94af88c1d02d4bb3c" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkVector</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a49b8040bc4c7ef34e2f34b49b2afd2ab" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>checkVector</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a1f374874acf13826d75ef1523df47116" prot="private" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>impl_</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a4c1d069312d836f290ebf2aa422c5953" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>isValid</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a8263ed14ae942e9f61d8f0718ddaa293" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>operator bool</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a69102d64f209f3f99eb8d30aa9b35474" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>operator=</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1ac193427ca61a10938227a4aa1e0e72fb" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>operator=</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1ad50b745444194c3625a58f2e81937220" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>setDefaultTolerance</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a254b525b8a7a55d8b7016fb6955b4729" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>TestReferenceChecker</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a7a44d53b17c9043e1a2a20353d9ab270" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>TestReferenceChecker</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a335030d9b52a78b6cab57a5ffbc3723b" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>TestReferenceChecker</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a9d8c6801d8c59fbd9c9be312626185be" prot="private" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>TestReferenceChecker</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1aaa15eff193010f3a4b44dbc8109af6ad" prot="private" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>TestReferenceData</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceChecker_1a6547713ec499a7302c86ddc223a51d68" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceChecker</scope><name>~TestReferenceChecker</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
