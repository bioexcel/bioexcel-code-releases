<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="namespacegmx_1_1internal" kind="namespace">
    <compoundname>gmx::internal</compoundname>
    <innerclass refid="classgmx_1_1internal_1_1AnalysisDataHandleImpl" prot="public">gmx::internal::AnalysisDataHandleImpl</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1AnalysisDataStorageImpl" prot="public">gmx::internal::AnalysisDataStorageImpl</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1AnalysisDataStorageFrameData" prot="public">gmx::internal::AnalysisDataStorageFrameData</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1BasicAverageHistogramModule" prot="public">gmx::internal::BasicAverageHistogramModule</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1BasicHistogramImpl" prot="public">gmx::internal::BasicHistogramImpl</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1EnumIndexStoreInterface" prot="public">gmx::internal::EnumIndexStoreInterface</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1EnumIndexStore" prot="public">gmx::internal::EnumIndexStore</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1OptionsImpl" prot="public">gmx::internal::OptionsImpl</innerclass>
    <innerclass refid="structgmx_1_1internal_1_1highBitCounter" prot="public">gmx::internal::highBitCounter</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1AnalysisNeighborhoodSearchImpl" prot="public">gmx::internal::AnalysisNeighborhoodSearchImpl</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1AnalysisNeighborhoodPairSearchImpl" prot="public">gmx::internal::AnalysisNeighborhoodPairSearchImpl</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1SelectionData" prot="public">gmx::internal::SelectionData</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1ExceptionData" prot="public">gmx::internal::ExceptionData</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1IExceptionInfo" prot="public">gmx::internal::IExceptionInfo</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1FileStreamImpl" prot="public">gmx::internal::FileStreamImpl</innerclass>
    <innernamespace refid="namespacegmx_1_1internal_1_1anonymous__namespace_02selection_8cpp_03">gmx::internal::anonymous_namespace{selection.cpp}</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacegmx_1_1internal_1a10329904859eb4035ac1a2464a9745b2" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="classgmx_1_1AnalysisDataStorageFrame" kindref="compound">AnalysisDataStorageFrame</ref> &gt;</type>
        <definition>typedef std::unique_ptr&lt;AnalysisDataStorageFrame&gt; gmx::internal::AnalysisDataFrameBuilderPointer</definition>
        <argsstring></argsstring>
        <name>AnalysisDataFrameBuilderPointer</name>
        <briefdescription>
<para>Smart pointer type for managing a storage frame builder. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.cpp" line="89" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.cpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegmx_1_1internal_1ac21a2a7809b800b7a38d52106cb23576" prot="public" static="no">
        <type>std::vector&lt; std::exception_ptr &gt;</type>
        <definition>typedef std::vector&lt;std::exception_ptr&gt; gmx::internal::NestedExceptionList</definition>
        <argsstring></argsstring>
        <name>NestedExceptionList</name>
        <briefdescription>
<para>Internal container type for storing a list of nested exceptions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" line="73" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegmx_1_1internal_1a8255fddd22431a907c2932b034f75023" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="classgmx_1_1internal_1_1IExceptionInfo" kindref="compound">IExceptionInfo</ref> &gt;</type>
        <definition>typedef std::unique_ptr&lt;IExceptionInfo&gt; gmx::internal::ExceptionInfoPointer</definition>
        <argsstring></argsstring>
        <name>ExceptionInfoPointer</name>
        <briefdescription>
<para>Smart pointer to manage <ref refid="classgmx_1_1internal_1_1IExceptionInfo" kindref="compound">IExceptionInfo</ref> ownership. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" line="93" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__module__options_1ga236f81451afd5086f506bfb27fe1d827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1AbstractOptionStorage" kindref="compound">AbstractOptionStorage</ref> *</type>
        <definition>AbstractOptionStorage * gmx::internal::createEnumOptionStorage</definition>
        <argsstring>(const AbstractOption &amp;option, const char *const *enumValues, int count, int defaultValue, int defaultValueIfSet, EnumIndexStoreInterface *store)</argsstring>
        <name>createEnumOptionStorage</name>
        <param>
          <type>const <ref refid="classgmx_1_1AbstractOption" kindref="compound">AbstractOption</ref> &amp;</type>
          <declname>option</declname>
        </param>
        <param>
          <type>const char *const *</type>
          <declname>enumValues</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>int</type>
          <declname>defaultValueIfSet</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1internal_1_1EnumIndexStoreInterface" kindref="compound">EnumIndexStoreInterface</ref> *</type>
          <declname>store</declname>
        </param>
        <briefdescription>
<para>Helper to create <ref refid="classgmx_1_1EnumOptionStorage" kindref="compound">EnumOptionStorage</ref> instances. </para>        </briefdescription>
        <detaileddescription>
<internal><para>This function works as a proxy between EnumOption::createStorage() and the <ref refid="classgmx_1_1EnumOptionStorage" kindref="compound">EnumOptionStorage</ref> constructor, such that the latter does not need to be exposed in the header. </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/basicoptions.cpp" line="737" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/basicoptions.cpp" bodystart="737" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1internal_1a2ad671bf11130f20a61b343200ed952d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* gmx::internal::alignedMallocGeneric</definition>
        <argsstring>(std::size_t bytes, std::size_t alignment)</argsstring>
        <name>alignedMallocGeneric</name>
        <param>
          <type>std::size_t</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Allocate aligned memory in a fully portable way. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of memory (bytes) to allocate. The routine will return nullptr if the allocation fails. However, note that asking for zero bytes will return a pointer that is non-null and properly aligned (but obviously you cannot use it, since you promised not to access data beyond the 0 bytes you asked for).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment specification in bytes, must be a power of 2.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Nonzero pointer if the allocation worked, otherwise nullptr. This routine should only be called from <ref refid="namespacegmx_1_1internal_1ac594ce6eb0ebb9ad123269472e43eb8e" kindref="member">alignedMalloc()</ref>, which also does the checking for valid values. This particular function is used for platforms where we have no control of the alignment of memory returned by the system. Instead, we increase the amount of memory requested internally such that we both can create a pointer inside this memory that fulfills the memory alignment requested, and that we have room to store the original pointer just before this area.</para></simplesect>
<simplesect kind="note"><para>This is an internal routine that should only be called from <ref refid="namespacegmx_1_1internal_1ac594ce6eb0ebb9ad123269472e43eb8e" kindref="member">gmx::alignedMalloc()</ref>. Just like system-provided routines, it provides memory that is aligned - but not padded. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.cpp" line="91" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.cpp" bodystart="91" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1internal_1ab9e58bfac927013d9b274c8162bb8f0b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gmx::internal::alignedFreeGeneric</definition>
        <argsstring>(void *p)</argsstring>
        <name>alignedFreeGeneric</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Free aligned memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pointer previously returned from gmx::internal::alignedFreePortable().</para></parameterdescription>
</parameteritem>
</parameterlist>
Since this routine relies on the original pointer being stored just before the memory area p points to, bad things will happen if you call this routine with a pointer obtained any other way, or if you call the system free() with a pointer obtained from <ref refid="namespacegmx_1_1internal_1ac594ce6eb0ebb9ad123269472e43eb8e" kindref="member">std::alignedMalloc()</ref>.</para><para><simplesect kind="note"><para>This is an internal routine that should only be called from <ref refid="namespacegmx_1_1internal_1a00349251434a6c99f7a6d1bfe1263107" kindref="member">gmx::alignedFree()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.cpp" line="131" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.cpp" bodystart="131" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1internal_1ac594ce6eb0ebb9ad123269472e43eb8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * gmx::internal::alignedMalloc</definition>
        <argsstring>(std::size_t bytes)</argsstring>
        <name>alignedMalloc</name>
        <param>
          <type>std::size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Allocate aligned memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of memory (bytes) to allocate. It is valid to ask for 0 bytes, which will return a non-null pointer that is properly aligned and padded (but that you should not use).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Valid pointer if the allocation worked, otherwise nullptr.</para></simplesect>
The memory will always be aligned to 128 bytes, which is our estimate of the longest cache lines on architectures currently in use. It will also be padded by the same amount at the end of the area, to help avoid false cache sharing.</para><para><simplesect kind="note"><para>Memory allocated with this routine must be released with <ref refid="namespacegmx_1_1internal_1a00349251434a6c99f7a6d1bfe1263107" kindref="member">gmx::internal::alignedFree()</ref>, and absolutely not the system free(). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.cpp" line="143" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.cpp" bodystart="143" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1internal_1a00349251434a6c99f7a6d1bfe1263107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::internal::alignedFree</definition>
        <argsstring>(void *p)</argsstring>
        <name>alignedFree</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Free aligned memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pointer previously returned from <ref refid="namespacegmx_1_1internal_1ac594ce6eb0ebb9ad123269472e43eb8e" kindref="member">gmx::internal::alignedMalloc()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This routine should only be called with pointers obtained from <ref refid="namespacegmx_1_1internal_1ac594ce6eb0ebb9ad123269472e43eb8e" kindref="member">gmx::internal::alignedMalloc()</ref>, and absolutely not any pointers obtained the system malloc(). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.cpp" line="184" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/alignedallocator.cpp" bodystart="184" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga921af955af13677427b80c3237a798fe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void gmx::internal::ignoreValueHelper</definition>
        <argsstring>(const T &amp;)</argsstring>
        <name>ignoreValueHelper</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
<para>Helper for ignoring values in macros. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/basedefinitions.h" line="290" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/basedefinitions.h" bodystart="290" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="namespacegmx_1_1internal_1a3c0ea704fa958e9e7c79e7484a2d6f6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::internal::current_function_helper</definition>
        <argsstring>()</argsstring>
        <name>current_function_helper</name>
        <briefdescription>
<para>Helper for defining GMX_CURRENT_FUNCTION. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/current_function.h" line="72" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/current_function.h" bodystart="72" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga34257490d770efb0f6a87adeef2629c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::internal::printFatalErrorHeader</definition>
        <argsstring>(FILE *fp, const char *title, const char *func, const char *file, int line)</argsstring>
        <name>printFatalErrorHeader</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Formats a common header for fatal error messages. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/errorformat.cpp" line="63" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/errorformat.cpp" bodystart="63" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1ga0a42e4f258d42ec3a31c6a633de8d5da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::internal::printFatalErrorMessageLine</definition>
        <argsstring>(FILE *fp, const char *text, int indent)</argsstring>
        <name>printFatalErrorMessageLine</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
<para>Formats a line of fatal error message text. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/errorformat.cpp" line="96" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/errorformat.cpp" bodystart="96" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gadcb892c734184fade6b913a4d3a66aa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::internal::printFatalErrorFooter</definition>
        <argsstring>(FILE *fp)</argsstring>
        <name>printFatalErrorFooter</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
<para>Formats a common footer for fatal error messages. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/errorformat.cpp" line="115" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/errorformat.cpp" bodystart="115" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__module__utility_1gaebf12d5435f39db87d2627d024b0b4c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::internal::assertHandler</definition>
        <argsstring>(const char *condition, const char *msg, const char *func, const char *file, int line)</argsstring>
        <name>assertHandler</name>
        <param>
          <type>const char *</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Called when an assert fails. </para>        </briefdescription>
        <detaileddescription>
<para>Should not be called directly, but instead through <ref refid="group__module__utility_1ga5ae3261a89ac2c165cfba084c6b02ef7" kindref="member">GMX_ASSERT</ref> or <ref refid="group__module__utility_1ga1071dd9ef4577eac808a66272ecef494" kindref="member">GMX_RELEASE_ASSERT</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/gmxassert.cpp" line="60" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/gmxassert.cpp" bodystart="60" bodyend="68"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Internal GROMACS namespace. </para>    </briefdescription>
    <detaileddescription>
<internal><para>This namespace is used to contain some implementation-specific functions and classes. These are not meant for direct user access, but typically reside in public headers because of implementation reasons. </para></internal>
    </detaileddescription>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/docs/doxygen/misc.cpp" line="54" column="1"/>
  </compounddef>
</doxygen>
