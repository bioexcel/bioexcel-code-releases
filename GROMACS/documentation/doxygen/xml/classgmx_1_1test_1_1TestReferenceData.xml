<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1test_1_1TestReferenceData" kind="class" prot="public">
    <compoundname>gmx::test::TestReferenceData</compoundname>
    <includes local="no">testutils/refdata.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgmx_1_1test_1_1TestReferenceData_1ae4fdb3c4bf965173c270a9a1c0760e57" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classgmx_1_1test_1_1internal_1_1TestReferenceDataImpl" kindref="compound">internal::TestReferenceDataImpl</ref> &gt;</type>
        <definition>std::shared_ptr&lt;internal::TestReferenceDataImpl&gt; gmx::test::TestReferenceData::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="209" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceData_1a4ff154830e12ced01ff05c3836e6280c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::test::TestReferenceData::TestReferenceData</definition>
        <argsstring>()</argsstring>
        <name>TestReferenceData</name>
        <briefdescription>
<para>Initializes the reference data in the global mode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="181" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="590" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceData_1a8102faceb930f93a3e2a3bdf46f659a2" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::test::TestReferenceData::TestReferenceData</definition>
        <argsstring>(ReferenceDataMode mode)</argsstring>
        <name>TestReferenceData</name>
        <param>
          <type><ref refid="group__module__testutils_1gad7a0c1ac11a9748556948309218fc08a" kindref="member">ReferenceDataMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Initializes the reference data in a specific mode. </para>        </briefdescription>
        <detaileddescription>
<para>This function is only useful for self-testing the reference data framework. As such, it also puts the framework in a state where it logs additional internal information for failures to help diagnosing problems in the framework, and stores the reference data in a temporary directory instead of the source tree. The default constructor should be used in tests utilizing this class. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="192" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="596" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceData_1a9c2e355ba0de3aae6c34c626f9fe95e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::test::TestReferenceData::~TestReferenceData</definition>
        <argsstring>()</argsstring>
        <name>~TestReferenceData</name>
        <briefdescription>
<para>Frees reference data structures. </para>        </briefdescription>
        <detaileddescription>
<para>The reference data is written out if necessary automatically when the test finishes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="199" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="602" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceData_1a2c751bb515d71cebb3ad802ec6a5eb0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1test_1_1TestReferenceChecker" kindref="compound">TestReferenceChecker</ref></type>
        <definition>TestReferenceChecker gmx::test::TestReferenceData::rootChecker</definition>
        <argsstring>()</argsstring>
        <name>rootChecker</name>
        <briefdescription>
<para>Returns a root-level checker object for comparisons. </para>        </briefdescription>
        <detaileddescription>
<para>Each call returns an independent instance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="206" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.cpp" bodystart="607" bodyend="624"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceData_1aff5ae4d229a81f75c440a7b5ea0e4872" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1test_1_1TestReferenceData" kindref="compound">TestReferenceData</ref> &amp;</type>
        <definition>TestReferenceData&amp; gmx::test::TestReferenceData::operator=</definition>
        <argsstring>(const TestReferenceData &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1TestReferenceData" kindref="compound">TestReferenceData</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1test_1_1TestReferenceData_1a96808b9d0fbb2b9b1d4e02bec32ed3ac" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::test::TestReferenceData::TestReferenceData</definition>
        <argsstring>(const TestReferenceData &amp;)=delete</argsstring>
        <name>TestReferenceData</name>
        <param>
          <type>const <ref refid="classgmx_1_1test_1_1TestReferenceData" kindref="compound">TestReferenceData</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="211" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Handles creation of and comparison to test reference data. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal />  See <ref refid="page_refdata" kindref="compound">Using reference data in C++ tests</ref> for an overview of the functionality.</para><para>This class provides functionality to use the same code to generate reference data and then on later runs compare the results of the code against that reference. The mode in which the class operates (writing reference data or comparing against existing data) is set using a command-line option that is automatically managed when using the testutils module to implement tests. Tests only need to create an instance of <ref refid="classgmx_1_1test_1_1TestReferenceData" kindref="compound">TestReferenceData</ref>, obtain a <ref refid="classgmx_1_1test_1_1TestReferenceChecker" kindref="compound">TestReferenceChecker</ref> using the <ref refid="classgmx_1_1test_1_1TestReferenceData_1a2c751bb515d71cebb3ad802ec6a5eb0c" kindref="member">rootChecker()</ref> method and use the various check*() methods in <ref refid="classgmx_1_1test_1_1TestReferenceChecker" kindref="compound">TestReferenceChecker</ref> to indicate values to check. If the test is running in reference data creation mode, it will produce an XML file with the values recorder. In comparison mode, it will read that same XML file and produce a Google Test non-fatal assertion for every discrepancy it detects with the reference data (including missing reference data file or individual item). Exceptions derived from <ref refid="classgmx_1_1test_1_1TestException" kindref="compound">TestException</ref> are thrown for I/O errors and syntax errors in the reference data.</para><para>Simple example (using Google Test): <programlisting><codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>functionToTest(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>param);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TEST(MyTest,<sp/>SimpleTest)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classgmx_1_1test_1_1TestReferenceData" kindref="compound">gmx::test::TestReferenceData</ref><sp/>data;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classgmx_1_1test_1_1TestReferenceChecker" kindref="compound">gmx::test::TestReferenceChecker</ref><sp/>checker(data.<ref refid="classgmx_1_1test_1_1TestReferenceData_1a2c751bb515d71cebb3ad802ec6a5eb0c" kindref="member">rootChecker</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>checker.<ref refid="classgmx_1_1test_1_1TestReferenceChecker_1abb8d0f46f835599778fa12d12a28acf9" kindref="member">checkInteger</ref>(functionToTest(3),<sp/></highlight><highlight class="stringliteral">&quot;ValueWith3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>checker.checkInteger(functionToTest(5),<sp/></highlight><highlight class="stringliteral">&quot;ValueWith5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classgmx_1_1test_1_1TestReferenceChecker" kindref="compound">gmx::test::TestReferenceChecker</ref><sp/>compound(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checker.checkCompound(</highlight><highlight class="stringliteral">&quot;CustomCompound&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Item&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compound.<ref refid="classgmx_1_1test_1_1TestReferenceChecker_1abb8d0f46f835599778fa12d12a28acf9" kindref="member">checkInteger</ref>(function2ToTest(3),<sp/></highlight><highlight class="stringliteral">&quot;ValueWith3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compound.checkInteger(function2ToTest(5),<sp/></highlight><highlight class="stringliteral">&quot;ValueWith5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>checker.checkInteger(functionToTest(4),<sp/></highlight><highlight class="stringliteral">&quot;ValueWith4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">*<sp/></highlight></codeline>
</programlisting></para><para>If <ref refid="classgmx_1_1test_1_1TestReferenceData_1a2c751bb515d71cebb3ad802ec6a5eb0c" kindref="member">rootChecker()</ref> is never called, no comparison is done (i.e., missing reference data file is not reported as an error, nor is empty reference data file created in write mode).</para><para>For floating-point comparisons, the reference data should be generated in double precision (currently, no warning is provided even if this is not the case, but the double precision tests will then very likely fail). </para>    </detaileddescription>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" line="176" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/testutils/refdata.h" bodystart="175" bodyend="212"/>
    <listofallmembers>
      <member refid="classgmx_1_1test_1_1TestReferenceData_1ae4fdb3c4bf965173c270a9a1c0760e57" prot="private" virt="non-virtual"><scope>gmx::test::TestReferenceData</scope><name>impl_</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceData_1aff5ae4d229a81f75c440a7b5ea0e4872" prot="private" virt="non-virtual"><scope>gmx::test::TestReferenceData</scope><name>operator=</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceData_1a2c751bb515d71cebb3ad802ec6a5eb0c" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceData</scope><name>rootChecker</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceData_1a4ff154830e12ced01ff05c3836e6280c" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceData</scope><name>TestReferenceData</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceData_1a8102faceb930f93a3e2a3bdf46f659a2" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceData</scope><name>TestReferenceData</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceData_1a96808b9d0fbb2b9b1d4e02bec32ed3ac" prot="private" virt="non-virtual"><scope>gmx::test::TestReferenceData</scope><name>TestReferenceData</name></member>
      <member refid="classgmx_1_1test_1_1TestReferenceData_1a9c2e355ba0de3aae6c34c626f9fe95e9" prot="public" virt="non-virtual"><scope>gmx::test::TestReferenceData</scope><name>~TestReferenceData</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
