<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="detecthardware_8cpp" kind="file">
    <compoundname>detecthardware.cpp</compoundname>
    <includes refid="gmxpre_8h" local="yes">gmxpre.h</includes>
    <includes refid="detecthardware_8h" local="yes">detecthardware.h</includes>
    <includes local="yes">config.h</includes>
    <includes local="no">cerrno</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">cstring</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">chrono</includes>
    <includes local="no">string</includes>
    <includes local="no">thread</includes>
    <includes local="no">vector</includes>
    <includes local="yes">thread_mpi/threads.h</includes>
    <includes refid="md__logging_8h" local="yes">gromacs/gmxlib/md_logging.h</includes>
    <includes refid="network_8h" local="yes">gromacs/gmxlib/network.h</includes>
    <includes refid="gpu__utils_8h" local="yes">gromacs/gpu_utils/gpu_utils.h</includes>
    <includes refid="cpuinfo_8h" local="yes">gromacs/hardware/cpuinfo.h</includes>
    <includes refid="gpu__hw__info_8h" local="yes">gromacs/hardware/gpu_hw_info.h</includes>
    <includes refid="hardwaretopology_8h" local="yes">gromacs/hardware/hardwaretopology.h</includes>
    <includes refid="hw__info_8h" local="yes">gromacs/hardware/hw_info.h</includes>
    <includes refid="commrec_8h" local="yes">gromacs/mdtypes/commrec.h</includes>
    <includes refid="md__enums_8h" local="yes">gromacs/mdtypes/md_enums.h</includes>
    <includes refid="support_8h" local="yes">gromacs/simd/support.h</includes>
    <includes refid="arrayref_8h" local="yes">gromacs/utility/arrayref.h</includes>
    <includes refid="basedefinitions_8h" local="yes">gromacs/utility/basedefinitions.h</includes>
    <includes refid="basenetwork_8h" local="yes">gromacs/utility/basenetwork.h</includes>
    <includes refid="baseversion_8h" local="yes">gromacs/utility/baseversion.h</includes>
    <includes refid="cstringutil_8h" local="yes">gromacs/utility/cstringutil.h</includes>
    <includes refid="exceptions_8h" local="yes">gromacs/utility/exceptions.h</includes>
    <includes refid="fatalerror_8h" local="yes">gromacs/utility/fatalerror.h</includes>
    <includes refid="gmxassert_8h" local="yes">gromacs/utility/gmxassert.h</includes>
    <includes refid="programcontext_8h" local="yes">gromacs/utility/programcontext.h</includes>
    <includes refid="smalloc_8h" local="yes">gromacs/utility/smalloc.h</includes>
    <includes refid="stringutil_8h" local="yes">gromacs/utility/stringutil.h</includes>
    <includes refid="sysinfo_8h" local="yes">gromacs/utility/sysinfo.h</includes>
    <incdepgraph>
      <node id="9251">
        <label>gromacs/utility/stringutil.h</label>
        <link refid="stringutil_8h"/>
        <childnode refid="9210" relation="include">
        </childnode>
        <childnode refid="9213" relation="include">
        </childnode>
        <childnode refid="9215" relation="include">
        </childnode>
      </node>
      <node id="9247">
        <label>stdarg.h</label>
      </node>
      <node id="9235">
        <label>gromacs/utility/current_function.h</label>
        <link refid="current__function_8h"/>
      </node>
      <node id="9229">
        <label>gromacs/utility/arrayref.h</label>
        <link refid="arrayref_8h"/>
        <childnode refid="9230" relation="include">
        </childnode>
        <childnode refid="9231" relation="include">
        </childnode>
        <childnode refid="9232" relation="include">
        </childnode>
        <childnode refid="9233" relation="include">
        </childnode>
        <childnode refid="9215" relation="include">
        </childnode>
        <childnode refid="9234" relation="include">
        </childnode>
      </node>
      <node id="9216">
        <label>thread_mpi/threads.h</label>
      </node>
      <node id="9231">
        <label>iterator</label>
      </node>
      <node id="9226">
        <label>cstdint</label>
      </node>
      <node id="9249">
        <label>gromacs/utility/smalloc.h</label>
        <link refid="smalloc_8h"/>
        <childnode refid="9250" relation="include">
        </childnode>
        <childnode refid="9219" relation="include">
        </childnode>
      </node>
      <node id="9246">
        <label>gromacs/utility/fatalerror.h</label>
        <link refid="fatalerror_8h"/>
        <childnode refid="9247" relation="include">
        </childnode>
        <childnode refid="9239" relation="include">
        </childnode>
        <childnode refid="9219" relation="include">
        </childnode>
      </node>
      <node id="9220">
        <label>stdint.h</label>
      </node>
      <node id="9206">
        <label>gmxpre.h</label>
        <link refid="gmxpre_8h"/>
      </node>
      <node id="9238">
        <label>gromacs/utility/cstringutil.h</label>
        <link refid="cstringutil_8h"/>
        <childnode refid="9239" relation="include">
        </childnode>
        <childnode refid="9219" relation="include">
        </childnode>
      </node>
      <node id="9232">
        <label>stdexcept</label>
      </node>
      <node id="9213">
        <label>string</label>
      </node>
      <node id="9225">
        <label>gromacs/hardware/hardwaretopology.h</label>
        <link refid="hardwaretopology_8h"/>
        <childnode refid="9226" relation="include">
        </childnode>
        <childnode refid="9215" relation="include">
        </childnode>
      </node>
      <node id="9223">
        <label>map</label>
      </node>
      <node id="9248">
        <label>gromacs/utility/programcontext.h</label>
        <link refid="programcontext_8h"/>
      </node>
      <node id="9241">
        <label>exception</label>
      </node>
      <node id="9250">
        <label>stddef.h</label>
      </node>
      <node id="9240">
        <label>gromacs/utility/exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="9218" relation="include">
        </childnode>
        <childnode refid="9209" relation="include">
        </childnode>
        <childnode refid="9241" relation="include">
        </childnode>
        <childnode refid="9242" relation="include">
        </childnode>
        <childnode refid="9213" relation="include">
        </childnode>
        <childnode refid="9243" relation="include">
        </childnode>
        <childnode refid="9244" relation="include">
        </childnode>
        <childnode refid="9215" relation="include">
        </childnode>
        <childnode refid="9219" relation="include">
        </childnode>
        <childnode refid="9245" relation="include">
        </childnode>
        <childnode refid="9235" relation="include">
        </childnode>
        <childnode refid="9234" relation="include">
        </childnode>
      </node>
      <node id="9222">
        <label>gromacs/hardware/cpuinfo.h</label>
        <link refid="cpuinfo_8h"/>
        <childnode refid="9223" relation="include">
        </childnode>
        <childnode refid="9224" relation="include">
        </childnode>
        <childnode refid="9213" relation="include">
        </childnode>
        <childnode refid="9215" relation="include">
        </childnode>
      </node>
      <node id="9237">
        <label>gromacs/utility/baseversion.h</label>
        <link refid="baseversion_8h"/>
      </node>
      <node id="9228">
        <label>gromacs/simd/support.h</label>
        <link refid="support_8h"/>
        <childnode refid="9222" relation="include">
        </childnode>
      </node>
      <node id="9218">
        <label>cstdio</label>
      </node>
      <node id="9234">
        <label>gromacs/utility/gmxassert.h</label>
        <link refid="gmxassert_8h"/>
        <childnode refid="9219" relation="include">
        </childnode>
        <childnode refid="9235" relation="include">
        </childnode>
      </node>
      <node id="9217">
        <label>gromacs/gpu_utils/gpu_utils.h</label>
        <link refid="gpu__utils_8h"/>
        <childnode refid="9218" relation="include">
        </childnode>
        <childnode refid="9219" relation="include">
        </childnode>
      </node>
      <node id="9215">
        <label>vector</label>
      </node>
      <node id="9205">
        <label>src/gromacs/hardware/detecthardware.cpp</label>
        <link refid="detecthardware.cpp"/>
        <childnode refid="9206" relation="include">
        </childnode>
        <childnode refid="9207" relation="include">
        </childnode>
        <childnode refid="9208" relation="include">
        </childnode>
        <childnode refid="9209" relation="include">
        </childnode>
        <childnode refid="9210" relation="include">
        </childnode>
        <childnode refid="9211" relation="include">
        </childnode>
        <childnode refid="9212" relation="include">
        </childnode>
        <childnode refid="9213" relation="include">
        </childnode>
        <childnode refid="9214" relation="include">
        </childnode>
        <childnode refid="9215" relation="include">
        </childnode>
        <childnode refid="9216" relation="include">
        </childnode>
        <childnode refid="9217" relation="include">
        </childnode>
        <childnode refid="9222" relation="include">
        </childnode>
        <childnode refid="9225" relation="include">
        </childnode>
        <childnode refid="9227" relation="include">
        </childnode>
        <childnode refid="9228" relation="include">
        </childnode>
        <childnode refid="9229" relation="include">
        </childnode>
        <childnode refid="9219" relation="include">
        </childnode>
        <childnode refid="9236" relation="include">
        </childnode>
        <childnode refid="9237" relation="include">
        </childnode>
        <childnode refid="9238" relation="include">
        </childnode>
        <childnode refid="9240" relation="include">
        </childnode>
        <childnode refid="9246" relation="include">
        </childnode>
        <childnode refid="9234" relation="include">
        </childnode>
        <childnode refid="9248" relation="include">
        </childnode>
        <childnode refid="9249" relation="include">
        </childnode>
        <childnode refid="9251" relation="include">
        </childnode>
        <childnode refid="9252" relation="include">
        </childnode>
      </node>
      <node id="9233">
        <label>utility</label>
      </node>
      <node id="9245">
        <label>gromacs/utility/classhelpers.h</label>
        <link refid="classhelpers_8h"/>
        <childnode refid="9242" relation="include">
        </childnode>
      </node>
      <node id="9253">
        <label>time.h</label>
      </node>
      <node id="9208">
        <label>cerrno</label>
      </node>
      <node id="9209">
        <label>cstdlib</label>
      </node>
      <node id="9236">
        <label>gromacs/utility/basenetwork.h</label>
        <link refid="basenetwork_8h"/>
      </node>
      <node id="9230">
        <label>cstddef</label>
      </node>
      <node id="9227">
        <label>gromacs/mdtypes/md_enums.h</label>
        <link refid="md__enums_8h"/>
        <childnode refid="9219" relation="include">
        </childnode>
      </node>
      <node id="9212">
        <label>chrono</label>
      </node>
      <node id="9219">
        <label>gromacs/utility/basedefinitions.h</label>
        <link refid="basedefinitions_8h"/>
        <childnode refid="9220" relation="include">
        </childnode>
        <childnode refid="9221" relation="include">
        </childnode>
      </node>
      <node id="9214">
        <label>thread</label>
      </node>
      <node id="9243">
        <label>type_traits</label>
      </node>
      <node id="9224">
        <label>set</label>
      </node>
      <node id="9207">
        <label>config.h</label>
      </node>
      <node id="9211">
        <label>algorithm</label>
      </node>
      <node id="9252">
        <label>gromacs/utility/sysinfo.h</label>
        <link refid="sysinfo_8h"/>
        <childnode refid="9250" relation="include">
        </childnode>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9239">
        <label>stdio.h</label>
      </node>
      <node id="9210">
        <label>cstring</label>
      </node>
      <node id="9242">
        <label>memory</label>
      </node>
      <node id="9221">
        <label>inttypes.h</label>
      </node>
      <node id="9244">
        <label>typeindex</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="detecthardware_8cpp_1a482082da36eeb1135a3f72f8cc14e90a" prot="public" static="no">
        <name>HOSTNAMELEN</name>
        <initializer>80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="140" column="9" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="detecthardware_8cpp_1a9318645faa1e72898ec9b0ca6ba94171" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool isX86</definition>
        <argsstring></argsstring>
        <name>isX86</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Convenience macro to help us avoid ifdefs each time we use sysconf. </para>        </briefdescription>
        <detaileddescription>
<para>Convenience macro to help us avoid ifdefs each time we use sysconf Constant used to help minimize preprocessed code </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="95" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="detecthardware_8cpp_1ac54fa4b7e4584abce3adf4e15881fdd4" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool isPowerPC</definition>
        <argsstring></argsstring>
        <name>isPowerPC</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="101" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="detecthardware_8cpp_1a01db5a6a9b8e8cee0e01f26defb533a1" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool bGPUBinary</definition>
        <argsstring></argsstring>
        <name>bGPUBinary</name>
        <initializer>= GMX_GPU != GMX_GPU_NONE</initializer>
        <briefdescription>
<para>Constant used to help minimize preprocessed code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="105" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="detecthardware_8cpp_1ab1d73effc9d80e8af71e61e8638f4830" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool gpuSharingSupport[]</definition>
        <argsstring>[]</argsstring>
        <name>gpuSharingSupport</name>
        <initializer>= { false, true, true }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="114" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="detecthardware_8cpp_1add7c9d269d9ddfd301280dc98878ce17" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool bGpuSharingSupported</definition>
        <argsstring></argsstring>
        <name>bGpuSharingSupported</name>
        <initializer>= gpuSharingSupport[GMX_GPU]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="115" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="detecthardware_8cpp_1af759a2a0632876390de22d0d9e384056" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool multiGpuSupport[]</definition>
        <argsstring>[]</argsstring>
        <name>multiGpuSupport</name>
        <initializer>= {
    false, true, true
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="119" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="detecthardware_8cpp_1a0f8d8b043bf9ed57a98b8ff4ac6671eb" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool bMultiGpuPerNodeSupported</definition>
        <argsstring></argsstring>
        <name>bMultiGpuPerNodeSupported</name>
        <initializer>= multiGpuSupport[GMX_GPU]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="122" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="detecthardware_8cpp_1adb44cd899008280f2e7dad07422c2f0a" prot="public" static="no" mutable="no">
        <type>const char *const</type>
        <definition>const char* const gpu_detect_res_str[egpuNR]</definition>
        <argsstring>[egpuNR]</argsstring>
        <name>gpu_detect_res_str</name>
        <initializer>=
{
    &quot;compatible&quot;, &quot;inexistent&quot;, &quot;incompatible&quot;, &quot;insane&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="125" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="detecthardware_8cpp_1afbb3a2244c10bbac09b7e0acc8f319da" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* invalid_gpuid_hint</definition>
        <argsstring></argsstring>
        <name>invalid_gpuid_hint</name>
        <initializer>=
    &quot;A delimiter-free sequence of valid numeric IDs of <ref refid="txtdump_8h_1ab91a1ab2bda002a51def3febb42c6327" kindref="member">available</ref> GPUs is expected.&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="130" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="detecthardware_8cpp_1afba81bd52788c0e3d6417e70f9529b16" prot="public" static="yes" mutable="no">
        <type><ref refid="structgmx__hw__info__t" kindref="compound">gmx_hw_info_t</ref> *</type>
        <definition>gmx_hw_info_t* hwinfo_g</definition>
        <argsstring></argsstring>
        <name>hwinfo_g</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="134" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="detecthardware_8cpp_1a4c75d95379760d0ba47dc03c01ccc1f9" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int n_hwinfo</definition>
        <argsstring></argsstring>
        <name>n_hwinfo</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="136" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="detecthardware_8cpp_1a784e29f5b399cec3039d526c981cf9ad" prot="public" static="yes" mutable="no">
        <type>tMPI_Thread_mutex_t</type>
        <definition>tMPI_Thread_mutex_t hw_info_lock</definition>
        <argsstring></argsstring>
        <name>hw_info_lock</name>
        <initializer>= TMPI_THREAD_MUTEX_INITIALIZER</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="138" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="detecthardware_8cpp_1aef60a2559079552a135b7a26bd377369" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void set_gpu_ids</definition>
        <argsstring>(gmx_gpu_opt_t *gpu_opt, int nrank, int rank)</argsstring>
        <name>set_gpu_ids</name>
        <param>
          <type><ref refid="structgmx__gpu__opt__t" kindref="compound">gmx_gpu_opt_t</ref> *</type>
          <declname>gpu_opt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="143" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="1437" bodyend="1490"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1ac471319b9671e42fc17caa125aa23466" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int gmx_count_gpu_dev_unique</definition>
        <argsstring>(const gmx_gpu_info_t *gpu_info, const gmx_gpu_opt_t *gpu_opt)</argsstring>
        <name>gmx_count_gpu_dev_unique</name>
        <param>
          <type>const <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> *</type>
          <declname>gpu_info</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__gpu__opt__t" kindref="compound">gmx_gpu_opt_t</ref> *</type>
          <declname>gpu_opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="144" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="594" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1a24afa48845bc0b80412ce3ceaf1d40db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="basedefinitions_8h_1a8fddad319f226e856400d190198d5151" kindref="member">gmx_bool</ref></type>
        <definition>gmx_bool gmx_multiple_gpu_per_node_supported</definition>
        <argsstring>()</argsstring>
        <name>gmx_multiple_gpu_per_node_supported</name>
        <briefdescription>
<para>Return whether mdrun can use more than one GPU per node. </para>        </briefdescription>
        <detaileddescription>
<para>The OpenCL implementation cannot use more than one GPU per node, for example. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="147" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1ae7b1974902962f9dc45793a2a53ca400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="basedefinitions_8h_1a8fddad319f226e856400d190198d5151" kindref="member">gmx_bool</ref></type>
        <definition>gmx_bool gmx_gpu_sharing_supported</definition>
        <argsstring>()</argsstring>
        <name>gmx_gpu_sharing_supported</name>
        <briefdescription>
<para>Return whether PP ranks can share a GPU. </para>        </briefdescription>
        <detaileddescription>
<para>The OpenCL implementation cannot share a GPU between ranks, for example. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="152" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1a9b4e4d3cf380a2c8d368fcfd52ff9b3f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sprint_gpus</definition>
        <argsstring>(char *sbuf, const gmx_gpu_info_t *gpu_info)</argsstring>
        <name>sprint_gpus</name>
        <param>
          <type>char *</type>
          <declname>sbuf</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> *</type>
          <declname>gpu_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="157" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="157" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1a4aaea0747853c1bfa2b83fef98c4843d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void print_gpu_detection_stats</definition>
        <argsstring>(FILE *fplog, const gmx_gpu_info_t *gpu_info, const t_commrec *cr)</argsstring>
        <name>print_gpu_detection_stats</name>
        <param>
          <type>FILE *</type>
          <declname>fplog</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> *</type>
          <declname>gpu_info</declname>
        </param>
        <param>
          <type>const <ref refid="structt__commrec" kindref="compound">t_commrec</ref> *</type>
          <declname>cr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="177" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="177" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1a665b9eb321e2f3bb4d21acdcfda47830" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string makeGpuUsageReport</definition>
        <argsstring>(const gmx_gpu_info_t *gpu_info, const gmx_gpu_opt_t *gpu_opt, size_t numPpRanks, bool bPrintHostName)</argsstring>
        <name>makeGpuUsageReport</name>
        <param>
          <type>const <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> *</type>
          <declname>gpu_info</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__gpu__opt__t" kindref="compound">gmx_gpu_opt_t</ref> *</type>
          <declname>gpu_opt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numPpRanks</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bPrintHostName</declname>
        </param>
        <briefdescription>
<para>Helper function for reporting GPU usage information in the mdrun log file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">gpu_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to per-node GPU info struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">gpu_opt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to per-node GPU options struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPpRanks</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of PP ranks per node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bPrintHostName</parametername>
</parameternamelist>
<parameterdescription>
<para>Print the hostname in the usage information </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String to write to the log file </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="223" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="223" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1af6aa82ded174c1415cf89a198e1ab693" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void check_use_of_rdtscp_on_this_cpu</definition>
        <argsstring>(FILE *fplog, const t_commrec *cr, const gmx::CpuInfo &amp;cpuInfo)</argsstring>
        <name>check_use_of_rdtscp_on_this_cpu</name>
        <param>
          <type>FILE *</type>
          <declname>fplog</declname>
        </param>
        <param>
          <type>const <ref refid="structt__commrec" kindref="compound">t_commrec</ref> *</type>
          <declname>cr</declname>
        </param>
        <param>
          <type>const <ref refid="classgmx_1_1CpuInfo" kindref="compound">gmx::CpuInfo</ref> &amp;</type>
          <declname>cpuInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="298" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="298" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1af8d3544682be0298fb16c51368ed678a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx_check_hw_runconf_consistency</definition>
        <argsstring>(FILE *fplog, const gmx_hw_info_t *hwinfo, const t_commrec *cr, const gmx_hw_opt_t *hw_opt, gmx_bool bUseGPU)</argsstring>
        <name>gmx_check_hw_runconf_consistency</name>
        <param>
          <type>FILE *</type>
          <declname>fplog</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__hw__info__t" kindref="compound">gmx_hw_info_t</ref> *</type>
          <declname>hwinfo</declname>
        </param>
        <param>
          <type>const <ref refid="structt__commrec" kindref="compound">t_commrec</ref> *</type>
          <declname>cr</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__hw__opt__t" kindref="compound">gmx_hw_opt_t</ref> *</type>
          <declname>hw_opt</declname>
        </param>
        <param>
          <type><ref refid="basedefinitions_8h_1a8fddad319f226e856400d190198d5151" kindref="member">gmx_bool</ref></type>
          <declname>bUseGPU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="343" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="343" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1ae4d5a96b5be4b10e8cf4fe5acf230dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gmx_count_gpu_dev_shared</definition>
        <argsstring>(const gmx_gpu_opt_t *gpu_opt)</argsstring>
        <name>gmx_count_gpu_dev_shared</name>
        <param>
          <type>const <ref refid="structgmx__gpu__opt__t" kindref="compound">gmx_gpu_opt_t</ref> *</type>
          <declname>gpu_opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="566" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="566" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1a2a51a1ea4a3ca2c5668ba4af94723025" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gmx_detect_gpus</definition>
        <argsstring>(FILE *fplog, const t_commrec *cr)</argsstring>
        <name>gmx_detect_gpus</name>
        <param>
          <type>FILE *</type>
          <declname>fplog</declname>
        </param>
        <param>
          <type>const <ref refid="structt__commrec" kindref="compound">t_commrec</ref> *</type>
          <declname>cr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="629" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="629" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1a65d678da834b230992a3273faa37d5e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gmx_collect_hardware_mpi</definition>
        <argsstring>(const gmx::CpuInfo &amp;cpuInfo)</argsstring>
        <name>gmx_collect_hardware_mpi</name>
        <param>
          <type>const <ref refid="classgmx_1_1CpuInfo" kindref="compound">gmx::CpuInfo</ref> &amp;</type>
          <declname>cpuInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="717" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="717" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1a33d249c0953903f3ee1c137f017f47d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void spinUpCore</definition>
        <argsstring>() noexcept</argsstring>
        <name>spinUpCore</name>
        <briefdescription>
<para>Utility that does dummy computing for max 2 seconds to spin up cores. </para>        </briefdescription>
        <detaileddescription>
<para>This routine will check the number of cores configured and online (using sysconf), and the spins doing dummy compute operations for up to 2 seconds, or until all cores have come online. This can be used prior to hardware detection for platforms that take unused processors offline.</para><para>This routine will not throw exceptions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="857" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="857" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1a01b75c4e8cb2c285e64f017b5e88ca4a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void hardwareTopologyPrepareDetection</definition>
        <argsstring>()</argsstring>
        <name>hardwareTopologyPrepareDetection</name>
        <briefdescription>
<para>Prepare the system before hardware topology detection. </para>        </briefdescription>
        <detaileddescription>
<para>This routine should perform any actions we want to put the system in a state where we want it to be before detecting the hardware topology. For most processors there is nothing to do, but some architectures (in particular ARM) have support for taking configured cores offline, which will make them disappear from the online processor count.</para><para>This routine checks if there is a mismatch between the number of cores configured and online, and in that case we issue a small workload that attempts to wake sleeping cores before doing the actual detection.</para><para>This type of mismatch can also occur for x86 or PowerPC on Linux, if SMT has only been disabled in the kernel (rather than bios). Since those cores will never come online automatically, we currently skip this test for x86 &amp; PowerPC to avoid wasting 2 seconds. We also skip the test if there is no thread support.</para><para><simplesect kind="note"><para>Cores will sleep relatively quickly again, so it&apos;s important to issue the real detection code directly after this routine. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="903" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="903" bodyend="925"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1a7fcfe028e35f80cb5673bc38a9e84c34" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void hardwareTopologyDoubleCheckDetection</definition>
        <argsstring>(FILE *fplog, const gmx::HardwareTopology &amp;hardwareTopology)</argsstring>
        <name>hardwareTopologyDoubleCheckDetection</name>
        <param>
          <type>FILE *</type>
          <declname>fplog</declname>
        </param>
        <param>
          <type>const <ref refid="classgmx_1_1HardwareTopology" kindref="compound">gmx::HardwareTopology</ref> &amp;</type>
          <declname>hardwareTopology</declname>
        </param>
        <briefdescription>
<para>Sanity check hardware topology and optionally print some notes to log. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fplog</parametername>
</parameternamelist>
<parameterdescription>
<para>Log file pointer. This can be NULL, but the then routine will not do anything. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hardwareTopology</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to hardwareTopology object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="934" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="934" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1a2685520e4f51445aa30a32f385b5f1f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgmx__hw__info__t" kindref="compound">gmx_hw_info_t</ref> *</type>
        <definition>gmx_hw_info_t* gmx_detect_hardware</definition>
        <argsstring>(FILE *fplog, const t_commrec *cr, gmx_bool bDetectGPUs)</argsstring>
        <name>gmx_detect_hardware</name>
        <param>
          <type>FILE *</type>
          <declname>fplog</declname>
        </param>
        <param>
          <type>const <ref refid="structt__commrec" kindref="compound">t_commrec</ref> *</type>
          <declname>cr</declname>
        </param>
        <param>
          <type><ref refid="basedefinitions_8h_1a8fddad319f226e856400d190198d5151" kindref="member">gmx_bool</ref></type>
          <declname>bDetectGPUs</declname>
        </param>
        <briefdescription>
<para>Run detection, consistency checks, and make available on all ranks. </para>        </briefdescription>
        <detaileddescription>
<para>This routine constructs the global hwinfo structure and returns a pointer to it. It will run a preamble before executing cpu and hardware checks, and then run consistency checks afterwards. The results will also be made available on all nodes. Caller is responsible for freeing this pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="971" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="971" bodyend="1030"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1a9358f5d9e1dba2e1b78e5b28139ae531" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string detected_hardware_string</definition>
        <argsstring>(const gmx_hw_info_t *hwinfo, bool bFullCpuInfo)</argsstring>
        <name>detected_hardware_string</name>
        <param>
          <type>const <ref refid="structgmx__hw__info__t" kindref="compound">gmx_hw_info_t</ref> *</type>
          <declname>hwinfo</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bFullCpuInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="1032" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="1032" bodyend="1262"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1a41f0659608f43a8cb14074ded28e7bdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx_print_detected_hardware</definition>
        <argsstring>(FILE *fplog, const t_commrec *cr, const gmx_hw_info_t *hwinfo)</argsstring>
        <name>gmx_print_detected_hardware</name>
        <param>
          <type>FILE *</type>
          <declname>fplog</declname>
        </param>
        <param>
          <type>const <ref refid="structt__commrec" kindref="compound">t_commrec</ref> *</type>
          <declname>cr</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__hw__info__t" kindref="compound">gmx_hw_info_t</ref> *</type>
          <declname>hwinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="1264" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="1264" bodyend="1297"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1a0dd739b43bf9a7c40faf7f7ac7f5f73a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="basedefinitions_8h_1a8fddad319f226e856400d190198d5151" kindref="member">gmx_bool</ref></type>
        <definition>static gmx_bool anyGpuIdIsRepeated</definition>
        <argsstring>(const gmx_gpu_opt_t *gpu_opt)</argsstring>
        <name>anyGpuIdIsRepeated</name>
        <param>
          <type>const <ref refid="structgmx__gpu__opt__t" kindref="compound">gmx_gpu_opt_t</ref> *</type>
          <declname>gpu_opt</declname>
        </param>
        <briefdescription>
<para>Return if any GPU ID (e.g in a user-supplied string) is repeated. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="1300" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="1300" bodyend="1318"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1aaf6aae18636684c5c10d68a602b76d3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx_parse_gpu_ids</definition>
        <argsstring>(gmx_gpu_opt_t *gpu_opt)</argsstring>
        <name>gmx_parse_gpu_ids</name>
        <param>
          <type><ref refid="structgmx__gpu__opt__t" kindref="compound">gmx_gpu_opt_t</ref> *</type>
          <declname>gpu_opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="1320" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="1320" bodyend="1364"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1adda07c8b56c66a468cf4136e44575690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx_select_gpu_ids</definition>
        <argsstring>(FILE *fplog, const t_commrec *cr, const gmx_gpu_info_t *gpu_info, gmx_bool bForceUseGPU, gmx_gpu_opt_t *gpu_opt)</argsstring>
        <name>gmx_select_gpu_ids</name>
        <param>
          <type>FILE *</type>
          <declname>fplog</declname>
        </param>
        <param>
          <type>const <ref refid="structt__commrec" kindref="compound">t_commrec</ref> *</type>
          <declname>cr</declname>
        </param>
        <param>
          <type>const <ref refid="structgmx__gpu__info__t" kindref="compound">gmx_gpu_info_t</ref> *</type>
          <declname>gpu_info</declname>
        </param>
        <param>
          <type><ref refid="basedefinitions_8h_1a8fddad319f226e856400d190198d5151" kindref="member">gmx_bool</ref></type>
          <declname>bForceUseGPU</declname>
        </param>
        <param>
          <type><ref refid="structgmx__gpu__opt__t" kindref="compound">gmx_gpu_opt_t</ref> *</type>
          <declname>gpu_opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="1366" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="1366" bodyend="1431"/>
      </memberdef>
      <memberdef kind="function" id="detecthardware_8cpp_1a8786566a96f5e1164cd9934620f93f1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx_hardware_info_free</definition>
        <argsstring>(gmx_hw_info_t *hwinfo)</argsstring>
        <name>gmx_hardware_info_free</name>
        <param>
          <type><ref refid="structgmx__hw__info__t" kindref="compound">gmx_hw_info_t</ref> *</type>
          <declname>hwinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" line="1492" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp" bodystart="1492" bodyend="1529"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/hardware/detecthardware.cpp"/>
  </compounddef>
</doxygen>
