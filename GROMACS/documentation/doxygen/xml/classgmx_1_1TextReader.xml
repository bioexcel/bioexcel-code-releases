<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1TextReader" kind="class" prot="public">
    <compoundname>gmx::TextReader</compoundname>
    <includes local="no">gromacs/utility/textreader.h</includes>
    <innerclass refid="classgmx_1_1TextReader_1_1Impl" prot="public">gmx::TextReader::Impl</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgmx_1_1TextReader_1aab8fcf75604896d0dc4ddcbb8afab124" prot="private" static="no" mutable="no">
        <type><ref refid="classgmx_1_1PrivateImplPointer" kindref="compound">PrivateImplPointer</ref>&lt; <ref refid="classgmx_1_1TextReader_1_1Impl" kindref="compound">Impl</ref> &gt;</type>
        <definition>PrivateImplPointer&lt;Impl&gt; gmx::TextReader::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.h" line="168" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgmx_1_1TextReader_1a1b45b91d2bf6a6b0142a9a48d469ca25" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::TextReader::readFileToString</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>readFileToString</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Reads contents of a file to a std::string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the file to read. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The contents of <computeroutput>filename</computeroutput>. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1FileIOError" kindref="compound">FileIOError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on any I/O error. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.h" line="78" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.cpp" bodystart="54" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1TextReader_1a335a497245704967c1431f364ea0ca00" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::TextReader::readFileToString</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>readFileToString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Reads contents of a file to a std::string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the file to read. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The contents of <computeroutput>filename</computeroutput>. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1FileIOError" kindref="compound">FileIOError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on any I/O error. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.h" line="80" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.cpp" bodystart="63" bodyend="66"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1TextReader_1a0bca11456ee1434b63a181610168cd87" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::TextReader::TextReader</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>TextReader</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Creates a reader that reads from specified file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1Path" kindref="compound">Path</ref> to the file to open. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1FileIOError" kindref="compound">FileIOError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on any I/O error.</para></parameterdescription>
</parameteritem>
</parameterlist>
This constructor is provided for convenience for reading directly from a file, without the need to construct multiple objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.h" line="92" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.cpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1TextReader_1aea62d36e19b8255aa17cdcc8837d7e29" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::TextReader::TextReader</definition>
        <argsstring>(TextInputStream *stream)</argsstring>
        <name>TextReader</name>
        <param>
          <type><ref refid="classgmx_1_1TextInputStream" kindref="compound">TextInputStream</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Creates a reader that reads from specified stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream to read from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
The caller is responsible of the lifetime of the stream (should remain in existence as long as the reader exists).</para><para>This constructor is provided for convenience for cases where the stream is not allocated with <computeroutput>new</computeroutput> and/or not managed by a std::shared_ptr (e.g., if the stream is an object on the stack). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.h" line="106" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.cpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1TextReader_1a325b37c56a1e7150059bc4214aeb8f57" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::TextReader::TextReader</definition>
        <argsstring>(const TextInputStreamPointer &amp;stream)</argsstring>
        <name>TextReader</name>
        <param>
          <type>const <ref refid="namespacegmx_1a2fbe80608de8e00e55049289ef0148c1" kindref="member">TextInputStreamPointer</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Creates a reader that reads from specified stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream to read from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
The reader keeps a reference to the stream, so the caller can pass in a temporary if necessary. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.h" line="116" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.cpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1TextReader_1a776956f9fd1e1577d1b79c6c6d132a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::TextReader::~TextReader</definition>
        <argsstring>()</argsstring>
        <name>~TextReader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.h" line="117" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.cpp" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1TextReader_1a8a4578260ea39592894870109d92e723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::TextReader::readLine</definition>
        <argsstring>(std::string *line)</argsstring>
        <name>readLine</name>
        <param>
          <type>std::string *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Reads a single line (including newline) from the stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">line</parametername>
</parameternamelist>
<parameterdescription>
<para>String to receive the line. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>false</computeroutput> if nothing was read because the file ended.</para></simplesect>
On error or when false is returned, <computeroutput>line</computeroutput> will be empty. Newlines will be returned as part of <computeroutput>line</computeroutput> if it was present in the stream. To loop over all lines in the stream, use: <programlisting><codeline><highlight class="normal">std::string<sp/>line;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(reader.readLine(&amp;line))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.h" line="137" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.cpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1TextReader_1a9d1470c7045d18d648c22e846b0db47c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::TextReader::readLineTrimmed</definition>
        <argsstring>(std::string *line)</argsstring>
        <name>readLineTrimmed</name>
        <param>
          <type>std::string *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Reads a single line from the stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">line</parametername>
</parameternamelist>
<parameterdescription>
<para>String to receive the line. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if nothing was read because the file ended.</para></simplesect>
On error or when false is returned, <computeroutput>line</computeroutput> will be empty. Works as <ref refid="classgmx_1_1TextReader_1a8a4578260ea39592894870109d92e723" kindref="member">readLine()</ref>, except that trailing whitespace will be removed from <computeroutput>line</computeroutput>.</para><para><simplesect kind="see"><para><ref refid="classgmx_1_1TextReader_1a8a4578260ea39592894870109d92e723" kindref="member">readLine()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.h" line="150" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.cpp" bodystart="103" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1TextReader_1a0fe2f628d9f57041bd5c14a712e5c0b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::TextReader::readAll</definition>
        <argsstring>()</argsstring>
        <name>readAll</name>
        <briefdescription>
<para>Reads all remaining lines from the stream as a single string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Full contents of the stream (from the current point to the end). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.h" line="158" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.cpp" bodystart="117" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1TextReader_1a832ce4203c67ac5b86859954c8c96b8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::TextReader::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
<para>Closes the underlying stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.h" line="163" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.cpp" bodystart="128" bodyend="131"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Reads text from a <ref refid="classgmx_1_1TextInputStream" kindref="compound">TextInputStream</ref>. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal /> This class provides more formatted reading capabilities than reading raw lines from the stream (and a natural place to implement more such capabilities).</para><para>All methods that read from the stream can throw any exceptions that the underlying stream throws. </para>    </detaileddescription>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.h" line="68" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/textreader.h" bodystart="67" bodyend="169"/>
    <listofallmembers>
      <member refid="classgmx_1_1TextReader_1a832ce4203c67ac5b86859954c8c96b8f" prot="public" virt="non-virtual"><scope>gmx::TextReader</scope><name>close</name></member>
      <member refid="classgmx_1_1TextReader_1aab8fcf75604896d0dc4ddcbb8afab124" prot="private" virt="non-virtual"><scope>gmx::TextReader</scope><name>impl_</name></member>
      <member refid="classgmx_1_1TextReader_1a0fe2f628d9f57041bd5c14a712e5c0b1" prot="public" virt="non-virtual"><scope>gmx::TextReader</scope><name>readAll</name></member>
      <member refid="classgmx_1_1TextReader_1a1b45b91d2bf6a6b0142a9a48d469ca25" prot="public" virt="non-virtual"><scope>gmx::TextReader</scope><name>readFileToString</name></member>
      <member refid="classgmx_1_1TextReader_1a335a497245704967c1431f364ea0ca00" prot="public" virt="non-virtual"><scope>gmx::TextReader</scope><name>readFileToString</name></member>
      <member refid="classgmx_1_1TextReader_1a8a4578260ea39592894870109d92e723" prot="public" virt="non-virtual"><scope>gmx::TextReader</scope><name>readLine</name></member>
      <member refid="classgmx_1_1TextReader_1a9d1470c7045d18d648c22e846b0db47c" prot="public" virt="non-virtual"><scope>gmx::TextReader</scope><name>readLineTrimmed</name></member>
      <member refid="classgmx_1_1TextReader_1a0bca11456ee1434b63a181610168cd87" prot="public" virt="non-virtual"><scope>gmx::TextReader</scope><name>TextReader</name></member>
      <member refid="classgmx_1_1TextReader_1aea62d36e19b8255aa17cdcc8837d7e29" prot="public" virt="non-virtual"><scope>gmx::TextReader</scope><name>TextReader</name></member>
      <member refid="classgmx_1_1TextReader_1a325b37c56a1e7150059bc4214aeb8f57" prot="public" virt="non-virtual"><scope>gmx::TextReader</scope><name>TextReader</name></member>
      <member refid="classgmx_1_1TextReader_1a776956f9fd1e1577d1b79c6c6d132a8c" prot="public" virt="non-virtual"><scope>gmx::TextReader</scope><name>~TextReader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
