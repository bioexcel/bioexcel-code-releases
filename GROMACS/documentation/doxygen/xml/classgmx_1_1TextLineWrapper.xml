<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1TextLineWrapper" kind="class" prot="public">
    <compoundname>gmx::TextLineWrapper</compoundname>
    <includes local="no">gromacs/utility/stringutil.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgmx_1_1TextLineWrapper_1ab7a252b83a54c5f59621acee079a34fa" prot="private" static="no" mutable="no">
        <type><ref refid="classgmx_1_1TextLineWrapperSettings" kindref="compound">TextLineWrapperSettings</ref></type>
        <definition>TextLineWrapperSettings gmx::TextLineWrapper::settings_</definition>
        <argsstring></argsstring>
        <name>settings_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.h" line="657" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.h" bodystart="657" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1TextLineWrapper_1a89ea2ec5cfe3a185027f27de1974f8d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gmx::TextLineWrapper::TextLineWrapper</definition>
        <argsstring>()</argsstring>
        <name>TextLineWrapper</name>
        <briefdescription>
<para>Constructs a new line wrapper with default settings. </para>        </briefdescription>
        <detaileddescription>
<para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.h" line="539" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.h" bodystart="539" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1TextLineWrapper_1ad100b263bcb7a78872eeadee8f9bf368" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gmx::TextLineWrapper::TextLineWrapper</definition>
        <argsstring>(const TextLineWrapperSettings &amp;settings)</argsstring>
        <name>TextLineWrapper</name>
        <param>
          <type>const <ref refid="classgmx_1_1TextLineWrapperSettings" kindref="compound">TextLineWrapperSettings</ref> &amp;</type>
          <declname>settings</declname>
        </param>
        <briefdescription>
<para>Constructs a new line wrapper with given settings. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">settings</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapping settings.</para></parameterdescription>
</parameteritem>
</parameterlist>
Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.h" line="549" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.h" bodystart="549" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1TextLineWrapper_1a8715c836e8a0117bf0ceeaf007a496ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgmx_1_1TextLineWrapperSettings" kindref="compound">TextLineWrapperSettings</ref> &amp;</type>
        <definition>TextLineWrapperSettings&amp; gmx::TextLineWrapper::settings</definition>
        <argsstring>()</argsstring>
        <name>settings</name>
        <briefdescription>
<para>Provides access to settings of this wrapper. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The settings object for this wrapper.</para></simplesect>
The returned object can be used to modify settings for the wrapper. All subsequent calls to <ref refid="classgmx_1_1TextLineWrapper_1a17bdad2e591848e64321249e177d1a57" kindref="member">wrapToString()</ref> and <ref refid="classgmx_1_1TextLineWrapper_1ac598eb95c69dff1a8b8f38210189e6f9" kindref="member">wrapToVector()</ref> use the modified settings.</para><para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.h" line="565" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.h" bodystart="565" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1TextLineWrapper_1ae7f2d2d131d490b1c2148d42ee4f5805" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::TextLineWrapper::isTrivial</definition>
        <argsstring>() const </argsstring>
        <name>isTrivial</name>
        <briefdescription>
<para>Returns true if the wrapper would not modify the input string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.h" line="568" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.cpp" bodystart="294" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1TextLineWrapper_1a87d5190aa3de8d2c4841b52e3540cec9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t gmx::TextLineWrapper::findNextLine</definition>
        <argsstring>(const char *input, size_t lineStart) const </argsstring>
        <name>findNextLine</name>
        <param>
          <type>const char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>lineStart</declname>
        </param>
        <briefdescription>
<para>Finds the next line to be wrapped. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>String to wrap. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lineStart</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of first character of the line to find. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of first character of the next line.</para></simplesect>
If this is the last line, returns the length of <computeroutput>input</computeroutput>. In determining the length of the returned line, this function considers the maximum line length, leaving space for indentation, and also whitespace stripping behavior. Thus, the line returned may be longer than the maximum line length if it has leading and/or trailing space. When wrapping a line on a space (not on an explicit line break), the returned index is always on a non-whitespace character after the space.</para><para>To iterate over lines in a string, use the following code: <programlisting><codeline><highlight class="normal"><ref refid="classgmx_1_1TextLineWrapper" kindref="compound">gmx::TextLineWrapper</ref><sp/>wrapper;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;set<sp/>desired<sp/>wrapping<sp/>settings&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lineStart<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/><ref refid="namespaceanonymous__namespace_02xvgtest__tests_8cpp_03_1a9f3c8f8c62476aa47f73bc9ad0905393" kindref="member">input</ref>.length();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(lineStart<sp/>&lt;<sp/>length)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nextLineStart<sp/>=<sp/>wrapper.<ref refid="classgmx_1_1TextLineWrapper_1a87d5190aa3de8d2c4841b52e3540cec9" kindref="member">findNextLine</ref>(<ref refid="namespaceanonymous__namespace_02xvgtest__tests_8cpp_03_1a9f3c8f8c62476aa47f73bc9ad0905393" kindref="member">input</ref>,<sp/>lineStart);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>line<sp/>=<sp/>wrapper.<ref refid="classgmx_1_1TextLineWrapper_1ad728d3d7de840f4ff53f20c7624377d3" kindref="member">formatLine</ref>(<ref refid="namespaceanonymous__namespace_02xvgtest__tests_8cpp_03_1a9f3c8f8c62476aa47f73bc9ad0905393" kindref="member">input</ref>,<sp/>lineStart,<sp/>nextLineStart));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;do<sp/>something<sp/>with<sp/>the<sp/>line&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lineStart<sp/>=<sp/>nextLineStart;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
</programlisting></para><para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.h" line="605" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.cpp" bodystart="301" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1TextLineWrapper_1a8cdfe3759f3d8da4af88c02ee57d4015" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t gmx::TextLineWrapper::findNextLine</definition>
        <argsstring>(const std::string &amp;input, size_t lineStart) const </argsstring>
        <name>findNextLine</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>lineStart</declname>
        </param>
        <briefdescription>
<para>Finds the next line to be wrapped. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>String to wrap. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lineStart</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of first character of the line to find. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of first character of the next line.</para></simplesect>
If this is the last line, returns the length of <computeroutput>input</computeroutput>. In determining the length of the returned line, this function considers the maximum line length, leaving space for indentation, and also whitespace stripping behavior. Thus, the line returned may be longer than the maximum line length if it has leading and/or trailing space. When wrapping a line on a space (not on an explicit line break), the returned index is always on a non-whitespace character after the space.</para><para>To iterate over lines in a string, use the following code: <programlisting><codeline><highlight class="normal"><ref refid="classgmx_1_1TextLineWrapper" kindref="compound">gmx::TextLineWrapper</ref><sp/>wrapper;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;set<sp/>desired<sp/>wrapping<sp/>settings&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lineStart<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/><ref refid="namespaceanonymous__namespace_02xvgtest__tests_8cpp_03_1a9f3c8f8c62476aa47f73bc9ad0905393" kindref="member">input</ref>.length();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(lineStart<sp/>&lt;<sp/>length)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nextLineStart<sp/>=<sp/>wrapper.<ref refid="classgmx_1_1TextLineWrapper_1a87d5190aa3de8d2c4841b52e3540cec9" kindref="member">findNextLine</ref>(<ref refid="namespaceanonymous__namespace_02xvgtest__tests_8cpp_03_1a9f3c8f8c62476aa47f73bc9ad0905393" kindref="member">input</ref>,<sp/>lineStart);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>line<sp/>=<sp/>wrapper.<ref refid="classgmx_1_1TextLineWrapper_1ad728d3d7de840f4ff53f20c7624377d3" kindref="member">formatLine</ref>(<ref refid="namespaceanonymous__namespace_02xvgtest__tests_8cpp_03_1a9f3c8f8c62476aa47f73bc9ad0905393" kindref="member">input</ref>,<sp/>lineStart,<sp/>nextLineStart));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;do<sp/>something<sp/>with<sp/>the<sp/>line&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lineStart<sp/>=<sp/>nextLineStart;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
</programlisting></para><para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.h" line="607" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.cpp" bodystart="339" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1TextLineWrapper_1ad728d3d7de840f4ff53f20c7624377d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::TextLineWrapper::formatLine</definition>
        <argsstring>(const std::string &amp;input, size_t lineStart, size_t lineEnd) const </argsstring>
        <name>formatLine</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>lineStart</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>lineEnd</declname>
        </param>
        <briefdescription>
<para>Formats a single line for output according to wrapping settings. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lineStart</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of first character of the line to format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lineEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of first character of the next line. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The line with leading and/or trailing whitespace removed and indentation applied. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
Intended to be used on the lines found by <ref refid="classgmx_1_1TextLineWrapper_1a87d5190aa3de8d2c4841b52e3540cec9" kindref="member">findNextLine()</ref>. When used with the lines returned from <ref refid="classgmx_1_1TextLineWrapper_1a87d5190aa3de8d2c4841b52e3540cec9" kindref="member">findNextLine()</ref>, the returned line conforms to the wrapper settings. Trailing whitespace is always stripped (including any newlines, i.e., the return value does not contain a newline). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.h" line="624" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.cpp" bodystart="345" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1TextLineWrapper_1a17bdad2e591848e64321249e177d1a57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gmx::TextLineWrapper::wrapToString</definition>
        <argsstring>(const std::string &amp;input) const </argsstring>
        <name>wrapToString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Formats a string, producing a single string with all the lines. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>String to wrap. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>input</computeroutput> with added newlines such that maximum line length is not exceeded. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
Newlines in the input are preserved, including terminal newlines. Note that if the input does not contain a terminal newline, the output does not either. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.h" line="639" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.cpp" bodystart="386" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1TextLineWrapper_1ac598eb95c69dff1a8b8f38210189e6f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; gmx::TextLineWrapper::wrapToVector</definition>
        <argsstring>(const std::string &amp;input) const </argsstring>
        <name>wrapToVector</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Formats a string, producing a vector with all the lines. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>String to wrap. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>input</computeroutput> split into lines such that maximum line length is not exceeded. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
The strings in the returned vector do not contain newlines at the end. Note that a single terminal newline does not affect the output: &quot;line\\n&quot; and &quot;line&quot; both produce the same output (but &quot;line\\n\\n&quot; produces two lines, the second of which is empty). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.h" line="654" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.cpp" bodystart="406" bodyend="418"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Wraps lines to a predefined length. </para>    </briefdescription>
    <detaileddescription>
<para>This utility class wraps lines at word breaks to produce lines that are not longer than a predefined length. Explicit newlines (&apos;\n&apos;) are preserved. Only space is considered a word separator. If a single word exceeds the maximum line length, it is still printed on a single line. Extra whitespace is stripped from the end of produced lines. Other options on the wrapping, such as the line length or indentation, can be changed using a <ref refid="classgmx_1_1TextLineWrapperSettings" kindref="compound">TextLineWrapperSettings</ref> object.</para><para>Two interfaces to do the wrapping are provided:<orderedlist>
<listitem><para>High-level interface using either <ref refid="classgmx_1_1TextLineWrapper_1a17bdad2e591848e64321249e177d1a57" kindref="member">wrapToString()</ref> (produces a single string with embedded newlines) or <ref refid="classgmx_1_1TextLineWrapper_1ac598eb95c69dff1a8b8f38210189e6f9" kindref="member">wrapToVector()</ref> (produces a vector of strings with each line as one element). These methods operate on std::string and wrap the entire input string.</para></listitem><listitem><para>Low-level interface using <ref refid="classgmx_1_1TextLineWrapper_1a87d5190aa3de8d2c4841b52e3540cec9" kindref="member">findNextLine()</ref> and <ref refid="classgmx_1_1TextLineWrapper_1ad728d3d7de840f4ff53f20c7624377d3" kindref="member">formatLine()</ref>. <ref refid="classgmx_1_1TextLineWrapper_1a87d5190aa3de8d2c4841b52e3540cec9" kindref="member">findNextLine()</ref> operates either on a C string or an std::string, and does not do any memory allocation (so it does not throw). It finds the next line to be wrapped, considering the wrapping settings. <ref refid="classgmx_1_1TextLineWrapper_1ad728d3d7de840f4ff53f20c7624377d3" kindref="member">formatLine()</ref> does whitespace operations on the line found by <ref refid="classgmx_1_1TextLineWrapper_1a87d5190aa3de8d2c4841b52e3540cec9" kindref="member">findNextLine()</ref> and returns an std::string. These methods allow custom wrapping implementation to either avoid exceptions or to wrap only a part of the input string.</para></listitem></orderedlist>
</para><para>Typical usage: <programlisting><codeline><highlight class="normal"><ref refid="classgmx_1_1TextLineWrapper" kindref="compound">gmx::TextLineWrapper</ref><sp/>wrapper;</highlight></codeline>
<codeline><highlight class="normal">wrapper.<ref refid="classgmx_1_1TextLineWrapper_1a8715c836e8a0117bf0ceeaf007a496ca" kindref="member">settings</ref>().<ref refid="classgmx_1_1TextLineWrapperSettings_1addcd7997a82afbd9f8a8697dc422c644" kindref="member">setLineLength</ref>(78);</highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>wrapper.<ref refid="classgmx_1_1TextLineWrapper_1a17bdad2e591848e64321249e177d1a57" kindref="member">wrapToString</ref>(textToWrap).c_str());</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.h" line="532" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/stringutil.h" bodystart="531" bodyend="658"/>
    <listofallmembers>
      <member refid="classgmx_1_1TextLineWrapper_1a87d5190aa3de8d2c4841b52e3540cec9" prot="public" virt="non-virtual"><scope>gmx::TextLineWrapper</scope><name>findNextLine</name></member>
      <member refid="classgmx_1_1TextLineWrapper_1a8cdfe3759f3d8da4af88c02ee57d4015" prot="public" virt="non-virtual"><scope>gmx::TextLineWrapper</scope><name>findNextLine</name></member>
      <member refid="classgmx_1_1TextLineWrapper_1ad728d3d7de840f4ff53f20c7624377d3" prot="public" virt="non-virtual"><scope>gmx::TextLineWrapper</scope><name>formatLine</name></member>
      <member refid="classgmx_1_1TextLineWrapper_1ae7f2d2d131d490b1c2148d42ee4f5805" prot="public" virt="non-virtual"><scope>gmx::TextLineWrapper</scope><name>isTrivial</name></member>
      <member refid="classgmx_1_1TextLineWrapper_1a8715c836e8a0117bf0ceeaf007a496ca" prot="public" virt="non-virtual"><scope>gmx::TextLineWrapper</scope><name>settings</name></member>
      <member refid="classgmx_1_1TextLineWrapper_1ab7a252b83a54c5f59621acee079a34fa" prot="private" virt="non-virtual"><scope>gmx::TextLineWrapper</scope><name>settings_</name></member>
      <member refid="classgmx_1_1TextLineWrapper_1a89ea2ec5cfe3a185027f27de1974f8d6" prot="public" virt="non-virtual"><scope>gmx::TextLineWrapper</scope><name>TextLineWrapper</name></member>
      <member refid="classgmx_1_1TextLineWrapper_1ad100b263bcb7a78872eeadee8f9bf368" prot="public" virt="non-virtual"><scope>gmx::TextLineWrapper</scope><name>TextLineWrapper</name></member>
      <member refid="classgmx_1_1TextLineWrapper_1a17bdad2e591848e64321249e177d1a57" prot="public" virt="non-virtual"><scope>gmx::TextLineWrapper</scope><name>wrapToString</name></member>
      <member refid="classgmx_1_1TextLineWrapper_1ac598eb95c69dff1a8b8f38210189e6f9" prot="public" virt="non-virtual"><scope>gmx::TextLineWrapper</scope><name>wrapToVector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
