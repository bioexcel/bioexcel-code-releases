<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1SimdFInt32" kind="class" prot="public">
    <compoundname>gmx::SimdFInt32</compoundname>
    <includes local="no">gromacs/simd/impl_reference/impl_reference_simd_float.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classgmx_1_1SimdFInt32_1a1dcdbb587683efcbc6db3b60adb127b0" prot="public" static="no" mutable="no">
        <type>std::array&lt; std::int32_t, 4 &gt;</type>
        <definition>std::array&lt;std::int32_t, 4 &gt; gmx::SimdFInt32::simdInternal_</definition>
        <argsstring></argsstring>
        <name>simdInternal_</name>
        <briefdescription>
<para>Internal SIMD data. Implementation dependent, don&apos;t touch. </para>        </briefdescription>
        <detaileddescription>
<para>This has to be public to enable usage in combination with static inline functions, but it should never, EVER, be accessed by any code outside the corresponding implementation directory since the type will depend on the architecture. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/simd/impl_reference/impl_reference_simd_float.h" line="125" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/simd/impl_reference/impl_reference_simd_float.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1SimdFInt32_1af5bc74d6b80ffa03eccb5847094a3285" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gmx::SimdFInt32::SimdFInt32</definition>
        <argsstring>()</argsstring>
        <name>SimdFInt32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/simd/impl_reference/impl_reference_simd_float.h" line="113" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/simd/impl_reference/impl_reference_simd_float.h" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1SimdFInt32_1a32a19cb5719199467b676f2afc062b53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gmx::SimdFInt32::SimdFInt32</definition>
        <argsstring>(std::int32_t i)</argsstring>
        <name>SimdFInt32</name>
        <param>
          <type>std::int32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Construct from scalar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/simd/impl_reference/impl_reference_simd_float.h" line="116" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/simd/impl_reference/impl_reference_simd_float.h" bodystart="116" bodyend="116"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Integer SIMD variable type to use for conversions to/from float. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal /> This is also the widest integer SIMD type. Available if GMX_SIMD_HAVE_FLOAT is 1.</para><para><simplesect kind="note"><para>The integer SIMD type will always be available, but on architectures that do not have any real integer SIMD support it might be defined as the floating-point type. This will work fine, since there are separate defines for whether the implementation can actually do any operations on integer SIMD types. </para><simplesectsep/><para>This variable cannot be placed inside other structures or classes, since some compilers (including at least clang-3.7) appear to lose the alignment. This is likely particularly severe when allocating such memory on the heap, but it occurs for stack structures too. </para></simplesect>
</para>    </detaileddescription>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/simd/impl_reference/impl_reference_simd_float.h" line="111" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/simd/impl_reference/impl_reference_simd_float.h" bodystart="110" bodyend="126"/>
    <listofallmembers>
      <member refid="classgmx_1_1SimdFInt32_1af5bc74d6b80ffa03eccb5847094a3285" prot="public" virt="non-virtual"><scope>gmx::SimdFInt32</scope><name>SimdFInt32</name></member>
      <member refid="classgmx_1_1SimdFInt32_1a32a19cb5719199467b676f2afc062b53" prot="public" virt="non-virtual"><scope>gmx::SimdFInt32</scope><name>SimdFInt32</name></member>
      <member refid="classgmx_1_1SimdFInt32_1a1dcdbb587683efcbc6db3b60adb127b0" prot="public" virt="non-virtual"><scope>gmx::SimdFInt32</scope><name>simdInternal_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
