<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOption" kind="class" prot="public">
    <compoundname>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</compoundname>
    <basecompoundref refid="classgmx_1_1OptionTemplate" prot="public" virt="non-virtual">gmx::OptionTemplate&lt; std::string, MockOption &gt;</basecompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOption_1a9079ddf2f7d695cf54fbe8b1ff75bb0e" prot="public" static="no">
        <type><ref refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionInfo" kindref="compound">MockOptionInfo</ref></type>
        <definition>typedef MockOptionInfo anonymous_namespace{abstractoptionstorage.cpp}::MockOption::InfoType</definition>
        <argsstring></argsstring>
        <name>InfoType</name>
        <briefdescription>
<para>OptionInfo subclass corresponding to this option type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/tests/abstractoptionstorage.cpp" line="147" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/tests/abstractoptionstorage.cpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOption_1a2b6b67f87de137504e35cbd292ea252a" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>anonymous_namespace{abstractoptionstorage.cpp}::MockOption::MockOption</definition>
        <argsstring>(const char *name)</argsstring>
        <name>MockOption</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Initializes an option with the given name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/tests/abstractoptionstorage.cpp" line="150" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/tests/abstractoptionstorage.cpp" bodystart="150" bodyend="153"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOption_1a7eaf04b68c0f650276dc5c39d48e5a54" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classgmx_1_1AbstractOptionStorage" kindref="compound">gmx::AbstractOptionStorage</ref> *</type>
        <definition>virtual gmx::AbstractOptionStorage* anonymous_namespace{abstractoptionstorage.cpp}::MockOption::createStorage</definition>
        <argsstring>(const gmx::OptionManagerContainer &amp;) const </argsstring>
        <name>createStorage</name>
        <reimplements refid="classgmx_1_1AbstractOption_1a6f00066ca67f64f6d308f564f5d7b8b6">createStorage</reimplements>
        <param>
          <type>const <ref refid="classgmx_1_1OptionManagerContainer" kindref="compound">gmx::OptionManagerContainer</ref> &amp;</type>
          <declname>managers</declname>
        </param>
        <briefdescription>
<para>Creates a default storage object for the option. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">managers</parametername>
</parameternamelist>
<parameterdescription>
<para>Manager container (unused if the option does not use a manager). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The created storage object. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>APIError</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid option settings have been provided.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method is called by Options::addOption() when initializing an option from the settings.</para><para>Derived classes should implement the method to create an actual storage object and populate it with correct values. They should also throw APIError if they detect problems.</para><para>Should only be called by Options::addOption().</para><para>The ownership of the return value is passed, but is not using a smart pointer to avoid introducing such a dependency in an installed header. The implementation will always consist of a single <computeroutput>new</computeroutput> call and returning that value, and the caller always immediately wraps the pointer in a smart pointer, so there is not exception safety issue. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/tests/abstractoptionstorage.cpp" line="156" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/tests/abstractoptionstorage.cpp" bodystart="156" bodyend="160"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Specifies an option that has a mock storage object for unit testing. </para>    </briefdescription>
    <detaileddescription>
<internal></internal>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>gmx::OptionTemplate&lt; std::string, MockOption &gt;</label>
        <link refid="classgmx_1_1OptionTemplate"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</label>
        <link refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOption"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>gmx::AbstractOption</label>
        <link refid="classgmx_1_1AbstractOption"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8">
        <label>gmx::OptionTemplate&lt; std::string, MockOption &gt;</label>
        <link refid="classgmx_1_1OptionTemplate"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</label>
        <link refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOption"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>gmx::AbstractOption</label>
        <link refid="classgmx_1_1AbstractOption"/>
      </node>
    </collaborationgraph>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/tests/abstractoptionstorage.cpp" line="144" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/tests/abstractoptionstorage.cpp" bodystart="143" bodyend="161"/>
    <listofallmembers>
      <member refid="classgmx_1_1AbstractOption_1aaddb742109b5950860a3b670912d4ad4" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>AbstractOption</name></member>
      <member refid="classgmx_1_1OptionTemplate_1aae70d1a6add1250ff76ba3bed2cedb4c" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>allowMultiple</name></member>
      <member refid="classgmx_1_1AbstractOption_1a3526aab52b26903bc8b8804e20fa57e1" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>clearFlag</name></member>
      <member refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOption_1a7eaf04b68c0f650276dc5c39d48e5a54" prot="private" virt="virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>createStorage</name></member>
      <member refid="classgmx_1_1OptionTemplate_1ae2ae3f0f880d262f5468496ce5350981" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>defaultValue</name></member>
      <member refid="classgmx_1_1OptionTemplate_1a152d086d6480170e5625e11554791d66" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>defaultValue</name></member>
      <member refid="classgmx_1_1OptionTemplate_1a400e5589c2dcb2d4758e21c5feffab69" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>defaultValueIfSet</name></member>
      <member refid="classgmx_1_1OptionTemplate_1afb0c45bf4e3813de0bf09fd3e25be34b" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>defaultValueIfSet</name></member>
      <member refid="classgmx_1_1OptionTemplate_1a6183dbb2066a34dab9327511ffa50838" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>description</name></member>
      <member refid="classgmx_1_1OptionTemplate_1a761c2f380b5376a6288b7e22f8d565cd" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>hidden</name></member>
      <member refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOption_1a9079ddf2f7d695cf54fbe8b1ff75bb0e" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>InfoType</name></member>
      <member refid="classgmx_1_1AbstractOption_1af77d51940ab3c97b82d3e99d779b9f89" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>isVector</name></member>
      <member refid="classgmx_1_1AbstractOption_1a4b0849762f3f80cc37064c97aa89e886" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>maxValueCount_</name></member>
      <member refid="classgmx_1_1OptionTemplate_1a9d3f399542d85299c4baaa8a022cb538" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>me</name></member>
      <member refid="classgmx_1_1AbstractOption_1a473a2162b6ca63a5f982083868664354" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>minValueCount_</name></member>
      <member refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOption_1a2b6b67f87de137504e35cbd292ea252a" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>MockOption</name></member>
      <member refid="classgmx_1_1OptionTemplate_1a07fd012d7538102b0c0aded54a895de4" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>multiValue</name></member>
      <member refid="classgmx_1_1OptionTemplate_1af7b430250bf628205e115a397b7a75b1" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>MyBase</name></member>
      <member refid="classgmx_1_1OptionTemplate_1ac6d35e5daa23fbc3e66e2d3cbc014857" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>MyClass</name></member>
      <member refid="classgmx_1_1OptionTemplate_1a6549910fea5db3f97397efa24de4148a" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>OptionTemplate</name></member>
      <member refid="classgmx_1_1OptionTemplate_1aaceb267de884e94636e5af8be232e6f7" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>required</name></member>
      <member refid="classgmx_1_1AbstractOption_1a4aed9a19d23ab2fc7f0a0cb99d3edbd1" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>setDescription</name></member>
      <member refid="classgmx_1_1AbstractOption_1ae549635f8cb62f9db063484c9612d8f7" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>setFlag</name></member>
      <member refid="classgmx_1_1AbstractOption_1aa54e17953a492b8f2d54f90425842dda" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>setFlag</name></member>
      <member refid="classgmx_1_1AbstractOption_1a4dc01babdc27b0d1bbe3a9fa086dead7" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>setStoreIsSet</name></member>
      <member refid="classgmx_1_1AbstractOption_1a37a58bcd44964145cff4119ee2b36d01" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>setValueCount</name></member>
      <member refid="classgmx_1_1AbstractOption_1ab7833e4048807e6a41ef144bdd2ec6b1" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>setVector</name></member>
      <member refid="classgmx_1_1OptionTemplate_1af7399c1622ad4905e95fafd212b30677" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>store</name></member>
      <member refid="classgmx_1_1OptionTemplate_1ab9277768a3af0e7ad2e5896ec39a54ee" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>store</name></member>
      <member refid="classgmx_1_1OptionTemplate_1ab8430ae1a804bd9400a13f7bc9694234" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>storeCount</name></member>
      <member refid="classgmx_1_1OptionTemplate_1af8c9e05a041f94527c8fafdd40822cf4" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>storeIsSet</name></member>
      <member refid="classgmx_1_1OptionTemplate_1ad3cb044b50f1b2a86b2fe9552165f02c" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>storeVector</name></member>
      <member refid="classgmx_1_1OptionTemplate_1afe031ae2f313bc7d693e5f553e6673a5" prot="protected" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>storeVector</name></member>
      <member refid="classgmx_1_1OptionTemplate_1a7c4ddf73e8031ac29ca19e86fbc232d2" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>valueCount</name></member>
      <member refid="classgmx_1_1OptionTemplate_1a44cf51c8417eeb4a0a20d20a355f8f89" prot="public" virt="non-virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>ValueType</name></member>
      <member refid="classgmx_1_1AbstractOption_1a6625ac1a383212cc8205658ed7274d63" prot="public" virt="virtual"><scope>anonymous_namespace{abstractoptionstorage.cpp}::MockOption</scope><name>~AbstractOption</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
