<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="group__module__trajectoryanalysis" kind="group">
    <compoundname>module_trajectoryanalysis</compoundname>
    <title>Framework for Trajectory Analysis (trajectoryanalysis)</title>
    <innerfile refid="analysismodule_8cpp">analysismodule.cpp</innerfile>
    <innerfile refid="analysismodule_8h">analysismodule.h</innerfile>
    <innerfile refid="analysissettings-impl_8h">analysissettings-impl.h</innerfile>
    <innerfile refid="analysissettings_8cpp">analysissettings.cpp</innerfile>
    <innerfile refid="analysissettings_8h">analysissettings.h</innerfile>
    <innerfile refid="cmdlinerunner_8cpp">cmdlinerunner.cpp</innerfile>
    <innerfile refid="cmdlinerunner_8h">cmdlinerunner.h</innerfile>
    <innerfile refid="modules_2angle_8cpp">angle.cpp</innerfile>
    <innerfile refid="angle_8h">angle.h</innerfile>
    <innerfile refid="modules_2distance_8cpp">distance.cpp</innerfile>
    <innerfile refid="distance_8h">distance.h</innerfile>
    <innerfile refid="modules_2freevolume_8cpp">freevolume.cpp</innerfile>
    <innerfile refid="freevolume_8h">freevolume.h</innerfile>
    <innerfile refid="modules_2pairdist_8cpp">pairdist.cpp</innerfile>
    <innerfile refid="pairdist_8h">pairdist.h</innerfile>
    <innerfile refid="modules_2rdf_8cpp">rdf.cpp</innerfile>
    <innerfile refid="rdf_8h">rdf.h</innerfile>
    <innerfile refid="modules_2sasa_8cpp">sasa.cpp</innerfile>
    <innerfile refid="sasa_8h">sasa.h</innerfile>
    <innerfile refid="modules_2select_8cpp">select.cpp</innerfile>
    <innerfile refid="select_8h">select.h</innerfile>
    <innerfile refid="modules_8cpp">modules.cpp</innerfile>
    <innerfile refid="modules_8h">modules.h</innerfile>
    <innerfile refid="runnercommon_8cpp">runnercommon.cpp</innerfile>
    <innerfile refid="runnercommon_8h">runnercommon.h</innerfile>
    <innerfile refid="tests_2angle_8cpp">angle.cpp</innerfile>
    <innerfile refid="tests_2cmdlinerunner_8cpp">cmdlinerunner.cpp</innerfile>
    <innerfile refid="tests_2distance_8cpp">distance.cpp</innerfile>
    <innerfile refid="tests_2freevolume_8cpp">freevolume.cpp</innerfile>
    <innerfile refid="gromacs_2trajectoryanalysis_2tests_2moduletest_8cpp">moduletest.cpp</innerfile>
    <innerfile refid="gromacs_2trajectoryanalysis_2tests_2moduletest_8h">moduletest.h</innerfile>
    <innerfile refid="tests_2pairdist_8cpp">pairdist.cpp</innerfile>
    <innerfile refid="tests_2rdf_8cpp">rdf.cpp</innerfile>
    <innerfile refid="tests_2sasa_8cpp">sasa.cpp</innerfile>
    <innerfile refid="tests_2select_8cpp">select.cpp</innerfile>
    <innerfile refid="tests_2surfacearea_8cpp">surfacearea.cpp</innerfile>
    <innerfile refid="test__selection_8cpp">test_selection.cpp</innerfile>
    <innerfile refid="trajectoryanalysis_8h">trajectoryanalysis.h</innerfile>
    <innerclass refid="classgmx_1_1TrajectoryAnalysisModule_1_1Impl" prot="public">gmx::TrajectoryAnalysisModule::Impl</innerclass>
    <innerclass refid="classgmx_1_1anonymous__namespace_02analysismodule_8cpp_03_1_1TrajectoryAnalysisModuleDataBasic" prot="public">gmx::anonymous_namespace{analysismodule.cpp}::TrajectoryAnalysisModuleDataBasic</innerclass>
    <innerclass refid="classgmx_1_1TrajectoryAnalysisModuleData" prot="public">gmx::TrajectoryAnalysisModuleData</innerclass>
    <innerclass refid="classgmx_1_1TrajectoryAnalysisModule" prot="public">gmx::TrajectoryAnalysisModule</innerclass>
    <innerclass refid="classgmx_1_1TrajectoryAnalysisSettings" prot="public">gmx::TrajectoryAnalysisSettings</innerclass>
    <innerclass refid="classgmx_1_1TopologyInformation" prot="public">gmx::TopologyInformation</innerclass>
    <innerclass refid="classgmx_1_1TrajectoryAnalysisCommandLineRunner" prot="public">gmx::TrajectoryAnalysisCommandLineRunner</innerclass>
    <innerclass refid="classgmx_1_1analysismodules_1_1anonymous__namespace_02angle_8cpp_03_1_1AnglePositionIterator" prot="public">gmx::analysismodules::anonymous_namespace{angle.cpp}::AnglePositionIterator</innerclass>
    <innerclass refid="classgmx_1_1analysismodules_1_1anonymous__namespace_02freevolume_8cpp_03_1_1FreeVolume" prot="public">gmx::analysismodules::anonymous_namespace{freevolume.cpp}::FreeVolume</innerclass>
    <innerclass refid="classgmx_1_1analysismodules_1_1anonymous__namespace_02pairdist_8cpp_03_1_1PairDistance" prot="public">gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance</innerclass>
    <innerclass refid="classgmx_1_1analysismodules_1_1anonymous__namespace_02pairdist_8cpp_03_1_1PairDistanceModuleData" prot="public">gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistanceModuleData</innerclass>
    <innerclass refid="classgmx_1_1analysismodules_1_1anonymous__namespace_02rdf_8cpp_03_1_1Rdf" prot="public">gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf</innerclass>
    <innerclass refid="classgmx_1_1analysismodules_1_1anonymous__namespace_02rdf_8cpp_03_1_1RdfModuleData" prot="public">gmx::analysismodules::anonymous_namespace{rdf.cpp}::RdfModuleData</innerclass>
    <innerclass refid="structgmx_1_1analysismodules_1_1anonymous__namespace_02sasa_8cpp_03_1_1t__conect" prot="public">gmx::analysismodules::anonymous_namespace{sasa.cpp}::t_conect</innerclass>
    <innerclass refid="classgmx_1_1analysismodules_1_1anonymous__namespace_02sasa_8cpp_03_1_1Sasa" prot="public">gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa</innerclass>
    <innerclass refid="classgmx_1_1analysismodules_1_1anonymous__namespace_02sasa_8cpp_03_1_1SasaModuleData" prot="public">gmx::analysismodules::anonymous_namespace{sasa.cpp}::SasaModuleData</innerclass>
    <innerclass refid="classgmx_1_1SurfaceAreaCalculator" prot="public">gmx::SurfaceAreaCalculator</innerclass>
    <innerclass refid="classgmx_1_1TrajectoryAnalysisRunnerCommon" prot="public">gmx::TrajectoryAnalysisRunnerCommon</innerclass>
    <innerclass refid="classgmx_1_1test_1_1AbstractTrajectoryAnalysisModuleTestFixture" prot="public">gmx::test::AbstractTrajectoryAnalysisModuleTestFixture</innerclass>
    <innerclass refid="classgmx_1_1test_1_1TrajectoryAnalysisModuleTestFixture" prot="public">gmx::test::TrajectoryAnalysisModuleTestFixture</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__module__trajectoryanalysis_1ga11fef88cc73cbb7d6a1fe22fe45b03f1" prot="public" static="no">
        <name>DistanceType</name>
        <enumvalue id="group__module__trajectoryanalysis_1gga11fef88cc73cbb7d6a1fe22fe45b03f1aedb43ca8bcfc5f8562274aa4f98c2e6d" prot="public">
          <name>eDistanceType_Min</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__trajectoryanalysis_1gga11fef88cc73cbb7d6a1fe22fe45b03f1a36af6f44edf2c92e48137b70172f52de" prot="public">
          <name>eDistanceType_Max</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum value to store the selected value for <computeroutput>-type</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" line="81" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="enum" id="group__module__trajectoryanalysis_1gaa41045bded424843f2a238b46773b431" prot="public" static="no">
        <name>GroupType</name>
        <enumvalue id="group__module__trajectoryanalysis_1ggaa41045bded424843f2a238b46773b431a93cef538b7c97599cd96bf311a571962" prot="public">
          <name>eGroupType_All</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__trajectoryanalysis_1ggaa41045bded424843f2a238b46773b431a94416ebbcde8f8e3d4e7437d2154f570" prot="public">
          <name>eGroupType_Residue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__trajectoryanalysis_1ggaa41045bded424843f2a238b46773b431adec94a65c9c2512139aa7cadded80d17" prot="public">
          <name>eGroupType_Molecule</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__trajectoryanalysis_1ggaa41045bded424843f2a238b46773b431ace03bcac89f8704b1266c88852542c6e" prot="public">
          <name>eGroupType_None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum value to store the selected value for <computeroutput>-refgrouping</computeroutput>/<computeroutput>-selgrouping</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" line="88" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" bodystart="87" bodyend="93"/>
      </memberdef>
      <memberdef kind="enum" id="group__module__trajectoryanalysis_1ga63420a120ba42af158e9af58e26baa13" prot="public" static="no">
        <name>Normalization</name>
        <enumvalue id="group__module__trajectoryanalysis_1gga63420a120ba42af158e9af58e26baa13a2c4e7407f270c6044c0ddfd35b016d18" prot="public">
          <name>Normalization_Rdf</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__trajectoryanalysis_1gga63420a120ba42af158e9af58e26baa13a9ccae9955edf84995be2e80b3cf12ab6" prot="public">
          <name>Normalization_NumberDensity</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__trajectoryanalysis_1gga63420a120ba42af158e9af58e26baa13af167359a940d05e6d0eb04df447703bd" prot="public">
          <name>Normalization_None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Normalization for the computed distribution. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" line="94" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" bodystart="93" bodyend="98"/>
      </memberdef>
      <memberdef kind="enum" id="group__module__trajectoryanalysis_1ga795e07fe0102fcc7c7a822f6699c697f" prot="public" static="no">
        <name>SurfaceType</name>
        <enumvalue id="group__module__trajectoryanalysis_1gga795e07fe0102fcc7c7a822f6699c697fa2e450fa1ac99c551f9233d7d3cf0c03f" prot="public">
          <name>SurfaceType_None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__trajectoryanalysis_1gga795e07fe0102fcc7c7a822f6699c697fa9a7d91c2c80f83173ae6591abe8a3d5f" prot="public">
          <name>SurfaceType_Molecule</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__trajectoryanalysis_1gga795e07fe0102fcc7c7a822f6699c697fa75867725d1593bdadb733feb229e7270" prot="public">
          <name>SurfaceType_Residue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Whether to compute RDF wrt. surface of the reference group. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" line="103" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" bodystart="102" bodyend="107"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__module__trajectoryanalysis_1gaa38ce86708e6c1c159ea584468448abb" prot="public" static="no" mutable="no">
        <type>const char *const</type>
        <definition>const char* const gmx::analysismodules::anonymous_namespace{pairdist.cpp}::c_distanceTypes[]</definition>
        <argsstring>[]</argsstring>
        <name>c_distanceTypes</name>
        <initializer>= { &quot;min&quot;, &quot;max&quot; }</initializer>
        <briefdescription>
<para>Strings corresponding to DistanceType. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" line="96" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__trajectoryanalysis_1gaf651b36f9b76eee861733194dccc09bf" prot="public" static="no" mutable="no">
        <type>const char *const</type>
        <definition>const char* const gmx::analysismodules::anonymous_namespace{pairdist.cpp}::c_groupTypes[]</definition>
        <argsstring>[]</argsstring>
        <name>c_groupTypes</name>
        <initializer>= { &quot;all&quot;, &quot;res&quot;, &quot;mol&quot;, &quot;none&quot; }</initializer>
        <briefdescription>
<para>Strings corresponding to GroupType. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" line="98" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__trajectoryanalysis_1gacb9567c2ccbee4fdd22cc27514ed63e4" prot="public" static="no" mutable="no">
        <type>const char *const</type>
        <definition>const char* const gmx::analysismodules::anonymous_namespace{rdf.cpp}::c_NormalizationEnum[]</definition>
        <argsstring>[]</argsstring>
        <name>c_NormalizationEnum</name>
        <initializer>= { &quot;rdf&quot;, &quot;number_density&quot;, &quot;none&quot; }</initializer>
        <briefdescription>
<para>String values corresponding to Normalization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" line="100" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__module__trajectoryanalysis_1gae3952742c2a1a83a562817cd3ec9deec" prot="public" static="no" mutable="no">
        <type>const char *const</type>
        <definition>const char* const gmx::analysismodules::anonymous_namespace{rdf.cpp}::c_SurfaceEnum[]</definition>
        <argsstring>[]</argsstring>
        <name>c_SurfaceEnum</name>
        <initializer>= { &quot;no&quot;, &quot;mol&quot;, &quot;res&quot; }</initializer>
        <briefdescription>
<para>String values corresponding to SurfaceType. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" line="109" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga1f6b2a660c27da40d560f641dc0a7727" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gmx::analysismodules::anonymous_namespace{pairdist.cpp}::initSelectionGroups</definition>
        <argsstring>(Selection *sel, t_topology *top, int type)</argsstring>
        <name>initSelectionGroups</name>
        <param>
          <type>Selection *</type>
          <declname>sel</declname>
        </param>
        <param>
          <type><ref refid="structt__topology" kindref="compound">t_topology</ref> *</type>
          <declname>top</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Helper function to initialize the grouping for a selection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" line="241" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" bodystart="241" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1gaaeebaa150a0076e82c2a8c53d52539d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{sasa.cpp}::add_rec</definition>
        <argsstring>(t_conect c[], int i, int j, real d2)</argsstring>
        <name>add_rec</name>
        <param>
          <type>t_conect</type>
          <declname>c</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>d2</declname>
        </param>
        <briefdescription>
<para>Updates nearest neighbor information for a surface dot. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">c</parametername>
</parameternamelist>
<parameterdescription>
<para>Nearest neighbor information array to update. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index in <computeroutput>c</computeroutput> to update. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">j</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the other surface dot to add to the array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">d2</parametername>
</parameternamelist>
<parameterdescription>
<para>Squared distance between <computeroutput>i</computeroutput> and <computeroutput>j</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" line="113" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" bodystart="113" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga8aa66160ab0c7c1eba818d954edbdd0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{sasa.cpp}::do_conect</definition>
        <argsstring>(const char *fn, int n, rvec x[])</argsstring>
        <name>do_conect</name>
        <param>
          <type>const char *</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>rvec</type>
          <declname>x</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Adds CONECT records for surface dots. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>PDB file to append the CONECT records to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dots in <computeroutput>x</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of surface dot positions.</para></parameterdescription>
</parameteritem>
</parameterlist>
Adds a CONECT record that connects each surface dot to its two nearest neighbors. The function is copied verbatim from the old gmx_sas.c implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" line="158" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" bodystart="158" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1gac151233f8208bd55025d87e8d902ca3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{sasa.cpp}::connolly_plot</definition>
        <argsstring>(const char *fn, int ndots, real dots[], rvec x[], t_atoms *atoms, t_symtab *symtab, int ePBC, const matrix box, gmx_bool bIncludeSolute)</argsstring>
        <name>connolly_plot</name>
        <param>
          <type>const char *</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndots</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>dots</declname>
          <array>[]</array>
        </param>
        <param>
          <type>rvec</type>
          <declname>x</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="structt__atoms" kindref="compound">t_atoms</ref> *</type>
          <declname>atoms</declname>
        </param>
        <param>
          <type><ref refid="structt__symtab" kindref="compound">t_symtab</ref> *</type>
          <declname>symtab</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ePBC</declname>
        </param>
        <param>
          <type>const matrix</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="basedefinitions_8h_1a8fddad319f226e856400d190198d5151" kindref="member">gmx_bool</ref></type>
          <declname>bIncludeSolute</declname>
        </param>
        <briefdescription>
<para>Plots the surface into a PDB file, optionally including the original atoms. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" line="199" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" bodystart="199" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga4530988451bc112680ff52960d0b7e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{sasa.cpp}::computeAreas</definition>
        <argsstring>(const Selection &amp;surfaceSel, const Selection &amp;sel, const std::vector&lt; real &gt; &amp;atomAreas, const std::vector&lt; real &gt; &amp;dgsFactor, real *totalAreaOut, real *dgsolvOut, AnalysisDataHandle atomAreaHandle, AnalysisDataHandle resAreaHandle, std::vector&lt; real &gt; *resAreaWork)</argsstring>
        <name>computeAreas</name>
        <param>
          <type>const Selection &amp;</type>
          <declname>surfaceSel</declname>
        </param>
        <param>
          <type>const Selection &amp;</type>
          <declname>sel</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt; &amp;</type>
          <declname>atomAreas</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt; &amp;</type>
          <declname>dgsFactor</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> *</type>
          <declname>totalAreaOut</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> *</type>
          <declname>dgsolvOut</declname>
        </param>
        <param>
          <type>AnalysisDataHandle</type>
          <declname>atomAreaHandle</declname>
        </param>
        <param>
          <type>AnalysisDataHandle</type>
          <declname>resAreaHandle</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref> &gt; *</type>
          <declname>resAreaWork</declname>
        </param>
        <briefdescription>
<para>Helper method to compute the areas for a single selection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">surfaceSel</parametername>
</parameternamelist>
<parameterdescription>
<para>The calculation selection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sel</parametername>
</parameternamelist>
<parameterdescription>
<para>The selection to compute the areas for (can be <computeroutput>surfaceSel</computeroutput> or one of the output selections). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">atomAreas</parametername>
</parameternamelist>
<parameterdescription>
<para>Atom areas for each position in <computeroutput>surfaceSel</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dgsFactor</parametername>
</parameternamelist>
<parameterdescription>
<para>Free energy coefficients for each position in <computeroutput>surfaceSel</computeroutput>. If empty, free energies are not calculated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">totalAreaOut</parametername>
</parameternamelist>
<parameterdescription>
<para>Total area of <computeroutput>sel</computeroutput> (sum of atom areas it selects). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dgsolvOut</parametername>
</parameternamelist>
<parameterdescription>
<para>Solvation free energy. Will be zero of <computeroutput>dgsFactor</computeroutput> is empty. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atomAreaHandle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data handle to use for storing atom areas for <computeroutput>sel</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resAreaHandle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data handle to use for storing residue areas for <computeroutput>sel</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resAreaWork</parametername>
</parameternamelist>
<parameterdescription>
<para>Work array for accumulating the residue areas. If empty, atom and residue areas are not calculated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>atomAreaHandle</computeroutput> and <computeroutput>resAreaHandle</computeroutput> are not used if <computeroutput>resAreaWork</computeroutput> is empty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" line="817" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" bodystart="817" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga05cb6818f484e7853b6ec70cdc967c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ModuleInfo</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::anonymous_namespace{modules.cpp}::registerModule</definition>
        <argsstring>(CommandLineModuleManager *manager, CommandLineModuleGroup group)</argsstring>
        <name>registerModule</name>
        <param>
          <type>CommandLineModuleManager *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type>CommandLineModuleGroup</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Convenience method for registering a command-line module for trajectory analysis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ModuleInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Info about trajectory analysis module to wrap.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>ModuleInfo</computeroutput> should have static public members <computeroutput>const char name[]</computeroutput>, <computeroutput>const char shortDescription[]</computeroutput>, and <computeroutput><ref refid="namespacegmx_1a832da3c093109c13cc2369de05e02f3b" kindref="member">gmx::TrajectoryAnalysisModulePointer</ref> create()</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules.cpp" line="76" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules.cpp" bodystart="76" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga7a18c2c956e97306dcac66b006c34435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::registerTrajectoryAnalysisModules</definition>
        <argsstring>(CommandLineModuleManager *manager)</argsstring>
        <name>registerTrajectoryAnalysisModules</name>
        <param>
          <type>CommandLineModuleManager *</type>
          <declname>manager</declname>
        </param>
        <briefdescription>
<para>Registers all trajectory analysis command-line modules. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">manager</parametername>
</parameternamelist>
<parameterdescription>
<para>Command-line module manager to receive the modules. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
Registers all trajectory analysis modules declared in the library such that they can be run through <computeroutput>manager</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules.cpp" line="88" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules.cpp" bodystart="88" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1gae5f69b37fcba8efd356e2760496863cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::PairDistance</definition>
        <argsstring>()</argsstring>
        <name>PairDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" line="106" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" bodystart="169" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1gad8c0ee00a3d160339a967bdc6b3391bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::initOptions</definition>
        <argsstring>(IOptionsContainer *options, TrajectoryAnalysisSettings *settings)</argsstring>
        <name>initOptions</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1aba5990675e980bf746ecd224f814d549">initOptions</reimplements>
        <param>
          <type>IOptionsContainer *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>TrajectoryAnalysisSettings *</type>
          <declname>settings</declname>
        </param>
        <briefdescription>
<para>Initializes options understood by the module. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">options</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1Options" kindref="compound">Options</ref> object to add the options to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">settings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings to pass to and from the module.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method is called first after the constructor, and it should add options understood by the module to <computeroutput>options</computeroutput>. Output values from options (including selections) should be stored in member variables.</para><para>In addition to initializing the options, this method can also provide information about the module&apos;s requirements using the <computeroutput>settings</computeroutput> object; see <ref refid="classgmx_1_1TrajectoryAnalysisSettings" kindref="compound">TrajectoryAnalysisSettings</ref> for more details.</para><para>If settings depend on the option values provided by the user, see <ref refid="classgmx_1_1TrajectoryAnalysisModule_1afa3457cc922f1d16c4c19cec740e0442" kindref="member">optionsFinished()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" line="108" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" bodystart="179" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga7ddd9d3c140a117c13024917328f511f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::initAnalysis</definition>
        <argsstring>(const TrajectoryAnalysisSettings &amp;settings, const TopologyInformation &amp;top)</argsstring>
        <name>initAnalysis</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1ae5ae73770caad4ff1808c2ca655dad0e">initAnalysis</reimplements>
        <param>
          <type>const TrajectoryAnalysisSettings &amp;</type>
          <declname>settings</declname>
        </param>
        <param>
          <type>const TopologyInformation &amp;</type>
          <declname>top</declname>
        </param>
        <briefdescription>
<para>Initializes the analysis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">settings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings to pass to and from the module. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">top</parametername>
</parameternamelist>
<parameterdescription>
<para>Topology information.</para></parameterdescription>
</parameteritem>
</parameterlist>
When this function is called, selections have been initialized based on user input, and a topology has been loaded if provided by the user. For dynamic selections, the selections have been evaluated to the largest possible selection, i.e., the selections passed to <ref refid="group__module__trajectoryanalysis_1ga9097c3a860a20805ea623d34bc21aeb6" kindref="member">analyzeFrame()</ref> are always a subset of the selections provided here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" line="110" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" bodystart="256" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga19f58b765ef288bd67d36a86daeb492a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>TrajectoryAnalysisModuleDataPointer</type>
        <definition>TrajectoryAnalysisModuleDataPointer gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::startFrames</definition>
        <argsstring>(const AnalysisDataParallelOptions &amp;opt, const SelectionCollection &amp;selections)</argsstring>
        <name>startFrames</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1a6082fcf69bdc3b0a1945ece31437f195">startFrames</reimplements>
        <param>
          <type>const AnalysisDataParallelOptions &amp;</type>
          <declname>opt</declname>
        </param>
        <param>
          <type>const SelectionCollection &amp;</type>
          <declname>selections</declname>
        </param>
        <briefdescription>
<para>Starts the analysis of frames. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">opt</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">selections</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame-local selection collection object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Data structure for thread-local data.</para></simplesect>
This function is necessary only for threaded parallelization. It is called once for each thread and should initialize a class that contains any required frame-local data in the returned value. The default implementation creates a basic data structure that holds thread-local data handles for all data objects registered with <ref refid="classgmx_1_1TrajectoryAnalysisModule_1a86b3b5cd87518e988e8b5452b39a3ad1" kindref="member">registerAnalysisDataset()</ref>, as well as the thread-local selection collection. These can be accessed in <ref refid="group__module__trajectoryanalysis_1ga9097c3a860a20805ea623d34bc21aeb6" kindref="member">analyzeFrame()</ref> using the methods in <ref refid="classgmx_1_1TrajectoryAnalysisModuleData" kindref="compound">TrajectoryAnalysisModuleData</ref>. If other thread-local data is needed, this function should be overridden and it should create an instance of a class derived from <ref refid="classgmx_1_1TrajectoryAnalysisModuleData" kindref="compound">TrajectoryAnalysisModuleData</ref>.</para><para><simplesect kind="see"><para><ref refid="classgmx_1_1TrajectoryAnalysisModuleData" kindref="compound">TrajectoryAnalysisModuleData</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" line="113" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" bodystart="394" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga9097c3a860a20805ea623d34bc21aeb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::analyzeFrame</definition>
        <argsstring>(int frnr, const t_trxframe &amp;fr, t_pbc *pbc, TrajectoryAnalysisModuleData *pdata)</argsstring>
        <name>analyzeFrame</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1adc7344d1b635c15320af636657383212">analyzeFrame</reimplements>
        <param>
          <type>int</type>
          <declname>frnr</declname>
        </param>
        <param>
          <type>const <ref refid="structt__trxframe" kindref="compound">t_trxframe</ref> &amp;</type>
          <declname>fr</declname>
        </param>
        <param>
          <type><ref refid="structt__pbc" kindref="compound">t_pbc</ref> *</type>
          <declname>pbc</declname>
        </param>
        <param>
          <type>TrajectoryAnalysisModuleData *</type>
          <declname>pdata</declname>
        </param>
        <briefdescription>
<para>Analyzes a single frame. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">frnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame number, a zero-based index that uniquely identifies the frame. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fr</parametername>
</parameternamelist>
<parameterdescription>
<para>Current frame. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pbc</parametername>
</parameternamelist>
<parameterdescription>
<para>Periodic boundary conditions for <computeroutput>fr</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Data structure for frame-local data.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method is called once for each frame to be analyzed, and should analyze the positions provided in the selections. Data handles and selections should be obtained from the <computeroutput>pdata</computeroutput> structure.</para><para>For threaded analysis, this method is called asynchronously in different threads to analyze different frames. The <computeroutput>pdata</computeroutput> structure is one of the structures created with <ref refid="group__module__trajectoryanalysis_1ga19f58b765ef288bd67d36a86daeb492a" kindref="member">startFrames()</ref>, but no assumptions should be made about which of these data structures is used. It is guaranteed that two instances of <ref refid="group__module__trajectoryanalysis_1ga9097c3a860a20805ea623d34bc21aeb6" kindref="member">analyzeFrame()</ref> are not running concurrently with the same <computeroutput>pdata</computeroutput> data structure. Any access to data structures not stored in <computeroutput>pdata</computeroutput> should be designed to be thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" line="116" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" bodystart="404" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga90bf8eb2b9451a9ccd5246ebbd826996" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::finishAnalysis</definition>
        <argsstring>(int nframes)</argsstring>
        <name>finishAnalysis</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1a3b9d902a262ba124be565eca5b714e4b">finishAnalysis</reimplements>
        <param>
          <type>int</type>
          <declname>nframes</declname>
        </param>
        <briefdescription>
<para>Postprocesses data after frames have been read. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nframes</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of frames processed.</para></parameterdescription>
</parameteritem>
</parameterlist>
This function is called after all <ref refid="classgmx_1_1TrajectoryAnalysisModule_1a9d14bf1683086d3fafdb11e23e003de4" kindref="member">finishFrames()</ref> calls have been called. <computeroutput>nframes</computeroutput> will equal the number of calls to <ref refid="group__module__trajectoryanalysis_1ga9097c3a860a20805ea623d34bc21aeb6" kindref="member">analyzeFrame()</ref> that have occurred. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" line="119" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" bodystart="529" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga74eddf616882ee7fcfe9e5698dfa95c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{pairdist.cpp}::PairDistance::writeOutput</definition>
        <argsstring>()</argsstring>
        <name>writeOutput</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1a80869a7764274db8e314bf0a1c5858f6">writeOutput</reimplements>
        <briefdescription>
<para>Writes output into files and/or standard output/error. </para>        </briefdescription>
        <detaileddescription>
<para>All output from the module, excluding data written out for each frame during <ref refid="group__module__trajectoryanalysis_1ga9097c3a860a20805ea623d34bc21aeb6" kindref="member">analyzeFrame()</ref>, should be confined into this function. This function is guaranteed to be called only after <ref refid="group__module__trajectoryanalysis_1ga90bf8eb2b9451a9ccd5246ebbd826996" kindref="member">finishAnalysis()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" line="120" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/pairdist.cpp" bodystart="534" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1gad917b91ae8e1d1610af55674692df87f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::Rdf</definition>
        <argsstring>()</argsstring>
        <name>Rdf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" line="117" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" bodystart="205" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga58fe513cbf09acfb3a07e613cebacc35" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::initOptions</definition>
        <argsstring>(IOptionsContainer *options, TrajectoryAnalysisSettings *settings)</argsstring>
        <name>initOptions</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1aba5990675e980bf746ecd224f814d549">initOptions</reimplements>
        <param>
          <type>IOptionsContainer *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>TrajectoryAnalysisSettings *</type>
          <declname>settings</declname>
        </param>
        <briefdescription>
<para>Initializes options understood by the module. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">options</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1Options" kindref="compound">Options</ref> object to add the options to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">settings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings to pass to and from the module.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method is called first after the constructor, and it should add options understood by the module to <computeroutput>options</computeroutput>. Output values from options (including selections) should be stored in member variables.</para><para>In addition to initializing the options, this method can also provide information about the module&apos;s requirements using the <computeroutput>settings</computeroutput> object; see <ref refid="classgmx_1_1TrajectoryAnalysisSettings" kindref="compound">TrajectoryAnalysisSettings</ref> for more details.</para><para>If settings depend on the option values provided by the user, see <ref refid="group__module__trajectoryanalysis_1gac634f53069bc0de47c0656b16f0e8304" kindref="member">optionsFinished()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" line="119" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" bodystart="224" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1gac634f53069bc0de47c0656b16f0e8304" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::optionsFinished</definition>
        <argsstring>(TrajectoryAnalysisSettings *settings)</argsstring>
        <name>optionsFinished</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1afa3457cc922f1d16c4c19cec740e0442">optionsFinished</reimplements>
        <param>
          <type>TrajectoryAnalysisSettings *</type>
          <declname>settings</declname>
        </param>
        <briefdescription>
<para>Called after all option values have been set. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">settings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings to pass to and from the module.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method is called after option values have been assigned (but interactive selection input has not yet been performed).</para><para>If the module needs to change settings that affect topology loading (can be done using the <computeroutput>settings</computeroutput> object) or selection initialization (can be done using <ref refid="classgmx_1_1SelectionOptionInfo" kindref="compound">SelectionOptionInfo</ref>) based on option values, this method has to be overridden.</para><para>The default implementation does nothing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" line="121" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" bodystart="313" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga68715aa4000c519a0c1f878352be3639" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::initAnalysis</definition>
        <argsstring>(const TrajectoryAnalysisSettings &amp;settings, const TopologyInformation &amp;top)</argsstring>
        <name>initAnalysis</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1ae5ae73770caad4ff1808c2ca655dad0e">initAnalysis</reimplements>
        <param>
          <type>const TrajectoryAnalysisSettings &amp;</type>
          <declname>settings</declname>
        </param>
        <param>
          <type>const TopologyInformation &amp;</type>
          <declname>top</declname>
        </param>
        <briefdescription>
<para>Initializes the analysis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">settings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings to pass to and from the module. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">top</parametername>
</parameternamelist>
<parameterdescription>
<para>Topology information.</para></parameterdescription>
</parameteritem>
</parameterlist>
When this function is called, selections have been initialized based on user input, and a topology has been loaded if provided by the user. For dynamic selections, the selections have been evaluated to the largest possible selection, i.e., the selections passed to <ref refid="group__module__trajectoryanalysis_1ga5334f9e6a192b41fcb597925de850920" kindref="member">analyzeFrame()</ref> are always a subset of the selections provided here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" line="122" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" bodystart="340" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga530786214d4998c33eb464e2b19a64bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::initAfterFirstFrame</definition>
        <argsstring>(const TrajectoryAnalysisSettings &amp;settings, const t_trxframe &amp;fr)</argsstring>
        <name>initAfterFirstFrame</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1a419a3d7f950f0731a20d6a7fafaa6d05">initAfterFirstFrame</reimplements>
        <param>
          <type>const TrajectoryAnalysisSettings &amp;</type>
          <declname>settings</declname>
        </param>
        <param>
          <type>const <ref refid="structt__trxframe" kindref="compound">t_trxframe</ref> &amp;</type>
          <declname>fr</declname>
        </param>
        <briefdescription>
<para>Performs additional initialization after reading the first frame. </para>        </briefdescription>
        <detaileddescription>
<para>When this function is called, selections are the same as in <ref refid="group__module__trajectoryanalysis_1ga68715aa4000c519a0c1f878352be3639" kindref="member">initAnalysis()</ref>, i.e., they have not been evaluated for the first frame.</para><para>It is necessary to override this method only if the module needs to do initialization for which it requires data from the first frame.</para><para>The default implementation does nothing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" line="124" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" bodystart="387" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga6f642652868d498ad78d81054c8aa4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>TrajectoryAnalysisModuleDataPointer</type>
        <definition>TrajectoryAnalysisModuleDataPointer gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::startFrames</definition>
        <argsstring>(const AnalysisDataParallelOptions &amp;opt, const SelectionCollection &amp;selections)</argsstring>
        <name>startFrames</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1a6082fcf69bdc3b0a1945ece31437f195">startFrames</reimplements>
        <param>
          <type>const AnalysisDataParallelOptions &amp;</type>
          <declname>opt</declname>
        </param>
        <param>
          <type>const SelectionCollection &amp;</type>
          <declname>selections</declname>
        </param>
        <briefdescription>
<para>Starts the analysis of frames. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">opt</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">selections</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame-local selection collection object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Data structure for thread-local data.</para></simplesect>
This function is necessary only for threaded parallelization. It is called once for each thread and should initialize a class that contains any required frame-local data in the returned value. The default implementation creates a basic data structure that holds thread-local data handles for all data objects registered with <ref refid="classgmx_1_1TrajectoryAnalysisModule_1a86b3b5cd87518e988e8b5452b39a3ad1" kindref="member">registerAnalysisDataset()</ref>, as well as the thread-local selection collection. These can be accessed in <ref refid="group__module__trajectoryanalysis_1ga5334f9e6a192b41fcb597925de850920" kindref="member">analyzeFrame()</ref> using the methods in <ref refid="classgmx_1_1TrajectoryAnalysisModuleData" kindref="compound">TrajectoryAnalysisModuleData</ref>. If other thread-local data is needed, this function should be overridden and it should create an instance of a class derived from <ref refid="classgmx_1_1TrajectoryAnalysisModuleData" kindref="compound">TrajectoryAnalysisModuleData</ref>.</para><para><simplesect kind="see"><para><ref refid="classgmx_1_1TrajectoryAnalysisModuleData" kindref="compound">TrajectoryAnalysisModuleData</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" line="127" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" bodystart="456" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga5334f9e6a192b41fcb597925de850920" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::analyzeFrame</definition>
        <argsstring>(int frnr, const t_trxframe &amp;fr, t_pbc *pbc, TrajectoryAnalysisModuleData *pdata)</argsstring>
        <name>analyzeFrame</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1adc7344d1b635c15320af636657383212">analyzeFrame</reimplements>
        <param>
          <type>int</type>
          <declname>frnr</declname>
        </param>
        <param>
          <type>const <ref refid="structt__trxframe" kindref="compound">t_trxframe</ref> &amp;</type>
          <declname>fr</declname>
        </param>
        <param>
          <type><ref refid="structt__pbc" kindref="compound">t_pbc</ref> *</type>
          <declname>pbc</declname>
        </param>
        <param>
          <type>TrajectoryAnalysisModuleData *</type>
          <declname>pdata</declname>
        </param>
        <briefdescription>
<para>Analyzes a single frame. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">frnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame number, a zero-based index that uniquely identifies the frame. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fr</parametername>
</parameternamelist>
<parameterdescription>
<para>Current frame. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pbc</parametername>
</parameternamelist>
<parameterdescription>
<para>Periodic boundary conditions for <computeroutput>fr</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Data structure for frame-local data.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method is called once for each frame to be analyzed, and should analyze the positions provided in the selections. Data handles and selections should be obtained from the <computeroutput>pdata</computeroutput> structure.</para><para>For threaded analysis, this method is called asynchronously in different threads to analyze different frames. The <computeroutput>pdata</computeroutput> structure is one of the structures created with <ref refid="group__module__trajectoryanalysis_1ga6f642652868d498ad78d81054c8aa4c5" kindref="member">startFrames()</ref>, but no assumptions should be made about which of these data structures is used. It is guaranteed that two instances of <ref refid="group__module__trajectoryanalysis_1ga5334f9e6a192b41fcb597925de850920" kindref="member">analyzeFrame()</ref> are not running concurrently with the same <computeroutput>pdata</computeroutput> data structure. Any access to data structures not stored in <computeroutput>pdata</computeroutput> should be designed to be thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" line="130" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" bodystart="465" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga98f58d0b39eb76e41afcf6d718288179" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::finishAnalysis</definition>
        <argsstring>(int nframes)</argsstring>
        <name>finishAnalysis</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1a3b9d902a262ba124be565eca5b714e4b">finishAnalysis</reimplements>
        <param>
          <type>int</type>
          <declname>nframes</declname>
        </param>
        <briefdescription>
<para>Postprocesses data after frames have been read. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nframes</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of frames processed.</para></parameterdescription>
</parameteritem>
</parameterlist>
This function is called after all <ref refid="classgmx_1_1TrajectoryAnalysisModule_1a9d14bf1683086d3fafdb11e23e003de4" kindref="member">finishFrames()</ref> calls have been called. <computeroutput>nframes</computeroutput> will equal the number of calls to <ref refid="group__module__trajectoryanalysis_1ga5334f9e6a192b41fcb597925de850920" kindref="member">analyzeFrame()</ref> that have occurred. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" line="133" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" bodystart="587" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1gab2f89d7a6d2caea0c449ed36fa6bb533" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{rdf.cpp}::Rdf::writeOutput</definition>
        <argsstring>()</argsstring>
        <name>writeOutput</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1a80869a7764274db8e314bf0a1c5858f6">writeOutput</reimplements>
        <briefdescription>
<para>Writes output into files and/or standard output/error. </para>        </briefdescription>
        <detaileddescription>
<para>All output from the module, excluding data written out for each frame during <ref refid="group__module__trajectoryanalysis_1ga5334f9e6a192b41fcb597925de850920" kindref="member">analyzeFrame()</ref>, should be confined into this function. This function is guaranteed to be called only after <ref refid="group__module__trajectoryanalysis_1ga98f58d0b39eb76e41afcf6d718288179" kindref="member">finishAnalysis()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" line="134" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/rdf.cpp" bodystart="683" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1gaca9508c40ca0df18f512425a851b7622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::Sasa</definition>
        <argsstring>()</argsstring>
        <name>Sasa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" line="288" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" bodystart="396" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga34c4a69e301a4a6e720cdb4c2eb6178e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::initOptions</definition>
        <argsstring>(IOptionsContainer *options, TrajectoryAnalysisSettings *settings)</argsstring>
        <name>initOptions</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1aba5990675e980bf746ecd224f814d549">initOptions</reimplements>
        <param>
          <type>IOptionsContainer *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>TrajectoryAnalysisSettings *</type>
          <declname>settings</declname>
        </param>
        <briefdescription>
<para>Initializes options understood by the module. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">options</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1Options" kindref="compound">Options</ref> object to add the options to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">settings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings to pass to and from the module.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method is called first after the constructor, and it should add options understood by the module to <computeroutput>options</computeroutput>. Output values from options (including selections) should be stored in member variables.</para><para>In addition to initializing the options, this method can also provide information about the module&apos;s requirements using the <computeroutput>settings</computeroutput> object; see <ref refid="classgmx_1_1TrajectoryAnalysisSettings" kindref="compound">TrajectoryAnalysisSettings</ref> for more details.</para><para>If settings depend on the option values provided by the user, see <ref refid="classgmx_1_1TrajectoryAnalysisModule_1afa3457cc922f1d16c4c19cec740e0442" kindref="member">optionsFinished()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" line="290" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" bodystart="408" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga7917b635ab1e7389ab733f03162df3ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::initAnalysis</definition>
        <argsstring>(const TrajectoryAnalysisSettings &amp;settings, const TopologyInformation &amp;top)</argsstring>
        <name>initAnalysis</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1ae5ae73770caad4ff1808c2ca655dad0e">initAnalysis</reimplements>
        <param>
          <type>const TrajectoryAnalysisSettings &amp;</type>
          <declname>settings</declname>
        </param>
        <param>
          <type>const TopologyInformation &amp;</type>
          <declname>top</declname>
        </param>
        <briefdescription>
<para>Initializes the analysis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">settings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings to pass to and from the module. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">top</parametername>
</parameternamelist>
<parameterdescription>
<para>Topology information.</para></parameterdescription>
</parameteritem>
</parameterlist>
When this function is called, selections have been initialized based on user input, and a topology has been loaded if provided by the user. For dynamic selections, the selections have been evaluated to the largest possible selection, i.e., the selections passed to <ref refid="group__module__trajectoryanalysis_1gaf1c894303aee5cf5fb37b599e4e03dd0" kindref="member">analyzeFrame()</ref> are always a subset of the selections provided here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" line="292" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" bodystart="498" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1gaef2b22753bc218ea44b7f92b89e9f8af" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>TrajectoryAnalysisModuleDataPointer</type>
        <definition>TrajectoryAnalysisModuleDataPointer gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::startFrames</definition>
        <argsstring>(const AnalysisDataParallelOptions &amp;opt, const SelectionCollection &amp;selections)</argsstring>
        <name>startFrames</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1a6082fcf69bdc3b0a1945ece31437f195">startFrames</reimplements>
        <param>
          <type>const AnalysisDataParallelOptions &amp;</type>
          <declname>opt</declname>
        </param>
        <param>
          <type>const SelectionCollection &amp;</type>
          <declname>selections</declname>
        </param>
        <briefdescription>
<para>Starts the analysis of frames. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">opt</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">selections</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame-local selection collection object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Data structure for thread-local data.</para></simplesect>
This function is necessary only for threaded parallelization. It is called once for each thread and should initialize a class that contains any required frame-local data in the returned value. The default implementation creates a basic data structure that holds thread-local data handles for all data objects registered with <ref refid="classgmx_1_1TrajectoryAnalysisModule_1a86b3b5cd87518e988e8b5452b39a3ad1" kindref="member">registerAnalysisDataset()</ref>, as well as the thread-local selection collection. These can be accessed in <ref refid="group__module__trajectoryanalysis_1gaf1c894303aee5cf5fb37b599e4e03dd0" kindref="member">analyzeFrame()</ref> using the methods in <ref refid="classgmx_1_1TrajectoryAnalysisModuleData" kindref="compound">TrajectoryAnalysisModuleData</ref>. If other thread-local data is needed, this function should be overridden and it should create an instance of a class derived from <ref refid="classgmx_1_1TrajectoryAnalysisModuleData" kindref="compound">TrajectoryAnalysisModuleData</ref>.</para><para><simplesect kind="see"><para><ref refid="classgmx_1_1TrajectoryAnalysisModuleData" kindref="compound">TrajectoryAnalysisModuleData</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" line="295" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" bodystart="789" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1gaf1c894303aee5cf5fb37b599e4e03dd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::analyzeFrame</definition>
        <argsstring>(int frnr, const t_trxframe &amp;fr, t_pbc *pbc, TrajectoryAnalysisModuleData *pdata)</argsstring>
        <name>analyzeFrame</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1adc7344d1b635c15320af636657383212">analyzeFrame</reimplements>
        <param>
          <type>int</type>
          <declname>frnr</declname>
        </param>
        <param>
          <type>const <ref refid="structt__trxframe" kindref="compound">t_trxframe</ref> &amp;</type>
          <declname>fr</declname>
        </param>
        <param>
          <type><ref refid="structt__pbc" kindref="compound">t_pbc</ref> *</type>
          <declname>pbc</declname>
        </param>
        <param>
          <type>TrajectoryAnalysisModuleData *</type>
          <declname>pdata</declname>
        </param>
        <briefdescription>
<para>Analyzes a single frame. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">frnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame number, a zero-based index that uniquely identifies the frame. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fr</parametername>
</parameternamelist>
<parameterdescription>
<para>Current frame. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pbc</parametername>
</parameternamelist>
<parameterdescription>
<para>Periodic boundary conditions for <computeroutput>fr</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Data structure for frame-local data.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method is called once for each frame to be analyzed, and should analyze the positions provided in the selections. Data handles and selections should be obtained from the <computeroutput>pdata</computeroutput> structure.</para><para>For threaded analysis, this method is called asynchronously in different threads to analyze different frames. The <computeroutput>pdata</computeroutput> structure is one of the structures created with <ref refid="group__module__trajectoryanalysis_1gaef2b22753bc218ea44b7f92b89e9f8af" kindref="member">startFrames()</ref>, but no assumptions should be made about which of these data structures is used. It is guaranteed that two instances of <ref refid="group__module__trajectoryanalysis_1gaf1c894303aee5cf5fb37b599e4e03dd0" kindref="member">analyzeFrame()</ref> are not running concurrently with the same <computeroutput>pdata</computeroutput> data structure. Any access to data structures not stored in <computeroutput>pdata</computeroutput> should be designed to be thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" line="298" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" bodystart="877" bodyend="1033"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1gae58a22fc3e323131e5a606a0aa7792cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::finishAnalysis</definition>
        <argsstring>(int nframes)</argsstring>
        <name>finishAnalysis</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1a3b9d902a262ba124be565eca5b714e4b">finishAnalysis</reimplements>
        <param>
          <type>int</type>
          <declname>nframes</declname>
        </param>
        <briefdescription>
<para>Postprocesses data after frames have been read. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nframes</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of frames processed.</para></parameterdescription>
</parameteritem>
</parameterlist>
This function is called after all <ref refid="classgmx_1_1TrajectoryAnalysisModule_1a9d14bf1683086d3fafdb11e23e003de4" kindref="member">finishFrames()</ref> calls have been called. <computeroutput>nframes</computeroutput> will equal the number of calls to <ref refid="group__module__trajectoryanalysis_1gaf1c894303aee5cf5fb37b599e4e03dd0" kindref="member">analyzeFrame()</ref> that have occurred. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" line="301" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" bodystart="1036" bodyend="1055"/>
      </memberdef>
      <memberdef kind="function" id="group__module__trajectoryanalysis_1ga57b0ca1ca5a2372184f451654e2354c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void gmx::analysismodules::anonymous_namespace{sasa.cpp}::Sasa::writeOutput</definition>
        <argsstring>()</argsstring>
        <name>writeOutput</name>
        <reimplements refid="classgmx_1_1TrajectoryAnalysisModule_1a80869a7764274db8e314bf0a1c5858f6">writeOutput</reimplements>
        <briefdescription>
<para>Writes output into files and/or standard output/error. </para>        </briefdescription>
        <detaileddescription>
<para>All output from the module, excluding data written out for each frame during <ref refid="group__module__trajectoryanalysis_1gaf1c894303aee5cf5fb37b599e4e03dd0" kindref="member">analyzeFrame()</ref>, should be confined into this function. This function is guaranteed to be called only after <ref refid="group__module__trajectoryanalysis_1gae58a22fc3e323131e5a606a0aa7792cb" kindref="member">finishAnalysis()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" line="302" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/trajectoryanalysis/modules/sasa.cpp" bodystart="1058" bodyend="1060"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides functionality for implementing trajectory analysis modules. </para>    </briefdescription>
    <detaileddescription>
<para>This module implements a framework for implementing flexible trajectory analysis routines. It provides a base class for implementing analysis as reusable modules that can be used from different contexts and can also support per-frame parallelization. It integrally uses functionality from the following modules:<itemizedlist>
<listitem><para><ref refid="group__module__options" kindref="compound">Extensible Handling of Options (options)</ref></para></listitem><listitem><para><ref refid="group__module__analysisdata" kindref="compound">Parallelizable Handling of Output Data (analysisdata)</ref></para></listitem><listitem><para><ref refid="group__module__selection" kindref="compound">Parsing and Evaluation of Analysis Selections (selection)</ref></para></listitem></itemizedlist>
</para><para>The main interface of this module is the <ref refid="classgmx_1_1TrajectoryAnalysisModule" kindref="compound">gmx::TrajectoryAnalysisModule</ref> class. Analysis modules should derive from this class, and override the necessary virtual methods to provide the actual initialization and analysis routines. Classes <ref refid="classgmx_1_1TrajectoryAnalysisSettings" kindref="compound">gmx::TrajectoryAnalysisSettings</ref> and <ref refid="classgmx_1_1TopologyInformation" kindref="compound">gmx::TopologyInformation</ref> (in addition to classes declared in the above-mentioned modules) are used to pass information to and from these methods. <ref refid="classgmx_1_1TrajectoryAnalysisModuleData" kindref="compound">gmx::TrajectoryAnalysisModuleData</ref> can be used in advanced scenarios where the tool requires custom thread-local data for parallel analysis.</para><para>The sequence charts below provides an overview of how the trajectory analysis modules typically interact with other components. The first chart provides an overview of the call sequence of the most important methods in <ref refid="classgmx_1_1TrajectoryAnalysisModule" kindref="compound">gmx::TrajectoryAnalysisModule</ref>. There is a runner, which is responsible for doing the work that is shared between all trajectory analysis (such as reading the trajectory and processing selections). The runner then calls different methods in the analysis module at appropriate points to perform the module-specific tasks. The analysis module is responsible for creating and managing <ref refid="classgmx_1_1AnalysisData" kindref="compound">gmx::AnalysisData</ref> objects, and the chart shows the most important interactions with this module as well. However, the runner takes responsibility of calling <ref refid="classgmx_1_1AnalysisData_1a54e98fd211473c7cfe750e2b49517d96" kindref="member">gmx::AnalysisData::finishFrameSerial()</ref>. Interactions with options (for command-line option processing) and selections is not shown for brevity: see <ref refid="group__module__options" kindref="compound">Extensible Handling of Options (options)</ref> for an overview of how options work, and the second chart for a more detailed view of how selections are accessed from an analysis module. <msc> 
    runner,
    module [ URL=&quot;\ref gmx::TrajectoryAnalysisModule&quot; ],
    data [ label=&quot;analysis data&quot;, URL=&quot;\ref module_analysisdata&quot; ];

    runner box module [ label=&quot;caller owns runner and module objects&quot; ];
    module =&gt; data [ label=&quot;create (in constructor)&quot; ];
    runner =&gt; module [ label=&quot;initOptions()&quot;,
                       URL=&quot;\ref gmx::TrajectoryAnalysisModule::initOptions()&quot; ];
    runner =&gt; runner [ label=&quot;parse user input&quot; ];
    runner =&gt; module [ label=&quot;optionsFinished()&quot;,
                       URL=&quot;\ref gmx::TrajectoryAnalysisModule::optionsFinished()&quot; ];
    runner =&gt; runner [ label=&quot;initialize topology\nand selections&quot; ];
    runner =&gt; module [ label=&quot;initAnalysis()&quot;,
                       URL=&quot;\ref gmx::TrajectoryAnalysisModule::initAnalysis()&quot; ];
    module =&gt; data [ label=&quot;initialize&quot; ];
    runner =&gt; runner [ label=&quot;read frame 0&quot; ];
    runner =&gt; module [ label=&quot;initAfterFirstFrame()&quot;,
                       URL=&quot;\ref gmx::TrajectoryAnalysisModule::initAfterFirstFrame()&quot; ];
    --- [ label=&quot;loop over frames starts&quot; ];
    runner =&gt; runner [ label=&quot;initialize frame 0&quot; ];
    runner =&gt; module [ label=&quot;analyzeFrame(0)&quot;,
                       URL=&quot;\ref gmx::TrajectoryAnalysisModule::analyzeFrame()&quot; ];
    module =&gt; data [ label=&quot;add data&quot;,
                     URL=&quot;\ref gmx::AnalysisDataHandle&quot; ];
    module =&gt; data [ label=&quot;finishFrame()&quot;,
                     URL=&quot;\ref gmx::AnalysisDataHandle::finishFrame()&quot; ];
    runner =&gt; data [ label=&quot;finishFrameSerial()&quot;,
                     URL=&quot;\ref gmx::AnalysisData::finishFrameSerial()&quot; ];
    runner =&gt; runner [ label=&quot;read and initialize frame 1&quot; ];
    runner =&gt; module [ label=&quot;analyzeFrame(1)&quot;,
                        URL=&quot;\ref gmx::TrajectoryAnalysisModule::analyzeFrame()&quot; ];
    ...;
    --- [ label=&quot;loop over frames ends&quot; ];
    runner =&gt; module [ label=&quot;finishAnalysis()&quot;,
                       URL=&quot;\ref gmx::TrajectoryAnalysisModule::finishAnalysis()&quot; ];
    module =&gt; data [ label=&quot;post-process data&quot; ];
    runner =&gt; module [ label=&quot;writeOutput()&quot;,
                       URL=&quot;\ref gmx::TrajectoryAnalysisModule::writeOutput()&quot; ];
</msc></para><para>The second chart below shows the interaction with selections and options with focus on selection options. The <ref refid="classgmx_1_1TrajectoryAnalysisModule" kindref="compound">gmx::TrajectoryAnalysisModule</ref> object creates one or more <ref refid="classgmx_1_1Selection" kindref="compound">gmx::Selection</ref> variables, and uses <ref refid="classgmx_1_1SelectionOption" kindref="compound">gmx::SelectionOption</ref> to indicate them as the destination for selections. This happens in <ref refid="classgmx_1_1TrajectoryAnalysisModule_1aba5990675e980bf746ecd224f814d549" kindref="member">gmx::TrajectoryAnalysisModule::initOptions()</ref>. After the options have been parsed (includes parsing any options present on the command-line or read from files, but not those provided interactively), <ref refid="classgmx_1_1TrajectoryAnalysisModule_1afa3457cc922f1d16c4c19cec740e0442" kindref="member">gmx::TrajectoryAnalysisModule::optionsFinished()</ref> can adjust the selections using <ref refid="classgmx_1_1SelectionOptionInfo" kindref="compound">gmx::SelectionOptionInfo</ref>. This is done like this to allow the analysis module to influence the interactive prompt of selections based on what command-line options were given. After optionsFinished() returns, the interactive selection prompt is presented if necessary. After this point, all access to selections from the analysis module is through the <ref refid="classgmx_1_1Selection" kindref="compound">gmx::Selection</ref> variables: the runner is responsible for calling methods in the selection library, and these methods update the content referenced by the <ref refid="classgmx_1_1Selection" kindref="compound">gmx::Selection</ref> variables. See documentation of <ref refid="classgmx_1_1TrajectoryAnalysisModule" kindref="compound">gmx::TrajectoryAnalysisModule</ref> for details of what the selections contain at each point. <msc> 
    runner,
    options [ label=&quot;Options&quot;, URL=&quot;\ref module_options&quot; ],
    selection [ label=&quot;selections&quot;, URL=&quot;\ref module_selection&quot; ],
    module [ label=&quot;module&quot;, URL=&quot;\ref gmx::TrajectoryAnalysisModule&quot; ];

    runner box selection [ label=&quot;all these objects are owned by the framework&quot; ];
    runner =&gt; module [ label=&quot;initOptions()&quot;,
                       URL=&quot;\ref gmx::TrajectoryAnalysisModule::initOptions()&quot; ];
    module =&gt; options [ label=&quot;addOption(SelectionOption)&quot;,
                        URL=&quot;\ref gmx::SelectionOption&quot; ];
    module =&gt; options [ label=&quot;addOption() (other options)&quot;,
                        URL=&quot;\ref gmx::Options::addOption()&quot; ];
    ...;
    runner &lt;&lt; module;
    runner =&gt; options [ label=&quot;parse command-line parameters&quot; ];
    options =&gt; selection [ label=&quot;parse selections&quot; ];
    selection -&gt; module [ label=&quot;initialize Selection variables&quot;,
                          URL=&quot;\ref gmx::Selection&quot; ];
    runner &lt;&lt; options;
    runner =&gt; module [ label=&quot;optionsFinished()&quot;,
                       URL=&quot;\ref gmx::TrajectoryAnalysisModule::optionsFinished()&quot; ];
    module =&gt; selection [ label=&quot;adjust SelectionOptions&quot;,
                          URL=&quot;\ref gmx::SelectionOptionInfo&quot; ];
    runner &lt;&lt; module;
    runner =&gt; selection [ label=&quot;prompt missing selections&quot; ];
    selection -&gt; module [ label=&quot;initialize Selection variables&quot;,
                        URL=&quot;\ref gmx::Selection&quot; ];
    runner =&gt; selection [ label=&quot;compile selections&quot; ];
    selection -&gt; module [ label=&quot;change content referenced\nby Selection variables&quot; ];
    runner =&gt; module [ label=&quot;initAnalysis()&quot;,
                       URL=&quot;\ref gmx::TrajectoryAnalysisModule::initAnalysis()&quot; ];
    ...;
    --- [ label=&quot;loop over frames starts&quot; ];
    runner =&gt; runner [ label=&quot;read and initialize frame 0&quot; ];
    runner =&gt; selection [ label=&quot;evaluate selections for frame 0&quot; ];
    selection -&gt; module [ label=&quot;change content referenced\nby Selection variables&quot; ];
    ...;
</msc></para><para>The final chart shows the flow within the frame loop in the case of parallel (threaded) execution and the interaction with the <ref refid="group__module__analysisdata" kindref="compound">Parallelizable Handling of Output Data (analysisdata)</ref> module in this case. Although parallelization has not yet been implemented, it has influenced the design and needs to be understood if one wants to write modules that can take advantage of the parallelization once it gets implemented. The parallelization takes part over frames: analyzing a single frame is one unit of work. When the frame loop is started, <ref refid="classgmx_1_1TrajectoryAnalysisModule_1a6082fcf69bdc3b0a1945ece31437f195" kindref="member">gmx::TrajectoryAnalysisModule::startFrames()</ref> is called for each thread, and initializes an object that contains thread-local data needed during the analysis. This includes selection information, <ref refid="classgmx_1_1AnalysisDataHandle" kindref="compound">gmx::AnalysisDataHandle</ref> objects, and possibly other module-specific variables. Then, the runner reads the frames in sequence and passes the work into the different threads, together with the appropriate thread-local data object. The <ref refid="classgmx_1_1TrajectoryAnalysisModule_1adc7344d1b635c15320af636657383212" kindref="member">gmx::TrajectoryAnalysisModule::analyzeFrame()</ref> calls are only allowed to modify the thread-local data object; everything else is read-only. For any output, they pass the information to <ref refid="classgmx_1_1AnalysisData" kindref="compound">gmx::AnalysisData</ref>, which together with the runner takes care of ordering the data from different frames such that it gets processed in the right order. When all frames are analyzed, <ref refid="classgmx_1_1TrajectoryAnalysisModule_1a9d14bf1683086d3fafdb11e23e003de4" kindref="member">gmx::TrajectoryAnalysisModule::finishFrames()</ref> is called for each thread-local data object to destroy them and to accumulate possible results from them into the main <ref refid="classgmx_1_1TrajectoryAnalysisModule" kindref="compound">gmx::TrajectoryAnalysisModule</ref> object. Note that in the diagram, some part of the work attributed for the runner (e.g., evaluating selections) will actually be carried out in the analysis threads before <ref refid="classgmx_1_1TrajectoryAnalysisModule_1adc7344d1b635c15320af636657383212" kindref="member">gmx::TrajectoryAnalysisModule::analyzeFrame()</ref> gets called. <msc> 
    runner,
    module [ label=&quot;module object&quot; ],
    thread1 [ label=&quot;analysis\nthread 1&quot; ],
    thread2 [ label=&quot;analysis\nthread 2&quot; ],
    data [ label=&quot;analysis data&quot;, URL=&quot;\ref module_analysisdata&quot; ];

    module box thread2 [ label=&quot;single TrajectoryAnalysisModule object&quot;,
                         URL=&quot;\ref gmx::TrajectoryAnalysisModule&quot; ];
    ...;
    --- [ label=&quot;loop over frames starts&quot; ];
    runner =&gt; thread1 [ label=&quot;startFrames()&quot;,
                        URL=&quot;\ref gmx::TrajectoryAnalysisModule::startFrames()&quot; ];
    thread1 =&gt; data [ label=&quot;startData()&quot;,
                      URL=&quot;\ref gmx::AnalysisData::startData()&quot; ];
    runner &lt;&lt; thread1 [ label=&quot;pdata1&quot; ];
    runner =&gt; thread2 [ label=&quot;startFrames()&quot;,
                        URL=&quot;\ref gmx::TrajectoryAnalysisModule::startFrames()&quot; ];
    thread2 =&gt; data [ label=&quot;startData()&quot;,
                      URL=&quot;\ref gmx::AnalysisData::startData()&quot; ];
    runner &lt;&lt; thread2 [ label=&quot;pdata2&quot; ];
    |||;
    runner =&gt; runner [ label=&quot;initialize frame 0&quot; ];
    runner =&gt; thread1 [ label=&quot;analyzeFrame(0, pdata1)&quot;,
                        URL=&quot;\ref gmx::TrajectoryAnalysisModule::analyzeFrame()&quot; ];
    runner =&gt; runner [ label=&quot;read and initialize frame 1&quot; ];
    runner =&gt; thread2 [ label=&quot;analyzeFrame(1, pdata2)&quot;,
                        URL=&quot;\ref gmx::TrajectoryAnalysisModule::analyzeFrame()&quot; ];
    thread1 =&gt; data [ label=&quot;add data&quot;,
                      URL=&quot;\ref gmx::AnalysisDataHandle&quot; ];
    thread2 =&gt; data [ label=&quot;add data&quot;,
                      URL=&quot;\ref gmx::AnalysisDataHandle&quot; ];
    thread2 =&gt; data [ label=&quot;finishFrame(1)&quot;,
                      URL=&quot;\ref gmx::AnalysisDataHandle::finishFrame()&quot; ];
    runner &lt;&lt; thread2 [ label=&quot;analyzeFrame() (frame 1)&quot; ];
    runner =&gt; runner [ label=&quot;read and initialize frame 2&quot; ];
    runner =&gt; thread2 [ label=&quot;analyzeFrame(2)&quot;,
                        URL=&quot;\ref gmx::TrajectoryAnalysisModule::analyzeFrame()&quot; ];
    thread1 =&gt; data [ label=&quot;finishFrame(0)&quot;,
                      URL=&quot;\ref gmx::AnalysisDataHandle::finishFrame()&quot; ];
    runner &lt;&lt; thread1 [ label=&quot;analyzeFrame() (frame 0)&quot; ];
    runner =&gt; data [ label=&quot;finishFrameSerial() (frame 0)&quot;,
                     URL=&quot;\ref gmx::AnalysisData::finishFrameSerial()&quot; ];
    runner =&gt; data [ label=&quot;finishFrameSerial() (frame 1)&quot;,
                     URL=&quot;\ref gmx::AnalysisData::finishFrameSerial()&quot; ];
    ...;
    runner =&gt; thread1 [ label=&quot;finishFrames(pdata1)&quot;,
                        URL=&quot;\ref gmx::TrajectoryAnalysisModule::finishFrames()&quot; ];
    thread1 =&gt; data [ label=&quot;finishData()&quot;,
                      URL=&quot;\ref gmx::AnalysisData::finishData()&quot; ];
    thread1 -&gt; module [ label=&quot;accumulate results&quot; ];
    runner &lt;&lt; thread1;
    runner =&gt; thread2 [ label=&quot;finishFrames(pdata2)&quot;,
                        URL=&quot;\ref gmx::TrajectoryAnalysisModule::finishFrames()&quot; ];
    thread2 =&gt; data [ label=&quot;finishData()&quot;,
                      URL=&quot;\ref gmx::AnalysisData::finishData()&quot; ];
    thread2 -&gt; module [ label=&quot;accumulate results&quot; ];
    runner &lt;&lt; thread2;
    --- [ label=&quot;loop over frames ends&quot; ];
    ...;
</msc></para><para>In addition to the framework for defining analysis modules, this module also provides <ref refid="classgmx_1_1TrajectoryAnalysisCommandLineRunner" kindref="compound">gmx::TrajectoryAnalysisCommandLineRunner</ref>, which implements a command-line program that runs a certain analysis module.</para><para>Internally, the module also defines a set of trajectory analysis modules that can currently be accessed only through <ref refid="group__module__trajectoryanalysis_1ga7a18c2c956e97306dcac66b006c34435" kindref="member">gmx::registerTrajectoryAnalysisModules</ref>.</para><para>For an example of how to implement an analysis tool using the framework, see <ref refid="template_8cpp-example" kindref="compound">template.cpp</ref>.</para><para><simplesect kind="author"><para>Teemu Murtola <ulink url="mailto:teemu.murtola@gmail.com">teemu.murtola@gmail.com</ulink> </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
