<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="group__module__options" kind="group">
    <compoundname>module_options</compoundname>
    <title>Extensible Handling of Options (options)</title>
    <innerfile refid="abstractoption_8cpp">abstractoption.cpp</innerfile>
    <innerfile refid="abstractoption_8h">abstractoption.h</innerfile>
    <innerfile refid="abstractoptionstorage_8h">abstractoptionstorage.h</innerfile>
    <innerfile refid="basicoptions_8cpp">basicoptions.cpp</innerfile>
    <innerfile refid="basicoptions_8h">basicoptions.h</innerfile>
    <innerfile refid="basicoptionstorage_8h">basicoptionstorage.h</innerfile>
    <innerfile refid="behaviorcollection_8cpp">behaviorcollection.cpp</innerfile>
    <innerfile refid="behaviorcollection_8h">behaviorcollection.h</innerfile>
    <innerfile refid="filenameoption_8cpp">filenameoption.cpp</innerfile>
    <innerfile refid="filenameoption_8h">filenameoption.h</innerfile>
    <innerfile refid="filenameoptionmanager_8cpp">filenameoptionmanager.cpp</innerfile>
    <innerfile refid="filenameoptionmanager_8h">filenameoptionmanager.h</innerfile>
    <innerfile refid="filenameoptionstorage_8h">filenameoptionstorage.h</innerfile>
    <innerfile refid="ioptionsbehavior_8h">ioptionsbehavior.h</innerfile>
    <innerfile refid="ioptionscontainer_8h">ioptionscontainer.h</innerfile>
    <innerfile refid="optionfiletype_8h">optionfiletype.h</innerfile>
    <innerfile refid="optionflags_8h">optionflags.h</innerfile>
    <innerfile refid="optionmanagercontainer_8h">optionmanagercontainer.h</innerfile>
    <innerfile refid="options-impl_8h">options-impl.h</innerfile>
    <innerfile refid="options_8cpp">options.cpp</innerfile>
    <innerfile refid="options_2options_8h">options.h</innerfile>
    <innerfile refid="optionsassigner_8cpp">optionsassigner.cpp</innerfile>
    <innerfile refid="optionsassigner_8h">optionsassigner.h</innerfile>
    <innerfile refid="optionstoragetemplate_8h">optionstoragetemplate.h</innerfile>
    <innerfile refid="optionsvisitor_8cpp">optionsvisitor.cpp</innerfile>
    <innerfile refid="optionsvisitor_8h">optionsvisitor.h</innerfile>
    <innerfile refid="abstractoptionstorage_8cpp">abstractoptionstorage.cpp</innerfile>
    <innerfile refid="tests_2filenameoption_8cpp">filenameoption.cpp</innerfile>
    <innerfile refid="tests_2filenameoptionmanager_8cpp">filenameoptionmanager.cpp</innerfile>
    <innerfile refid="option_8cpp">option.cpp</innerfile>
    <innerfile refid="tests_2optionsassigner_8cpp">optionsassigner.cpp</innerfile>
    <innerfile refid="tests_2timeunitmanager_8cpp">timeunitmanager.cpp</innerfile>
    <innerfile refid="timeunitmanager_8cpp">timeunitmanager.cpp</innerfile>
    <innerfile refid="timeunitmanager_8h">timeunitmanager.h</innerfile>
    <innerfile refid="options_8h">options.h</innerfile>
    <innerclass refid="classgmx_1_1AbstractOption" prot="public">gmx::AbstractOption</innerclass>
    <innerclass refid="classgmx_1_1OptionTemplate" prot="public">gmx::OptionTemplate</innerclass>
    <innerclass refid="classgmx_1_1OptionInfo" prot="public">gmx::OptionInfo</innerclass>
    <innerclass refid="classgmx_1_1AbstractOptionStorage" prot="public">gmx::AbstractOptionStorage</innerclass>
    <innerclass refid="classgmx_1_1BooleanOption" prot="public">gmx::BooleanOption</innerclass>
    <innerclass refid="classgmx_1_1IntegerOption" prot="public">gmx::IntegerOption</innerclass>
    <innerclass refid="classgmx_1_1Int64Option" prot="public">gmx::Int64Option</innerclass>
    <innerclass refid="classgmx_1_1DoubleOption" prot="public">gmx::DoubleOption</innerclass>
    <innerclass refid="classgmx_1_1FloatOption" prot="public">gmx::FloatOption</innerclass>
    <innerclass refid="classgmx_1_1StringOption" prot="public">gmx::StringOption</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1EnumIndexStoreInterface" prot="public">gmx::internal::EnumIndexStoreInterface</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1EnumIndexStore" prot="public">gmx::internal::EnumIndexStore</innerclass>
    <innerclass refid="classgmx_1_1EnumOption" prot="public">gmx::EnumOption</innerclass>
    <innerclass refid="classgmx_1_1BooleanOptionInfo" prot="public">gmx::BooleanOptionInfo</innerclass>
    <innerclass refid="classgmx_1_1IntegerOptionInfo" prot="public">gmx::IntegerOptionInfo</innerclass>
    <innerclass refid="classgmx_1_1Int64OptionInfo" prot="public">gmx::Int64OptionInfo</innerclass>
    <innerclass refid="classgmx_1_1DoubleOptionInfo" prot="public">gmx::DoubleOptionInfo</innerclass>
    <innerclass refid="classgmx_1_1FloatOptionInfo" prot="public">gmx::FloatOptionInfo</innerclass>
    <innerclass refid="classgmx_1_1StringOptionInfo" prot="public">gmx::StringOptionInfo</innerclass>
    <innerclass refid="classgmx_1_1EnumOptionInfo" prot="public">gmx::EnumOptionInfo</innerclass>
    <innerclass refid="classgmx_1_1BooleanOptionStorage" prot="public">gmx::BooleanOptionStorage</innerclass>
    <innerclass refid="classgmx_1_1IntegerOptionStorage" prot="public">gmx::IntegerOptionStorage</innerclass>
    <innerclass refid="classgmx_1_1Int64OptionStorage" prot="public">gmx::Int64OptionStorage</innerclass>
    <innerclass refid="classgmx_1_1DoubleOptionStorage" prot="public">gmx::DoubleOptionStorage</innerclass>
    <innerclass refid="classgmx_1_1FloatOptionStorage" prot="public">gmx::FloatOptionStorage</innerclass>
    <innerclass refid="classgmx_1_1StringOptionStorage" prot="public">gmx::StringOptionStorage</innerclass>
    <innerclass refid="classgmx_1_1EnumOptionStorage" prot="public">gmx::EnumOptionStorage</innerclass>
    <innerclass refid="classgmx_1_1OptionsBehaviorCollection" prot="public">gmx::OptionsBehaviorCollection</innerclass>
    <innerclass refid="structgmx_1_1anonymous__namespace_02filenameoption_8cpp_03_1_1FileTypeMapping" prot="public">gmx::anonymous_namespace{filenameoption.cpp}::FileTypeMapping</innerclass>
    <innerclass refid="classgmx_1_1anonymous__namespace_02filenameoption_8cpp_03_1_1FileTypeHandler" prot="public">gmx::anonymous_namespace{filenameoption.cpp}::FileTypeHandler</innerclass>
    <innerclass refid="classgmx_1_1FileNameOption" prot="public">gmx::FileNameOption</innerclass>
    <innerclass refid="classgmx_1_1FileNameOptionInfo" prot="public">gmx::FileNameOptionInfo</innerclass>
    <innerclass refid="classgmx_1_1FileNameOptionManager_1_1Impl" prot="public">gmx::FileNameOptionManager::Impl</innerclass>
    <innerclass refid="classgmx_1_1IOptionsBehavior" prot="public">gmx::IOptionsBehavior</innerclass>
    <innerclass refid="classgmx_1_1IOptionsContainer" prot="public">gmx::IOptionsContainer</innerclass>
    <innerclass refid="classgmx_1_1OptionManagerContainer" prot="public">gmx::OptionManagerContainer</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1OptionsImpl" prot="public">gmx::internal::OptionsImpl</innerclass>
    <innerclass refid="classgmx_1_1internal_1_1OptionsImpl_1_1Group" prot="public">gmx::internal::OptionsImpl::Group</innerclass>
    <innerclass refid="classgmx_1_1IOptionManager" prot="public">gmx::IOptionManager</innerclass>
    <innerclass refid="classgmx_1_1Options" prot="public">gmx::Options</innerclass>
    <innerclass refid="classgmx_1_1OptionsAssigner" prot="public">gmx::OptionsAssigner</innerclass>
    <innerclass refid="classgmx_1_1OptionStorageTemplate" prot="public">gmx::OptionStorageTemplate</innerclass>
    <innerclass refid="classgmx_1_1OptionsVisitor" prot="public">gmx::OptionsVisitor</innerclass>
    <innerclass refid="classgmx_1_1OptionsTypeVisitor" prot="public">gmx::OptionsTypeVisitor</innerclass>
    <innerclass refid="classgmx_1_1OptionsIterator" prot="public">gmx::OptionsIterator</innerclass>
    <innerclass refid="classgmx_1_1OptionsModifyingVisitor" prot="public">gmx::OptionsModifyingVisitor</innerclass>
    <innerclass refid="classgmx_1_1OptionsModifyingTypeVisitor" prot="public">gmx::OptionsModifyingTypeVisitor</innerclass>
    <innerclass refid="classgmx_1_1OptionsModifyingIterator" prot="public">gmx::OptionsModifyingIterator</innerclass>
    <innerclass refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOptionStorage" prot="public">anonymous_namespace{abstractoptionstorage.cpp}::MockOptionStorage</innerclass>
    <innerclass refid="classanonymous__namespace_02abstractoptionstorage_8cpp_03_1_1MockOption" prot="public">anonymous_namespace{abstractoptionstorage.cpp}::MockOption</innerclass>
    <innerclass refid="classgmx_1_1anonymous__namespace_02timeunitmanager_8cpp_03_1_1TimeOptionScaler" prot="public">gmx::anonymous_namespace{timeunitmanager.cpp}::TimeOptionScaler</innerclass>
    <innerclass refid="classgmx_1_1TimeUnitManager" prot="public">gmx::TimeUnitManager</innerclass>
    <innerclass refid="classgmx_1_1TimeUnitBehavior" prot="public">gmx::TimeUnitBehavior</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__module__options_1ga89f55fd684646bb146f99a8c6c18569b" prot="public" static="no">
        <name>OptionFileType</name>
        <enumvalue id="group__module__options_1gga89f55fd684646bb146f99a8c6c18569ba15e867ef140542d62b5546da5b3a6472" prot="public">
          <name>eftUnknown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__options_1gga89f55fd684646bb146f99a8c6c18569bafbfe4703cea922fb349c900c6bd24014" prot="public">
          <name>eftTopology</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__options_1gga89f55fd684646bb146f99a8c6c18569ba8878708e3a85d820dfa321d21c1d9d2b" prot="public">
          <name>eftTrajectory</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__options_1gga89f55fd684646bb146f99a8c6c18569babf09eb93e898fcb08601efe82915306c" prot="public">
          <name>eftEnergy</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__options_1gga89f55fd684646bb146f99a8c6c18569ba9615873144b06172d135a80767b34641" prot="public">
          <name>eftPDB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__options_1gga89f55fd684646bb146f99a8c6c18569bab0bb0b931760bc89531f3739665ed652" prot="public">
          <name>eftIndex</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__options_1gga89f55fd684646bb146f99a8c6c18569ba7ea980c4762cb4eb1ea2a2b64f5ed599" prot="public">
          <name>eftPlot</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__options_1gga89f55fd684646bb146f99a8c6c18569bab62caee79b490e195fad94f00029e74e" prot="public">
          <name>eftGenericData</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__module__options_1gga89f55fd684646bb146f99a8c6c18569badbac16019eee0ae7cfccbec2395e53ac" prot="public">
          <name>eftOptionFileType_NR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Purpose of file(s) provided through an option. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/optionfiletype.h" line="54" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/optionfiletype.h" bodystart="54" bodyend="64"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__module__options_1gafdd645721a8da7d18eec7f0bc84efe29" prot="public" static="no">
        <type>EnumOption&lt; int &gt;</type>
        <definition>typedef EnumOption&lt;int&gt; gmx::EnumIntOption</definition>
        <argsstring></argsstring>
        <name>EnumIntOption</name>
        <briefdescription>
<para>Shorthand for an enumerated option that stores into an <computeroutput>int</computeroutput> variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/basicoptions.h" line="617" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/basicoptions.h" bodystart="617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__module__options_1ga7552279e0ab63edd1e9324c5786e28e7" prot="public" static="no">
        <type>FloatOption</type>
        <definition>gmx::RealOption</definition>
        <argsstring></argsstring>
        <name>RealOption</name>
        <briefdescription>
<para>Typedef for either <ref refid="classgmx_1_1DoubleOption" kindref="compound">DoubleOption</ref> or <ref refid="classgmx_1_1FloatOption" kindref="compound">FloatOption</ref>, depending on precision. </para>        </briefdescription>
        <detaileddescription>
<para>Generally, new would be better using <ref refid="classgmx_1_1DoubleOption" kindref="compound">DoubleOption</ref>, but this is provided for cases where the output value needs to be of type <computeroutput>real</computeroutput> for some reason. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/basicoptions.h" line="779" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/basicoptions.h" bodystart="779" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__module__options_1gab1c4e0b93e5d22b0c9a534f0235496f5" prot="public" static="no">
        <type>FloatOptionInfo</type>
        <definition>gmx::RealOptionInfo</definition>
        <argsstring></argsstring>
        <name>RealOptionInfo</name>
        <briefdescription>
<para>Typedef for either <ref refid="classgmx_1_1DoubleOptionInfo" kindref="compound">DoubleOptionInfo</ref> or <ref refid="classgmx_1_1FloatOptionInfo" kindref="compound">FloatOptionInfo</ref>, depending on precision. </para>        </briefdescription>
        <detaileddescription>
<para>Generally, new would be better using <ref refid="classgmx_1_1DoubleOption" kindref="compound">DoubleOption</ref>, but this is provided for cases where the output value needs to be of type <computeroutput>real</computeroutput> for some reason. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/basicoptions.h" line="780" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/basicoptions.h" bodystart="780" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__module__options_1ga8beb9f3d1d31d9ab3070249ac57c68dd" prot="public" static="no" mutable="no">
        <type>const FileTypeMapping</type>
        <definition>const FileTypeMapping gmx::anonymous_namespace{filenameoption.cpp}::c_fileTypeMapping[]</definition>
        <argsstring>[]</argsstring>
        <name>c_fileTypeMapping</name>
        <initializer>=
{
    { eftTopology,    efTPS },
    { eftTrajectory,  efTRX },
    { eftEnergy,      efEDR },
    { eftPDB,         efPDB },
    { eftIndex,       efNDX },
    { eftPlot,        efXVG },
    { eftGenericData, efDAT }
}</initializer>
        <briefdescription>
<para>Mappings from OptionFileType to file types in filetypes.h. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/filenameoption.cpp" line="82" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/filenameoption.cpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__module__options_1ga1f658c04b8319b831b5abe8e381dc13f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void anonymous_namespace{basicoptions.cpp}::expandVector</definition>
        <argsstring>(size_t length, std::vector&lt; ValueType &gt; *values)</argsstring>
        <name>expandVector</name>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>std::vector&lt; ValueType &gt; *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Expands a single value to a vector by copying the value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of values to process. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the resulting vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">values</parametername>
</parameternamelist>
<parameterdescription>
<para>Values to process. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InvalidInputError</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>values</computeroutput> has an invalid number of values.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>values</computeroutput> should have 0, 1, or <computeroutput>length</computeroutput> values. If <computeroutput>values</computeroutput> has 1 value, it is expanded such that it has <computeroutput>length</computeroutput> identical values. In other valid cases, nothing is done. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/basicoptions.cpp" line="80" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/basicoptions.cpp" bodystart="80" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="group__module__options_1ga1e85ff6ce9288d3902e6002f10db35c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;::const_iterator</type>
        <definition>std::vector&lt;std::string&gt;::const_iterator anonymous_namespace{basicoptions.cpp}::findEnumValue</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;allowedValues, const std::string &amp;value)</argsstring>
        <name>findEnumValue</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>allowedValues</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Finds an enumerated value from the list of allowed values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">allowedValues</parametername>
</parameternamelist>
<parameterdescription>
<para>List of allowed values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1InvalidInputError" kindref="compound">gmx::InvalidInputError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>value</computeroutput> does not match anything in <computeroutput>allowedValues</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator to the found value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/basicoptions.cpp" line="106" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/basicoptions.cpp" bodystart="106" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="group__module__options_1ga236f81451afd5086f506bfb27fe1d827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AbstractOptionStorage *</type>
        <definition>AbstractOptionStorage * gmx::internal::createEnumOptionStorage</definition>
        <argsstring>(const AbstractOption &amp;option, const char *const *enumValues, int count, int defaultValue, int defaultValueIfSet, EnumIndexStoreInterface *store)</argsstring>
        <name>createEnumOptionStorage</name>
        <param>
          <type>const AbstractOption &amp;</type>
          <declname>option</declname>
        </param>
        <param>
          <type>const char *const *</type>
          <declname>enumValues</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>int</type>
          <declname>defaultValueIfSet</declname>
        </param>
        <param>
          <type>EnumIndexStoreInterface *</type>
          <declname>store</declname>
        </param>
        <briefdescription>
<para>Helper to create <ref refid="classgmx_1_1EnumOptionStorage" kindref="compound">EnumOptionStorage</ref> instances. </para>        </briefdescription>
        <detaileddescription>
<internal><para>This function works as a proxy between EnumOption::createStorage() and the <ref refid="classgmx_1_1EnumOptionStorage" kindref="compound">EnumOptionStorage</ref> constructor, such that the latter does not need to be exposed in the header. </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/basicoptions.cpp" line="737" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/basicoptions.cpp" bodystart="737" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="group__module__options_1ga20dcd0d5550324aeeda083b2a8668738" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::anonymous_namespace{filenameoption.cpp}::FileTypeHandler::FileTypeHandler</definition>
        <argsstring>(int fileType)</argsstring>
        <name>FileTypeHandler</name>
        <param>
          <type>int</type>
          <declname>fileType</declname>
        </param>
        <briefdescription>
<para>Returns a handler for a single file type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fileType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1File" kindref="compound">File</ref> type (from filetypes.h) to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/filenameoption.cpp" line="112" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/filenameoption.cpp" bodystart="143" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="group__module__options_1ga55b99034e93ce6f0945881c58a66ba22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gmx::anonymous_namespace{filenameoption.cpp}::FileTypeHandler::extensionCount</definition>
        <argsstring>() const </argsstring>
        <name>extensionCount</name>
        <briefdescription>
<para>Returns the number of acceptable extensions for this file type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/filenameoption.cpp" line="115" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/filenameoption.cpp" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="group__module__options_1ga1f043fdd75da63ae1d836c517a58e443" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * gmx::anonymous_namespace{filenameoption.cpp}::FileTypeHandler::extension</definition>
        <argsstring>(int i) const </argsstring>
        <name>extension</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the extension with the given index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/filenameoption.cpp" line="117" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/filenameoption.cpp" bodystart="166" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="group__module__options_1ga4b7cb946f9ed58688c657595086bf72f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::anonymous_namespace{filenameoption.cpp}::FileTypeHandler::isValidType</definition>
        <argsstring>(int fileType) const </argsstring>
        <name>isValidType</name>
        <param>
          <type>int</type>
          <declname>fileType</declname>
        </param>
        <briefdescription>
<para>Returns whether <computeroutput>fileType</computeroutput> (from filetypes.h) is accepted for this type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/filenameoption.cpp" line="120" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/options/filenameoption.cpp" bodystart="177" bodyend="194"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides functionality for handling options. </para>    </briefdescription>
    <detaileddescription>
<para><heading level="3">Basic Use</heading>
</para><para>Code that provides options does so using methods in <ref refid="classgmx_1_1IOptionsContainer" kindref="compound">gmx::IOptionsContainer</ref> and classes defined in <ref refid="basicoptions_8h" kindref="compound">basicoptions.h</ref>. Only these are needed if a class wants to provide a set of standard options (other modules can provide additional option types, such as <ref refid="classgmx_1_1SelectionOption" kindref="compound">gmx::SelectionOption</ref>). For each option, the caller provides an output variable that will receive the final value of the option once user input has been parsed. When adding options, it is possible to also provide descriptions for the options for use in generated help text.</para><para>Generic code that handles the user input does so by creating a <ref refid="classgmx_1_1Options" kindref="compound">gmx::Options</ref> instance and passing it (as <ref refid="classgmx_1_1IOptionsContainer" kindref="compound">gmx::IOptionsContainer</ref>) to the classes that add the actual options. It can then use a parser to set values to the options. Final values for the options can be inspected in the code that added the individual options, from the provided output variables.</para><para>The sequence charts below provides an overview of how the options work from usage perspective. They include two fictional modules, A and B, that provide options, and a main routine that manages these. The first chart shows a typical initialization sequence, where the main routine creates an options object, and calls an <ref refid="namespaceanonymous__namespace_02cmdlinerunner_8cpp_03_1a60534e7c72d5738ccd2a45dec4d87882" kindref="member">initOptions()</ref> method in each module that can provide options (the modules may also request their submodules to add their own options). Each module uses <ref refid="classgmx_1_1IOptionsContainer_1af5fa735cc7aeeafd44285fdd66461404" kindref="member">gmx::IOptionsContainer::addOption()</ref> to add the options they require, and specify output variables into which the options values are stored. <msc> 
    main,
    options [ label=&quot;Options&quot;, URL=&quot;\ref gmx::Options&quot; ],
    A [ label=&quot;module A&quot; ],
    B [ label=&quot;module B&quot; ];

    main box B [ label=&quot;main owns all objects&quot; ];
    main =&gt; options [ label=&quot;create&quot;, URL=&quot;\ref gmx::Options::Options()&quot; ];
    main =&gt; A [ label=&quot;initOptions()&quot; ];
    A =&gt; options [ label=&quot;addOption()&quot;, URL=&quot;\ref gmx::IOptionsContainer::addOption()&quot; ];
    ...;
    main &lt;&lt; A;
    main =&gt; B [ label=&quot;initOptions()&quot; ];
    B =&gt; options [ label=&quot;addOption()&quot;, URL=&quot;\ref gmx::IOptionsContainer::addOption()&quot; ];
    ...;
    main &lt;&lt; B;
</msc></para><para>After all options have been specified, they can be parsed. A parser splits the input into option-value pairs (one option may have multiple values), and passes these into the <ref refid="classgmx_1_1Options" kindref="compound">gmx::Options</ref> object, which is responsible for converting them into the appropriate types and storing the values into the variables provided in the calls to <ref refid="classgmx_1_1IOptionsContainer_1af5fa735cc7aeeafd44285fdd66461404" kindref="member">gmx::IOptionsContainer::addOption()</ref>. <msc> 
    main,
    parser [ label=&quot;parser&quot; ],
    options [ label=&quot;Options&quot;, URL=&quot;\ref gmx::Options&quot; ],
    A [ label=&quot;module A&quot; ],
    B [ label=&quot;module B&quot; ];

    main =&gt; parser [ label=&quot;parse()&quot; ];
    parser =&gt; options [ label=&quot;assign(string)&quot; ];
    options -&gt; A [ label=&quot;set variable&quot; ];
    parser =&gt; options [ label=&quot;assign(string)&quot; ];
    options -&gt; B [ label=&quot;set variable&quot; ];
    ...;
</msc></para><para>After all options have been parsed (possibly using multiple different parsers), <ref refid="classgmx_1_1Options_1a3316f3681c71daa04098696d4417f2f9" kindref="member">gmx::Options::finish()</ref> is called. This performs final validation of the options and may further adjust the values stored in the output variables (see documentation on individual option types on when this may happen). <msc> 
    main,
    options [ label=&quot;Options&quot;, URL=&quot;\ref gmx::Options&quot; ],
    A [ label=&quot;module A&quot; ],
    B [ label=&quot;module B&quot; ];

    main =&gt; options [ label=&quot;finish()&quot;, URL=&quot;\ref gmx::Options::finish()&quot; ];
    options -&gt; A [ label=&quot;set variable&quot; ];
    options -&gt; B [ label=&quot;set variable&quot; ];
    ...;
</msc></para><para>Module <ref refid="group__module__commandline" kindref="compound">Command Line Program Management (commandline)</ref> implements classes that assign option values from command line and produce help for programs that use the command line parser.</para><para><heading level="3">Advanced Use (in library API)</heading>
</para><para>It is possible to extend the module with new option types and/or parsers for option values.</para><para>To implement new option types, it is necessary to subclass the templates <ref refid="classgmx_1_1OptionTemplate" kindref="compound">OptionTemplate</ref> and <ref refid="classgmx_1_1OptionStorageTemplate" kindref="compound">OptionStorageTemplate</ref> with the type of the values that the option should provide as the template argument. After this is done, it is possible to add options of this new type using <ref refid="classgmx_1_1IOptionsContainer_1af5fa735cc7aeeafd44285fdd66461404" kindref="member">IOptionsContainer::addOption()</ref>.</para><para>To implement new parsers, one can use <ref refid="classgmx_1_1OptionsAssigner" kindref="compound">OptionsAssigner</ref>, which provides an interface to set values in an <ref refid="classgmx_1_1Options" kindref="compound">Options</ref> object.</para><para>There is also an interface to iterate over all options in an <ref refid="classgmx_1_1Options" kindref="compound">Options</ref> object. One should implement the <ref refid="classgmx_1_1OptionsVisitor" kindref="compound">OptionsVisitor</ref> interface, and then use <ref refid="classgmx_1_1OptionsIterator" kindref="compound">OptionsIterator</ref> to apply this visitor to the <ref refid="classgmx_1_1Options" kindref="compound">Options</ref> object.</para><para><simplesect kind="author"><para>Teemu Murtola <ulink url="mailto:teemu.murtola@gmail.com">teemu.murtola@gmail.com</ulink> </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
