<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1ExceptionInitializer" kind="class" prot="public">
    <compoundname>gmx::ExceptionInitializer</compoundname>
    <includes local="no">gromacs/utility/exceptions.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgmx_1_1ExceptionInitializer_1aa9838e3cb1d0334290ed6e05f8222341" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string gmx::ExceptionInitializer::reason_</definition>
        <argsstring></argsstring>
        <name>reason_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" line="251" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgmx_1_1ExceptionInitializer_1aef459df4b8b6bd1544cbb75cb6d84301" prot="private" static="no" mutable="no">
        <type><ref refid="namespacegmx_1_1internal_1ac21a2a7809b800b7a38d52106cb23576" kindref="member">internal::NestedExceptionList</ref></type>
        <definition>internal::NestedExceptionList gmx::ExceptionInitializer::nested_</definition>
        <argsstring></argsstring>
        <name>nested_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" line="252" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classgmx_1_1ExceptionInitializer_1ad917e24c2b8e76175fdf0f267dd49094" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class GromacsException</definition>
        <argsstring></argsstring>
        <name>GromacsException</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" line="254" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1ExceptionInitializer_1aca7e4593be9acc279e638d5e7cf4c736" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gmx::ExceptionInitializer::ExceptionInitializer</definition>
        <argsstring>(const char *reason)</argsstring>
        <name>ExceptionInitializer</name>
        <param>
          <type>const char *</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>Creates an initialized with the given string as the reason. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reason</parametername>
</parameternamelist>
<parameterdescription>
<para>Detailed reason for the exception. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
This constructor is not explicit to allow constructing exceptions with a plain string argument given to the constructor without adding extra code to each exception class. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" line="204" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1ExceptionInitializer_1ad1645743f96bbd521a597fafa4f2cd40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gmx::ExceptionInitializer::ExceptionInitializer</definition>
        <argsstring>(const std::string &amp;reason)</argsstring>
        <name>ExceptionInitializer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>Creates an initialized with the given string as the reason. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reason</parametername>
</parameternamelist>
<parameterdescription>
<para>Detailed reason for the exception. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if out of memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
This constructor is not explicit to allow constructing exceptions with a plain string argument given to the constructor without adding extra code to each exception class. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" line="209" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1ExceptionInitializer_1aab4216d872a5e6c3086efc9cfdbd487b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::ExceptionInitializer::hasNestedExceptions</definition>
        <argsstring>() const </argsstring>
        <name>hasNestedExceptions</name>
        <briefdescription>
<para>Returns true if <ref refid="classgmx_1_1ExceptionInitializer_1ad6e8d8493ca9cd3da7c490262e452805" kindref="member">addCurrentExceptionAsNested()</ref> has been called. </para>        </briefdescription>
        <detaileddescription>
<para>Provided for convenience for cases where exceptions will be added conditionally, and the caller wants to check whether any excetions were actually added. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" line="221" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" bodystart="221" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1ExceptionInitializer_1ad6e8d8493ca9cd3da7c490262e452805" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::ExceptionInitializer::addCurrentExceptionAsNested</definition>
        <argsstring>()</argsstring>
        <name>addCurrentExceptionAsNested</name>
        <briefdescription>
<para>Adds the currently caught exception as a nested exception. </para>        </briefdescription>
        <detaileddescription>
<para>May be called multiple times; all provided exceptions will be added in a list of nested exceptions.</para><para>Must not be called outside a catch block. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" line="230" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1ExceptionInitializer_1aeead19bca90d139cb5c3b7a0bd4a80e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Exception</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void gmx::ExceptionInitializer::addNested</definition>
        <argsstring>(const Exception &amp;ex)</argsstring>
        <name>addNested</name>
        <param>
          <type>const Exception &amp;</type>
          <declname>ex</declname>
        </param>
        <briefdescription>
<para>Adds the specified exception as a nested exception. </para>        </briefdescription>
        <detaileddescription>
<para>May be called multiple times; all provided exceptions will be added in a list of nested exceptions.</para><para>This is equivalent to throwing <computeroutput>ex</computeroutput> and calling <ref refid="classgmx_1_1ExceptionInitializer_1ad6e8d8493ca9cd3da7c490262e452805" kindref="member">addCurrentExceptionAsNested()</ref> in the catch block, but potentially more efficient. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" line="245" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" bodystart="245" bodyend="248"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides information for Gromacs exception constructors. </para>    </briefdescription>
    <detaileddescription>
<para>This class exists to implement common functionality for initializing all Gromacs exceptions without having extra code in each exception class. In simple cases, it can be implicitly constructed by passing a simple string to an exception constructor. If more complex initialization is necessary, it is possible to explicitly construct an object of this type and then call other methods to add information before actually creating the exception object.</para><para><xrefsect id="todo_1_todo000069"><xreftitle>Todo</xreftitle><xrefdescription><para>With the exception of the reason string, information added with this class is not currently accessible through any public API, except for calling <ref refid="group__module__utility_1gac6287dc8a550a2d54429e44994e00e58" kindref="member">printFatalErrorMessage()</ref>, <ref refid="group__module__utility_1gac7703ad35b606758d2d12edc0a3d5217" kindref="member">formatExceptionMessageToString()</ref> or <ref refid="group__module__utility_1gac5e6f6ec944fb2484d6f273c9a0ff495" kindref="member">formatExceptionMessageToFile()</ref>. This is not implemented as there is not yet need for it, and it is not clear what would be the best alternative for the access. It should be possible to refactor the internal implementation to suit the needs of such external access without requiring changes in code that throws these exceptions.</para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" line="192" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/utility/exceptions.h" bodystart="191" bodyend="255"/>
    <listofallmembers>
      <member refid="classgmx_1_1ExceptionInitializer_1ad6e8d8493ca9cd3da7c490262e452805" prot="public" virt="non-virtual"><scope>gmx::ExceptionInitializer</scope><name>addCurrentExceptionAsNested</name></member>
      <member refid="classgmx_1_1ExceptionInitializer_1aeead19bca90d139cb5c3b7a0bd4a80e1" prot="public" virt="non-virtual"><scope>gmx::ExceptionInitializer</scope><name>addNested</name></member>
      <member refid="classgmx_1_1ExceptionInitializer_1aca7e4593be9acc279e638d5e7cf4c736" prot="public" virt="non-virtual"><scope>gmx::ExceptionInitializer</scope><name>ExceptionInitializer</name></member>
      <member refid="classgmx_1_1ExceptionInitializer_1ad1645743f96bbd521a597fafa4f2cd40" prot="public" virt="non-virtual"><scope>gmx::ExceptionInitializer</scope><name>ExceptionInitializer</name></member>
      <member refid="classgmx_1_1ExceptionInitializer_1ad917e24c2b8e76175fdf0f267dd49094" prot="private" virt="non-virtual"><scope>gmx::ExceptionInitializer</scope><name>GromacsException</name></member>
      <member refid="classgmx_1_1ExceptionInitializer_1aab4216d872a5e6c3086efc9cfdbd487b" prot="public" virt="non-virtual"><scope>gmx::ExceptionInitializer</scope><name>hasNestedExceptions</name></member>
      <member refid="classgmx_1_1ExceptionInitializer_1aef459df4b8b6bd1544cbb75cb6d84301" prot="private" virt="non-virtual"><scope>gmx::ExceptionInitializer</scope><name>nested_</name></member>
      <member refid="classgmx_1_1ExceptionInitializer_1aa9838e3cb1d0334290ed6e05f8222341" prot="private" virt="non-virtual"><scope>gmx::ExceptionInitializer</scope><name>reason_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
