<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classgmx_1_1AnalysisDataStorage" kind="class" prot="public">
    <compoundname>gmx::AnalysisDataStorage</compoundname>
    <includes local="no">gromacs/analysisdata/datastorage.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classgmx_1_1AnalysisDataStorage_1adfff34ea87120eb313842688a1780f9b" prot="private" static="no">
        <type><ref refid="classgmx_1_1internal_1_1AnalysisDataStorageImpl" kindref="compound">internal::AnalysisDataStorageImpl</ref></type>
        <definition>typedef internal::AnalysisDataStorageImpl gmx::AnalysisDataStorage::Impl</definition>
        <argsstring></argsstring>
        <name>Impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" line="436" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" bodystart="436" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgmx_1_1AnalysisDataStorage_1a834d09bc7335010cbc0b8769753fb9b5" prot="private" static="no" mutable="no">
        <type><ref refid="classgmx_1_1PrivateImplPointer" kindref="compound">PrivateImplPointer</ref>&lt; <ref refid="classgmx_1_1internal_1_1AnalysisDataStorageImpl" kindref="compound">Impl</ref> &gt;</type>
        <definition>PrivateImplPointer&lt;Impl&gt; gmx::AnalysisDataStorage::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" line="438" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgmx_1_1AnalysisDataStorage_1aa64bc4f3afe3e5d481c4140fa1004e9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::AnalysisDataStorage::AnalysisDataStorage</definition>
        <argsstring>()</argsstring>
        <name>AnalysisDataStorage</name>
        <briefdescription>
<para>Constructs a storage object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" line="270" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.cpp" bodystart="776" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisDataStorage_1a7f786a11e3eadff20765a6cfa468efbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gmx::AnalysisDataStorage::~AnalysisDataStorage</definition>
        <argsstring>()</argsstring>
        <name>~AnalysisDataStorage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" line="271" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.cpp" bodystart="782" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisDataStorage_1a56d27e3c160f201597e7fa62caeb42d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gmx::AnalysisDataStorage::frameCount</definition>
        <argsstring>() const </argsstring>
        <name>frameCount</name>
        <briefdescription>
<para>Returns the number of ready frames. </para>        </briefdescription>
        <detaileddescription>
<para>This method is designed such that calls to <ref refid="classgmx_1_1AbstractAnalysisData_1a49ff8cb5c6087a8081f72b436b9824e7" kindref="member">AbstractAnalysisData::frameCount()</ref> can be directly forwarded to this method. See that method for more documentation.</para><para>If this method returns N, this means that the first N frames have all been finished.</para><para><simplesect kind="see"><para><ref refid="classgmx_1_1AbstractAnalysisData_1a49ff8cb5c6087a8081f72b436b9824e7" kindref="member">AbstractAnalysisData::frameCount()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" line="285" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.cpp" bodystart="788" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisDataStorage_1ac6ce446a216b2dbeeba1be5215893604" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1AnalysisDataFrameRef" kindref="compound">AnalysisDataFrameRef</ref></type>
        <definition>AnalysisDataFrameRef gmx::AnalysisDataStorage::tryGetDataFrame</definition>
        <argsstring>(int index) const </argsstring>
        <name>tryGetDataFrame</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Implements access to data frames. </para>        </briefdescription>
        <detaileddescription>
<para>This method is designed such that calls to <ref refid="classgmx_1_1AbstractAnalysisData_1af919927886d1ac547b1841b09af8bd59" kindref="member">AbstractAnalysisData::tryGetDataFrameInternal()</ref> can be directly forwarded to this method. See that method for more documentation.</para><para>A valid reference for a frame will be returned after <ref refid="classgmx_1_1AnalysisDataStorage_1a27fcfa486e9f6c02da548b5af097c34a" kindref="member">finishFrame()</ref> has been called for that frame.</para><para><simplesect kind="see"><para><ref refid="classgmx_1_1AbstractAnalysisData_1af919927886d1ac547b1841b09af8bd59" kindref="member">AbstractAnalysisData::tryGetDataFrameInternal()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" line="298" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.cpp" bodystart="795" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisDataStorage_1a1aeabd17f2b025e1bf31b65766094e8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gmx::AnalysisDataStorage::requestStorage</definition>
        <argsstring>(int nframes)</argsstring>
        <name>requestStorage</name>
        <param>
          <type>int</type>
          <declname>nframes</declname>
        </param>
        <briefdescription>
<para>Implements storage requests. </para>        </briefdescription>
        <detaileddescription>
<para>This method is designed such that calls to <ref refid="classgmx_1_1AbstractAnalysisData_1a7b0f26e6b9b4c981ca611ca782570aa6" kindref="member">AbstractAnalysisData::requestStorageInternal()</ref> can be directly forwarded to this method. See that method for more documentation.</para><para><simplesect kind="see"><para><ref refid="classgmx_1_1AbstractAnalysisData_1a7b0f26e6b9b4c981ca611ca782570aa6" kindref="member">AbstractAnalysisData::requestStorageInternal()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" line="308" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.cpp" bodystart="813" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisDataStorage_1acb12e0e755e7c46565b65c7a2bb7078e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::AnalysisDataStorage::startDataStorage</definition>
        <argsstring>(AbstractAnalysisData *data, AnalysisDataModuleManager *modules)</argsstring>
        <name>startDataStorage</name>
        <param>
          <type><ref refid="classgmx_1_1AbstractAnalysisData" kindref="compound">AbstractAnalysisData</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1AnalysisDataModuleManager" kindref="compound">AnalysisDataModuleManager</ref> *</type>
          <declname>modules</declname>
        </param>
        <briefdescription>
<para>Start storing data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1AbstractAnalysisData" kindref="compound">AbstractAnalysisData</ref> object containing this storage. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modules</parametername>
</parameternamelist>
<parameterdescription>
<para>Module manager for <computeroutput>data</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if storage allocation fails.</para></parameterdescription>
</parameteritem>
</parameterlist>
Typically called as <computeroutput>startDataStorage</computeroutput>(this, &amp;moduleManager()) from a member of <computeroutput>data</computeroutput> when the data is ready to be started. The storage object will take responsibility of calling all module notification methods in <ref refid="classgmx_1_1AnalysisDataModuleManager" kindref="compound">AnalysisDataModuleManager</ref> using <computeroutput>modules</computeroutput>.</para><para>Lifetime of <computeroutput>data</computeroutput> and <computeroutput>modules</computeroutput> must exceed the lifetime of the storage object (typically, the storage object will be a member in <computeroutput>data</computeroutput>).</para><para>Calls <ref refid="classgmx_1_1AnalysisDataModuleManager_1a7348344412f0078fbebbb985dac1e7ce" kindref="member">AnalysisDataModuleManager::notifyDataStart()</ref>, and throws any exceptions this method throws. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" line="331" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.cpp" bodystart="832" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisDataStorage_1a15556beb1726d7503e9c45bb6d385dbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::AnalysisDataStorage::startParallelDataStorage</definition>
        <argsstring>(AbstractAnalysisData *data, AnalysisDataModuleManager *modules, const AnalysisDataParallelOptions &amp;options)</argsstring>
        <name>startParallelDataStorage</name>
        <param>
          <type><ref refid="classgmx_1_1AbstractAnalysisData" kindref="compound">AbstractAnalysisData</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classgmx_1_1AnalysisDataModuleManager" kindref="compound">AnalysisDataModuleManager</ref> *</type>
          <declname>modules</declname>
        </param>
        <param>
          <type>const <ref refid="classgmx_1_1AnalysisDataParallelOptions" kindref="compound">AnalysisDataParallelOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Start storing data in parallel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgmx_1_1AbstractAnalysisData" kindref="compound">AbstractAnalysisData</ref> object containing this storage. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>Parallelization options to use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modules</parametername>
</parameternamelist>
<parameterdescription>
<para>Module manager for <computeroutput>data</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if storage allocation fails.</para></parameterdescription>
</parameteritem>
</parameterlist>
Should be called instead of <ref refid="classgmx_1_1AnalysisDataStorage_1acb12e0e755e7c46565b65c7a2bb7078e" kindref="member">startDataStorage()</ref> if the data will be produced in parallel. Works as <ref refid="classgmx_1_1AnalysisDataStorage_1acb12e0e755e7c46565b65c7a2bb7078e" kindref="member">startDataStorage()</ref>, but additionally initializes the storage and the attached modules to prepare for out-of-order data frames.</para><para>Calls <ref refid="classgmx_1_1AnalysisDataModuleManager_1a13448be130f5e49e2b34b749ca37bd71" kindref="member">AnalysisDataModuleManager::notifyParallelDataStart()</ref>, and throws any exceptions this method throws. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" line="350" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.cpp" bodystart="848" bodyend="863"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisDataStorage_1a3303eeb1ac7f3a697124c5dbff3557e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1AnalysisDataStorageFrame" kindref="compound">AnalysisDataStorageFrame</ref> &amp;</type>
        <definition>AnalysisDataStorageFrame &amp; gmx::AnalysisDataStorage::startFrame</definition>
        <argsstring>(const AnalysisDataFrameHeader &amp;header)</argsstring>
        <name>startFrame</name>
        <param>
          <type>const <ref refid="classgmx_1_1AnalysisDataFrameHeader" kindref="compound">AnalysisDataFrameHeader</ref> &amp;</type>
          <declname>header</declname>
        </param>
        <briefdescription>
<para>Starts storing a new frame. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">header</parametername>
</parameternamelist>
<parameterdescription>
<para>Header for the new frame. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Frame</parametername>
</parameternamelist>
<parameterdescription>
<para>object corresponding to the started frame. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>if storage reallocation fails (only possible if storage of all frames has been requested). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classgmx_1_1APIError" kindref="compound">APIError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if frame is too far in the future.</para></parameterdescription>
</parameteritem>
</parameterlist>
The returned object will be valid until the corresponding <ref refid="classgmx_1_1AnalysisDataStorage_1a27fcfa486e9f6c02da548b5af097c34a" kindref="member">finishFrame()</ref> call.</para><para>Must be called exactly once for each frame index.</para><para>Currently, the implementation only works if the new frame is not too far in the future: If <computeroutput>i</computeroutput> is the index of the last frame such that all frames from 0, ..., <computeroutput>i</computeroutput> have been finished, then <computeroutput>header()</computeroutput>.index() should be at most <computeroutput>parallelizationFactor</computeroutput> larger than <computeroutput>i</computeroutput>, where parallelizationFactor is the parallelization factor passed to setParallelOptions(). Throws <ref refid="classgmx_1_1APIError" kindref="compound">APIError</ref> if this constraint is violated.</para><para>Calls <ref refid="classgmx_1_1AnalysisDataModuleManager_1a1412c4288dfd26fdb37ca2d45d4e5e10" kindref="member">AnalysisDataModuleManager::notifyFrameStart()</ref> (in certain cases) and <ref refid="classgmx_1_1AnalysisDataModuleManager_1a6da2faaf764fd3eb877aa0e78e1f6522" kindref="member">AnalysisDataModuleManager::notifyParallelFrameStart()</ref>, and throws any exceptions these methods throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" line="381" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.cpp" bodystart="867" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisDataStorage_1a9006e8a3f7e34f261de406b3d11c52d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1AnalysisDataStorageFrame" kindref="compound">AnalysisDataStorageFrame</ref> &amp;</type>
        <definition>AnalysisDataStorageFrame &amp; gmx::AnalysisDataStorage::startFrame</definition>
        <argsstring>(int index, real x, real dx)</argsstring>
        <name>startFrame</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="real_8h_1a58a0c7cf2501f4492da833421be92547" kindref="member">real</ref></type>
          <declname>dx</declname>
        </param>
        <briefdescription>
<para>Convenience method to start storing a new frame. </para>        </briefdescription>
        <detaileddescription>
<para>Identical to <computeroutput>startFrame</computeroutput>(AnalysisDataFrameHeader(index, x, dx)); </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" line="387" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.cpp" bodystart="904" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisDataStorage_1a07082e8d572d1dc0c74f14ad69feed01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgmx_1_1AnalysisDataStorageFrame" kindref="compound">AnalysisDataStorageFrame</ref> &amp;</type>
        <definition>AnalysisDataStorageFrame &amp; gmx::AnalysisDataStorage::currentFrame</definition>
        <argsstring>(int index)</argsstring>
        <name>currentFrame</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Obtains a frame object for an in-progress frame. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame index. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Frame</parametername>
</parameternamelist>
<parameterdescription>
<para>object corresponding to <computeroutput>index</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<ref refid="classgmx_1_1AnalysisDataStorage_1a3303eeb1ac7f3a697124c5dbff3557e4" kindref="member">startFrame()</ref> should have been called for the frame with index <computeroutput>index</computeroutput>, and <ref refid="classgmx_1_1AnalysisDataStorage_1a27fcfa486e9f6c02da548b5af097c34a" kindref="member">finishFrame()</ref> should not yet have been called. Returns the same object as returned by the original <ref refid="classgmx_1_1AnalysisDataStorage_1a3303eeb1ac7f3a697124c5dbff3557e4" kindref="member">startFrame()</ref> call for the same index.</para><para>Does not throw. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" line="401" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.cpp" bodystart="911" bodyend="924"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisDataStorage_1a27fcfa486e9f6c02da548b5af097c34a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::AnalysisDataStorage::finishFrame</definition>
        <argsstring>(int index)</argsstring>
        <name>finishFrame</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Convenience method for finishing a data frame. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame index.</para></parameterdescription>
</parameteritem>
</parameterlist>
Identical to <computeroutput>currentFrame(index)</computeroutput>.<ref refid="classgmx_1_1AnalysisDataStorage_1a27fcfa486e9f6c02da548b5af097c34a" kindref="member">finishFrame()</ref>.</para><para><simplesect kind="see"><para><ref refid="classgmx_1_1AnalysisDataStorageFrame_1a0e9f6a09788573f6f53c777d1d63b5ba" kindref="member">AnalysisDataStorageFrame::finishFrame()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" line="411" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.cpp" bodystart="928" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisDataStorage_1aacdfffeac9d6a692e2f65a0027f77e60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::AnalysisDataStorage::finishFrameSerial</definition>
        <argsstring>(int index)</argsstring>
        <name>finishFrameSerial</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Performs in-order sequential processing for a data frame. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame index.</para></parameterdescription>
</parameteritem>
</parameterlist>
If <ref refid="classgmx_1_1AnalysisDataStorage_1a15556beb1726d7503e9c45bb6d385dbb" kindref="member">startParallelDataStorage()</ref> has been called with options that indicate parallelism, this method must be called after <computeroutput>finishFrame(index)</computeroutput> (or the equivalent call in <ref refid="classgmx_1_1AnalysisDataStorageFrame" kindref="compound">AnalysisDataStorageFrame</ref>), such that it is called in the correct order sequentially for each frame.</para><para>If there is no parallelism, this method does nothing; the equivalent processing is done already during <ref refid="classgmx_1_1AnalysisDataStorage_1a27fcfa486e9f6c02da548b5af097c34a" kindref="member">finishFrame()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" line="426" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.cpp" bodystart="934" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="classgmx_1_1AnalysisDataStorage_1ae53f2e2ecb9b51fd57076e174ddb3b29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gmx::AnalysisDataStorage::finishDataStorage</definition>
        <argsstring>()</argsstring>
        <name>finishDataStorage</name>
        <briefdescription>
<para>Finishes storing data. </para>        </briefdescription>
        <detaileddescription>
<para>Calls <ref refid="classgmx_1_1AnalysisDataModuleManager_1af64ece81e837628f70c6efb32b2cd719" kindref="member">AnalysisDataModuleManager::notifyDataFinish()</ref>, and throws any exceptions this method throws. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" line="433" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.cpp" bodystart="943" bodyend="948"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Helper class that implements storage of data. </para>    </briefdescription>
    <detaileddescription>
<para> <libinternal /> This class implements a standard way of storing data to avoid implementing storage in each class derived from <ref refid="classgmx_1_1AbstractAnalysisData" kindref="compound">AbstractAnalysisData</ref> separately. To use this class in a class derived from <ref refid="classgmx_1_1AbstractAnalysisData" kindref="compound">AbstractAnalysisData</ref>, a member variable of this type should be declared and the pure virtual methods forwarded to <ref refid="classgmx_1_1AnalysisDataStorage_1a56d27e3c160f201597e7fa62caeb42d7" kindref="member">frameCount()</ref>, <ref refid="classgmx_1_1AnalysisDataStorage_1ac6ce446a216b2dbeeba1be5215893604" kindref="member">tryGetDataFrame()</ref> and <ref refid="classgmx_1_1AnalysisDataStorage_1a1aeabd17f2b025e1bf31b65766094e8b" kindref="member">requestStorage()</ref>. Storage properties should be set up, and then <ref refid="classgmx_1_1AnalysisDataStorage_1acb12e0e755e7c46565b65c7a2bb7078e" kindref="member">startDataStorage()</ref> or <ref refid="classgmx_1_1AnalysisDataStorage_1a15556beb1726d7503e9c45bb6d385dbb" kindref="member">startParallelDataStorage()</ref> called. New frames can then be added using <ref refid="classgmx_1_1AnalysisDataStorage_1a3303eeb1ac7f3a697124c5dbff3557e4" kindref="member">startFrame()</ref>, <ref refid="classgmx_1_1AnalysisDataStorage_1a07082e8d572d1dc0c74f14ad69feed01" kindref="member">currentFrame()</ref>, <ref refid="classgmx_1_1AnalysisDataStorage_1a27fcfa486e9f6c02da548b5af097c34a" kindref="member">finishFrame()</ref>, and <ref refid="classgmx_1_1AnalysisDataStorage_1aacdfffeac9d6a692e2f65a0027f77e60" kindref="member">finishFrameSerial()</ref> methods (the last is only necessary if <ref refid="classgmx_1_1AnalysisDataStorage_1a15556beb1726d7503e9c45bb6d385dbb" kindref="member">startParallelDataStorage()</ref> is used). When all frames are ready, <ref refid="classgmx_1_1AnalysisDataStorage_1ae53f2e2ecb9b51fd57076e174ddb3b29" kindref="member">finishDataStorage()</ref> must be called. These methods (and <ref refid="classgmx_1_1AnalysisDataStorageFrame_1a12fa5fc11e6826ccf0e6f0a25fb2e1cf" kindref="member">AnalysisDataStorageFrame::finishPointSet()</ref>) take the responsibility of calling all the notification methods in <ref refid="classgmx_1_1AnalysisDataModuleManager" kindref="compound">AnalysisDataModuleManager</ref>,</para><para><xrefsect id="todo_1_todo000009"><xreftitle>Todo</xreftitle><xrefdescription><para>Proper multi-threaded implementation.</para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" line="267" column="1" bodyfile="/mnt/workspace/Release_workflow_2016/gromacs-2016.3/src/gromacs/analysisdata/datastorage.h" bodystart="266" bodyend="439"/>
    <listofallmembers>
      <member refid="classgmx_1_1AnalysisDataStorage_1aa64bc4f3afe3e5d481c4140fa1004e9b" prot="public" virt="non-virtual"><scope>gmx::AnalysisDataStorage</scope><name>AnalysisDataStorage</name></member>
      <member refid="classgmx_1_1AnalysisDataStorage_1a07082e8d572d1dc0c74f14ad69feed01" prot="public" virt="non-virtual"><scope>gmx::AnalysisDataStorage</scope><name>currentFrame</name></member>
      <member refid="classgmx_1_1AnalysisDataStorage_1ae53f2e2ecb9b51fd57076e174ddb3b29" prot="public" virt="non-virtual"><scope>gmx::AnalysisDataStorage</scope><name>finishDataStorage</name></member>
      <member refid="classgmx_1_1AnalysisDataStorage_1a27fcfa486e9f6c02da548b5af097c34a" prot="public" virt="non-virtual"><scope>gmx::AnalysisDataStorage</scope><name>finishFrame</name></member>
      <member refid="classgmx_1_1AnalysisDataStorage_1aacdfffeac9d6a692e2f65a0027f77e60" prot="public" virt="non-virtual"><scope>gmx::AnalysisDataStorage</scope><name>finishFrameSerial</name></member>
      <member refid="classgmx_1_1AnalysisDataStorage_1a56d27e3c160f201597e7fa62caeb42d7" prot="public" virt="non-virtual"><scope>gmx::AnalysisDataStorage</scope><name>frameCount</name></member>
      <member refid="classgmx_1_1AnalysisDataStorage_1adfff34ea87120eb313842688a1780f9b" prot="private" virt="non-virtual"><scope>gmx::AnalysisDataStorage</scope><name>Impl</name></member>
      <member refid="classgmx_1_1AnalysisDataStorage_1a834d09bc7335010cbc0b8769753fb9b5" prot="private" virt="non-virtual"><scope>gmx::AnalysisDataStorage</scope><name>impl_</name></member>
      <member refid="classgmx_1_1AnalysisDataStorage_1a1aeabd17f2b025e1bf31b65766094e8b" prot="public" virt="non-virtual"><scope>gmx::AnalysisDataStorage</scope><name>requestStorage</name></member>
      <member refid="classgmx_1_1AnalysisDataStorage_1acb12e0e755e7c46565b65c7a2bb7078e" prot="public" virt="non-virtual"><scope>gmx::AnalysisDataStorage</scope><name>startDataStorage</name></member>
      <member refid="classgmx_1_1AnalysisDataStorage_1a3303eeb1ac7f3a697124c5dbff3557e4" prot="public" virt="non-virtual"><scope>gmx::AnalysisDataStorage</scope><name>startFrame</name></member>
      <member refid="classgmx_1_1AnalysisDataStorage_1a9006e8a3f7e34f261de406b3d11c52d4" prot="public" virt="non-virtual"><scope>gmx::AnalysisDataStorage</scope><name>startFrame</name></member>
      <member refid="classgmx_1_1AnalysisDataStorage_1a15556beb1726d7503e9c45bb6d385dbb" prot="public" virt="non-virtual"><scope>gmx::AnalysisDataStorage</scope><name>startParallelDataStorage</name></member>
      <member refid="classgmx_1_1AnalysisDataStorage_1ac6ce446a216b2dbeeba1be5215893604" prot="public" virt="non-virtual"><scope>gmx::AnalysisDataStorage</scope><name>tryGetDataFrame</name></member>
      <member refid="classgmx_1_1AnalysisDataStorage_1a7f786a11e3eadff20765a6cfa468efbb" prot="public" virt="non-virtual"><scope>gmx::AnalysisDataStorage</scope><name>~AnalysisDataStorage</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
